
nucleo-f303_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004494  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004804  08004804  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004804  08004804  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004804  08004804  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800480c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  0800487c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  0800487c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8af  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023cd  00000000  00000000  0002e94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b50  00000000  00000000  00030d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00031870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fe65  00000000  00000000  000322d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c41  00000000  00000000  0005213d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1267  00000000  00000000  0005bd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010cfe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b0  00000000  00000000  0010d060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004610 	.word	0x08004610

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08004610 	.word	0x08004610

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <_ZN6spidev9SPIDevice3setEh>:
// SPI-väylään kytketyn laitteen virtualisointiluokka
class SPIDevice {
public:
	SPIDevice(GPIO_TypeDef *SS_port, uint16_t SS_pin);
	~SPIDevice() {};
	void set(uint8_t D) { devData = D; };
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	78fa      	ldrb	r2, [r7, #3]
 80001f8:	729a      	strb	r2, [r3, #10]
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr

08000206 <_ZN6spidev9SPIDevice3getEv>:
	uint8_t get() { return devData; };
 8000206:	b480      	push	{r7}
 8000208:	b083      	sub	sp, #12
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	7a9b      	ldrb	r3, [r3, #10]
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
static void MX_USART2_UART_Init(void);
static void MX_SPI3_Init(void);

using namespace spidev;

int main(void) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
	spi *SPI;
	SPI165 *sIn;
	SPI595 *sOut;
	uint8_t xferData;

	HAL_Init();
 8000226:	f001 f95d 	bl	80014e4 <HAL_Init>

	SystemClock_Config();
 800022a:	f000 f84b 	bl	80002c4 <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 800022e:	f000 f92d 	bl	800048c <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8000232:	f000 f8f7 	bl	8000424 <_ZL19MX_USART2_UART_Initv>
	MX_SPI3_Init();
 8000236:	f000 f8b3 	bl	80003a0 <_ZL12MX_SPI3_Initv>

	SPI = new spi( &hspi3 );
 800023a:	2038      	movs	r0, #56	; 0x38
 800023c:	f003 ff5a 	bl	80040f4 <_Znwj>
 8000240:	4603      	mov	r3, r0
 8000242:	461c      	mov	r4, r3
 8000244:	491d      	ldr	r1, [pc, #116]	; (80002bc <main+0x9c>)
 8000246:	4620      	mov	r0, r4
 8000248:	f000 f9d6 	bl	80005f8 <_ZN6spidev3spiC1EP19__SPI_HandleTypeDef>
 800024c:	60bc      	str	r4, [r7, #8]
	sIn = new SPI165(SS165_GPIO_Port, SS165_Pin, SH_LD165_GPIO_Port, SH_LD165_Pin);
 800024e:	2014      	movs	r0, #20
 8000250:	f003 ff50 	bl	80040f4 <_Znwj>
 8000254:	4603      	mov	r3, r0
 8000256:	461c      	mov	r4, r3
 8000258:	2320      	movs	r3, #32
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <main+0xa0>)
 800025e:	2240      	movs	r2, #64	; 0x40
 8000260:	4917      	ldr	r1, [pc, #92]	; (80002c0 <main+0xa0>)
 8000262:	4620      	mov	r0, r4
 8000264:	f000 faf0 	bl	8000848 <_ZN6spidev6SPI165C1EP12GPIO_TypeDeftS2_t>
 8000268:	607c      	str	r4, [r7, #4]
	SPI->addDevice( sIn );
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	68b8      	ldr	r0, [r7, #8]
 800026e:	f000 fa2f 	bl	80006d0 <_ZN6spidev3spi9addDeviceEPNS_9SPIDeviceE>
	sOut = new SPI595(NULL, 0, OE595_GPIO_Port, OE595_Pin);
 8000272:	2014      	movs	r0, #20
 8000274:	f003 ff3e 	bl	80040f4 <_Znwj>
 8000278:	4603      	mov	r3, r0
 800027a:	461c      	mov	r4, r3
 800027c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <main+0xa0>)
 8000284:	2200      	movs	r2, #0
 8000286:	2100      	movs	r1, #0
 8000288:	4620      	mov	r0, r4
 800028a:	f000 fb2b 	bl	80008e4 <_ZN6spidev6SPI595C1EP12GPIO_TypeDeftS2_t>
 800028e:	603c      	str	r4, [r7, #0]
	SPI->addDevice( sOut );
 8000290:	6839      	ldr	r1, [r7, #0]
 8000292:	68b8      	ldr	r0, [r7, #8]
 8000294:	f000 fa1c 	bl	80006d0 <_ZN6spidev3spi9addDeviceEPNS_9SPIDeviceE>
	xferData = 0x55;
 8000298:	2355      	movs	r3, #85	; 0x55
 800029a:	73fb      	strb	r3, [r7, #15]
	while (1) {
		sOut->set(xferData);
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	7bfa      	ldrb	r2, [r7, #15]
 80002a0:	4611      	mov	r1, r2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffa0 	bl	80001e8 <_ZN6spidev9SPIDevice3setEh>
		SPI->transfer();
 80002a8:	68b8      	ldr	r0, [r7, #8]
 80002aa:	f000 fa22 	bl	80006f2 <_ZN6spidev3spi8transferEv>
		xferData = sIn->get();
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffa8 	bl	8000206 <_ZN6spidev9SPIDevice3getEv>
 80002b6:	4603      	mov	r3, r0
 80002b8:	73fb      	strb	r3, [r7, #15]
		sOut->set(xferData);
 80002ba:	e7ef      	b.n	800029c <main+0x7c>
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	48000800 	.word	0x48000800

080002c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b0a6      	sub	sp, #152	; 0x98
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f004 f895 	bl	8004402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2258      	movs	r2, #88	; 0x58
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f004 f887 	bl	8004402 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	2302      	movs	r3, #2
 80002f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2310      	movs	r3, #16
 80002fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800030c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000310:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fbee 	bl	8001b04 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2301      	movne	r3, #1
 8000330:	2300      	moveq	r3, #0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000338:	f000 f924 	bl	8000584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2302      	movs	r3, #2
 8000342:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000352:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000356:	2102      	movs	r1, #2
 8000358:	4618      	mov	r0, r3
 800035a:	f002 fae9 	bl	8002930 <HAL_RCC_ClockConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf14      	ite	ne
 8000364:	2301      	movne	r3, #1
 8000366:	2300      	moveq	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800036e:	f000 f909 	bl	8000584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000372:	2302      	movs	r3, #2
 8000374:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f002 fd0d 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	bf14      	ite	ne
 8000388:	2301      	movne	r3, #1
 800038a:	2300      	moveq	r3, #0
 800038c:	b2db      	uxtb	r3, r3
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8000392:	f000 f8f7 	bl	8000584 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3798      	adds	r7, #152	; 0x98
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003a6:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <_ZL12MX_SPI3_Initv+0x80>)
 80003a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80003aa:	4b1c      	ldr	r3, [pc, #112]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003be:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003d6:	2238      	movs	r2, #56	; 0x38
 80003d8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003ee:	2207      	movs	r2, #7
 80003f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80003fe:	4807      	ldr	r0, [pc, #28]	; (800041c <_ZL12MX_SPI3_Initv+0x7c>)
 8000400:	f002 feea 	bl	80031d8 <HAL_SPI_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	bf14      	ite	ne
 800040a:	2301      	movne	r3, #1
 800040c:	2300      	moveq	r3, #0
 800040e:	b2db      	uxtb	r3, r3
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8000414:	f000 f8b6 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000008c 	.word	0x2000008c
 8000420:	40003c00 	.word	0x40003c00

08000424 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <_ZL19MX_USART2_UART_Initv+0x64>)
 800042c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000430:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000462:	2200      	movs	r2, #0
 8000464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000466:	4807      	ldr	r0, [pc, #28]	; (8000484 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000468:	f003 fa78 	bl	800395c <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	bf14      	ite	ne
 8000472:	2301      	movne	r3, #1
 8000474:	2300      	moveq	r3, #0
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 800047c:	f000 f882 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000f0 	.word	0x200000f0
 8000488:	40004400 	.word	0x40004400

0800048c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4b35      	ldr	r3, [pc, #212]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a34      	ldr	r2, [pc, #208]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b32      	ldr	r3, [pc, #200]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004b6:	613b      	str	r3, [r7, #16]
 80004b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ba:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a2e      	ldr	r2, [pc, #184]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a28      	ldr	r2, [pc, #160]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a22      	ldr	r2, [pc, #136]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <_ZL12MX_GPIO_Initv+0xec>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f001 fae3 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SH_LD165_Pin|SS165_Pin|CLR595_Pin|OE595_Pin 
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000514:	4819      	ldr	r0, [pc, #100]	; (800057c <_ZL12MX_GPIO_Initv+0xf0>)
 8000516:	f001 fadd 	bl	8001ad4 <HAL_GPIO_WritePin>
                          |RCLK595_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <_ZL12MX_GPIO_Initv+0xf4>)
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	4619      	mov	r1, r3
 800052e:	4813      	ldr	r0, [pc, #76]	; (800057c <_ZL12MX_GPIO_Initv+0xf0>)
 8000530:	f001 f946 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000534:	2320      	movs	r3, #32
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	4619      	mov	r1, r3
 800054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054e:	f001 f937 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SH_LD165_Pin SS165_Pin CLR595_Pin OE595_Pin 
                           RCLK595_Pin */
  GPIO_InitStruct.Pin = SH_LD165_Pin|SS165_Pin|CLR595_Pin|OE595_Pin 
 8000552:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000556:	617b      	str	r3, [r7, #20]
                          |RCLK595_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <_ZL12MX_GPIO_Initv+0xf0>)
 800056c:	f001 f928 	bl	80017c0 <HAL_GPIO_Init>

}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	48000800 	.word	0x48000800
 8000580:	10210000 	.word	0x10210000

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <_ZN6spidev9SPIDeviceD1Ev>:
	~SPIDevice() {};
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <_ZN6spidev9SPIDeviceD1Ev+0x1c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	0800466c 	.word	0x0800466c

080005cc <_ZN6spidev9SPIDevice4loadEPPh>:
	virtual void load(uint8_t **pData) {};
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <_ZN6spidev9SPIDevice4dumpEPPh>:
	virtual void dump(uint8_t **pData) {};
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <_ZN6spidev3spiC1EP19__SPI_HandleTypeDef>:

// SPI-väylän virtualisointiluokka "spi"
// Luokka käyttää HAL-kerrosta sulautetun oheislaitteen ohjaukseen

// konstruktori. Argumenttina HAL-tietorakenteen osoite
spi::spi(SPI_HandleTypeDef *hspi) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <_ZN6spidev3spiC1EP19__SPI_HandleTypeDef+0x2c>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3308      	adds	r3, #8
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f9b6 	bl	800097e <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EEC1Ev>
	hSPI = hspi;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	605a      	str	r2, [r3, #4]
}
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	0800467c 	.word	0x0800467c

08000628 <_ZN6spidev3spiD1Ev>:

// Destruktori.
spi::~spi() {
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <_ZN6spidev3spiD1Ev+0x84>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	601a      	str	r2, [r3, #0]
	SPIDevice *pD;
	// spi-objekti ylläpitää vektoria Bus. STL-luokkakirjaston objektit osaavat hoitaa itsensä.
	// HUOM: jos vektorin elementit ovat osoittimia, niiden osoittamia objekteja ei tuhota.
	// Eli meidän pitää kutsua niiden destruktoria eksplisiittisesti:
	for (std::vector<SPIDevice *>::iterator it = Bus.begin() ; it != Bus.end(); ++it) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3308      	adds	r3, #8
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f9c7 	bl	80009ce <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE5beginEv>
 8000640:	4603      	mov	r3, r0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3308      	adds	r3, #8
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f9d0 	bl	80009ee <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE3endEv>
 800064e:	4603      	mov	r3, r0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	f107 0210 	add.w	r2, r7, #16
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4611      	mov	r1, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f9d7 	bl	8000a10 <_ZN9__gnu_cxxneIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d017      	beq.n	8000698 <_ZN6spidev3spiD1Ev+0x70>
		pD = *it;
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f9f7 	bl	8000a60 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEdeEv>
 8000672:	4603      	mov	r3, r0
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	617b      	str	r3, [r7, #20]
		delete pD;
 8000678:	697c      	ldr	r4, [r7, #20]
 800067a:	2c00      	cmp	r4, #0
 800067c:	d006      	beq.n	800068c <_ZN6spidev3spiD1Ev+0x64>
 800067e:	4620      	mov	r0, r4
 8000680:	f7ff ff94 	bl	80005ac <_ZN6spidev9SPIDeviceD1Ev>
 8000684:	2114      	movs	r1, #20
 8000686:	4620      	mov	r0, r4
 8000688:	f003 fd32 	bl	80040f0 <_ZdlPvj>
	for (std::vector<SPIDevice *>::iterator it = Bus.begin() ; it != Bus.end(); ++it) {
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f9d5 	bl	8000a40 <_ZN9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEppEv>
 8000696:	e7d5      	b.n	8000644 <_ZN6spidev3spiD1Ev+0x1c>
spi::~spi() {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3308      	adds	r3, #8
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f97b 	bl	8000998 <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EED1Ev>
	}
}
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4618      	mov	r0, r3
 80006a6:	371c      	adds	r7, #28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd90      	pop	{r4, r7, pc}
 80006ac:	0800467c 	.word	0x0800467c

080006b0 <_ZN6spidev3spiD0Ev>:
spi::~spi() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
}
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffb5 	bl	8000628 <_ZN6spidev3spiD1Ev>
 80006be:	2138      	movs	r1, #56	; 0x38
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f003 fd15 	bl	80040f0 <_ZdlPvj>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_ZN6spidev3spi9addDeviceEPNS_9SPIDeviceE>:

// Rekisteröidään väylään kytketty piiri ohjaukseen
SPIDevice *spi::addDevice( SPIDevice *device ) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	Bus.push_back(device);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3308      	adds	r3, #8
 80006de:	463a      	mov	r2, r7
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f9c8 	bl	8000a78 <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE9push_backERKS2_>
	return device;
 80006e8:	683b      	ldr	r3, [r7, #0]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_ZN6spidev3spi8transferEv>:
// Siirretään väylän ohjaamien piirien data
// Ennen SPI-siirtoa ladataan tulopiirien siirtorekisterit, sekä
// kopioidaan lähtöpiirieluokkien sisäinen data lähetyspuskuriin.
// SPI-siirron jälkeen kopioidaan tulopuskurin data tulopiiriluokkien sisäiseksi
// ja dumpataan siirretty lähtödata rekisterien pinneihin.
void spi::transfer() {
 80006f2:	b590      	push	{r4, r7, lr}
 80006f4:	b08b      	sub	sp, #44	; 0x2c
 80006f6:	af02      	add	r7, sp, #8
 80006f8:	6078      	str	r0, [r7, #4]
	SPIDevice *pD;
	uint8_t *bufPtr;
	// Iteroidaan piirilistra läpi ja ladataan data siirota varten
	bufPtr = outBuffer;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3325      	adds	r3, #37	; 0x25
 80006fe:	613b      	str	r3, [r7, #16]
	numBytes = 0;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	751a      	strb	r2, [r3, #20]
	for (std::vector<SPIDevice *>::iterator it = Bus.begin() ; it != Bus.end(); ++it) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3308      	adds	r3, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f95f 	bl	80009ce <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE5beginEv>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3308      	adds	r3, #8
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f968 	bl	80009ee <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE3endEv>
 800071e:	4603      	mov	r3, r0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	f107 0214 	add.w	r2, r7, #20
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f96f 	bl	8000a10 <_ZN9__gnu_cxxneIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01b      	beq.n	8000770 <_ZN6spidev3spi8transferEv+0x7e>
		pD = *it;
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f98f 	bl	8000a60 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEdeEv>
 8000742:	4603      	mov	r3, r0
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	61fb      	str	r3, [r7, #28]
		pD->load(&bufPtr);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f107 0210 	add.w	r2, r7, #16
 8000752:	4611      	mov	r1, r2
 8000754:	69f8      	ldr	r0, [r7, #28]
 8000756:	4798      	blx	r3
		numBytes++;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7d1b      	ldrb	r3, [r3, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	751a      	strb	r2, [r3, #20]
	for (std::vector<SPIDevice *>::iterator it = Bus.begin() ; it != Bus.end(); ++it) {
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f969 	bl	8000a40 <_ZN9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEppEv>
 800076e:	e7d1      	b.n	8000714 <_ZN6spidev3spi8transferEv+0x22>
	}
	//SPI-siirto
	HAL_SPI_TransmitReceive(hSPI, outBuffer, inBuffer, numBytes/2, 0xffffffff);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6858      	ldr	r0, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f103 0215 	add.w	r2, r3, #21
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7d1b      	ldrb	r3, [r3, #20]
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	b29c      	uxth	r4, r3
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	4623      	mov	r3, r4
 8000792:	f002 fdb3 	bl	80032fc <HAL_SPI_TransmitReceive>
	// Iteroidaan piirilista läpi ja dumpataan siirretty data
	bufPtr = inBuffer;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3315      	adds	r3, #21
 800079a:	613b      	str	r3, [r7, #16]
	for (std::vector<SPIDevice *>::iterator it = Bus.begin() ; it != Bus.end(); ++it) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3308      	adds	r3, #8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f914 	bl	80009ce <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE5beginEv>
 80007a6:	4603      	mov	r3, r0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3308      	adds	r3, #8
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f91d 	bl	80009ee <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE3endEv>
 80007b4:	4603      	mov	r3, r0
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	f107 0218 	add.w	r2, r7, #24
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f924 	bl	8000a10 <_ZN9__gnu_cxxneIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d016      	beq.n	80007fc <_ZN6spidev3spi8transferEv+0x10a>
		pD = *it;
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f944 	bl	8000a60 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEdeEv>
 80007d8:	4603      	mov	r3, r0
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	61fb      	str	r3, [r7, #28]
		pD->dump(&bufPtr);
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3304      	adds	r3, #4
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f107 0210 	add.w	r2, r7, #16
 80007ea:	4611      	mov	r1, r2
 80007ec:	69f8      	ldr	r0, [r7, #28]
 80007ee:	4798      	blx	r3
	for (std::vector<SPIDevice *>::iterator it = Bus.begin() ; it != Bus.end(); ++it) {
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f923 	bl	8000a40 <_ZN9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEppEv>
 80007fa:	e7d6      	b.n	80007aa <_ZN6spidev3spi8transferEv+0xb8>
	}
}
 80007fc:	bf00      	nop
 80007fe:	3724      	adds	r7, #36	; 0x24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <_ZN6spidev9SPIDeviceC1EP12GPIO_TypeDeft>:

// SPI-piirien kantaluokka
SPIDevice::SPIDevice(GPIO_TypeDef *SS_port, uint16_t SS_pin) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	4613      	mov	r3, r2
 8000810:	80fb      	strh	r3, [r7, #6]
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <_ZN6spidev9SPIDeviceC1EP12GPIO_TypeDeft+0x40>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
	if ( SS_port != 0 ) {
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00d      	beq.n	800083a <_ZN6spidev9SPIDeviceC1EP12GPIO_TypeDeft+0x36>
		ssPort = SS_port;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	60da      	str	r2, [r3, #12]
		ssPin = SS_pin;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	88fa      	ldrh	r2, [r7, #6]
 8000828:	821a      	strh	r2, [r3, #16]
		HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	68d8      	ldr	r0, [r3, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	8a1b      	ldrh	r3, [r3, #16]
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	f001 f94d 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
}
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	0800466c 	.word	0x0800466c

08000848 <_ZN6spidev6SPI165C1EP12GPIO_TypeDeftS2_t>:

// 74HC165 -virtualisointiluokka
SPI165::SPI165(GPIO_TypeDef * SS_port, uint16_t SS_pin, GPIO_TypeDef * Xport, uint16_t Xpin): SPIDevice(SS_port, SS_pin) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4613      	mov	r3, r2
 8000856:	80fb      	strh	r3, [r7, #6]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	88fa      	ldrh	r2, [r7, #6]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ffd0 	bl	8000804 <_ZN6spidev9SPIDeviceC1EP12GPIO_TypeDeft>
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <_ZN6spidev6SPI165C1EP12GPIO_TypeDeftS2_t+0x38>)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	601a      	str	r2, [r3, #0]
	xferPort = Xport;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	605a      	str	r2, [r3, #4]
	xferPin = Xpin;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	8b3a      	ldrh	r2, [r7, #24]
 8000874:	811a      	strh	r2, [r3, #8]
}
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	0800465c 	.word	0x0800465c

08000884 <_ZN6spidev6SPI1654loadEPPh>:


void SPI165::load(uint8_t **pData) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(xferPort, xferPin, GPIO_PIN_RESET);	// rinnakkaislataus
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6858      	ldr	r0, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	891b      	ldrh	r3, [r3, #8]
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	f001 f91b 	bl	8001ad4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fe86 	bl	80015b0 <HAL_Delay>
	HAL_GPIO_WritePin(xferPort, xferPin, GPIO_PIN_SET);		// siirtomoodi
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6858      	ldr	r0, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	891b      	ldrh	r3, [r3, #8]
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	f001 f910 	bl	8001ad4 <HAL_GPIO_WritePin>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_ZN6spidev6SPI1654dumpEPPh>:

void SPI165::dump(uint8_t **pData) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	devData = **pData;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	729a      	strb	r2, [r3, #10]
	*pData++;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	3304      	adds	r3, #4
 80008d4:	603b      	str	r3, [r7, #0]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <_ZN6spidev6SPI595C1EP12GPIO_TypeDeftS2_t>:

SPI595::SPI595(GPIO_TypeDef * SS_port, uint16_t SS_pin, GPIO_TypeDef * Xport, uint16_t Xpin): SPIDevice(SS_port, SS_pin) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4613      	mov	r3, r2
 80008f2:	80fb      	strh	r3, [r7, #6]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	88fa      	ldrh	r2, [r7, #6]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff82 	bl	8000804 <_ZN6spidev9SPIDeviceC1EP12GPIO_TypeDeft>
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <_ZN6spidev6SPI595C1EP12GPIO_TypeDeftS2_t+0x38>)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	601a      	str	r2, [r3, #0]
	xferPort = Xport;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	605a      	str	r2, [r3, #4]
	xferPin = Xpin;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	8b3a      	ldrh	r2, [r7, #24]
 8000910:	811a      	strh	r2, [r3, #8]
}
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	0800464c 	.word	0x0800464c

08000920 <_ZN6spidev6SPI5954loadEPPh>:

// 74HC595 -virtualisointiluokka
void SPI595::load(uint8_t **pData) {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	**pData = devData;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	7a92      	ldrb	r2, [r2, #10]
 8000932:	701a      	strb	r2, [r3, #0]
	*pData++;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	3304      	adds	r3, #4
 8000938:	603b      	str	r3, [r7, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_ZN6spidev6SPI5954dumpEPPh>:

void SPI595::dump(uint8_t **pData) {
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(xferPort, xferPin, GPIO_PIN_SET);		// lähtö disable, lähtörekisterin lataus (RCLK nouseva reuna)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6858      	ldr	r0, [r3, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	891b      	ldrh	r3, [r3, #8]
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	f001 f8ba 	bl	8001ad4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f000 fe25 	bl	80015b0 <HAL_Delay>
	HAL_GPIO_WritePin(xferPort, xferPin, GPIO_PIN_RESET);	// Lähtö enable
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6858      	ldr	r0, [r3, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	891b      	ldrh	r3, [r3, #8]
 800096e:	2200      	movs	r2, #0
 8000970:	4619      	mov	r1, r3
 8000972:	f001 f8af 	bl	8001ad4 <HAL_GPIO_WritePin>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f8a6 	bl	8000ada <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EEC1Ev>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681c      	ldr	r4, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f8bc 	bl	8000b28 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
 80009b0:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80009b2:	461a      	mov	r2, r3
 80009b4:	4629      	mov	r1, r5
 80009b6:	4620      	mov	r0, r4
 80009b8:	f000 f8c1 	bl	8000b3e <_ZSt8_DestroyIPPN6spidev9SPIDeviceES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f898 	bl	8000af4 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EED1Ev>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bdb0      	pop	{r4, r5, r7, pc}

080009ce <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f8bb 	bl	8000b5a <_ZN9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	1d1a      	adds	r2, r3, #4
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f8aa 	bl	8000b5a <_ZN9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_ZN9__gnu_cxxneIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f8ad 	bl	8000b7a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
 8000a20:	4603      	mov	r3, r0
 8000a22:	681c      	ldr	r4, [r3, #0]
 8000a24:	6838      	ldr	r0, [r7, #0]
 8000a26:	f000 f8a8 	bl	8000b7a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	429c      	cmp	r4, r3
 8000a30:	bf14      	ite	ne
 8000a32:	2301      	movne	r3, #1
 8000a34:	2300      	moveq	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <_ZN9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1d1a      	adds	r2, r3, #4
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
	return *this;
 8000a52:	687b      	ldr	r3, [r7, #4]
      }
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE9push_backERKS2_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00c      	beq.n	8000aa8 <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE9push_backERKS2_+0x30>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	f000 f885 	bl	8000ba6 <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	1d1a      	adds	r2, r3, #4
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8000aa6:	e008      	b.n	8000aba <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE9push_backERKS2_+0x42>
	  _M_realloc_insert(end(), __x);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ffa0 	bl	80009ee <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE3endEv>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f889 	bl	8000bcc <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f91f 	bl	8000d0e <_ZNSaIPN6spidev9SPIDeviceEED1Ev>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EEC1Ev>:
      _Vector_base()
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f8fd 	bl	8000ce4 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE12_Vector_implC1Ev>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8000b04:	461a      	mov	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8000b0e:	461a      	mov	r2, r3
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f908 	bl	8000d26 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffd2 	bl	8000ac2 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE12_Vector_implD1Ev>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_ZSt8_DestroyIPPN6spidev9SPIDeviceES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f000 f8fd 	bl	8000d4c <_ZSt8_DestroyIPPN6spidev9SPIDeviceEEvT_S4_>
    }
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_ZN9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_ZSt7forwardIRKPN6spidev9SPIDeviceEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffec 	bl	8000b90 <_ZSt7forwardIRKPN6spidev9SPIDeviceEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f000 f8d1 	bl	8000d66 <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8000bd8:	4a41      	ldr	r2, [pc, #260]	; (8000ce0 <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x114>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 f8da 	bl	8000d96 <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE12_M_check_lenEjPKc>
 8000be2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff fef2 	bl	80009ce <_ZNSt6vectorIPN6spidev9SPIDeviceESaIS2_EE5beginEv>
 8000bea:	4603      	mov	r3, r0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	f107 0214 	add.w	r2, r7, #20
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f914 	bl	8000e26 <_ZN9__gnu_cxxmiIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f923 	bl	8000e52 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE11_M_allocateEj>
 8000c0c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000c12:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8000c18:	69fa      	ldr	r2, [r7, #28]
 8000c1a:	18d5      	adds	r5, r2, r3
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ffb7 	bl	8000b90 <_ZSt7forwardIRKPN6spidev9SPIDeviceEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4629      	mov	r1, r5
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f7ff ffbc 	bl	8000ba6 <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681c      	ldr	r4, [r3, #0]
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff9d 	bl	8000b7a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
 8000c40:	4603      	mov	r3, r0
 8000c42:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff6e 	bl	8000b28 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
 8000c4c:	4603      	mov	r3, r0
	  __new_finish
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	4629      	mov	r1, r5
 8000c52:	4620      	mov	r0, r4
 8000c54:	f000 f911 	bl	8000e7a <_ZSt34__uninitialized_move_if_noexcept_aIPPN6spidev9SPIDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>
 8000c58:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff88 	bl	8000b7a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	681c      	ldr	r4, [r3, #0]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff57 	bl	8000b28 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
 8000c7a:	4603      	mov	r3, r0
	  __new_finish
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4629      	mov	r1, r5
 8000c80:	4620      	mov	r0, r4
 8000c82:	f000 f8fa 	bl	8000e7a <_ZSt34__uninitialized_move_if_noexcept_aIPPN6spidev9SPIDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>
 8000c86:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681c      	ldr	r4, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff48 	bl	8000b28 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
 8000c98:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f7ff ff4d 	bl	8000b3e <_ZSt8_DestroyIPPN6spidev9SPIDeviceES2_EvT_S4_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f000 f834 	bl	8000d26 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	69fa      	ldr	r2, [r7, #28]
 8000cc2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	441a      	add	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	609a      	str	r2, [r3, #8]
    }
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08004628 	.word	0x08004628

08000ce4 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f8dd 	bl	8000eac <_ZNSaIPN6spidev9SPIDeviceEEC1Ev>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
	{ }
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_ZNSaIPN6spidev9SPIDeviceEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f8d4 	bl	8000ec4 <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEED1Ev>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f8cb 	bl	8000eda <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE10deallocateERS3_PS2_j>
      }
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_ZSt8_DestroyIPPN6spidev9SPIDeviceEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000d56:	6839      	ldr	r1, [r7, #0]
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f8cd 	bl	8000ef8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN6spidev9SPIDeviceEEEvT_S6_>
    }
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000d66:	b590      	push	{r4, r7, lr}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff0c 	bl	8000b90 <_ZSt7forwardIRKPN6spidev9SPIDeviceEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	681c      	ldr	r4, [r3, #0]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2004      	movs	r0, #4
 8000d82:	f7ff fc06 	bl	8000592 <_ZnwjPv>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE9constructIS3_JRKS3_EEEvPT_DpOT0_+0x28>
 8000d8c:	601c      	str	r4, [r3, #0]
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}

08000d96 <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000d96:	b590      	push	{r4, r7, lr}
 8000d98:	b087      	sub	sp, #28
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f8b3 	bl	8000f0e <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE8max_sizeEv>
 8000da8:	4604      	mov	r4, r0
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f000 f8c0 	bl	8000f30 <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE4sizeEv>
 8000db0:	4603      	mov	r3, r0
 8000db2:	1ae2      	subs	r2, r4, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	bf34      	ite	cc
 8000dba:	2301      	movcc	r3, #1
 8000dbc:	2300      	movcs	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 faa5 	bl	8004316 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f000 f8af 	bl	8000f30 <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE4sizeEv>
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f000 f8ab 	bl	8000f30 <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE4sizeEv>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f8b2 	bl	8000f52 <_ZSt3maxIjERKT_S2_S2_>
 8000dee:	4603      	mov	r3, r0
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4423      	add	r3, r4
 8000df4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f000 f89a 	bl	8000f30 <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE4sizeEv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d306      	bcc.n	8000e12 <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE12_M_check_lenEjPKc+0x7c>
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f000 f882 	bl	8000f0e <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE8max_sizeEv>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d904      	bls.n	8000e1c <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE12_M_check_lenEjPKc+0x86>
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f000 f87b 	bl	8000f0e <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE8max_sizeEv>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	e000      	b.n	8000e1e <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE12_M_check_lenEjPKc+0x88>
 8000e1c:	697b      	ldr	r3, [r7, #20]
      }
 8000e1e:	4618      	mov	r0, r3
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}

08000e26 <_ZN9__gnu_cxxmiIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000e26:	b590      	push	{r4, r7, lr}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fea2 	bl	8000b7a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
 8000e36:	4603      	mov	r3, r0
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	461c      	mov	r4, r3
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f7ff fe9c 	bl	8000b7a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6spidev9SPIDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
 8000e42:	4603      	mov	r3, r0
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1ae3      	subs	r3, r4, r3
 8000e48:	109b      	asrs	r3, r3, #2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd90      	pop	{r4, r7, pc}

08000e52 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE11_M_allocateEj+0x1e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6839      	ldr	r1, [r7, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f887 	bl	8000f7a <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE8allocateERS3_j>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	e000      	b.n	8000e72 <_ZNSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE11_M_allocateEj+0x20>
 8000e70:	2300      	movs	r3, #0
      }
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_ZSt34__uninitialized_move_if_noexcept_aIPPN6spidev9SPIDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000e7a:	b590      	push	{r4, r7, lr}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 f885 	bl	8000f98 <_ZSt32__make_move_if_noexcept_iteratorIPN6spidev9SPIDeviceESt13move_iteratorIPS2_EET0_PT_>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	68b8      	ldr	r0, [r7, #8]
 8000e92:	f000 f881 	bl	8000f98 <_ZSt32__make_move_if_noexcept_iteratorIPN6spidev9SPIDeviceESt13move_iteratorIPS2_EET0_PT_>
 8000e96:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f000 f88a 	bl	8000fb6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN6spidev9SPIDeviceEES4_S3_ET0_T_S7_S6_RSaIT1_E>
 8000ea2:	4603      	mov	r3, r0
    }
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd90      	pop	{r4, r7, pc}

08000eac <_ZNSaIPN6spidev9SPIDeviceEEC1Ev>:
      allocator() throw() { }
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f88f 	bl	8000fd8 <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEEC1Ev>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f87f 	bl	8000fee <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE10deallocateEPS3_j>
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN6spidev9SPIDeviceEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f881 	bl	8001020 <_ZNKSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f871 	bl	8001008 <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE8max_sizeERKS3_>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZNKSt6vectorIPN6spidev9SPIDeviceESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	109b      	asrs	r3, r3, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d201      	bcs.n	8000f6c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	e000      	b.n	8000f6e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000f6c:	687b      	ldr	r3, [r7, #4]
    }
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000f84:	2200      	movs	r2, #0
 8000f86:	6839      	ldr	r1, [r7, #0]
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f854 	bl	8001036 <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE8allocateEjPKv>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZSt32__make_move_if_noexcept_iteratorIPN6spidev9SPIDeviceESt13move_iteratorIPS2_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f863 	bl	8001072 <_ZNSt13move_iteratorIPPN6spidev9SPIDeviceEEC1ES3_>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN6spidev9SPIDeviceEES4_S3_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 f861 	bl	8001090 <_ZSt18uninitialized_copyISt13move_iteratorIPPN6spidev9SPIDeviceEES4_ET0_T_S7_S6_>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f003 f986 	bl	800430c <_ZdlPv>
      }
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZNSt16allocator_traitsISaIPN6spidev9SPIDeviceEEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f84f 	bl	80010b4 <_ZNK9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE8max_sizeEv>
 8001016:	4603      	mov	r3, r0
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZNKSt12_Vector_baseIPN6spidev9SPIDeviceESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f836 	bl	80010b4 <_ZNK9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE8max_sizeEv>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4293      	cmp	r3, r2
 800104e:	bf8c      	ite	hi
 8001050:	2301      	movhi	r3, #1
 8001052:	2300      	movls	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <_ZN9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800105a:	f003 f959 	bl	8004310 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f003 f846 	bl	80040f4 <_Znwj>
 8001068:	4603      	mov	r3, r0
      }
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZNSt13move_iteratorIPPN6spidev9SPIDeviceEEC1ES3_>:
      move_iterator(iterator_type __i)
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_ZSt18uninitialized_copyISt13move_iteratorIPPN6spidev9SPIDeviceEES4_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800109c:	2301      	movs	r3, #1
 800109e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f811 	bl	80010cc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN6spidev9SPIDeviceEES6_EET0_T_S9_S8_>
 80010aa:	4603      	mov	r3, r0
    }
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZNK9__gnu_cxx13new_allocatorIPN6spidev9SPIDeviceEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80010bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN6spidev9SPIDeviceEES6_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f805 	bl	80010ec <_ZSt4copyISt13move_iteratorIPPN6spidev9SPIDeviceEES4_ET0_T_S7_S6_>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_ZSt4copyISt13move_iteratorIPPN6spidev9SPIDeviceEES4_ET0_T_S7_S6_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f80f 	bl	800111c <_ZSt12__miter_baseIPPN6spidev9SPIDeviceEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80010fe:	4604      	mov	r4, r0
 8001100:	68b8      	ldr	r0, [r7, #8]
 8001102:	f000 f80b 	bl	800111c <_ZSt12__miter_baseIPPN6spidev9SPIDeviceEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001106:	4603      	mov	r3, r0
	       __result));
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4619      	mov	r1, r3
 800110c:	4620      	mov	r0, r4
 800110e:	f000 f816 	bl	800113e <_ZSt14__copy_move_a2ILb1EPPN6spidev9SPIDeviceES3_ET1_T0_S5_S4_>
 8001112:	4603      	mov	r3, r0
    }
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}

0800111c <_ZSt12__miter_baseIPPN6spidev9SPIDeviceEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f825 	bl	8001176 <_ZNKSt13move_iteratorIPPN6spidev9SPIDeviceEE4baseEv>
 800112c:	4603      	mov	r3, r0
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f82d 	bl	800118e <_ZSt12__miter_baseIPPN6spidev9SPIDeviceEET_S4_>
 8001134:	4603      	mov	r3, r0
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_ZSt14__copy_move_a2ILb1EPPN6spidev9SPIDeviceES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800113e:	b5b0      	push	{r4, r5, r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f82a 	bl	80011a4 <_ZSt12__niter_baseIPPN6spidev9SPIDeviceEET_S4_>
 8001150:	4604      	mov	r4, r0
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f000 f826 	bl	80011a4 <_ZSt12__niter_baseIPPN6spidev9SPIDeviceEET_S4_>
 8001158:	4605      	mov	r5, r0
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f822 	bl	80011a4 <_ZSt12__niter_baseIPPN6spidev9SPIDeviceEET_S4_>
 8001160:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8001162:	461a      	mov	r2, r3
 8001164:	4629      	mov	r1, r5
 8001166:	4620      	mov	r0, r4
 8001168:	f000 f827 	bl	80011ba <_ZSt13__copy_move_aILb1EPPN6spidev9SPIDeviceES3_ET1_T0_S5_S4_>
 800116c:	4603      	mov	r3, r0
    }
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}

08001176 <_ZNKSt13move_iteratorIPPN6spidev9SPIDeviceEE4baseEv>:
      base() const
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_ZSt12__miter_baseIPPN6spidev9SPIDeviceEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZSt12__niter_baseIPPN6spidev9SPIDeviceEET_S4_>:
    __niter_base(_Iterator __it)
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    { return __it; }
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <_ZSt13__copy_move_aILb1EPPN6spidev9SPIDeviceES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80011c6:	2301      	movs	r3, #1
 80011c8:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 f805 	bl	80011de <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6spidev9SPIDeviceEEEPT_PKS6_S9_S7_>
 80011d4:	4603      	mov	r3, r0
    }
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6spidev9SPIDeviceEEEPT_PKS6_S9_S7_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	109b      	asrs	r3, r3, #2
 80011f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6spidev9SPIDeviceEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	461a      	mov	r2, r3
 8001200:	68f9      	ldr	r1, [r7, #12]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f003 f8e4 	bl	80043d0 <memmove>
	  return __result + _Num;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
	}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x44>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x44>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x44>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x44>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124e:	2007      	movs	r0, #7
 8001250:	f000 fa82 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_SPI_MspInit+0x7c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d128      	bne.n	80012d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_SPI_MspInit+0x80>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <HAL_SPI_MspInit+0x80>)
 8001288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_SPI_MspInit+0x80>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_SPI_MspInit+0x80>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_SPI_MspInit+0x80>)
 80012a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_SPI_MspInit+0x80>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c4:	2306      	movs	r3, #6
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_SPI_MspInit+0x84>)
 80012d0:	f000 fa76 	bl	80017c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40003c00 	.word	0x40003c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000800 	.word	0x48000800

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_UART_MspInit+0x7c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d128      	bne.n	800135c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_UART_MspInit+0x80>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a16      	ldr	r2, [pc, #88]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800133a:	230c      	movs	r3, #12
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134a:	2307      	movs	r3, #7
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f000 fa32 	bl	80017c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40004400 	.word	0x40004400
 8001368:	40021000 	.word	0x40021000

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f8d6 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_kill>:

int _kill(int pid, int sig)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013e2:	f002 ffbb 	bl	800435c <__errno>
 80013e6:	4602      	mov	r2, r0
 80013e8:	2316      	movs	r3, #22
 80013ea:	6013      	str	r3, [r2, #0]
	return -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_exit>:

void _exit (int status)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ffe7 	bl	80013d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800140a:	e7fe      	b.n	800140a <_exit+0x12>

0800140c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <_sbrk+0x50>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x16>
		heap_end = &end;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <_sbrk+0x50>)
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <_sbrk+0x54>)
 8001420:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <_sbrk+0x50>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <_sbrk+0x50>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	466a      	mov	r2, sp
 8001432:	4293      	cmp	r3, r2
 8001434:	d907      	bls.n	8001446 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001436:	f002 ff91 	bl	800435c <__errno>
 800143a:	4602      	mov	r2, r0
 800143c:	230c      	movs	r3, #12
 800143e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	e006      	b.n	8001454 <_sbrk+0x48>
	}

	heap_end += incr;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <_sbrk+0x50>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a03      	ldr	r2, [pc, #12]	; (800145c <_sbrk+0x50>)
 8001450:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000170 	.word	0x20000170
 8001460:	20000188 	.word	0x20000188

08001464 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <SystemInit+0x28>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <SystemInit+0x28>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <SystemInit+0x28>)
 800147a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147e:	609a      	str	r2, [r3, #8]
#endif
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001494:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001496:	e003      	b.n	80014a0 <LoopCopyDataInit>

08001498 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800149a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800149c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800149e:	3104      	adds	r1, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014a8:	d3f6      	bcc.n	8001498 <CopyDataInit>
	ldr	r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014ac:	e002      	b.n	80014b4 <LoopFillZerobss>

080014ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014b0:	f842 3b04 	str.w	r3, [r2], #4

080014b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <LoopForever+0x16>)
	cmp	r2, r3
 80014b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014b8:	d3f9      	bcc.n	80014ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ba:	f7ff ffd3 	bl	8001464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f002 ff53 	bl	8004368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c2:	f7fe fead 	bl	8000220 <main>

080014c6 <LoopForever>:

LoopForever:
    b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014c8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80014cc:	0800480c 	.word	0x0800480c
	ldr	r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014d4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80014d8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80014dc:	20000188 	.word	0x20000188

080014e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_Init+0x28>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_Init+0x28>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 f92f 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f808 	bl	8001510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff fe8a 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000

08001510 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x54>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x58>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f939 	bl	80017a6 <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 f90f 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_InitTick+0x5c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000000 	.word	0x20000000
 8001568:	20000008 	.word	0x20000008
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_IncTick+0x24>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008
 8001594:	20000180 	.word	0x20000180

08001598 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;  
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000180 	.word	0x20000180

080015b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff ffee 	bl	8001598 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d005      	beq.n	80015d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_Delay+0x40>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015d6:	bf00      	nop
 80015d8:	f7ff ffde 	bl	8001598 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d8f7      	bhi.n	80015d8 <HAL_Delay+0x28>
  {
  }
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000008 	.word	0x20000008

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff47 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff5c 	bl	800163c <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffb0 	bl	8001714 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	e160      	b.n	8001a92 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8152 	beq.w	8001a8c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x38>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b12      	cmp	r3, #18
 80017f6:	d123      	bne.n	8001840 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	6939      	ldr	r1, [r7, #16]
 800183c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d00b      	beq.n	8001894 <HAL_GPIO_Init+0xd4>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001888:	2b11      	cmp	r3, #17
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b12      	cmp	r3, #18
 8001892:	d130      	bne.n	80018f6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ca:	2201      	movs	r2, #1
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	f003 0201 	and.w	r2, r3, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80ac 	beq.w	8001a8c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001934:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a5d      	ldr	r2, [pc, #372]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800194c:	4a59      	ldr	r2, [pc, #356]	; (8001ab4 <HAL_GPIO_Init+0x2f4>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001976:	d025      	beq.n	80019c4 <HAL_GPIO_Init+0x204>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d01f      	beq.n	80019c0 <HAL_GPIO_Init+0x200>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <HAL_GPIO_Init+0x2fc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d019      	beq.n	80019bc <HAL_GPIO_Init+0x1fc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4d      	ldr	r2, [pc, #308]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_GPIO_Init+0x1f8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x304>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00d      	beq.n	80019b4 <HAL_GPIO_Init+0x1f4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_GPIO_Init+0x308>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d007      	beq.n	80019b0 <HAL_GPIO_Init+0x1f0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4a      	ldr	r2, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x30c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_GPIO_Init+0x1ec>
 80019a8:	2306      	movs	r3, #6
 80019aa:	e00c      	b.n	80019c6 <HAL_GPIO_Init+0x206>
 80019ac:	2307      	movs	r3, #7
 80019ae:	e00a      	b.n	80019c6 <HAL_GPIO_Init+0x206>
 80019b0:	2305      	movs	r3, #5
 80019b2:	e008      	b.n	80019c6 <HAL_GPIO_Init+0x206>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_Init+0x206>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e004      	b.n	80019c6 <HAL_GPIO_Init+0x206>
 80019bc:	2302      	movs	r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x206>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_GPIO_Init+0x206>
 80019c4:	2300      	movs	r3, #0
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019d6:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <HAL_GPIO_Init+0x2f4>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a08:	4a31      	ldr	r2, [pc, #196]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a32:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f ae97 	bne.w	80017d0 <HAL_GPIO_Init+0x10>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	48000c00 	.word	0x48000c00
 8001ac4:	48001000 	.word	0x48001000
 8001ac8:	48001400 	.word	0x48001400
 8001acc:	48001800 	.word	0x48001800
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f000 bf01 	b.w	8002920 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8160 	beq.w	8001dee <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b2e:	4bae      	ldr	r3, [pc, #696]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d00c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b3a:	4bab      	ldr	r3, [pc, #684]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d159      	bne.n	8001bfa <HAL_RCC_OscConfig+0xf6>
 8001b46:	4ba8      	ldr	r3, [pc, #672]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b52:	d152      	bne.n	8001bfa <HAL_RCC_OscConfig+0xf6>
 8001b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b58:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x82>
 8001b80:	4b99      	ldr	r3, [pc, #612]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	e015      	b.n	8001bb2 <HAL_RCC_OscConfig+0xae>
 8001b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ba2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001bae:	4b8e      	ldr	r3, [pc, #568]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001bba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001bbe:	fa92 f2a2 	rbit	r2, r2
 8001bc2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001bc6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f042 0220 	orr.w	r2, r2, #32
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f002 021f 	and.w	r2, r2, #31
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8102 	beq.w	8001dec <HAL_RCC_OscConfig+0x2e8>
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 80fc 	bne.w	8001dec <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f000 be93 	b.w	8002920 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x110>
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e030      	b.n	8001c76 <HAL_RCC_OscConfig+0x172>
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x134>
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6e      	ldr	r2, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01e      	b.n	8001c76 <HAL_RCC_OscConfig+0x172>
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c42:	d10c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x15a>
 8001c44:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a67      	ldr	r2, [pc, #412]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b65      	ldr	r3, [pc, #404]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a64      	ldr	r2, [pc, #400]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0x172>
 8001c5e:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5e      	ldr	r2, [pc, #376]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d059      	beq.n	8001d34 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fc8a 	bl	8001598 <HAL_GetTick>
 8001c84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fc85 	bl	8001598 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d902      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	f000 be40 	b.w	8002920 <HAL_RCC_OscConfig+0xe1c>
 8001ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001cb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d102      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x1ce>
 8001ccc:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x1fa>
 8001cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d02:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d0a:	fa92 f2a2 	rbit	r2, r2
 8001d0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d16:	fab2 f282 	clz	r2, r2
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f002 021f 	and.w	r2, r2, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ab      	beq.n	8001c8a <HAL_RCC_OscConfig+0x186>
 8001d32:	e05c      	b.n	8001dee <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fc30 	bl	8001598 <HAL_GetTick>
 8001d38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3e:	f7ff fc2b 	bl	8001598 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d902      	bls.n	8001d54 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	f000 bde6 	b.w	8002920 <HAL_RCC_OscConfig+0xe1c>
 8001d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d58:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001d68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <HAL_RCC_OscConfig+0x282>
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x2ae>
 8001d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001da2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_RCC_OscConfig+0x2e4>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001dba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001dbe:	fa92 f2a2 	rbit	r2, r2
 8001dc2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001dc6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dca:	fab2 f282 	clz	r2, r2
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f042 0220 	orr.w	r2, r2, #32
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ab      	bne.n	8001d3e <HAL_RCC_OscConfig+0x23a>
 8001de6:	e002      	b.n	8001dee <HAL_RCC_OscConfig+0x2ea>
 8001de8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8170 	beq.w	80020de <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dfe:	4bd0      	ldr	r3, [pc, #832]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e0a:	4bcd      	ldr	r3, [pc, #820]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d16d      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3ee>
 8001e16:	4bca      	ldr	r3, [pc, #808]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e22:	d166      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3ee>
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001e36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_OscConfig+0x350>
 8001e4e:	4bbc      	ldr	r3, [pc, #752]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e013      	b.n	8001e7c <HAL_RCC_OscConfig+0x378>
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e6c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e78:	4bb1      	ldr	r3, [pc, #708]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e82:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e86:	fa92 f2a2 	rbit	r2, r2
 8001e8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3ba>
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d002      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f000 bd31 	b.w	8002920 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4ba0      	ldr	r3, [pc, #640]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	21f8      	movs	r1, #248	; 0xf8
 8001ece:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ed6:	fa91 f1a1 	rbit	r1, r1
 8001eda:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001ede:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ee2:	fab1 f181 	clz	r1, r1
 8001ee6:	b2c9      	uxtb	r1, r1
 8001ee8:	408b      	lsls	r3, r1
 8001eea:	4995      	ldr	r1, [pc, #596]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef0:	e0f5      	b.n	80020de <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8085 	beq.w	8002008 <HAL_RCC_OscConfig+0x504>
 8001efe:	2301      	movs	r3, #1
 8001f00:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	461a      	mov	r2, r3
 8001f26:	2301      	movs	r3, #1
 8001f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fb35 	bl	8001598 <HAL_GetTick>
 8001f2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f34:	f7ff fb30 	bl	8001598 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d902      	bls.n	8001f4a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	f000 bceb 	b.w	8002920 <HAL_RCC_OscConfig+0xe1c>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001f5c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d102      	bne.n	8001f7a <HAL_RCC_OscConfig+0x476>
 8001f74:	4b72      	ldr	r3, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	e013      	b.n	8001fa2 <HAL_RCC_OscConfig+0x49e>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f92:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f9e:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001fa8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001fac:	fa92 f2a2 	rbit	r2, r2
 8001fb0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001fb4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fb8:	fab2 f282 	clz	r2, r2
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f042 0220 	orr.w	r2, r2, #32
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f002 021f 	and.w	r2, r2, #31
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0af      	beq.n	8001f34 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	21f8      	movs	r1, #248	; 0xf8
 8001fe4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001fec:	fa91 f1a1 	rbit	r1, r1
 8001ff0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001ff4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ff8:	fab1 f181 	clz	r1, r1
 8001ffc:	b2c9      	uxtb	r1, r1
 8001ffe:	408b      	lsls	r3, r1
 8002000:	494f      	ldr	r1, [pc, #316]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
 8002006:	e06a      	b.n	80020de <HAL_RCC_OscConfig+0x5da>
 8002008:	2301      	movs	r3, #1
 800200a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800201a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002028:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	461a      	mov	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fab0 	bl	8001598 <HAL_GetTick>
 8002038:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff faab 	bl	8001598 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d902      	bls.n	8002054 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	f000 bc66 	b.w	8002920 <HAL_RCC_OscConfig+0xe1c>
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002066:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <HAL_RCC_OscConfig+0x580>
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0x5a8>
 8002084:	2302      	movs	r3, #2
 8002086:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800209c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x63c>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2202      	movs	r2, #2
 80020ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80020b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80020b6:	fa92 f2a2 	rbit	r2, r2
 80020ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80020be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020c2:	fab2 f282 	clz	r2, r2
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f042 0220 	orr.w	r2, r2, #32
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f002 021f 	and.w	r2, r2, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f202 	lsl.w	r2, r1, r2
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1af      	bne.n	800203e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80da 	beq.w	80022a2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d069      	beq.n	80021cc <HAL_RCC_OscConfig+0x6c8>
 80020f8:	2301      	movs	r3, #1
 80020fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800210a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_OscConfig+0x640>)
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	461a      	mov	r2, r3
 800211e:	2301      	movs	r3, #1
 8002120:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7ff fa39 	bl	8001598 <HAL_GetTick>
 8002126:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	e00d      	b.n	8002148 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff fa34 	bl	8001598 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d905      	bls.n	8002148 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e3ef      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
 8002140:	40021000 	.word	0x40021000
 8002144:	10908120 	.word	0x10908120
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002160:	2202      	movs	r2, #2
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800218a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218c:	4ba4      	ldr	r3, [pc, #656]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 800218e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002190:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002194:	2102      	movs	r1, #2
 8002196:	6019      	str	r1, [r3, #0]
 8002198:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f1a3 	rbit	r1, r3
 80021a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021a6:	6019      	str	r1, [r3, #0]
  return result;
 80021a8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0b0      	beq.n	800212c <HAL_RCC_OscConfig+0x628>
 80021ca:	e06a      	b.n	80022a2 <HAL_RCC_OscConfig+0x79e>
 80021cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	fa93 f2a3 	rbit	r2, r3
 80021de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021e2:	601a      	str	r2, [r3, #0]
  return result;
 80021e4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x920>)
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	461a      	mov	r2, r3
 80021fa:	2300      	movs	r3, #0
 80021fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7ff f9cb 	bl	8001598 <HAL_GetTick>
 8002202:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002206:	e009      	b.n	800221c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002208:	f7ff f9c6 	bl	8001598 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e381      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
 800221c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002238:	2202      	movs	r2, #2
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002250:	2202      	movs	r2, #2
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f2a3 	rbit	r2, r3
 800225e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002262:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	4b6e      	ldr	r3, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002268:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800226c:	2102      	movs	r1, #2
 800226e:	6019      	str	r1, [r3, #0]
 8002270:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f1a3 	rbit	r1, r3
 800227a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800227e:	6019      	str	r1, [r3, #0]
  return result;
 8002280:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1b2      	bne.n	8002208 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8157 	beq.w	8002560 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b8:	4b59      	ldr	r3, [pc, #356]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d112      	bne.n	80022ea <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a55      	ldr	r2, [pc, #340]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ce:	61d3      	str	r3, [r2, #28]
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <HAL_RCC_OscConfig+0x924>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x924>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a4b      	ldr	r2, [pc, #300]	; (8002428 <HAL_RCC_OscConfig+0x924>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7ff f949 	bl	8001598 <HAL_GetTick>
 8002306:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	e009      	b.n	8002320 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230c:	f7ff f944 	bl	8001598 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	; 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e2ff      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCC_OscConfig+0x924>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ef      	beq.n	800230c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d106      	bne.n	8002344 <HAL_RCC_OscConfig+0x840>
 8002336:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a39      	ldr	r2, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	e02f      	b.n	80023a4 <HAL_RCC_OscConfig+0x8a0>
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x864>
 800234e:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a33      	ldr	r2, [pc, #204]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a30      	ldr	r2, [pc, #192]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6213      	str	r3, [r2, #32]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0x8a0>
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b05      	cmp	r3, #5
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x888>
 8002372:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0x8a0>
 800238c:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 800239e:	f023 0304 	bic.w	r3, r3, #4
 80023a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06a      	beq.n	8002484 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7ff f8f3 	bl	8001598 <HAL_GetTick>
 80023b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7ff f8ee 	bl	8001598 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e2a7      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
 80023d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023d4:	2202      	movs	r2, #2
 80023d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f2a3 	rbit	r2, r3
 80023fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023fe:	601a      	str	r2, [r3, #0]
  return result;
 8002400:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002404:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d108      	bne.n	800242c <HAL_RCC_OscConfig+0x928>
 800241a:	4b01      	ldr	r3, [pc, #4]	; (8002420 <HAL_RCC_OscConfig+0x91c>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	e013      	b.n	8002448 <HAL_RCC_OscConfig+0x944>
 8002420:	40021000 	.word	0x40021000
 8002424:	10908120 	.word	0x10908120
 8002428:	40007000 	.word	0x40007000
 800242c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	4bc0      	ldr	r3, [pc, #768]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800244c:	2102      	movs	r1, #2
 800244e:	6011      	str	r1, [r2, #0]
 8002450:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	fa92 f1a2 	rbit	r1, r2
 800245a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800245e:	6011      	str	r1, [r2, #0]
  return result;
 8002460:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	fab2 f282 	clz	r2, r2
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f002 021f 	and.w	r2, r2, #31
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f202 	lsl.w	r2, r1, r2
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d09a      	beq.n	80023b8 <HAL_RCC_OscConfig+0x8b4>
 8002482:	e063      	b.n	800254c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7ff f888 	bl	8001598 <HAL_GetTick>
 8002488:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	e00b      	b.n	80024a6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7ff f883 	bl	8001598 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e23c      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
 80024a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024aa:	2202      	movs	r2, #2
 80024ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024c2:	2202      	movs	r2, #2
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024d4:	601a      	str	r2, [r3, #0]
  return result;
 80024d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_OscConfig+0x9f2>
 80024f0:	4b95      	ldr	r3, [pc, #596]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	e00d      	b.n	8002512 <HAL_RCC_OscConfig+0xa0e>
 80024f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024fa:	2202      	movs	r2, #2
 80024fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	4b8e      	ldr	r3, [pc, #568]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002516:	2102      	movs	r1, #2
 8002518:	6011      	str	r1, [r2, #0]
 800251a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	fa92 f1a2 	rbit	r1, r2
 8002524:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002528:	6011      	str	r1, [r2, #0]
  return result;
 800252a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f002 021f 	and.w	r2, r2, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1a0      	bne.n	800248e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800254c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002554:	4b7c      	ldr	r3, [pc, #496]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	4a7b      	ldr	r2, [pc, #492]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 800255a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 81d9 	beq.w	800291e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	f000 81a6 	beq.w	80028c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b02      	cmp	r3, #2
 8002582:	f040 811e 	bne.w	80027c2 <HAL_RCC_OscConfig+0xcbe>
 8002586:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800258a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800258e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800259e:	601a      	str	r2, [r3, #0]
  return result;
 80025a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	461a      	mov	r2, r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe ffec 	bl	8001598 <HAL_GetTick>
 80025c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e009      	b.n	80025da <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe ffe7 	bl	8001598 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1a2      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
 80025da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f2a3 	rbit	r2, r3
 80025ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025f2:	601a      	str	r2, [r3, #0]
  return result;
 80025f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <HAL_RCC_OscConfig+0xb10>
 800260e:	4b4e      	ldr	r3, [pc, #312]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	e01b      	b.n	800264c <HAL_RCC_OscConfig+0xb48>
 8002614:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002618:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	fa93 f2a3 	rbit	r2, r3
 8002628:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002650:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002654:	6011      	str	r1, [r2, #0]
 8002656:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fa92 f1a2 	rbit	r1, r2
 8002660:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002664:	6011      	str	r1, [r2, #0]
  return result;
 8002666:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0220 	orr.w	r2, r2, #32
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f002 021f 	and.w	r2, r2, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d19e      	bne.n	80025c6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	f023 020f 	bic.w	r2, r3, #15
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	492c      	ldr	r1, [pc, #176]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 8002698:	4313      	orrs	r3, r2
 800269a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a19      	ldr	r1, [r3, #32]
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	430b      	orrs	r3, r1
 80026b2:	4925      	ldr	r1, [pc, #148]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026d0:	601a      	str	r2, [r3, #0]
  return result;
 80026d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026d6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	461a      	mov	r2, r3
 80026ea:	2301      	movs	r3, #1
 80026ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe ff53 	bl	8001598 <HAL_GetTick>
 80026f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f6:	e009      	b.n	800270c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f8:	f7fe ff4e 	bl	8001598 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e109      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
 800270c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002724:	601a      	str	r2, [r3, #0]
  return result;
 8002726:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800272a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCC_OscConfig+0xc48>
 8002740:	4b01      	ldr	r3, [pc, #4]	; (8002748 <HAL_RCC_OscConfig+0xc44>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	e01e      	b.n	8002784 <HAL_RCC_OscConfig+0xc80>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800276a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_OscConfig+0xe28>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002788:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800278c:	6011      	str	r1, [r2, #0]
 800278e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	fa92 f1a2 	rbit	r1, r2
 8002798:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800279c:	6011      	str	r1, [r2, #0]
  return result;
 800279e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f042 0220 	orr.w	r2, r2, #32
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f002 021f 	and.w	r2, r2, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d09b      	beq.n	80026f8 <HAL_RCC_OscConfig+0xbf4>
 80027c0:	e0ad      	b.n	800291e <HAL_RCC_OscConfig+0xe1a>
 80027c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027da:	601a      	str	r2, [r3, #0]
  return result;
 80027dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	2300      	movs	r3, #0
 80027f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fece 	bl	8001598 <HAL_GetTick>
 80027fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	e009      	b.n	8002816 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fec9 	bl	8001598 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e084      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
 8002816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800281e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fa93 f2a3 	rbit	r2, r3
 800282a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800282e:	601a      	str	r2, [r3, #0]
  return result;
 8002830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002834:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_RCC_OscConfig+0xd4c>
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_RCC_OscConfig+0xe28>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e01b      	b.n	8002888 <HAL_RCC_OscConfig+0xd84>
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fa93 f2a3 	rbit	r2, r3
 8002864:	f107 0320 	add.w	r3, r7, #32
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f107 0318 	add.w	r3, r7, #24
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_RCC_OscConfig+0xe28>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f107 0214 	add.w	r2, r7, #20
 800288c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002890:	6011      	str	r1, [r2, #0]
 8002892:	f107 0214 	add.w	r2, r7, #20
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	fa92 f1a2 	rbit	r1, r2
 800289c:	f107 0210 	add.w	r2, r7, #16
 80028a0:	6011      	str	r1, [r2, #0]
  return result;
 80028a2:	f107 0210 	add.w	r2, r7, #16
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	fab2 f282 	clz	r2, r2
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f002 021f 	and.w	r2, r2, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d19e      	bne.n	8002802 <HAL_RCC_OscConfig+0xcfe>
 80028c4:	e02b      	b.n	800291e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e025      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_RCC_OscConfig+0xe28>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_RCC_OscConfig+0xe28>)
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028e8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d111      	bne.n	800291a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002904:	429a      	cmp	r2, r3
 8002906:	d108      	bne.n	800291a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800290c:	f003 020f 	and.w	r2, r3, #15
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000

08002930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b09e      	sub	sp, #120	; 0x78
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e162      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b90      	ldr	r3, [pc, #576]	; (8002b8c <HAL_RCC_ClockConfig+0x25c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d910      	bls.n	8002978 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b8d      	ldr	r3, [pc, #564]	; (8002b8c <HAL_RCC_ClockConfig+0x25c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0207 	bic.w	r2, r3, #7
 800295e:	498b      	ldr	r1, [pc, #556]	; (8002b8c <HAL_RCC_ClockConfig+0x25c>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b89      	ldr	r3, [pc, #548]	; (8002b8c <HAL_RCC_ClockConfig+0x25c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e14a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b82      	ldr	r3, [pc, #520]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	497f      	ldr	r1, [pc, #508]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80dc 	beq.w	8002b5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d13c      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xf6>
 80029ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d102      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xa6>
 80029d0:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	e00f      	b.n	80029f6 <HAL_RCC_ClockConfig+0xc6>
 80029d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	667b      	str	r3, [r7, #100]	; 0x64
 80029e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029f2:	4b67      	ldr	r3, [pc, #412]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80029fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029fe:	fa92 f2a2 	rbit	r2, r2
 8002a02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a06:	fab2 f282 	clz	r2, r2
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f042 0220 	orr.w	r2, r2, #32
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	f002 021f 	and.w	r2, r2, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d17b      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0f3      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d13c      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x178>
 8002a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x128>
 8002a52:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e00f      	b.n	8002a78 <HAL_RCC_ClockConfig+0x148>
 8002a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	647b      	str	r3, [r7, #68]	; 0x44
 8002a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a80:	fa92 f2a2 	rbit	r2, r2
 8002a84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f042 0220 	orr.w	r2, r2, #32
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f002 021f 	and.w	r2, r2, #31
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d13a      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0b2      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2de>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x1a0>
 8002aca:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e00d      	b.n	8002aec <HAL_RCC_ClockConfig+0x1bc>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	2302      	movs	r3, #2
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2202      	movs	r2, #2
 8002aee:	61ba      	str	r2, [r7, #24]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	fa92 f2a2 	rbit	r2, r2
 8002af6:	617a      	str	r2, [r7, #20]
  return result;
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	fab2 f282 	clz	r2, r2
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f042 0220 	orr.w	r2, r2, #32
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f002 021f 	and.w	r2, r2, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e079      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	491a      	ldr	r1, [pc, #104]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fd34 	bl	8001598 <HAL_GetTick>
 8002b30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fd30 	bl	8001598 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e061      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x25c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d214      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_RCC_ClockConfig+0x25c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4906      	ldr	r1, [pc, #24]	; (8002b8c <HAL_RCC_ClockConfig+0x25c>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HAL_RCC_ClockConfig+0x25c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e040      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2de>
 8002b8c:	40022000 	.word	0x40022000
 8002b90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCC_ClockConfig+0x2e8>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	491a      	ldr	r1, [pc, #104]	; (8002c18 <HAL_RCC_ClockConfig+0x2e8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_RCC_ClockConfig+0x2e8>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4912      	ldr	r1, [pc, #72]	; (8002c18 <HAL_RCC_ClockConfig+0x2e8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bd2:	f000 f829 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_RCC_ClockConfig+0x2e8>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be0:	22f0      	movs	r2, #240	; 0xf0
 8002be2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	fa92 f2a2 	rbit	r2, r2
 8002bea:	60fa      	str	r2, [r7, #12]
  return result;
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	40d3      	lsrs	r3, r2
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x2ec>)
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
 8002bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8002bfe:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <HAL_RCC_ClockConfig+0x2f0>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_RCC_ClockConfig+0x2f4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fc82 	bl	8001510 <HAL_InitTick>
  
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3778      	adds	r7, #120	; 0x78
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	080046f8 	.word	0x080046f8
 8002c20:	20000000 	.word	0x20000000
 8002c24:	20000004 	.word	0x20000004

08002c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b08b      	sub	sp, #44	; 0x2c
 8002c2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c42:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d002      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x30>
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x36>
 8002c56:	e03f      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c5a:	623b      	str	r3, [r7, #32]
      break;
 8002c5c:	e03f      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	fa92 f2a2 	rbit	r2, r2
 8002c70:	607a      	str	r2, [r7, #4]
  return result;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	fab2 f282 	clz	r2, r2
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	40d3      	lsrs	r3, r2
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	fa92 f2a2 	rbit	r2, r2
 8002c94:	60fa      	str	r2, [r7, #12]
  return result;
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	40d3      	lsrs	r3, r2
 8002ca0:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc0:	e007      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	623b      	str	r3, [r7, #32]
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cda:	623b      	str	r3, [r7, #32]
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	6a3b      	ldr	r3, [r7, #32]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	372c      	adds	r7, #44	; 0x2c
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	007a1200 	.word	0x007a1200
 8002cf4:	08004710 	.word	0x08004710
 8002cf8:	08004720 	.word	0x08004720

08002cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000000 	.word	0x20000000

08002d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d1a:	f7ff ffef 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	fa92 f2a2 	rbit	r2, r2
 8002d34:	603a      	str	r2, [r7, #0]
  return result;
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	fab2 f282 	clz	r2, r2
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	40d3      	lsrs	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08004708 	.word	0x08004708

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d5e:	f7ff ffcd 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d62:	4601      	mov	r1, r0
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	fa92 f2a2 	rbit	r2, r2
 8002d78:	603a      	str	r2, [r7, #0]
  return result;
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	fab2 f282 	clz	r2, r2
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	40d3      	lsrs	r3, r2
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08004708 	.word	0x08004708

08002d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b092      	sub	sp, #72	; 0x48
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80d7 	beq.w	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc0:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10e      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a4a      	ldr	r2, [pc, #296]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	61d3      	str	r3, [r2, #28]
 8002dd8:	4b48      	ldr	r3, [pc, #288]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dea:	4b45      	ldr	r3, [pc, #276]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d118      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df6:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a41      	ldr	r2, [pc, #260]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fbc9 	bl	8001598 <HAL_GetTick>
 8002e06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	e008      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0a:	f7fe fbc5 	bl	8001598 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d901      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1d6      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8084 	beq.w	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d07c      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e48:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	461a      	mov	r2, r3
 8002e72:	2301      	movs	r3, #1
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	461a      	mov	r2, r3
 8002e96:	2300      	movs	r3, #0
 8002e98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e9a:	4a18      	ldr	r2, [pc, #96]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d04b      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fb75 	bl	8001598 <HAL_GetTick>
 8002eae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe fb71 	bl	8001598 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e180      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	61fb      	str	r3, [r7, #28]
  return result;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d108      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ef6:	4b01      	ldr	r3, [pc, #4]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	e00d      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	10908100 	.word	0x10908100
 8002f08:	2302      	movs	r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	4ba0      	ldr	r3, [pc, #640]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	2202      	movs	r2, #2
 8002f1a:	613a      	str	r2, [r7, #16]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	fa92 f2a2 	rbit	r2, r2
 8002f22:	60fa      	str	r2, [r7, #12]
  return result;
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	fab2 f282 	clz	r2, r2
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f002 021f 	and.w	r2, r2, #31
 8002f36:	2101      	movs	r1, #1
 8002f38:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0b7      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f42:	4b95      	ldr	r3, [pc, #596]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4992      	ldr	r1, [pc, #584]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4b8e      	ldr	r3, [pc, #568]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4a8d      	ldr	r2, [pc, #564]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f74:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f023 0203 	bic.w	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4985      	ldr	r1, [pc, #532]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f92:	4b81      	ldr	r3, [pc, #516]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	497e      	ldr	r1, [pc, #504]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb0:	4b79      	ldr	r3, [pc, #484]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	4976      	ldr	r1, [pc, #472]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fce:	4b72      	ldr	r3, [pc, #456]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f023 0210 	bic.w	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	496f      	ldr	r1, [pc, #444]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fec:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	4967      	ldr	r1, [pc, #412]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f023 0220 	bic.w	r2, r3, #32
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4960      	ldr	r1, [pc, #384]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003028:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	4958      	ldr	r1, [pc, #352]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003046:	4b54      	ldr	r3, [pc, #336]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	4951      	ldr	r1, [pc, #324]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003064:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4949      	ldr	r1, [pc, #292]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003082:	4b45      	ldr	r3, [pc, #276]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4942      	ldr	r1, [pc, #264]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030a0:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	493a      	ldr	r1, [pc, #232]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	4933      	ldr	r1, [pc, #204]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	492b      	ldr	r1, [pc, #172]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4924      	ldr	r1, [pc, #144]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	491c      	ldr	r1, [pc, #112]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003136:	4b18      	ldr	r3, [pc, #96]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	4915      	ldr	r1, [pc, #84]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003144:	4313      	orrs	r3, r2
 8003146:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	490d      	ldr	r1, [pc, #52]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	e002      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	490b      	ldr	r1, [pc, #44]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	4904      	ldr	r1, [pc, #16]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3748      	adds	r7, #72	; 0x48
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e084      	b.n	80032f4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7fe f82b 	bl	8001260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003220:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800322a:	d902      	bls.n	8003232 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e002      	b.n	8003238 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003240:	d007      	beq.n	8003252 <HAL_SPI_Init+0x7a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800324a:	d002      	beq.n	8003252 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003262:	d903      	bls.n	800326c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
 800326a:	e002      	b.n	8003272 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	ea42 0103 	orr.w	r1, r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	0c1b      	lsrs	r3, r3, #16
 80032b2:	f003 0204 	and.w	r2, r3, #4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800330a:	2301      	movs	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x26>
 800331e:	2302      	movs	r3, #2
 8003320:	e1fb      	b.n	800371a <HAL_SPI_TransmitReceive+0x41e>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800332a:	f7fe f935 	bl	8001598 <HAL_GetTick>
 800332e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003336:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003346:	7efb      	ldrb	r3, [r7, #27]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d00e      	beq.n	800336a <HAL_SPI_TransmitReceive+0x6e>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003352:	d106      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x66>
 800335c:	7efb      	ldrb	r3, [r7, #27]
 800335e:	2b04      	cmp	r3, #4
 8003360:	d003      	beq.n	800336a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003362:	2302      	movs	r3, #2
 8003364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003368:	e1cd      	b.n	8003706 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_SPI_TransmitReceive+0x80>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_SPI_TransmitReceive+0x80>
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003382:	e1c0      	b.n	8003706 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b04      	cmp	r3, #4
 800338e:	d003      	beq.n	8003398 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2205      	movs	r2, #5
 8003394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	887a      	ldrh	r2, [r7, #2]
 80033be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033da:	d802      	bhi.n	80033e2 <HAL_SPI_TransmitReceive+0xe6>
 80033dc:	8a3b      	ldrh	r3, [r7, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d908      	bls.n	80033f4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	e007      	b.n	8003404 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003402:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d007      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003420:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800342a:	d97c      	bls.n	8003526 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_SPI_TransmitReceive+0x13e>
 8003434:	8a7b      	ldrh	r3, [r7, #18]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d169      	bne.n	800350e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	881a      	ldrh	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	1c9a      	adds	r2, r3, #2
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345e:	e056      	b.n	800350e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d11b      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x1aa>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <HAL_SPI_TransmitReceive+0x1aa>
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	2b01      	cmp	r3, #1
 800347c:	d113      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	881a      	ldrh	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	1c9a      	adds	r2, r3, #2
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d11c      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x1f2>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d016      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	b292      	uxth	r2, r2
 80034cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	1c9a      	adds	r2, r3, #2
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034ea:	2301      	movs	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034ee:	f7fe f853 	bl	8001598 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d807      	bhi.n	800350e <HAL_SPI_TransmitReceive+0x212>
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d003      	beq.n	800350e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800350c:	e0fb      	b.n	8003706 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1a3      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x164>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d19d      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x164>
 8003524:	e0df      	b.n	80036e6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x23a>
 800352e:	8a7b      	ldrh	r3, [r7, #18]
 8003530:	2b01      	cmp	r3, #1
 8003532:	f040 80cb 	bne.w	80036cc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d912      	bls.n	8003566 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	881a      	ldrh	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b02      	subs	r3, #2
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003564:	e0b2      	b.n	80036cc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358c:	e09e      	b.n	80036cc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d134      	bne.n	8003606 <HAL_SPI_TransmitReceive+0x30a>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02f      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x30a>
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d12c      	bne.n	8003606 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d912      	bls.n	80035dc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	881a      	ldrh	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	1c9a      	adds	r2, r3, #2
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b02      	subs	r3, #2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035da:	e012      	b.n	8003602 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	7812      	ldrb	r2, [r2, #0]
 80035e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d148      	bne.n	80036a6 <HAL_SPI_TransmitReceive+0x3aa>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d042      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d923      	bls.n	8003674 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	b292      	uxth	r2, r2
 8003638:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	1c9a      	adds	r2, r3, #2
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b02      	subs	r3, #2
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d81f      	bhi.n	80036a2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e016      	b.n	80036a2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f103 020c 	add.w	r2, r3, #12
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036a2:	2301      	movs	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036a6:	f7fd ff77 	bl	8001598 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d803      	bhi.n	80036be <HAL_SPI_TransmitReceive+0x3c2>
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d102      	bne.n	80036c4 <HAL_SPI_TransmitReceive+0x3c8>
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d103      	bne.n	80036cc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80036ca:	e01c      	b.n	8003706 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f47f af5b 	bne.w	800358e <HAL_SPI_TransmitReceive+0x292>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f47f af54 	bne.w	800358e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8f0 	bl	80038d0 <SPI_EndRxTxTransaction>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d006      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	661a      	str	r2, [r3, #96]	; 0x60
 8003702:	e000      	b.n	8003706 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003704:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800371a:	4618      	mov	r0, r3
 800371c:	3728      	adds	r7, #40	; 0x28
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003732:	e04c      	b.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d048      	beq.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800373c:	f7fd ff2c 	bl	8001598 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d902      	bls.n	8003752 <SPI_WaitFlagStateUntilTimeout+0x30>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13d      	bne.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376a:	d111      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003774:	d004      	beq.n	8003780 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377e:	d107      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003798:	d10f      	bne.n	80037ba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e00f      	b.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1a3      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003804:	e057      	b.n	80038b6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800380c:	d106      	bne.n	800381c <SPI_WaitFifoStateUntilTimeout+0x26>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d103      	bne.n	800381c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d048      	beq.n	80038b6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003824:	f7fd feb8 	bl	8001598 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d902      	bls.n	800383a <SPI_WaitFifoStateUntilTimeout+0x44>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d13d      	bne.n	80038b6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003852:	d111      	bne.n	8003878 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385c:	d004      	beq.n	8003868 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d107      	bne.n	8003878 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003880:	d10f      	bne.n	80038a2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e008      	b.n	80038c8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4013      	ands	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d19f      	bne.n	8003806 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff ff84 	bl	80037f6 <SPI_WaitFifoStateUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	f043 0220 	orr.w	r2, r3, #32
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e027      	b.n	8003954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff ff07 	bl	8003722 <SPI_WaitFlagStateUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e014      	b.n	8003954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2200      	movs	r2, #0
 8003932:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff ff5d 	bl	80037f6 <SPI_WaitFifoStateUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e000      	b.n	8003954 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e040      	b.n	80039f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fcb2 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f82c 	bl	80039f8 <UART_SetConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa3a 	bl	8003e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fac1 	bl	8003f70 <UART_CheckIdleState>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4bac      	ldr	r3, [pc, #688]	; (8003cd8 <UART_SetConfig+0x2e0>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	6939      	ldr	r1, [r7, #16]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a9a      	ldr	r2, [pc, #616]	; (8003cdc <UART_SetConfig+0x2e4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d121      	bne.n	8003abc <UART_SetConfig+0xc4>
 8003a78:	4b99      	ldr	r3, [pc, #612]	; (8003ce0 <UART_SetConfig+0x2e8>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d817      	bhi.n	8003ab4 <UART_SetConfig+0xbc>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x94>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aa9 	.word	0x08003aa9
 8003a94:	08003aaf 	.word	0x08003aaf
 8003a98:	08003aa3 	.word	0x08003aa3
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e0b2      	b.n	8003c08 <UART_SetConfig+0x210>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e0af      	b.n	8003c08 <UART_SetConfig+0x210>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e0ac      	b.n	8003c08 <UART_SetConfig+0x210>
 8003aae:	2308      	movs	r3, #8
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e0a9      	b.n	8003c08 <UART_SetConfig+0x210>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	bf00      	nop
 8003aba:	e0a5      	b.n	8003c08 <UART_SetConfig+0x210>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a88      	ldr	r2, [pc, #544]	; (8003ce4 <UART_SetConfig+0x2ec>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d123      	bne.n	8003b0e <UART_SetConfig+0x116>
 8003ac6:	4b86      	ldr	r3, [pc, #536]	; (8003ce0 <UART_SetConfig+0x2e8>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad2:	d012      	beq.n	8003afa <UART_SetConfig+0x102>
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d802      	bhi.n	8003ae0 <UART_SetConfig+0xe8>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <UART_SetConfig+0xf6>
 8003ade:	e012      	b.n	8003b06 <UART_SetConfig+0x10e>
 8003ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ae4:	d00c      	beq.n	8003b00 <UART_SetConfig+0x108>
 8003ae6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aea:	d003      	beq.n	8003af4 <UART_SetConfig+0xfc>
 8003aec:	e00b      	b.n	8003b06 <UART_SetConfig+0x10e>
 8003aee:	2300      	movs	r3, #0
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e089      	b.n	8003c08 <UART_SetConfig+0x210>
 8003af4:	2302      	movs	r3, #2
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e086      	b.n	8003c08 <UART_SetConfig+0x210>
 8003afa:	2304      	movs	r3, #4
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e083      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b00:	2308      	movs	r3, #8
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e080      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b06:	2310      	movs	r3, #16
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	bf00      	nop
 8003b0c:	e07c      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a75      	ldr	r2, [pc, #468]	; (8003ce8 <UART_SetConfig+0x2f0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d123      	bne.n	8003b60 <UART_SetConfig+0x168>
 8003b18:	4b71      	ldr	r3, [pc, #452]	; (8003ce0 <UART_SetConfig+0x2e8>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b24:	d012      	beq.n	8003b4c <UART_SetConfig+0x154>
 8003b26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b2a:	d802      	bhi.n	8003b32 <UART_SetConfig+0x13a>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <UART_SetConfig+0x148>
 8003b30:	e012      	b.n	8003b58 <UART_SetConfig+0x160>
 8003b32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b36:	d00c      	beq.n	8003b52 <UART_SetConfig+0x15a>
 8003b38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b3c:	d003      	beq.n	8003b46 <UART_SetConfig+0x14e>
 8003b3e:	e00b      	b.n	8003b58 <UART_SetConfig+0x160>
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e060      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b46:	2302      	movs	r3, #2
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e05d      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e05a      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b52:	2308      	movs	r3, #8
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e057      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	bf00      	nop
 8003b5e:	e053      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a61      	ldr	r2, [pc, #388]	; (8003cec <UART_SetConfig+0x2f4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d123      	bne.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b6a:	4b5d      	ldr	r3, [pc, #372]	; (8003ce0 <UART_SetConfig+0x2e8>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b76:	d012      	beq.n	8003b9e <UART_SetConfig+0x1a6>
 8003b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b7c:	d802      	bhi.n	8003b84 <UART_SetConfig+0x18c>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <UART_SetConfig+0x19a>
 8003b82:	e012      	b.n	8003baa <UART_SetConfig+0x1b2>
 8003b84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b88:	d00c      	beq.n	8003ba4 <UART_SetConfig+0x1ac>
 8003b8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b8e:	d003      	beq.n	8003b98 <UART_SetConfig+0x1a0>
 8003b90:	e00b      	b.n	8003baa <UART_SetConfig+0x1b2>
 8003b92:	2300      	movs	r3, #0
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e037      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e034      	b.n	8003c08 <UART_SetConfig+0x210>
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e031      	b.n	8003c08 <UART_SetConfig+0x210>
 8003ba4:	2308      	movs	r3, #8
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e02e      	b.n	8003c08 <UART_SetConfig+0x210>
 8003baa:	2310      	movs	r3, #16
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	bf00      	nop
 8003bb0:	e02a      	b.n	8003c08 <UART_SetConfig+0x210>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a4e      	ldr	r2, [pc, #312]	; (8003cf0 <UART_SetConfig+0x2f8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d123      	bne.n	8003c04 <UART_SetConfig+0x20c>
 8003bbc:	4b48      	ldr	r3, [pc, #288]	; (8003ce0 <UART_SetConfig+0x2e8>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d012      	beq.n	8003bf0 <UART_SetConfig+0x1f8>
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bce:	d802      	bhi.n	8003bd6 <UART_SetConfig+0x1de>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <UART_SetConfig+0x1ec>
 8003bd4:	e012      	b.n	8003bfc <UART_SetConfig+0x204>
 8003bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bda:	d00c      	beq.n	8003bf6 <UART_SetConfig+0x1fe>
 8003bdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003be0:	d003      	beq.n	8003bea <UART_SetConfig+0x1f2>
 8003be2:	e00b      	b.n	8003bfc <UART_SetConfig+0x204>
 8003be4:	2300      	movs	r3, #0
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e00e      	b.n	8003c08 <UART_SetConfig+0x210>
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e00b      	b.n	8003c08 <UART_SetConfig+0x210>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e008      	b.n	8003c08 <UART_SetConfig+0x210>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e005      	b.n	8003c08 <UART_SetConfig+0x210>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	bf00      	nop
 8003c02:	e001      	b.n	8003c08 <UART_SetConfig+0x210>
 8003c04:	2310      	movs	r3, #16
 8003c06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c10:	f040 8090 	bne.w	8003d34 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d86c      	bhi.n	8003cf4 <UART_SetConfig+0x2fc>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0x228>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c65 	.word	0x08003c65
 8003c28:	08003c85 	.word	0x08003c85
 8003c2c:	08003cf5 	.word	0x08003cf5
 8003c30:	08003ca1 	.word	0x08003ca1
 8003c34:	08003cf5 	.word	0x08003cf5
 8003c38:	08003cf5 	.word	0x08003cf5
 8003c3c:	08003cf5 	.word	0x08003cf5
 8003c40:	08003cc1 	.word	0x08003cc1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c44:	f7ff f866 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 8003c48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	005a      	lsls	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	61bb      	str	r3, [r7, #24]
        break;
 8003c62:	e04a      	b.n	8003cfa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7ff f878 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8003c68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	005a      	lsls	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	441a      	add	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	61bb      	str	r3, [r7, #24]
        break;
 8003c82:	e03a      	b.n	8003cfa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003c8e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6852      	ldr	r2, [r2, #4]
 8003c96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	61bb      	str	r3, [r7, #24]
        break;
 8003c9e:	e02c      	b.n	8003cfa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca0:	f7fe ffc2 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8003ca4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	005a      	lsls	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	441a      	add	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	61bb      	str	r3, [r7, #24]
        break;
 8003cbe:	e01c      	b.n	8003cfa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	61bb      	str	r3, [r7, #24]
        break;
 8003cd6:	e010      	b.n	8003cfa <UART_SetConfig+0x302>
 8003cd8:	efff69f3 	.word	0xefff69f3
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40004400 	.word	0x40004400
 8003ce8:	40004800 	.word	0x40004800
 8003cec:	40004c00 	.word	0x40004c00
 8003cf0:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
        break;
 8003cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d916      	bls.n	8003d2e <UART_SetConfig+0x336>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d06:	d212      	bcs.n	8003d2e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f023 030f 	bic.w	r3, r3, #15
 8003d10:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	897a      	ldrh	r2, [r7, #10]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	e072      	b.n	8003e14 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	75fb      	strb	r3, [r7, #23]
 8003d32:	e06f      	b.n	8003e14 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003d34:	7ffb      	ldrb	r3, [r7, #31]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d85b      	bhi.n	8003df2 <UART_SetConfig+0x3fa>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x348>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003d83 	.word	0x08003d83
 8003d48:	08003da1 	.word	0x08003da1
 8003d4c:	08003df3 	.word	0x08003df3
 8003d50:	08003dbd 	.word	0x08003dbd
 8003d54:	08003df3 	.word	0x08003df3
 8003d58:	08003df3 	.word	0x08003df3
 8003d5c:	08003df3 	.word	0x08003df3
 8003d60:	08003ddb 	.word	0x08003ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d64:	f7fe ffd6 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 8003d68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	085a      	lsrs	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	441a      	add	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	61bb      	str	r3, [r7, #24]
        break;
 8003d80:	e03a      	b.n	8003df8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d82:	f7fe ffe9 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8003d86:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	085a      	lsrs	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	441a      	add	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	61bb      	str	r3, [r7, #24]
        break;
 8003d9e:	e02b      	b.n	8003df8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003daa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6852      	ldr	r2, [r2, #4]
 8003db2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	61bb      	str	r3, [r7, #24]
        break;
 8003dba:	e01d      	b.n	8003df8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dbc:	f7fe ff34 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8003dc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	085a      	lsrs	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	441a      	add	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	61bb      	str	r3, [r7, #24]
        break;
 8003dd8:	e00e      	b.n	8003df8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e002      	b.n	8003df8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
        break;
 8003df6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b0f      	cmp	r3, #15
 8003dfc:	d908      	bls.n	8003e10 <UART_SetConfig+0x418>
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e04:	d204      	bcs.n	8003e10 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	e001      	b.n	8003e14 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop

08003e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f2a:	d10a      	bne.n	8003f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f7e:	f7fd fb0b 	bl	8001598 <HAL_GetTick>
 8003f82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d10e      	bne.n	8003fb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f82a 	bl	8003ffa <UART_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e020      	b.n	8003ff2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d10e      	bne.n	8003fdc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f814 	bl	8003ffa <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e00a      	b.n	8003ff2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400a:	e05d      	b.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d059      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004014:	f7fd fac0 	bl	8001598 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <UART_WaitOnFlagUntilTimeout+0x30>
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11b      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004038:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e042      	b.n	80040e8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02b      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407e:	d123      	bne.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004088:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004098:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e00f      	b.n	80040e8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d092      	beq.n	800400c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_ZdlPvj>:
 80040f0:	f000 b90c 	b.w	800430c <_ZdlPv>

080040f4 <_Znwj>:
 80040f4:	b510      	push	{r4, lr}
 80040f6:	2800      	cmp	r0, #0
 80040f8:	bf14      	ite	ne
 80040fa:	4604      	movne	r4, r0
 80040fc:	2401      	moveq	r4, #1
 80040fe:	4620      	mov	r0, r4
 8004100:	f000 f956 	bl	80043b0 <malloc>
 8004104:	b930      	cbnz	r0, 8004114 <_Znwj+0x20>
 8004106:	f000 f8f9 	bl	80042fc <_ZSt15get_new_handlerv>
 800410a:	b908      	cbnz	r0, 8004110 <_Znwj+0x1c>
 800410c:	f000 f91f 	bl	800434e <abort>
 8004110:	4780      	blx	r0
 8004112:	e7f4      	b.n	80040fe <_Znwj+0xa>
 8004114:	bd10      	pop	{r4, pc}

08004116 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8004116:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004118:	2400      	movs	r4, #0
 800411a:	2310      	movs	r3, #16
 800411c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004120:	6803      	ldr	r3, [r0, #0]
 8004122:	9400      	str	r4, [sp, #0]
 8004124:	4615      	mov	r5, r2
 8004126:	699e      	ldr	r6, [r3, #24]
 8004128:	f88d 4004 	strb.w	r4, [sp, #4]
 800412c:	466b      	mov	r3, sp
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	47b0      	blx	r6
 8004132:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004136:	f003 0306 	and.w	r3, r3, #6
 800413a:	2b06      	cmp	r3, #6
 800413c:	bf03      	ittte	eq
 800413e:	9b00      	ldreq	r3, [sp, #0]
 8004140:	602b      	streq	r3, [r5, #0]
 8004142:	2001      	moveq	r0, #1
 8004144:	4620      	movne	r0, r4
 8004146:	b004      	add	sp, #16
 8004148:	bd70      	pop	{r4, r5, r6, pc}

0800414a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800414a:	9800      	ldr	r0, [sp, #0]
 800414c:	4290      	cmp	r0, r2
 800414e:	bf0c      	ite	eq
 8004150:	2006      	moveq	r0, #6
 8004152:	2001      	movne	r0, #1
 8004154:	4770      	bx	lr
	...

08004158 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8004158:	b510      	push	{r4, lr}
 800415a:	4b03      	ldr	r3, [pc, #12]	; (8004168 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800415c:	6003      	str	r3, [r0, #0]
 800415e:	4604      	mov	r4, r0
 8004160:	f000 f8dc 	bl	800431c <_ZNSt9type_infoD1Ev>
 8004164:	4620      	mov	r0, r4
 8004166:	bd10      	pop	{r4, pc}
 8004168:	08004768 	.word	0x08004768

0800416c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800416c:	b510      	push	{r4, lr}
 800416e:	4604      	mov	r4, r0
 8004170:	f7ff fff2 	bl	8004158 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004174:	4620      	mov	r0, r4
 8004176:	2108      	movs	r1, #8
 8004178:	f7ff ffba 	bl	80040f0 <_ZdlPvj>
 800417c:	4620      	mov	r0, r4
 800417e:	bd10      	pop	{r4, pc}

08004180 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8004180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004184:	4698      	mov	r8, r3
 8004186:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800418a:	9e06      	ldr	r6, [sp, #24]
 800418c:	429e      	cmp	r6, r3
 800418e:	4607      	mov	r7, r0
 8004190:	4615      	mov	r5, r2
 8004192:	d107      	bne.n	80041a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8004194:	9907      	ldr	r1, [sp, #28]
 8004196:	f000 f8c4 	bl	8004322 <_ZNKSt9type_infoeqERKS_>
 800419a:	b118      	cbz	r0, 80041a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800419c:	7165      	strb	r5, [r4, #5]
 800419e:	2000      	movs	r0, #0
 80041a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a4:	4641      	mov	r1, r8
 80041a6:	4638      	mov	r0, r7
 80041a8:	f000 f8bb 	bl	8004322 <_ZNKSt9type_infoeqERKS_>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d0f6      	beq.n	800419e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 80041b0:	2301      	movs	r3, #1
 80041b2:	6026      	str	r6, [r4, #0]
 80041b4:	7125      	strb	r5, [r4, #4]
 80041b6:	71a3      	strb	r3, [r4, #6]
 80041b8:	e7f1      	b.n	800419e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

080041ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80041ba:	b538      	push	{r3, r4, r5, lr}
 80041bc:	4615      	mov	r5, r2
 80041be:	461c      	mov	r4, r3
 80041c0:	f000 f8af 	bl	8004322 <_ZNKSt9type_infoeqERKS_>
 80041c4:	b120      	cbz	r0, 80041d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80041c6:	2308      	movs	r3, #8
 80041c8:	60e3      	str	r3, [r4, #12]
 80041ca:	2306      	movs	r3, #6
 80041cc:	6025      	str	r5, [r4, #0]
 80041ce:	7123      	strb	r3, [r4, #4]
 80041d0:	bd38      	pop	{r3, r4, r5, pc}

080041d2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80041d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d6:	4605      	mov	r5, r0
 80041d8:	460c      	mov	r4, r1
 80041da:	4616      	mov	r6, r2
 80041dc:	461f      	mov	r7, r3
 80041de:	f000 f8a0 	bl	8004322 <_ZNKSt9type_infoeqERKS_>
 80041e2:	b948      	cbnz	r0, 80041f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80041e4:	2f03      	cmp	r7, #3
 80041e6:	d807      	bhi.n	80041f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	4632      	mov	r2, r6
 80041ec:	4629      	mov	r1, r5
 80041ee:	4620      	mov	r0, r4
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041f6:	4718      	bx	r3
 80041f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080041fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80041fc:	b510      	push	{r4, lr}
 80041fe:	4b03      	ldr	r3, [pc, #12]	; (800420c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8004200:	6003      	str	r3, [r0, #0]
 8004202:	4604      	mov	r4, r0
 8004204:	f7ff ffa8 	bl	8004158 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004208:	4620      	mov	r0, r4
 800420a:	bd10      	pop	{r4, pc}
 800420c:	080047c8 	.word	0x080047c8

08004210 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8004210:	b510      	push	{r4, lr}
 8004212:	4604      	mov	r4, r0
 8004214:	f7ff fff2 	bl	80041fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8004218:	4620      	mov	r0, r4
 800421a:	210c      	movs	r1, #12
 800421c:	f7ff ff68 	bl	80040f0 <_ZdlPvj>
 8004220:	4620      	mov	r0, r4
 8004222:	bd10      	pop	{r4, pc}

08004224 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8004224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	9e06      	ldr	r6, [sp, #24]
 800422a:	4296      	cmp	r6, r2
 800422c:	4607      	mov	r7, r0
 800422e:	4688      	mov	r8, r1
 8004230:	4615      	mov	r5, r2
 8004232:	461c      	mov	r4, r3
 8004234:	d00a      	beq.n	800424c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 8004236:	68b8      	ldr	r0, [r7, #8]
 8004238:	6803      	ldr	r3, [r0, #0]
 800423a:	9606      	str	r6, [sp, #24]
 800423c:	6a1e      	ldr	r6, [r3, #32]
 800423e:	462a      	mov	r2, r5
 8004240:	4623      	mov	r3, r4
 8004242:	4641      	mov	r1, r8
 8004244:	46b4      	mov	ip, r6
 8004246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800424a:	4760      	bx	ip
 800424c:	4619      	mov	r1, r3
 800424e:	f000 f868 	bl	8004322 <_ZNKSt9type_infoeqERKS_>
 8004252:	2800      	cmp	r0, #0
 8004254:	d0ef      	beq.n	8004236 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 8004256:	2006      	movs	r0, #6
 8004258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800425c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800425c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	460e      	mov	r6, r1
 8004262:	4619      	mov	r1, r3
 8004264:	4683      	mov	fp, r0
 8004266:	4617      	mov	r7, r2
 8004268:	4699      	mov	r9, r3
 800426a:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 800426e:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8004272:	f000 f856 	bl	8004322 <_ZNKSt9type_infoeqERKS_>
 8004276:	b190      	cbz	r0, 800429e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8004278:	2e00      	cmp	r6, #0
 800427a:	602c      	str	r4, [r5, #0]
 800427c:	712f      	strb	r7, [r5, #4]
 800427e:	db09      	blt.n	8004294 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8004280:	4434      	add	r4, r6
 8004282:	45a0      	cmp	r8, r4
 8004284:	bf0c      	ite	eq
 8004286:	2406      	moveq	r4, #6
 8004288:	2401      	movne	r4, #1
 800428a:	71ac      	strb	r4, [r5, #6]
 800428c:	2000      	movs	r0, #0
 800428e:	b001      	add	sp, #4
 8004290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004294:	3602      	adds	r6, #2
 8004296:	d1f9      	bne.n	800428c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8004298:	2301      	movs	r3, #1
 800429a:	71ab      	strb	r3, [r5, #6]
 800429c:	e7f6      	b.n	800428c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800429e:	4544      	cmp	r4, r8
 80042a0:	d106      	bne.n	80042b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80042a2:	4651      	mov	r1, sl
 80042a4:	4658      	mov	r0, fp
 80042a6:	f000 f83c 	bl	8004322 <_ZNKSt9type_infoeqERKS_>
 80042aa:	b108      	cbz	r0, 80042b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80042ac:	716f      	strb	r7, [r5, #5]
 80042ae:	e7ed      	b.n	800428c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80042b0:	f8db 0008 	ldr.w	r0, [fp, #8]
 80042b4:	6803      	ldr	r3, [r0, #0]
 80042b6:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 80042ba:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 80042be:	69dc      	ldr	r4, [r3, #28]
 80042c0:	463a      	mov	r2, r7
 80042c2:	464b      	mov	r3, r9
 80042c4:	4631      	mov	r1, r6
 80042c6:	46a4      	mov	ip, r4
 80042c8:	b001      	add	sp, #4
 80042ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ce:	4760      	bx	ip

080042d0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80042d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d4:	4604      	mov	r4, r0
 80042d6:	460d      	mov	r5, r1
 80042d8:	4616      	mov	r6, r2
 80042da:	461f      	mov	r7, r3
 80042dc:	f7ff ff6d 	bl	80041ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80042e0:	b948      	cbnz	r0, 80042f6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80042e2:	68a0      	ldr	r0, [r4, #8]
 80042e4:	6803      	ldr	r3, [r0, #0]
 80042e6:	699c      	ldr	r4, [r3, #24]
 80042e8:	4632      	mov	r2, r6
 80042ea:	463b      	mov	r3, r7
 80042ec:	4629      	mov	r1, r5
 80042ee:	46a4      	mov	ip, r4
 80042f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042f4:	4760      	bx	ip
 80042f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080042fc <_ZSt15get_new_handlerv>:
 80042fc:	4b02      	ldr	r3, [pc, #8]	; (8004308 <_ZSt15get_new_handlerv+0xc>)
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	f3bf 8f5b 	dmb	ish
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000174 	.word	0x20000174

0800430c <_ZdlPv>:
 800430c:	f000 b858 	b.w	80043c0 <free>

08004310 <_ZSt17__throw_bad_allocv>:
 8004310:	b508      	push	{r3, lr}
 8004312:	f000 f81c 	bl	800434e <abort>

08004316 <_ZSt20__throw_length_errorPKc>:
 8004316:	b508      	push	{r3, lr}
 8004318:	f000 f819 	bl	800434e <abort>

0800431c <_ZNSt9type_infoD1Ev>:
 800431c:	4770      	bx	lr

0800431e <_ZNKSt9type_info14__is_pointer_pEv>:
 800431e:	2000      	movs	r0, #0
 8004320:	4770      	bx	lr

08004322 <_ZNKSt9type_infoeqERKS_>:
 8004322:	4281      	cmp	r1, r0
 8004324:	b508      	push	{r3, lr}
 8004326:	d00e      	beq.n	8004346 <_ZNKSt9type_infoeqERKS_+0x24>
 8004328:	6840      	ldr	r0, [r0, #4]
 800432a:	7803      	ldrb	r3, [r0, #0]
 800432c:	2b2a      	cmp	r3, #42	; 0x2a
 800432e:	d00c      	beq.n	800434a <_ZNKSt9type_infoeqERKS_+0x28>
 8004330:	6849      	ldr	r1, [r1, #4]
 8004332:	780b      	ldrb	r3, [r1, #0]
 8004334:	2b2a      	cmp	r3, #42	; 0x2a
 8004336:	bf08      	it	eq
 8004338:	3101      	addeq	r1, #1
 800433a:	f7fb ff4b 	bl	80001d4 <strcmp>
 800433e:	fab0 f080 	clz	r0, r0
 8004342:	0940      	lsrs	r0, r0, #5
 8004344:	bd08      	pop	{r3, pc}
 8004346:	2001      	movs	r0, #1
 8004348:	e7fc      	b.n	8004344 <_ZNKSt9type_infoeqERKS_+0x22>
 800434a:	2000      	movs	r0, #0
 800434c:	e7fa      	b.n	8004344 <_ZNKSt9type_infoeqERKS_+0x22>

0800434e <abort>:
 800434e:	b508      	push	{r3, lr}
 8004350:	2006      	movs	r0, #6
 8004352:	f000 f93f 	bl	80045d4 <raise>
 8004356:	2001      	movs	r0, #1
 8004358:	f7fd f84e 	bl	80013f8 <_exit>

0800435c <__errno>:
 800435c:	4b01      	ldr	r3, [pc, #4]	; (8004364 <__errno+0x8>)
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	2000000c 	.word	0x2000000c

08004368 <__libc_init_array>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	4e0d      	ldr	r6, [pc, #52]	; (80043a0 <__libc_init_array+0x38>)
 800436c:	4c0d      	ldr	r4, [pc, #52]	; (80043a4 <__libc_init_array+0x3c>)
 800436e:	1ba4      	subs	r4, r4, r6
 8004370:	10a4      	asrs	r4, r4, #2
 8004372:	2500      	movs	r5, #0
 8004374:	42a5      	cmp	r5, r4
 8004376:	d109      	bne.n	800438c <__libc_init_array+0x24>
 8004378:	4e0b      	ldr	r6, [pc, #44]	; (80043a8 <__libc_init_array+0x40>)
 800437a:	4c0c      	ldr	r4, [pc, #48]	; (80043ac <__libc_init_array+0x44>)
 800437c:	f000 f948 	bl	8004610 <_init>
 8004380:	1ba4      	subs	r4, r4, r6
 8004382:	10a4      	asrs	r4, r4, #2
 8004384:	2500      	movs	r5, #0
 8004386:	42a5      	cmp	r5, r4
 8004388:	d105      	bne.n	8004396 <__libc_init_array+0x2e>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004390:	4798      	blx	r3
 8004392:	3501      	adds	r5, #1
 8004394:	e7ee      	b.n	8004374 <__libc_init_array+0xc>
 8004396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800439a:	4798      	blx	r3
 800439c:	3501      	adds	r5, #1
 800439e:	e7f2      	b.n	8004386 <__libc_init_array+0x1e>
 80043a0:	08004804 	.word	0x08004804
 80043a4:	08004804 	.word	0x08004804
 80043a8:	08004804 	.word	0x08004804
 80043ac:	08004808 	.word	0x08004808

080043b0 <malloc>:
 80043b0:	4b02      	ldr	r3, [pc, #8]	; (80043bc <malloc+0xc>)
 80043b2:	4601      	mov	r1, r0
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	f000 b87b 	b.w	80044b0 <_malloc_r>
 80043ba:	bf00      	nop
 80043bc:	2000000c 	.word	0x2000000c

080043c0 <free>:
 80043c0:	4b02      	ldr	r3, [pc, #8]	; (80043cc <free+0xc>)
 80043c2:	4601      	mov	r1, r0
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	f000 b825 	b.w	8004414 <_free_r>
 80043ca:	bf00      	nop
 80043cc:	2000000c 	.word	0x2000000c

080043d0 <memmove>:
 80043d0:	4288      	cmp	r0, r1
 80043d2:	b510      	push	{r4, lr}
 80043d4:	eb01 0302 	add.w	r3, r1, r2
 80043d8:	d807      	bhi.n	80043ea <memmove+0x1a>
 80043da:	1e42      	subs	r2, r0, #1
 80043dc:	4299      	cmp	r1, r3
 80043de:	d00a      	beq.n	80043f6 <memmove+0x26>
 80043e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80043e8:	e7f8      	b.n	80043dc <memmove+0xc>
 80043ea:	4283      	cmp	r3, r0
 80043ec:	d9f5      	bls.n	80043da <memmove+0xa>
 80043ee:	1881      	adds	r1, r0, r2
 80043f0:	1ad2      	subs	r2, r2, r3
 80043f2:	42d3      	cmn	r3, r2
 80043f4:	d100      	bne.n	80043f8 <memmove+0x28>
 80043f6:	bd10      	pop	{r4, pc}
 80043f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004400:	e7f7      	b.n	80043f2 <memmove+0x22>

08004402 <memset>:
 8004402:	4402      	add	r2, r0
 8004404:	4603      	mov	r3, r0
 8004406:	4293      	cmp	r3, r2
 8004408:	d100      	bne.n	800440c <memset+0xa>
 800440a:	4770      	bx	lr
 800440c:	f803 1b01 	strb.w	r1, [r3], #1
 8004410:	e7f9      	b.n	8004406 <memset+0x4>
	...

08004414 <_free_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	2900      	cmp	r1, #0
 800441a:	d045      	beq.n	80044a8 <_free_r+0x94>
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f0c      	subs	r4, r1, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	18e4      	addlt	r4, r4, r3
 8004428:	f000 f8f0 	bl	800460c <__malloc_lock>
 800442c:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <_free_r+0x98>)
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	4610      	mov	r0, r2
 8004432:	b933      	cbnz	r3, 8004442 <_free_r+0x2e>
 8004434:	6063      	str	r3, [r4, #4]
 8004436:	6014      	str	r4, [r2, #0]
 8004438:	4628      	mov	r0, r5
 800443a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443e:	f000 b8e6 	b.w	800460e <__malloc_unlock>
 8004442:	42a3      	cmp	r3, r4
 8004444:	d90c      	bls.n	8004460 <_free_r+0x4c>
 8004446:	6821      	ldr	r1, [r4, #0]
 8004448:	1862      	adds	r2, r4, r1
 800444a:	4293      	cmp	r3, r2
 800444c:	bf04      	itt	eq
 800444e:	681a      	ldreq	r2, [r3, #0]
 8004450:	685b      	ldreq	r3, [r3, #4]
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	bf04      	itt	eq
 8004456:	1852      	addeq	r2, r2, r1
 8004458:	6022      	streq	r2, [r4, #0]
 800445a:	6004      	str	r4, [r0, #0]
 800445c:	e7ec      	b.n	8004438 <_free_r+0x24>
 800445e:	4613      	mov	r3, r2
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	b10a      	cbz	r2, 8004468 <_free_r+0x54>
 8004464:	42a2      	cmp	r2, r4
 8004466:	d9fa      	bls.n	800445e <_free_r+0x4a>
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	1858      	adds	r0, r3, r1
 800446c:	42a0      	cmp	r0, r4
 800446e:	d10b      	bne.n	8004488 <_free_r+0x74>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	4401      	add	r1, r0
 8004474:	1858      	adds	r0, r3, r1
 8004476:	4282      	cmp	r2, r0
 8004478:	6019      	str	r1, [r3, #0]
 800447a:	d1dd      	bne.n	8004438 <_free_r+0x24>
 800447c:	6810      	ldr	r0, [r2, #0]
 800447e:	6852      	ldr	r2, [r2, #4]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	4401      	add	r1, r0
 8004484:	6019      	str	r1, [r3, #0]
 8004486:	e7d7      	b.n	8004438 <_free_r+0x24>
 8004488:	d902      	bls.n	8004490 <_free_r+0x7c>
 800448a:	230c      	movs	r3, #12
 800448c:	602b      	str	r3, [r5, #0]
 800448e:	e7d3      	b.n	8004438 <_free_r+0x24>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	1821      	adds	r1, r4, r0
 8004494:	428a      	cmp	r2, r1
 8004496:	bf04      	itt	eq
 8004498:	6811      	ldreq	r1, [r2, #0]
 800449a:	6852      	ldreq	r2, [r2, #4]
 800449c:	6062      	str	r2, [r4, #4]
 800449e:	bf04      	itt	eq
 80044a0:	1809      	addeq	r1, r1, r0
 80044a2:	6021      	streq	r1, [r4, #0]
 80044a4:	605c      	str	r4, [r3, #4]
 80044a6:	e7c7      	b.n	8004438 <_free_r+0x24>
 80044a8:	bd38      	pop	{r3, r4, r5, pc}
 80044aa:	bf00      	nop
 80044ac:	20000178 	.word	0x20000178

080044b0 <_malloc_r>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	1ccd      	adds	r5, r1, #3
 80044b4:	f025 0503 	bic.w	r5, r5, #3
 80044b8:	3508      	adds	r5, #8
 80044ba:	2d0c      	cmp	r5, #12
 80044bc:	bf38      	it	cc
 80044be:	250c      	movcc	r5, #12
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	4606      	mov	r6, r0
 80044c4:	db01      	blt.n	80044ca <_malloc_r+0x1a>
 80044c6:	42a9      	cmp	r1, r5
 80044c8:	d903      	bls.n	80044d2 <_malloc_r+0x22>
 80044ca:	230c      	movs	r3, #12
 80044cc:	6033      	str	r3, [r6, #0]
 80044ce:	2000      	movs	r0, #0
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
 80044d2:	f000 f89b 	bl	800460c <__malloc_lock>
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <_malloc_r+0xac>)
 80044d8:	6814      	ldr	r4, [r2, #0]
 80044da:	4621      	mov	r1, r4
 80044dc:	b991      	cbnz	r1, 8004504 <_malloc_r+0x54>
 80044de:	4c20      	ldr	r4, [pc, #128]	; (8004560 <_malloc_r+0xb0>)
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	b91b      	cbnz	r3, 80044ec <_malloc_r+0x3c>
 80044e4:	4630      	mov	r0, r6
 80044e6:	f000 f83d 	bl	8004564 <_sbrk_r>
 80044ea:	6020      	str	r0, [r4, #0]
 80044ec:	4629      	mov	r1, r5
 80044ee:	4630      	mov	r0, r6
 80044f0:	f000 f838 	bl	8004564 <_sbrk_r>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d124      	bne.n	8004542 <_malloc_r+0x92>
 80044f8:	230c      	movs	r3, #12
 80044fa:	6033      	str	r3, [r6, #0]
 80044fc:	4630      	mov	r0, r6
 80044fe:	f000 f886 	bl	800460e <__malloc_unlock>
 8004502:	e7e4      	b.n	80044ce <_malloc_r+0x1e>
 8004504:	680b      	ldr	r3, [r1, #0]
 8004506:	1b5b      	subs	r3, r3, r5
 8004508:	d418      	bmi.n	800453c <_malloc_r+0x8c>
 800450a:	2b0b      	cmp	r3, #11
 800450c:	d90f      	bls.n	800452e <_malloc_r+0x7e>
 800450e:	600b      	str	r3, [r1, #0]
 8004510:	50cd      	str	r5, [r1, r3]
 8004512:	18cc      	adds	r4, r1, r3
 8004514:	4630      	mov	r0, r6
 8004516:	f000 f87a 	bl	800460e <__malloc_unlock>
 800451a:	f104 000b 	add.w	r0, r4, #11
 800451e:	1d23      	adds	r3, r4, #4
 8004520:	f020 0007 	bic.w	r0, r0, #7
 8004524:	1ac3      	subs	r3, r0, r3
 8004526:	d0d3      	beq.n	80044d0 <_malloc_r+0x20>
 8004528:	425a      	negs	r2, r3
 800452a:	50e2      	str	r2, [r4, r3]
 800452c:	e7d0      	b.n	80044d0 <_malloc_r+0x20>
 800452e:	428c      	cmp	r4, r1
 8004530:	684b      	ldr	r3, [r1, #4]
 8004532:	bf16      	itet	ne
 8004534:	6063      	strne	r3, [r4, #4]
 8004536:	6013      	streq	r3, [r2, #0]
 8004538:	460c      	movne	r4, r1
 800453a:	e7eb      	b.n	8004514 <_malloc_r+0x64>
 800453c:	460c      	mov	r4, r1
 800453e:	6849      	ldr	r1, [r1, #4]
 8004540:	e7cc      	b.n	80044dc <_malloc_r+0x2c>
 8004542:	1cc4      	adds	r4, r0, #3
 8004544:	f024 0403 	bic.w	r4, r4, #3
 8004548:	42a0      	cmp	r0, r4
 800454a:	d005      	beq.n	8004558 <_malloc_r+0xa8>
 800454c:	1a21      	subs	r1, r4, r0
 800454e:	4630      	mov	r0, r6
 8004550:	f000 f808 	bl	8004564 <_sbrk_r>
 8004554:	3001      	adds	r0, #1
 8004556:	d0cf      	beq.n	80044f8 <_malloc_r+0x48>
 8004558:	6025      	str	r5, [r4, #0]
 800455a:	e7db      	b.n	8004514 <_malloc_r+0x64>
 800455c:	20000178 	.word	0x20000178
 8004560:	2000017c 	.word	0x2000017c

08004564 <_sbrk_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4c06      	ldr	r4, [pc, #24]	; (8004580 <_sbrk_r+0x1c>)
 8004568:	2300      	movs	r3, #0
 800456a:	4605      	mov	r5, r0
 800456c:	4608      	mov	r0, r1
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	f7fc ff4c 	bl	800140c <_sbrk>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_sbrk_r+0x1a>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	b103      	cbz	r3, 800457e <_sbrk_r+0x1a>
 800457c:	602b      	str	r3, [r5, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	20000184 	.word	0x20000184

08004584 <_raise_r>:
 8004584:	291f      	cmp	r1, #31
 8004586:	b538      	push	{r3, r4, r5, lr}
 8004588:	4604      	mov	r4, r0
 800458a:	460d      	mov	r5, r1
 800458c:	d904      	bls.n	8004598 <_raise_r+0x14>
 800458e:	2316      	movs	r3, #22
 8004590:	6003      	str	r3, [r0, #0]
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800459a:	b112      	cbz	r2, 80045a2 <_raise_r+0x1e>
 800459c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045a0:	b94b      	cbnz	r3, 80045b6 <_raise_r+0x32>
 80045a2:	4620      	mov	r0, r4
 80045a4:	f000 f830 	bl	8004608 <_getpid_r>
 80045a8:	462a      	mov	r2, r5
 80045aa:	4601      	mov	r1, r0
 80045ac:	4620      	mov	r0, r4
 80045ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045b2:	f000 b817 	b.w	80045e4 <_kill_r>
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d00a      	beq.n	80045d0 <_raise_r+0x4c>
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	d103      	bne.n	80045c6 <_raise_r+0x42>
 80045be:	2316      	movs	r3, #22
 80045c0:	6003      	str	r3, [r0, #0]
 80045c2:	2001      	movs	r0, #1
 80045c4:	e7e7      	b.n	8004596 <_raise_r+0x12>
 80045c6:	2400      	movs	r4, #0
 80045c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80045cc:	4628      	mov	r0, r5
 80045ce:	4798      	blx	r3
 80045d0:	2000      	movs	r0, #0
 80045d2:	e7e0      	b.n	8004596 <_raise_r+0x12>

080045d4 <raise>:
 80045d4:	4b02      	ldr	r3, [pc, #8]	; (80045e0 <raise+0xc>)
 80045d6:	4601      	mov	r1, r0
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	f7ff bfd3 	b.w	8004584 <_raise_r>
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <_kill_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4c07      	ldr	r4, [pc, #28]	; (8004604 <_kill_r+0x20>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4605      	mov	r5, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	f7fc fef1 	bl	80013d8 <_kill>
 80045f6:	1c43      	adds	r3, r0, #1
 80045f8:	d102      	bne.n	8004600 <_kill_r+0x1c>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	b103      	cbz	r3, 8004600 <_kill_r+0x1c>
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	bd38      	pop	{r3, r4, r5, pc}
 8004602:	bf00      	nop
 8004604:	20000184 	.word	0x20000184

08004608 <_getpid_r>:
 8004608:	f7fc bede 	b.w	80013c8 <_getpid>

0800460c <__malloc_lock>:
 800460c:	4770      	bx	lr

0800460e <__malloc_unlock>:
 800460e:	4770      	bx	lr

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
