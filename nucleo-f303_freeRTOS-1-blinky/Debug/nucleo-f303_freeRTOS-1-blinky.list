
nucleo-f303_freeRTOS-1-blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005984  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005b80  08005b80  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b80  08005b80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a3c  20000010  08005b98  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a4c  08005b98  00021a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f7f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002de7  00000000  00000000  00037fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003ada8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002021f  00000000  00000000  0003d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd58  00000000  00000000  0005d4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b841c  00000000  00000000  0006d227  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125643  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005030  00000000  00000000  001256c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b0c 	.word	0x08005b0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005b0c 	.word	0x08005b0c

080001e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0

}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80001ee:	b480      	push	{r7}
 80001f0:	af00      	add	r7, sp, #0
return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr

080001fe <_Z7LEDTaskPv>:
// ainoa tehtävä on vätkyttää lediä määrätahtiin joka määrätään päällä/pois -viiveillä
// HUOM! Viivettä EI generoida HALin HAL_Delay() funktiolla koska se on busy loop
// FreeRTOS-funktio vTaskDelay() luovuttaa ajovuoron aktiivisille taskeille, ja LEDTask on
// odottavien taskien listalla kunnes viiveajastin laukeaa ja se palaa ajokelpoisten taskien listaan
// Odottavat taskit eivät syö prosessorin kapasiteettia!
void LEDTask( void *pvParameters ) {
 80001fe:	b580      	push	{r7, lr}
 8000200:	b082      	sub	sp, #8
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	for ( ;; ) {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020e:	f000 fd71 	bl	8000cf4 <HAL_GPIO_WritePin>
		vTaskDelay( 100/portTICK_PERIOD_MS );
 8000212:	2064      	movs	r0, #100	; 0x64
 8000214:	f003 fea4 	bl	8003f60 <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2120      	movs	r1, #32
 800021c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000220:	f000 fd68 	bl	8000cf4 <HAL_GPIO_WritePin>
		vTaskDelay( 500/portTICK_PERIOD_MS );
 8000224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000228:	f003 fe9a 	bl	8003f60 <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800022c:	e7eb      	b.n	8000206 <_Z7LEDTaskPv+0x8>
	...

08000230 <_Z10buttonTaskPv>:
}

// Nucleon käyttäjän napin lukutaski
// Tunnistetaan napin tilamuutokset vertaamalla nykyistä ja edellistä tilaa
// Jos nappi meni alas niin pysäytetään leditaski. Kun nappi nousee ylös niin vapautetaan leditaski ajoon.
void buttonTask( void *pvParameters ) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	GPIO_PinState btnStatus, prevBtnStatus;
	TaskHandle_t hOtherTask;

	hOtherTask = *(TaskHandle_t *)pvParameters;		// laitetaan leditaskin kahva talteen
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	613b      	str	r3, [r7, #16]
	btnStatus = prevBtnStatus = GPIO_PIN_SET;
 800023e:	2301      	movs	r3, #1
 8000240:	75fb      	strb	r3, [r7, #23]
 8000242:	7dfb      	ldrb	r3, [r7, #23]
 8000244:	73fb      	strb	r3, [r7, #15]
	for ( ;; ) {
		btnStatus = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	480f      	ldr	r0, [pc, #60]	; (8000288 <_Z10buttonTaskPv+0x58>)
 800024c:	f000 fd3a 	bl	8000cc4 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	73fb      	strb	r3, [r7, #15]
		if ( btnStatus == GPIO_PIN_RESET && prevBtnStatus ==  GPIO_PIN_SET ) {
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d106      	bne.n	8000268 <_Z10buttonTaskPv+0x38>
 800025a:	7dfb      	ldrb	r3, [r7, #23]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d103      	bne.n	8000268 <_Z10buttonTaskPv+0x38>
			vTaskSuspend( hOtherTask ); // https://www.freertos.org/a00130.html
 8000260:	6938      	ldr	r0, [r7, #16]
 8000262:	f003 feb1 	bl	8003fc8 <vTaskSuspend>
 8000266:	e008      	b.n	800027a <_Z10buttonTaskPv+0x4a>
		}
		else if ( btnStatus == GPIO_PIN_SET && prevBtnStatus ==  GPIO_PIN_RESET ) {
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d105      	bne.n	800027a <_Z10buttonTaskPv+0x4a>
 800026e:	7dfb      	ldrb	r3, [r7, #23]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <_Z10buttonTaskPv+0x4a>
			vTaskResume( hOtherTask );	// https://www.freertos.org/a00131.html
 8000274:	6938      	ldr	r0, [r7, #16]
 8000276:	f003 ff55 	bl	8004124 <vTaskResume>
		}
		prevBtnStatus = btnStatus;
 800027a:	7bfb      	ldrb	r3, [r7, #15]
 800027c:	75fb      	strb	r3, [r7, #23]
		vTaskDelay( 50/portTICK_PERIOD_MS );	// huilataan 50 ms ettei tehdä tästä busy looppia
 800027e:	2032      	movs	r0, #50	; 0x32
 8000280:	f003 fe6e 	bl	8003f60 <vTaskDelay>
		btnStatus = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000284:	e7df      	b.n	8000246 <_Z10buttonTaskPv+0x16>
 8000286:	bf00      	nop
 8000288:	48000800 	.word	0x48000800

0800028c <main>:
		// https://www.freertos.org/a00127.html
	}
}

int main(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af02      	add	r7, sp, #8

	// vvv--- alkuperäiset alustukset kopioitu main.c tiedostosta
	HAL_Init();
 8000292:	f000 fa75 	bl	8000780 <HAL_Init>

	SystemClock_Config();
 8000296:	f000 f829 	bl	80002ec <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 800029a:	f000 f8c9 	bl	8000430 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800029e:	f000 f893 	bl	80003c8 <_ZL19MX_USART2_UART_Initv>

	// FreeRTOS-taskien luonti. Annetaan kernelin varata tarvittavat muistilohkot kekomuistista (heap)
	// Näiden funktiokutsujen jälkeen FreeRTOSin kerneliin on perustettu taskeille niiden tarvitsemat tietorakenteet,
	// varattu taskien pinomuistit ja tehty kaikki muutkin valmistelut jotta suoritus voidaan siirtää kernelin alaisuuteen
	// xTaskCreate referenssi, kts: https://www.freertos.org/a00125.html
	xTaskCreate( LEDTask, "LED1", 256, NULL, tskIDLE_PRIORITY+1, &hLED );		// Luodaan ledin vätkytystaski
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <main+0x48>)
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	2301      	movs	r3, #1
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2300      	movs	r3, #0
 80002ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b0:	4909      	ldr	r1, [pc, #36]	; (80002d8 <main+0x4c>)
 80002b2:	480a      	ldr	r0, [pc, #40]	; (80002dc <main+0x50>)
 80002b4:	f003 fd15 	bl	8003ce2 <xTaskCreate>
	xTaskCreate( buttonTask, "BTN", 256, &hLED, tskIDLE_PRIORITY+1, &hUI );		// Luodaan napin lukutaski ja annetaan sille parametrina leditaskin kahva
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <main+0x54>)
 80002ba:	9301      	str	r3, [sp, #4]
 80002bc:	2301      	movs	r3, #1
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <main+0x48>)
 80002c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002c6:	4907      	ldr	r1, [pc, #28]	; (80002e4 <main+0x58>)
 80002c8:	4807      	ldr	r0, [pc, #28]	; (80002e8 <main+0x5c>)
 80002ca:	f003 fd0a 	bl	8003ce2 <xTaskCreate>

	// Käynnistetään FreeRTOS-kernelin skeduleri joka ohjaa taskien suoritusta
	// Tästä funktiosta ei koskaan palata joten on samantekevää mitä ohjelmassa lukee tämän funktion jälkeen
	// https://www.freertos.org/a00132.html
	vTaskStartScheduler();
 80002ce:	f003 ff87 	bl	80041e0 <vTaskStartScheduler>

	while (1)
 80002d2:	e7fe      	b.n	80002d2 <main+0x46>
 80002d4:	200000ac 	.word	0x200000ac
 80002d8:	08005b24 	.word	0x08005b24
 80002dc:	080001ff 	.word	0x080001ff
 80002e0:	200000b0 	.word	0x200000b0
 80002e4:	08005b2c 	.word	0x08005b2c
 80002e8:	08000231 	.word	0x08000231

080002ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b0a6      	sub	sp, #152	; 0x98
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f005 fbfd 	bl	8005afa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2258      	movs	r2, #88	; 0x58
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f005 fbef 	bl	8005afa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031c:	2302      	movs	r3, #2
 800031e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000324:	2310      	movs	r3, #16
 8000326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032a:	2302      	movs	r3, #2
 800032c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000338:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800033c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fcea 	bl	8000d24 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	bf14      	ite	ne
 8000356:	2301      	movne	r3, #1
 8000358:	2300      	moveq	r3, #0
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000360:	f000 f8e0 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000368:	2302      	movs	r3, #2
 800036a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000374:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800037e:	2102      	movs	r1, #2
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fbe5 	bl	8001b50 <HAL_RCC_ClockConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	bf14      	ite	ne
 800038c:	2301      	movne	r3, #1
 800038e:	2300      	moveq	r3, #0
 8000390:	b2db      	uxtb	r3, r3
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000396:	f000 f8c5 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800039a:	2302      	movs	r3, #2
 800039c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 fe3b 	bl	8002020 <HAL_RCCEx_PeriphCLKConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf14      	ite	ne
 80003b0:	2301      	movne	r3, #1
 80003b2:	2300      	moveq	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80003ba:	f000 f8b3 	bl	8000524 <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	3798      	adds	r7, #152	; 0x98
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <_ZL19MX_USART2_UART_Initv+0x64>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040a:	4807      	ldr	r0, [pc, #28]	; (8000428 <_ZL19MX_USART2_UART_Initv+0x60>)
 800040c:	f002 fa8a 	bl	8002924 <HAL_UART_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	bf14      	ite	ne
 8000416:	2301      	movne	r3, #1
 8000418:	2300      	moveq	r3, #0
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000420:	f000 f880 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	2000002c 	.word	0x2000002c
 800042c:	40004400 	.word	0x40004400

08000430 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a2a      	ldr	r2, [pc, #168]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 800044c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a24      	ldr	r2, [pc, #144]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000464:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a1e      	ldr	r2, [pc, #120]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 800047c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a18      	ldr	r2, [pc, #96]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <_ZL12MX_GPIO_Initv+0xc4>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f000 fc21 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <_ZL12MX_GPIO_Initv+0xc8>)
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	4619      	mov	r1, r3
 80004c6:	480d      	ldr	r0, [pc, #52]	; (80004fc <_ZL12MX_GPIO_Initv+0xcc>)
 80004c8:	f000 fa72 	bl	80009b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004cc:	2320      	movs	r3, #32
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f000 fa63 	bl	80009b0 <HAL_GPIO_Init>

}
 80004ea:	bf00      	nop
 80004ec:	3728      	adds	r7, #40	; 0x28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	10210000 	.word	0x10210000
 80004fc:	48000800 	.word	0x48000800

08000500 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d101      	bne.n	8000516 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000512:	f000 f94b 	bl	80007ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40001000 	.word	0x40001000

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_MspInit+0x4c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a10      	ldr	r2, [pc, #64]	; (8000580 <HAL_MspInit+0x4c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_MspInit+0x4c>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_MspInit+0x4c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <HAL_MspInit+0x4c>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_MspInit+0x4c>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	210f      	movs	r1, #15
 800056e:	f06f 0001 	mvn.w	r0, #1
 8000572:	f000 f9f3 	bl	800095c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <HAL_UART_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d128      	bne.n	80005f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_UART_MspInit+0x80>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <HAL_UART_MspInit+0x80>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_UART_MspInit+0x80>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_UART_MspInit+0x80>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a10      	ldr	r2, [pc, #64]	; (8000604 <HAL_UART_MspInit+0x80>)
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <HAL_UART_MspInit+0x80>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005d6:	230c      	movs	r3, #12
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005e6:	2307      	movs	r3, #7
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f000 f9dc 	bl	80009b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	; 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40004400 	.word	0x40004400
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	2036      	movs	r0, #54	; 0x36
 800061e:	f000 f99d 	bl	800095c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000622:	2036      	movs	r0, #54	; 0x36
 8000624:	f000 f9b6 	bl	8000994 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <HAL_InitTick+0xa0>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <HAL_InitTick+0xa0>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	61d3      	str	r3, [r2, #28]
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_InitTick+0xa0>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	f003 0310 	and.w	r3, r3, #16
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000640:	f107 0210 	add.w	r2, r7, #16
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4611      	mov	r1, r2
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fcb6 	bl	8001fbc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000650:	f001 fc70 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 8000654:	4603      	mov	r3, r0
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <HAL_InitTick+0xa4>)
 800065e:	fba2 2303 	umull	r2, r3, r2, r3
 8000662:	0c9b      	lsrs	r3, r3, #18
 8000664:	3b01      	subs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_InitTick+0xa8>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <HAL_InitTick+0xac>)
 800066c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_InitTick+0xa8>)
 8000670:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000674:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_InitTick+0xa8>)
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_InitTick+0xa8>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_InitTick+0xa8>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <HAL_InitTick+0xa8>)
 800068a:	f001 fee7 	bl	800245c <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d104      	bne.n	800069e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <HAL_InitTick+0xa8>)
 8000696:	f001 ff17 	bl	80024c8 <HAL_TIM_Base_Start_IT>
 800069a:	4603      	mov	r3, r0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3730      	adds	r7, #48	; 0x30
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	431bde83 	.word	0x431bde83
 80006b0:	200019c8 	.word	0x200019c8
 80006b4:	40001000 	.word	0x40001000

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <TIM6_DAC_IRQHandler+0x10>)
 80006f2:	f001 ff13 	bl	800251c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200019c8 	.word	0x200019c8

08000700 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <SystemInit+0x28>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <SystemInit+0x28>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <SystemInit+0x28>)
 8000716:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800071a:	609a      	str	r2, [r3, #8]
#endif
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000730:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000732:	e003      	b.n	800073c <LoopCopyDataInit>

08000734 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000736:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000738:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800073a:	3104      	adds	r1, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <LoopForever+0xa>)
	ldr	r3, =_edata
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000740:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000742:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000744:	d3f6      	bcc.n	8000734 <CopyDataInit>
	ldr	r2, =_sbss
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000748:	e002      	b.n	8000750 <LoopFillZerobss>

0800074a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800074a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800074c:	f842 3b04 	str.w	r3, [r2], #4

08000750 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <LoopForever+0x16>)
	cmp	r2, r3
 8000752:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000754:	d3f9      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000756:	f7ff ffd3 	bl	8000700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075a:	f005 f99f 	bl	8005a9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075e:	f7ff fd95 	bl	800028c <main>

08000762 <LoopForever>:

LoopForever:
    b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000764:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000768:	08005b88 	.word	0x08005b88
	ldr	r0, =_sdata
 800076c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000770:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000774:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000778:	20001a4c 	.word	0x20001a4c

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f8d8 	bl	8000946 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff ff36 	bl	8000608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff feca 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x20>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_IncTick+0x24>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_IncTick+0x24>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20001a08 	.word	0x20001a08

080007d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_GetTick+0x14>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20001a08 	.word	0x20001a08

080007ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	60d3      	str	r3, [r2, #12]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <__NVIC_GetPriorityGrouping+0x18>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	f003 0307 	and.w	r3, r3, #7
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0b      	blt.n	800087a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	f003 021f 	and.w	r2, r3, #31
 8000868:	4907      	ldr	r1, [pc, #28]	; (8000888 <__NVIC_EnableIRQ+0x38>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	095b      	lsrs	r3, r3, #5
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff4c 	bl	80007ec <__NVIC_SetPriorityGrouping>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096e:	f7ff ff61 	bl	8000834 <__NVIC_GetPriorityGrouping>
 8000972:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	6978      	ldr	r0, [r7, #20]
 800097a:	f7ff ffb1 	bl	80008e0 <NVIC_EncodePriority>
 800097e:	4602      	mov	r2, r0
 8000980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff80 	bl	800088c <__NVIC_SetPriority>
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff54 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	e160      	b.n	8000c82 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	2101      	movs	r1, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8152 	beq.w	8000c7c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d003      	beq.n	80009e8 <HAL_GPIO_Init+0x38>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b12      	cmp	r3, #18
 80009e6:	d123      	bne.n	8000a30 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	08da      	lsrs	r2, r3, #3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3208      	adds	r2, #8
 80009f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	220f      	movs	r2, #15
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	691a      	ldr	r2, [r3, #16]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	6939      	ldr	r1, [r7, #16]
 8000a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0203 	and.w	r2, r3, #3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d00b      	beq.n	8000a84 <HAL_GPIO_Init+0xd4>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d007      	beq.n	8000a84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a78:	2b11      	cmp	r3, #17
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b12      	cmp	r3, #18
 8000a82:	d130      	bne.n	8000ae6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aba:	2201      	movs	r2, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	f003 0201 	and.w	r2, r3, #1
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 80ac 	beq.w	8000c7c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a5d      	ldr	r2, [pc, #372]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b5b      	ldr	r3, [pc, #364]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b3c:	4a59      	ldr	r2, [pc, #356]	; (8000ca4 <HAL_GPIO_Init+0x2f4>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3302      	adds	r3, #2
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	220f      	movs	r2, #15
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b66:	d025      	beq.n	8000bb4 <HAL_GPIO_Init+0x204>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ca8 <HAL_GPIO_Init+0x2f8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d01f      	beq.n	8000bb0 <HAL_GPIO_Init+0x200>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a4e      	ldr	r2, [pc, #312]	; (8000cac <HAL_GPIO_Init+0x2fc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d019      	beq.n	8000bac <HAL_GPIO_Init+0x1fc>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a4d      	ldr	r2, [pc, #308]	; (8000cb0 <HAL_GPIO_Init+0x300>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d013      	beq.n	8000ba8 <HAL_GPIO_Init+0x1f8>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a4c      	ldr	r2, [pc, #304]	; (8000cb4 <HAL_GPIO_Init+0x304>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d00d      	beq.n	8000ba4 <HAL_GPIO_Init+0x1f4>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a4b      	ldr	r2, [pc, #300]	; (8000cb8 <HAL_GPIO_Init+0x308>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x1f0>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4a      	ldr	r2, [pc, #296]	; (8000cbc <HAL_GPIO_Init+0x30c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <HAL_GPIO_Init+0x1ec>
 8000b98:	2306      	movs	r3, #6
 8000b9a:	e00c      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	e00a      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	e008      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e006      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e004      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000bac:	2302      	movs	r3, #2
 8000bae:	e002      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	f002 0203 	and.w	r2, r2, #3
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	4093      	lsls	r3, r2
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc6:	4937      	ldr	r1, [pc, #220]	; (8000ca4 <HAL_GPIO_Init+0x2f4>)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bf8:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c22:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f47f ae97 	bne.w	80009c0 <HAL_GPIO_Init+0x10>
  }
}
 8000c92:	bf00      	nop
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	48000800 	.word	0x48000800
 8000cb0:	48000c00 	.word	0x48000c00
 8000cb4:	48001000 	.word	0x48001000
 8000cb8:	48001400 	.word	0x48001400
 8000cbc:	48001800 	.word	0x48001800
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e001      	b.n	8000ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d10:	e002      	b.n	8000d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f000 bf01 	b.w	8001b40 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 8160 	beq.w	800100e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d4e:	4bae      	ldr	r3, [pc, #696]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d00c      	beq.n	8000d74 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d5a:	4bab      	ldr	r3, [pc, #684]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d159      	bne.n	8000e1a <HAL_RCC_OscConfig+0xf6>
 8000d66:	4ba8      	ldr	r3, [pc, #672]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d72:	d152      	bne.n	8000e1a <HAL_RCC_OscConfig+0xf6>
 8000d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d78:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d80:	fa93 f3a3 	rbit	r3, r3
 8000d84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d88:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8c:	fab3 f383 	clz	r3, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d102      	bne.n	8000da6 <HAL_RCC_OscConfig+0x82>
 8000da0:	4b99      	ldr	r3, [pc, #612]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	e015      	b.n	8000dd2 <HAL_RCC_OscConfig+0xae>
 8000da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000daa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dbe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dc2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000dc6:	fa93 f3a3 	rbit	r3, r3
 8000dca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dce:	4b8e      	ldr	r3, [pc, #568]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dd6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000dda:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000dde:	fa92 f2a2 	rbit	r2, r2
 8000de2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000de6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	f042 0220 	orr.w	r2, r2, #32
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	f002 021f 	and.w	r2, r2, #31
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	4013      	ands	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8102 	beq.w	800100c <HAL_RCC_OscConfig+0x2e8>
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 80fc 	bne.w	800100c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	f000 be93 	b.w	8001b40 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e24:	d106      	bne.n	8000e34 <HAL_RCC_OscConfig+0x110>
 8000e26:	4b78      	ldr	r3, [pc, #480]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a77      	ldr	r2, [pc, #476]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e030      	b.n	8000e96 <HAL_RCC_OscConfig+0x172>
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x134>
 8000e3e:	4b72      	ldr	r3, [pc, #456]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a71      	ldr	r2, [pc, #452]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b6f      	ldr	r3, [pc, #444]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a6e      	ldr	r2, [pc, #440]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e01e      	b.n	8000e96 <HAL_RCC_OscConfig+0x172>
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e62:	d10c      	bne.n	8000e7e <HAL_RCC_OscConfig+0x15a>
 8000e64:	4b68      	ldr	r3, [pc, #416]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a67      	ldr	r2, [pc, #412]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b65      	ldr	r3, [pc, #404]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a64      	ldr	r2, [pc, #400]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	e00b      	b.n	8000e96 <HAL_RCC_OscConfig+0x172>
 8000e7e:	4b62      	ldr	r3, [pc, #392]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a61      	ldr	r2, [pc, #388]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a5e      	ldr	r2, [pc, #376]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d059      	beq.n	8000f54 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fc98 	bl	80007d4 <HAL_GetTick>
 8000ea4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fc93 	bl	80007d4 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b64      	cmp	r3, #100	; 0x64
 8000eb8:	d902      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f000 be40 	b.w	8001b40 <HAL_RCC_OscConfig+0xe1c>
 8000ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ed4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x1ce>
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	e015      	b.n	8000f1e <HAL_RCC_OscConfig+0x1fa>
 8000ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f0e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f22:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f26:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f2a:	fa92 f2a2 	rbit	r2, r2
 8000f2e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f32:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f36:	fab2 f282 	clz	r2, r2
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f042 0220 	orr.w	r2, r2, #32
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f002 021f 	and.w	r2, r2, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0ab      	beq.n	8000eaa <HAL_RCC_OscConfig+0x186>
 8000f52:	e05c      	b.n	800100e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc3e 	bl	80007d4 <HAL_GetTick>
 8000f58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fc39 	bl	80007d4 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d902      	bls.n	8000f74 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	f000 bde6 	b.w	8001b40 <HAL_RCC_OscConfig+0xe1c>
 8000f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f78:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d102      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x282>
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	e015      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2ae>
 8000fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000faa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fc2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_RCC_OscConfig+0x2e4>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000fda:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fde:	fa92 f2a2 	rbit	r2, r2
 8000fe2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fe6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fea:	fab2 f282 	clz	r2, r2
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	f042 0220 	orr.w	r2, r2, #32
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	f002 021f 	and.w	r2, r2, #31
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1ab      	bne.n	8000f5e <HAL_RCC_OscConfig+0x23a>
 8001006:	e002      	b.n	800100e <HAL_RCC_OscConfig+0x2ea>
 8001008:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 8170 	beq.w	80012fe <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800101e:	4bd0      	ldr	r3, [pc, #832]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00c      	beq.n	8001044 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800102a:	4bcd      	ldr	r3, [pc, #820]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b08      	cmp	r3, #8
 8001034:	d16d      	bne.n	8001112 <HAL_RCC_OscConfig+0x3ee>
 8001036:	4bca      	ldr	r3, [pc, #808]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800103e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001042:	d166      	bne.n	8001112 <HAL_RCC_OscConfig+0x3ee>
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001056:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0x350>
 800106e:	4bbc      	ldr	r3, [pc, #752]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	e013      	b.n	800109c <HAL_RCC_OscConfig+0x378>
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800108c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001098:	4bb1      	ldr	r3, [pc, #708]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	2202      	movs	r2, #2
 800109e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010a2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010a6:	fa92 f2a2 	rbit	r2, r2
 80010aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80010ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f002 021f 	and.w	r2, r2, #31
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <HAL_RCC_OscConfig+0x3ba>
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d002      	beq.n	80010de <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	f000 bd31 	b.w	8001b40 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010de:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	21f8      	movs	r1, #248	; 0xf8
 80010ee:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010f6:	fa91 f1a1 	rbit	r1, r1
 80010fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001102:	fab1 f181 	clz	r1, r1
 8001106:	b2c9      	uxtb	r1, r1
 8001108:	408b      	lsls	r3, r1
 800110a:	4995      	ldr	r1, [pc, #596]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001110:	e0f5      	b.n	80012fe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 8085 	beq.w	8001228 <HAL_RCC_OscConfig+0x504>
 800111e:	2301      	movs	r3, #1
 8001120:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001130:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001134:	fab3 f383 	clz	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800113e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	461a      	mov	r2, r3
 8001146:	2301      	movs	r3, #1
 8001148:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fb43 	bl	80007d4 <HAL_GetTick>
 800114e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001152:	e00a      	b.n	800116a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fb3e 	bl	80007d4 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d902      	bls.n	800116a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	f000 bceb 	b.w	8001b40 <HAL_RCC_OscConfig+0xe1c>
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800117c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d102      	bne.n	800119a <HAL_RCC_OscConfig+0x476>
 8001194:	4b72      	ldr	r3, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	e013      	b.n	80011c2 <HAL_RCC_OscConfig+0x49e>
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011be:	4b68      	ldr	r3, [pc, #416]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	2202      	movs	r2, #2
 80011c4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011cc:	fa92 f2a2 	rbit	r2, r2
 80011d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011d8:	fab2 f282 	clz	r2, r2
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	f042 0220 	orr.w	r2, r2, #32
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f002 021f 	and.w	r2, r2, #31
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f202 	lsl.w	r2, r1, r2
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0af      	beq.n	8001154 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f4:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	21f8      	movs	r1, #248	; 0xf8
 8001204:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800120c:	fa91 f1a1 	rbit	r1, r1
 8001210:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001214:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001218:	fab1 f181 	clz	r1, r1
 800121c:	b2c9      	uxtb	r1, r1
 800121e:	408b      	lsls	r3, r1
 8001220:	494f      	ldr	r1, [pc, #316]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
 8001226:	e06a      	b.n	80012fe <HAL_RCC_OscConfig+0x5da>
 8001228:	2301      	movs	r3, #1
 800122a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800123a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	461a      	mov	r2, r3
 8001250:	2300      	movs	r3, #0
 8001252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fabe 	bl	80007d4 <HAL_GetTick>
 8001258:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fab9 	bl	80007d4 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d902      	bls.n	8001274 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	f000 bc66 	b.w	8001b40 <HAL_RCC_OscConfig+0xe1c>
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001286:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	095b      	lsrs	r3, r3, #5
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d102      	bne.n	80012a4 <HAL_RCC_OscConfig+0x580>
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	e013      	b.n	80012cc <HAL_RCC_OscConfig+0x5a8>
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_RCC_OscConfig+0x63c>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2202      	movs	r2, #2
 80012ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012d6:	fa92 f2a2 	rbit	r2, r2
 80012da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012e2:	fab2 f282 	clz	r2, r2
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f042 0220 	orr.w	r2, r2, #32
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	f002 021f 	and.w	r2, r2, #31
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1af      	bne.n	800125e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80da 	beq.w	80014c2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d069      	beq.n	80013ec <HAL_RCC_OscConfig+0x6c8>
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800132a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_OscConfig+0x640>)
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	461a      	mov	r2, r3
 800133e:	2301      	movs	r3, #1
 8001340:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff fa47 	bl	80007d4 <HAL_GetTick>
 8001346:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e00d      	b.n	8001368 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fa42 	bl	80007d4 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d905      	bls.n	8001368 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e3ef      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
 8001360:	40021000 	.word	0x40021000
 8001364:	10908120 	.word	0x10908120
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001372:	fa93 f2a3 	rbit	r2, r3
 8001376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001380:	2202      	movs	r2, #2
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	fa93 f2a3 	rbit	r2, r3
 800138e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001398:	2202      	movs	r2, #2
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	fa93 f2a3 	rbit	r2, r3
 80013a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ac:	4ba4      	ldr	r3, [pc, #656]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80013ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013b4:	2102      	movs	r1, #2
 80013b6:	6019      	str	r1, [r3, #0]
 80013b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fa93 f1a3 	rbit	r1, r3
 80013c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013c6:	6019      	str	r1, [r3, #0]
  return result;
 80013c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	2101      	movs	r1, #1
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0b0      	beq.n	800134c <HAL_RCC_OscConfig+0x628>
 80013ea:	e06a      	b.n	80014c2 <HAL_RCC_OscConfig+0x79e>
 80013ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	fa93 f2a3 	rbit	r2, r3
 80013fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001402:	601a      	str	r2, [r3, #0]
  return result;
 8001404:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001408:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140a:	fab3 f383 	clz	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4b8c      	ldr	r3, [pc, #560]	; (8001644 <HAL_RCC_OscConfig+0x920>)
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	461a      	mov	r2, r3
 800141a:	2300      	movs	r3, #0
 800141c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff f9d9 	bl	80007d4 <HAL_GetTick>
 8001422:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001426:	e009      	b.n	800143c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff f9d4 	bl	80007d4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e381      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
 800143c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001440:	2202      	movs	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f2a3 	rbit	r2, r3
 800144e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001458:	2202      	movs	r2, #2
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fa93 f2a3 	rbit	r2, r3
 8001466:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001470:	2202      	movs	r2, #2
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f2a3 	rbit	r2, r3
 800147e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001482:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 8001486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001488:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800148c:	2102      	movs	r1, #2
 800148e:	6019      	str	r1, [r3, #0]
 8001490:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f1a3 	rbit	r1, r3
 800149a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800149e:	6019      	str	r1, [r3, #0]
  return result;
 80014a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1b2      	bne.n	8001428 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 8157 	beq.w	8001780 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d112      	bne.n	800150a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	4b56      	ldr	r3, [pc, #344]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	4a55      	ldr	r2, [pc, #340]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ee:	61d3      	str	r3, [r2, #28]
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001504:	2301      	movs	r3, #1
 8001506:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <HAL_RCC_OscConfig+0x924>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_RCC_OscConfig+0x924>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a4b      	ldr	r2, [pc, #300]	; (8001648 <HAL_RCC_OscConfig+0x924>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001522:	f7ff f957 	bl	80007d4 <HAL_GetTick>
 8001526:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	e009      	b.n	8001540 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152c:	f7ff f952 	bl	80007d4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e2ff      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_RCC_OscConfig+0x924>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ef      	beq.n	800152c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_RCC_OscConfig+0x840>
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4a39      	ldr	r2, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	e02f      	b.n	80015c4 <HAL_RCC_OscConfig+0x8a0>
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x864>
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a33      	ldr	r2, [pc, #204]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6213      	str	r3, [r2, #32]
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a30      	ldr	r2, [pc, #192]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0x8a0>
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x888>
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6213      	str	r3, [r2, #32]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x8a0>
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6213      	str	r3, [r2, #32]
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4a20      	ldr	r2, [pc, #128]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 80015be:	f023 0304 	bic.w	r3, r3, #4
 80015c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d06a      	beq.n	80016a4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff f901 	bl	80007d4 <HAL_GetTick>
 80015d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff f8fc 	bl	80007d4 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e2a7      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
 80015f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015f4:	2202      	movs	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	fa93 f2a3 	rbit	r2, r3
 8001602:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800161e:	601a      	str	r2, [r3, #0]
  return result;
 8001620:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001624:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	095b      	lsrs	r3, r3, #5
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d108      	bne.n	800164c <HAL_RCC_OscConfig+0x928>
 800163a:	4b01      	ldr	r3, [pc, #4]	; (8001640 <HAL_RCC_OscConfig+0x91c>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	e013      	b.n	8001668 <HAL_RCC_OscConfig+0x944>
 8001640:	40021000 	.word	0x40021000
 8001644:	10908120 	.word	0x10908120
 8001648:	40007000 	.word	0x40007000
 800164c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	fa93 f2a3 	rbit	r2, r3
 800165e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	4bc0      	ldr	r3, [pc, #768]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800166c:	2102      	movs	r1, #2
 800166e:	6011      	str	r1, [r2, #0]
 8001670:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	fa92 f1a2 	rbit	r1, r2
 800167a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800167e:	6011      	str	r1, [r2, #0]
  return result;
 8001680:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	fab2 f282 	clz	r2, r2
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f002 021f 	and.w	r2, r2, #31
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d09a      	beq.n	80015d8 <HAL_RCC_OscConfig+0x8b4>
 80016a2:	e063      	b.n	800176c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff f896 	bl	80007d4 <HAL_GetTick>
 80016a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ae:	f7ff f891 	bl	80007d4 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e23c      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
 80016c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ca:	2202      	movs	r2, #2
 80016cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	fa93 f2a3 	rbit	r2, r3
 80016d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016e2:	2202      	movs	r2, #2
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016f4:	601a      	str	r2, [r3, #0]
  return result;
 80016f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d102      	bne.n	8001716 <HAL_RCC_OscConfig+0x9f2>
 8001710:	4b95      	ldr	r3, [pc, #596]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	e00d      	b.n	8001732 <HAL_RCC_OscConfig+0xa0e>
 8001716:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800171a:	2202      	movs	r2, #2
 800171c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	4b8e      	ldr	r3, [pc, #568]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001736:	2102      	movs	r1, #2
 8001738:	6011      	str	r1, [r2, #0]
 800173a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	fa92 f1a2 	rbit	r1, r2
 8001744:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001748:	6011      	str	r1, [r2, #0]
  return result;
 800174a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	fab2 f282 	clz	r2, r2
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f002 021f 	and.w	r2, r2, #31
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1a0      	bne.n	80016ae <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	4a7b      	ldr	r2, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 800177a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 81d9 	beq.w	8001b3e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178c:	4b76      	ldr	r3, [pc, #472]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	f000 81a6 	beq.w	8001ae6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	f040 811e 	bne.w	80019e2 <HAL_RCC_OscConfig+0xcbe>
 80017a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fa93 f2a3 	rbit	r2, r3
 80017ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017be:	601a      	str	r2, [r3, #0]
  return result;
 80017c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	461a      	mov	r2, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7fe fffa 	bl	80007d4 <HAL_GetTick>
 80017e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	e009      	b.n	80017fa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7fe fff5 	bl	80007d4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1a2      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
 80017fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001812:	601a      	str	r2, [r3, #0]
  return result;
 8001814:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001818:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d102      	bne.n	8001834 <HAL_RCC_OscConfig+0xb10>
 800182e:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	e01b      	b.n	800186c <HAL_RCC_OscConfig+0xb48>
 8001834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fa93 f2a3 	rbit	r2, r3
 8001848:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fa93 f2a3 	rbit	r2, r3
 8001862:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001870:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001874:	6011      	str	r1, [r2, #0]
 8001876:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	fa92 f1a2 	rbit	r1, r2
 8001880:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001884:	6011      	str	r1, [r2, #0]
  return result;
 8001886:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	fab2 f282 	clz	r2, r2
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f002 021f 	and.w	r2, r2, #31
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d19e      	bne.n	80017e6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f023 020f 	bic.w	r2, r3, #15
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	492c      	ldr	r1, [pc, #176]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6a19      	ldr	r1, [r3, #32]
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	4925      	ldr	r1, [pc, #148]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
 80018d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f0:	601a      	str	r2, [r3, #0]
  return result;
 80018f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001902:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	461a      	mov	r2, r3
 800190a:	2301      	movs	r3, #1
 800190c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7fe ff61 	bl	80007d4 <HAL_GetTick>
 8001912:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001916:	e009      	b.n	800192c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7fe ff5c 	bl	80007d4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e109      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
 800192c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001944:	601a      	str	r2, [r3, #0]
  return result;
 8001946:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800194a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_RCC_OscConfig+0xc48>
 8001960:	4b01      	ldr	r3, [pc, #4]	; (8001968 <HAL_RCC_OscConfig+0xc44>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	e01e      	b.n	80019a4 <HAL_RCC_OscConfig+0xc80>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001970:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800198a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0xe28>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ac:	6011      	str	r1, [r2, #0]
 80019ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fa92 f1a2 	rbit	r1, r2
 80019b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019bc:	6011      	str	r1, [r2, #0]
  return result;
 80019be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	fab2 f282 	clz	r2, r2
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f042 0220 	orr.w	r2, r2, #32
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f002 021f 	and.w	r2, r2, #31
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d09b      	beq.n	8001918 <HAL_RCC_OscConfig+0xbf4>
 80019e0:	e0ad      	b.n	8001b3e <HAL_RCC_OscConfig+0xe1a>
 80019e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019fa:	601a      	str	r2, [r3, #0]
  return result;
 80019fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	461a      	mov	r2, r3
 8001a14:	2300      	movs	r3, #0
 8001a16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7fe fedc 	bl	80007d4 <HAL_GetTick>
 8001a1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a20:	e009      	b.n	8001a36 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7fe fed7 	bl	80007d4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e084      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
 8001a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4e:	601a      	str	r2, [r3, #0]
  return result;
 8001a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d102      	bne.n	8001a70 <HAL_RCC_OscConfig+0xd4c>
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_OscConfig+0xe28>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	e01b      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd84>
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	f107 0320 	add.w	r3, r7, #32
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_RCC_OscConfig+0xe28>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f107 0214 	add.w	r2, r7, #20
 8001aac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ab0:	6011      	str	r1, [r2, #0]
 8001ab2:	f107 0214 	add.w	r2, r7, #20
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	fa92 f1a2 	rbit	r1, r2
 8001abc:	f107 0210 	add.w	r2, r7, #16
 8001ac0:	6011      	str	r1, [r2, #0]
  return result;
 8001ac2:	f107 0210 	add.w	r2, r7, #16
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f002 021f 	and.w	r2, r2, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d19e      	bne.n	8001a22 <HAL_RCC_OscConfig+0xcfe>
 8001ae4:	e02b      	b.n	8001b3e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e025      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_RCC_OscConfig+0xe28>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_RCC_OscConfig+0xe28>)
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b08:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d111      	bne.n	8001b3a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d108      	bne.n	8001b3a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b2c:	f003 020f 	and.w	r2, r3, #15
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b09e      	sub	sp, #120	; 0x78
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e162      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b90      	ldr	r3, [pc, #576]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d910      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b8d      	ldr	r3, [pc, #564]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0207 	bic.w	r2, r3, #7
 8001b7e:	498b      	ldr	r1, [pc, #556]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e14a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	497f      	ldr	r1, [pc, #508]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80dc 	beq.w	8001d7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d13c      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xf6>
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xa6>
 8001bf0:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	e00f      	b.n	8001c16 <HAL_RCC_ClockConfig+0xc6>
 8001bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	667b      	str	r3, [r7, #100]	; 0x64
 8001c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c08:	663b      	str	r3, [r7, #96]	; 0x60
 8001c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c12:	4b67      	ldr	r3, [pc, #412]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c1e:	fa92 f2a2 	rbit	r2, r2
 8001c22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c26:	fab2 f282 	clz	r2, r2
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f042 0220 	orr.w	r2, r2, #32
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f002 021f 	and.w	r2, r2, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d17b      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0f3      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d13c      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x178>
 8001c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x128>
 8001c72:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_ClockConfig+0x148>
 8001c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
 8001c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c94:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ca0:	fa92 f2a2 	rbit	r2, r2
 8001ca4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d13a      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b2      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2de>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	095b      	lsrs	r3, r3, #5
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x1a0>
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	e00d      	b.n	8001d0c <HAL_RCC_ClockConfig+0x1bc>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	61ba      	str	r2, [r7, #24]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	fa92 f2a2 	rbit	r2, r2
 8001d16:	617a      	str	r2, [r7, #20]
  return result;
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	fab2 f282 	clz	r2, r2
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f042 0220 	orr.w	r2, r2, #32
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	f002 021f 	and.w	r2, r2, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e079      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f023 0203 	bic.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	491a      	ldr	r1, [pc, #104]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d4c:	f7fe fd42 	bl	80007d4 <HAL_GetTick>
 8001d50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7fe fd3e 	bl	80007d4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e061      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 020c 	and.w	r2, r3, #12
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1eb      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d214      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 0207 	bic.w	r2, r3, #7
 8001d92:	4906      	ldr	r1, [pc, #24]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e040      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2de>
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_ClockConfig+0x2e8>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	491a      	ldr	r1, [pc, #104]	; (8001e38 <HAL_RCC_ClockConfig+0x2e8>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_RCC_ClockConfig+0x2e8>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4912      	ldr	r1, [pc, #72]	; (8001e38 <HAL_RCC_ClockConfig+0x2e8>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001df2:	f000 f829 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001df6:	4601      	mov	r1, r0
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_RCC_ClockConfig+0x2e8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	22f0      	movs	r2, #240	; 0xf0
 8001e02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	fa92 f2a2 	rbit	r2, r2
 8001e0a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	40d3      	lsrs	r3, r2
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x2ec>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_RCC_ClockConfig+0x2f0>)
 8001e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_RCC_ClockConfig+0x2f4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fbee 	bl	8000608 <HAL_InitTick>
  
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3778      	adds	r7, #120	; 0x78
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08005b48 	.word	0x08005b48
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x30>
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x36>
 8001e76:	e03f      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e7a:	623b      	str	r3, [r7, #32]
      break;
 8001e7c:	e03f      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	fa92 f2a2 	rbit	r2, r2
 8001e90:	607a      	str	r2, [r7, #4]
  return result;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	fab2 f282 	clz	r2, r2
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	40d3      	lsrs	r3, r2
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	220f      	movs	r2, #15
 8001eac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	fa92 f2a2 	rbit	r2, r2
 8001eb4:	60fa      	str	r2, [r7, #12]
  return result;
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	fab2 f282 	clz	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	40d3      	lsrs	r3, r2
 8001ec0:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee0:	e007      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	623b      	str	r3, [r7, #32]
      break;
 8001ef6:	e002      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001efa:	623b      	str	r3, [r7, #32]
      break;
 8001efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efe:	6a3b      	ldr	r3, [r7, #32]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	372c      	adds	r7, #44	; 0x2c
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	007a1200 	.word	0x007a1200
 8001f14:	08005b60 	.word	0x08005b60
 8001f18:	08005b70 	.word	0x08005b70

08001f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f3a:	f7ff ffef 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f3e:	4601      	mov	r1, r0
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	fa92 f2a2 	rbit	r2, r2
 8001f54:	603a      	str	r2, [r7, #0]
  return result;
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	fab2 f282 	clz	r2, r2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	40d3      	lsrs	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	08005b58 	.word	0x08005b58

08001f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f7e:	f7ff ffcd 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f82:	4601      	mov	r1, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	fa92 f2a2 	rbit	r2, r2
 8001f98:	603a      	str	r2, [r7, #0]
  return result;
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	40d3      	lsrs	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	08005b58 	.word	0x08005b58

08001fbc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	220f      	movs	r2, #15
 8001fca:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_RCC_GetClockConfig+0x5c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_RCC_GetClockConfig+0x5c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_GetClockConfig+0x5c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <HAL_RCC_GetClockConfig+0x60>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0207 	and.w	r2, r3, #7
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40022000 	.word	0x40022000

08002020 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b092      	sub	sp, #72	; 0x48
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80d7 	beq.w	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002044:	4b4e      	ldr	r3, [pc, #312]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10e      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a4a      	ldr	r2, [pc, #296]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b45      	ldr	r3, [pc, #276]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7fe fba5 	bl	80007d4 <HAL_GetTick>
 800208a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7fe fba1 	bl	80007d4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1d6      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8084 	beq.w	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d07c      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	461a      	mov	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	461a      	mov	r2, r3
 800211a:	2300      	movs	r3, #0
 800211c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002122:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d04b      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fb51 	bl	80007d4 <HAL_GetTick>
 8002132:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fb4d 	bl	80007d4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e180      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800214c:	2302      	movs	r3, #2
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	61fb      	str	r3, [r7, #28]
  return result;
 8002164:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d108      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800217a:	4b01      	ldr	r3, [pc, #4]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	e00d      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002180:	40021000 	.word	0x40021000
 8002184:	40007000 	.word	0x40007000
 8002188:	10908100 	.word	0x10908100
 800218c:	2302      	movs	r3, #2
 800218e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	4ba0      	ldr	r3, [pc, #640]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2202      	movs	r2, #2
 800219e:	613a      	str	r2, [r7, #16]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	fa92 f2a2 	rbit	r2, r2
 80021a6:	60fa      	str	r2, [r7, #12]
  return result;
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0b7      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021c6:	4b95      	ldr	r3, [pc, #596]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4992      	ldr	r1, [pc, #584]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b8e      	ldr	r3, [pc, #568]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4a8d      	ldr	r2, [pc, #564]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f8:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	f023 0203 	bic.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4985      	ldr	r1, [pc, #532]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002206:	4313      	orrs	r3, r2
 8002208:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002216:	4b81      	ldr	r3, [pc, #516]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	497e      	ldr	r1, [pc, #504]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002234:	4b79      	ldr	r3, [pc, #484]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4976      	ldr	r1, [pc, #472]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002252:	4b72      	ldr	r3, [pc, #456]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f023 0210 	bic.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	496f      	ldr	r1, [pc, #444]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	4967      	ldr	r1, [pc, #412]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228e:	4b63      	ldr	r3, [pc, #396]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f023 0220 	bic.w	r2, r3, #32
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4960      	ldr	r1, [pc, #384]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ac:	4b5b      	ldr	r3, [pc, #364]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	4958      	ldr	r1, [pc, #352]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4951      	ldr	r1, [pc, #324]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4949      	ldr	r1, [pc, #292]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002306:	4b45      	ldr	r3, [pc, #276]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4942      	ldr	r1, [pc, #264]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002324:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	493a      	ldr	r1, [pc, #232]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	4933      	ldr	r1, [pc, #204]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	492b      	ldr	r1, [pc, #172]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4924      	ldr	r1, [pc, #144]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	491c      	ldr	r1, [pc, #112]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	4915      	ldr	r1, [pc, #84]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	490d      	ldr	r1, [pc, #52]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002402:	4906      	ldr	r1, [pc, #24]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00c      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002414:	4b01      	ldr	r3, [pc, #4]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	e002      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002428:	490b      	ldr	r1, [pc, #44]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800242a:	4313      	orrs	r3, r2
 800242c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	4904      	ldr	r1, [pc, #16]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002448:	4313      	orrs	r3, r2
 800244a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3748      	adds	r7, #72	; 0x48
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e01d      	b.n	80024aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f815 	bl	80024b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f000 f986 	bl	80027ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_TIM_Base_Start_IT+0x50>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d00b      	beq.n	800250a <HAL_TIM_Base_Start_IT+0x42>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d007      	beq.n	800250a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	00010007 	.word	0x00010007

0800251c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d122      	bne.n	8002578 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b02      	cmp	r3, #2
 800253e:	d11b      	bne.n	8002578 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0202 	mvn.w	r2, #2
 8002548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f905 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8f7 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f908 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b04      	cmp	r3, #4
 8002584:	d122      	bne.n	80025cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d11b      	bne.n	80025cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0204 	mvn.w	r2, #4
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8db 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 80025b8:	e005      	b.n	80025c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8cd 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f8de 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d122      	bne.n	8002620 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d11b      	bne.n	8002620 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0208 	mvn.w	r2, #8
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f8b1 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f8a3 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f8b4 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b10      	cmp	r3, #16
 800262c:	d122      	bne.n	8002674 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b10      	cmp	r3, #16
 800263a:	d11b      	bne.n	8002674 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0210 	mvn.w	r2, #16
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2208      	movs	r2, #8
 800264a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f887 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f879 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f88a 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0201 	mvn.w	r2, #1
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fd ff30 	bl	8000500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026aa:	2b80      	cmp	r3, #128	; 0x80
 80026ac:	d10e      	bne.n	80026cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d107      	bne.n	80026cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f918 	bl	80028fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026da:	d10e      	bne.n	80026fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d107      	bne.n	80026fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f90b 	bl	8002910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d10e      	bne.n	8002726 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	d107      	bne.n	8002726 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800271e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f838 	bl	8002796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b20      	cmp	r3, #32
 8002732:	d10e      	bne.n	8002752 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b20      	cmp	r3, #32
 8002740:	d107      	bne.n	8002752 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f06f 0220 	mvn.w	r2, #32
 800274a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f8cb 	bl	80028e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a42      	ldr	r2, [pc, #264]	; (80028c8 <TIM_Base_SetConfig+0x11c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d00f      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3f      	ldr	r2, [pc, #252]	; (80028cc <TIM_Base_SetConfig+0x120>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00b      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <TIM_Base_SetConfig+0x124>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3d      	ldr	r2, [pc, #244]	; (80028d4 <TIM_Base_SetConfig+0x128>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3c      	ldr	r2, [pc, #240]	; (80028d8 <TIM_Base_SetConfig+0x12c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d108      	bne.n	80027fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <TIM_Base_SetConfig+0x11c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01f      	beq.n	8002846 <TIM_Base_SetConfig+0x9a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d01b      	beq.n	8002846 <TIM_Base_SetConfig+0x9a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a2e      	ldr	r2, [pc, #184]	; (80028cc <TIM_Base_SetConfig+0x120>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d017      	beq.n	8002846 <TIM_Base_SetConfig+0x9a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a2d      	ldr	r2, [pc, #180]	; (80028d0 <TIM_Base_SetConfig+0x124>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <TIM_Base_SetConfig+0x9a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <TIM_Base_SetConfig+0x128>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00f      	beq.n	8002846 <TIM_Base_SetConfig+0x9a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <TIM_Base_SetConfig+0x130>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00b      	beq.n	8002846 <TIM_Base_SetConfig+0x9a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a2b      	ldr	r2, [pc, #172]	; (80028e0 <TIM_Base_SetConfig+0x134>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <TIM_Base_SetConfig+0x9a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <TIM_Base_SetConfig+0x138>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d003      	beq.n	8002846 <TIM_Base_SetConfig+0x9a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <TIM_Base_SetConfig+0x12c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d108      	bne.n	8002858 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <TIM_Base_SetConfig+0x11c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <TIM_Base_SetConfig+0x100>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <TIM_Base_SetConfig+0x128>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00f      	beq.n	80028ac <TIM_Base_SetConfig+0x100>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <TIM_Base_SetConfig+0x130>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00b      	beq.n	80028ac <TIM_Base_SetConfig+0x100>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <TIM_Base_SetConfig+0x134>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <TIM_Base_SetConfig+0x100>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <TIM_Base_SetConfig+0x138>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_Base_SetConfig+0x100>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <TIM_Base_SetConfig+0x12c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d103      	bne.n	80028b4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	615a      	str	r2, [r3, #20]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800
 80028d4:	40013400 	.word	0x40013400
 80028d8:	40015000 	.word	0x40015000
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800

080028e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e040      	b.n	80029b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd fe1c 	bl	8000584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f82c 	bl	80029c0 <UART_SetConfig>
 8002968:	4603      	mov	r3, r0
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e022      	b.n	80029b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa3a 	bl	8002df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800298e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800299e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fac1 	bl	8002f38 <UART_CheckIdleState>
 80029b6:	4603      	mov	r3, r0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4bac      	ldr	r3, [pc, #688]	; (8002ca0 <UART_SetConfig+0x2e0>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	6939      	ldr	r1, [r7, #16]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a9a      	ldr	r2, [pc, #616]	; (8002ca4 <UART_SetConfig+0x2e4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d121      	bne.n	8002a84 <UART_SetConfig+0xc4>
 8002a40:	4b99      	ldr	r3, [pc, #612]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d817      	bhi.n	8002a7c <UART_SetConfig+0xbc>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <UART_SetConfig+0x94>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a71 	.word	0x08002a71
 8002a5c:	08002a77 	.word	0x08002a77
 8002a60:	08002a6b 	.word	0x08002a6b
 8002a64:	2301      	movs	r3, #1
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e0b2      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e0af      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002a70:	2304      	movs	r3, #4
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	e0ac      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002a76:	2308      	movs	r3, #8
 8002a78:	77fb      	strb	r3, [r7, #31]
 8002a7a:	e0a9      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	77fb      	strb	r3, [r7, #31]
 8002a80:	bf00      	nop
 8002a82:	e0a5      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a88      	ldr	r2, [pc, #544]	; (8002cac <UART_SetConfig+0x2ec>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d123      	bne.n	8002ad6 <UART_SetConfig+0x116>
 8002a8e:	4b86      	ldr	r3, [pc, #536]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9a:	d012      	beq.n	8002ac2 <UART_SetConfig+0x102>
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d802      	bhi.n	8002aa8 <UART_SetConfig+0xe8>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <UART_SetConfig+0xf6>
 8002aa6:	e012      	b.n	8002ace <UART_SetConfig+0x10e>
 8002aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aac:	d00c      	beq.n	8002ac8 <UART_SetConfig+0x108>
 8002aae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ab2:	d003      	beq.n	8002abc <UART_SetConfig+0xfc>
 8002ab4:	e00b      	b.n	8002ace <UART_SetConfig+0x10e>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	77fb      	strb	r3, [r7, #31]
 8002aba:	e089      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002abc:	2302      	movs	r3, #2
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	e086      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	77fb      	strb	r3, [r7, #31]
 8002ac6:	e083      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002ac8:	2308      	movs	r3, #8
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e080      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002ace:	2310      	movs	r3, #16
 8002ad0:	77fb      	strb	r3, [r7, #31]
 8002ad2:	bf00      	nop
 8002ad4:	e07c      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a75      	ldr	r2, [pc, #468]	; (8002cb0 <UART_SetConfig+0x2f0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d123      	bne.n	8002b28 <UART_SetConfig+0x168>
 8002ae0:	4b71      	ldr	r3, [pc, #452]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002ae8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aec:	d012      	beq.n	8002b14 <UART_SetConfig+0x154>
 8002aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002af2:	d802      	bhi.n	8002afa <UART_SetConfig+0x13a>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <UART_SetConfig+0x148>
 8002af8:	e012      	b.n	8002b20 <UART_SetConfig+0x160>
 8002afa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002afe:	d00c      	beq.n	8002b1a <UART_SetConfig+0x15a>
 8002b00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b04:	d003      	beq.n	8002b0e <UART_SetConfig+0x14e>
 8002b06:	e00b      	b.n	8002b20 <UART_SetConfig+0x160>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	e060      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	77fb      	strb	r3, [r7, #31]
 8002b12:	e05d      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b14:	2304      	movs	r3, #4
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e05a      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e057      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b20:	2310      	movs	r3, #16
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	bf00      	nop
 8002b26:	e053      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a61      	ldr	r2, [pc, #388]	; (8002cb4 <UART_SetConfig+0x2f4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d123      	bne.n	8002b7a <UART_SetConfig+0x1ba>
 8002b32:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3e:	d012      	beq.n	8002b66 <UART_SetConfig+0x1a6>
 8002b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b44:	d802      	bhi.n	8002b4c <UART_SetConfig+0x18c>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <UART_SetConfig+0x19a>
 8002b4a:	e012      	b.n	8002b72 <UART_SetConfig+0x1b2>
 8002b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b50:	d00c      	beq.n	8002b6c <UART_SetConfig+0x1ac>
 8002b52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b56:	d003      	beq.n	8002b60 <UART_SetConfig+0x1a0>
 8002b58:	e00b      	b.n	8002b72 <UART_SetConfig+0x1b2>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e037      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b60:	2302      	movs	r3, #2
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e034      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b66:	2304      	movs	r3, #4
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e031      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e02e      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b72:	2310      	movs	r3, #16
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	bf00      	nop
 8002b78:	e02a      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a4e      	ldr	r2, [pc, #312]	; (8002cb8 <UART_SetConfig+0x2f8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d123      	bne.n	8002bcc <UART_SetConfig+0x20c>
 8002b84:	4b48      	ldr	r3, [pc, #288]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b90:	d012      	beq.n	8002bb8 <UART_SetConfig+0x1f8>
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b96:	d802      	bhi.n	8002b9e <UART_SetConfig+0x1de>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <UART_SetConfig+0x1ec>
 8002b9c:	e012      	b.n	8002bc4 <UART_SetConfig+0x204>
 8002b9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ba2:	d00c      	beq.n	8002bbe <UART_SetConfig+0x1fe>
 8002ba4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ba8:	d003      	beq.n	8002bb2 <UART_SetConfig+0x1f2>
 8002baa:	e00b      	b.n	8002bc4 <UART_SetConfig+0x204>
 8002bac:	2300      	movs	r3, #0
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e00e      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e00b      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e008      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e005      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	bf00      	nop
 8002bca:	e001      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd8:	f040 8090 	bne.w	8002cfc <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002bdc:	7ffb      	ldrb	r3, [r7, #31]
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d86c      	bhi.n	8002cbc <UART_SetConfig+0x2fc>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <UART_SetConfig+0x228>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002c0d 	.word	0x08002c0d
 8002bec:	08002c2d 	.word	0x08002c2d
 8002bf0:	08002c4d 	.word	0x08002c4d
 8002bf4:	08002cbd 	.word	0x08002cbd
 8002bf8:	08002c69 	.word	0x08002c69
 8002bfc:	08002cbd 	.word	0x08002cbd
 8002c00:	08002cbd 	.word	0x08002cbd
 8002c04:	08002cbd 	.word	0x08002cbd
 8002c08:	08002c89 	.word	0x08002c89
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f7ff f992 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 8002c10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	005a      	lsls	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	61bb      	str	r3, [r7, #24]
        break;
 8002c2a:	e04a      	b.n	8002cc2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f7ff f9a4 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 8002c30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	005a      	lsls	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	61bb      	str	r3, [r7, #24]
        break;
 8002c4a:	e03a      	b.n	8002cc2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002c56:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6852      	ldr	r2, [r2, #4]
 8002c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	61bb      	str	r3, [r7, #24]
        break;
 8002c66:	e02c      	b.n	8002cc2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c68:	f7ff f8ee 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8002c6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	005a      	lsls	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	61bb      	str	r3, [r7, #24]
        break;
 8002c86:	e01c      	b.n	8002cc2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	61bb      	str	r3, [r7, #24]
        break;
 8002c9e:	e010      	b.n	8002cc2 <UART_SetConfig+0x302>
 8002ca0:	efff69f3 	.word	0xefff69f3
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40004400 	.word	0x40004400
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	40004c00 	.word	0x40004c00
 8002cb8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
        break;
 8002cc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d916      	bls.n	8002cf6 <UART_SetConfig+0x336>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cce:	d212      	bcs.n	8002cf6 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f023 030f 	bic.w	r3, r3, #15
 8002cd8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	897a      	ldrh	r2, [r7, #10]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	e072      	b.n	8002ddc <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
 8002cfa:	e06f      	b.n	8002ddc <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d85b      	bhi.n	8002dba <UART_SetConfig+0x3fa>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <UART_SetConfig+0x348>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d2d 	.word	0x08002d2d
 8002d0c:	08002d4b 	.word	0x08002d4b
 8002d10:	08002d69 	.word	0x08002d69
 8002d14:	08002dbb 	.word	0x08002dbb
 8002d18:	08002d85 	.word	0x08002d85
 8002d1c:	08002dbb 	.word	0x08002dbb
 8002d20:	08002dbb 	.word	0x08002dbb
 8002d24:	08002dbb 	.word	0x08002dbb
 8002d28:	08002da3 	.word	0x08002da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d2c:	f7ff f902 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 8002d30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	085a      	lsrs	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	441a      	add	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	61bb      	str	r3, [r7, #24]
        break;
 8002d48:	e03a      	b.n	8002dc0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d4a:	f7ff f915 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 8002d4e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	085a      	lsrs	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	61bb      	str	r3, [r7, #24]
        break;
 8002d66:	e02b      	b.n	8002dc0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002d72:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6852      	ldr	r2, [r2, #4]
 8002d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	61bb      	str	r3, [r7, #24]
        break;
 8002d82:	e01d      	b.n	8002dc0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d84:	f7ff f860 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8002d88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	085a      	lsrs	r2, r3, #1
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	441a      	add	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	61bb      	str	r3, [r7, #24]
        break;
 8002da0:	e00e      	b.n	8002dc0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	61bb      	str	r3, [r7, #24]
        break;
 8002db8:	e002      	b.n	8002dc0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
        break;
 8002dbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	d908      	bls.n	8002dd8 <UART_SetConfig+0x418>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d204      	bcs.n	8002dd8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	e001      	b.n	8002ddc <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01a      	beq.n	8002f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef2:	d10a      	bne.n	8002f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f46:	f7fd fc45 	bl	80007d4 <HAL_GetTick>
 8002f4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d10e      	bne.n	8002f78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f82a 	bl	8002fc2 <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e020      	b.n	8002fba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d10e      	bne.n	8002fa4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f814 	bl	8002fc2 <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e00a      	b.n	8002fba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd2:	e05d      	b.n	8003090 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d059      	beq.n	8003090 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fdc:	f7fd fbfa 	bl	80007d4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11b      	bne.n	800302a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003000:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e042      	b.n	80030b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02b      	beq.n	8003090 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003046:	d123      	bne.n	8003090 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003050:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003060:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e00f      	b.n	80030b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4013      	ands	r3, r2
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d092      	beq.n	8002fd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80030c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <vApplicationGetIdleTaskMemory+0x30>)
 80030ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	601a      	str	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	200000b4 	.word	0x200000b4
 80030e8:	20000114 	.word	0x20000114

080030ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a07      	ldr	r2, [pc, #28]	; (8003118 <vApplicationGetTimerTaskMemory+0x2c>)
 80030fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4a06      	ldr	r2, [pc, #24]	; (800311c <vApplicationGetTimerTaskMemory+0x30>)
 8003102:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	20000314 	.word	0x20000314
 800311c:	20000374 	.word	0x20000374

08003120 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f103 0208 	add.w	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f103 0208 	add.w	r2, r3, #8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f103 0208 	add.w	r2, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d103      	bne.n	80031e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e00c      	b.n	80031fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3308      	adds	r3, #8
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e002      	b.n	80031f0 <vListInsert+0x2e>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d2f6      	bcs.n	80031ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6892      	ldr	r2, [r2, #8]
 800324a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6852      	ldr	r2, [r2, #4]
 8003254:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d103      	bne.n	8003268 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1e5a      	subs	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	e7fe      	b.n	80032ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80032b0:	f002 f904 	bl	80054bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	441a      	add	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	3b01      	subs	r3, #1
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	441a      	add	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	22ff      	movs	r2, #255	; 0xff
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d114      	bne.n	8003330 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01a      	beq.n	8003344 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3310      	adds	r3, #16
 8003312:	4618      	mov	r0, r3
 8003314:	f001 fa08 	bl	8004728 <xTaskRemoveFromEventList>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d012      	beq.n	8003344 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <xQueueGenericReset+0xcc>)
 8003320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	e009      	b.n	8003344 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3310      	adds	r3, #16
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fef3 	bl	8003120 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3324      	adds	r3, #36	; 0x24
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff feee 	bl	8003120 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003344:	f002 f8e8 	bl	8005518 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003348:	2301      	movs	r3, #1
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	; 0x38
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <xQueueGenericCreateStatic+0x28>
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
 800337e:	e7fe      	b.n	800337e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <xQueueGenericCreateStatic+0x42>
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
 8003398:	e7fe      	b.n	8003398 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <xQueueGenericCreateStatic+0x4e>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <xQueueGenericCreateStatic+0x52>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <xQueueGenericCreateStatic+0x54>
 80033aa:	2300      	movs	r3, #0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <xQueueGenericCreateStatic+0x6c>
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	e7fe      	b.n	80033c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <xQueueGenericCreateStatic+0x78>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <xQueueGenericCreateStatic+0x7c>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <xQueueGenericCreateStatic+0x7e>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <xQueueGenericCreateStatic+0x96>
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	e7fe      	b.n	80033ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033ee:	2350      	movs	r3, #80	; 0x50
 80033f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b50      	cmp	r3, #80	; 0x50
 80033f6:	d009      	beq.n	800340c <xQueueGenericCreateStatic+0xb4>
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	e7fe      	b.n	800340a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800341e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f805 	bl	800343c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003434:	4618      	mov	r0, r3
 8003436:	3730      	adds	r7, #48	; 0x30
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d103      	bne.n	8003458 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e002      	b.n	800345e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800346a:	2101      	movs	r1, #1
 800346c:	69b8      	ldr	r0, [r7, #24]
 800346e:	f7ff ff0b 	bl	8003288 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08e      	sub	sp, #56	; 0x38
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003492:	2300      	movs	r3, #0
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <xQueueGenericSend+0x30>
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b2:	e7fe      	b.n	80034b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <xQueueGenericSend+0x3e>
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <xQueueGenericSend+0x42>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <xQueueGenericSend+0x44>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <xQueueGenericSend+0x5c>
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
 80034de:	e7fe      	b.n	80034de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d103      	bne.n	80034ee <xQueueGenericSend+0x6a>
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <xQueueGenericSend+0x6e>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <xQueueGenericSend+0x70>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <xQueueGenericSend+0x88>
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	e7fe      	b.n	800350a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800350c:	f001 fac8 	bl	8004aa0 <xTaskGetSchedulerState>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <xQueueGenericSend+0x98>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <xQueueGenericSend+0x9c>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <xQueueGenericSend+0x9e>
 8003520:	2300      	movs	r3, #0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <xQueueGenericSend+0xb6>
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	e7fe      	b.n	8003538 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800353a:	f001 ffbf 	bl	80054bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <xQueueGenericSend+0xcc>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d129      	bne.n	80035a4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003556:	f000 f9ff 	bl	8003958 <prvCopyDataToQueue>
 800355a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	2b00      	cmp	r3, #0
 8003562:	d010      	beq.n	8003586 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	3324      	adds	r3, #36	; 0x24
 8003568:	4618      	mov	r0, r3
 800356a:	f001 f8dd 	bl	8004728 <xTaskRemoveFromEventList>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003574:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <xQueueGenericSend+0x1f0>)
 8003576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	e00a      	b.n	800359c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <xQueueGenericSend+0x1f0>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800359c:	f001 ffbc 	bl	8005518 <vPortExitCritical>
				return pdPASS;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e063      	b.n	800366c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035aa:	f001 ffb5 	bl	8005518 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e05c      	b.n	800366c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 f915 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035c2:	2301      	movs	r3, #1
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035c6:	f001 ffa7 	bl	8005518 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ca:	f000 fe6f 	bl	80042ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035ce:	f001 ff75 	bl	80054bc <vPortEnterCritical>
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d103      	bne.n	80035e8 <xQueueGenericSend+0x164>
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d103      	bne.n	80035fe <xQueueGenericSend+0x17a>
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fe:	f001 ff8b 	bl	8005518 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003602:	1d3a      	adds	r2, r7, #4
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f904 	bl	8004818 <xTaskCheckForTimeOut>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d124      	bne.n	8003660 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003618:	f000 fa96 	bl	8003b48 <prvIsQueueFull>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d018      	beq.n	8003654 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	3310      	adds	r3, #16
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f001 f82e 	bl	800468c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003632:	f000 fa21 	bl	8003a78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003636:	f000 fe47 	bl	80042c8 <xTaskResumeAll>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	f47f af7c 	bne.w	800353a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <xQueueGenericSend+0x1f0>)
 8003644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	e772      	b.n	800353a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003656:	f000 fa0f 	bl	8003a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800365a:	f000 fe35 	bl	80042c8 <xTaskResumeAll>
 800365e:	e76c      	b.n	800353a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003662:	f000 fa09 	bl	8003a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003666:	f000 fe2f 	bl	80042c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800366a:	2300      	movs	r3, #0
		}
	}
}
 800366c:	4618      	mov	r0, r3
 800366e:	3738      	adds	r7, #56	; 0x38
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08e      	sub	sp, #56	; 0x38
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <xQueueGenericSendFromISR+0x2c>
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
 80036a2:	e7fe      	b.n	80036a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <xQueueGenericSendFromISR+0x3a>
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <xQueueGenericSendFromISR+0x3e>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueGenericSendFromISR+0x40>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <xQueueGenericSendFromISR+0x58>
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	623b      	str	r3, [r7, #32]
 80036ce:	e7fe      	b.n	80036ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d103      	bne.n	80036de <xQueueGenericSendFromISR+0x66>
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <xQueueGenericSendFromISR+0x6a>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <xQueueGenericSendFromISR+0x6c>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <xQueueGenericSendFromISR+0x84>
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e7fe      	b.n	80036fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036fc:	f001 ffba 	bl	8005674 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003700:	f3ef 8211 	mrs	r2, BASEPRI
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	61ba      	str	r2, [r7, #24]
 8003716:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003718:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <xQueueGenericSendFromISR+0xb6>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d12c      	bne.n	8003788 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800373e:	f000 f90b 	bl	8003958 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003742:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d112      	bne.n	8003772 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	3324      	adds	r3, #36	; 0x24
 8003758:	4618      	mov	r0, r3
 800375a:	f000 ffe5 	bl	8004728 <xTaskRemoveFromEventList>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e007      	b.n	8003782 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003772:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003776:	3301      	adds	r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	b25a      	sxtb	r2, r3
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003782:	2301      	movs	r3, #1
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003786:	e001      	b.n	800378c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003788:	2300      	movs	r3, #0
 800378a:	637b      	str	r3, [r7, #52]	; 0x34
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003798:	4618      	mov	r0, r3
 800379a:	3738      	adds	r7, #56	; 0x38
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	; 0x30
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <xQueueReceive+0x2e>
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	623b      	str	r3, [r7, #32]
 80037cc:	e7fe      	b.n	80037cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d103      	bne.n	80037dc <xQueueReceive+0x3c>
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <xQueueReceive+0x40>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <xQueueReceive+0x42>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <xQueueReceive+0x5a>
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	e7fe      	b.n	80037f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037fa:	f001 f951 	bl	8004aa0 <xTaskGetSchedulerState>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <xQueueReceive+0x6a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <xQueueReceive+0x6e>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <xQueueReceive+0x70>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <xQueueReceive+0x88>
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e7fe      	b.n	8003826 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003828:	f001 fe48 	bl	80054bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01f      	beq.n	8003878 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800383c:	f000 f8f6 	bl	8003a2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00f      	beq.n	8003870 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	3310      	adds	r3, #16
 8003854:	4618      	mov	r0, r3
 8003856:	f000 ff67 	bl	8004728 <xTaskRemoveFromEventList>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003860:	4b3c      	ldr	r3, [pc, #240]	; (8003954 <xQueueReceive+0x1b4>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003870:	f001 fe52 	bl	8005518 <vPortExitCritical>
				return pdPASS;
 8003874:	2301      	movs	r3, #1
 8003876:	e069      	b.n	800394c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800387e:	f001 fe4b 	bl	8005518 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003882:	2300      	movs	r3, #0
 8003884:	e062      	b.n	800394c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800388c:	f107 0310 	add.w	r3, r7, #16
 8003890:	4618      	mov	r0, r3
 8003892:	f000 ffab 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003896:	2301      	movs	r3, #1
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800389a:	f001 fe3d 	bl	8005518 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800389e:	f000 fd05 	bl	80042ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038a2:	f001 fe0b 	bl	80054bc <vPortEnterCritical>
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d103      	bne.n	80038bc <xQueueReceive+0x11c>
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d103      	bne.n	80038d2 <xQueueReceive+0x132>
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038d2:	f001 fe21 	bl	8005518 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038d6:	1d3a      	adds	r2, r7, #4
 80038d8:	f107 0310 	add.w	r3, r7, #16
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 ff9a 	bl	8004818 <xTaskCheckForTimeOut>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d123      	bne.n	8003932 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ec:	f000 f916 	bl	8003b1c <prvIsQueueEmpty>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d017      	beq.n	8003926 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	3324      	adds	r3, #36	; 0x24
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fec4 	bl	800468c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003906:	f000 f8b7 	bl	8003a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800390a:	f000 fcdd 	bl	80042c8 <xTaskResumeAll>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d189      	bne.n	8003828 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <xQueueReceive+0x1b4>)
 8003916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	e780      	b.n	8003828 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003928:	f000 f8a6 	bl	8003a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800392c:	f000 fccc 	bl	80042c8 <xTaskResumeAll>
 8003930:	e77a      	b.n	8003828 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003934:	f000 f8a0 	bl	8003a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003938:	f000 fcc6 	bl	80042c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800393c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800393e:	f000 f8ed 	bl	8003b1c <prvIsQueueEmpty>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	f43f af6f 	beq.w	8003828 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800394a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800394c:	4618      	mov	r0, r3
 800394e:	3730      	adds	r7, #48	; 0x30
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d14d      	bne.n	8003a1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4618      	mov	r0, r3
 8003984:	f001 f8aa 	bl	8004adc <xTaskPriorityDisinherit>
 8003988:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	e043      	b.n	8003a1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d119      	bne.n	80039cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6898      	ldr	r0, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	461a      	mov	r2, r3
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	f002 f89e 	bl	8005ae4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	441a      	add	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d32b      	bcc.n	8003a1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	e026      	b.n	8003a1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68d8      	ldr	r0, [r3, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	461a      	mov	r2, r3
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	f002 f884 	bl	8005ae4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	425b      	negs	r3, r3
 80039e6:	441a      	add	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d207      	bcs.n	8003a08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	425b      	negs	r3, r3
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d105      	bne.n	8003a1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a22:	697b      	ldr	r3, [r7, #20]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d018      	beq.n	8003a70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	441a      	add	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d303      	bcc.n	8003a60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68d9      	ldr	r1, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6838      	ldr	r0, [r7, #0]
 8003a6c:	f002 f83a 	bl	8005ae4 <memcpy>
	}
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a80:	f001 fd1c 	bl	80054bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a8c:	e011      	b.n	8003ab2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3324      	adds	r3, #36	; 0x24
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fe44 	bl	8004728 <xTaskRemoveFromEventList>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003aa6:	f000 ff17 	bl	80048d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	dce9      	bgt.n	8003a8e <prvUnlockQueue+0x16>
 8003aba:	e000      	b.n	8003abe <prvUnlockQueue+0x46>
					break;
 8003abc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ac6:	f001 fd27 	bl	8005518 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003aca:	f001 fcf7 	bl	80054bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ad6:	e011      	b.n	8003afc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d012      	beq.n	8003b06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3310      	adds	r3, #16
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fe1f 	bl	8004728 <xTaskRemoveFromEventList>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003af0:	f000 fef2 	bl	80048d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	dce9      	bgt.n	8003ad8 <prvUnlockQueue+0x60>
 8003b04:	e000      	b.n	8003b08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b10:	f001 fd02 	bl	8005518 <vPortExitCritical>
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b24:	f001 fcca 	bl	80054bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e001      	b.n	8003b3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b3a:	f001 fced 	bl	8005518 <vPortExitCritical>

	return xReturn;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b50:	f001 fcb4 	bl	80054bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d102      	bne.n	8003b66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e001      	b.n	8003b6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b6a:	f001 fcd5 	bl	8005518 <vPortExitCritical>

	return xReturn;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	e014      	b.n	8003bb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b88:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <vQueueAddToRegistry+0x4c>)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b94:	490b      	ldr	r1, [pc, #44]	; (8003bc4 <vQueueAddToRegistry+0x4c>)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <vQueueAddToRegistry+0x4c>)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003baa:	e005      	b.n	8003bb8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b07      	cmp	r3, #7
 8003bb6:	d9e7      	bls.n	8003b88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	20001a0c 	.word	0x20001a0c

08003bc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bd8:	f001 fc70 	bl	80054bc <vPortEnterCritical>
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d103      	bne.n	8003bf2 <vQueueWaitForMessageRestricted+0x2a>
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d103      	bne.n	8003c08 <vQueueWaitForMessageRestricted+0x40>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c08:	f001 fc86 	bl	8005518 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3324      	adds	r3, #36	; 0x24
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fd59 	bl	80046d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff28 	bl	8003a78 <prvUnlockQueue>
	}
 8003c28:	bf00      	nop
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08e      	sub	sp, #56	; 0x38
 8003c34:	af04      	add	r7, sp, #16
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <xTaskCreateStatic+0x28>
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	e7fe      	b.n	8003c56 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <xTaskCreateStatic+0x42>
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e7fe      	b.n	8003c70 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c72:	2360      	movs	r3, #96	; 0x60
 8003c74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b60      	cmp	r3, #96	; 0x60
 8003c7a:	d009      	beq.n	8003c90 <xTaskCreateStatic+0x60>
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e7fe      	b.n	8003c8e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01e      	beq.n	8003cd4 <xTaskCreateStatic+0xa4>
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01b      	beq.n	8003cd4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9303      	str	r3, [sp, #12]
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	9302      	str	r3, [sp, #8]
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f850 	bl	8003d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cce:	f000 f8d7 	bl	8003e80 <prvAddNewTaskToReadyList>
 8003cd2:	e001      	b.n	8003cd8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cd8:	697b      	ldr	r3, [r7, #20]
	}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b08c      	sub	sp, #48	; 0x30
 8003ce6:	af04      	add	r7, sp, #16
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 fcfa 	bl	80056f0 <pvPortMalloc>
 8003cfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00e      	beq.n	8003d22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d04:	2060      	movs	r0, #96	; 0x60
 8003d06:	f001 fcf3 	bl	80056f0 <pvPortMalloc>
 8003d0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
 8003d18:	e005      	b.n	8003d26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f001 fdaa 	bl	8005874 <vPortFree>
 8003d20:	e001      	b.n	8003d26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d34:	88fa      	ldrh	r2, [r7, #6]
 8003d36:	2300      	movs	r3, #0
 8003d38:	9303      	str	r3, [sp, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	9302      	str	r3, [sp, #8]
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f80e 	bl	8003d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d50:	69f8      	ldr	r0, [r7, #28]
 8003d52:	f000 f895 	bl	8003e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e002      	b.n	8003d62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d62:	69bb      	ldr	r3, [r7, #24]
	}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	461a      	mov	r2, r3
 8003d84:	21a5      	movs	r1, #165	; 0xa5
 8003d86:	f001 feb8 	bl	8005afa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d94:	3b01      	subs	r3, #1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f023 0307 	bic.w	r3, r3, #7
 8003da2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <prvInitialiseNewTask+0x56>
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e7fe      	b.n	8003dc0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e012      	b.n	8003dee <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	7819      	ldrb	r1, [r3, #0]
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3334      	adds	r3, #52	; 0x34
 8003dd8:	460a      	mov	r2, r1
 8003dda:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d006      	beq.n	8003df6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3301      	adds	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2b0f      	cmp	r3, #15
 8003df2:	d9e9      	bls.n	8003dc8 <prvInitialiseNewTask+0x5c>
 8003df4:	e000      	b.n	8003df8 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003df6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	2b37      	cmp	r3, #55	; 0x37
 8003e04:	d901      	bls.n	8003e0a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e06:	2337      	movs	r3, #55	; 0x37
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e14:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	2200      	movs	r2, #0
 8003e1a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff f99d 	bl	8003160 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	3318      	adds	r3, #24
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f998 	bl	8003160 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	2200      	movs	r2, #0
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	2200      	movs	r2, #0
 8003e50:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	69b8      	ldr	r0, [r7, #24]
 8003e60:	f001 fa06 	bl	8005270 <pxPortInitialiseStack>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e76:	bf00      	nop
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e88:	f001 fb18 	bl	80054bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <prvAddNewTaskToReadyList+0xc4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <prvAddNewTaskToReadyList+0xc4>)
 8003e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <prvAddNewTaskToReadyList+0xc8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <prvAddNewTaskToReadyList+0xc8>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <prvAddNewTaskToReadyList+0xc4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d110      	bne.n	8003ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003eac:	f000 fd38 	bl	8004920 <prvInitialiseTaskLists>
 8003eb0:	e00d      	b.n	8003ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <prvAddNewTaskToReadyList+0xcc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <prvAddNewTaskToReadyList+0xc8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d802      	bhi.n	8003ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <prvAddNewTaskToReadyList+0xc8>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <prvAddNewTaskToReadyList+0xd0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <prvAddNewTaskToReadyList+0xd0>)
 8003ed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <prvAddNewTaskToReadyList+0xd0>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <prvAddNewTaskToReadyList+0xd4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d903      	bls.n	8003ef4 <prvAddNewTaskToReadyList+0x74>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <prvAddNewTaskToReadyList+0xd4>)
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <prvAddNewTaskToReadyList+0xd8>)
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f7ff f935 	bl	800317a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f10:	f001 fb02 	bl	8005518 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <prvAddNewTaskToReadyList+0xcc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <prvAddNewTaskToReadyList+0xc8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d207      	bcs.n	8003f3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f2a:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <prvAddNewTaskToReadyList+0xdc>)
 8003f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000c48 	.word	0x20000c48
 8003f48:	20000774 	.word	0x20000774
 8003f4c:	20000c54 	.word	0x20000c54
 8003f50:	20000c64 	.word	0x20000c64
 8003f54:	20000c50 	.word	0x20000c50
 8003f58:	20000778 	.word	0x20000778
 8003f5c:	e000ed04 	.word	0xe000ed04

08003f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d016      	beq.n	8003fa0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <vTaskDelay+0x60>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <vTaskDelay+0x2e>
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	e7fe      	b.n	8003f8c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003f8e:	f000 f98d 	bl	80042ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f92:	2100      	movs	r1, #0
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fe0d 	bl	8004bb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f9a:	f000 f995 	bl	80042c8 <xTaskResumeAll>
 8003f9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003fa6:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <vTaskDelay+0x64>)
 8003fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000c70 	.word	0x20000c70
 8003fc4:	e000ed04 	.word	0xe000ed04

08003fc8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003fd0:	f001 fa74 	bl	80054bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <vTaskSuspend+0x18>
 8003fda:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <vTaskSuspend+0xd0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	e000      	b.n	8003fe2 <vTaskSuspend+0x1a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff f923 	bl	8003234 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3318      	adds	r3, #24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff f91a 	bl	8003234 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4825      	ldr	r0, [pc, #148]	; (800409c <vTaskSuspend+0xd4>)
 8004008:	f7ff f8b7 	bl	800317a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d103      	bne.n	8004020 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004020:	f001 fa7a 	bl	8005518 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004024:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <vTaskSuspend+0xd8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800402c:	f001 fa46 	bl	80054bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004030:	f000 fd10 	bl	8004a54 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004034:	f001 fa70 	bl	8005518 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <vTaskSuspend+0xd0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	429a      	cmp	r2, r3
 8004040:	d126      	bne.n	8004090 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8004042:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <vTaskSuspend+0xd8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <vTaskSuspend+0xdc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <vTaskSuspend+0x9e>
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	e7fe      	b.n	8004064 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <vTaskSuspend+0xe0>)
 8004068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004076:	e00b      	b.n	8004090 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <vTaskSuspend+0xd4>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <vTaskSuspend+0xe4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d103      	bne.n	800408c <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <vTaskSuspend+0xd0>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
	}
 800408a:	e001      	b.n	8004090 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 800408c:	f000 fa86 	bl	800459c <vTaskSwitchContext>
	}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000774 	.word	0x20000774
 800409c:	20000c34 	.word	0x20000c34
 80040a0:	20000c54 	.word	0x20000c54
 80040a4:	20000c70 	.word	0x20000c70
 80040a8:	e000ed04 	.word	0xe000ed04
 80040ac:	20000c48 	.word	0x20000c48

080040b0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <prvTaskIsTaskSuspended+0x2a>
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e7fe      	b.n	80040d8 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	4a0f      	ldr	r2, [pc, #60]	; (800411c <prvTaskIsTaskSuspended+0x6c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d101      	bne.n	80040e8 <prvTaskIsTaskSuspended+0x38>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <prvTaskIsTaskSuspended+0x3a>
 80040e8:	2300      	movs	r3, #0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00f      	beq.n	800410e <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <prvTaskIsTaskSuspended+0x70>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00a      	beq.n	800410e <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <prvTaskIsTaskSuspended+0x54>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <prvTaskIsTaskSuspended+0x56>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800410a:	2301      	movs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800410e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000c34 	.word	0x20000c34
 8004120:	20000c08 	.word	0x20000c08

08004124 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <vTaskResume+0x26>
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	e7fe      	b.n	8004148 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d03a      	beq.n	80041c6 <vTaskResume+0xa2>
 8004150:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <vTaskResume+0xac>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	429a      	cmp	r2, r3
 8004158:	d035      	beq.n	80041c6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800415a:	f001 f9af 	bl	80054bc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff ffa6 	bl	80040b0 <prvTaskIsTaskSuspended>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02b      	beq.n	80041c2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3304      	adds	r3, #4
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff f860 	bl	8003234 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	4b16      	ldr	r3, [pc, #88]	; (80041d4 <vTaskResume+0xb0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d903      	bls.n	8004188 <vTaskResume+0x64>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <vTaskResume+0xb0>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4a10      	ldr	r2, [pc, #64]	; (80041d8 <vTaskResume+0xb4>)
 8004196:	441a      	add	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7fe ffeb 	bl	800317a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <vTaskResume+0xac>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d307      	bcc.n	80041c2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <vTaskResume+0xb8>)
 80041b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80041c2:	f001 f9a9 	bl	8005518 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000774 	.word	0x20000774
 80041d4:	20000c50 	.word	0x20000c50
 80041d8:	20000778 	.word	0x20000778
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041ee:	463a      	mov	r2, r7
 80041f0:	1d39      	adds	r1, r7, #4
 80041f2:	f107 0308 	add.w	r3, r7, #8
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe ff5e 	bl	80030b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	9202      	str	r2, [sp, #8]
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	2300      	movs	r3, #0
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2300      	movs	r3, #0
 800420c:	460a      	mov	r2, r1
 800420e:	4921      	ldr	r1, [pc, #132]	; (8004294 <vTaskStartScheduler+0xb4>)
 8004210:	4821      	ldr	r0, [pc, #132]	; (8004298 <vTaskStartScheduler+0xb8>)
 8004212:	f7ff fd0d 	bl	8003c30 <xTaskCreateStatic>
 8004216:	4602      	mov	r2, r0
 8004218:	4b20      	ldr	r3, [pc, #128]	; (800429c <vTaskStartScheduler+0xbc>)
 800421a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800421c:	4b1f      	ldr	r3, [pc, #124]	; (800429c <vTaskStartScheduler+0xbc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004224:	2301      	movs	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e001      	b.n	800422e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d102      	bne.n	800423a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004234:	f000 fd12 	bl	8004c5c <xTimerCreateTimerTask>
 8004238:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d117      	bne.n	8004270 <vTaskStartScheduler+0x90>
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <vTaskStartScheduler+0xc0>)
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <vTaskStartScheduler+0xc4>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <vTaskStartScheduler+0xc8>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004266:	f7fb ffbb 	bl	80001e0 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800426a:	f001 f889 	bl	8005380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800426e:	e00d      	b.n	800428c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d109      	bne.n	800428c <vTaskStartScheduler+0xac>
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e7fe      	b.n	800428a <vTaskStartScheduler+0xaa>
}
 800428c:	bf00      	nop
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	08005b30 	.word	0x08005b30
 8004298:	080048f1 	.word	0x080048f1
 800429c:	20000c6c 	.word	0x20000c6c
 80042a0:	20000c68 	.word	0x20000c68
 80042a4:	20000c54 	.word	0x20000c54
 80042a8:	20000c4c 	.word	0x20000c4c

080042ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <vTaskSuspendAll+0x18>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	4a03      	ldr	r2, [pc, #12]	; (80042c4 <vTaskSuspendAll+0x18>)
 80042b8:	6013      	str	r3, [r2, #0]
}
 80042ba:	bf00      	nop
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	20000c70 	.word	0x20000c70

080042c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042d6:	4b41      	ldr	r3, [pc, #260]	; (80043dc <xTaskResumeAll+0x114>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <xTaskResumeAll+0x2a>
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	e7fe      	b.n	80042f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042f2:	f001 f8e3 	bl	80054bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <xTaskResumeAll+0x114>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	4a37      	ldr	r2, [pc, #220]	; (80043dc <xTaskResumeAll+0x114>)
 80042fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <xTaskResumeAll+0x114>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d162      	bne.n	80043ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <xTaskResumeAll+0x118>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05e      	beq.n	80043ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004310:	e02f      	b.n	8004372 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004312:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <xTaskResumeAll+0x11c>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3318      	adds	r3, #24
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe ff88 	bl	8003234 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3304      	adds	r3, #4
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe ff83 	bl	8003234 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <xTaskResumeAll+0x120>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d903      	bls.n	8004342 <xTaskResumeAll+0x7a>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <xTaskResumeAll+0x120>)
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4a27      	ldr	r2, [pc, #156]	; (80043ec <xTaskResumeAll+0x124>)
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fe ff0e 	bl	800317a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <xTaskResumeAll+0x128>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	429a      	cmp	r2, r3
 800436a:	d302      	bcc.n	8004372 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800436c:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <xTaskResumeAll+0x12c>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004372:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <xTaskResumeAll+0x11c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1cb      	bne.n	8004312 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004380:	f000 fb68 	bl	8004a54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <xTaskResumeAll+0x130>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004390:	f000 f846 	bl	8004420 <xTaskIncrementTick>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <xTaskResumeAll+0x12c>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f1      	bne.n	8004390 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <xTaskResumeAll+0x130>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <xTaskResumeAll+0x12c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <xTaskResumeAll+0x134>)
 80043c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043ce:	f001 f8a3 	bl	8005518 <vPortExitCritical>

	return xAlreadyYielded;
 80043d2:	68bb      	ldr	r3, [r7, #8]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000c70 	.word	0x20000c70
 80043e0:	20000c48 	.word	0x20000c48
 80043e4:	20000c08 	.word	0x20000c08
 80043e8:	20000c50 	.word	0x20000c50
 80043ec:	20000778 	.word	0x20000778
 80043f0:	20000774 	.word	0x20000774
 80043f4:	20000c5c 	.word	0x20000c5c
 80043f8:	20000c58 	.word	0x20000c58
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <xTaskGetTickCount+0x1c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800440c:	687b      	ldr	r3, [r7, #4]
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000c4c 	.word	0x20000c4c

08004420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800442a:	4b51      	ldr	r3, [pc, #324]	; (8004570 <xTaskIncrementTick+0x150>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 808d 	bne.w	800454e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004434:	4b4f      	ldr	r3, [pc, #316]	; (8004574 <xTaskIncrementTick+0x154>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800443c:	4a4d      	ldr	r2, [pc, #308]	; (8004574 <xTaskIncrementTick+0x154>)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11f      	bne.n	8004488 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <xTaskIncrementTick+0x158>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <xTaskIncrementTick+0x46>
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	e7fe      	b.n	8004464 <xTaskIncrementTick+0x44>
 8004466:	4b44      	ldr	r3, [pc, #272]	; (8004578 <xTaskIncrementTick+0x158>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	4b43      	ldr	r3, [pc, #268]	; (800457c <xTaskIncrementTick+0x15c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a41      	ldr	r2, [pc, #260]	; (8004578 <xTaskIncrementTick+0x158>)
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	4a41      	ldr	r2, [pc, #260]	; (800457c <xTaskIncrementTick+0x15c>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b41      	ldr	r3, [pc, #260]	; (8004580 <xTaskIncrementTick+0x160>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	4a3f      	ldr	r2, [pc, #252]	; (8004580 <xTaskIncrementTick+0x160>)
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	f000 fae6 	bl	8004a54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004488:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <xTaskIncrementTick+0x164>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	429a      	cmp	r2, r3
 8004490:	d34e      	bcc.n	8004530 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004492:	4b39      	ldr	r3, [pc, #228]	; (8004578 <xTaskIncrementTick+0x158>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <xTaskIncrementTick+0x80>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <xTaskIncrementTick+0x82>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a6:	4b37      	ldr	r3, [pc, #220]	; (8004584 <xTaskIncrementTick+0x164>)
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	601a      	str	r2, [r3, #0]
					break;
 80044ae:	e03f      	b.n	8004530 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044b0:	4b31      	ldr	r3, [pc, #196]	; (8004578 <xTaskIncrementTick+0x158>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d203      	bcs.n	80044d0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044c8:	4a2e      	ldr	r2, [pc, #184]	; (8004584 <xTaskIncrementTick+0x164>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6013      	str	r3, [r2, #0]
						break;
 80044ce:	e02f      	b.n	8004530 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe fead 	bl	8003234 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3318      	adds	r3, #24
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fea4 	bl	8003234 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <xTaskIncrementTick+0x168>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d903      	bls.n	8004500 <xTaskIncrementTick+0xe0>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <xTaskIncrementTick+0x168>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4a1f      	ldr	r2, [pc, #124]	; (800458c <xTaskIncrementTick+0x16c>)
 800450e:	441a      	add	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f7fe fe2f 	bl	800317a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <xTaskIncrementTick+0x170>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	429a      	cmp	r2, r3
 8004528:	d3b3      	bcc.n	8004492 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800452a:	2301      	movs	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800452e:	e7b0      	b.n	8004492 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <xTaskIncrementTick+0x170>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004536:	4915      	ldr	r1, [pc, #84]	; (800458c <xTaskIncrementTick+0x16c>)
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d907      	bls.n	8004558 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	e004      	b.n	8004558 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <xTaskIncrementTick+0x174>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a0f      	ldr	r2, [pc, #60]	; (8004594 <xTaskIncrementTick+0x174>)
 8004556:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <xTaskIncrementTick+0x178>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004560:	2301      	movs	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004564:	697b      	ldr	r3, [r7, #20]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000c70 	.word	0x20000c70
 8004574:	20000c4c 	.word	0x20000c4c
 8004578:	20000c00 	.word	0x20000c00
 800457c:	20000c04 	.word	0x20000c04
 8004580:	20000c60 	.word	0x20000c60
 8004584:	20000c68 	.word	0x20000c68
 8004588:	20000c50 	.word	0x20000c50
 800458c:	20000778 	.word	0x20000778
 8004590:	20000774 	.word	0x20000774
 8004594:	20000c58 	.word	0x20000c58
 8004598:	20000c5c 	.word	0x20000c5c

0800459c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045a2:	4b33      	ldr	r3, [pc, #204]	; (8004670 <vTaskSwitchContext+0xd4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045aa:	4b32      	ldr	r3, [pc, #200]	; (8004674 <vTaskSwitchContext+0xd8>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045b0:	e059      	b.n	8004666 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80045b2:	4b30      	ldr	r3, [pc, #192]	; (8004674 <vTaskSwitchContext+0xd8>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80045b8:	f7fb fe19 	bl	80001ee <getRunTimeCounterValue>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <vTaskSwitchContext+0xdc>)
 80045c0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80045c2:	4b2d      	ldr	r3, [pc, #180]	; (8004678 <vTaskSwitchContext+0xdc>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b2d      	ldr	r3, [pc, #180]	; (800467c <vTaskSwitchContext+0xe0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d909      	bls.n	80045e2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80045ce:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <vTaskSwitchContext+0xe4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d4:	4a28      	ldr	r2, [pc, #160]	; (8004678 <vTaskSwitchContext+0xdc>)
 80045d6:	6810      	ldr	r0, [r2, #0]
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <vTaskSwitchContext+0xe0>)
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	1a82      	subs	r2, r0, r2
 80045de:	440a      	add	r2, r1
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80045e2:	4b25      	ldr	r3, [pc, #148]	; (8004678 <vTaskSwitchContext+0xdc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a25      	ldr	r2, [pc, #148]	; (800467c <vTaskSwitchContext+0xe0>)
 80045e8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045ea:	4b26      	ldr	r3, [pc, #152]	; (8004684 <vTaskSwitchContext+0xe8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e00f      	b.n	8004612 <vTaskSwitchContext+0x76>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <vTaskSwitchContext+0x70>
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	e7fe      	b.n	800460a <vTaskSwitchContext+0x6e>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	491d      	ldr	r1, [pc, #116]	; (8004688 <vTaskSwitchContext+0xec>)
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0e5      	beq.n	80045f2 <vTaskSwitchContext+0x56>
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4a15      	ldr	r2, [pc, #84]	; (8004688 <vTaskSwitchContext+0xec>)
 8004632:	4413      	add	r3, r2
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	605a      	str	r2, [r3, #4]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3308      	adds	r3, #8
 8004648:	429a      	cmp	r2, r3
 800464a:	d104      	bne.n	8004656 <vTaskSwitchContext+0xba>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4a08      	ldr	r2, [pc, #32]	; (8004680 <vTaskSwitchContext+0xe4>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <vTaskSwitchContext+0xe8>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6013      	str	r3, [r2, #0]
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000c70 	.word	0x20000c70
 8004674:	20000c5c 	.word	0x20000c5c
 8004678:	20000c78 	.word	0x20000c78
 800467c:	20000c74 	.word	0x20000c74
 8004680:	20000774 	.word	0x20000774
 8004684:	20000c50 	.word	0x20000c50
 8004688:	20000778 	.word	0x20000778

0800468c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <vTaskPlaceOnEventList+0x24>
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e7fe      	b.n	80046ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <vTaskPlaceOnEventList+0x44>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3318      	adds	r3, #24
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7fe fd82 	bl	80031c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046be:	2101      	movs	r1, #1
 80046c0:	6838      	ldr	r0, [r7, #0]
 80046c2:	f000 fa77 	bl	8004bb4 <prvAddCurrentTaskToDelayedList>
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000774 	.word	0x20000774

080046d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <vTaskPlaceOnEventListRestricted+0x26>
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e7fe      	b.n	80046f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <vTaskPlaceOnEventListRestricted+0x50>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3318      	adds	r3, #24
 8004700:	4619      	mov	r1, r3
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7fe fd39 	bl	800317a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	68b8      	ldr	r0, [r7, #8]
 8004718:	f000 fa4c 	bl	8004bb4 <prvAddCurrentTaskToDelayedList>
	}
 800471c:	bf00      	nop
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000774 	.word	0x20000774

08004728 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <xTaskRemoveFromEventList+0x2a>
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e7fe      	b.n	8004750 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3318      	adds	r3, #24
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fd6c 	bl	8003234 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800475c:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <xTaskRemoveFromEventList+0xac>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11d      	bne.n	80047a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	3304      	adds	r3, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fd63 	bl	8003234 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <xTaskRemoveFromEventList+0xb0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d903      	bls.n	8004782 <xTaskRemoveFromEventList+0x5a>
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <xTaskRemoveFromEventList+0xb0>)
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4a13      	ldr	r2, [pc, #76]	; (80047dc <xTaskRemoveFromEventList+0xb4>)
 8004790:	441a      	add	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fe fcee 	bl	800317a <vListInsertEnd>
 800479e:	e005      	b.n	80047ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3318      	adds	r3, #24
 80047a4:	4619      	mov	r1, r3
 80047a6:	480e      	ldr	r0, [pc, #56]	; (80047e0 <xTaskRemoveFromEventList+0xb8>)
 80047a8:	f7fe fce7 	bl	800317a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <xTaskRemoveFromEventList+0xbc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d905      	bls.n	80047c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <xTaskRemoveFromEventList+0xc0>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e001      	b.n	80047ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80047ca:	697b      	ldr	r3, [r7, #20]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000c70 	.word	0x20000c70
 80047d8:	20000c50 	.word	0x20000c50
 80047dc:	20000778 	.word	0x20000778
 80047e0:	20000c08 	.word	0x20000c08
 80047e4:	20000774 	.word	0x20000774
 80047e8:	20000c5c 	.word	0x20000c5c

080047ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <vTaskInternalSetTimeOutState+0x24>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <vTaskInternalSetTimeOutState+0x28>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	605a      	str	r2, [r3, #4]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	20000c60 	.word	0x20000c60
 8004814:	20000c4c 	.word	0x20000c4c

08004818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <xTaskCheckForTimeOut+0x24>
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	e7fe      	b.n	800483a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <xTaskCheckForTimeOut+0x3e>
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e7fe      	b.n	8004854 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004856:	f000 fe31 	bl	80054bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <xTaskCheckForTimeOut+0xb8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d102      	bne.n	800487a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	e023      	b.n	80048c2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <xTaskCheckForTimeOut+0xbc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d007      	beq.n	8004896 <xTaskCheckForTimeOut+0x7e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e015      	b.n	80048c2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	429a      	cmp	r2, r3
 800489e:	d20b      	bcs.n	80048b8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff9d 	bl	80047ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e004      	b.n	80048c2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048be:	2301      	movs	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048c2:	f000 fe29 	bl	8005518 <vPortExitCritical>

	return xReturn;
 80048c6:	69fb      	ldr	r3, [r7, #28]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000c4c 	.word	0x20000c4c
 80048d4:	20000c60 	.word	0x20000c60

080048d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <vTaskMissedYield+0x14>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
}
 80048e2:	bf00      	nop
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	20000c5c 	.word	0x20000c5c

080048f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048f8:	f000 f852 	bl	80049a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <prvIdleTask+0x28>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d9f9      	bls.n	80048f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <prvIdleTask+0x2c>)
 8004906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004914:	e7f0      	b.n	80048f8 <prvIdleTask+0x8>
 8004916:	bf00      	nop
 8004918:	20000778 	.word	0x20000778
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	e00c      	b.n	8004946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4a12      	ldr	r2, [pc, #72]	; (8004980 <prvInitialiseTaskLists+0x60>)
 8004938:	4413      	add	r3, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fbf0 	bl	8003120 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3301      	adds	r3, #1
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b37      	cmp	r3, #55	; 0x37
 800494a:	d9ef      	bls.n	800492c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800494c:	480d      	ldr	r0, [pc, #52]	; (8004984 <prvInitialiseTaskLists+0x64>)
 800494e:	f7fe fbe7 	bl	8003120 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004952:	480d      	ldr	r0, [pc, #52]	; (8004988 <prvInitialiseTaskLists+0x68>)
 8004954:	f7fe fbe4 	bl	8003120 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004958:	480c      	ldr	r0, [pc, #48]	; (800498c <prvInitialiseTaskLists+0x6c>)
 800495a:	f7fe fbe1 	bl	8003120 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800495e:	480c      	ldr	r0, [pc, #48]	; (8004990 <prvInitialiseTaskLists+0x70>)
 8004960:	f7fe fbde 	bl	8003120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004964:	480b      	ldr	r0, [pc, #44]	; (8004994 <prvInitialiseTaskLists+0x74>)
 8004966:	f7fe fbdb 	bl	8003120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <prvInitialiseTaskLists+0x78>)
 800496c:	4a05      	ldr	r2, [pc, #20]	; (8004984 <prvInitialiseTaskLists+0x64>)
 800496e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <prvInitialiseTaskLists+0x7c>)
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <prvInitialiseTaskLists+0x68>)
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000778 	.word	0x20000778
 8004984:	20000bd8 	.word	0x20000bd8
 8004988:	20000bec 	.word	0x20000bec
 800498c:	20000c08 	.word	0x20000c08
 8004990:	20000c1c 	.word	0x20000c1c
 8004994:	20000c34 	.word	0x20000c34
 8004998:	20000c00 	.word	0x20000c00
 800499c:	20000c04 	.word	0x20000c04

080049a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049a6:	e019      	b.n	80049dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049a8:	f000 fd88 	bl	80054bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <prvCheckTasksWaitingTermination+0x4c>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe fc3b 	bl	8003234 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049be:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <prvCheckTasksWaitingTermination+0x50>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <prvCheckTasksWaitingTermination+0x50>)
 80049c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <prvCheckTasksWaitingTermination+0x54>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <prvCheckTasksWaitingTermination+0x54>)
 80049d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049d2:	f000 fda1 	bl	8005518 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f80e 	bl	80049f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <prvCheckTasksWaitingTermination+0x54>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e1      	bne.n	80049a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000c1c 	.word	0x20000c1c
 80049f0:	20000c48 	.word	0x20000c48
 80049f4:	20000c30 	.word	0x20000c30

080049f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d108      	bne.n	8004a1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 ff30 	bl	8005874 <vPortFree>
				vPortFree( pxTCB );
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 ff2d 	bl	8005874 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a1a:	e017      	b.n	8004a4c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d103      	bne.n	8004a2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 ff24 	bl	8005874 <vPortFree>
	}
 8004a2c:	e00e      	b.n	8004a4c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d009      	beq.n	8004a4c <prvDeleteTCB+0x54>
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e7fe      	b.n	8004a4a <prvDeleteTCB+0x52>
	}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <prvResetNextTaskUnblockTime+0x44>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <prvResetNextTaskUnblockTime+0x14>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <prvResetNextTaskUnblockTime+0x16>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d004      	beq.n	8004a78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <prvResetNextTaskUnblockTime+0x48>)
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a76:	e008      	b.n	8004a8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <prvResetNextTaskUnblockTime+0x44>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <prvResetNextTaskUnblockTime+0x48>)
 8004a88:	6013      	str	r3, [r2, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000c00 	.word	0x20000c00
 8004a9c:	20000c68 	.word	0x20000c68

08004aa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <xTaskGetSchedulerState+0x34>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	e008      	b.n	8004ac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <xTaskGetSchedulerState+0x38>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004abc:	2302      	movs	r3, #2
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	e001      	b.n	8004ac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ac6:	687b      	ldr	r3, [r7, #4]
	}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	20000c54 	.word	0x20000c54
 8004ad8:	20000c70 	.word	0x20000c70

08004adc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d054      	beq.n	8004b9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <xTaskPriorityDisinherit+0xcc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d009      	beq.n	8004b10 <xTaskPriorityDisinherit+0x34>
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e7fe      	b.n	8004b0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <xTaskPriorityDisinherit+0x50>
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	e7fe      	b.n	8004b2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	1e5a      	subs	r2, r3, #1
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d02c      	beq.n	8004b9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d128      	bne.n	8004b9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fb70 	bl	8003234 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <xTaskPriorityDisinherit+0xd0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d903      	bls.n	8004b7c <xTaskPriorityDisinherit+0xa0>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <xTaskPriorityDisinherit+0xd0>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <xTaskPriorityDisinherit+0xd4>)
 8004b8a:	441a      	add	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fe faf1 	bl	800317a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b9c:	697b      	ldr	r3, [r7, #20]
	}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000774 	.word	0x20000774
 8004bac:	20000c50 	.word	0x20000c50
 8004bb0:	20000778 	.word	0x20000778

08004bb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bbe:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <prvAddCurrentTaskToDelayedList+0x90>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fb32 	bl	8003234 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d10a      	bne.n	8004bee <prvAddCurrentTaskToDelayedList+0x3a>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bde:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4819      	ldr	r0, [pc, #100]	; (8004c4c <prvAddCurrentTaskToDelayedList+0x98>)
 8004be8:	f7fe fac7 	bl	800317a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bec:	e026      	b.n	8004c3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d209      	bcs.n	8004c1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7fe fad5 	bl	80031c2 <vListInsert>
}
 8004c18:	e010      	b.n	8004c3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe facb 	bl	80031c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d202      	bcs.n	8004c3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c36:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6013      	str	r3, [r2, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000c4c 	.word	0x20000c4c
 8004c48:	20000774 	.word	0x20000774
 8004c4c:	20000c34 	.word	0x20000c34
 8004c50:	20000c04 	.word	0x20000c04
 8004c54:	20000c00 	.word	0x20000c00
 8004c58:	20000c68 	.word	0x20000c68

08004c5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c66:	f000 fac3 	bl	80051f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c6a:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <xTimerCreateTimerTask+0x80>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d021      	beq.n	8004cb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c7a:	1d3a      	adds	r2, r7, #4
 8004c7c:	f107 0108 	add.w	r1, r7, #8
 8004c80:	f107 030c 	add.w	r3, r7, #12
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe fa31 	bl	80030ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	9202      	str	r2, [sp, #8]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	2302      	movs	r3, #2
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	4910      	ldr	r1, [pc, #64]	; (8004ce0 <xTimerCreateTimerTask+0x84>)
 8004c9e:	4811      	ldr	r0, [pc, #68]	; (8004ce4 <xTimerCreateTimerTask+0x88>)
 8004ca0:	f7fe ffc6 	bl	8003c30 <xTaskCreateStatic>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <xTimerCreateTimerTask+0x8c>)
 8004ca8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <xTimerCreateTimerTask+0x8c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <xTimerCreateTimerTask+0x74>
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e7fe      	b.n	8004cce <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004cd0:	697b      	ldr	r3, [r7, #20]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000cac 	.word	0x20000cac
 8004ce0:	08005b38 	.word	0x08005b38
 8004ce4:	08004e05 	.word	0x08004e05
 8004ce8:	20000cb0 	.word	0x20000cb0

08004cec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <xTimerGenericCommand+0x2c>
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	e7fe      	b.n	8004d16 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d18:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <xTimerGenericCommand+0x94>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02a      	beq.n	8004d76 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	dc18      	bgt.n	8004d64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d32:	f7ff feb5 	bl	8004aa0 <xTaskGetSchedulerState>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d109      	bne.n	8004d50 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d3c:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <xTimerGenericCommand+0x94>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	f107 0110 	add.w	r1, r7, #16
 8004d44:	2300      	movs	r3, #0
 8004d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d48:	f7fe fb9c 	bl	8003484 <xQueueGenericSend>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24
 8004d4e:	e012      	b.n	8004d76 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <xTimerGenericCommand+0x94>)
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	f107 0110 	add.w	r1, r7, #16
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f7fe fb92 	bl	8003484 <xQueueGenericSend>
 8004d60:	6278      	str	r0, [r7, #36]	; 0x24
 8004d62:	e008      	b.n	8004d76 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <xTimerGenericCommand+0x94>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	f107 0110 	add.w	r1, r7, #16
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	f7fe fc82 	bl	8003678 <xQueueGenericSendFromISR>
 8004d74:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000cac 	.word	0x20000cac

08004d84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d8e:	4b1c      	ldr	r3, [pc, #112]	; (8004e00 <prvProcessExpiredTimer+0x7c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe fa49 	bl	8003234 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d121      	bne.n	8004dee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	18d1      	adds	r1, r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	6978      	ldr	r0, [r7, #20]
 8004db8:	f000 f8c8 	bl	8004f4c <prvInsertTimerInActiveList>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d015      	beq.n	8004dee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	2100      	movs	r1, #0
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	f7ff ff8d 	bl	8004cec <xTimerGenericCommand>
 8004dd2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <prvProcessExpiredTimer+0x6a>
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e7fe      	b.n	8004dec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	4798      	blx	r3
}
 8004df6:	bf00      	nop
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000ca4 	.word	0x20000ca4

08004e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e0c:	f107 0308 	add.w	r3, r7, #8
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f857 	bl	8004ec4 <prvGetNextExpireTime>
 8004e16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f803 	bl	8004e28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e22:	f000 f8d5 	bl	8004fd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e26:	e7f1      	b.n	8004e0c <prvTimerTask+0x8>

08004e28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e32:	f7ff fa3b 	bl	80042ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e36:	f107 0308 	add.w	r3, r7, #8
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f866 	bl	8004f0c <prvSampleTimeNow>
 8004e40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d130      	bne.n	8004eaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <prvProcessTimerOrBlockTask+0x3c>
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d806      	bhi.n	8004e64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e56:	f7ff fa37 	bl	80042c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff91 	bl	8004d84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e62:	e024      	b.n	8004eae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d008      	beq.n	8004e7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e6a:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <prvProcessTimerOrBlockTask+0x90>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <prvProcessTimerOrBlockTask+0x94>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fe fe9d 	bl	8003bc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e8e:	f7ff fa1b 	bl	80042c8 <xTaskResumeAll>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <prvProcessTimerOrBlockTask+0x98>)
 8004e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	f3bf 8f6f 	isb	sy
}
 8004ea8:	e001      	b.n	8004eae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004eaa:	f7ff fa0d 	bl	80042c8 <xTaskResumeAll>
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000ca8 	.word	0x20000ca8
 8004ebc:	20000cac 	.word	0x20000cac
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <prvGetNextExpireTime+0x44>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf0c      	ite	eq
 8004ed6:	2301      	moveq	r3, #1
 8004ed8:	2300      	movne	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <prvGetNextExpireTime+0x44>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e001      	b.n	8004efa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004efa:	68fb      	ldr	r3, [r7, #12]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	20000ca4 	.word	0x20000ca4

08004f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f14:	f7ff fa74 	bl	8004400 <xTaskGetTickCount>
 8004f18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <prvSampleTimeNow+0x3c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d205      	bcs.n	8004f30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f24:	f000 f904 	bl	8005130 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f36:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <prvSampleTimeNow+0x3c>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000cb4 	.word	0x20000cb4

08004f4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d812      	bhi.n	8004f98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	1ad2      	subs	r2, r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e01b      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <prvInsertTimerInActiveList+0x7c>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fe f916 	bl	80031c2 <vListInsert>
 8004f96:	e012      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d206      	bcs.n	8004fae <prvInsertTimerInActiveList+0x62>
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e007      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <prvInsertTimerInActiveList+0x80>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7fe f902 	bl	80031c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004fbe:	697b      	ldr	r3, [r7, #20]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000ca8 	.word	0x20000ca8
 8004fcc:	20000ca4 	.word	0x20000ca4

08004fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fd6:	e099      	b.n	800510c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da17      	bge.n	800500e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <prvProcessReceivedCommands+0x2e>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e7fe      	b.n	8004ffc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005004:	6850      	ldr	r0, [r2, #4]
 8005006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005008:	6892      	ldr	r2, [r2, #8]
 800500a:	4611      	mov	r1, r2
 800500c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db7a      	blt.n	800510a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	3304      	adds	r3, #4
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe f905 	bl	8003234 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800502a:	463b      	mov	r3, r7
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff ff6d 	bl	8004f0c <prvSampleTimeNow>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b09      	cmp	r3, #9
 8005038:	d868      	bhi.n	800510c <prvProcessReceivedCommands+0x13c>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <prvProcessReceivedCommands+0x70>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005069 	.word	0x08005069
 8005044:	08005069 	.word	0x08005069
 8005048:	08005069 	.word	0x08005069
 800504c:	0800510d 	.word	0x0800510d
 8005050:	080050c3 	.word	0x080050c3
 8005054:	080050f9 	.word	0x080050f9
 8005058:	08005069 	.word	0x08005069
 800505c:	08005069 	.word	0x08005069
 8005060:	0800510d 	.word	0x0800510d
 8005064:	080050c3 	.word	0x080050c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	18d1      	adds	r1, r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005076:	f7ff ff69 	bl	8004f4c <prvInsertTimerInActiveList>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d045      	beq.n	800510c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005086:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d13d      	bne.n	800510c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	441a      	add	r2, r3
 8005098:	2300      	movs	r3, #0
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	2100      	movs	r1, #0
 80050a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050a2:	f7ff fe23 	bl	8004cec <xTimerGenericCommand>
 80050a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d12e      	bne.n	800510c <prvProcessReceivedCommands+0x13c>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	e7fe      	b.n	80050c0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <prvProcessReceivedCommands+0x114>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e7fe      	b.n	80050e2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	699a      	ldr	r2, [r3, #24]
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	18d1      	adds	r1, r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f2:	f7ff ff2b 	bl	8004f4c <prvInsertTimerInActiveList>
					break;
 80050f6:	e009      	b.n	800510c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005104:	f000 fbb6 	bl	8005874 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005108:	e000      	b.n	800510c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800510a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <prvProcessReceivedCommands+0x15c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1d39      	adds	r1, r7, #4
 8005112:	2200      	movs	r2, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fb43 	bl	80037a0 <xQueueReceive>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	f47f af5b 	bne.w	8004fd8 <prvProcessReceivedCommands+0x8>
	}
}
 8005122:	bf00      	nop
 8005124:	3730      	adds	r7, #48	; 0x30
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000cac 	.word	0x20000cac

08005130 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005136:	e044      	b.n	80051c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005138:	4b2b      	ldr	r3, [pc, #172]	; (80051e8 <prvSwitchTimerLists+0xb8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005142:	4b29      	ldr	r3, [pc, #164]	; (80051e8 <prvSwitchTimerLists+0xb8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3304      	adds	r3, #4
 8005150:	4618      	mov	r0, r3
 8005152:	f7fe f86f 	bl	8003234 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d12d      	bne.n	80051c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	429a      	cmp	r2, r3
 8005176:	d90e      	bls.n	8005196 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005184:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <prvSwitchTimerLists+0xb8>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe f817 	bl	80031c2 <vListInsert>
 8005194:	e015      	b.n	80051c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005196:	2300      	movs	r3, #0
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2300      	movs	r3, #0
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	2100      	movs	r1, #0
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff fda3 	bl	8004cec <xTimerGenericCommand>
 80051a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <prvSwitchTimerLists+0x92>
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	e7fe      	b.n	80051c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <prvSwitchTimerLists+0xb8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1b5      	bne.n	8005138 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <prvSwitchTimerLists+0xb8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <prvSwitchTimerLists+0xbc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <prvSwitchTimerLists+0xb8>)
 80051d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <prvSwitchTimerLists+0xbc>)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6013      	str	r3, [r2, #0]
}
 80051e0:	bf00      	nop
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000ca4 	.word	0x20000ca4
 80051ec:	20000ca8 	.word	0x20000ca8

080051f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051f6:	f000 f961 	bl	80054bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <prvCheckForValidListAndQueue+0x60>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d120      	bne.n	8005244 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005202:	4814      	ldr	r0, [pc, #80]	; (8005254 <prvCheckForValidListAndQueue+0x64>)
 8005204:	f7fd ff8c 	bl	8003120 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005208:	4813      	ldr	r0, [pc, #76]	; (8005258 <prvCheckForValidListAndQueue+0x68>)
 800520a:	f7fd ff89 	bl	8003120 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <prvCheckForValidListAndQueue+0x6c>)
 8005210:	4a10      	ldr	r2, [pc, #64]	; (8005254 <prvCheckForValidListAndQueue+0x64>)
 8005212:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <prvCheckForValidListAndQueue+0x70>)
 8005216:	4a10      	ldr	r2, [pc, #64]	; (8005258 <prvCheckForValidListAndQueue+0x68>)
 8005218:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800521a:	2300      	movs	r3, #0
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	4b11      	ldr	r3, [pc, #68]	; (8005264 <prvCheckForValidListAndQueue+0x74>)
 8005220:	4a11      	ldr	r2, [pc, #68]	; (8005268 <prvCheckForValidListAndQueue+0x78>)
 8005222:	2110      	movs	r1, #16
 8005224:	200a      	movs	r0, #10
 8005226:	f7fe f897 	bl	8003358 <xQueueGenericCreateStatic>
 800522a:	4602      	mov	r2, r0
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <prvCheckForValidListAndQueue+0x60>)
 800522e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <prvCheckForValidListAndQueue+0x60>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <prvCheckForValidListAndQueue+0x60>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	490b      	ldr	r1, [pc, #44]	; (800526c <prvCheckForValidListAndQueue+0x7c>)
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fc9a 	bl	8003b78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005244:	f000 f968 	bl	8005518 <vPortExitCritical>
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000cac 	.word	0x20000cac
 8005254:	20000c7c 	.word	0x20000c7c
 8005258:	20000c90 	.word	0x20000c90
 800525c:	20000ca4 	.word	0x20000ca4
 8005260:	20000ca8 	.word	0x20000ca8
 8005264:	20000d58 	.word	0x20000d58
 8005268:	20000cb8 	.word	0x20000cb8
 800526c:	08005b40 	.word	0x08005b40

08005270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b04      	subs	r3, #4
 8005280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3b04      	subs	r3, #4
 800528e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b04      	subs	r3, #4
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a0:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <pxPortInitialiseStack+0x64>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b14      	subs	r3, #20
 80052aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3b04      	subs	r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f06f 0202 	mvn.w	r2, #2
 80052be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b20      	subs	r3, #32
 80052c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	080052d9 	.word	0x080052d9

080052d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052e2:	4b11      	ldr	r3, [pc, #68]	; (8005328 <prvTaskExitError+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d009      	beq.n	8005300 <prvTaskExitError+0x28>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e7fe      	b.n	80052fe <prvTaskExitError+0x26>
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005312:	bf00      	nop
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0fc      	beq.n	8005314 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	2000000c 	.word	0x2000000c
 800532c:	00000000 	.word	0x00000000

08005330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <pxCurrentTCBConst2>)
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	6808      	ldr	r0, [r1, #0]
 8005336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	f380 8809 	msr	PSP, r0
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f380 8811 	msr	BASEPRI, r0
 800534a:	4770      	bx	lr
 800534c:	f3af 8000 	nop.w

08005350 <pxCurrentTCBConst2>:
 8005350:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop

08005358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005358:	4808      	ldr	r0, [pc, #32]	; (800537c <prvPortStartFirstTask+0x24>)
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	6800      	ldr	r0, [r0, #0]
 800535e:	f380 8808 	msr	MSP, r0
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	f380 8814 	msr	CONTROL, r0
 800536a:	b662      	cpsie	i
 800536c:	b661      	cpsie	f
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	df00      	svc	0
 8005378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800537a:	bf00      	nop
 800537c:	e000ed08 	.word	0xe000ed08

08005380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005386:	4b44      	ldr	r3, [pc, #272]	; (8005498 <xPortStartScheduler+0x118>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a44      	ldr	r2, [pc, #272]	; (800549c <xPortStartScheduler+0x11c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d109      	bne.n	80053a4 <xPortStartScheduler+0x24>
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e7fe      	b.n	80053a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053a4:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <xPortStartScheduler+0x118>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a3d      	ldr	r2, [pc, #244]	; (80054a0 <xPortStartScheduler+0x120>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d109      	bne.n	80053c2 <xPortStartScheduler+0x42>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e7fe      	b.n	80053c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053c2:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <xPortStartScheduler+0x124>)
 80053c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	22ff      	movs	r2, #255	; 0xff
 80053d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <xPortStartScheduler+0x128>)
 80053e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053ea:	4b30      	ldr	r3, [pc, #192]	; (80054ac <xPortStartScheduler+0x12c>)
 80053ec:	2207      	movs	r2, #7
 80053ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053f0:	e009      	b.n	8005406 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80053f2:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <xPortStartScheduler+0x12c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <xPortStartScheduler+0x12c>)
 80053fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d0ef      	beq.n	80053f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005412:	4b26      	ldr	r3, [pc, #152]	; (80054ac <xPortStartScheduler+0x12c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f1c3 0307 	rsb	r3, r3, #7
 800541a:	2b04      	cmp	r3, #4
 800541c:	d009      	beq.n	8005432 <xPortStartScheduler+0xb2>
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	e7fe      	b.n	8005430 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005432:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <xPortStartScheduler+0x12c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <xPortStartScheduler+0x12c>)
 800543a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800543c:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <xPortStartScheduler+0x12c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005444:	4a19      	ldr	r2, [pc, #100]	; (80054ac <xPortStartScheduler+0x12c>)
 8005446:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005450:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <xPortStartScheduler+0x130>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <xPortStartScheduler+0x130>)
 8005456:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800545a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800545c:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <xPortStartScheduler+0x130>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <xPortStartScheduler+0x130>)
 8005462:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005466:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005468:	f000 f8d6 	bl	8005618 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <xPortStartScheduler+0x134>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005472:	f000 f8f5 	bl	8005660 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005476:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <xPortStartScheduler+0x138>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a0f      	ldr	r2, [pc, #60]	; (80054b8 <xPortStartScheduler+0x138>)
 800547c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005480:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005482:	f7ff ff69 	bl	8005358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005486:	f7ff f889 	bl	800459c <vTaskSwitchContext>
	prvTaskExitError();
 800548a:	f7ff ff25 	bl	80052d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	e000ed00 	.word	0xe000ed00
 800549c:	410fc271 	.word	0x410fc271
 80054a0:	410fc270 	.word	0x410fc270
 80054a4:	e000e400 	.word	0xe000e400
 80054a8:	20000da8 	.word	0x20000da8
 80054ac:	20000dac 	.word	0x20000dac
 80054b0:	e000ed20 	.word	0xe000ed20
 80054b4:	2000000c 	.word	0x2000000c
 80054b8:	e000ef34 	.word	0xe000ef34

080054bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054d4:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <vPortEnterCritical+0x54>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3301      	adds	r3, #1
 80054da:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <vPortEnterCritical+0x54>)
 80054dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <vPortEnterCritical+0x54>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10e      	bne.n	8005504 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054e6:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <vPortEnterCritical+0x58>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d009      	beq.n	8005504 <vPortEnterCritical+0x48>
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	603b      	str	r3, [r7, #0]
 8005502:	e7fe      	b.n	8005502 <vPortEnterCritical+0x46>
	}
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	2000000c 	.word	0x2000000c
 8005514:	e000ed04 	.word	0xe000ed04

08005518 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <vPortExitCritical+0x4c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <vPortExitCritical+0x22>
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	e7fe      	b.n	8005538 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <vPortExitCritical+0x4c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	4a08      	ldr	r2, [pc, #32]	; (8005564 <vPortExitCritical+0x4c>)
 8005542:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <vPortExitCritical+0x4c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <vPortExitCritical+0x3e>
 800554c:	2300      	movs	r3, #0
 800554e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c
	...

08005570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005570:	f3ef 8009 	mrs	r0, PSP
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <pxCurrentTCBConst>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f01e 0f10 	tst.w	lr, #16
 8005580:	bf08      	it	eq
 8005582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558a:	6010      	str	r0, [r2, #0]
 800558c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005594:	f380 8811 	msr	BASEPRI, r0
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f7fe fffc 	bl	800459c <vTaskSwitchContext>
 80055a4:	f04f 0000 	mov.w	r0, #0
 80055a8:	f380 8811 	msr	BASEPRI, r0
 80055ac:	bc09      	pop	{r0, r3}
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	6808      	ldr	r0, [r1, #0]
 80055b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b6:	f01e 0f10 	tst.w	lr, #16
 80055ba:	bf08      	it	eq
 80055bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055c0:	f380 8809 	msr	PSP, r0
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w

080055d0 <pxCurrentTCBConst>:
 80055d0:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055f0:	f7fe ff16 	bl	8004420 <xTaskIncrementTick>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <SysTick_Handler+0x3c>)
 80055fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	2300      	movs	r3, #0
 8005604:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <vPortSetupTimerInterrupt+0x34>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <vPortSetupTimerInterrupt+0x38>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <vPortSetupTimerInterrupt+0x3c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <vPortSetupTimerInterrupt+0x40>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	099b      	lsrs	r3, r3, #6
 8005634:	4a09      	ldr	r2, [pc, #36]	; (800565c <vPortSetupTimerInterrupt+0x44>)
 8005636:	3b01      	subs	r3, #1
 8005638:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800563a:	4b04      	ldr	r3, [pc, #16]	; (800564c <vPortSetupTimerInterrupt+0x34>)
 800563c:	2207      	movs	r2, #7
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	e000e010 	.word	0xe000e010
 8005650:	e000e018 	.word	0xe000e018
 8005654:	20000000 	.word	0x20000000
 8005658:	10624dd3 	.word	0x10624dd3
 800565c:	e000e014 	.word	0xe000e014

08005660 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005660:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005670 <vPortEnableVFP+0x10>
 8005664:	6801      	ldr	r1, [r0, #0]
 8005666:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800566a:	6001      	str	r1, [r0, #0]
 800566c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800566e:	bf00      	nop
 8005670:	e000ed88 	.word	0xe000ed88

08005674 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800567a:	f3ef 8305 	mrs	r3, IPSR
 800567e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b0f      	cmp	r3, #15
 8005684:	d913      	bls.n	80056ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005686:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <vPortValidateInterruptPriority+0x6c>)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005690:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <vPortValidateInterruptPriority+0x70>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	7afa      	ldrb	r2, [r7, #11]
 8005696:	429a      	cmp	r2, r3
 8005698:	d209      	bcs.n	80056ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	e7fe      	b.n	80056ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <vPortValidateInterruptPriority+0x74>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <vPortValidateInterruptPriority+0x78>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d909      	bls.n	80056d2 <vPortValidateInterruptPriority+0x5e>
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	e7fe      	b.n	80056d0 <vPortValidateInterruptPriority+0x5c>
	}
 80056d2:	bf00      	nop
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	e000e3f0 	.word	0xe000e3f0
 80056e4:	20000da8 	.word	0x20000da8
 80056e8:	e000ed0c 	.word	0xe000ed0c
 80056ec:	20000dac 	.word	0x20000dac

080056f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056fc:	f7fe fdd6 	bl	80042ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005700:	4b57      	ldr	r3, [pc, #348]	; (8005860 <pvPortMalloc+0x170>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005708:	f000 f90c 	bl	8005924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800570c:	4b55      	ldr	r3, [pc, #340]	; (8005864 <pvPortMalloc+0x174>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	f040 808c 	bne.w	8005832 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01c      	beq.n	800575a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005720:	2208      	movs	r2, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4413      	add	r3, r2
 8005726:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	2b00      	cmp	r3, #0
 8005730:	d013      	beq.n	800575a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f023 0307 	bic.w	r3, r3, #7
 8005738:	3308      	adds	r3, #8
 800573a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <pvPortMalloc+0x6a>
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e7fe      	b.n	8005758 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d068      	beq.n	8005832 <pvPortMalloc+0x142>
 8005760:	4b41      	ldr	r3, [pc, #260]	; (8005868 <pvPortMalloc+0x178>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d863      	bhi.n	8005832 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800576a:	4b40      	ldr	r3, [pc, #256]	; (800586c <pvPortMalloc+0x17c>)
 800576c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800576e:	4b3f      	ldr	r3, [pc, #252]	; (800586c <pvPortMalloc+0x17c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005774:	e004      	b.n	8005780 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	429a      	cmp	r2, r3
 8005788:	d903      	bls.n	8005792 <pvPortMalloc+0xa2>
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f1      	bne.n	8005776 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005792:	4b33      	ldr	r3, [pc, #204]	; (8005860 <pvPortMalloc+0x170>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005798:	429a      	cmp	r2, r3
 800579a:	d04a      	beq.n	8005832 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2208      	movs	r2, #8
 80057a2:	4413      	add	r3, r2
 80057a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	1ad2      	subs	r2, r2, r3
 80057b6:	2308      	movs	r3, #8
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d91e      	bls.n	80057fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4413      	add	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <pvPortMalloc+0xf4>
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	e7fe      	b.n	80057e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057f6:	69b8      	ldr	r0, [r7, #24]
 80057f8:	f000 f8f6 	bl	80059e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057fc:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <pvPortMalloc+0x178>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	4a18      	ldr	r2, [pc, #96]	; (8005868 <pvPortMalloc+0x178>)
 8005808:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800580a:	4b17      	ldr	r3, [pc, #92]	; (8005868 <pvPortMalloc+0x178>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b18      	ldr	r3, [pc, #96]	; (8005870 <pvPortMalloc+0x180>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d203      	bcs.n	800581e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <pvPortMalloc+0x178>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a15      	ldr	r2, [pc, #84]	; (8005870 <pvPortMalloc+0x180>)
 800581c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <pvPortMalloc+0x174>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	431a      	orrs	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005832:	f7fe fd49 	bl	80042c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <pvPortMalloc+0x164>
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e7fe      	b.n	8005852 <pvPortMalloc+0x162>
	return pvReturn;
 8005854:	69fb      	ldr	r3, [r7, #28]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3728      	adds	r7, #40	; 0x28
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	200019b8 	.word	0x200019b8
 8005864:	200019c4 	.word	0x200019c4
 8005868:	200019bc 	.word	0x200019bc
 800586c:	200019b0 	.word	0x200019b0
 8005870:	200019c0 	.word	0x200019c0

08005874 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d046      	beq.n	8005914 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005886:	2308      	movs	r3, #8
 8005888:	425b      	negs	r3, r3
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4413      	add	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	4b20      	ldr	r3, [pc, #128]	; (800591c <vPortFree+0xa8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4013      	ands	r3, r2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <vPortFree+0x42>
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	e7fe      	b.n	80058b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <vPortFree+0x5e>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	e7fe      	b.n	80058d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <vPortFree+0xa8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d019      	beq.n	8005914 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d115      	bne.n	8005914 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <vPortFree+0xa8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058f8:	f7fe fcd8 	bl	80042ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <vPortFree+0xac>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4413      	add	r3, r2
 8005906:	4a06      	ldr	r2, [pc, #24]	; (8005920 <vPortFree+0xac>)
 8005908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800590a:	6938      	ldr	r0, [r7, #16]
 800590c:	f000 f86c 	bl	80059e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005910:	f7fe fcda 	bl	80042c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005914:	bf00      	nop
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	200019c4 	.word	0x200019c4
 8005920:	200019bc 	.word	0x200019bc

08005924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800592a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800592e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <prvHeapInit+0xac>)
 8005932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00c      	beq.n	8005958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3307      	adds	r3, #7
 8005942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0307 	bic.w	r3, r3, #7
 800594a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <prvHeapInit+0xac>)
 8005954:	4413      	add	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800595c:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <prvHeapInit+0xb0>)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <prvHeapInit+0xb0>)
 8005964:	2200      	movs	r2, #0
 8005966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	4413      	add	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005970:	2208      	movs	r2, #8
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <prvHeapInit+0xb4>)
 8005984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <prvHeapInit+0xb4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <prvHeapInit+0xb4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	1ad2      	subs	r2, r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <prvHeapInit+0xb4>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <prvHeapInit+0xb8>)
 80059b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <prvHeapInit+0xbc>)
 80059ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <prvHeapInit+0xc0>)
 80059be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059c2:	601a      	str	r2, [r3, #0]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20000db0 	.word	0x20000db0
 80059d4:	200019b0 	.word	0x200019b0
 80059d8:	200019b8 	.word	0x200019b8
 80059dc:	200019c0 	.word	0x200019c0
 80059e0:	200019bc 	.word	0x200019bc
 80059e4:	200019c4 	.word	0x200019c4

080059e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059f0:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <prvInsertBlockIntoFreeList+0xac>)
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e002      	b.n	80059fc <prvInsertBlockIntoFreeList+0x14>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d8f7      	bhi.n	80059f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4413      	add	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d108      	bne.n	8005a2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	441a      	add	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	441a      	add	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d118      	bne.n	8005a70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <prvInsertBlockIntoFreeList+0xb0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d00d      	beq.n	8005a66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	441a      	add	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	e008      	b.n	8005a78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <prvInsertBlockIntoFreeList+0xb0>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e003      	b.n	8005a78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d002      	beq.n	8005a86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	200019b0 	.word	0x200019b0
 8005a98:	200019b8 	.word	0x200019b8

08005a9c <__libc_init_array>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	4e0d      	ldr	r6, [pc, #52]	; (8005ad4 <__libc_init_array+0x38>)
 8005aa0:	4c0d      	ldr	r4, [pc, #52]	; (8005ad8 <__libc_init_array+0x3c>)
 8005aa2:	1ba4      	subs	r4, r4, r6
 8005aa4:	10a4      	asrs	r4, r4, #2
 8005aa6:	2500      	movs	r5, #0
 8005aa8:	42a5      	cmp	r5, r4
 8005aaa:	d109      	bne.n	8005ac0 <__libc_init_array+0x24>
 8005aac:	4e0b      	ldr	r6, [pc, #44]	; (8005adc <__libc_init_array+0x40>)
 8005aae:	4c0c      	ldr	r4, [pc, #48]	; (8005ae0 <__libc_init_array+0x44>)
 8005ab0:	f000 f82c 	bl	8005b0c <_init>
 8005ab4:	1ba4      	subs	r4, r4, r6
 8005ab6:	10a4      	asrs	r4, r4, #2
 8005ab8:	2500      	movs	r5, #0
 8005aba:	42a5      	cmp	r5, r4
 8005abc:	d105      	bne.n	8005aca <__libc_init_array+0x2e>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ac4:	4798      	blx	r3
 8005ac6:	3501      	adds	r5, #1
 8005ac8:	e7ee      	b.n	8005aa8 <__libc_init_array+0xc>
 8005aca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ace:	4798      	blx	r3
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	e7f2      	b.n	8005aba <__libc_init_array+0x1e>
 8005ad4:	08005b80 	.word	0x08005b80
 8005ad8:	08005b80 	.word	0x08005b80
 8005adc:	08005b80 	.word	0x08005b80
 8005ae0:	08005b84 	.word	0x08005b84

08005ae4 <memcpy>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	1e43      	subs	r3, r0, #1
 8005ae8:	440a      	add	r2, r1
 8005aea:	4291      	cmp	r1, r2
 8005aec:	d100      	bne.n	8005af0 <memcpy+0xc>
 8005aee:	bd10      	pop	{r4, pc}
 8005af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af8:	e7f7      	b.n	8005aea <memcpy+0x6>

08005afa <memset>:
 8005afa:	4402      	add	r2, r0
 8005afc:	4603      	mov	r3, r0
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d100      	bne.n	8005b04 <memset+0xa>
 8005b02:	4770      	bx	lr
 8005b04:	f803 1b01 	strb.w	r1, [r3], #1
 8005b08:	e7f9      	b.n	8005afe <memset+0x4>
	...

08005b0c <_init>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr

08005b18 <_fini>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr
