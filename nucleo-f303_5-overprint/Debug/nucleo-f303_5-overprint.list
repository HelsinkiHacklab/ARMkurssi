
nucleo-f303_5-overprint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800421c  0800421c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800421c  0800421c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800421c  0800421c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000070  08004294  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004294  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a00  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000193a  00000000  00000000  00029aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  0002b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c9ba  00000000  00000000  0002c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007792  00000000  00000000  00048b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7149  00000000  00000000  00050324  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f746d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa0  00000000  00000000  000f74e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004120 	.word	0x08004120

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004120 	.word	0x08004120

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b09c      	sub	sp, #112	; 0x70
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fb65 	bl	8000964 <HAL_Init>
  #define UART_TX_BUSY		0

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f84d 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f931 	bl	8000504 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a2:	f000 f909 	bl	80004b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002a6:	f000 f8a7 	bl	80003f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80002aa:	f000 f8d5 	bl	8000458 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

uint8_t txtBuf[100];
uint32_t startTime = 0, waitTime, counter=0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80002b2:	2300      	movs	r3, #0
 80002b4:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( HAL_UART_GetState(&huart3) & 1<<UART_TX_BUSY) {}
 80002b6:	bf00      	nop
 80002b8:	481a      	ldr	r0, [pc, #104]	; (8000324 <main+0x94>)
 80002ba:	f002 fe89 	bl	8002fd0 <HAL_UART_GetState>
 80002be:	4603      	mov	r3, r0
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f7      	bne.n	80002b8 <main+0x28>
	  waitTime = uwTick-startTime;
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <main+0x98>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80002ce:	1ad3      	subs	r3, r2, r3
 80002d0:	667b      	str	r3, [r7, #100]	; 0x64
	  sprintf(txtBuf, "Wait time for loop %ld was %ld ms\r\n", counter, waitTime);
 80002d2:	4638      	mov	r0, r7
 80002d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80002d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80002d8:	4914      	ldr	r1, [pc, #80]	; (800032c <main+0x9c>)
 80002da:	f003 fb1b 	bl	8003914 <siprintf>
	  HAL_UART_Transmit(&huart2,txtBuf,strlen(txtBuf),HAL_MAX_DELAY);
 80002de:	463b      	mov	r3, r7
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff7d 	bl	80001e0 <strlen>
 80002e6:	4603      	mov	r3, r0
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	4639      	mov	r1, r7
 80002ec:	f04f 33ff 	mov.w	r3, #4294967295
 80002f0:	480f      	ldr	r0, [pc, #60]	; (8000330 <main+0xa0>)
 80002f2:	f002 fbf9 	bl	8002ae8 <HAL_UART_Transmit>
	  sprintf(txtBuf, "Hello, World! This is loop %ld of UART transmit using DMA with busy status check!\r\n", counter++);
 80002f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80002f8:	1c5a      	adds	r2, r3, #1
 80002fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80002fc:	4638      	mov	r0, r7
 80002fe:	461a      	mov	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <main+0xa4>)
 8000302:	f003 fb07 	bl	8003914 <siprintf>
	  startTime = uwTick;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <main+0x98>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_UART_Transmit_DMA(&huart3,txtBuf,strlen(txtBuf));
 800030c:	463b      	mov	r3, r7
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff66 	bl	80001e0 <strlen>
 8000314:	4603      	mov	r3, r0
 8000316:	b29a      	uxth	r2, r3
 8000318:	463b      	mov	r3, r7
 800031a:	4619      	mov	r1, r3
 800031c:	4801      	ldr	r0, [pc, #4]	; (8000324 <main+0x94>)
 800031e:	f002 fc77 	bl	8002c10 <HAL_UART_Transmit_DMA>
	  while ( HAL_UART_GetState(&huart3) & 1<<UART_TX_BUSY) {}
 8000322:	e7c8      	b.n	80002b6 <main+0x26>
 8000324:	20000098 	.word	0x20000098
 8000328:	20000220 	.word	0x20000220
 800032c:	08004138 	.word	0x08004138
 8000330:	200001a0 	.word	0x200001a0
 8000334:	0800415c 	.word	0x0800415c

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b0a6      	sub	sp, #152	; 0x98
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fadc 	bl	8003904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2258      	movs	r2, #88	; 0x58
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 face 	bl	8003904 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	2302      	movs	r3, #2
 800036a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000370:	2310      	movs	r3, #16
 8000372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000384:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000388:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000396:	4618      	mov	r0, r3
 8000398:	f000 ffee 	bl	8001378 <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003a2:	f000 f917 	bl	80005d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	230f      	movs	r3, #15
 80003a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2302      	movs	r3, #2
 80003ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 feee 	bl	80021a4 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ce:	f000 f901 	bl	80005d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80003d2:	2306      	movs	r3, #6
 80003d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 f915 	bl	8002610 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003ec:	f000 f8f2 	bl	80005d4 <Error_Handler>
  }
}
 80003f0:	bf00      	nop
 80003f2:	3798      	adds	r7, #152	; 0x98
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_USART2_UART_Init+0x58>)
 80003fe:	4a15      	ldr	r2, [pc, #84]	; (8000454 <MX_USART2_UART_Init+0x5c>)
 8000400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000402:	4b13      	ldr	r3, [pc, #76]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000436:	2200      	movs	r2, #0
 8000438:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800043c:	f002 fb06 	bl	8002a4c <HAL_UART_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000446:	f000 f8c5 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200001a0 	.word	0x200001a0
 8000454:	40004400 	.word	0x40004400

08000458 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 800045e:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <MX_USART3_UART_Init+0x5c>)
 8000460:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 8000464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000468:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 800047e:	220c      	movs	r2, #12
 8000480:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_USART3_UART_Init+0x58>)
 800049c:	f002 fad6 	bl	8002a4c <HAL_UART_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80004a6:	f000 f895 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000098 	.word	0x20000098
 80004b4:	40004800 	.word	0x40004800

080004b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_DMA_Init+0x48>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <MX_DMA_Init+0x48>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <MX_DMA_Init+0x48>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	200c      	movs	r0, #12
 80004dc:	f000 fb83 	bl	8000be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004e0:	200c      	movs	r0, #12
 80004e2:	f000 fb9c 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2011      	movs	r0, #17
 80004ec:	f000 fb7b 	bl	8000be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004f0:	2011      	movs	r0, #17
 80004f2:	f000 fb94 	bl	8000c1e <HAL_NVIC_EnableIRQ>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_GPIO_Init+0xc4>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a2a      	ldr	r2, [pc, #168]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a24      	ldr	r2, [pc, #144]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_GPIO_Init+0xc4>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_GPIO_Init+0xc4>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fee1 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_GPIO_Init+0xc8>)
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <MX_GPIO_Init+0xcc>)
 800059c:	f000 fd4a 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a0:	2320      	movs	r3, #32
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 fd3b 	bl	8001034 <HAL_GPIO_Init>

}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	10210000 	.word	0x10210000
 80005d0:	48000800 	.word	0x48000800

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_MspInit+0x44>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x44>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_MspInit+0x44>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <HAL_MspInit+0x44>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_MspInit+0x44>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800061a:	2007      	movs	r0, #7
 800061c:	f000 fad8 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a5d      	ldr	r2, [pc, #372]	; (80007c0 <HAL_UART_MspInit+0x194>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d157      	bne.n	80006fe <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064e:	4b5d      	ldr	r3, [pc, #372]	; (80007c4 <HAL_UART_MspInit+0x198>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a5c      	ldr	r2, [pc, #368]	; (80007c4 <HAL_UART_MspInit+0x198>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b5a      	ldr	r3, [pc, #360]	; (80007c4 <HAL_UART_MspInit+0x198>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <HAL_UART_MspInit+0x198>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a56      	ldr	r2, [pc, #344]	; (80007c4 <HAL_UART_MspInit+0x198>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b54      	ldr	r3, [pc, #336]	; (80007c4 <HAL_UART_MspInit+0x198>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800067e:	230c      	movs	r3, #12
 8000680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800068e:	2307      	movs	r3, #7
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f000 fcca 	bl	8001034 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80006a0:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006a2:	4a4a      	ldr	r2, [pc, #296]	; (80007cc <HAL_UART_MspInit+0x1a0>)
 80006a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006a6:	4b48      	ldr	r3, [pc, #288]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006a8:	2210      	movs	r2, #16
 80006aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ac:	4b46      	ldr	r3, [pc, #280]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006b2:	4b45      	ldr	r3, [pc, #276]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006b8:	4b43      	ldr	r3, [pc, #268]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80006c4:	4b40      	ldr	r3, [pc, #256]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80006d0:	483d      	ldr	r0, [pc, #244]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006d2:	f000 fabe 	bl	8000c52 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80006dc:	f7ff ff7a 	bl	80005d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a39      	ldr	r2, [pc, #228]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006e4:	669a      	str	r2, [r3, #104]	; 0x68
 80006e6:	4a38      	ldr	r2, [pc, #224]	; (80007c8 <HAL_UART_MspInit+0x19c>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2026      	movs	r0, #38	; 0x26
 80006f2:	f000 fa78 	bl	8000be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006f6:	2026      	movs	r0, #38	; 0x26
 80006f8:	f000 fa91 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006fc:	e05b      	b.n	80007b6 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a33      	ldr	r2, [pc, #204]	; (80007d0 <HAL_UART_MspInit+0x1a4>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d156      	bne.n	80007b6 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <HAL_UART_MspInit+0x198>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <HAL_UART_MspInit+0x198>)
 800070e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000712:	61d3      	str	r3, [r2, #28]
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <HAL_UART_MspInit+0x198>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <HAL_UART_MspInit+0x198>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <HAL_UART_MspInit+0x198>)
 8000726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800072a:	6153      	str	r3, [r2, #20]
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <HAL_UART_MspInit+0x198>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000738:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800074a:	2307      	movs	r3, #7
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	481f      	ldr	r0, [pc, #124]	; (80007d4 <HAL_UART_MspInit+0x1a8>)
 8000756:	f000 fc6d 	bl	8001034 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 800075c:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <HAL_UART_MspInit+0x1b0>)
 800075e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 8000762:	2210      	movs	r2, #16
 8000764:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800078a:	4813      	ldr	r0, [pc, #76]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 800078c:	f000 fa61 	bl	8000c52 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8000796:	f7ff ff1d 	bl	80005d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 800079e:	669a      	str	r2, [r3, #104]	; 0x68
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <HAL_UART_MspInit+0x1ac>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2027      	movs	r0, #39	; 0x27
 80007ac:	f000 fa1b 	bl	8000be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007b0:	2027      	movs	r0, #39	; 0x27
 80007b2:	f000 fa34 	bl	8000c1e <HAL_NVIC_EnableIRQ>
}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40004400 	.word	0x40004400
 80007c4:	40021000 	.word	0x40021000
 80007c8:	2000015c 	.word	0x2000015c
 80007cc:	40020080 	.word	0x40020080
 80007d0:	40004800 	.word	0x40004800
 80007d4:	48000400 	.word	0x48000400
 80007d8:	20000118 	.word	0x20000118
 80007dc:	4002001c 	.word	0x4002001c

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f8dc 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <DMA1_Channel2_IRQHandler+0x10>)
 8000842:	f000 faea 	bl	8000e1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000118 	.word	0x20000118

08000850 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <DMA1_Channel7_IRQHandler+0x10>)
 8000856:	f000 fae0 	bl	8000e1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000015c 	.word	0x2000015c

08000864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <USART2_IRQHandler+0x10>)
 800086a:	f002 fa4d 	bl	8002d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001a0 	.word	0x200001a0

08000878 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USART3_IRQHandler+0x10>)
 800087e:	f002 fa43 	bl	8002d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000098 	.word	0x20000098

0800088c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x16>
		heap_end = &end;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <_sbrk+0x50>)
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <_sbrk+0x54>)
 80008a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <_sbrk+0x50>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <_sbrk+0x50>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	466a      	mov	r2, sp
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d907      	bls.n	80008c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008b6:	f002 fffb 	bl	80038b0 <__errno>
 80008ba:	4602      	mov	r2, r0
 80008bc:	230c      	movs	r3, #12
 80008be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	e006      	b.n	80008d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <_sbrk+0x50>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a03      	ldr	r2, [pc, #12]	; (80008dc <_sbrk+0x50>)
 80008d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	20000228 	.word	0x20000228

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <SystemInit+0x28>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <SystemInit+0x28>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <SystemInit+0x28>)
 80008fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000914:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000916:	e003      	b.n	8000920 <LoopCopyDataInit>

08000918 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800091a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800091c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800091e:	3104      	adds	r1, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000924:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000926:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000928:	d3f6      	bcc.n	8000918 <CopyDataInit>
	ldr	r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopForever+0x12>)
	b	LoopFillZerobss
 800092c:	e002      	b.n	8000934 <LoopFillZerobss>

0800092e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800092e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000930:	f842 3b04 	str.w	r3, [r2], #4

08000934 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <LoopForever+0x16>)
	cmp	r2, r3
 8000936:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000938:	d3f9      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800093a:	f7ff ffd3 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f002 ffbd 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000942:	f7ff fca5 	bl	8000290 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000948:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800094c:	08004224 	.word	0x08004224
	ldr	r0, =_sdata
 8000950:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000954:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000958:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800095c:	20000228 	.word	0x20000228

08000960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_2_IRQHandler>
	...

08000964 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x28>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f92b 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f808 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff fe30 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x54>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x58>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f943 	bl	8000c3a <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f000 f90b 	bl	8000be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_InitTick+0x5c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000220 	.word	0x20000220

08000a18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000220 	.word	0x20000220

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b9c:	d301      	bcc.n	8000ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00f      	b.n	8000bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SysTick_Config+0x40>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000baa:	210f      	movs	r1, #15
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f7ff ff8e 	bl	8000ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SysTick_Config+0x40>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SysTick_Config+0x40>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff29 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff3e 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff8e 	bl	8000b24 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5d 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff31 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa2 	bl	8000b8c <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e037      	b.n	8000cd8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 f97e 	bl	8000fbc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}  
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_DMA_Start_IT+0x20>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e04a      	b.n	8000d96 <HAL_DMA_Start_IT+0xb6>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d13a      	bne.n	8000d88 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2202      	movs	r2, #2
 8000d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 0201 	bic.w	r2, r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 f912 	bl	8000f60 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d008      	beq.n	8000d56 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 020e 	orr.w	r2, r2, #14
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	e00f      	b.n	8000d76 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 020a 	orr.w	r2, r2, #10
 8000d64:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0204 	bic.w	r2, r2, #4
 8000d74:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 0201 	orr.w	r2, r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e005      	b.n	8000d94 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000d90:	2302      	movs	r3, #2
 8000d92:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d005      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2204      	movs	r2, #4
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e027      	b.n	8000e10 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 020e 	bic.w	r2, r2, #14
 8000dce:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de8:	2101      	movs	r1, #1
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	4798      	blx	r3
    } 
  }
  return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	2204      	movs	r2, #4
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d024      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x72>
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d01f      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d107      	bne.n	8000e6a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0204 	bic.w	r2, r2, #4
 8000e68:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e72:	2104      	movs	r1, #4
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d06a      	beq.n	8000f58 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e8a:	e065      	b.n	8000f58 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	2202      	movs	r2, #2
 8000e92:	409a      	lsls	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4013      	ands	r3, r2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d02c      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0xdc>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d027      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0320 	and.w	r3, r3, #32
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10b      	bne.n	8000ecc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 020a 	bic.w	r2, r2, #10
 8000ec2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d035      	beq.n	8000f58 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000ef4:	e030      	b.n	8000f58 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	2208      	movs	r2, #8
 8000efc:	409a      	lsls	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d028      	beq.n	8000f58 <HAL_DMA_IRQHandler+0x13e>
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d023      	beq.n	8000f58 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 020e 	bic.w	r2, r2, #14
 8000f1e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f28:	2101      	movs	r1, #1
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	4798      	blx	r3
    }
  }
}  
 8000f56:	e7ff      	b.n	8000f58 <HAL_DMA_IRQHandler+0x13e>
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d108      	bne.n	8000fa0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f9e:	e007      	b.n	8000fb0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	60da      	str	r2, [r3, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <DMA_CalcBaseAndBitshift+0x60>)
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d80f      	bhi.n	8000ff0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <DMA_CalcBaseAndBitshift+0x64>)
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <DMA_CalcBaseAndBitshift+0x68>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	009a      	lsls	r2, r3, #2
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <DMA_CalcBaseAndBitshift+0x6c>)
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000fee:	e00e      	b.n	800100e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <DMA_CalcBaseAndBitshift+0x70>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <DMA_CalcBaseAndBitshift+0x68>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	009a      	lsls	r2, r3, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <DMA_CalcBaseAndBitshift+0x74>)
 800100c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40020407 	.word	0x40020407
 8001020:	bffdfff8 	.word	0xbffdfff8
 8001024:	cccccccd 	.word	0xcccccccd
 8001028:	40020000 	.word	0x40020000
 800102c:	bffdfbf8 	.word	0xbffdfbf8
 8001030:	40020400 	.word	0x40020400

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e160      	b.n	8001306 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8152 	beq.w	8001300 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x38>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b12      	cmp	r3, #18
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	6939      	ldr	r1, [r7, #16]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d00b      	beq.n	8001108 <HAL_GPIO_Init+0xd4>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d007      	beq.n	8001108 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fc:	2b11      	cmp	r3, #17
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b12      	cmp	r3, #18
 8001106:	d130      	bne.n	800116a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113e:	2201      	movs	r2, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0201 	and.w	r2, r3, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80ac 	beq.w	8001300 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a8:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a5d      	ldr	r2, [pc, #372]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c0:	4a59      	ldr	r2, [pc, #356]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ea:	d025      	beq.n	8001238 <HAL_GPIO_Init+0x204>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x2f8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d01f      	beq.n	8001234 <HAL_GPIO_Init+0x200>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_GPIO_Init+0x2fc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d019      	beq.n	8001230 <HAL_GPIO_Init+0x1fc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x300>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <HAL_GPIO_Init+0x1f8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00d      	beq.n	8001228 <HAL_GPIO_Init+0x1f4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x308>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x1f0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x30c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d101      	bne.n	8001220 <HAL_GPIO_Init+0x1ec>
 800121c:	2306      	movs	r3, #6
 800121e:	e00c      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001220:	2307      	movs	r3, #7
 8001222:	e00a      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001224:	2305      	movs	r3, #5
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001228:	2304      	movs	r3, #4
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x206>
 800122c:	2303      	movs	r3, #3
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_GPIO_Init+0x310>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800127c:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_GPIO_Init+0x310>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_GPIO_Init+0x310>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a6:	4a27      	ldr	r2, [pc, #156]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae97 	bne.w	8001044 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48001000 	.word	0x48001000
 800133c:	48001400 	.word	0x48001400
 8001340:	48001800 	.word	0x48001800
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001364:	e002      	b.n	800136c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800137e:	af00      	add	r7, sp, #0
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	f000 bf01 	b.w	8002194 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8160 	beq.w	8001662 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013a2:	4bae      	ldr	r3, [pc, #696]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d00c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ae:	4bab      	ldr	r3, [pc, #684]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d159      	bne.n	800146e <HAL_RCC_OscConfig+0xf6>
 80013ba:	4ba8      	ldr	r3, [pc, #672]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c6:	d152      	bne.n	800146e <HAL_RCC_OscConfig+0xf6>
 80013c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_OscConfig+0x82>
 80013f4:	4b99      	ldr	r3, [pc, #612]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0xae>
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800140e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001412:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001416:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001422:	4b8e      	ldr	r3, [pc, #568]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800142a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800142e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001432:	fa92 f2a2 	rbit	r2, r2
 8001436:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800143a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800143e:	fab2 f282 	clz	r2, r2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	f002 021f 	and.w	r2, r2, #31
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8102 	beq.w	8001660 <HAL_RCC_OscConfig+0x2e8>
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80fc 	bne.w	8001660 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	f000 be93 	b.w	8002194 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x110>
 800147a:	4b78      	ldr	r3, [pc, #480]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a77      	ldr	r2, [pc, #476]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e030      	b.n	80014ea <HAL_RCC_OscConfig+0x172>
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x134>
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a71      	ldr	r2, [pc, #452]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 8001498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b6f      	ldr	r3, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6e      	ldr	r2, [pc, #440]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01e      	b.n	80014ea <HAL_RCC_OscConfig+0x172>
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x15a>
 80014b8:	4b68      	ldr	r3, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a67      	ldr	r2, [pc, #412]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b65      	ldr	r3, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a64      	ldr	r2, [pc, #400]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e00b      	b.n	80014ea <HAL_RCC_OscConfig+0x172>
 80014d2:	4b62      	ldr	r3, [pc, #392]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a61      	ldr	r2, [pc, #388]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a5e      	ldr	r2, [pc, #376]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80014e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d059      	beq.n	80015a8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fa90 	bl	8000a18 <HAL_GetTick>
 80014f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fe:	f7ff fa8b 	bl	8000a18 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d902      	bls.n	8001514 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	f000 be40 	b.w	8002194 <HAL_RCC_OscConfig+0xe1c>
 8001514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001518:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001528:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0x1ce>
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e015      	b.n	8001572 <HAL_RCC_OscConfig+0x1fa>
 8001546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800154a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800155a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001562:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001576:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800157a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800157e:	fa92 f2a2 	rbit	r2, r2
 8001582:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001586:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800158a:	fab2 f282 	clz	r2, r2
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f042 0220 	orr.w	r2, r2, #32
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	f002 021f 	and.w	r2, r2, #31
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f202 	lsl.w	r2, r1, r2
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0ab      	beq.n	80014fe <HAL_RCC_OscConfig+0x186>
 80015a6:	e05c      	b.n	8001662 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fa36 	bl	8000a18 <HAL_GetTick>
 80015ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff fa31 	bl	8000a18 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d902      	bls.n	80015c8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f000 bde6 	b.w	8002194 <HAL_RCC_OscConfig+0xe1c>
 80015c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80015dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <HAL_RCC_OscConfig+0x282>
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0x2ae>
 80015fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800160e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001612:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001616:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_RCC_OscConfig+0x2e4>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800162a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800162e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001632:	fa92 f2a2 	rbit	r2, r2
 8001636:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800163a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800163e:	fab2 f282 	clz	r2, r2
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f042 0220 	orr.w	r2, r2, #32
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f002 021f 	and.w	r2, r2, #31
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ab      	bne.n	80015b2 <HAL_RCC_OscConfig+0x23a>
 800165a:	e002      	b.n	8001662 <HAL_RCC_OscConfig+0x2ea>
 800165c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8170 	beq.w	8001952 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001672:	4bd0      	ldr	r3, [pc, #832]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00c      	beq.n	8001698 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800167e:	4bcd      	ldr	r3, [pc, #820]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b08      	cmp	r3, #8
 8001688:	d16d      	bne.n	8001766 <HAL_RCC_OscConfig+0x3ee>
 800168a:	4bca      	ldr	r3, [pc, #808]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001696:	d166      	bne.n	8001766 <HAL_RCC_OscConfig+0x3ee>
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80016aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	095b      	lsrs	r3, r3, #5
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <HAL_RCC_OscConfig+0x350>
 80016c2:	4bbc      	ldr	r3, [pc, #752]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	e013      	b.n	80016f0 <HAL_RCC_OscConfig+0x378>
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016ec:	4bb1      	ldr	r3, [pc, #708]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	2202      	movs	r2, #2
 80016f2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80016f6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80016fa:	fa92 f2a2 	rbit	r2, r2
 80016fe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001702:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001706:	fab2 f282 	clz	r2, r2
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	f042 0220 	orr.w	r2, r2, #32
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f002 021f 	and.w	r2, r2, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_RCC_OscConfig+0x3ba>
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d002      	beq.n	8001732 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	f000 bd31 	b.w	8002194 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4ba0      	ldr	r3, [pc, #640]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	21f8      	movs	r1, #248	; 0xf8
 8001742:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800174a:	fa91 f1a1 	rbit	r1, r1
 800174e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001752:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001756:	fab1 f181 	clz	r1, r1
 800175a:	b2c9      	uxtb	r1, r1
 800175c:	408b      	lsls	r3, r1
 800175e:	4995      	ldr	r1, [pc, #596]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001764:	e0f5      	b.n	8001952 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8085 	beq.w	800187c <HAL_RCC_OscConfig+0x504>
 8001772:	2301      	movs	r3, #1
 8001774:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001784:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001792:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	2301      	movs	r3, #1
 800179c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff f93b 	bl	8000a18 <HAL_GetTick>
 80017a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff f936 	bl	8000a18 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d902      	bls.n	80017be <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	f000 bceb 	b.w	8002194 <HAL_RCC_OscConfig+0xe1c>
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80017d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_OscConfig+0x476>
 80017e8:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	e013      	b.n	8001816 <HAL_RCC_OscConfig+0x49e>
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001806:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001812:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	2202      	movs	r2, #2
 8001818:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800181c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001820:	fa92 f2a2 	rbit	r2, r2
 8001824:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001828:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800182c:	fab2 f282 	clz	r2, r2
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f002 021f 	and.w	r2, r2, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0af      	beq.n	80017a8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	21f8      	movs	r1, #248	; 0xf8
 8001858:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001860:	fa91 f1a1 	rbit	r1, r1
 8001864:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001868:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800186c:	fab1 f181 	clz	r1, r1
 8001870:	b2c9      	uxtb	r1, r1
 8001872:	408b      	lsls	r3, r1
 8001874:	494f      	ldr	r1, [pc, #316]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
 800187a:	e06a      	b.n	8001952 <HAL_RCC_OscConfig+0x5da>
 800187c:	2301      	movs	r3, #1
 800187e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800188e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800189c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	461a      	mov	r2, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff f8b6 	bl	8000a18 <HAL_GetTick>
 80018ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff f8b1 	bl	8000a18 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d902      	bls.n	80018c8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	f000 bc66 	b.w	8002194 <HAL_RCC_OscConfig+0xe1c>
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80018da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	095b      	lsrs	r3, r3, #5
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d102      	bne.n	80018f8 <HAL_RCC_OscConfig+0x580>
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0x5a8>
 80018f8:	2302      	movs	r3, #2
 80018fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800190a:	2302      	movs	r3, #2
 800190c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001910:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_RCC_OscConfig+0x63c>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	2202      	movs	r2, #2
 8001922:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001926:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800192a:	fa92 f2a2 	rbit	r2, r2
 800192e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001932:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001936:	fab2 f282 	clz	r2, r2
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f042 0220 	orr.w	r2, r2, #32
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f002 021f 	and.w	r2, r2, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1af      	bne.n	80018b2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80da 	beq.w	8001b16 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d069      	beq.n	8001a40 <HAL_RCC_OscConfig+0x6c8>
 800196c:	2301      	movs	r3, #1
 800196e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800197e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_RCC_OscConfig+0x640>)
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	2301      	movs	r3, #1
 8001994:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff f83f 	bl	8000a18 <HAL_GetTick>
 800199a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	e00d      	b.n	80019bc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff f83a 	bl	8000a18 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d905      	bls.n	80019bc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e3ef      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
 80019b4:	40021000 	.word	0x40021000
 80019b8:	10908120 	.word	0x10908120
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019ec:	2202      	movs	r2, #2
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a00:	4ba4      	ldr	r3, [pc, #656]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a08:	2102      	movs	r1, #2
 8001a0a:	6019      	str	r1, [r3, #0]
 8001a0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f1a3 	rbit	r1, r3
 8001a16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a1a:	6019      	str	r1, [r3, #0]
  return result;
 8001a1c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0b0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x628>
 8001a3e:	e06a      	b.n	8001b16 <HAL_RCC_OscConfig+0x79e>
 8001a40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a56:	601a      	str	r2, [r3, #0]
  return result;
 8001a58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b8c      	ldr	r3, [pc, #560]	; (8001c98 <HAL_RCC_OscConfig+0x920>)
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7fe ffd1 	bl	8000a18 <HAL_GetTick>
 8001a76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7a:	e009      	b.n	8001a90 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7fe ffcc 	bl	8000a18 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e381      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
 8001a90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a94:	2202      	movs	r2, #2
 8001a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aac:	2202      	movs	r2, #2
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ad6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b6e      	ldr	r3, [pc, #440]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001adc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	6019      	str	r1, [r3, #0]
 8001ae4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f1a3 	rbit	r1, r3
 8001aee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001af2:	6019      	str	r1, [r3, #0]
  return result;
 8001af4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1b2      	bne.n	8001a7c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8157 	beq.w	8001dd4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d112      	bne.n	8001b5e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	4a55      	ldr	r2, [pc, #340]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	61d3      	str	r3, [r2, #28]
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <HAL_RCC_OscConfig+0x924>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d11a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6a:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_OscConfig+0x924>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a4b      	ldr	r2, [pc, #300]	; (8001c9c <HAL_RCC_OscConfig+0x924>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b76:	f7fe ff4f 	bl	8000a18 <HAL_GetTick>
 8001b7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	e009      	b.n	8001b94 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b80:	f7fe ff4a 	bl	8000a18 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b64      	cmp	r3, #100	; 0x64
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e2ff      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x924>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ef      	beq.n	8001b80 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x840>
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a39      	ldr	r2, [pc, #228]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e02f      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a0>
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x864>
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a33      	ldr	r2, [pc, #204]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a0>
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x888>
 8001be6:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a2a      	ldr	r2, [pc, #168]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a0>
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001c12:	f023 0304 	bic.w	r3, r3, #4
 8001c16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d06a      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7fe fef9 	bl	8000a18 <HAL_GetTick>
 8001c26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7fe fef4 	bl	8000a18 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e2a7      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
 8001c44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c48:	2202      	movs	r2, #2
 8001c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c60:	2202      	movs	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c72:	601a      	str	r2, [r3, #0]
  return result;
 8001c74:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x928>
 8001c8e:	4b01      	ldr	r3, [pc, #4]	; (8001c94 <HAL_RCC_OscConfig+0x91c>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	e013      	b.n	8001cbc <HAL_RCC_OscConfig+0x944>
 8001c94:	40021000 	.word	0x40021000
 8001c98:	10908120 	.word	0x10908120
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4bc0      	ldr	r3, [pc, #768]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	6011      	str	r1, [r2, #0]
 8001cc4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	fa92 f1a2 	rbit	r1, r2
 8001cce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cd2:	6011      	str	r1, [r2, #0]
  return result;
 8001cd4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	fab2 f282 	clz	r2, r2
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f002 021f 	and.w	r2, r2, #31
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d09a      	beq.n	8001c2c <HAL_RCC_OscConfig+0x8b4>
 8001cf6:	e063      	b.n	8001dc0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7fe fe8e 	bl	8000a18 <HAL_GetTick>
 8001cfc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe fe89 	bl	8000a18 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e23c      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
 8001d1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d1e:	2202      	movs	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d36:	2202      	movs	r2, #2
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d48:	601a      	str	r2, [r3, #0]
  return result;
 8001d4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_OscConfig+0x9f2>
 8001d64:	4b95      	ldr	r3, [pc, #596]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	e00d      	b.n	8001d86 <HAL_RCC_OscConfig+0xa0e>
 8001d6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d6e:	2202      	movs	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	6011      	str	r1, [r2, #0]
 8001d8e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fa92 f1a2 	rbit	r1, r2
 8001d98:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d9c:	6011      	str	r1, [r2, #0]
  return result;
 8001d9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f002 021f 	and.w	r2, r2, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1a0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dc0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a7b      	ldr	r2, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 81d9 	beq.w	8002192 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de0:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	f000 81a6 	beq.w	800213a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	f040 811e 	bne.w	8002036 <HAL_RCC_OscConfig+0xcbe>
 8001dfa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e12:	601a      	str	r2, [r3, #0]
  return result;
 8001e14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7fe fdf2 	bl	8000a18 <HAL_GetTick>
 8001e34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e38:	e009      	b.n	8001e4e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7fe fded 	bl	8000a18 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1a2      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
 8001e4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f2a3 	rbit	r2, r3
 8001e62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e66:	601a      	str	r2, [r3, #0]
  return result;
 8001e68:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0xb10>
 8001e82:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e01b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb48>
 8001e88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fa93 f2a3 	rbit	r2, r3
 8001e9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f2a3 	rbit	r2, r3
 8001eb6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ec4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ec8:	6011      	str	r1, [r2, #0]
 8001eca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	fa92 f1a2 	rbit	r1, r2
 8001ed4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ed8:	6011      	str	r1, [r2, #0]
  return result;
 8001eda:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f042 0220 	orr.w	r2, r2, #32
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f002 021f 	and.w	r2, r2, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d19e      	bne.n	8001e3a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f023 020f 	bic.w	r2, r3, #15
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	492c      	ldr	r1, [pc, #176]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6a19      	ldr	r1, [r3, #32]
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	4925      	ldr	r1, [pc, #148]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
 8001f2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f44:	601a      	str	r2, [r3, #0]
  return result;
 8001f46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f4a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2301      	movs	r3, #1
 8001f60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fd59 	bl	8000a18 <HAL_GetTick>
 8001f66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6a:	e009      	b.n	8001f80 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7fe fd54 	bl	8000a18 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e109      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
 8001f80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f98:	601a      	str	r2, [r3, #0]
  return result;
 8001f9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xc48>
 8001fb4:	4b01      	ldr	r3, [pc, #4]	; (8001fbc <HAL_RCC_OscConfig+0xc44>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	e01e      	b.n	8001ff8 <HAL_RCC_OscConfig+0xc80>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f2a3 	rbit	r2, r3
 8001fd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_RCC_OscConfig+0xe28>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ffc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002000:	6011      	str	r1, [r2, #0]
 8002002:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	fa92 f1a2 	rbit	r1, r2
 800200c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002010:	6011      	str	r1, [r2, #0]
  return result;
 8002012:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d09b      	beq.n	8001f6c <HAL_RCC_OscConfig+0xbf4>
 8002034:	e0ad      	b.n	8002192 <HAL_RCC_OscConfig+0xe1a>
 8002036:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800203a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800203e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800204e:	601a      	str	r2, [r3, #0]
  return result;
 8002050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002054:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002060:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	461a      	mov	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fcd4 	bl	8000a18 <HAL_GetTick>
 8002070:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	e009      	b.n	800208a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe fccf 	bl	8000a18 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e084      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
 800208a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020a2:	601a      	str	r2, [r3, #0]
  return result;
 80020a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_OscConfig+0xd4c>
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_RCC_OscConfig+0xe28>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e01b      	b.n	80020fc <HAL_RCC_OscConfig+0xd84>
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f107 0320 	add.w	r3, r7, #32
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f2a3 	rbit	r2, r3
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_RCC_OscConfig+0xe28>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f107 0214 	add.w	r2, r7, #20
 8002100:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002104:	6011      	str	r1, [r2, #0]
 8002106:	f107 0214 	add.w	r2, r7, #20
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	fa92 f1a2 	rbit	r1, r2
 8002110:	f107 0210 	add.w	r2, r7, #16
 8002114:	6011      	str	r1, [r2, #0]
  return result;
 8002116:	f107 0210 	add.w	r2, r7, #16
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d19e      	bne.n	8002076 <HAL_RCC_OscConfig+0xcfe>
 8002138:	e02b      	b.n	8002192 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e025      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_RCC_OscConfig+0xe28>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_OscConfig+0xe28>)
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002158:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800215c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	429a      	cmp	r2, r3
 8002168:	d111      	bne.n	800218e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800216a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800216e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002178:	429a      	cmp	r2, r3
 800217a:	d108      	bne.n	800218e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800217c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002180:	f003 020f 	and.w	r2, r3, #15
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800218a:	429a      	cmp	r2, r3
 800218c:	d001      	beq.n	8002192 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b09e      	sub	sp, #120	; 0x78
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e162      	b.n	8002482 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b90      	ldr	r3, [pc, #576]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d910      	bls.n	80021ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b8d      	ldr	r3, [pc, #564]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	498b      	ldr	r1, [pc, #556]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b89      	ldr	r3, [pc, #548]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e14a      	b.n	8002482 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b82      	ldr	r3, [pc, #520]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	497f      	ldr	r1, [pc, #508]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80dc 	beq.w	80023d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d13c      	bne.n	800229a <HAL_RCC_ClockConfig+0xf6>
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800222e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_RCC_ClockConfig+0xa6>
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	e00f      	b.n	800226a <HAL_RCC_ClockConfig+0xc6>
 800224a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800224e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	667b      	str	r3, [r7, #100]	; 0x64
 8002258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225c:	663b      	str	r3, [r7, #96]	; 0x60
 800225e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002266:	4b67      	ldr	r3, [pc, #412]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800226e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002272:	fa92 f2a2 	rbit	r2, r2
 8002276:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f042 0220 	orr.w	r2, r2, #32
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f002 021f 	and.w	r2, r2, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d17b      	bne.n	800238e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0f3      	b.n	8002482 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d13c      	bne.n	800231c <HAL_RCC_ClockConfig+0x178>
 80022a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_ClockConfig+0x128>
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e00f      	b.n	80022ec <HAL_RCC_ClockConfig+0x148>
 80022cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	647b      	str	r3, [r7, #68]	; 0x44
 80022da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
 80022e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e8:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80022f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f4:	fa92 f2a2 	rbit	r2, r2
 80022f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022fc:	fab2 f282 	clz	r2, r2
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f042 0220 	orr.w	r2, r2, #32
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f002 021f 	and.w	r2, r2, #31
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f202 	lsl.w	r2, r1, r2
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d13a      	bne.n	800238e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0b2      	b.n	8002482 <HAL_RCC_ClockConfig+0x2de>
 800231c:	2302      	movs	r3, #2
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_RCC_ClockConfig+0x1a0>
 800233e:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	e00d      	b.n	8002360 <HAL_RCC_ClockConfig+0x1bc>
 8002344:	2302      	movs	r3, #2
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	2302      	movs	r3, #2
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2202      	movs	r2, #2
 8002362:	61ba      	str	r2, [r7, #24]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	fa92 f2a2 	rbit	r2, r2
 800236a:	617a      	str	r2, [r7, #20]
  return result;
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	fab2 f282 	clz	r2, r2
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f042 0220 	orr.w	r2, r2, #32
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f002 021f 	and.w	r2, r2, #31
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f202 	lsl.w	r2, r1, r2
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e079      	b.n	8002482 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	491a      	ldr	r1, [pc, #104]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a0:	f7fe fb3a 	bl	8000a18 <HAL_GetTick>
 80023a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	e00a      	b.n	80023be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f7fe fb36 	bl	8000a18 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e061      	b.n	8002482 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 020c 	and.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1eb      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d214      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4906      	ldr	r1, [pc, #24]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e040      	b.n	8002482 <HAL_RCC_ClockConfig+0x2de>
 8002400:	40022000 	.word	0x40022000
 8002404:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_ClockConfig+0x2e8>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	491a      	ldr	r1, [pc, #104]	; (800248c <HAL_RCC_ClockConfig+0x2e8>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_RCC_ClockConfig+0x2e8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4912      	ldr	r1, [pc, #72]	; (800248c <HAL_RCC_ClockConfig+0x2e8>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002446:	f000 f829 	bl	800249c <HAL_RCC_GetSysClockFreq>
 800244a:	4601      	mov	r1, r0
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_RCC_ClockConfig+0x2e8>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002454:	22f0      	movs	r2, #240	; 0xf0
 8002456:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	fa92 f2a2 	rbit	r2, r2
 800245e:	60fa      	str	r2, [r7, #12]
  return result;
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	fab2 f282 	clz	r2, r2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	40d3      	lsrs	r3, r2
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x2ec>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	fa21 f303 	lsr.w	r3, r1, r3
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_RCC_ClockConfig+0x2f0>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_ClockConfig+0x2f4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fa88 	bl	8000990 <HAL_InitTick>
  
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3778      	adds	r7, #120	; 0x78
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	080041b0 	.word	0x080041b0
 8002494:	20000000 	.word	0x20000000
 8002498:	20000004 	.word	0x20000004

0800249c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b08b      	sub	sp, #44	; 0x2c
 80024a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d002      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x30>
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x36>
 80024ca:	e03f      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ce:	623b      	str	r3, [r7, #32]
      break;
 80024d0:	e03f      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	fa92 f2a2 	rbit	r2, r2
 80024e4:	607a      	str	r2, [r7, #4]
  return result;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	40d3      	lsrs	r3, r2
 80024f0:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	220f      	movs	r2, #15
 8002500:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	fa92 f2a2 	rbit	r2, r2
 8002508:	60fa      	str	r2, [r7, #12]
  return result;
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	40d3      	lsrs	r3, r2
 8002514:	4a15      	ldr	r2, [pc, #84]	; (800256c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	fbb2 f2f3 	udiv	r2, r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	e007      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fbb2 f2f3 	udiv	r2, r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fb02 f303 	mul.w	r3, r2, r3
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	623b      	str	r3, [r7, #32]
      break;
 800254a:	e002      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc8>)
 800254e:	623b      	str	r3, [r7, #32]
      break;
 8002550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002552:	6a3b      	ldr	r3, [r7, #32]
}
 8002554:	4618      	mov	r0, r3
 8002556:	372c      	adds	r7, #44	; 0x2c
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40021000 	.word	0x40021000
 8002564:	007a1200 	.word	0x007a1200
 8002568:	080041c8 	.word	0x080041c8
 800256c:	080041d8 	.word	0x080041d8

08002570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCC_GetHCLKFreq+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800258e:	f7ff ffef 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8002592:	4601      	mov	r1, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800259c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	603a      	str	r2, [r7, #0]
  return result;
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	40d3      	lsrs	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	080041c0 	.word	0x080041c0

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025d2:	f7ff ffcd 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025d6:	4601      	mov	r1, r0
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80025e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80025e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	fa92 f2a2 	rbit	r2, r2
 80025ec:	603a      	str	r2, [r7, #0]
  return result;
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	fab2 f282 	clz	r2, r2
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	40d3      	lsrs	r3, r2
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_RCC_GetPCLK2Freq+0x40>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	080041c0 	.word	0x080041c0

08002610 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b092      	sub	sp, #72	; 0x48
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80d7 	beq.w	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002634:	4b4e      	ldr	r3, [pc, #312]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10e      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4a4a      	ldr	r2, [pc, #296]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	61d3      	str	r3, [r2, #28]
 800264c:	4b48      	ldr	r3, [pc, #288]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b45      	ldr	r3, [pc, #276]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b42      	ldr	r3, [pc, #264]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a41      	ldr	r2, [pc, #260]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7fe f9cf 	bl	8000a18 <HAL_GetTick>
 800267a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	e008      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7fe f9cb 	bl	8000a18 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	d901      	bls.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1d6      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8084 	beq.w	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d07c      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026bc:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	461a      	mov	r2, r3
 80026e6:	2301      	movs	r3, #1
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	461a      	mov	r2, r3
 800270a:	2300      	movs	r3, #0
 800270c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002712:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d04b      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7fe f97b 	bl	8000a18 <HAL_GetTick>
 8002722:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7fe f977 	bl	8000a18 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e180      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800273c:	2302      	movs	r3, #2
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	61fb      	str	r3, [r7, #28]
  return result;
 8002754:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d108      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800276a:	4b01      	ldr	r3, [pc, #4]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	e00d      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002770:	40021000 	.word	0x40021000
 8002774:	40007000 	.word	0x40007000
 8002778:	10908100 	.word	0x10908100
 800277c:	2302      	movs	r3, #2
 800277e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	4ba0      	ldr	r3, [pc, #640]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2202      	movs	r2, #2
 800278e:	613a      	str	r2, [r7, #16]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	fa92 f2a2 	rbit	r2, r2
 8002796:	60fa      	str	r2, [r7, #12]
  return result;
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	fab2 f282 	clz	r2, r2
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	f002 021f 	and.w	r2, r2, #31
 80027aa:	2101      	movs	r1, #1
 80027ac:	fa01 f202 	lsl.w	r2, r1, r2
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0b7      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027b6:	4b95      	ldr	r3, [pc, #596]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4992      	ldr	r1, [pc, #584]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b8e      	ldr	r3, [pc, #568]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4a8d      	ldr	r2, [pc, #564]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f023 0203 	bic.w	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4985      	ldr	r1, [pc, #532]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002806:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	497e      	ldr	r1, [pc, #504]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002814:	4313      	orrs	r3, r2
 8002816:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002824:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	4976      	ldr	r1, [pc, #472]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002842:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f023 0210 	bic.w	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	496f      	ldr	r1, [pc, #444]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	4967      	ldr	r1, [pc, #412]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f023 0220 	bic.w	r2, r3, #32
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4960      	ldr	r1, [pc, #384]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800288c:	4313      	orrs	r3, r2
 800288e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800289c:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	4958      	ldr	r1, [pc, #352]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028ba:	4b54      	ldr	r3, [pc, #336]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4951      	ldr	r1, [pc, #324]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d8:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4949      	ldr	r1, [pc, #292]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028f6:	4b45      	ldr	r3, [pc, #276]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4942      	ldr	r1, [pc, #264]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002914:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	493a      	ldr	r1, [pc, #232]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	4933      	ldr	r1, [pc, #204]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002950:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295c:	492b      	ldr	r1, [pc, #172]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4924      	ldr	r1, [pc, #144]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800297c:	4313      	orrs	r3, r2
 800297e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800298c:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	491c      	ldr	r1, [pc, #112]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80029aa:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	4915      	ldr	r1, [pc, #84]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	490d      	ldr	r1, [pc, #52]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	4906      	ldr	r1, [pc, #24]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a04:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	e002      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	490b      	ldr	r1, [pc, #44]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a36:	4904      	ldr	r1, [pc, #16]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3748      	adds	r7, #72	; 0x48
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e040      	b.n	8002ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd fddc 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	; 0x24
 8002a78:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fab4 	bl	8002ff8 <UART_SetConfig>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e022      	b.n	8002ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fcc2 	bl	800342c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fd49 	bl	8003570 <UART_CheckIdleState>
 8002ade:	4603      	mov	r3, r0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	f040 8081 	bne.w	8002c04 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_UART_Transmit+0x26>
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e079      	b.n	8002c06 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Transmit+0x38>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e072      	b.n	8002c06 <HAL_UART_Transmit+0x11e>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b34:	f7fd ff70 	bl	8000a18 <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	88fa      	ldrh	r2, [r7, #6]
 8002b3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b52:	d108      	bne.n	8002b66 <HAL_UART_Transmit+0x7e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e003      	b.n	8002b6e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b6e:	e02d      	b.n	8002bcc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fd3d 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e03d      	b.n	8002c06 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	881a      	ldrh	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	e008      	b.n	8002bba <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1cb      	bne.n	8002b70 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2200      	movs	r2, #0
 8002be0:	2140      	movs	r1, #64	; 0x40
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fd09 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e009      	b.n	8002c06 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d164      	bne.n	8002cf0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_UART_Transmit_DMA+0x22>
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e05d      	b.n	8002cf2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_UART_Transmit_DMA+0x34>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e056      	b.n	8002cf2 <HAL_UART_Transmit_DMA+0xe2>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2221      	movs	r2, #33	; 0x21
 8002c6c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d02a      	beq.n	8002ccc <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c7a:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <HAL_UART_Transmit_DMA+0xec>)
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c82:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_UART_Transmit_DMA+0xf0>)
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_UART_Transmit_DMA+0xf4>)
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c92:	2200      	movs	r2, #0
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3328      	adds	r3, #40	; 0x28
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	f7fe f819 	bl	8000ce0 <HAL_DMA_Start_IT>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e012      	b.n	8002cf2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2240      	movs	r2, #64	; 0x40
 8002cd2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cea:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	0800375b 	.word	0x0800375b
 8002d00:	080037a9 	.word	0x080037a9
 8002d04:	080037c5 	.word	0x080037c5

08002d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d113      	bne.n	8002d60 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00e      	beq.n	8002d60 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8114 	beq.w	8002f7e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
      }
      return;
 8002d5e:	e10e      	b.n	8002f7e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80d6 	beq.w	8002f14 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80cb 	beq.w	8002f14 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <HAL_UART_IRQHandler+0x9e>
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <HAL_UART_IRQHandler+0xc6>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc6:	f043 0204 	orr.w	r2, r3, #4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00e      	beq.n	8002df6 <HAL_UART_IRQHandler+0xee>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2204      	movs	r2, #4
 8002de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dee:	f043 0202 	orr.w	r2, r3, #2
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d104      	bne.n	8002e14 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e20:	f043 0208 	orr.w	r2, r3, #8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00f      	beq.n	8002e52 <HAL_UART_IRQHandler+0x14a>
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8093 	beq.w	8002f82 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e84:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d004      	beq.n	8002e9e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d031      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fc3b 	bl	800371a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d123      	bne.n	8002efa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d013      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ece:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <HAL_UART_IRQHandler+0x288>)
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd ff61 	bl	8000d9e <HAL_DMA_Abort_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002eec:	4610      	mov	r0, r2
 8002eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	e00e      	b.n	8002f10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f862 	bl	8002fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	e00a      	b.n	8002f10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f85e 	bl	8002fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	e006      	b.n	8002f10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f85a 	bl	8002fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002f0e:	e038      	b.n	8002f82 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	bf00      	nop
    return;
 8002f12:	e036      	b.n	8002f82 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_UART_IRQHandler+0x232>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fcb1 	bl	800389a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f38:	e026      	b.n	8002f88 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d017      	beq.n	8002f86 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
    }
    return;
 8002f5e:	e012      	b.n	8002f86 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00e      	beq.n	8002f88 <HAL_UART_IRQHandler+0x280>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fc77 	bl	8003868 <UART_EndTransmit_IT>
    return;
 8002f7a:	bf00      	nop
 8002f7c:	e004      	b.n	8002f88 <HAL_UART_IRQHandler+0x280>
      return;
 8002f7e:	bf00      	nop
 8002f80:	e002      	b.n	8002f88 <HAL_UART_IRQHandler+0x280>
    return;
 8002f82:	bf00      	nop
 8002f84:	e000      	b.n	8002f88 <HAL_UART_IRQHandler+0x280>
    return;
 8002f86:	bf00      	nop
  }

}
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	0800383d 	.word	0x0800383d

08002f94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fdc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4313      	orrs	r3, r2
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4bac      	ldr	r3, [pc, #688]	; (80032d8 <UART_SetConfig+0x2e0>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	6939      	ldr	r1, [r7, #16]
 8003030:	430b      	orrs	r3, r1
 8003032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a9a      	ldr	r2, [pc, #616]	; (80032dc <UART_SetConfig+0x2e4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d121      	bne.n	80030bc <UART_SetConfig+0xc4>
 8003078:	4b99      	ldr	r3, [pc, #612]	; (80032e0 <UART_SetConfig+0x2e8>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b03      	cmp	r3, #3
 8003082:	d817      	bhi.n	80030b4 <UART_SetConfig+0xbc>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <UART_SetConfig+0x94>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030a9 	.word	0x080030a9
 8003094:	080030af 	.word	0x080030af
 8003098:	080030a3 	.word	0x080030a3
 800309c:	2301      	movs	r3, #1
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e0b2      	b.n	8003208 <UART_SetConfig+0x210>
 80030a2:	2302      	movs	r3, #2
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e0af      	b.n	8003208 <UART_SetConfig+0x210>
 80030a8:	2304      	movs	r3, #4
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e0ac      	b.n	8003208 <UART_SetConfig+0x210>
 80030ae:	2308      	movs	r3, #8
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e0a9      	b.n	8003208 <UART_SetConfig+0x210>
 80030b4:	2310      	movs	r3, #16
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	bf00      	nop
 80030ba:	e0a5      	b.n	8003208 <UART_SetConfig+0x210>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a88      	ldr	r2, [pc, #544]	; (80032e4 <UART_SetConfig+0x2ec>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d123      	bne.n	800310e <UART_SetConfig+0x116>
 80030c6:	4b86      	ldr	r3, [pc, #536]	; (80032e0 <UART_SetConfig+0x2e8>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d2:	d012      	beq.n	80030fa <UART_SetConfig+0x102>
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d8:	d802      	bhi.n	80030e0 <UART_SetConfig+0xe8>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <UART_SetConfig+0xf6>
 80030de:	e012      	b.n	8003106 <UART_SetConfig+0x10e>
 80030e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030e4:	d00c      	beq.n	8003100 <UART_SetConfig+0x108>
 80030e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030ea:	d003      	beq.n	80030f4 <UART_SetConfig+0xfc>
 80030ec:	e00b      	b.n	8003106 <UART_SetConfig+0x10e>
 80030ee:	2300      	movs	r3, #0
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e089      	b.n	8003208 <UART_SetConfig+0x210>
 80030f4:	2302      	movs	r3, #2
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e086      	b.n	8003208 <UART_SetConfig+0x210>
 80030fa:	2304      	movs	r3, #4
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e083      	b.n	8003208 <UART_SetConfig+0x210>
 8003100:	2308      	movs	r3, #8
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e080      	b.n	8003208 <UART_SetConfig+0x210>
 8003106:	2310      	movs	r3, #16
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	bf00      	nop
 800310c:	e07c      	b.n	8003208 <UART_SetConfig+0x210>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a75      	ldr	r2, [pc, #468]	; (80032e8 <UART_SetConfig+0x2f0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d123      	bne.n	8003160 <UART_SetConfig+0x168>
 8003118:	4b71      	ldr	r3, [pc, #452]	; (80032e0 <UART_SetConfig+0x2e8>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003124:	d012      	beq.n	800314c <UART_SetConfig+0x154>
 8003126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800312a:	d802      	bhi.n	8003132 <UART_SetConfig+0x13a>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <UART_SetConfig+0x148>
 8003130:	e012      	b.n	8003158 <UART_SetConfig+0x160>
 8003132:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003136:	d00c      	beq.n	8003152 <UART_SetConfig+0x15a>
 8003138:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800313c:	d003      	beq.n	8003146 <UART_SetConfig+0x14e>
 800313e:	e00b      	b.n	8003158 <UART_SetConfig+0x160>
 8003140:	2300      	movs	r3, #0
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e060      	b.n	8003208 <UART_SetConfig+0x210>
 8003146:	2302      	movs	r3, #2
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e05d      	b.n	8003208 <UART_SetConfig+0x210>
 800314c:	2304      	movs	r3, #4
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e05a      	b.n	8003208 <UART_SetConfig+0x210>
 8003152:	2308      	movs	r3, #8
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e057      	b.n	8003208 <UART_SetConfig+0x210>
 8003158:	2310      	movs	r3, #16
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	bf00      	nop
 800315e:	e053      	b.n	8003208 <UART_SetConfig+0x210>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a61      	ldr	r2, [pc, #388]	; (80032ec <UART_SetConfig+0x2f4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d123      	bne.n	80031b2 <UART_SetConfig+0x1ba>
 800316a:	4b5d      	ldr	r3, [pc, #372]	; (80032e0 <UART_SetConfig+0x2e8>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003176:	d012      	beq.n	800319e <UART_SetConfig+0x1a6>
 8003178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317c:	d802      	bhi.n	8003184 <UART_SetConfig+0x18c>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <UART_SetConfig+0x19a>
 8003182:	e012      	b.n	80031aa <UART_SetConfig+0x1b2>
 8003184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003188:	d00c      	beq.n	80031a4 <UART_SetConfig+0x1ac>
 800318a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800318e:	d003      	beq.n	8003198 <UART_SetConfig+0x1a0>
 8003190:	e00b      	b.n	80031aa <UART_SetConfig+0x1b2>
 8003192:	2300      	movs	r3, #0
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e037      	b.n	8003208 <UART_SetConfig+0x210>
 8003198:	2302      	movs	r3, #2
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e034      	b.n	8003208 <UART_SetConfig+0x210>
 800319e:	2304      	movs	r3, #4
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	e031      	b.n	8003208 <UART_SetConfig+0x210>
 80031a4:	2308      	movs	r3, #8
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e02e      	b.n	8003208 <UART_SetConfig+0x210>
 80031aa:	2310      	movs	r3, #16
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	bf00      	nop
 80031b0:	e02a      	b.n	8003208 <UART_SetConfig+0x210>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4e      	ldr	r2, [pc, #312]	; (80032f0 <UART_SetConfig+0x2f8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d123      	bne.n	8003204 <UART_SetConfig+0x20c>
 80031bc:	4b48      	ldr	r3, [pc, #288]	; (80032e0 <UART_SetConfig+0x2e8>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c8:	d012      	beq.n	80031f0 <UART_SetConfig+0x1f8>
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ce:	d802      	bhi.n	80031d6 <UART_SetConfig+0x1de>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <UART_SetConfig+0x1ec>
 80031d4:	e012      	b.n	80031fc <UART_SetConfig+0x204>
 80031d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031da:	d00c      	beq.n	80031f6 <UART_SetConfig+0x1fe>
 80031dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e0:	d003      	beq.n	80031ea <UART_SetConfig+0x1f2>
 80031e2:	e00b      	b.n	80031fc <UART_SetConfig+0x204>
 80031e4:	2300      	movs	r3, #0
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e00e      	b.n	8003208 <UART_SetConfig+0x210>
 80031ea:	2302      	movs	r3, #2
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e00b      	b.n	8003208 <UART_SetConfig+0x210>
 80031f0:	2304      	movs	r3, #4
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e008      	b.n	8003208 <UART_SetConfig+0x210>
 80031f6:	2308      	movs	r3, #8
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e005      	b.n	8003208 <UART_SetConfig+0x210>
 80031fc:	2310      	movs	r3, #16
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	bf00      	nop
 8003202:	e001      	b.n	8003208 <UART_SetConfig+0x210>
 8003204:	2310      	movs	r3, #16
 8003206:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003210:	f040 8090 	bne.w	8003334 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003214:	7ffb      	ldrb	r3, [r7, #31]
 8003216:	2b08      	cmp	r3, #8
 8003218:	d86c      	bhi.n	80032f4 <UART_SetConfig+0x2fc>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <UART_SetConfig+0x228>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003245 	.word	0x08003245
 8003224:	08003265 	.word	0x08003265
 8003228:	08003285 	.word	0x08003285
 800322c:	080032f5 	.word	0x080032f5
 8003230:	080032a1 	.word	0x080032a1
 8003234:	080032f5 	.word	0x080032f5
 8003238:	080032f5 	.word	0x080032f5
 800323c:	080032f5 	.word	0x080032f5
 8003240:	080032c1 	.word	0x080032c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7ff f9a0 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8003248:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	005a      	lsls	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	b29b      	uxth	r3, r3
 8003260:	61bb      	str	r3, [r7, #24]
        break;
 8003262:	e04a      	b.n	80032fa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7ff f9b2 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8003268:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	005a      	lsls	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	b29b      	uxth	r3, r3
 8003280:	61bb      	str	r3, [r7, #24]
        break;
 8003282:	e03a      	b.n	80032fa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800328e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6852      	ldr	r2, [r2, #4]
 8003296:	fbb3 f3f2 	udiv	r3, r3, r2
 800329a:	b29b      	uxth	r3, r3
 800329c:	61bb      	str	r3, [r7, #24]
        break;
 800329e:	e02c      	b.n	80032fa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a0:	f7ff f8fc 	bl	800249c <HAL_RCC_GetSysClockFreq>
 80032a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	005a      	lsls	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	61bb      	str	r3, [r7, #24]
        break;
 80032be:	e01c      	b.n	80032fa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	61bb      	str	r3, [r7, #24]
        break;
 80032d6:	e010      	b.n	80032fa <UART_SetConfig+0x302>
 80032d8:	efff69f3 	.word	0xefff69f3
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40004400 	.word	0x40004400
 80032e8:	40004800 	.word	0x40004800
 80032ec:	40004c00 	.word	0x40004c00
 80032f0:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
        break;
 80032f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d916      	bls.n	800332e <UART_SetConfig+0x336>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d212      	bcs.n	800332e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f023 030f 	bic.w	r3, r3, #15
 8003310:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	b29a      	uxth	r2, r3
 800331e:	897b      	ldrh	r3, [r7, #10]
 8003320:	4313      	orrs	r3, r2
 8003322:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	897a      	ldrh	r2, [r7, #10]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e072      	b.n	8003414 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
 8003332:	e06f      	b.n	8003414 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003334:	7ffb      	ldrb	r3, [r7, #31]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d85b      	bhi.n	80033f2 <UART_SetConfig+0x3fa>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x348>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003365 	.word	0x08003365
 8003344:	08003383 	.word	0x08003383
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080033f3 	.word	0x080033f3
 8003350:	080033bd 	.word	0x080033bd
 8003354:	080033f3 	.word	0x080033f3
 8003358:	080033f3 	.word	0x080033f3
 800335c:	080033f3 	.word	0x080033f3
 8003360:	080033db 	.word	0x080033db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7ff f910 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8003368:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	085a      	lsrs	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	441a      	add	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	b29b      	uxth	r3, r3
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e03a      	b.n	80033f8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003382:	f7ff f923 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8003386:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	085a      	lsrs	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	441a      	add	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	b29b      	uxth	r3, r3
 800339c:	61bb      	str	r3, [r7, #24]
        break;
 800339e:	e02b      	b.n	80033f8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80033aa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6852      	ldr	r2, [r2, #4]
 80033b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	61bb      	str	r3, [r7, #24]
        break;
 80033ba:	e01d      	b.n	80033f8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033bc:	f7ff f86e 	bl	800249c <HAL_RCC_GetSysClockFreq>
 80033c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	085a      	lsrs	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	441a      	add	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	61bb      	str	r3, [r7, #24]
        break;
 80033d8:	e00e      	b.n	80033f8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	61bb      	str	r3, [r7, #24]
        break;
 80033f0:	e002      	b.n	80033f8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
        break;
 80033f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d908      	bls.n	8003410 <UART_SetConfig+0x418>
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003404:	d204      	bcs.n	8003410 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e001      	b.n	8003414 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop

0800342c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01a      	beq.n	8003542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352a:	d10a      	bne.n	8003542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af02      	add	r7, sp, #8
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800357e:	f7fd fa4b 	bl	8000a18 <HAL_GetTick>
 8003582:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b08      	cmp	r3, #8
 8003590:	d10e      	bne.n	80035b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003592:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f82a 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e020      	b.n	80035f2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d10e      	bne.n	80035dc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f814 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e00a      	b.n	80035f2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	e05d      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d059      	beq.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003614:	f7fd fa00 	bl	8000a18 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	429a      	cmp	r2, r3
 8003622:	d302      	bcc.n	800362a <UART_WaitOnFlagUntilTimeout+0x30>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11b      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003638:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e042      	b.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02b      	beq.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367e:	d123      	bne.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003688:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003698:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e00f      	b.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4013      	ands	r3, r2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d092      	beq.n	800360c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003706:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003730:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b20      	cmp	r3, #32
 800376e:	d014      	beq.n	800379a <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003786:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003796:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003798:	e002      	b.n	80037a0 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff fbfa 	bl	8002f94 <HAL_UART_TxCpltCallback>
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fbf6 	bl	8002fa8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b80      	cmp	r3, #128	; 0x80
 80037ea:	d109      	bne.n	8003800 <UART_DMAError+0x3c>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b21      	cmp	r3, #33	; 0x21
 80037f0:	d106      	bne.n	8003800 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff78 	bl	80036f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d109      	bne.n	8003822 <UART_DMAError+0x5e>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b22      	cmp	r3, #34	; 0x22
 8003812:	d106      	bne.n	8003822 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2200      	movs	r2, #0
 8003818:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800381c:	6978      	ldr	r0, [r7, #20]
 800381e:	f7ff ff7c 	bl	800371a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	f043 0210 	orr.w	r2, r3, #16
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800382e:	6978      	ldr	r0, [r7, #20]
 8003830:	f7ff fbc4 	bl	8002fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003834:	bf00      	nop
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f7ff fbae 	bl	8002fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fb81 	bl	8002f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <__errno>:
 80038b0:	4b01      	ldr	r3, [pc, #4]	; (80038b8 <__errno+0x8>)
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	2000000c 	.word	0x2000000c

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4e0d      	ldr	r6, [pc, #52]	; (80038f4 <__libc_init_array+0x38>)
 80038c0:	4c0d      	ldr	r4, [pc, #52]	; (80038f8 <__libc_init_array+0x3c>)
 80038c2:	1ba4      	subs	r4, r4, r6
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2500      	movs	r5, #0
 80038c8:	42a5      	cmp	r5, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	4e0b      	ldr	r6, [pc, #44]	; (80038fc <__libc_init_array+0x40>)
 80038ce:	4c0c      	ldr	r4, [pc, #48]	; (8003900 <__libc_init_array+0x44>)
 80038d0:	f000 fc26 	bl	8004120 <_init>
 80038d4:	1ba4      	subs	r4, r4, r6
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	2500      	movs	r5, #0
 80038da:	42a5      	cmp	r5, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038e4:	4798      	blx	r3
 80038e6:	3501      	adds	r5, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ee:	4798      	blx	r3
 80038f0:	3501      	adds	r5, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	0800421c 	.word	0x0800421c
 80038f8:	0800421c 	.word	0x0800421c
 80038fc:	0800421c 	.word	0x0800421c
 8003900:	08004220 	.word	0x08004220

08003904 <memset>:
 8003904:	4402      	add	r2, r0
 8003906:	4603      	mov	r3, r0
 8003908:	4293      	cmp	r3, r2
 800390a:	d100      	bne.n	800390e <memset+0xa>
 800390c:	4770      	bx	lr
 800390e:	f803 1b01 	strb.w	r1, [r3], #1
 8003912:	e7f9      	b.n	8003908 <memset+0x4>

08003914 <siprintf>:
 8003914:	b40e      	push	{r1, r2, r3}
 8003916:	b500      	push	{lr}
 8003918:	b09c      	sub	sp, #112	; 0x70
 800391a:	ab1d      	add	r3, sp, #116	; 0x74
 800391c:	9002      	str	r0, [sp, #8]
 800391e:	9006      	str	r0, [sp, #24]
 8003920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003924:	4809      	ldr	r0, [pc, #36]	; (800394c <siprintf+0x38>)
 8003926:	9107      	str	r1, [sp, #28]
 8003928:	9104      	str	r1, [sp, #16]
 800392a:	4909      	ldr	r1, [pc, #36]	; (8003950 <siprintf+0x3c>)
 800392c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003930:	9105      	str	r1, [sp, #20]
 8003932:	6800      	ldr	r0, [r0, #0]
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	a902      	add	r1, sp, #8
 8003938:	f000 f866 	bl	8003a08 <_svfiprintf_r>
 800393c:	9b02      	ldr	r3, [sp, #8]
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	b01c      	add	sp, #112	; 0x70
 8003944:	f85d eb04 	ldr.w	lr, [sp], #4
 8003948:	b003      	add	sp, #12
 800394a:	4770      	bx	lr
 800394c:	2000000c 	.word	0x2000000c
 8003950:	ffff0208 	.word	0xffff0208

08003954 <__ssputs_r>:
 8003954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003958:	688e      	ldr	r6, [r1, #8]
 800395a:	429e      	cmp	r6, r3
 800395c:	4682      	mov	sl, r0
 800395e:	460c      	mov	r4, r1
 8003960:	4690      	mov	r8, r2
 8003962:	4699      	mov	r9, r3
 8003964:	d837      	bhi.n	80039d6 <__ssputs_r+0x82>
 8003966:	898a      	ldrh	r2, [r1, #12]
 8003968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800396c:	d031      	beq.n	80039d2 <__ssputs_r+0x7e>
 800396e:	6825      	ldr	r5, [r4, #0]
 8003970:	6909      	ldr	r1, [r1, #16]
 8003972:	1a6f      	subs	r7, r5, r1
 8003974:	6965      	ldr	r5, [r4, #20]
 8003976:	2302      	movs	r3, #2
 8003978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800397c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003980:	f109 0301 	add.w	r3, r9, #1
 8003984:	443b      	add	r3, r7
 8003986:	429d      	cmp	r5, r3
 8003988:	bf38      	it	cc
 800398a:	461d      	movcc	r5, r3
 800398c:	0553      	lsls	r3, r2, #21
 800398e:	d530      	bpl.n	80039f2 <__ssputs_r+0x9e>
 8003990:	4629      	mov	r1, r5
 8003992:	f000 fb2b 	bl	8003fec <_malloc_r>
 8003996:	4606      	mov	r6, r0
 8003998:	b950      	cbnz	r0, 80039b0 <__ssputs_r+0x5c>
 800399a:	230c      	movs	r3, #12
 800399c:	f8ca 3000 	str.w	r3, [sl]
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a6:	81a3      	strh	r3, [r4, #12]
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b0:	463a      	mov	r2, r7
 80039b2:	6921      	ldr	r1, [r4, #16]
 80039b4:	f000 faa8 	bl	8003f08 <memcpy>
 80039b8:	89a3      	ldrh	r3, [r4, #12]
 80039ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c2:	81a3      	strh	r3, [r4, #12]
 80039c4:	6126      	str	r6, [r4, #16]
 80039c6:	6165      	str	r5, [r4, #20]
 80039c8:	443e      	add	r6, r7
 80039ca:	1bed      	subs	r5, r5, r7
 80039cc:	6026      	str	r6, [r4, #0]
 80039ce:	60a5      	str	r5, [r4, #8]
 80039d0:	464e      	mov	r6, r9
 80039d2:	454e      	cmp	r6, r9
 80039d4:	d900      	bls.n	80039d8 <__ssputs_r+0x84>
 80039d6:	464e      	mov	r6, r9
 80039d8:	4632      	mov	r2, r6
 80039da:	4641      	mov	r1, r8
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	f000 fa9e 	bl	8003f1e <memmove>
 80039e2:	68a3      	ldr	r3, [r4, #8]
 80039e4:	1b9b      	subs	r3, r3, r6
 80039e6:	60a3      	str	r3, [r4, #8]
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	441e      	add	r6, r3
 80039ec:	6026      	str	r6, [r4, #0]
 80039ee:	2000      	movs	r0, #0
 80039f0:	e7dc      	b.n	80039ac <__ssputs_r+0x58>
 80039f2:	462a      	mov	r2, r5
 80039f4:	f000 fb54 	bl	80040a0 <_realloc_r>
 80039f8:	4606      	mov	r6, r0
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d1e2      	bne.n	80039c4 <__ssputs_r+0x70>
 80039fe:	6921      	ldr	r1, [r4, #16]
 8003a00:	4650      	mov	r0, sl
 8003a02:	f000 faa5 	bl	8003f50 <_free_r>
 8003a06:	e7c8      	b.n	800399a <__ssputs_r+0x46>

08003a08 <_svfiprintf_r>:
 8003a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0c:	461d      	mov	r5, r3
 8003a0e:	898b      	ldrh	r3, [r1, #12]
 8003a10:	061f      	lsls	r7, r3, #24
 8003a12:	b09d      	sub	sp, #116	; 0x74
 8003a14:	4680      	mov	r8, r0
 8003a16:	460c      	mov	r4, r1
 8003a18:	4616      	mov	r6, r2
 8003a1a:	d50f      	bpl.n	8003a3c <_svfiprintf_r+0x34>
 8003a1c:	690b      	ldr	r3, [r1, #16]
 8003a1e:	b96b      	cbnz	r3, 8003a3c <_svfiprintf_r+0x34>
 8003a20:	2140      	movs	r1, #64	; 0x40
 8003a22:	f000 fae3 	bl	8003fec <_malloc_r>
 8003a26:	6020      	str	r0, [r4, #0]
 8003a28:	6120      	str	r0, [r4, #16]
 8003a2a:	b928      	cbnz	r0, 8003a38 <_svfiprintf_r+0x30>
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	f8c8 3000 	str.w	r3, [r8]
 8003a32:	f04f 30ff 	mov.w	r0, #4294967295
 8003a36:	e0c8      	b.n	8003bca <_svfiprintf_r+0x1c2>
 8003a38:	2340      	movs	r3, #64	; 0x40
 8003a3a:	6163      	str	r3, [r4, #20]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a40:	2320      	movs	r3, #32
 8003a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a46:	2330      	movs	r3, #48	; 0x30
 8003a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a4c:	9503      	str	r5, [sp, #12]
 8003a4e:	f04f 0b01 	mov.w	fp, #1
 8003a52:	4637      	mov	r7, r6
 8003a54:	463d      	mov	r5, r7
 8003a56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a5a:	b10b      	cbz	r3, 8003a60 <_svfiprintf_r+0x58>
 8003a5c:	2b25      	cmp	r3, #37	; 0x25
 8003a5e:	d13e      	bne.n	8003ade <_svfiprintf_r+0xd6>
 8003a60:	ebb7 0a06 	subs.w	sl, r7, r6
 8003a64:	d00b      	beq.n	8003a7e <_svfiprintf_r+0x76>
 8003a66:	4653      	mov	r3, sl
 8003a68:	4632      	mov	r2, r6
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	4640      	mov	r0, r8
 8003a6e:	f7ff ff71 	bl	8003954 <__ssputs_r>
 8003a72:	3001      	adds	r0, #1
 8003a74:	f000 80a4 	beq.w	8003bc0 <_svfiprintf_r+0x1b8>
 8003a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7a:	4453      	add	r3, sl
 8003a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a7e:	783b      	ldrb	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 809d 	beq.w	8003bc0 <_svfiprintf_r+0x1b8>
 8003a86:	2300      	movs	r3, #0
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a90:	9304      	str	r3, [sp, #16]
 8003a92:	9307      	str	r3, [sp, #28]
 8003a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a98:	931a      	str	r3, [sp, #104]	; 0x68
 8003a9a:	462f      	mov	r7, r5
 8003a9c:	2205      	movs	r2, #5
 8003a9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003aa2:	4850      	ldr	r0, [pc, #320]	; (8003be4 <_svfiprintf_r+0x1dc>)
 8003aa4:	f7fc fba4 	bl	80001f0 <memchr>
 8003aa8:	9b04      	ldr	r3, [sp, #16]
 8003aaa:	b9d0      	cbnz	r0, 8003ae2 <_svfiprintf_r+0xda>
 8003aac:	06d9      	lsls	r1, r3, #27
 8003aae:	bf44      	itt	mi
 8003ab0:	2220      	movmi	r2, #32
 8003ab2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ab6:	071a      	lsls	r2, r3, #28
 8003ab8:	bf44      	itt	mi
 8003aba:	222b      	movmi	r2, #43	; 0x2b
 8003abc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ac0:	782a      	ldrb	r2, [r5, #0]
 8003ac2:	2a2a      	cmp	r2, #42	; 0x2a
 8003ac4:	d015      	beq.n	8003af2 <_svfiprintf_r+0xea>
 8003ac6:	9a07      	ldr	r2, [sp, #28]
 8003ac8:	462f      	mov	r7, r5
 8003aca:	2000      	movs	r0, #0
 8003acc:	250a      	movs	r5, #10
 8003ace:	4639      	mov	r1, r7
 8003ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ad4:	3b30      	subs	r3, #48	; 0x30
 8003ad6:	2b09      	cmp	r3, #9
 8003ad8:	d94d      	bls.n	8003b76 <_svfiprintf_r+0x16e>
 8003ada:	b1b8      	cbz	r0, 8003b0c <_svfiprintf_r+0x104>
 8003adc:	e00f      	b.n	8003afe <_svfiprintf_r+0xf6>
 8003ade:	462f      	mov	r7, r5
 8003ae0:	e7b8      	b.n	8003a54 <_svfiprintf_r+0x4c>
 8003ae2:	4a40      	ldr	r2, [pc, #256]	; (8003be4 <_svfiprintf_r+0x1dc>)
 8003ae4:	1a80      	subs	r0, r0, r2
 8003ae6:	fa0b f000 	lsl.w	r0, fp, r0
 8003aea:	4318      	orrs	r0, r3
 8003aec:	9004      	str	r0, [sp, #16]
 8003aee:	463d      	mov	r5, r7
 8003af0:	e7d3      	b.n	8003a9a <_svfiprintf_r+0x92>
 8003af2:	9a03      	ldr	r2, [sp, #12]
 8003af4:	1d11      	adds	r1, r2, #4
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	9103      	str	r1, [sp, #12]
 8003afa:	2a00      	cmp	r2, #0
 8003afc:	db01      	blt.n	8003b02 <_svfiprintf_r+0xfa>
 8003afe:	9207      	str	r2, [sp, #28]
 8003b00:	e004      	b.n	8003b0c <_svfiprintf_r+0x104>
 8003b02:	4252      	negs	r2, r2
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	9207      	str	r2, [sp, #28]
 8003b0a:	9304      	str	r3, [sp, #16]
 8003b0c:	783b      	ldrb	r3, [r7, #0]
 8003b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b10:	d10c      	bne.n	8003b2c <_svfiprintf_r+0x124>
 8003b12:	787b      	ldrb	r3, [r7, #1]
 8003b14:	2b2a      	cmp	r3, #42	; 0x2a
 8003b16:	d133      	bne.n	8003b80 <_svfiprintf_r+0x178>
 8003b18:	9b03      	ldr	r3, [sp, #12]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	9203      	str	r2, [sp, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bfb8      	it	lt
 8003b24:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b28:	3702      	adds	r7, #2
 8003b2a:	9305      	str	r3, [sp, #20]
 8003b2c:	4d2e      	ldr	r5, [pc, #184]	; (8003be8 <_svfiprintf_r+0x1e0>)
 8003b2e:	7839      	ldrb	r1, [r7, #0]
 8003b30:	2203      	movs	r2, #3
 8003b32:	4628      	mov	r0, r5
 8003b34:	f7fc fb5c 	bl	80001f0 <memchr>
 8003b38:	b138      	cbz	r0, 8003b4a <_svfiprintf_r+0x142>
 8003b3a:	2340      	movs	r3, #64	; 0x40
 8003b3c:	1b40      	subs	r0, r0, r5
 8003b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b42:	9b04      	ldr	r3, [sp, #16]
 8003b44:	4303      	orrs	r3, r0
 8003b46:	3701      	adds	r7, #1
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	7839      	ldrb	r1, [r7, #0]
 8003b4c:	4827      	ldr	r0, [pc, #156]	; (8003bec <_svfiprintf_r+0x1e4>)
 8003b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b52:	2206      	movs	r2, #6
 8003b54:	1c7e      	adds	r6, r7, #1
 8003b56:	f7fc fb4b 	bl	80001f0 <memchr>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d038      	beq.n	8003bd0 <_svfiprintf_r+0x1c8>
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <_svfiprintf_r+0x1e8>)
 8003b60:	bb13      	cbnz	r3, 8003ba8 <_svfiprintf_r+0x1a0>
 8003b62:	9b03      	ldr	r3, [sp, #12]
 8003b64:	3307      	adds	r3, #7
 8003b66:	f023 0307 	bic.w	r3, r3, #7
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	9303      	str	r3, [sp, #12]
 8003b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b70:	444b      	add	r3, r9
 8003b72:	9309      	str	r3, [sp, #36]	; 0x24
 8003b74:	e76d      	b.n	8003a52 <_svfiprintf_r+0x4a>
 8003b76:	fb05 3202 	mla	r2, r5, r2, r3
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	460f      	mov	r7, r1
 8003b7e:	e7a6      	b.n	8003ace <_svfiprintf_r+0xc6>
 8003b80:	2300      	movs	r3, #0
 8003b82:	3701      	adds	r7, #1
 8003b84:	9305      	str	r3, [sp, #20]
 8003b86:	4619      	mov	r1, r3
 8003b88:	250a      	movs	r5, #10
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b90:	3a30      	subs	r2, #48	; 0x30
 8003b92:	2a09      	cmp	r2, #9
 8003b94:	d903      	bls.n	8003b9e <_svfiprintf_r+0x196>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0c8      	beq.n	8003b2c <_svfiprintf_r+0x124>
 8003b9a:	9105      	str	r1, [sp, #20]
 8003b9c:	e7c6      	b.n	8003b2c <_svfiprintf_r+0x124>
 8003b9e:	fb05 2101 	mla	r1, r5, r1, r2
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	e7f0      	b.n	8003b8a <_svfiprintf_r+0x182>
 8003ba8:	ab03      	add	r3, sp, #12
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	4622      	mov	r2, r4
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <_svfiprintf_r+0x1ec>)
 8003bb0:	a904      	add	r1, sp, #16
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	f3af 8000 	nop.w
 8003bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003bbc:	4681      	mov	r9, r0
 8003bbe:	d1d6      	bne.n	8003b6e <_svfiprintf_r+0x166>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	065b      	lsls	r3, r3, #25
 8003bc4:	f53f af35 	bmi.w	8003a32 <_svfiprintf_r+0x2a>
 8003bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bca:	b01d      	add	sp, #116	; 0x74
 8003bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd0:	ab03      	add	r3, sp, #12
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <_svfiprintf_r+0x1ec>)
 8003bd8:	a904      	add	r1, sp, #16
 8003bda:	4640      	mov	r0, r8
 8003bdc:	f000 f882 	bl	8003ce4 <_printf_i>
 8003be0:	e7ea      	b.n	8003bb8 <_svfiprintf_r+0x1b0>
 8003be2:	bf00      	nop
 8003be4:	080041e8 	.word	0x080041e8
 8003be8:	080041ee 	.word	0x080041ee
 8003bec:	080041f2 	.word	0x080041f2
 8003bf0:	00000000 	.word	0x00000000
 8003bf4:	08003955 	.word	0x08003955

08003bf8 <_printf_common>:
 8003bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfc:	4691      	mov	r9, r2
 8003bfe:	461f      	mov	r7, r3
 8003c00:	688a      	ldr	r2, [r1, #8]
 8003c02:	690b      	ldr	r3, [r1, #16]
 8003c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bfb8      	it	lt
 8003c0c:	4613      	movlt	r3, r2
 8003c0e:	f8c9 3000 	str.w	r3, [r9]
 8003c12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c16:	4606      	mov	r6, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	b112      	cbz	r2, 8003c22 <_printf_common+0x2a>
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f8c9 3000 	str.w	r3, [r9]
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	0699      	lsls	r1, r3, #26
 8003c26:	bf42      	ittt	mi
 8003c28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c2c:	3302      	addmi	r3, #2
 8003c2e:	f8c9 3000 	strmi.w	r3, [r9]
 8003c32:	6825      	ldr	r5, [r4, #0]
 8003c34:	f015 0506 	ands.w	r5, r5, #6
 8003c38:	d107      	bne.n	8003c4a <_printf_common+0x52>
 8003c3a:	f104 0a19 	add.w	sl, r4, #25
 8003c3e:	68e3      	ldr	r3, [r4, #12]
 8003c40:	f8d9 2000 	ldr.w	r2, [r9]
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	42ab      	cmp	r3, r5
 8003c48:	dc28      	bgt.n	8003c9c <_printf_common+0xa4>
 8003c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c4e:	6822      	ldr	r2, [r4, #0]
 8003c50:	3300      	adds	r3, #0
 8003c52:	bf18      	it	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	0692      	lsls	r2, r2, #26
 8003c58:	d42d      	bmi.n	8003cb6 <_printf_common+0xbe>
 8003c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c5e:	4639      	mov	r1, r7
 8003c60:	4630      	mov	r0, r6
 8003c62:	47c0      	blx	r8
 8003c64:	3001      	adds	r0, #1
 8003c66:	d020      	beq.n	8003caa <_printf_common+0xb2>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	68e5      	ldr	r5, [r4, #12]
 8003c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c70:	f003 0306 	and.w	r3, r3, #6
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	bf08      	it	eq
 8003c78:	1aad      	subeq	r5, r5, r2
 8003c7a:	68a3      	ldr	r3, [r4, #8]
 8003c7c:	6922      	ldr	r2, [r4, #16]
 8003c7e:	bf0c      	ite	eq
 8003c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c84:	2500      	movne	r5, #0
 8003c86:	4293      	cmp	r3, r2
 8003c88:	bfc4      	itt	gt
 8003c8a:	1a9b      	subgt	r3, r3, r2
 8003c8c:	18ed      	addgt	r5, r5, r3
 8003c8e:	f04f 0900 	mov.w	r9, #0
 8003c92:	341a      	adds	r4, #26
 8003c94:	454d      	cmp	r5, r9
 8003c96:	d11a      	bne.n	8003cce <_printf_common+0xd6>
 8003c98:	2000      	movs	r0, #0
 8003c9a:	e008      	b.n	8003cae <_printf_common+0xb6>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4652      	mov	r2, sl
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	47c0      	blx	r8
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d103      	bne.n	8003cb2 <_printf_common+0xba>
 8003caa:	f04f 30ff 	mov.w	r0, #4294967295
 8003cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb2:	3501      	adds	r5, #1
 8003cb4:	e7c3      	b.n	8003c3e <_printf_common+0x46>
 8003cb6:	18e1      	adds	r1, r4, r3
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	2030      	movs	r0, #48	; 0x30
 8003cbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cc0:	4422      	add	r2, r4
 8003cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cca:	3302      	adds	r3, #2
 8003ccc:	e7c5      	b.n	8003c5a <_printf_common+0x62>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	47c0      	blx	r8
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d0e6      	beq.n	8003caa <_printf_common+0xb2>
 8003cdc:	f109 0901 	add.w	r9, r9, #1
 8003ce0:	e7d8      	b.n	8003c94 <_printf_common+0x9c>
	...

08003ce4 <_printf_i>:
 8003ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ce8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003cec:	460c      	mov	r4, r1
 8003cee:	7e09      	ldrb	r1, [r1, #24]
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	296e      	cmp	r1, #110	; 0x6e
 8003cf4:	4617      	mov	r7, r2
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	4698      	mov	r8, r3
 8003cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cfc:	f000 80b3 	beq.w	8003e66 <_printf_i+0x182>
 8003d00:	d822      	bhi.n	8003d48 <_printf_i+0x64>
 8003d02:	2963      	cmp	r1, #99	; 0x63
 8003d04:	d036      	beq.n	8003d74 <_printf_i+0x90>
 8003d06:	d80a      	bhi.n	8003d1e <_printf_i+0x3a>
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	f000 80b9 	beq.w	8003e80 <_printf_i+0x19c>
 8003d0e:	2958      	cmp	r1, #88	; 0x58
 8003d10:	f000 8083 	beq.w	8003e1a <_printf_i+0x136>
 8003d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d1c:	e032      	b.n	8003d84 <_printf_i+0xa0>
 8003d1e:	2964      	cmp	r1, #100	; 0x64
 8003d20:	d001      	beq.n	8003d26 <_printf_i+0x42>
 8003d22:	2969      	cmp	r1, #105	; 0x69
 8003d24:	d1f6      	bne.n	8003d14 <_printf_i+0x30>
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	6813      	ldr	r3, [r2, #0]
 8003d2a:	0605      	lsls	r5, r0, #24
 8003d2c:	f103 0104 	add.w	r1, r3, #4
 8003d30:	d52a      	bpl.n	8003d88 <_printf_i+0xa4>
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6011      	str	r1, [r2, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da03      	bge.n	8003d42 <_printf_i+0x5e>
 8003d3a:	222d      	movs	r2, #45	; 0x2d
 8003d3c:	425b      	negs	r3, r3
 8003d3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d42:	486f      	ldr	r0, [pc, #444]	; (8003f00 <_printf_i+0x21c>)
 8003d44:	220a      	movs	r2, #10
 8003d46:	e039      	b.n	8003dbc <_printf_i+0xd8>
 8003d48:	2973      	cmp	r1, #115	; 0x73
 8003d4a:	f000 809d 	beq.w	8003e88 <_printf_i+0x1a4>
 8003d4e:	d808      	bhi.n	8003d62 <_printf_i+0x7e>
 8003d50:	296f      	cmp	r1, #111	; 0x6f
 8003d52:	d020      	beq.n	8003d96 <_printf_i+0xb2>
 8003d54:	2970      	cmp	r1, #112	; 0x70
 8003d56:	d1dd      	bne.n	8003d14 <_printf_i+0x30>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	f043 0320 	orr.w	r3, r3, #32
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	e003      	b.n	8003d6a <_printf_i+0x86>
 8003d62:	2975      	cmp	r1, #117	; 0x75
 8003d64:	d017      	beq.n	8003d96 <_printf_i+0xb2>
 8003d66:	2978      	cmp	r1, #120	; 0x78
 8003d68:	d1d4      	bne.n	8003d14 <_printf_i+0x30>
 8003d6a:	2378      	movs	r3, #120	; 0x78
 8003d6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d70:	4864      	ldr	r0, [pc, #400]	; (8003f04 <_printf_i+0x220>)
 8003d72:	e055      	b.n	8003e20 <_printf_i+0x13c>
 8003d74:	6813      	ldr	r3, [r2, #0]
 8003d76:	1d19      	adds	r1, r3, #4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6011      	str	r1, [r2, #0]
 8003d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d84:	2301      	movs	r3, #1
 8003d86:	e08c      	b.n	8003ea2 <_printf_i+0x1be>
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6011      	str	r1, [r2, #0]
 8003d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d90:	bf18      	it	ne
 8003d92:	b21b      	sxthne	r3, r3
 8003d94:	e7cf      	b.n	8003d36 <_printf_i+0x52>
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	6825      	ldr	r5, [r4, #0]
 8003d9a:	1d18      	adds	r0, r3, #4
 8003d9c:	6010      	str	r0, [r2, #0]
 8003d9e:	0628      	lsls	r0, r5, #24
 8003da0:	d501      	bpl.n	8003da6 <_printf_i+0xc2>
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	e002      	b.n	8003dac <_printf_i+0xc8>
 8003da6:	0668      	lsls	r0, r5, #25
 8003da8:	d5fb      	bpl.n	8003da2 <_printf_i+0xbe>
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	4854      	ldr	r0, [pc, #336]	; (8003f00 <_printf_i+0x21c>)
 8003dae:	296f      	cmp	r1, #111	; 0x6f
 8003db0:	bf14      	ite	ne
 8003db2:	220a      	movne	r2, #10
 8003db4:	2208      	moveq	r2, #8
 8003db6:	2100      	movs	r1, #0
 8003db8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dbc:	6865      	ldr	r5, [r4, #4]
 8003dbe:	60a5      	str	r5, [r4, #8]
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	f2c0 8095 	blt.w	8003ef0 <_printf_i+0x20c>
 8003dc6:	6821      	ldr	r1, [r4, #0]
 8003dc8:	f021 0104 	bic.w	r1, r1, #4
 8003dcc:	6021      	str	r1, [r4, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d13d      	bne.n	8003e4e <_printf_i+0x16a>
 8003dd2:	2d00      	cmp	r5, #0
 8003dd4:	f040 808e 	bne.w	8003ef4 <_printf_i+0x210>
 8003dd8:	4665      	mov	r5, ip
 8003dda:	2a08      	cmp	r2, #8
 8003ddc:	d10b      	bne.n	8003df6 <_printf_i+0x112>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	07db      	lsls	r3, r3, #31
 8003de2:	d508      	bpl.n	8003df6 <_printf_i+0x112>
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	bfde      	ittt	le
 8003dec:	2330      	movle	r3, #48	; 0x30
 8003dee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003df2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003df6:	ebac 0305 	sub.w	r3, ip, r5
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	f8cd 8000 	str.w	r8, [sp]
 8003e00:	463b      	mov	r3, r7
 8003e02:	aa03      	add	r2, sp, #12
 8003e04:	4621      	mov	r1, r4
 8003e06:	4630      	mov	r0, r6
 8003e08:	f7ff fef6 	bl	8003bf8 <_printf_common>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d14d      	bne.n	8003eac <_printf_i+0x1c8>
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	b005      	add	sp, #20
 8003e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e1a:	4839      	ldr	r0, [pc, #228]	; (8003f00 <_printf_i+0x21c>)
 8003e1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	6821      	ldr	r1, [r4, #0]
 8003e24:	1d1d      	adds	r5, r3, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6015      	str	r5, [r2, #0]
 8003e2a:	060a      	lsls	r2, r1, #24
 8003e2c:	d50b      	bpl.n	8003e46 <_printf_i+0x162>
 8003e2e:	07ca      	lsls	r2, r1, #31
 8003e30:	bf44      	itt	mi
 8003e32:	f041 0120 	orrmi.w	r1, r1, #32
 8003e36:	6021      	strmi	r1, [r4, #0]
 8003e38:	b91b      	cbnz	r3, 8003e42 <_printf_i+0x15e>
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	f022 0220 	bic.w	r2, r2, #32
 8003e40:	6022      	str	r2, [r4, #0]
 8003e42:	2210      	movs	r2, #16
 8003e44:	e7b7      	b.n	8003db6 <_printf_i+0xd2>
 8003e46:	064d      	lsls	r5, r1, #25
 8003e48:	bf48      	it	mi
 8003e4a:	b29b      	uxthmi	r3, r3
 8003e4c:	e7ef      	b.n	8003e2e <_printf_i+0x14a>
 8003e4e:	4665      	mov	r5, ip
 8003e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e54:	fb02 3311 	mls	r3, r2, r1, r3
 8003e58:	5cc3      	ldrb	r3, [r0, r3]
 8003e5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e5e:	460b      	mov	r3, r1
 8003e60:	2900      	cmp	r1, #0
 8003e62:	d1f5      	bne.n	8003e50 <_printf_i+0x16c>
 8003e64:	e7b9      	b.n	8003dda <_printf_i+0xf6>
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	6825      	ldr	r5, [r4, #0]
 8003e6a:	6961      	ldr	r1, [r4, #20]
 8003e6c:	1d18      	adds	r0, r3, #4
 8003e6e:	6010      	str	r0, [r2, #0]
 8003e70:	0628      	lsls	r0, r5, #24
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	d501      	bpl.n	8003e7a <_printf_i+0x196>
 8003e76:	6019      	str	r1, [r3, #0]
 8003e78:	e002      	b.n	8003e80 <_printf_i+0x19c>
 8003e7a:	066a      	lsls	r2, r5, #25
 8003e7c:	d5fb      	bpl.n	8003e76 <_printf_i+0x192>
 8003e7e:	8019      	strh	r1, [r3, #0]
 8003e80:	2300      	movs	r3, #0
 8003e82:	6123      	str	r3, [r4, #16]
 8003e84:	4665      	mov	r5, ip
 8003e86:	e7b9      	b.n	8003dfc <_printf_i+0x118>
 8003e88:	6813      	ldr	r3, [r2, #0]
 8003e8a:	1d19      	adds	r1, r3, #4
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	681d      	ldr	r5, [r3, #0]
 8003e90:	6862      	ldr	r2, [r4, #4]
 8003e92:	2100      	movs	r1, #0
 8003e94:	4628      	mov	r0, r5
 8003e96:	f7fc f9ab 	bl	80001f0 <memchr>
 8003e9a:	b108      	cbz	r0, 8003ea0 <_printf_i+0x1bc>
 8003e9c:	1b40      	subs	r0, r0, r5
 8003e9e:	6060      	str	r0, [r4, #4]
 8003ea0:	6863      	ldr	r3, [r4, #4]
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eaa:	e7a7      	b.n	8003dfc <_printf_i+0x118>
 8003eac:	6923      	ldr	r3, [r4, #16]
 8003eae:	462a      	mov	r2, r5
 8003eb0:	4639      	mov	r1, r7
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	47c0      	blx	r8
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d0aa      	beq.n	8003e10 <_printf_i+0x12c>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	079b      	lsls	r3, r3, #30
 8003ebe:	d413      	bmi.n	8003ee8 <_printf_i+0x204>
 8003ec0:	68e0      	ldr	r0, [r4, #12]
 8003ec2:	9b03      	ldr	r3, [sp, #12]
 8003ec4:	4298      	cmp	r0, r3
 8003ec6:	bfb8      	it	lt
 8003ec8:	4618      	movlt	r0, r3
 8003eca:	e7a3      	b.n	8003e14 <_printf_i+0x130>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	464a      	mov	r2, r9
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	47c0      	blx	r8
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d09a      	beq.n	8003e10 <_printf_i+0x12c>
 8003eda:	3501      	adds	r5, #1
 8003edc:	68e3      	ldr	r3, [r4, #12]
 8003ede:	9a03      	ldr	r2, [sp, #12]
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	42ab      	cmp	r3, r5
 8003ee4:	dcf2      	bgt.n	8003ecc <_printf_i+0x1e8>
 8003ee6:	e7eb      	b.n	8003ec0 <_printf_i+0x1dc>
 8003ee8:	2500      	movs	r5, #0
 8003eea:	f104 0919 	add.w	r9, r4, #25
 8003eee:	e7f5      	b.n	8003edc <_printf_i+0x1f8>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ac      	bne.n	8003e4e <_printf_i+0x16a>
 8003ef4:	7803      	ldrb	r3, [r0, #0]
 8003ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003efa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003efe:	e76c      	b.n	8003dda <_printf_i+0xf6>
 8003f00:	080041f9 	.word	0x080041f9
 8003f04:	0800420a 	.word	0x0800420a

08003f08 <memcpy>:
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	1e43      	subs	r3, r0, #1
 8003f0c:	440a      	add	r2, r1
 8003f0e:	4291      	cmp	r1, r2
 8003f10:	d100      	bne.n	8003f14 <memcpy+0xc>
 8003f12:	bd10      	pop	{r4, pc}
 8003f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f1c:	e7f7      	b.n	8003f0e <memcpy+0x6>

08003f1e <memmove>:
 8003f1e:	4288      	cmp	r0, r1
 8003f20:	b510      	push	{r4, lr}
 8003f22:	eb01 0302 	add.w	r3, r1, r2
 8003f26:	d807      	bhi.n	8003f38 <memmove+0x1a>
 8003f28:	1e42      	subs	r2, r0, #1
 8003f2a:	4299      	cmp	r1, r3
 8003f2c:	d00a      	beq.n	8003f44 <memmove+0x26>
 8003f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f32:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f36:	e7f8      	b.n	8003f2a <memmove+0xc>
 8003f38:	4283      	cmp	r3, r0
 8003f3a:	d9f5      	bls.n	8003f28 <memmove+0xa>
 8003f3c:	1881      	adds	r1, r0, r2
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	42d3      	cmn	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memmove+0x28>
 8003f44:	bd10      	pop	{r4, pc}
 8003f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003f4e:	e7f7      	b.n	8003f40 <memmove+0x22>

08003f50 <_free_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4605      	mov	r5, r0
 8003f54:	2900      	cmp	r1, #0
 8003f56:	d045      	beq.n	8003fe4 <_free_r+0x94>
 8003f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f5c:	1f0c      	subs	r4, r1, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bfb8      	it	lt
 8003f62:	18e4      	addlt	r4, r4, r3
 8003f64:	f000 f8d2 	bl	800410c <__malloc_lock>
 8003f68:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <_free_r+0x98>)
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	b933      	cbnz	r3, 8003f7e <_free_r+0x2e>
 8003f70:	6063      	str	r3, [r4, #4]
 8003f72:	6014      	str	r4, [r2, #0]
 8003f74:	4628      	mov	r0, r5
 8003f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f7a:	f000 b8c8 	b.w	800410e <__malloc_unlock>
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	d90c      	bls.n	8003f9c <_free_r+0x4c>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	1862      	adds	r2, r4, r1
 8003f86:	4293      	cmp	r3, r2
 8003f88:	bf04      	itt	eq
 8003f8a:	681a      	ldreq	r2, [r3, #0]
 8003f8c:	685b      	ldreq	r3, [r3, #4]
 8003f8e:	6063      	str	r3, [r4, #4]
 8003f90:	bf04      	itt	eq
 8003f92:	1852      	addeq	r2, r2, r1
 8003f94:	6022      	streq	r2, [r4, #0]
 8003f96:	6004      	str	r4, [r0, #0]
 8003f98:	e7ec      	b.n	8003f74 <_free_r+0x24>
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	b10a      	cbz	r2, 8003fa4 <_free_r+0x54>
 8003fa0:	42a2      	cmp	r2, r4
 8003fa2:	d9fa      	bls.n	8003f9a <_free_r+0x4a>
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	1858      	adds	r0, r3, r1
 8003fa8:	42a0      	cmp	r0, r4
 8003faa:	d10b      	bne.n	8003fc4 <_free_r+0x74>
 8003fac:	6820      	ldr	r0, [r4, #0]
 8003fae:	4401      	add	r1, r0
 8003fb0:	1858      	adds	r0, r3, r1
 8003fb2:	4282      	cmp	r2, r0
 8003fb4:	6019      	str	r1, [r3, #0]
 8003fb6:	d1dd      	bne.n	8003f74 <_free_r+0x24>
 8003fb8:	6810      	ldr	r0, [r2, #0]
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	4401      	add	r1, r0
 8003fc0:	6019      	str	r1, [r3, #0]
 8003fc2:	e7d7      	b.n	8003f74 <_free_r+0x24>
 8003fc4:	d902      	bls.n	8003fcc <_free_r+0x7c>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	602b      	str	r3, [r5, #0]
 8003fca:	e7d3      	b.n	8003f74 <_free_r+0x24>
 8003fcc:	6820      	ldr	r0, [r4, #0]
 8003fce:	1821      	adds	r1, r4, r0
 8003fd0:	428a      	cmp	r2, r1
 8003fd2:	bf04      	itt	eq
 8003fd4:	6811      	ldreq	r1, [r2, #0]
 8003fd6:	6852      	ldreq	r2, [r2, #4]
 8003fd8:	6062      	str	r2, [r4, #4]
 8003fda:	bf04      	itt	eq
 8003fdc:	1809      	addeq	r1, r1, r0
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	605c      	str	r4, [r3, #4]
 8003fe2:	e7c7      	b.n	8003f74 <_free_r+0x24>
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000090 	.word	0x20000090

08003fec <_malloc_r>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	1ccd      	adds	r5, r1, #3
 8003ff0:	f025 0503 	bic.w	r5, r5, #3
 8003ff4:	3508      	adds	r5, #8
 8003ff6:	2d0c      	cmp	r5, #12
 8003ff8:	bf38      	it	cc
 8003ffa:	250c      	movcc	r5, #12
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	4606      	mov	r6, r0
 8004000:	db01      	blt.n	8004006 <_malloc_r+0x1a>
 8004002:	42a9      	cmp	r1, r5
 8004004:	d903      	bls.n	800400e <_malloc_r+0x22>
 8004006:	230c      	movs	r3, #12
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	2000      	movs	r0, #0
 800400c:	bd70      	pop	{r4, r5, r6, pc}
 800400e:	f000 f87d 	bl	800410c <__malloc_lock>
 8004012:	4a21      	ldr	r2, [pc, #132]	; (8004098 <_malloc_r+0xac>)
 8004014:	6814      	ldr	r4, [r2, #0]
 8004016:	4621      	mov	r1, r4
 8004018:	b991      	cbnz	r1, 8004040 <_malloc_r+0x54>
 800401a:	4c20      	ldr	r4, [pc, #128]	; (800409c <_malloc_r+0xb0>)
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	b91b      	cbnz	r3, 8004028 <_malloc_r+0x3c>
 8004020:	4630      	mov	r0, r6
 8004022:	f000 f863 	bl	80040ec <_sbrk_r>
 8004026:	6020      	str	r0, [r4, #0]
 8004028:	4629      	mov	r1, r5
 800402a:	4630      	mov	r0, r6
 800402c:	f000 f85e 	bl	80040ec <_sbrk_r>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d124      	bne.n	800407e <_malloc_r+0x92>
 8004034:	230c      	movs	r3, #12
 8004036:	6033      	str	r3, [r6, #0]
 8004038:	4630      	mov	r0, r6
 800403a:	f000 f868 	bl	800410e <__malloc_unlock>
 800403e:	e7e4      	b.n	800400a <_malloc_r+0x1e>
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	1b5b      	subs	r3, r3, r5
 8004044:	d418      	bmi.n	8004078 <_malloc_r+0x8c>
 8004046:	2b0b      	cmp	r3, #11
 8004048:	d90f      	bls.n	800406a <_malloc_r+0x7e>
 800404a:	600b      	str	r3, [r1, #0]
 800404c:	50cd      	str	r5, [r1, r3]
 800404e:	18cc      	adds	r4, r1, r3
 8004050:	4630      	mov	r0, r6
 8004052:	f000 f85c 	bl	800410e <__malloc_unlock>
 8004056:	f104 000b 	add.w	r0, r4, #11
 800405a:	1d23      	adds	r3, r4, #4
 800405c:	f020 0007 	bic.w	r0, r0, #7
 8004060:	1ac3      	subs	r3, r0, r3
 8004062:	d0d3      	beq.n	800400c <_malloc_r+0x20>
 8004064:	425a      	negs	r2, r3
 8004066:	50e2      	str	r2, [r4, r3]
 8004068:	e7d0      	b.n	800400c <_malloc_r+0x20>
 800406a:	428c      	cmp	r4, r1
 800406c:	684b      	ldr	r3, [r1, #4]
 800406e:	bf16      	itet	ne
 8004070:	6063      	strne	r3, [r4, #4]
 8004072:	6013      	streq	r3, [r2, #0]
 8004074:	460c      	movne	r4, r1
 8004076:	e7eb      	b.n	8004050 <_malloc_r+0x64>
 8004078:	460c      	mov	r4, r1
 800407a:	6849      	ldr	r1, [r1, #4]
 800407c:	e7cc      	b.n	8004018 <_malloc_r+0x2c>
 800407e:	1cc4      	adds	r4, r0, #3
 8004080:	f024 0403 	bic.w	r4, r4, #3
 8004084:	42a0      	cmp	r0, r4
 8004086:	d005      	beq.n	8004094 <_malloc_r+0xa8>
 8004088:	1a21      	subs	r1, r4, r0
 800408a:	4630      	mov	r0, r6
 800408c:	f000 f82e 	bl	80040ec <_sbrk_r>
 8004090:	3001      	adds	r0, #1
 8004092:	d0cf      	beq.n	8004034 <_malloc_r+0x48>
 8004094:	6025      	str	r5, [r4, #0]
 8004096:	e7db      	b.n	8004050 <_malloc_r+0x64>
 8004098:	20000090 	.word	0x20000090
 800409c:	20000094 	.word	0x20000094

080040a0 <_realloc_r>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	4607      	mov	r7, r0
 80040a4:	4614      	mov	r4, r2
 80040a6:	460e      	mov	r6, r1
 80040a8:	b921      	cbnz	r1, 80040b4 <_realloc_r+0x14>
 80040aa:	4611      	mov	r1, r2
 80040ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80040b0:	f7ff bf9c 	b.w	8003fec <_malloc_r>
 80040b4:	b922      	cbnz	r2, 80040c0 <_realloc_r+0x20>
 80040b6:	f7ff ff4b 	bl	8003f50 <_free_r>
 80040ba:	4625      	mov	r5, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c0:	f000 f826 	bl	8004110 <_malloc_usable_size_r>
 80040c4:	42a0      	cmp	r0, r4
 80040c6:	d20f      	bcs.n	80040e8 <_realloc_r+0x48>
 80040c8:	4621      	mov	r1, r4
 80040ca:	4638      	mov	r0, r7
 80040cc:	f7ff ff8e 	bl	8003fec <_malloc_r>
 80040d0:	4605      	mov	r5, r0
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d0f2      	beq.n	80040bc <_realloc_r+0x1c>
 80040d6:	4631      	mov	r1, r6
 80040d8:	4622      	mov	r2, r4
 80040da:	f7ff ff15 	bl	8003f08 <memcpy>
 80040de:	4631      	mov	r1, r6
 80040e0:	4638      	mov	r0, r7
 80040e2:	f7ff ff35 	bl	8003f50 <_free_r>
 80040e6:	e7e9      	b.n	80040bc <_realloc_r+0x1c>
 80040e8:	4635      	mov	r5, r6
 80040ea:	e7e7      	b.n	80040bc <_realloc_r+0x1c>

080040ec <_sbrk_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4c06      	ldr	r4, [pc, #24]	; (8004108 <_sbrk_r+0x1c>)
 80040f0:	2300      	movs	r3, #0
 80040f2:	4605      	mov	r5, r0
 80040f4:	4608      	mov	r0, r1
 80040f6:	6023      	str	r3, [r4, #0]
 80040f8:	f7fc fbc8 	bl	800088c <_sbrk>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_sbrk_r+0x1a>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	b103      	cbz	r3, 8004106 <_sbrk_r+0x1a>
 8004104:	602b      	str	r3, [r5, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	20000224 	.word	0x20000224

0800410c <__malloc_lock>:
 800410c:	4770      	bx	lr

0800410e <__malloc_unlock>:
 800410e:	4770      	bx	lr

08004110 <_malloc_usable_size_r>:
 8004110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004114:	1f18      	subs	r0, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	bfbc      	itt	lt
 800411a:	580b      	ldrlt	r3, [r1, r0]
 800411c:	18c0      	addlt	r0, r0, r3
 800411e:	4770      	bx	lr

08004120 <_init>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr

0800412c <_fini>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr
