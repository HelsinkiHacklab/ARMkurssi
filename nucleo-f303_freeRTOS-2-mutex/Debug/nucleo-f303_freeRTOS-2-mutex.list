
nucleo-f303_freeRTOS-2-mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007494  08007494  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007494  08007494  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007494  08007494  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800749c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b44  20000074  08007510  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bb8  08007510  00021bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000331f  00000000  00000000  0003a659  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  0003d978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  0003eda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005fde  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e25  00000000  00000000  0004603e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9de0  00000000  00000000  00056e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005728  00000000  00000000  00110cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007350 	.word	0x08007350

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007350 	.word	0x08007350

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <_Z5task1Pv>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
void StartDefaultTask(void *argument);

void task1( void *pvParameters) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b098      	sub	sp, #96	; 0x60
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
uint32_t count = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	65fb      	str	r3, [r7, #92]	; 0x5c
char txtBuf[80];
	for ( ;; ) {
		if ( xSemaphoreTake(semaphoreUART2, portMAX_DELAY) ) {
 800029c:	4b2f      	ldr	r3, [pc, #188]	; (800035c <_Z5task1Pv+0xcc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f04f 31ff 	mov.w	r1, #4294967295
 80002a4:	4618      	mov	r0, r3
 80002a6:	f004 fa7b 	bl	80047a0 <xQueueSemaphoreTake>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf14      	ite	ne
 80002b0:	2301      	movne	r3, #1
 80002b2:	2300      	moveq	r3, #0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d016      	beq.n	80002e8 <_Z5task1Pv+0x58>
			sprintf(txtBuf, "Hello UART2, task 1 here loop %ld!\r\n", count);
 80002ba:	f107 030c 	add.w	r3, r7, #12
 80002be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80002c0:	4927      	ldr	r1, [pc, #156]	; (8000360 <_Z5task1Pv+0xd0>)
 80002c2:	4618      	mov	r0, r3
 80002c4:	f006 fc48 	bl	8006b58 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t *)txtBuf, strlen(txtBuf));
 80002c8:	f107 030c 	add.w	r3, r7, #12
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff87 	bl	80001e0 <strlen>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	f107 030c 	add.w	r3, r7, #12
 80002da:	4619      	mov	r1, r3
 80002dc:	4821      	ldr	r0, [pc, #132]	; (8000364 <_Z5task1Pv+0xd4>)
 80002de:	f002 ff97 	bl	8003210 <HAL_UART_Transmit_DMA>
			vTaskDelay(200 / portTICK_PERIOD_MS);
 80002e2:	20c8      	movs	r0, #200	; 0xc8
 80002e4:	f004 fe7c 	bl	8004fe0 <vTaskDelay>
		}
		if ( xSemaphoreTake(semaphoreUART3, portMAX_DELAY) ) {
 80002e8:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <_Z5task1Pv+0xd8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f04f 31ff 	mov.w	r1, #4294967295
 80002f0:	4618      	mov	r0, r3
 80002f2:	f004 fa55 	bl	80047a0 <xQueueSemaphoreTake>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	bf14      	ite	ne
 80002fc:	2301      	movne	r3, #1
 80002fe:	2300      	moveq	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	d018      	beq.n	8000338 <_Z5task1Pv+0xa8>
			sprintf(txtBuf, "Hello UART3, task 1 here loop %ld!\r\n", count++);
 8000306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000308:	1c5a      	adds	r2, r3, #1
 800030a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800030c:	f107 000c 	add.w	r0, r7, #12
 8000310:	461a      	mov	r2, r3
 8000312:	4916      	ldr	r1, [pc, #88]	; (800036c <_Z5task1Pv+0xdc>)
 8000314:	f006 fc20 	bl	8006b58 <siprintf>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txtBuf, strlen(txtBuf));
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff5f 	bl	80001e0 <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	b29a      	uxth	r2, r3
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	4619      	mov	r1, r3
 800032c:	4810      	ldr	r0, [pc, #64]	; (8000370 <_Z5task1Pv+0xe0>)
 800032e:	f002 ff6f 	bl	8003210 <HAL_UART_Transmit_DMA>
			vTaskDelay(200 / portTICK_PERIOD_MS);
 8000332:	20c8      	movs	r0, #200	; 0xc8
 8000334:	f004 fe54 	bl	8004fe0 <vTaskDelay>
		}
		xSemaphoreGive(semaphoreUART2);
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <_Z5task1Pv+0xcc>)
 800033a:	6818      	ldr	r0, [r3, #0]
 800033c:	2300      	movs	r3, #0
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	f003 ffc3 	bl	80042cc <xQueueGenericSend>
		xSemaphoreGive(semaphoreUART3);
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <_Z5task1Pv+0xd8>)
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	2300      	movs	r3, #0
 800034c:	2200      	movs	r2, #0
 800034e:	2100      	movs	r1, #0
 8000350:	f003 ffbc 	bl	80042cc <xQueueGenericSend>
		vTaskDelay(100 / portTICK_PERIOD_MS);
 8000354:	2064      	movs	r0, #100	; 0x64
 8000356:	f004 fe43 	bl	8004fe0 <vTaskDelay>
		if ( xSemaphoreTake(semaphoreUART2, portMAX_DELAY) ) {
 800035a:	e79f      	b.n	800029c <_Z5task1Pv+0xc>
 800035c:	20000218 	.word	0x20000218
 8000360:	08007368 	.word	0x08007368
 8000364:	20000090 	.word	0x20000090
 8000368:	2000021c 	.word	0x2000021c
 800036c:	08007390 	.word	0x08007390
 8000370:	20000110 	.word	0x20000110

08000374 <_Z5task2Pv>:
	}
}

void task2( void *pvParameters) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b098      	sub	sp, #96	; 0x60
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
uint32_t count = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	65fb      	str	r3, [r7, #92]	; 0x5c
char txtBuf[80];
	while (1) {
		if ( xSemaphoreTake(semaphoreUART2, portMAX_DELAY) ) {
 8000380:	4b2f      	ldr	r3, [pc, #188]	; (8000440 <_Z5task2Pv+0xcc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f04f 31ff 	mov.w	r1, #4294967295
 8000388:	4618      	mov	r0, r3
 800038a:	f004 fa09 	bl	80047a0 <xQueueSemaphoreTake>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	bf14      	ite	ne
 8000394:	2301      	movne	r3, #1
 8000396:	2300      	moveq	r3, #0
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d018      	beq.n	80003d0 <_Z5task2Pv+0x5c>
			sprintf(txtBuf, "Hello UART2, task 2 here loop %ld!\r\n",count++);
 800039e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80003a0:	1c5a      	adds	r2, r3, #1
 80003a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80003a4:	f107 000c 	add.w	r0, r7, #12
 80003a8:	461a      	mov	r2, r3
 80003aa:	4926      	ldr	r1, [pc, #152]	; (8000444 <_Z5task2Pv+0xd0>)
 80003ac:	f006 fbd4 	bl	8006b58 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t *)txtBuf, strlen(txtBuf));
 80003b0:	f107 030c 	add.w	r3, r7, #12
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff13 	bl	80001e0 <strlen>
 80003ba:	4603      	mov	r3, r0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4619      	mov	r1, r3
 80003c4:	4820      	ldr	r0, [pc, #128]	; (8000448 <_Z5task2Pv+0xd4>)
 80003c6:	f002 ff23 	bl	8003210 <HAL_UART_Transmit_DMA>
			vTaskDelay(200 / portTICK_PERIOD_MS);
 80003ca:	20c8      	movs	r0, #200	; 0xc8
 80003cc:	f004 fe08 	bl	8004fe0 <vTaskDelay>
		}
		if ( xSemaphoreTake(semaphoreUART3, portMAX_DELAY) ) {
 80003d0:	4b1e      	ldr	r3, [pc, #120]	; (800044c <_Z5task2Pv+0xd8>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f04f 31ff 	mov.w	r1, #4294967295
 80003d8:	4618      	mov	r0, r3
 80003da:	f004 f9e1 	bl	80047a0 <xQueueSemaphoreTake>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	bf14      	ite	ne
 80003e4:	2301      	movne	r3, #1
 80003e6:	2300      	moveq	r3, #0
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d016      	beq.n	800041c <_Z5task2Pv+0xa8>
			sprintf(txtBuf, "Hello UART3, task 2 here loop %ld!\r\n", count);
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80003f4:	4916      	ldr	r1, [pc, #88]	; (8000450 <_Z5task2Pv+0xdc>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f006 fbae 	bl	8006b58 <siprintf>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txtBuf, strlen(txtBuf));
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff feed 	bl	80001e0 <strlen>
 8000406:	4603      	mov	r3, r0
 8000408:	b29a      	uxth	r2, r3
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4619      	mov	r1, r3
 8000410:	4810      	ldr	r0, [pc, #64]	; (8000454 <_Z5task2Pv+0xe0>)
 8000412:	f002 fefd 	bl	8003210 <HAL_UART_Transmit_DMA>
			vTaskDelay(200 / portTICK_PERIOD_MS);
 8000416:	20c8      	movs	r0, #200	; 0xc8
 8000418:	f004 fde2 	bl	8004fe0 <vTaskDelay>
		}
		xSemaphoreGive(semaphoreUART2);
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <_Z5task2Pv+0xcc>)
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	2300      	movs	r3, #0
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	f003 ff51 	bl	80042cc <xQueueGenericSend>
		xSemaphoreGive(semaphoreUART3);
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <_Z5task2Pv+0xd8>)
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	2200      	movs	r2, #0
 8000432:	2100      	movs	r1, #0
 8000434:	f003 ff4a 	bl	80042cc <xQueueGenericSend>
		vTaskDelay(100 / portTICK_PERIOD_MS);
 8000438:	2064      	movs	r0, #100	; 0x64
 800043a:	f004 fdd1 	bl	8004fe0 <vTaskDelay>
		if ( xSemaphoreTake(semaphoreUART2, portMAX_DELAY) ) {
 800043e:	e79f      	b.n	8000380 <_Z5task2Pv+0xc>
 8000440:	20000218 	.word	0x20000218
 8000444:	080073b8 	.word	0x080073b8
 8000448:	20000090 	.word	0x20000090
 800044c:	2000021c 	.word	0x2000021c
 8000450:	080073e0 	.word	0x080073e0
 8000454:	20000110 	.word	0x20000110

08000458 <main>:
	}
}


int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af02      	add	r7, sp, #8

  HAL_Init();
 800045e:	f000 fbdd 	bl	8000c1c <HAL_Init>

  SystemClock_Config();
 8000462:	f000 f849 	bl	80004f8 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 8000466:	f000 f945 	bl	80006f4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800046a:	f000 f91d 	bl	80006a8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800046e:	f000 f8b3 	bl	80005d8 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000472:	f000 f8e5 	bl	8000640 <_ZL19MX_USART3_UART_Initv>

  semaphoreUART2 = xSemaphoreCreateBinary();
 8000476:	2203      	movs	r2, #3
 8000478:	2100      	movs	r1, #0
 800047a:	2001      	movs	r0, #1
 800047c:	f003 fec6 	bl	800420c <xQueueGenericCreate>
 8000480:	4602      	mov	r2, r0
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <main+0x88>)
 8000484:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(semaphoreUART2);
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <main+0x88>)
 8000488:	6818      	ldr	r0, [r3, #0]
 800048a:	2300      	movs	r3, #0
 800048c:	2200      	movs	r2, #0
 800048e:	2100      	movs	r1, #0
 8000490:	f003 ff1c 	bl	80042cc <xQueueGenericSend>
  semaphoreUART3 = xSemaphoreCreateBinary();
 8000494:	2203      	movs	r2, #3
 8000496:	2100      	movs	r1, #0
 8000498:	2001      	movs	r0, #1
 800049a:	f003 feb7 	bl	800420c <xQueueGenericCreate>
 800049e:	4602      	mov	r2, r0
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <main+0x8c>)
 80004a2:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(semaphoreUART3);
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <main+0x8c>)
 80004a6:	6818      	ldr	r0, [r3, #0]
 80004a8:	2300      	movs	r3, #0
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	f003 ff0d 	bl	80042cc <xQueueGenericSend>

	xTaskCreate( task1, "T1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
 80004b2:	2300      	movs	r3, #0
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	2301      	movs	r3, #1
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	2300      	movs	r3, #0
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	490a      	ldr	r1, [pc, #40]	; (80004e8 <main+0x90>)
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <main+0x94>)
 80004c2:	f004 fc52 	bl	8004d6a <xTaskCreate>
	xTaskCreate( task2, "T2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
 80004c6:	2300      	movs	r3, #0
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	2301      	movs	r3, #1
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2300      	movs	r3, #0
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	4907      	ldr	r1, [pc, #28]	; (80004f0 <main+0x98>)
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <main+0x9c>)
 80004d6:	f004 fc48 	bl	8004d6a <xTaskCreate>

	vTaskStartScheduler();
 80004da:	f004 fdb5 	bl	8005048 <vTaskStartScheduler>

  while (1)
 80004de:	e7fe      	b.n	80004de <main+0x86>
 80004e0:	20000218 	.word	0x20000218
 80004e4:	2000021c 	.word	0x2000021c
 80004e8:	08007408 	.word	0x08007408
 80004ec:	08000291 	.word	0x08000291
 80004f0:	0800740c 	.word	0x0800740c
 80004f4:	08000375 	.word	0x08000375

080004f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b0a6      	sub	sp, #152	; 0x98
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000502:	2228      	movs	r2, #40	; 0x28
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f006 fb1d 	bl	8006b46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2258      	movs	r2, #88	; 0x58
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f006 fb0f 	bl	8006b46 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000528:	2302      	movs	r3, #2
 800052a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052c:	2301      	movs	r3, #1
 800052e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000530:	2310      	movs	r3, #16
 8000532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	2302      	movs	r3, #2
 8000538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000540:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000544:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000556:	4618      	mov	r0, r3
 8000558:	f001 f80c 	bl	8001574 <HAL_RCC_OscConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	bf14      	ite	ne
 8000562:	2301      	movne	r3, #1
 8000564:	2300      	moveq	r3, #0
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 800056c:	f000 f93c 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2302      	movs	r3, #2
 8000576:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000580:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000586:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800058a:	2102      	movs	r1, #2
 800058c:	4618      	mov	r0, r3
 800058e:	f001 ff07 	bl	80023a0 <HAL_RCC_ClockConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	bf14      	ite	ne
 8000598:	2301      	movne	r3, #1
 800059a:	2300      	moveq	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80005a2:	f000 f921 	bl	80007e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80005a6:	2306      	movs	r3, #6
 80005a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 f95b 	bl	8002870 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	bf14      	ite	ne
 80005c0:	2301      	movne	r3, #1
 80005c2:	2300      	moveq	r3, #0
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80005ca:	f000 f90d 	bl	80007e8 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3798      	adds	r7, #152	; 0x98
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <_ZL19MX_USART2_UART_Initv+0x64>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061c:	f002 fdaa 	bl	8003174 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	bf14      	ite	ne
 8000626:	2301      	movne	r3, #1
 8000628:	2300      	moveq	r3, #0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000630:	f000 f8da 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000090 	.word	0x20000090
 800063c:	40004400 	.word	0x40004400

08000640 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000648:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800064c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000650:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000684:	f002 fd76 	bl	8003174 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf14      	ite	ne
 800068e:	2301      	movne	r3, #1
 8000690:	2300      	moveq	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8000698:	f000 f8a6 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000110 	.word	0x20000110
 80006a4:	40004800 	.word	0x40004800

080006a8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <_ZL11MX_DMA_Initv+0x48>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <_ZL11MX_DMA_Initv+0x48>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <_ZL11MX_DMA_Initv+0x48>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2105      	movs	r1, #5
 80006ca:	200c      	movs	r0, #12
 80006cc:	f000 fb94 	bl	8000df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006d0:	200c      	movs	r0, #12
 80006d2:	f000 fbad 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2105      	movs	r1, #5
 80006da:	2011      	movs	r0, #17
 80006dc:	f000 fb8c 	bl	8000df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006e0:	2011      	movs	r0, #17
 80006e2:	f000 fba5 	bl	8000e30 <HAL_NVIC_EnableIRQ>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a2a      	ldr	r2, [pc, #168]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <_ZL12MX_GPIO_Initv+0xc4>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fee7 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <_ZL12MX_GPIO_Initv+0xc8>)
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <_ZL12MX_GPIO_Initv+0xcc>)
 800078c:	f000 fd50 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000790:	2320      	movs	r3, #32
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f000 fd41 	bl	8001230 <HAL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	10210000 	.word	0x10210000
 80007c0:	48000800 	.word	0x48000800

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d6:	f000 fa37 	bl	8000c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40001000 	.word	0x40001000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_MspInit+0x4c>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_MspInit+0x4c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_MspInit+0x4c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_MspInit+0x4c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	f06f 0001 	mvn.w	r0, #1
 8000836:	f000 fadf 	bl	8000df8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a5d      	ldr	r2, [pc, #372]	; (80009dc <HAL_UART_MspInit+0x194>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d157      	bne.n	800091a <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <HAL_UART_MspInit+0x198>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a5c      	ldr	r2, [pc, #368]	; (80009e0 <HAL_UART_MspInit+0x198>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <HAL_UART_MspInit+0x198>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <HAL_UART_MspInit+0x198>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a56      	ldr	r2, [pc, #344]	; (80009e0 <HAL_UART_MspInit+0x198>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <HAL_UART_MspInit+0x198>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800089a:	230c      	movs	r3, #12
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 fcba 	bl	8001230 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80008bc:	4b49      	ldr	r3, [pc, #292]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008be:	4a4a      	ldr	r2, [pc, #296]	; (80009e8 <HAL_UART_MspInit+0x1a0>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c2:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c8:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ce:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d4:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008da:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008e0:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008e6:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008ec:	483d      	ldr	r0, [pc, #244]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 80008ee:	f000 faad 	bl	8000e4c <HAL_DMA_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80008f8:	f7ff ff76 	bl	80007e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a39      	ldr	r2, [pc, #228]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 8000900:	669a      	str	r2, [r3, #104]	; 0x68
 8000902:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <HAL_UART_MspInit+0x19c>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2105      	movs	r1, #5
 800090c:	2026      	movs	r0, #38	; 0x26
 800090e:	f000 fa73 	bl	8000df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000912:	2026      	movs	r0, #38	; 0x26
 8000914:	f000 fa8c 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000918:	e05b      	b.n	80009d2 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a33      	ldr	r2, [pc, #204]	; (80009ec <HAL_UART_MspInit+0x1a4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d156      	bne.n	80009d2 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <HAL_UART_MspInit+0x198>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <HAL_UART_MspInit+0x198>)
 800092a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092e:	61d3      	str	r3, [r2, #28]
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <HAL_UART_MspInit+0x198>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <HAL_UART_MspInit+0x198>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <HAL_UART_MspInit+0x198>)
 8000942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000946:	6153      	str	r3, [r2, #20]
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <HAL_UART_MspInit+0x198>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000954:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000966:	2307      	movs	r3, #7
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	481f      	ldr	r0, [pc, #124]	; (80009f0 <HAL_UART_MspInit+0x1a8>)
 8000972:	f000 fc5d 	bl	8001230 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 8000978:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <HAL_UART_MspInit+0x1b0>)
 800097a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 800097e:	2210      	movs	r2, #16
 8000980:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80009a6:	4813      	ldr	r0, [pc, #76]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 80009a8:	f000 fa50 	bl	8000e4c <HAL_DMA_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80009b2:	f7ff ff19 	bl	80007e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 80009ba:	669a      	str	r2, [r3, #104]	; 0x68
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <HAL_UART_MspInit+0x1ac>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2027      	movs	r0, #39	; 0x27
 80009c8:	f000 fa16 	bl	8000df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009cc:	2027      	movs	r0, #39	; 0x27
 80009ce:	f000 fa2f 	bl	8000e30 <HAL_NVIC_EnableIRQ>
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	; 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	20000190 	.word	0x20000190
 80009e8:	40020080 	.word	0x40020080
 80009ec:	40004800 	.word	0x40004800
 80009f0:	48000400 	.word	0x48000400
 80009f4:	200001d4 	.word	0x200001d4
 80009f8:	4002001c 	.word	0x4002001c

080009fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2036      	movs	r0, #54	; 0x36
 8000a12:	f000 f9f1 	bl	8000df8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000a16:	2036      	movs	r0, #54	; 0x36
 8000a18:	f000 fa0a 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_InitTick+0xa0>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <HAL_InitTick+0xa0>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	61d3      	str	r3, [r2, #28]
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_InitTick+0xa0>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a34:	f107 0210 	add.w	r2, r7, #16
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fee4 	bl	800280c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a44:	f001 fe9e 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_InitTick+0xa4>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9b      	lsrs	r3, r3, #18
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <HAL_InitTick+0xac>)
 8000a60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a7e:	f002 f915 	bl	8002cac <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a8a:	f002 f945 	bl	8002d18 <HAL_TIM_Base_Start_IT>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	20001b30 	.word	0x20001b30
 8000aa8:	40001000 	.word	0x40001000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <DMA1_Channel2_IRQHandler+0x10>)
 8000ae6:	f000 fa95 	bl	8001014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200001d4 	.word	0x200001d4

08000af4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <DMA1_Channel7_IRQHandler+0x10>)
 8000afa:	f000 fa8b 	bl	8001014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000190 	.word	0x20000190

08000b08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <USART2_IRQHandler+0x10>)
 8000b0e:	f002 fbfb 	bl	8003308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000090 	.word	0x20000090

08000b1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <USART3_IRQHandler+0x10>)
 8000b22:	f002 fbf1 	bl	8003308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000110 	.word	0x20000110

08000b30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <TIM6_DAC_IRQHandler+0x10>)
 8000b36:	f002 f919 	bl	8002d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20001b30 	.word	0x20001b30

08000b44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x50>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x16>
		heap_end = &end;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <_sbrk+0x50>)
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <_sbrk+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <_sbrk+0x50>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <_sbrk+0x50>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	466a      	mov	r2, sp
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d907      	bls.n	8000b7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b6e:	f005 ffb5 	bl	8006adc <__errno>
 8000b72:	4602      	mov	r2, r0
 8000b74:	230c      	movs	r3, #12
 8000b76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	e006      	b.n	8000b8c <_sbrk+0x48>
	}

	heap_end += incr;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <_sbrk+0x50>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <_sbrk+0x50>)
 8000b88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000220 	.word	0x20000220
 8000b98:	20001bb8 	.word	0x20001bb8

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <SystemInit+0x28>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <SystemInit+0x28>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SystemInit+0x28>)
 8000bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bce:	e003      	b.n	8000bd8 <LoopCopyDataInit>

08000bd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bd6:	3104      	adds	r1, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000be0:	d3f6      	bcc.n	8000bd0 <CopyDataInit>
	ldr	r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000be4:	e002      	b.n	8000bec <LoopFillZerobss>

08000be6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000be6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000be8:	f842 3b04 	str.w	r3, [r2], #4

08000bec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <LoopForever+0x16>)
	cmp	r2, r3
 8000bee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bf0:	d3f9      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bf2:	f7ff ffd3 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f005 ff77 	bl	8006ae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fc2d 	bl	8000458 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c00:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c04:	0800749c 	.word	0x0800749c
	ldr	r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c0c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000c10:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000c14:	20001bb8 	.word	0x20001bb8

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x28>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f8d8 	bl	8000de2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fee2 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fdde 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20001b70 	.word	0x20001b70

08000c70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20001b70 	.word	0x20001b70

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff4c 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0a:	f7ff ff61 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	68b9      	ldr	r1, [r7, #8]
 8000e14:	6978      	ldr	r0, [r7, #20]
 8000e16:	f7ff ffb1 	bl	8000d7c <NVIC_EncodePriority>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff80 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff54 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e037      	b.n	8000ed2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2202      	movs	r2, #2
 8000e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e7c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f97f 	bl	80011b8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}  
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d101      	bne.n	8000efa <HAL_DMA_Start_IT+0x20>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e04a      	b.n	8000f90 <HAL_DMA_Start_IT+0xb6>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d13a      	bne.n	8000f82 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2200      	movs	r2, #0
 8000f18:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f000 f912 	bl	800115a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d008      	beq.n	8000f50 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 020e 	orr.w	r2, r2, #14
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e00f      	b.n	8000f70 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 020a 	orr.w	r2, r2, #10
 8000f5e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0204 	bic.w	r2, r2, #4
 8000f6e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0201 	orr.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e005      	b.n	8000f8e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d005      	beq.n	8000fba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e027      	b.n	800100a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 020e 	bic.w	r2, r2, #14
 8000fc8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	4798      	blx	r3
    } 
  }
  return status;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	2204      	movs	r2, #4
 8001032:	409a      	lsls	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d024      	beq.n	8001086 <HAL_DMA_IRQHandler+0x72>
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d01f      	beq.n	8001086 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0204 	bic.w	r2, r2, #4
 8001062:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106c:	2104      	movs	r1, #4
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	2b00      	cmp	r3, #0
 800107a:	d06a      	beq.n	8001152 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001084:	e065      	b.n	8001152 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2202      	movs	r2, #2
 800108c:	409a      	lsls	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d02c      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xdc>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d027      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10b      	bne.n	80010c6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 020a 	bic.w	r2, r2, #10
 80010bc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ce:	2102      	movs	r1, #2
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d035      	beq.n	8001152 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80010ee:	e030      	b.n	8001152 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	2208      	movs	r2, #8
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d028      	beq.n	8001152 <HAL_DMA_IRQHandler+0x13e>
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d023      	beq.n	8001152 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 020e 	bic.w	r2, r2, #14
 8001118:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	4798      	blx	r3
    }
  }
}  
 8001150:	e7ff      	b.n	8001152 <HAL_DMA_IRQHandler+0x13e>
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b10      	cmp	r3, #16
 8001186:	d108      	bne.n	800119a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001198:	e007      	b.n	80011aa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	60da      	str	r2, [r3, #12]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <DMA_CalcBaseAndBitshift+0x60>)
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d80f      	bhi.n	80011ec <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <DMA_CalcBaseAndBitshift+0x64>)
 80011d4:	4413      	add	r3, r2
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <DMA_CalcBaseAndBitshift+0x68>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	009a      	lsls	r2, r3, #2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <DMA_CalcBaseAndBitshift+0x6c>)
 80011e8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80011ea:	e00e      	b.n	800120a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <DMA_CalcBaseAndBitshift+0x70>)
 80011f4:	4413      	add	r3, r2
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <DMA_CalcBaseAndBitshift+0x68>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	009a      	lsls	r2, r3, #2
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <DMA_CalcBaseAndBitshift+0x74>)
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40020407 	.word	0x40020407
 800121c:	bffdfff8 	.word	0xbffdfff8
 8001220:	cccccccd 	.word	0xcccccccd
 8001224:	40020000 	.word	0x40020000
 8001228:	bffdfbf8 	.word	0xbffdfbf8
 800122c:	40020400 	.word	0x40020400

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e160      	b.n	8001502 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8152 	beq.w	80014fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x38>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	6939      	ldr	r1, [r7, #16]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d00b      	beq.n	8001304 <HAL_GPIO_Init+0xd4>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f8:	2b11      	cmp	r3, #17
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b12      	cmp	r3, #18
 8001302:	d130      	bne.n	8001366 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133a:	2201      	movs	r2, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 0201 	and.w	r2, r3, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 80ac 	beq.w	80014fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a4:	4b5e      	ldr	r3, [pc, #376]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a5d      	ldr	r2, [pc, #372]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b5b      	ldr	r3, [pc, #364]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013bc:	4a59      	ldr	r2, [pc, #356]	; (8001524 <HAL_GPIO_Init+0x2f4>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013e6:	d025      	beq.n	8001434 <HAL_GPIO_Init+0x204>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a4f      	ldr	r2, [pc, #316]	; (8001528 <HAL_GPIO_Init+0x2f8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d01f      	beq.n	8001430 <HAL_GPIO_Init+0x200>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a4e      	ldr	r2, [pc, #312]	; (800152c <HAL_GPIO_Init+0x2fc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d019      	beq.n	800142c <HAL_GPIO_Init+0x1fc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a4d      	ldr	r2, [pc, #308]	; (8001530 <HAL_GPIO_Init+0x300>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d013      	beq.n	8001428 <HAL_GPIO_Init+0x1f8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a4c      	ldr	r2, [pc, #304]	; (8001534 <HAL_GPIO_Init+0x304>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d00d      	beq.n	8001424 <HAL_GPIO_Init+0x1f4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a4b      	ldr	r2, [pc, #300]	; (8001538 <HAL_GPIO_Init+0x308>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d007      	beq.n	8001420 <HAL_GPIO_Init+0x1f0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4a      	ldr	r2, [pc, #296]	; (800153c <HAL_GPIO_Init+0x30c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_GPIO_Init+0x1ec>
 8001418:	2306      	movs	r3, #6
 800141a:	e00c      	b.n	8001436 <HAL_GPIO_Init+0x206>
 800141c:	2307      	movs	r3, #7
 800141e:	e00a      	b.n	8001436 <HAL_GPIO_Init+0x206>
 8001420:	2305      	movs	r3, #5
 8001422:	e008      	b.n	8001436 <HAL_GPIO_Init+0x206>
 8001424:	2304      	movs	r3, #4
 8001426:	e006      	b.n	8001436 <HAL_GPIO_Init+0x206>
 8001428:	2303      	movs	r3, #3
 800142a:	e004      	b.n	8001436 <HAL_GPIO_Init+0x206>
 800142c:	2302      	movs	r3, #2
 800142e:	e002      	b.n	8001436 <HAL_GPIO_Init+0x206>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <HAL_GPIO_Init+0x206>
 8001434:	2300      	movs	r3, #0
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	f002 0203 	and.w	r2, r2, #3
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	4093      	lsls	r3, r2
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001446:	4937      	ldr	r1, [pc, #220]	; (8001524 <HAL_GPIO_Init+0x2f4>)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_GPIO_Init+0x310>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001478:	4a31      	ldr	r2, [pc, #196]	; (8001540 <HAL_GPIO_Init+0x310>)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_GPIO_Init+0x310>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014a2:	4a27      	ldr	r2, [pc, #156]	; (8001540 <HAL_GPIO_Init+0x310>)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_GPIO_Init+0x310>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014cc:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <HAL_GPIO_Init+0x310>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_GPIO_Init+0x310>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <HAL_GPIO_Init+0x310>)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	f47f ae97 	bne.w	8001240 <HAL_GPIO_Init+0x10>
  }
}
 8001512:	bf00      	nop
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000
 8001528:	48000400 	.word	0x48000400
 800152c:	48000800 	.word	0x48000800
 8001530:	48000c00 	.word	0x48000c00
 8001534:	48001000 	.word	0x48001000
 8001538:	48001400 	.word	0x48001400
 800153c:	48001800 	.word	0x48001800
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001560:	e002      	b.n	8001568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800157a:	af00      	add	r7, sp, #0
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f000 bf01 	b.w	8002390 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8160 	beq.w	800185e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800159e:	4bae      	ldr	r3, [pc, #696]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d00c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015aa:	4bab      	ldr	r3, [pc, #684]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d159      	bne.n	800166a <HAL_RCC_OscConfig+0xf6>
 80015b6:	4ba8      	ldr	r3, [pc, #672]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c2:	d152      	bne.n	800166a <HAL_RCC_OscConfig+0xf6>
 80015c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d102      	bne.n	80015f6 <HAL_RCC_OscConfig+0x82>
 80015f0:	4b99      	ldr	r3, [pc, #612]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0xae>
 80015f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001602:	fa93 f3a3 	rbit	r3, r3
 8001606:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800160a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001612:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800161e:	4b8e      	ldr	r3, [pc, #568]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001626:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800162a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800162e:	fa92 f2a2 	rbit	r2, r2
 8001632:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001636:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800163a:	fab2 f282 	clz	r2, r2
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	f042 0220 	orr.w	r2, r2, #32
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	f002 021f 	and.w	r2, r2, #31
 800164a:	2101      	movs	r1, #1
 800164c:	fa01 f202 	lsl.w	r2, r1, r2
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8102 	beq.w	800185c <HAL_RCC_OscConfig+0x2e8>
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80fc 	bne.w	800185c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	f000 be93 	b.w	8002390 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d106      	bne.n	8001684 <HAL_RCC_OscConfig+0x110>
 8001676:	4b78      	ldr	r3, [pc, #480]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a77      	ldr	r2, [pc, #476]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e030      	b.n	80016e6 <HAL_RCC_OscConfig+0x172>
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x134>
 800168e:	4b72      	ldr	r3, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a71      	ldr	r2, [pc, #452]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b6f      	ldr	r3, [pc, #444]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6e      	ldr	r2, [pc, #440]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01e      	b.n	80016e6 <HAL_RCC_OscConfig+0x172>
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b2:	d10c      	bne.n	80016ce <HAL_RCC_OscConfig+0x15a>
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a67      	ldr	r2, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b65      	ldr	r3, [pc, #404]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a64      	ldr	r2, [pc, #400]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e00b      	b.n	80016e6 <HAL_RCC_OscConfig+0x172>
 80016ce:	4b62      	ldr	r3, [pc, #392]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a61      	ldr	r2, [pc, #388]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5e      	ldr	r2, [pc, #376]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80016e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d059      	beq.n	80017a4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fabe 	bl	8000c70 <HAL_GetTick>
 80016f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fa:	f7ff fab9 	bl	8000c70 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d902      	bls.n	8001710 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	f000 be40 	b.w	8002390 <HAL_RCC_OscConfig+0xe1c>
 8001710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001714:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001724:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <HAL_RCC_OscConfig+0x1ce>
 800173c:	4b46      	ldr	r3, [pc, #280]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x1fa>
 8001742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001746:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800175e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001762:	fa93 f3a3 	rbit	r3, r3
 8001766:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001772:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001776:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800177a:	fa92 f2a2 	rbit	r2, r2
 800177e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001782:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001786:	fab2 f282 	clz	r2, r2
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	f042 0220 	orr.w	r2, r2, #32
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f002 021f 	and.w	r2, r2, #31
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f202 	lsl.w	r2, r1, r2
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0ab      	beq.n	80016fa <HAL_RCC_OscConfig+0x186>
 80017a2:	e05c      	b.n	800185e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fa64 	bl	8000c70 <HAL_GetTick>
 80017a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ae:	f7ff fa5f 	bl	8000c70 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d902      	bls.n	80017c4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	f000 bde6 	b.w	8002390 <HAL_RCC_OscConfig+0xe1c>
 80017c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80017d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x282>
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x2ae>
 80017f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800180a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001812:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_RCC_OscConfig+0x2e4>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001826:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800182a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800182e:	fa92 f2a2 	rbit	r2, r2
 8001832:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001836:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800183a:	fab2 f282 	clz	r2, r2
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f042 0220 	orr.w	r2, r2, #32
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f002 021f 	and.w	r2, r2, #31
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ab      	bne.n	80017ae <HAL_RCC_OscConfig+0x23a>
 8001856:	e002      	b.n	800185e <HAL_RCC_OscConfig+0x2ea>
 8001858:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8170 	beq.w	8001b4e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800186e:	4bd0      	ldr	r3, [pc, #832]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800187a:	4bcd      	ldr	r3, [pc, #820]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	d16d      	bne.n	8001962 <HAL_RCC_OscConfig+0x3ee>
 8001886:	4bca      	ldr	r3, [pc, #808]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800188e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001892:	d166      	bne.n	8001962 <HAL_RCC_OscConfig+0x3ee>
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80018a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d102      	bne.n	80018c4 <HAL_RCC_OscConfig+0x350>
 80018be:	4bbc      	ldr	r3, [pc, #752]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e013      	b.n	80018ec <HAL_RCC_OscConfig+0x378>
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018dc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018e8:	4bb1      	ldr	r3, [pc, #708]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	2202      	movs	r2, #2
 80018ee:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80018f2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80018f6:	fa92 f2a2 	rbit	r2, r2
 80018fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80018fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f042 0220 	orr.w	r2, r2, #32
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_RCC_OscConfig+0x3ba>
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d002      	beq.n	800192e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	f000 bd31 	b.w	8002390 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	4ba0      	ldr	r3, [pc, #640]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	21f8      	movs	r1, #248	; 0xf8
 800193e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001946:	fa91 f1a1 	rbit	r1, r1
 800194a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800194e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001952:	fab1 f181 	clz	r1, r1
 8001956:	b2c9      	uxtb	r1, r1
 8001958:	408b      	lsls	r3, r1
 800195a:	4995      	ldr	r1, [pc, #596]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001960:	e0f5      	b.n	8001b4e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8085 	beq.w	8001a78 <HAL_RCC_OscConfig+0x504>
 800196e:	2301      	movs	r3, #1
 8001970:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001980:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800198e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	461a      	mov	r2, r3
 8001996:	2301      	movs	r3, #1
 8001998:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f969 	bl	8000c70 <HAL_GetTick>
 800199e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff f964 	bl	8000c70 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d902      	bls.n	80019ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	f000 bceb 	b.w	8002390 <HAL_RCC_OscConfig+0xe1c>
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80019cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_OscConfig+0x476>
 80019e4:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e013      	b.n	8001a12 <HAL_RCC_OscConfig+0x49e>
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a02:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a0e:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2202      	movs	r2, #2
 8001a14:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001a18:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a1c:	fa92 f2a2 	rbit	r2, r2
 8001a20:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001a24:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0af      	beq.n	80019a4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	21f8      	movs	r1, #248	; 0xf8
 8001a54:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001a5c:	fa91 f1a1 	rbit	r1, r1
 8001a60:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001a64:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a68:	fab1 f181 	clz	r1, r1
 8001a6c:	b2c9      	uxtb	r1, r1
 8001a6e:	408b      	lsls	r3, r1
 8001a70:	494f      	ldr	r1, [pc, #316]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
 8001a76:	e06a      	b.n	8001b4e <HAL_RCC_OscConfig+0x5da>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001a8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f8e4 	bl	8000c70 <HAL_GetTick>
 8001aa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff f8df 	bl	8000c70 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d902      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	f000 bc66 	b.w	8002390 <HAL_RCC_OscConfig+0xe1c>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ad6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	095b      	lsrs	r3, r3, #5
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <HAL_RCC_OscConfig+0x580>
 8001aee:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	e013      	b.n	8001b1c <HAL_RCC_OscConfig+0x5a8>
 8001af4:	2302      	movs	r3, #2
 8001af6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_OscConfig+0x63c>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001b22:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001b26:	fa92 f2a2 	rbit	r2, r2
 8001b2a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001b2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b32:	fab2 f282 	clz	r2, r2
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f042 0220 	orr.w	r2, r2, #32
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f002 021f 	and.w	r2, r2, #31
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1af      	bne.n	8001aae <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80da 	beq.w	8001d12 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d069      	beq.n	8001c3c <HAL_RCC_OscConfig+0x6c8>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001b7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_OscConfig+0x640>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2301      	movs	r3, #1
 8001b90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f86d 	bl	8000c70 <HAL_GetTick>
 8001b96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e00d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f868 	bl	8000c70 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d905      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e3ef      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	10908120 	.word	0x10908120
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001be8:	2202      	movs	r2, #2
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001bfa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfc:	4ba4      	ldr	r3, [pc, #656]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c04:	2102      	movs	r1, #2
 8001c06:	6019      	str	r1, [r3, #0]
 8001c08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f1a3 	rbit	r1, r3
 8001c12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c16:	6019      	str	r1, [r3, #0]
  return result;
 8001c18:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2101      	movs	r1, #1
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0b0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x628>
 8001c3a:	e06a      	b.n	8001d12 <HAL_RCC_OscConfig+0x79e>
 8001c3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c52:	601a      	str	r2, [r3, #0]
  return result;
 8001c54:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c58:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <HAL_RCC_OscConfig+0x920>)
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe ffff 	bl	8000c70 <HAL_GetTick>
 8001c72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	e009      	b.n	8001c8c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c78:	f7fe fffa 	bl	8000c70 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e381      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
 8001c8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c90:	2202      	movs	r2, #2
 8001c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f2a3 	rbit	r2, r3
 8001c9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ca8:	2202      	movs	r2, #2
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fa93 f2a3 	rbit	r2, r3
 8001cb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001cd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	4b6e      	ldr	r3, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cdc:	2102      	movs	r1, #2
 8001cde:	6019      	str	r1, [r3, #0]
 8001ce0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f1a3 	rbit	r1, r3
 8001cea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cee:	6019      	str	r1, [r3, #0]
  return result;
 8001cf0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1b2      	bne.n	8001c78 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8157 	beq.w	8001fd0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d112      	bne.n	8001d5a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b56      	ldr	r3, [pc, #344]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	4a55      	ldr	r2, [pc, #340]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	61d3      	str	r3, [r2, #28]
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCC_OscConfig+0x924>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d11a      	bne.n	8001d9c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d66:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x924>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a4b      	ldr	r2, [pc, #300]	; (8001e98 <HAL_RCC_OscConfig+0x924>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7fe ff7d 	bl	8000c70 <HAL_GetTick>
 8001d76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	e009      	b.n	8001d90 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7c:	f7fe ff78 	bl	8000c70 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b64      	cmp	r3, #100	; 0x64
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e2ff      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <HAL_RCC_OscConfig+0x924>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ef      	beq.n	8001d7c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x840>
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a39      	ldr	r2, [pc, #228]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	e02f      	b.n	8001e14 <HAL_RCC_OscConfig+0x8a0>
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x864>
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a33      	ldr	r2, [pc, #204]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	e01d      	b.n	8001e14 <HAL_RCC_OscConfig+0x8a0>
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x888>
 8001de2:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x8a0>
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d06a      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe ff27 	bl	8000c70 <HAL_GetTick>
 8001e22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7fe ff22 	bl	8000c70 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e2a7      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
 8001e40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e44:	2202      	movs	r2, #2
 8001e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fa93 f2a3 	rbit	r2, r3
 8001e52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e6e:	601a      	str	r2, [r3, #0]
  return result;
 8001e70:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e74:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0x928>
 8001e8a:	4b01      	ldr	r3, [pc, #4]	; (8001e90 <HAL_RCC_OscConfig+0x91c>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	e013      	b.n	8001eb8 <HAL_RCC_OscConfig+0x944>
 8001e90:	40021000 	.word	0x40021000
 8001e94:	10908120 	.word	0x10908120
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	4bc0      	ldr	r3, [pc, #768]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	6011      	str	r1, [r2, #0]
 8001ec0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	fa92 f1a2 	rbit	r1, r2
 8001eca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ece:	6011      	str	r1, [r2, #0]
  return result;
 8001ed0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	fab2 f282 	clz	r2, r2
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f002 021f 	and.w	r2, r2, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d09a      	beq.n	8001e28 <HAL_RCC_OscConfig+0x8b4>
 8001ef2:	e063      	b.n	8001fbc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7fe febc 	bl	8000c70 <HAL_GetTick>
 8001ef8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	e00b      	b.n	8001f16 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe feb7 	bl	8000c70 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e23c      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
 8001f16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f32:	2202      	movs	r2, #2
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f44:	601a      	str	r2, [r3, #0]
  return result;
 8001f46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0x9f2>
 8001f60:	4b95      	ldr	r3, [pc, #596]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	e00d      	b.n	8001f82 <HAL_RCC_OscConfig+0xa0e>
 8001f66:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	4b8e      	ldr	r3, [pc, #568]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f86:	2102      	movs	r1, #2
 8001f88:	6011      	str	r1, [r2, #0]
 8001f8a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fa92 f1a2 	rbit	r1, r2
 8001f94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f98:	6011      	str	r1, [r2, #0]
  return result;
 8001f9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f002 021f 	and.w	r2, r2, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1a0      	bne.n	8001efe <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fbc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b7c      	ldr	r3, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a7b      	ldr	r2, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8001fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 81d9 	beq.w	800238e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fdc:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	f000 81a6 	beq.w	8002336 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	f040 811e 	bne.w	8002232 <HAL_RCC_OscConfig+0xcbe>
 8001ff6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ffa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800200e:	601a      	str	r2, [r3, #0]
  return result;
 8002010:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002014:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002020:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	461a      	mov	r2, r3
 8002028:	2300      	movs	r3, #0
 800202a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe fe20 	bl	8000c70 <HAL_GetTick>
 8002030:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	e009      	b.n	800204a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002036:	f7fe fe1b 	bl	8000c70 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1a2      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
 800204a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800204e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f2a3 	rbit	r2, r3
 800205e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002062:	601a      	str	r2, [r3, #0]
  return result;
 8002064:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002068:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <HAL_RCC_OscConfig+0xb10>
 800207e:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e01b      	b.n	80020bc <HAL_RCC_OscConfig+0xb48>
 8002084:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800208c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fa93 f2a3 	rbit	r2, r3
 8002098:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80020c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020c4:	6011      	str	r1, [r2, #0]
 80020c6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	fa92 f1a2 	rbit	r1, r2
 80020d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020d4:	6011      	str	r1, [r2, #0]
  return result;
 80020d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	fab2 f282 	clz	r2, r2
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f002 021f 	and.w	r2, r2, #31
 80020ec:	2101      	movs	r1, #1
 80020ee:	fa01 f202 	lsl.w	r2, r1, r2
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d19e      	bne.n	8002036 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f8:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f023 020f 	bic.w	r2, r3, #15
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	492c      	ldr	r1, [pc, #176]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8002108:	4313      	orrs	r3, r2
 800210a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a19      	ldr	r1, [r3, #32]
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	430b      	orrs	r3, r1
 8002122:	4925      	ldr	r1, [pc, #148]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800212c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002140:	601a      	str	r2, [r3, #0]
  return result;
 8002142:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002146:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002152:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	461a      	mov	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe fd87 	bl	8000c70 <HAL_GetTick>
 8002162:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002166:	e009      	b.n	800217c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7fe fd82 	bl	8000c70 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e109      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
 800217c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002194:	601a      	str	r2, [r3, #0]
  return result;
 8002196:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800219a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0xc48>
 80021b0:	4b01      	ldr	r3, [pc, #4]	; (80021b8 <HAL_RCC_OscConfig+0xc44>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e01e      	b.n	80021f4 <HAL_RCC_OscConfig+0xc80>
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fa93 f2a3 	rbit	r2, r3
 80021ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	4b6a      	ldr	r3, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0xe28>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80021f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021fc:	6011      	str	r1, [r2, #0]
 80021fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	fa92 f1a2 	rbit	r1, r2
 8002208:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800220c:	6011      	str	r1, [r2, #0]
  return result;
 800220e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	fab2 f282 	clz	r2, r2
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f042 0220 	orr.w	r2, r2, #32
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f002 021f 	and.w	r2, r2, #31
 8002224:	2101      	movs	r1, #1
 8002226:	fa01 f202 	lsl.w	r2, r1, r2
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d09b      	beq.n	8002168 <HAL_RCC_OscConfig+0xbf4>
 8002230:	e0ad      	b.n	800238e <HAL_RCC_OscConfig+0xe1a>
 8002232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002236:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800223a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800224a:	601a      	str	r2, [r3, #0]
  return result;
 800224c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002250:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800225c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	461a      	mov	r2, r3
 8002264:	2300      	movs	r3, #0
 8002266:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fd02 	bl	8000c70 <HAL_GetTick>
 800226c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	e009      	b.n	8002286 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe fcfd 	bl	8000c70 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e084      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
 8002286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800228e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	fa93 f2a3 	rbit	r2, r3
 800229a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800229e:	601a      	str	r2, [r3, #0]
  return result;
 80022a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_OscConfig+0xd4c>
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <HAL_RCC_OscConfig+0xe28>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	e01b      	b.n	80022f8 <HAL_RCC_OscConfig+0xd84>
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f107 0320 	add.w	r3, r7, #32
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f107 0318 	add.w	r3, r7, #24
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_OscConfig+0xe28>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f107 0214 	add.w	r2, r7, #20
 80022fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002300:	6011      	str	r1, [r2, #0]
 8002302:	f107 0214 	add.w	r2, r7, #20
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	fa92 f1a2 	rbit	r1, r2
 800230c:	f107 0210 	add.w	r2, r7, #16
 8002310:	6011      	str	r1, [r2, #0]
  return result;
 8002312:	f107 0210 	add.w	r2, r7, #16
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f042 0220 	orr.w	r2, r2, #32
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f002 021f 	and.w	r2, r2, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f202 	lsl.w	r2, r1, r2
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d19e      	bne.n	8002272 <HAL_RCC_OscConfig+0xcfe>
 8002334:	e02b      	b.n	800238e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e025      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_RCC_OscConfig+0xe28>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_RCC_OscConfig+0xe28>)
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002354:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002358:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	429a      	cmp	r2, r3
 8002364:	d111      	bne.n	800238a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002366:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800236a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002374:	429a      	cmp	r2, r3
 8002376:	d108      	bne.n	800238a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800237c:	f003 020f 	and.w	r2, r3, #15
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b09e      	sub	sp, #120	; 0x78
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e162      	b.n	800267e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b90      	ldr	r3, [pc, #576]	; (80025fc <HAL_RCC_ClockConfig+0x25c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d910      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b8d      	ldr	r3, [pc, #564]	; (80025fc <HAL_RCC_ClockConfig+0x25c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0207 	bic.w	r2, r3, #7
 80023ce:	498b      	ldr	r1, [pc, #556]	; (80025fc <HAL_RCC_ClockConfig+0x25c>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_RCC_ClockConfig+0x25c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e14a      	b.n	800267e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b82      	ldr	r3, [pc, #520]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	497f      	ldr	r1, [pc, #508]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80dc 	beq.w	80025cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d13c      	bne.n	8002496 <HAL_RCC_ClockConfig+0xf6>
 800241c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002420:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800242a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d102      	bne.n	8002446 <HAL_RCC_ClockConfig+0xa6>
 8002440:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	e00f      	b.n	8002466 <HAL_RCC_ClockConfig+0xc6>
 8002446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	667b      	str	r3, [r7, #100]	; 0x64
 8002454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002458:	663b      	str	r3, [r7, #96]	; 0x60
 800245a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246a:	65ba      	str	r2, [r7, #88]	; 0x58
 800246c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800246e:	fa92 f2a2 	rbit	r2, r2
 8002472:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002474:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002476:	fab2 f282 	clz	r2, r2
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f042 0220 	orr.w	r2, r2, #32
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f002 021f 	and.w	r2, r2, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d17b      	bne.n	800258a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0f3      	b.n	800267e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d13c      	bne.n	8002518 <HAL_RCC_ClockConfig+0x178>
 800249e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x128>
 80024c2:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	e00f      	b.n	80024e8 <HAL_RCC_ClockConfig+0x148>
 80024c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	647b      	str	r3, [r7, #68]	; 0x44
 80024d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024da:	643b      	str	r3, [r7, #64]	; 0x40
 80024dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e4:	4b46      	ldr	r3, [pc, #280]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80024ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f0:	fa92 f2a2 	rbit	r2, r2
 80024f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f8:	fab2 f282 	clz	r2, r2
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f042 0220 	orr.w	r2, r2, #32
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f002 021f 	and.w	r2, r2, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f202 	lsl.w	r2, r1, r2
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d13a      	bne.n	800258a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b2      	b.n	800267e <HAL_RCC_ClockConfig+0x2de>
 8002518:	2302      	movs	r3, #2
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d102      	bne.n	8002540 <HAL_RCC_ClockConfig+0x1a0>
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	e00d      	b.n	800255c <HAL_RCC_ClockConfig+0x1bc>
 8002540:	2302      	movs	r3, #2
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
 800254c:	2302      	movs	r3, #2
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	4b29      	ldr	r3, [pc, #164]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2202      	movs	r2, #2
 800255e:	61ba      	str	r2, [r7, #24]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	617a      	str	r2, [r7, #20]
  return result;
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0220 	orr.w	r2, r2, #32
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e079      	b.n	800267e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	491a      	ldr	r1, [pc, #104]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7fe fb68 	bl	8000c70 <HAL_GetTick>
 80025a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7fe fb64 	bl	8000c70 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e061      	b.n	800267e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_ClockConfig+0x260>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x25c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d214      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCC_ClockConfig+0x25c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4906      	ldr	r1, [pc, #24]	; (80025fc <HAL_RCC_ClockConfig+0x25c>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCC_ClockConfig+0x25c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e040      	b.n	800267e <HAL_RCC_ClockConfig+0x2de>
 80025fc:	40022000 	.word	0x40022000
 8002600:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_ClockConfig+0x2e8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	491a      	ldr	r1, [pc, #104]	; (8002688 <HAL_RCC_ClockConfig+0x2e8>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_RCC_ClockConfig+0x2e8>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4912      	ldr	r1, [pc, #72]	; (8002688 <HAL_RCC_ClockConfig+0x2e8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002642:	f000 f829 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002646:	4601      	mov	r1, r0
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_RCC_ClockConfig+0x2e8>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002650:	22f0      	movs	r2, #240	; 0xf0
 8002652:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	fa92 f2a2 	rbit	r2, r2
 800265a:	60fa      	str	r2, [r7, #12]
  return result;
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	fab2 f282 	clz	r2, r2
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	40d3      	lsrs	r3, r2
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x2ec>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	fa21 f303 	lsr.w	r3, r1, r3
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <HAL_RCC_ClockConfig+0x2f0>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_RCC_ClockConfig+0x2f4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe f9c0 	bl	80009fc <HAL_InitTick>
  
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3778      	adds	r7, #120	; 0x78
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	08007428 	.word	0x08007428
 8002690:	20000000 	.word	0x20000000
 8002694:	20000004 	.word	0x20000004

08002698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	b08b      	sub	sp, #44	; 0x2c
 800269c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026b2:	4b2a      	ldr	r3, [pc, #168]	; (800275c <HAL_RCC_GetSysClockFreq+0xc4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x30>
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x36>
 80026c6:	e03f      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ca:	623b      	str	r3, [r7, #32]
      break;
 80026cc:	e03f      	b.n	800274e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80026d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	fa92 f2a2 	rbit	r2, r2
 80026e0:	607a      	str	r2, [r7, #4]
  return result;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	fab2 f282 	clz	r2, r2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	40d3      	lsrs	r3, r2
 80026ec:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_RCC_GetSysClockFreq+0xc4>)
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	220f      	movs	r2, #15
 80026fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	fa92 f2a2 	rbit	r2, r2
 8002704:	60fa      	str	r2, [r7, #12]
  return result;
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	fab2 f282 	clz	r2, r2
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	40d3      	lsrs	r3, r2
 8002710:	4a15      	ldr	r2, [pc, #84]	; (8002768 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002712:	5cd3      	ldrb	r3, [r2, r3]
 8002714:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002720:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	fbb2 f2f3 	udiv	r2, r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	e007      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fbb2 f2f3 	udiv	r2, r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	623b      	str	r3, [r7, #32]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc8>)
 800274a:	623b      	str	r3, [r7, #32]
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6a3b      	ldr	r3, [r7, #32]
}
 8002750:	4618      	mov	r0, r3
 8002752:	372c      	adds	r7, #44	; 0x2c
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000
 8002760:	007a1200 	.word	0x007a1200
 8002764:	08007440 	.word	0x08007440
 8002768:	08007450 	.word	0x08007450

0800276c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_RCC_GetHCLKFreq+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800278a:	f7ff ffef 	bl	800276c <HAL_RCC_GetHCLKFreq>
 800278e:	4601      	mov	r1, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002798:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800279c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	fa92 f2a2 	rbit	r2, r2
 80027a4:	603a      	str	r2, [r7, #0]
  return result;
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	fab2 f282 	clz	r2, r2
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	40d3      	lsrs	r3, r2
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08007438 	.word	0x08007438

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027ce:	f7ff ffcd 	bl	800276c <HAL_RCC_GetHCLKFreq>
 80027d2:	4601      	mov	r1, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	fa92 f2a2 	rbit	r2, r2
 80027e8:	603a      	str	r2, [r7, #0]
  return result;
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	40d3      	lsrs	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08007438 	.word	0x08007438

0800280c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	220f      	movs	r2, #15
 800281a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_GetClockConfig+0x5c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCC_GetClockConfig+0x5c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_RCC_GetClockConfig+0x5c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	08db      	lsrs	r3, r3, #3
 8002846:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_RCC_GetClockConfig+0x60>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0207 	and.w	r2, r3, #7
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	40022000 	.word	0x40022000

08002870 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b092      	sub	sp, #72	; 0x48
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80d7 	beq.w	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10e      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4a4a      	ldr	r2, [pc, #296]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	61d3      	str	r3, [r2, #28]
 80028ac:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028be:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ca:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a41      	ldr	r2, [pc, #260]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7fe f9cb 	bl	8000c70 <HAL_GetTick>
 80028da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7fe f9c7 	bl	8000c70 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b64      	cmp	r3, #100	; 0x64
 80028ea:	d901      	bls.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e1d6      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028fc:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8084 	beq.w	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002918:	429a      	cmp	r2, r3
 800291a:	d07c      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800291c:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	461a      	mov	r2, r3
 8002946:	2301      	movs	r3, #1
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800294e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	461a      	mov	r2, r3
 800296a:	2300      	movs	r3, #0
 800296c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800296e:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002972:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d04b      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe f977 	bl	8000c70 <HAL_GetTick>
 8002982:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe f973 	bl	8000c70 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e180      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	2302      	movs	r3, #2
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	61fb      	str	r3, [r7, #28]
  return result;
 80029b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d108      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029ca:	4b01      	ldr	r3, [pc, #4]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	e00d      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	10908100 	.word	0x10908100
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	4ba0      	ldr	r3, [pc, #640]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2202      	movs	r2, #2
 80029ee:	613a      	str	r2, [r7, #16]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	fa92 f2a2 	rbit	r2, r2
 80029f6:	60fa      	str	r2, [r7, #12]
  return result;
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	fab2 f282 	clz	r2, r2
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f002 021f 	and.w	r2, r2, #31
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0b7      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a16:	4b95      	ldr	r3, [pc, #596]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4992      	ldr	r1, [pc, #584]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	4b8e      	ldr	r3, [pc, #568]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4a8d      	ldr	r2, [pc, #564]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a48:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f023 0203 	bic.w	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4985      	ldr	r1, [pc, #532]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a66:	4b81      	ldr	r3, [pc, #516]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	497e      	ldr	r1, [pc, #504]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a84:	4b79      	ldr	r3, [pc, #484]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	4976      	ldr	r1, [pc, #472]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa2:	4b72      	ldr	r3, [pc, #456]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f023 0210 	bic.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	496f      	ldr	r1, [pc, #444]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	4967      	ldr	r1, [pc, #412]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f023 0220 	bic.w	r2, r3, #32
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4960      	ldr	r1, [pc, #384]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002afc:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	4958      	ldr	r1, [pc, #352]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b1a:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4951      	ldr	r1, [pc, #324]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b38:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4949      	ldr	r1, [pc, #292]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b56:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4942      	ldr	r1, [pc, #264]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b74:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	493a      	ldr	r1, [pc, #232]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	4933      	ldr	r1, [pc, #204]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bb0:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	492b      	ldr	r1, [pc, #172]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002bce:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4924      	ldr	r1, [pc, #144]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002bec:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	491c      	ldr	r1, [pc, #112]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	4915      	ldr	r1, [pc, #84]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	490d      	ldr	r1, [pc, #52]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	4906      	ldr	r1, [pc, #24]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00c      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c64:	4b01      	ldr	r3, [pc, #4]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	e002      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c78:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	4904      	ldr	r1, [pc, #16]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3748      	adds	r7, #72	; 0x48
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e01d      	b.n	8002cfa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f815 	bl	8002d02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f000 f986 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_TIM_Base_Start_IT+0x50>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d00b      	beq.n	8002d5a <HAL_TIM_Base_Start_IT+0x42>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d007      	beq.n	8002d5a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	00010007 	.word	0x00010007

08002d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d122      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0202 	mvn.w	r2, #2
 8002d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f905 	bl	8002fbe <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8f7 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f908 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d122      	bne.n	8002e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d11b      	bne.n	8002e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0204 	mvn.w	r2, #4
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f8db 	bl	8002fbe <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8cd 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f8de 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d122      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d11b      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0208 	mvn.w	r2, #8
 8002e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2204      	movs	r2, #4
 8002e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8b1 	bl	8002fbe <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8a3 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f8b4 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0210 	mvn.w	r2, #16
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f887 	bl	8002fbe <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f879 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f88a 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0201 	mvn.w	r2, #1
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fc6a 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b80      	cmp	r3, #128	; 0x80
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f918 	bl	800314c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2a:	d10e      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f90b 	bl	8003160 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d10e      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d107      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f838 	bl	8002fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d10e      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d107      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0220 	mvn.w	r2, #32
 8002f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8cb 	bl	8003138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a42      	ldr	r2, [pc, #264]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d00f      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3f      	ldr	r2, [pc, #252]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00b      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3e      	ldr	r2, [pc, #248]	; (8003120 <TIM_Base_SetConfig+0x124>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3d      	ldr	r2, [pc, #244]	; (8003124 <TIM_Base_SetConfig+0x128>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3c      	ldr	r2, [pc, #240]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d108      	bne.n	800304e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a31      	ldr	r2, [pc, #196]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01f      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d01b      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2e      	ldr	r2, [pc, #184]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d017      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <TIM_Base_SetConfig+0x124>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <TIM_Base_SetConfig+0x128>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00f      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a2c      	ldr	r2, [pc, #176]	; (800312c <TIM_Base_SetConfig+0x130>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <TIM_Base_SetConfig+0x134>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <TIM_Base_SetConfig+0x138>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a25      	ldr	r2, [pc, #148]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a12      	ldr	r2, [pc, #72]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <TIM_Base_SetConfig+0x100>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a13      	ldr	r2, [pc, #76]	; (8003124 <TIM_Base_SetConfig+0x128>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00f      	beq.n	80030fc <TIM_Base_SetConfig+0x100>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <TIM_Base_SetConfig+0x130>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00b      	beq.n	80030fc <TIM_Base_SetConfig+0x100>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <TIM_Base_SetConfig+0x134>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d007      	beq.n	80030fc <TIM_Base_SetConfig+0x100>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a11      	ldr	r2, [pc, #68]	; (8003134 <TIM_Base_SetConfig+0x138>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_Base_SetConfig+0x100>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d103      	bne.n	8003104 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	615a      	str	r2, [r3, #20]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40000400 	.word	0x40000400
 8003120:	40000800 	.word	0x40000800
 8003124:	40013400 	.word	0x40013400
 8003128:	40015000 	.word	0x40015000
 800312c:	40014000 	.word	0x40014000
 8003130:	40014400 	.word	0x40014400
 8003134:	40014800 	.word	0x40014800

08003138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e040      	b.n	8003208 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fb56 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	; 0x24
 80031a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa0c 	bl	80035d0 <UART_SetConfig>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e022      	b.n	8003208 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fc1a 	bl	8003a04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fca1 	bl	8003b48 <UART_CheckIdleState>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	2b20      	cmp	r3, #32
 8003224:	d164      	bne.n	80032f0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_Transmit_DMA+0x22>
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e05d      	b.n	80032f2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_UART_Transmit_DMA+0x34>
 8003240:	2302      	movs	r3, #2
 8003242:	e056      	b.n	80032f2 <HAL_UART_Transmit_DMA+0xe2>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	88fa      	ldrh	r2, [r7, #6]
 8003256:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2221      	movs	r2, #33	; 0x21
 800326c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02a      	beq.n	80032cc <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800327a:	4a20      	ldr	r2, [pc, #128]	; (80032fc <HAL_UART_Transmit_DMA+0xec>)
 800327c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003282:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_UART_Transmit_DMA+0xf0>)
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_UART_Transmit_DMA+0xf4>)
 800328c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003292:	2200      	movs	r2, #0
 8003294:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	4619      	mov	r1, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3328      	adds	r3, #40	; 0x28
 80032a6:	461a      	mov	r2, r3
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	f7fd fe16 	bl	8000eda <HAL_DMA_Start_IT>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2210      	movs	r2, #16
 80032b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e012      	b.n	80032f2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2240      	movs	r2, #64	; 0x40
 80032d2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ea:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	08003d33 	.word	0x08003d33
 8003300:	08003d81 	.word	0x08003d81
 8003304:	08003d9d 	.word	0x08003d9d

08003308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f640 030f 	movw	r3, #2063	; 0x80f
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00e      	beq.n	8003360 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8114 	beq.w	800357e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
      }
      return;
 800335e:	e10e      	b.n	800357e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80d6 	beq.w	8003514 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80cb 	beq.w	8003514 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00e      	beq.n	80033a6 <HAL_UART_IRQHandler+0x9e>
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <HAL_UART_IRQHandler+0xc6>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2202      	movs	r2, #2
 80033c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c6:	f043 0204 	orr.w	r2, r3, #4
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <HAL_UART_IRQHandler+0xee>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2204      	movs	r2, #4
 80033e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ee:	f043 0202 	orr.w	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2208      	movs	r2, #8
 800341a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003420:	f043 0208 	orr.w	r2, r3, #8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00f      	beq.n	8003452 <HAL_UART_IRQHandler+0x14a>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800344a:	f043 0220 	orr.w	r2, r3, #32
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8093 	beq.w	8003582 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003484:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d004      	beq.n	800349e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d031      	beq.n	8003502 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fc27 	bl	8003cf2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d123      	bne.n	80034fa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d013      	beq.n	80034f2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ce:	4a30      	ldr	r2, [pc, #192]	; (8003590 <HAL_UART_IRQHandler+0x288>)
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd fd5e 	bl	8000f98 <HAL_DMA_Abort_IT>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034ec:	4610      	mov	r0, r2
 80034ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f0:	e00e      	b.n	8003510 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f862 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f8:	e00a      	b.n	8003510 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f85e 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	e006      	b.n	8003510 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f85a 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800350e:	e038      	b.n	8003582 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003510:	bf00      	nop
    return;
 8003512:	e036      	b.n	8003582 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <HAL_UART_IRQHandler+0x232>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fc9d 	bl	8003e72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003538:	e026      	b.n	8003588 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
    }
    return;
 800355e:	e012      	b.n	8003586 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <HAL_UART_IRQHandler+0x280>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fc63 	bl	8003e40 <UART_EndTransmit_IT>
    return;
 800357a:	bf00      	nop
 800357c:	e004      	b.n	8003588 <HAL_UART_IRQHandler+0x280>
      return;
 800357e:	bf00      	nop
 8003580:	e002      	b.n	8003588 <HAL_UART_IRQHandler+0x280>
    return;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_UART_IRQHandler+0x280>
    return;
 8003586:	bf00      	nop
  }

}
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	08003e15 	.word	0x08003e15

08003594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4bac      	ldr	r3, [pc, #688]	; (80038b0 <UART_SetConfig+0x2e0>)
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	6939      	ldr	r1, [r7, #16]
 8003608:	430b      	orrs	r3, r1
 800360a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	430a      	orrs	r2, r1
 8003644:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a9a      	ldr	r2, [pc, #616]	; (80038b4 <UART_SetConfig+0x2e4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d121      	bne.n	8003694 <UART_SetConfig+0xc4>
 8003650:	4b99      	ldr	r3, [pc, #612]	; (80038b8 <UART_SetConfig+0x2e8>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d817      	bhi.n	800368c <UART_SetConfig+0xbc>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <UART_SetConfig+0x94>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003681 	.word	0x08003681
 800366c:	08003687 	.word	0x08003687
 8003670:	0800367b 	.word	0x0800367b
 8003674:	2301      	movs	r3, #1
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e0b2      	b.n	80037e0 <UART_SetConfig+0x210>
 800367a:	2302      	movs	r3, #2
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e0af      	b.n	80037e0 <UART_SetConfig+0x210>
 8003680:	2304      	movs	r3, #4
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e0ac      	b.n	80037e0 <UART_SetConfig+0x210>
 8003686:	2308      	movs	r3, #8
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e0a9      	b.n	80037e0 <UART_SetConfig+0x210>
 800368c:	2310      	movs	r3, #16
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	bf00      	nop
 8003692:	e0a5      	b.n	80037e0 <UART_SetConfig+0x210>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a88      	ldr	r2, [pc, #544]	; (80038bc <UART_SetConfig+0x2ec>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d123      	bne.n	80036e6 <UART_SetConfig+0x116>
 800369e:	4b86      	ldr	r3, [pc, #536]	; (80038b8 <UART_SetConfig+0x2e8>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036aa:	d012      	beq.n	80036d2 <UART_SetConfig+0x102>
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d802      	bhi.n	80036b8 <UART_SetConfig+0xe8>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <UART_SetConfig+0xf6>
 80036b6:	e012      	b.n	80036de <UART_SetConfig+0x10e>
 80036b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036bc:	d00c      	beq.n	80036d8 <UART_SetConfig+0x108>
 80036be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036c2:	d003      	beq.n	80036cc <UART_SetConfig+0xfc>
 80036c4:	e00b      	b.n	80036de <UART_SetConfig+0x10e>
 80036c6:	2300      	movs	r3, #0
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e089      	b.n	80037e0 <UART_SetConfig+0x210>
 80036cc:	2302      	movs	r3, #2
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e086      	b.n	80037e0 <UART_SetConfig+0x210>
 80036d2:	2304      	movs	r3, #4
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e083      	b.n	80037e0 <UART_SetConfig+0x210>
 80036d8:	2308      	movs	r3, #8
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e080      	b.n	80037e0 <UART_SetConfig+0x210>
 80036de:	2310      	movs	r3, #16
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	bf00      	nop
 80036e4:	e07c      	b.n	80037e0 <UART_SetConfig+0x210>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a75      	ldr	r2, [pc, #468]	; (80038c0 <UART_SetConfig+0x2f0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d123      	bne.n	8003738 <UART_SetConfig+0x168>
 80036f0:	4b71      	ldr	r3, [pc, #452]	; (80038b8 <UART_SetConfig+0x2e8>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80036f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036fc:	d012      	beq.n	8003724 <UART_SetConfig+0x154>
 80036fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003702:	d802      	bhi.n	800370a <UART_SetConfig+0x13a>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <UART_SetConfig+0x148>
 8003708:	e012      	b.n	8003730 <UART_SetConfig+0x160>
 800370a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800370e:	d00c      	beq.n	800372a <UART_SetConfig+0x15a>
 8003710:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003714:	d003      	beq.n	800371e <UART_SetConfig+0x14e>
 8003716:	e00b      	b.n	8003730 <UART_SetConfig+0x160>
 8003718:	2300      	movs	r3, #0
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e060      	b.n	80037e0 <UART_SetConfig+0x210>
 800371e:	2302      	movs	r3, #2
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e05d      	b.n	80037e0 <UART_SetConfig+0x210>
 8003724:	2304      	movs	r3, #4
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e05a      	b.n	80037e0 <UART_SetConfig+0x210>
 800372a:	2308      	movs	r3, #8
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e057      	b.n	80037e0 <UART_SetConfig+0x210>
 8003730:	2310      	movs	r3, #16
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	bf00      	nop
 8003736:	e053      	b.n	80037e0 <UART_SetConfig+0x210>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a61      	ldr	r2, [pc, #388]	; (80038c4 <UART_SetConfig+0x2f4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d123      	bne.n	800378a <UART_SetConfig+0x1ba>
 8003742:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <UART_SetConfig+0x2e8>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374e:	d012      	beq.n	8003776 <UART_SetConfig+0x1a6>
 8003750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003754:	d802      	bhi.n	800375c <UART_SetConfig+0x18c>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <UART_SetConfig+0x19a>
 800375a:	e012      	b.n	8003782 <UART_SetConfig+0x1b2>
 800375c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003760:	d00c      	beq.n	800377c <UART_SetConfig+0x1ac>
 8003762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003766:	d003      	beq.n	8003770 <UART_SetConfig+0x1a0>
 8003768:	e00b      	b.n	8003782 <UART_SetConfig+0x1b2>
 800376a:	2300      	movs	r3, #0
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e037      	b.n	80037e0 <UART_SetConfig+0x210>
 8003770:	2302      	movs	r3, #2
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e034      	b.n	80037e0 <UART_SetConfig+0x210>
 8003776:	2304      	movs	r3, #4
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e031      	b.n	80037e0 <UART_SetConfig+0x210>
 800377c:	2308      	movs	r3, #8
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e02e      	b.n	80037e0 <UART_SetConfig+0x210>
 8003782:	2310      	movs	r3, #16
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	bf00      	nop
 8003788:	e02a      	b.n	80037e0 <UART_SetConfig+0x210>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <UART_SetConfig+0x2f8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d123      	bne.n	80037dc <UART_SetConfig+0x20c>
 8003794:	4b48      	ldr	r3, [pc, #288]	; (80038b8 <UART_SetConfig+0x2e8>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d012      	beq.n	80037c8 <UART_SetConfig+0x1f8>
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a6:	d802      	bhi.n	80037ae <UART_SetConfig+0x1de>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <UART_SetConfig+0x1ec>
 80037ac:	e012      	b.n	80037d4 <UART_SetConfig+0x204>
 80037ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b2:	d00c      	beq.n	80037ce <UART_SetConfig+0x1fe>
 80037b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037b8:	d003      	beq.n	80037c2 <UART_SetConfig+0x1f2>
 80037ba:	e00b      	b.n	80037d4 <UART_SetConfig+0x204>
 80037bc:	2300      	movs	r3, #0
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e00e      	b.n	80037e0 <UART_SetConfig+0x210>
 80037c2:	2302      	movs	r3, #2
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e00b      	b.n	80037e0 <UART_SetConfig+0x210>
 80037c8:	2304      	movs	r3, #4
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e008      	b.n	80037e0 <UART_SetConfig+0x210>
 80037ce:	2308      	movs	r3, #8
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e005      	b.n	80037e0 <UART_SetConfig+0x210>
 80037d4:	2310      	movs	r3, #16
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	bf00      	nop
 80037da:	e001      	b.n	80037e0 <UART_SetConfig+0x210>
 80037dc:	2310      	movs	r3, #16
 80037de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e8:	f040 8090 	bne.w	800390c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80037ec:	7ffb      	ldrb	r3, [r7, #31]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d86c      	bhi.n	80038cc <UART_SetConfig+0x2fc>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <UART_SetConfig+0x228>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	0800381d 	.word	0x0800381d
 80037fc:	0800383d 	.word	0x0800383d
 8003800:	0800385d 	.word	0x0800385d
 8003804:	080038cd 	.word	0x080038cd
 8003808:	08003879 	.word	0x08003879
 800380c:	080038cd 	.word	0x080038cd
 8003810:	080038cd 	.word	0x080038cd
 8003814:	080038cd 	.word	0x080038cd
 8003818:	08003899 	.word	0x08003899
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800381c:	f7fe ffb2 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003820:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	005a      	lsls	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	b29b      	uxth	r3, r3
 8003838:	61bb      	str	r3, [r7, #24]
        break;
 800383a:	e04a      	b.n	80038d2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7fe ffc4 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003840:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	005a      	lsls	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	441a      	add	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	b29b      	uxth	r3, r3
 8003858:	61bb      	str	r3, [r7, #24]
        break;
 800385a:	e03a      	b.n	80038d2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	085b      	lsrs	r3, r3, #1
 8003862:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003866:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6852      	ldr	r2, [r2, #4]
 800386e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003872:	b29b      	uxth	r3, r3
 8003874:	61bb      	str	r3, [r7, #24]
        break;
 8003876:	e02c      	b.n	80038d2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003878:	f7fe ff0e 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 800387c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	005a      	lsls	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	61bb      	str	r3, [r7, #24]
        break;
 8003896:	e01c      	b.n	80038d2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	61bb      	str	r3, [r7, #24]
        break;
 80038ae:	e010      	b.n	80038d2 <UART_SetConfig+0x302>
 80038b0:	efff69f3 	.word	0xefff69f3
 80038b4:	40013800 	.word	0x40013800
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40004400 	.word	0x40004400
 80038c0:	40004800 	.word	0x40004800
 80038c4:	40004c00 	.word	0x40004c00
 80038c8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	75fb      	strb	r3, [r7, #23]
        break;
 80038d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d916      	bls.n	8003906 <UART_SetConfig+0x336>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038de:	d212      	bcs.n	8003906 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f023 030f 	bic.w	r3, r3, #15
 80038e8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	897b      	ldrh	r3, [r7, #10]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	897a      	ldrh	r2, [r7, #10]
 8003902:	60da      	str	r2, [r3, #12]
 8003904:	e072      	b.n	80039ec <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
 800390a:	e06f      	b.n	80039ec <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800390c:	7ffb      	ldrb	r3, [r7, #31]
 800390e:	2b08      	cmp	r3, #8
 8003910:	d85b      	bhi.n	80039ca <UART_SetConfig+0x3fa>
 8003912:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x348>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	0800393d 	.word	0x0800393d
 800391c:	0800395b 	.word	0x0800395b
 8003920:	08003979 	.word	0x08003979
 8003924:	080039cb 	.word	0x080039cb
 8003928:	08003995 	.word	0x08003995
 800392c:	080039cb 	.word	0x080039cb
 8003930:	080039cb 	.word	0x080039cb
 8003934:	080039cb 	.word	0x080039cb
 8003938:	080039b3 	.word	0x080039b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7fe ff22 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003940:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	085a      	lsrs	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	441a      	add	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	b29b      	uxth	r3, r3
 8003956:	61bb      	str	r3, [r7, #24]
        break;
 8003958:	e03a      	b.n	80039d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800395a:	f7fe ff35 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 800395e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	085a      	lsrs	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	61bb      	str	r3, [r7, #24]
        break;
 8003976:	e02b      	b.n	80039d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003982:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6852      	ldr	r2, [r2, #4]
 800398a:	fbb3 f3f2 	udiv	r3, r3, r2
 800398e:	b29b      	uxth	r3, r3
 8003990:	61bb      	str	r3, [r7, #24]
        break;
 8003992:	e01d      	b.n	80039d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003994:	f7fe fe80 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8003998:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	085a      	lsrs	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	61bb      	str	r3, [r7, #24]
        break;
 80039b0:	e00e      	b.n	80039d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	61bb      	str	r3, [r7, #24]
        break;
 80039c8:	e002      	b.n	80039d0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
        break;
 80039ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	d908      	bls.n	80039e8 <UART_SetConfig+0x418>
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d204      	bcs.n	80039e8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	e001      	b.n	80039ec <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop

08003a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01a      	beq.n	8003b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b02:	d10a      	bne.n	8003b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b56:	f7fd f88b 	bl	8000c70 <HAL_GetTick>
 8003b5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d10e      	bne.n	8003b88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f82a 	bl	8003bd2 <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e020      	b.n	8003bca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d10e      	bne.n	8003bb4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f814 	bl	8003bd2 <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e00a      	b.n	8003bca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	603b      	str	r3, [r7, #0]
 8003bde:	4613      	mov	r3, r2
 8003be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be2:	e05d      	b.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d059      	beq.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bec:	f7fd f840 	bl	8000c70 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d302      	bcc.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11b      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e042      	b.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d02b      	beq.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c56:	d123      	bne.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c60:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e00f      	b.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d092      	beq.n	8003be4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cde:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d08:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d014      	beq.n	8003d72 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d5e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d70:	e002      	b.n	8003d78 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff fc0e 	bl	8003594 <HAL_UART_TxCpltCallback>
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f7ff fc0a 	bl	80035a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d109      	bne.n	8003dd8 <UART_DMAError+0x3c>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b21      	cmp	r3, #33	; 0x21
 8003dc8:	d106      	bne.n	8003dd8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff78 	bl	8003cc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d109      	bne.n	8003dfa <UART_DMAError+0x5e>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b22      	cmp	r3, #34	; 0x22
 8003dea:	d106      	bne.n	8003dfa <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003df4:	6978      	ldr	r0, [r7, #20]
 8003df6:	f7ff ff7c 	bl	8003cf2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfe:	f043 0210 	orr.w	r2, r3, #16
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff fbd8 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff fbc2 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fb95 	bl	8003594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8003e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000224 	.word	0x20000224
 8003eb8:	20000280 	.word	0x20000280

08003ebc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ecc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a06      	ldr	r2, [pc, #24]	; (8003eec <vApplicationGetTimerTaskMemory+0x30>)
 8003ed2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eda:	601a      	str	r2, [r3, #0]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000480 	.word	0x20000480
 8003eec:	200004dc 	.word	0x200004dc

08003ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f103 0208 	add.w	r2, r3, #8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f103 0208 	add.w	r2, r3, #8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f103 0208 	add.w	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f92:	b480      	push	{r7}
 8003f94:	b085      	sub	sp, #20
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d103      	bne.n	8003fb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e00c      	b.n	8003fcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e002      	b.n	8003fc0 <vListInsert+0x2e>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d2f6      	bcs.n	8003fba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6852      	ldr	r2, [r2, #4]
 8004024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d103      	bne.n	8004038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	1e5a      	subs	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	e7fe      	b.n	800407e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004080:	f002 fa3c 	bl	80064fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408c:	68f9      	ldr	r1, [r7, #12]
 800408e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	441a      	add	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	3b01      	subs	r3, #1
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	22ff      	movs	r2, #255	; 0xff
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d114      	bne.n	8004100 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01a      	beq.n	8004114 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3310      	adds	r3, #16
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fa36 	bl	8005554 <xTaskRemoveFromEventList>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d012      	beq.n	8004114 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <xQueueGenericReset+0xcc>)
 80040f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	e009      	b.n	8004114 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3310      	adds	r3, #16
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fef3 	bl	8003ef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3324      	adds	r3, #36	; 0x24
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff feee 	bl	8003ef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004114:	f002 fa20 	bl	8006558 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004118:	2301      	movs	r3, #1
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	; 0x38
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <xQueueGenericCreateStatic+0x28>
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
 800414e:	e7fe      	b.n	800414e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <xQueueGenericCreateStatic+0x42>
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
 8004168:	e7fe      	b.n	8004168 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <xQueueGenericCreateStatic+0x4e>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <xQueueGenericCreateStatic+0x52>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <xQueueGenericCreateStatic+0x54>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <xQueueGenericCreateStatic+0x6c>
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	e7fe      	b.n	8004192 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <xQueueGenericCreateStatic+0x78>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <xQueueGenericCreateStatic+0x7c>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <xQueueGenericCreateStatic+0x7e>
 80041a4:	2300      	movs	r3, #0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <xQueueGenericCreateStatic+0x96>
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	e7fe      	b.n	80041bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041be:	2350      	movs	r3, #80	; 0x50
 80041c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b50      	cmp	r3, #80	; 0x50
 80041c6:	d009      	beq.n	80041dc <xQueueGenericCreateStatic+0xb4>
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e7fe      	b.n	80041da <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f842 	bl	8004286 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004204:	4618      	mov	r0, r3
 8004206:	3730      	adds	r7, #48	; 0x30
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <xQueueGenericCreate+0x28>
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	e7fe      	b.n	8004232 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	e004      	b.n	800424a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3350      	adds	r3, #80	; 0x50
 800424e:	4618      	mov	r0, r3
 8004250:	f002 fa6e 	bl	8006730 <pvPortMalloc>
 8004254:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00f      	beq.n	800427c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	3350      	adds	r3, #80	; 0x50
 8004260:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800426a:	79fa      	ldrb	r2, [r7, #7]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f805 	bl	8004286 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800427c:	69bb      	ldr	r3, [r7, #24]
	}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e002      	b.n	80042a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042b4:	2101      	movs	r1, #1
 80042b6:	69b8      	ldr	r0, [r7, #24]
 80042b8:	f7ff fece 	bl	8004058 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08e      	sub	sp, #56	; 0x38
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042da:	2300      	movs	r3, #0
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <xQueueGenericSend+0x30>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fa:	e7fe      	b.n	80042fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <xQueueGenericSend+0x3e>
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <xQueueGenericSend+0x42>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <xQueueGenericSend+0x44>
 800430e:	2300      	movs	r3, #0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <xQueueGenericSend+0x5c>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
 8004326:	e7fe      	b.n	8004326 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d103      	bne.n	8004336 <xQueueGenericSend+0x6a>
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <xQueueGenericSend+0x6e>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueGenericSend+0x70>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <xQueueGenericSend+0x88>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	e7fe      	b.n	8004352 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004354:	f001 faba 	bl	80058cc <xTaskGetSchedulerState>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <xQueueGenericSend+0x98>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <xQueueGenericSend+0x9c>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <xQueueGenericSend+0x9e>
 8004368:	2300      	movs	r3, #0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <xQueueGenericSend+0xb6>
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e7fe      	b.n	8004380 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004382:	f002 f8bb 	bl	80064fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <xQueueGenericSend+0xcc>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d129      	bne.n	80043ec <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439e:	f000 fb1f 	bl	80049e0 <prvCopyDataToQueue>
 80043a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	3324      	adds	r3, #36	; 0x24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 f8cf 	bl	8005554 <xTaskRemoveFromEventList>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d013      	beq.n	80043e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043bc:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <xQueueGenericSend+0x1f0>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	e00a      	b.n	80043e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043d4:	4b39      	ldr	r3, [pc, #228]	; (80044bc <xQueueGenericSend+0x1f0>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043e4:	f002 f8b8 	bl	8006558 <vPortExitCritical>
				return pdPASS;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e063      	b.n	80044b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043f2:	f002 f8b1 	bl	8006558 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e05c      	b.n	80044b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	4618      	mov	r0, r3
 8004406:	f001 f907 	bl	8005618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800440e:	f002 f8a3 	bl	8006558 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004412:	f000 fe7d 	bl	8005110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004416:	f002 f871 	bl	80064fc <vPortEnterCritical>
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004420:	b25b      	sxtb	r3, r3
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d103      	bne.n	8004430 <xQueueGenericSend+0x164>
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004436:	b25b      	sxtb	r3, r3
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x17a>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004446:	f002 f887 	bl	8006558 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800444a:	1d3a      	adds	r2, r7, #4
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f001 f8f6 	bl	8005644 <xTaskCheckForTimeOut>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d124      	bne.n	80044a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800445e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004460:	f000 fbb6 	bl	8004bd0 <prvIsQueueFull>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	3310      	adds	r3, #16
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f820 	bl	80054b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800447a:	f000 fb41 	bl	8004b00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800447e:	f000 fe55 	bl	800512c <xTaskResumeAll>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f af7c 	bne.w	8004382 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <xQueueGenericSend+0x1f0>)
 800448c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	e772      	b.n	8004382 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800449c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449e:	f000 fb2f 	bl	8004b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a2:	f000 fe43 	bl	800512c <xTaskResumeAll>
 80044a6:	e76c      	b.n	8004382 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044aa:	f000 fb29 	bl	8004b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044ae:	f000 fe3d 	bl	800512c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044b2:	2300      	movs	r3, #0
		}
	}
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3738      	adds	r7, #56	; 0x38
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08e      	sub	sp, #56	; 0x38
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <xQueueGenericSendFromISR+0x2c>
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	e7fe      	b.n	80044ea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <xQueueGenericSendFromISR+0x3a>
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <xQueueGenericSendFromISR+0x3e>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <xQueueGenericSendFromISR+0x40>
 80044fe:	2300      	movs	r3, #0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <xQueueGenericSendFromISR+0x58>
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	e7fe      	b.n	8004516 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d103      	bne.n	8004526 <xQueueGenericSendFromISR+0x66>
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <xQueueGenericSendFromISR+0x6a>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <xQueueGenericSendFromISR+0x6c>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <xQueueGenericSendFromISR+0x84>
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e7fe      	b.n	8004542 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004544:	f002 f8b6 	bl	80066b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004548:	f3ef 8211 	mrs	r2, BASEPRI
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	61ba      	str	r2, [r7, #24]
 800455e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004560:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456c:	429a      	cmp	r2, r3
 800456e:	d302      	bcc.n	8004576 <xQueueGenericSendFromISR+0xb6>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d12c      	bne.n	80045d0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004586:	f000 fa2b 	bl	80049e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800458a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d112      	bne.n	80045ba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d016      	beq.n	80045ca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	3324      	adds	r3, #36	; 0x24
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 ffd7 	bl	8005554 <xTaskRemoveFromEventList>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e007      	b.n	80045ca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045be:	3301      	adds	r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	b25a      	sxtb	r2, r3
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045ca:	2301      	movs	r3, #1
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80045ce:	e001      	b.n	80045d4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3738      	adds	r7, #56	; 0x38
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08c      	sub	sp, #48	; 0x30
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <xQueueReceive+0x2e>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	e7fe      	b.n	8004614 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <xQueueReceive+0x3c>
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <xQueueReceive+0x40>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <xQueueReceive+0x42>
 8004628:	2300      	movs	r3, #0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <xQueueReceive+0x5a>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	e7fe      	b.n	8004640 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004642:	f001 f943 	bl	80058cc <xTaskGetSchedulerState>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <xQueueReceive+0x6a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <xQueueReceive+0x6e>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueReceive+0x70>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <xQueueReceive+0x88>
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e7fe      	b.n	800466e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004670:	f001 ff44 	bl	80064fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01f      	beq.n	80046c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004684:	f000 fa16 	bl	8004ab4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1e5a      	subs	r2, r3, #1
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	3310      	adds	r3, #16
 800469c:	4618      	mov	r0, r3
 800469e:	f000 ff59 	bl	8005554 <xTaskRemoveFromEventList>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046a8:	4b3c      	ldr	r3, [pc, #240]	; (800479c <xQueueReceive+0x1b4>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046b8:	f001 ff4e 	bl	8006558 <vPortExitCritical>
				return pdPASS;
 80046bc:	2301      	movs	r3, #1
 80046be:	e069      	b.n	8004794 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046c6:	f001 ff47 	bl	8006558 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e062      	b.n	8004794 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046d4:	f107 0310 	add.w	r3, r7, #16
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 ff9d 	bl	8005618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046de:	2301      	movs	r3, #1
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046e2:	f001 ff39 	bl	8006558 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046e6:	f000 fd13 	bl	8005110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046ea:	f001 ff07 	bl	80064fc <vPortEnterCritical>
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f4:	b25b      	sxtb	r3, r3
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d103      	bne.n	8004704 <xQueueReceive+0x11c>
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800470a:	b25b      	sxtb	r3, r3
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d103      	bne.n	800471a <xQueueReceive+0x132>
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800471a:	f001 ff1d 	bl	8006558 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800471e:	1d3a      	adds	r2, r7, #4
 8004720:	f107 0310 	add.w	r3, r7, #16
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f000 ff8c 	bl	8005644 <xTaskCheckForTimeOut>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d123      	bne.n	800477a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004734:	f000 fa36 	bl	8004ba4 <prvIsQueueEmpty>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d017      	beq.n	800476e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	3324      	adds	r3, #36	; 0x24
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 feb6 	bl	80054b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800474c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474e:	f000 f9d7 	bl	8004b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004752:	f000 fceb 	bl	800512c <xTaskResumeAll>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d189      	bne.n	8004670 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <xQueueReceive+0x1b4>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	e780      	b.n	8004670 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800476e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004770:	f000 f9c6 	bl	8004b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004774:	f000 fcda 	bl	800512c <xTaskResumeAll>
 8004778:	e77a      	b.n	8004670 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800477a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477c:	f000 f9c0 	bl	8004b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004780:	f000 fcd4 	bl	800512c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004786:	f000 fa0d 	bl	8004ba4 <prvIsQueueEmpty>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	f43f af6f 	beq.w	8004670 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004792:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004794:	4618      	mov	r0, r3
 8004796:	3730      	adds	r7, #48	; 0x30
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08e      	sub	sp, #56	; 0x38
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <xQueueSemaphoreTake+0x30>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	e7fe      	b.n	80047ce <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <xQueueSemaphoreTake+0x4c>
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e7fe      	b.n	80047ea <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ec:	f001 f86e 	bl	80058cc <xTaskGetSchedulerState>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <xQueueSemaphoreTake+0x5c>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <xQueueSemaphoreTake+0x60>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <xQueueSemaphoreTake+0x62>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <xQueueSemaphoreTake+0x7a>
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	e7fe      	b.n	8004818 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800481a:	f001 fe6f 	bl	80064fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d024      	beq.n	8004874 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800483a:	f001 f9c3 	bl	8005bc4 <pvTaskIncrementMutexHeldCount>
 800483e:	4602      	mov	r2, r0
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00f      	beq.n	800486c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	3310      	adds	r3, #16
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fe7f 	bl	8005554 <xTaskRemoveFromEventList>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <xQueueSemaphoreTake+0x20c>)
 800485e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800486c:	f001 fe74 	bl	8006558 <vPortExitCritical>
				return pdPASS;
 8004870:	2301      	movs	r3, #1
 8004872:	e096      	b.n	80049a2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d110      	bne.n	800489c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <xQueueSemaphoreTake+0xf4>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e7fe      	b.n	8004892 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004894:	f001 fe60 	bl	8006558 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004898:	2300      	movs	r3, #0
 800489a:	e082      	b.n	80049a2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800489c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 feb6 	bl	8005618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048b0:	f001 fe52 	bl	8006558 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048b4:	f000 fc2c 	bl	8005110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048b8:	f001 fe20 	bl	80064fc <vPortEnterCritical>
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c2:	b25b      	sxtb	r3, r3
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d103      	bne.n	80048d2 <xQueueSemaphoreTake+0x132>
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d103      	bne.n	80048e8 <xQueueSemaphoreTake+0x148>
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e8:	f001 fe36 	bl	8006558 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ec:	463a      	mov	r2, r7
 80048ee:	f107 030c 	add.w	r3, r7, #12
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fea5 	bl	8005644 <xTaskCheckForTimeOut>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d132      	bne.n	8004966 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004902:	f000 f94f 	bl	8004ba4 <prvIsQueueEmpty>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d026      	beq.n	800495a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004914:	f001 fdf2 	bl	80064fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fff3 	bl	8005908 <xTaskPriorityInherit>
 8004922:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004924:	f001 fe18 	bl	8006558 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	3324      	adds	r3, #36	; 0x24
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	4611      	mov	r1, r2
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fdc1 	bl	80054b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004938:	f000 f8e2 	bl	8004b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800493c:	f000 fbf6 	bl	800512c <xTaskResumeAll>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	f47f af69 	bne.w	800481a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004948:	4b18      	ldr	r3, [pc, #96]	; (80049ac <xQueueSemaphoreTake+0x20c>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	e75f      	b.n	800481a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800495a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800495c:	f000 f8d0 	bl	8004b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004960:	f000 fbe4 	bl	800512c <xTaskResumeAll>
 8004964:	e759      	b.n	800481a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004968:	f000 f8ca 	bl	8004b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800496c:	f000 fbde 	bl	800512c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004972:	f000 f917 	bl	8004ba4 <prvIsQueueEmpty>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	f43f af4e 	beq.w	800481a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00d      	beq.n	80049a0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004984:	f001 fdba 	bl	80064fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800498a:	f000 f811 	bl	80049b0 <prvGetDisinheritPriorityAfterTimeout>
 800498e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004996:	4618      	mov	r0, r3
 8004998:	f001 f890 	bl	8005abc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800499c:	f001 fddc 	bl	8006558 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3738      	adds	r7, #56	; 0x38
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d006      	beq.n	80049ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e001      	b.n	80049d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80049d2:	68fb      	ldr	r3, [r7, #12]
	}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d14d      	bne.n	8004aa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 ffea 	bl	80059e4 <xTaskPriorityDisinherit>
 8004a10:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	e043      	b.n	8004aa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d119      	bne.n	8004a54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6898      	ldr	r0, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	f002 f880 	bl	8006b30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	441a      	add	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d32b      	bcc.n	8004aa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	e026      	b.n	8004aa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68d8      	ldr	r0, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	f002 f866 	bl	8006b30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	441a      	add	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d207      	bcs.n	8004a90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	425b      	negs	r3, r3
 8004a8a:	441a      	add	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d105      	bne.n	8004aa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004aaa:	697b      	ldr	r3, [r7, #20]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d018      	beq.n	8004af8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	441a      	add	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d303      	bcc.n	8004ae8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68d9      	ldr	r1, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	461a      	mov	r2, r3
 8004af2:	6838      	ldr	r0, [r7, #0]
 8004af4:	f002 f81c 	bl	8006b30 <memcpy>
	}
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b08:	f001 fcf8 	bl	80064fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b14:	e011      	b.n	8004b3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d012      	beq.n	8004b44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3324      	adds	r3, #36	; 0x24
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fd16 	bl	8005554 <xTaskRemoveFromEventList>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b2e:	f000 fde9 	bl	8005704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dce9      	bgt.n	8004b16 <prvUnlockQueue+0x16>
 8004b42:	e000      	b.n	8004b46 <prvUnlockQueue+0x46>
					break;
 8004b44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	22ff      	movs	r2, #255	; 0xff
 8004b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b4e:	f001 fd03 	bl	8006558 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b52:	f001 fcd3 	bl	80064fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b5e:	e011      	b.n	8004b84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d012      	beq.n	8004b8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3310      	adds	r3, #16
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fcf1 	bl	8005554 <xTaskRemoveFromEventList>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b78:	f000 fdc4 	bl	8005704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b7c:	7bbb      	ldrb	r3, [r7, #14]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	dce9      	bgt.n	8004b60 <prvUnlockQueue+0x60>
 8004b8c:	e000      	b.n	8004b90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	22ff      	movs	r2, #255	; 0xff
 8004b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b98:	f001 fcde 	bl	8006558 <vPortExitCritical>
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bac:	f001 fca6 	bl	80064fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e001      	b.n	8004bc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bc2:	f001 fcc9 	bl	8006558 <vPortExitCritical>

	return xReturn;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bd8:	f001 fc90 	bl	80064fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d102      	bne.n	8004bee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004be8:	2301      	movs	r3, #1
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e001      	b.n	8004bf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bf2:	f001 fcb1 	bl	8006558 <vPortExitCritical>

	return xReturn;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e014      	b.n	8004c3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c10:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <vQueueAddToRegistry+0x4c>)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10b      	bne.n	8004c34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c1c:	490b      	ldr	r1, [pc, #44]	; (8004c4c <vQueueAddToRegistry+0x4c>)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c26:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <vQueueAddToRegistry+0x4c>)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c32:	e005      	b.n	8004c40 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b07      	cmp	r3, #7
 8004c3e:	d9e7      	bls.n	8004c10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20001b74 	.word	0x20001b74

08004c50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c60:	f001 fc4c 	bl	80064fc <vPortEnterCritical>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c6a:	b25b      	sxtb	r3, r3
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d103      	bne.n	8004c7a <vQueueWaitForMessageRestricted+0x2a>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c80:	b25b      	sxtb	r3, r3
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d103      	bne.n	8004c90 <vQueueWaitForMessageRestricted+0x40>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c90:	f001 fc62 	bl	8006558 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	3324      	adds	r3, #36	; 0x24
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fc2b 	bl	8005500 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004caa:	6978      	ldr	r0, [r7, #20]
 8004cac:	f7ff ff28 	bl	8004b00 <prvUnlockQueue>
	}
 8004cb0:	bf00      	nop
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08e      	sub	sp, #56	; 0x38
 8004cbc:	af04      	add	r7, sp, #16
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <xTaskCreateStatic+0x28>
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	e7fe      	b.n	8004cde <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <xTaskCreateStatic+0x42>
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	e7fe      	b.n	8004cf8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cfa:	235c      	movs	r3, #92	; 0x5c
 8004cfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b5c      	cmp	r3, #92	; 0x5c
 8004d02:	d009      	beq.n	8004d18 <xTaskCreateStatic+0x60>
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e7fe      	b.n	8004d16 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01e      	beq.n	8004d5c <xTaskCreateStatic+0xa4>
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01b      	beq.n	8004d5c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	2202      	movs	r2, #2
 8004d32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d36:	2300      	movs	r3, #0
 8004d38:	9303      	str	r3, [sp, #12]
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	9302      	str	r3, [sp, #8]
 8004d3e:	f107 0314 	add.w	r3, r7, #20
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f850 	bl	8004df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d56:	f000 f8d3 	bl	8004f00 <prvAddNewTaskToReadyList>
 8004d5a:	e001      	b.n	8004d60 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d60:	697b      	ldr	r3, [r7, #20]
	}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3728      	adds	r7, #40	; 0x28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b08c      	sub	sp, #48	; 0x30
 8004d6e:	af04      	add	r7, sp, #16
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 fcd6 	bl	8006730 <pvPortMalloc>
 8004d84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00e      	beq.n	8004daa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d8c:	205c      	movs	r0, #92	; 0x5c
 8004d8e:	f001 fccf 	bl	8006730 <pvPortMalloc>
 8004d92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004da0:	e005      	b.n	8004dae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004da2:	6978      	ldr	r0, [r7, #20]
 8004da4:	f001 fd86 	bl	80068b4 <vPortFree>
 8004da8:	e001      	b.n	8004dae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d017      	beq.n	8004de4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9303      	str	r3, [sp, #12]
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	9302      	str	r3, [sp, #8]
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f80e 	bl	8004df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dd8:	69f8      	ldr	r0, [r7, #28]
 8004dda:	f000 f891 	bl	8004f00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dde:	2301      	movs	r3, #1
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e002      	b.n	8004dea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004de4:	f04f 33ff 	mov.w	r3, #4294967295
 8004de8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dea:	69bb      	ldr	r3, [r7, #24]
	}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3720      	adds	r7, #32
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	21a5      	movs	r1, #165	; 0xa5
 8004e0e:	f001 fe9a 	bl	8006b46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <prvInitialiseNewTask+0x56>
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e7fe      	b.n	8004e48 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e012      	b.n	8004e76 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	7819      	ldrb	r1, [r3, #0]
 8004e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3334      	adds	r3, #52	; 0x34
 8004e60:	460a      	mov	r2, r1
 8004e62:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d006      	beq.n	8004e7e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	3301      	adds	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b0f      	cmp	r3, #15
 8004e7a:	d9e9      	bls.n	8004e50 <prvInitialiseNewTask+0x5c>
 8004e7c:	e000      	b.n	8004e80 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004e7e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	2b37      	cmp	r3, #55	; 0x37
 8004e8c:	d901      	bls.n	8004e92 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e8e:	2337      	movs	r3, #55	; 0x37
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff f841 	bl	8003f30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff f83c 	bl	8003f30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	69b8      	ldr	r0, [r7, #24]
 8004ee2:	f001 f9e1 	bl	80062a8 <pxPortInitialiseStack>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ef8:	bf00      	nop
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f08:	f001 faf8 	bl	80064fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f0c:	4b2d      	ldr	r3, [pc, #180]	; (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f16:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f1e:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d110      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f2c:	f000 fc0e 	bl	800574c <prvInitialiseTaskLists>
 8004f30:	e00d      	b.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f32:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <prvAddNewTaskToReadyList+0xcc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d802      	bhi.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f48:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a1e      	ldr	r2, [pc, #120]	; (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <prvAddNewTaskToReadyList+0xd4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d903      	bls.n	8004f74 <prvAddNewTaskToReadyList+0x74>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <prvAddNewTaskToReadyList+0xd4>)
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <prvAddNewTaskToReadyList+0xd8>)
 8004f82:	441a      	add	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7fe ffdd 	bl	8003f4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f90:	f001 fae2 	bl	8006558 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f94:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <prvAddNewTaskToReadyList+0xcc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00e      	beq.n	8004fba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d207      	bcs.n	8004fba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004faa:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <prvAddNewTaskToReadyList+0xdc>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000db0 	.word	0x20000db0
 8004fc8:	200008dc 	.word	0x200008dc
 8004fcc:	20000dbc 	.word	0x20000dbc
 8004fd0:	20000dcc 	.word	0x20000dcc
 8004fd4:	20000db8 	.word	0x20000db8
 8004fd8:	200008e0 	.word	0x200008e0
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <vTaskDelay+0x60>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <vTaskDelay+0x2e>
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	e7fe      	b.n	800500c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800500e:	f000 f87f 	bl	8005110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fde9 	bl	8005bec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800501a:	f000 f887 	bl	800512c <xTaskResumeAll>
 800501e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <vTaskDelay+0x64>)
 8005028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000dd8 	.word	0x20000dd8
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	; 0x28
 800504c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005056:	463a      	mov	r2, r7
 8005058:	1d39      	adds	r1, r7, #4
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe ff12 	bl	8003e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	9202      	str	r2, [sp, #8]
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	2300      	movs	r3, #0
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	460a      	mov	r2, r1
 8005076:	4920      	ldr	r1, [pc, #128]	; (80050f8 <vTaskStartScheduler+0xb0>)
 8005078:	4820      	ldr	r0, [pc, #128]	; (80050fc <vTaskStartScheduler+0xb4>)
 800507a:	f7ff fe1d 	bl	8004cb8 <xTaskCreateStatic>
 800507e:	4602      	mov	r2, r0
 8005080:	4b1f      	ldr	r3, [pc, #124]	; (8005100 <vTaskStartScheduler+0xb8>)
 8005082:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <vTaskStartScheduler+0xb8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800508c:	2301      	movs	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e001      	b.n	8005096 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d102      	bne.n	80050a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800509c:	f000 fdfa 	bl	8005c94 <xTimerCreateTimerTask>
 80050a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d115      	bne.n	80050d4 <vTaskStartScheduler+0x8c>
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <vTaskStartScheduler+0xbc>)
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295
 80050c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <vTaskStartScheduler+0xc0>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050c8:	4b10      	ldr	r3, [pc, #64]	; (800510c <vTaskStartScheduler+0xc4>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050ce:	f001 f977 	bl	80063c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050d2:	e00d      	b.n	80050f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d109      	bne.n	80050f0 <vTaskStartScheduler+0xa8>
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e7fe      	b.n	80050ee <vTaskStartScheduler+0xa6>
}
 80050f0:	bf00      	nop
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	08007410 	.word	0x08007410
 80050fc:	0800571d 	.word	0x0800571d
 8005100:	20000dd4 	.word	0x20000dd4
 8005104:	20000dd0 	.word	0x20000dd0
 8005108:	20000dbc 	.word	0x20000dbc
 800510c:	20000db4 	.word	0x20000db4

08005110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <vTaskSuspendAll+0x18>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	4a03      	ldr	r2, [pc, #12]	; (8005128 <vTaskSuspendAll+0x18>)
 800511c:	6013      	str	r3, [r2, #0]
}
 800511e:	bf00      	nop
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	20000dd8 	.word	0x20000dd8

0800512c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800513a:	4b41      	ldr	r3, [pc, #260]	; (8005240 <xTaskResumeAll+0x114>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <xTaskResumeAll+0x2a>
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	e7fe      	b.n	8005154 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005156:	f001 f9d1 	bl	80064fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <xTaskResumeAll+0x114>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3b01      	subs	r3, #1
 8005160:	4a37      	ldr	r2, [pc, #220]	; (8005240 <xTaskResumeAll+0x114>)
 8005162:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005164:	4b36      	ldr	r3, [pc, #216]	; (8005240 <xTaskResumeAll+0x114>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d162      	bne.n	8005232 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800516c:	4b35      	ldr	r3, [pc, #212]	; (8005244 <xTaskResumeAll+0x118>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d05e      	beq.n	8005232 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005174:	e02f      	b.n	80051d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005176:	4b34      	ldr	r3, [pc, #208]	; (8005248 <xTaskResumeAll+0x11c>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3318      	adds	r3, #24
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe ff3e 	bl	8004004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3304      	adds	r3, #4
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe ff39 	bl	8004004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	4b2d      	ldr	r3, [pc, #180]	; (800524c <xTaskResumeAll+0x120>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d903      	bls.n	80051a6 <xTaskResumeAll+0x7a>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	4a2a      	ldr	r2, [pc, #168]	; (800524c <xTaskResumeAll+0x120>)
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a27      	ldr	r2, [pc, #156]	; (8005250 <xTaskResumeAll+0x124>)
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7fe fec4 	bl	8003f4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	4b23      	ldr	r3, [pc, #140]	; (8005254 <xTaskResumeAll+0x128>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d302      	bcc.n	80051d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051d0:	4b21      	ldr	r3, [pc, #132]	; (8005258 <xTaskResumeAll+0x12c>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051d6:	4b1c      	ldr	r3, [pc, #112]	; (8005248 <xTaskResumeAll+0x11c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1cb      	bne.n	8005176 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051e4:	f000 fb4c 	bl	8005880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <xTaskResumeAll+0x130>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051f4:	f000 f846 	bl	8005284 <xTaskIncrementTick>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <xTaskResumeAll+0x12c>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f1      	bne.n	80051f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005210:	4b12      	ldr	r3, [pc, #72]	; (800525c <xTaskResumeAll+0x130>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005216:	4b10      	ldr	r3, [pc, #64]	; (8005258 <xTaskResumeAll+0x12c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800521e:	2301      	movs	r3, #1
 8005220:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005222:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <xTaskResumeAll+0x134>)
 8005224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005232:	f001 f991 	bl	8006558 <vPortExitCritical>

	return xAlreadyYielded;
 8005236:	68bb      	ldr	r3, [r7, #8]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000dd8 	.word	0x20000dd8
 8005244:	20000db0 	.word	0x20000db0
 8005248:	20000d70 	.word	0x20000d70
 800524c:	20000db8 	.word	0x20000db8
 8005250:	200008e0 	.word	0x200008e0
 8005254:	200008dc 	.word	0x200008dc
 8005258:	20000dc4 	.word	0x20000dc4
 800525c:	20000dc0 	.word	0x20000dc0
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800526a:	4b05      	ldr	r3, [pc, #20]	; (8005280 <xTaskGetTickCount+0x1c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005270:	687b      	ldr	r3, [r7, #4]
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000db4 	.word	0x20000db4

08005284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800528e:	4b51      	ldr	r3, [pc, #324]	; (80053d4 <xTaskIncrementTick+0x150>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f040 808d 	bne.w	80053b2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005298:	4b4f      	ldr	r3, [pc, #316]	; (80053d8 <xTaskIncrementTick+0x154>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052a0:	4a4d      	ldr	r2, [pc, #308]	; (80053d8 <xTaskIncrementTick+0x154>)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11f      	bne.n	80052ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80052ac:	4b4b      	ldr	r3, [pc, #300]	; (80053dc <xTaskIncrementTick+0x158>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <xTaskIncrementTick+0x46>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	e7fe      	b.n	80052c8 <xTaskIncrementTick+0x44>
 80052ca:	4b44      	ldr	r3, [pc, #272]	; (80053dc <xTaskIncrementTick+0x158>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	4b43      	ldr	r3, [pc, #268]	; (80053e0 <xTaskIncrementTick+0x15c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a41      	ldr	r2, [pc, #260]	; (80053dc <xTaskIncrementTick+0x158>)
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	4a41      	ldr	r2, [pc, #260]	; (80053e0 <xTaskIncrementTick+0x15c>)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4b41      	ldr	r3, [pc, #260]	; (80053e4 <xTaskIncrementTick+0x160>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3301      	adds	r3, #1
 80052e4:	4a3f      	ldr	r2, [pc, #252]	; (80053e4 <xTaskIncrementTick+0x160>)
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	f000 faca 	bl	8005880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052ec:	4b3e      	ldr	r3, [pc, #248]	; (80053e8 <xTaskIncrementTick+0x164>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d34e      	bcc.n	8005394 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f6:	4b39      	ldr	r3, [pc, #228]	; (80053dc <xTaskIncrementTick+0x158>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <xTaskIncrementTick+0x80>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <xTaskIncrementTick+0x82>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530a:	4b37      	ldr	r3, [pc, #220]	; (80053e8 <xTaskIncrementTick+0x164>)
 800530c:	f04f 32ff 	mov.w	r2, #4294967295
 8005310:	601a      	str	r2, [r3, #0]
					break;
 8005312:	e03f      	b.n	8005394 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005314:	4b31      	ldr	r3, [pc, #196]	; (80053dc <xTaskIncrementTick+0x158>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	429a      	cmp	r2, r3
 800532a:	d203      	bcs.n	8005334 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800532c:	4a2e      	ldr	r2, [pc, #184]	; (80053e8 <xTaskIncrementTick+0x164>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6013      	str	r3, [r2, #0]
						break;
 8005332:	e02f      	b.n	8005394 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	3304      	adds	r3, #4
 8005338:	4618      	mov	r0, r3
 800533a:	f7fe fe63 	bl	8004004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3318      	adds	r3, #24
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fe5a 	bl	8004004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4b25      	ldr	r3, [pc, #148]	; (80053ec <xTaskIncrementTick+0x168>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d903      	bls.n	8005364 <xTaskIncrementTick+0xe0>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <xTaskIncrementTick+0x168>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <xTaskIncrementTick+0x16c>)
 8005372:	441a      	add	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7fe fde5 	bl	8003f4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <xTaskIncrementTick+0x170>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	429a      	cmp	r2, r3
 800538c:	d3b3      	bcc.n	80052f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800538e:	2301      	movs	r3, #1
 8005390:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005392:	e7b0      	b.n	80052f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005394:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <xTaskIncrementTick+0x170>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539a:	4915      	ldr	r1, [pc, #84]	; (80053f0 <xTaskIncrementTick+0x16c>)
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d907      	bls.n	80053bc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e004      	b.n	80053bc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053b2:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <xTaskIncrementTick+0x174>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	4a0f      	ldr	r2, [pc, #60]	; (80053f8 <xTaskIncrementTick+0x174>)
 80053ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <xTaskIncrementTick+0x178>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053c8:	697b      	ldr	r3, [r7, #20]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000dd8 	.word	0x20000dd8
 80053d8:	20000db4 	.word	0x20000db4
 80053dc:	20000d68 	.word	0x20000d68
 80053e0:	20000d6c 	.word	0x20000d6c
 80053e4:	20000dc8 	.word	0x20000dc8
 80053e8:	20000dd0 	.word	0x20000dd0
 80053ec:	20000db8 	.word	0x20000db8
 80053f0:	200008e0 	.word	0x200008e0
 80053f4:	200008dc 	.word	0x200008dc
 80053f8:	20000dc0 	.word	0x20000dc0
 80053fc:	20000dc4 	.word	0x20000dc4

08005400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005406:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <vTaskSwitchContext+0xa4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800540e:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <vTaskSwitchContext+0xa8>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005414:	e040      	b.n	8005498 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <vTaskSwitchContext+0xa8>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800541c:	4b23      	ldr	r3, [pc, #140]	; (80054ac <vTaskSwitchContext+0xac>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e00f      	b.n	8005444 <vTaskSwitchContext+0x44>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <vTaskSwitchContext+0x3e>
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	e7fe      	b.n	800543c <vTaskSwitchContext+0x3c>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3b01      	subs	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	491a      	ldr	r1, [pc, #104]	; (80054b0 <vTaskSwitchContext+0xb0>)
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0e5      	beq.n	8005424 <vTaskSwitchContext+0x24>
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <vTaskSwitchContext+0xb0>)
 8005464:	4413      	add	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	3308      	adds	r3, #8
 800547a:	429a      	cmp	r2, r3
 800547c:	d104      	bne.n	8005488 <vTaskSwitchContext+0x88>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <vTaskSwitchContext+0xb4>)
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4a06      	ldr	r2, [pc, #24]	; (80054ac <vTaskSwitchContext+0xac>)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6013      	str	r3, [r2, #0]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	20000dd8 	.word	0x20000dd8
 80054a8:	20000dc4 	.word	0x20000dc4
 80054ac:	20000db8 	.word	0x20000db8
 80054b0:	200008e0 	.word	0x200008e0
 80054b4:	200008dc 	.word	0x200008dc

080054b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <vTaskPlaceOnEventList+0x24>
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e7fe      	b.n	80054da <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <vTaskPlaceOnEventList+0x44>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3318      	adds	r3, #24
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fe fd54 	bl	8003f92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054ea:	2101      	movs	r1, #1
 80054ec:	6838      	ldr	r0, [r7, #0]
 80054ee:	f000 fb7d 	bl	8005bec <prvAddCurrentTaskToDelayedList>
}
 80054f2:	bf00      	nop
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	200008dc 	.word	0x200008dc

08005500 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <vTaskPlaceOnEventListRestricted+0x26>
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e7fe      	b.n	8005524 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <vTaskPlaceOnEventListRestricted+0x50>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3318      	adds	r3, #24
 800552c:	4619      	mov	r1, r3
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7fe fd0b 	bl	8003f4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
 800553e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	68b8      	ldr	r0, [r7, #8]
 8005544:	f000 fb52 	bl	8005bec <prvAddCurrentTaskToDelayedList>
	}
 8005548:	bf00      	nop
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	200008dc 	.word	0x200008dc

08005554 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <xTaskRemoveFromEventList+0x2a>
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e7fe      	b.n	800557c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	3318      	adds	r3, #24
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fd3e 	bl	8004004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005588:	4b1d      	ldr	r3, [pc, #116]	; (8005600 <xTaskRemoveFromEventList+0xac>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11d      	bne.n	80055cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	3304      	adds	r3, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe fd35 	bl	8004004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <xTaskRemoveFromEventList+0xb0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d903      	bls.n	80055ae <xTaskRemoveFromEventList+0x5a>
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	4a16      	ldr	r2, [pc, #88]	; (8005604 <xTaskRemoveFromEventList+0xb0>)
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4a13      	ldr	r2, [pc, #76]	; (8005608 <xTaskRemoveFromEventList+0xb4>)
 80055bc:	441a      	add	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f7fe fcc0 	bl	8003f4a <vListInsertEnd>
 80055ca:	e005      	b.n	80055d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	3318      	adds	r3, #24
 80055d0:	4619      	mov	r1, r3
 80055d2:	480e      	ldr	r0, [pc, #56]	; (800560c <xTaskRemoveFromEventList+0xb8>)
 80055d4:	f7fe fcb9 	bl	8003f4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <xTaskRemoveFromEventList+0xbc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d905      	bls.n	80055f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <xTaskRemoveFromEventList+0xc0>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e001      	b.n	80055f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80055f6:	697b      	ldr	r3, [r7, #20]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000dd8 	.word	0x20000dd8
 8005604:	20000db8 	.word	0x20000db8
 8005608:	200008e0 	.word	0x200008e0
 800560c:	20000d70 	.word	0x20000d70
 8005610:	200008dc 	.word	0x200008dc
 8005614:	20000dc4 	.word	0x20000dc4

08005618 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <vTaskInternalSetTimeOutState+0x24>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <vTaskInternalSetTimeOutState+0x28>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	605a      	str	r2, [r3, #4]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20000dc8 	.word	0x20000dc8
 8005640:	20000db4 	.word	0x20000db4

08005644 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <xTaskCheckForTimeOut+0x24>
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	e7fe      	b.n	8005666 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <xTaskCheckForTimeOut+0x3e>
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e7fe      	b.n	8005680 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005682:	f000 ff3b 	bl	80064fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005686:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <xTaskCheckForTimeOut+0xb8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d102      	bne.n	80056a6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	e023      	b.n	80056ee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b15      	ldr	r3, [pc, #84]	; (8005700 <xTaskCheckForTimeOut+0xbc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d007      	beq.n	80056c2 <xTaskCheckForTimeOut+0x7e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056bc:	2301      	movs	r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	e015      	b.n	80056ee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d20b      	bcs.n	80056e4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff9d 	bl	8005618 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	e004      	b.n	80056ee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056ea:	2301      	movs	r3, #1
 80056ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ee:	f000 ff33 	bl	8006558 <vPortExitCritical>

	return xReturn;
 80056f2:	69fb      	ldr	r3, [r7, #28]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000db4 	.word	0x20000db4
 8005700:	20000dc8 	.word	0x20000dc8

08005704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <vTaskMissedYield+0x14>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	20000dc4 	.word	0x20000dc4

0800571c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005724:	f000 f852 	bl	80057cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <prvIdleTask+0x28>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d9f9      	bls.n	8005724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <prvIdleTask+0x2c>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005740:	e7f0      	b.n	8005724 <prvIdleTask+0x8>
 8005742:	bf00      	nop
 8005744:	200008e0 	.word	0x200008e0
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	e00c      	b.n	8005772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <prvInitialiseTaskLists+0x60>)
 8005764:	4413      	add	r3, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fbc2 	bl	8003ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3301      	adds	r3, #1
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b37      	cmp	r3, #55	; 0x37
 8005776:	d9ef      	bls.n	8005758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005778:	480d      	ldr	r0, [pc, #52]	; (80057b0 <prvInitialiseTaskLists+0x64>)
 800577a:	f7fe fbb9 	bl	8003ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800577e:	480d      	ldr	r0, [pc, #52]	; (80057b4 <prvInitialiseTaskLists+0x68>)
 8005780:	f7fe fbb6 	bl	8003ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005784:	480c      	ldr	r0, [pc, #48]	; (80057b8 <prvInitialiseTaskLists+0x6c>)
 8005786:	f7fe fbb3 	bl	8003ef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800578a:	480c      	ldr	r0, [pc, #48]	; (80057bc <prvInitialiseTaskLists+0x70>)
 800578c:	f7fe fbb0 	bl	8003ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005790:	480b      	ldr	r0, [pc, #44]	; (80057c0 <prvInitialiseTaskLists+0x74>)
 8005792:	f7fe fbad 	bl	8003ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <prvInitialiseTaskLists+0x78>)
 8005798:	4a05      	ldr	r2, [pc, #20]	; (80057b0 <prvInitialiseTaskLists+0x64>)
 800579a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <prvInitialiseTaskLists+0x7c>)
 800579e:	4a05      	ldr	r2, [pc, #20]	; (80057b4 <prvInitialiseTaskLists+0x68>)
 80057a0:	601a      	str	r2, [r3, #0]
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	200008e0 	.word	0x200008e0
 80057b0:	20000d40 	.word	0x20000d40
 80057b4:	20000d54 	.word	0x20000d54
 80057b8:	20000d70 	.word	0x20000d70
 80057bc:	20000d84 	.word	0x20000d84
 80057c0:	20000d9c 	.word	0x20000d9c
 80057c4:	20000d68 	.word	0x20000d68
 80057c8:	20000d6c 	.word	0x20000d6c

080057cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057d2:	e019      	b.n	8005808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057d4:	f000 fe92 	bl	80064fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057d8:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <prvCheckTasksWaitingTermination+0x4c>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fc0d 	bl	8004004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057ea:	4b0c      	ldr	r3, [pc, #48]	; (800581c <prvCheckTasksWaitingTermination+0x50>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	4a0a      	ldr	r2, [pc, #40]	; (800581c <prvCheckTasksWaitingTermination+0x50>)
 80057f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <prvCheckTasksWaitingTermination+0x54>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	4a09      	ldr	r2, [pc, #36]	; (8005820 <prvCheckTasksWaitingTermination+0x54>)
 80057fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057fe:	f000 feab 	bl	8006558 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f80e 	bl	8005824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <prvCheckTasksWaitingTermination+0x54>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e1      	bne.n	80057d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000d84 	.word	0x20000d84
 800581c:	20000db0 	.word	0x20000db0
 8005820:	20000d98 	.word	0x20000d98

08005824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005832:	2b00      	cmp	r3, #0
 8005834:	d108      	bne.n	8005848 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	4618      	mov	r0, r3
 800583c:	f001 f83a 	bl	80068b4 <vPortFree>
				vPortFree( pxTCB );
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f001 f837 	bl	80068b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005846:	e017      	b.n	8005878 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800584e:	2b01      	cmp	r3, #1
 8005850:	d103      	bne.n	800585a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 f82e 	bl	80068b4 <vPortFree>
	}
 8005858:	e00e      	b.n	8005878 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005860:	2b02      	cmp	r3, #2
 8005862:	d009      	beq.n	8005878 <prvDeleteTCB+0x54>
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e7fe      	b.n	8005876 <prvDeleteTCB+0x52>
	}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005886:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <prvResetNextTaskUnblockTime+0x44>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <prvResetNextTaskUnblockTime+0x14>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <prvResetNextTaskUnblockTime+0x16>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d004      	beq.n	80058a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <prvResetNextTaskUnblockTime+0x48>)
 800589c:	f04f 32ff 	mov.w	r2, #4294967295
 80058a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058a2:	e008      	b.n	80058b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <prvResetNextTaskUnblockTime+0x44>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <prvResetNextTaskUnblockTime+0x48>)
 80058b4:	6013      	str	r3, [r2, #0]
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000d68 	.word	0x20000d68
 80058c8:	20000dd0 	.word	0x20000dd0

080058cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <xTaskGetSchedulerState+0x34>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058da:	2301      	movs	r3, #1
 80058dc:	607b      	str	r3, [r7, #4]
 80058de:	e008      	b.n	80058f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058e0:	4b08      	ldr	r3, [pc, #32]	; (8005904 <xTaskGetSchedulerState+0x38>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058e8:	2302      	movs	r3, #2
 80058ea:	607b      	str	r3, [r7, #4]
 80058ec:	e001      	b.n	80058f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058ee:	2300      	movs	r3, #0
 80058f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058f2:	687b      	ldr	r3, [r7, #4]
	}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	20000dbc 	.word	0x20000dbc
 8005904:	20000dd8 	.word	0x20000dd8

08005908 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d056      	beq.n	80059cc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005922:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <xTaskPriorityInherit+0xd0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	429a      	cmp	r2, r3
 800592a:	d246      	bcs.n	80059ba <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	db06      	blt.n	8005942 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005934:	4b28      	ldr	r3, [pc, #160]	; (80059d8 <xTaskPriorityInherit+0xd0>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6959      	ldr	r1, [r3, #20]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4a22      	ldr	r2, [pc, #136]	; (80059dc <xTaskPriorityInherit+0xd4>)
 8005954:	4413      	add	r3, r2
 8005956:	4299      	cmp	r1, r3
 8005958:	d101      	bne.n	800595e <xTaskPriorityInherit+0x56>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <xTaskPriorityInherit+0x58>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d022      	beq.n	80059aa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3304      	adds	r3, #4
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fb4b 	bl	8004004 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800596e:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <xTaskPriorityInherit+0xd0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <xTaskPriorityInherit+0xd8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <xTaskPriorityInherit+0x84>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <xTaskPriorityInherit+0xd8>)
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a10      	ldr	r2, [pc, #64]	; (80059dc <xTaskPriorityInherit+0xd4>)
 800599a:	441a      	add	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fe fad1 	bl	8003f4a <vListInsertEnd>
 80059a8:	e004      	b.n	80059b4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <xTaskPriorityInherit+0xd0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e008      	b.n	80059cc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <xTaskPriorityInherit+0xd0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d201      	bcs.n	80059cc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059cc:	68fb      	ldr	r3, [r7, #12]
	}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200008dc 	.word	0x200008dc
 80059dc:	200008e0 	.word	0x200008e0
 80059e0:	20000db8 	.word	0x20000db8

080059e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d054      	beq.n	8005aa4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059fa:	4b2d      	ldr	r3, [pc, #180]	; (8005ab0 <xTaskPriorityDisinherit+0xcc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d009      	beq.n	8005a18 <xTaskPriorityDisinherit+0x34>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e7fe      	b.n	8005a16 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <xTaskPriorityDisinherit+0x50>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	e7fe      	b.n	8005a32 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a38:	1e5a      	subs	r2, r3, #1
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d02c      	beq.n	8005aa4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d128      	bne.n	8005aa4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fad4 	bl	8004004 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <xTaskPriorityDisinherit+0xd0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d903      	bls.n	8005a84 <xTaskPriorityDisinherit+0xa0>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	4a0c      	ldr	r2, [pc, #48]	; (8005ab4 <xTaskPriorityDisinherit+0xd0>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <xTaskPriorityDisinherit+0xd4>)
 8005a92:	441a      	add	r2, r3
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f7fe fa55 	bl	8003f4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aa4:	697b      	ldr	r3, [r7, #20]
	}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200008dc 	.word	0x200008dc
 8005ab4:	20000db8 	.word	0x20000db8
 8005ab8:	200008e0 	.word	0x200008e0

08005abc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005aca:	2301      	movs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d06d      	beq.n	8005bb0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e7fe      	b.n	8005aee <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d902      	bls.n	8005b00 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	e002      	b.n	8005b06 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d04f      	beq.n	8005bb0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d14a      	bne.n	8005bb0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b1a:	4b27      	ldr	r3, [pc, #156]	; (8005bb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d109      	bne.n	8005b38 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	e7fe      	b.n	8005b36 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db04      	blt.n	8005b56 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	6959      	ldr	r1, [r3, #20]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005b66:	4413      	add	r3, r2
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	d101      	bne.n	8005b70 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01c      	beq.n	8005bb0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fa42 	bl	8004004 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d903      	bls.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4a06      	ldr	r2, [pc, #24]	; (8005bbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ba2:	441a      	add	r2, r3
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4610      	mov	r0, r2
 8005bac:	f7fe f9cd 	bl	8003f4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb0:	bf00      	nop
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	200008dc 	.word	0x200008dc
 8005bbc:	200008e0 	.word	0x200008e0
 8005bc0:	20000db8 	.word	0x20000db8

08005bc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bd6:	3201      	adds	r2, #1
 8005bd8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005bda:	4b03      	ldr	r3, [pc, #12]	; (8005be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
	}
 8005bde:	4618      	mov	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	200008dc 	.word	0x200008dc

08005bec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bf6:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <prvAddCurrentTaskToDelayedList+0x90>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bfc:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe f9fe 	bl	8004004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d10a      	bne.n	8005c26 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c16:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4819      	ldr	r0, [pc, #100]	; (8005c84 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c20:	f7fe f993 	bl	8003f4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c24:	e026      	b.n	8005c74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c2e:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d209      	bcs.n	8005c52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7fe f9a1 	bl	8003f92 <vListInsert>
}
 8005c50:	e010      	b.n	8005c74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe f997 	bl	8003f92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d202      	bcs.n	8005c74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6013      	str	r3, [r2, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000db4 	.word	0x20000db4
 8005c80:	200008dc 	.word	0x200008dc
 8005c84:	20000d9c 	.word	0x20000d9c
 8005c88:	20000d6c 	.word	0x20000d6c
 8005c8c:	20000d68 	.word	0x20000d68
 8005c90:	20000dd0 	.word	0x20000dd0

08005c94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c9e:	f000 fac3 	bl	8006228 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <xTimerCreateTimerTask+0x80>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d021      	beq.n	8005cee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cb2:	1d3a      	adds	r2, r7, #4
 8005cb4:	f107 0108 	add.w	r1, r7, #8
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe f8fd 	bl	8003ebc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	9202      	str	r2, [sp, #8]
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	2302      	movs	r3, #2
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	460a      	mov	r2, r1
 8005cd4:	4910      	ldr	r1, [pc, #64]	; (8005d18 <xTimerCreateTimerTask+0x84>)
 8005cd6:	4811      	ldr	r0, [pc, #68]	; (8005d1c <xTimerCreateTimerTask+0x88>)
 8005cd8:	f7fe ffee 	bl	8004cb8 <xTaskCreateStatic>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <xTimerCreateTimerTask+0x8c>)
 8005ce0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <xTimerCreateTimerTask+0x8c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cea:	2301      	movs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <xTimerCreateTimerTask+0x74>
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	e7fe      	b.n	8005d06 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005d08:	697b      	ldr	r3, [r7, #20]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000e0c 	.word	0x20000e0c
 8005d18:	08007418 	.word	0x08007418
 8005d1c:	08005e3d 	.word	0x08005e3d
 8005d20:	20000e10 	.word	0x20000e10

08005d24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <xTimerGenericCommand+0x2c>
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	e7fe      	b.n	8005d4e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d50:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <xTimerGenericCommand+0x94>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02a      	beq.n	8005dae <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	dc18      	bgt.n	8005d9c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d6a:	f7ff fdaf 	bl	80058cc <xTaskGetSchedulerState>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d109      	bne.n	8005d88 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d74:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <xTimerGenericCommand+0x94>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	f107 0110 	add.w	r1, r7, #16
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d80:	f7fe faa4 	bl	80042cc <xQueueGenericSend>
 8005d84:	6278      	str	r0, [r7, #36]	; 0x24
 8005d86:	e012      	b.n	8005dae <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <xTimerGenericCommand+0x94>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	f107 0110 	add.w	r1, r7, #16
 8005d90:	2300      	movs	r3, #0
 8005d92:	2200      	movs	r2, #0
 8005d94:	f7fe fa9a 	bl	80042cc <xQueueGenericSend>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24
 8005d9a:	e008      	b.n	8005dae <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d9c:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <xTimerGenericCommand+0x94>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	f107 0110 	add.w	r1, r7, #16
 8005da4:	2300      	movs	r3, #0
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	f7fe fb8a 	bl	80044c0 <xQueueGenericSendFromISR>
 8005dac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3728      	adds	r7, #40	; 0x28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000e0c 	.word	0x20000e0c

08005dbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <prvProcessExpiredTimer+0x7c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe f915 	bl	8004004 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d121      	bne.n	8005e26 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	18d1      	adds	r1, r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f000 f8c8 	bl	8005f84 <prvInsertTimerInActiveList>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d015      	beq.n	8005e26 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	2100      	movs	r1, #0
 8005e04:	6978      	ldr	r0, [r7, #20]
 8005e06:	f7ff ff8d 	bl	8005d24 <xTimerGenericCommand>
 8005e0a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <prvProcessExpiredTimer+0x6a>
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e7fe      	b.n	8005e24 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	6978      	ldr	r0, [r7, #20]
 8005e2c:	4798      	blx	r3
}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000e04 	.word	0x20000e04

08005e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f857 	bl	8005efc <prvGetNextExpireTime>
 8005e4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f803 	bl	8005e60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e5a:	f000 f8d5 	bl	8006008 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e5e:	e7f1      	b.n	8005e44 <prvTimerTask+0x8>

08005e60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e6a:	f7ff f951 	bl	8005110 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f866 	bl	8005f44 <prvSampleTimeNow>
 8005e78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d130      	bne.n	8005ee2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d806      	bhi.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e8e:	f7ff f94d 	bl	800512c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff91 	bl	8005dbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e9a:	e024      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <prvProcessTimerOrBlockTask+0x90>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <prvProcessTimerOrBlockTask+0x94>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fe fec5 	bl	8004c50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ec6:	f7ff f931 	bl	800512c <xTaskResumeAll>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <prvProcessTimerOrBlockTask+0x98>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
}
 8005ee0:	e001      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ee2:	f7ff f923 	bl	800512c <xTaskResumeAll>
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000e08 	.word	0x20000e08
 8005ef4:	20000e0c 	.word	0x20000e0c
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d105      	bne.n	8005f2e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	e001      	b.n	8005f32 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f32:	68fb      	ldr	r3, [r7, #12]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000e04 	.word	0x20000e04

08005f44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f4c:	f7ff f98a 	bl	8005264 <xTaskGetTickCount>
 8005f50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d205      	bcs.n	8005f68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f5c:	f000 f904 	bl	8006168 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f6e:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000e14 	.word	0x20000e14

08005f84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d812      	bhi.n	8005fd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e01b      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <prvInsertTimerInActiveList+0x7c>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fd ffe2 	bl	8003f92 <vListInsert>
 8005fce:	e012      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d206      	bcs.n	8005fe6 <prvInsertTimerInActiveList+0x62>
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e007      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <prvInsertTimerInActiveList+0x80>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7fd ffce 	bl	8003f92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ff6:	697b      	ldr	r3, [r7, #20]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000e08 	.word	0x20000e08
 8006004:	20000e04 	.word	0x20000e04

08006008 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800600e:	e099      	b.n	8006144 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da17      	bge.n	8006046 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	3304      	adds	r3, #4
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <prvProcessReceivedCommands+0x2e>
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	e7fe      	b.n	8006034 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603c:	6850      	ldr	r0, [r2, #4]
 800603e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006040:	6892      	ldr	r2, [r2, #8]
 8006042:	4611      	mov	r1, r2
 8006044:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	db7a      	blt.n	8006142 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fd ffd1 	bl	8004004 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006062:	463b      	mov	r3, r7
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff6d 	bl	8005f44 <prvSampleTimeNow>
 800606a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b09      	cmp	r3, #9
 8006070:	d868      	bhi.n	8006144 <prvProcessReceivedCommands+0x13c>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <prvProcessReceivedCommands+0x70>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a1 	.word	0x080060a1
 8006084:	08006145 	.word	0x08006145
 8006088:	080060fb 	.word	0x080060fb
 800608c:	08006131 	.word	0x08006131
 8006090:	080060a1 	.word	0x080060a1
 8006094:	080060a1 	.word	0x080060a1
 8006098:	08006145 	.word	0x08006145
 800609c:	080060fb 	.word	0x080060fb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	18d1      	adds	r1, r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ae:	f7ff ff69 	bl	8005f84 <prvInsertTimerInActiveList>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d045      	beq.n	8006144 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d13d      	bne.n	8006144 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	441a      	add	r2, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2300      	movs	r3, #0
 80060d6:	2100      	movs	r1, #0
 80060d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060da:	f7ff fe23 	bl	8005d24 <xTimerGenericCommand>
 80060de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d12e      	bne.n	8006144 <prvProcessReceivedCommands+0x13c>
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e7fe      	b.n	80060f8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <prvProcessReceivedCommands+0x114>
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e7fe      	b.n	800611a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	18d1      	adds	r1, r2, r3
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612a:	f7ff ff2b 	bl	8005f84 <prvInsertTimerInActiveList>
					break;
 800612e:	e009      	b.n	8006144 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800613a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613c:	f000 fbba 	bl	80068b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006140:	e000      	b.n	8006144 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006142:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <prvProcessReceivedCommands+0x15c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	1d39      	adds	r1, r7, #4
 800614a:	2200      	movs	r2, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe fa4b 	bl	80045e8 <xQueueReceive>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	f47f af5b 	bne.w	8006010 <prvProcessReceivedCommands+0x8>
	}
}
 800615a:	bf00      	nop
 800615c:	3730      	adds	r7, #48	; 0x30
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000e0c 	.word	0x20000e0c

08006168 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800616e:	e044      	b.n	80061fa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006170:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <prvSwitchTimerLists+0xb8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800617a:	4b29      	ldr	r3, [pc, #164]	; (8006220 <prvSwitchTimerLists+0xb8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3304      	adds	r3, #4
 8006188:	4618      	mov	r0, r3
 800618a:	f7fd ff3b 	bl	8004004 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d12d      	bne.n	80061fa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d90e      	bls.n	80061ce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061bc:	4b18      	ldr	r3, [pc, #96]	; (8006220 <prvSwitchTimerLists+0xb8>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f7fd fee3 	bl	8003f92 <vListInsert>
 80061cc:	e015      	b.n	80061fa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061ce:	2300      	movs	r3, #0
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	2300      	movs	r3, #0
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	2100      	movs	r1, #0
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fda3 	bl	8005d24 <xTimerGenericCommand>
 80061de:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <prvSwitchTimerLists+0x92>
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	e7fe      	b.n	80061f8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <prvSwitchTimerLists+0xb8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1b5      	bne.n	8006170 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <prvSwitchTimerLists+0xb8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <prvSwitchTimerLists+0xbc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a04      	ldr	r2, [pc, #16]	; (8006220 <prvSwitchTimerLists+0xb8>)
 8006210:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006212:	4a04      	ldr	r2, [pc, #16]	; (8006224 <prvSwitchTimerLists+0xbc>)
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	6013      	str	r3, [r2, #0]
}
 8006218:	bf00      	nop
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000e04 	.word	0x20000e04
 8006224:	20000e08 	.word	0x20000e08

08006228 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800622e:	f000 f965 	bl	80064fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <prvCheckForValidListAndQueue+0x60>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d120      	bne.n	800627c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800623a:	4814      	ldr	r0, [pc, #80]	; (800628c <prvCheckForValidListAndQueue+0x64>)
 800623c:	f7fd fe58 	bl	8003ef0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006240:	4813      	ldr	r0, [pc, #76]	; (8006290 <prvCheckForValidListAndQueue+0x68>)
 8006242:	f7fd fe55 	bl	8003ef0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006246:	4b13      	ldr	r3, [pc, #76]	; (8006294 <prvCheckForValidListAndQueue+0x6c>)
 8006248:	4a10      	ldr	r2, [pc, #64]	; (800628c <prvCheckForValidListAndQueue+0x64>)
 800624a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800624c:	4b12      	ldr	r3, [pc, #72]	; (8006298 <prvCheckForValidListAndQueue+0x70>)
 800624e:	4a10      	ldr	r2, [pc, #64]	; (8006290 <prvCheckForValidListAndQueue+0x68>)
 8006250:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006252:	2300      	movs	r3, #0
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <prvCheckForValidListAndQueue+0x74>)
 8006258:	4a11      	ldr	r2, [pc, #68]	; (80062a0 <prvCheckForValidListAndQueue+0x78>)
 800625a:	2110      	movs	r1, #16
 800625c:	200a      	movs	r0, #10
 800625e:	f7fd ff63 	bl	8004128 <xQueueGenericCreateStatic>
 8006262:	4602      	mov	r2, r0
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <prvCheckForValidListAndQueue+0x60>)
 8006266:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <prvCheckForValidListAndQueue+0x60>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <prvCheckForValidListAndQueue+0x60>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	490b      	ldr	r1, [pc, #44]	; (80062a4 <prvCheckForValidListAndQueue+0x7c>)
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fcc2 	bl	8004c00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800627c:	f000 f96c 	bl	8006558 <vPortExitCritical>
}
 8006280:	bf00      	nop
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000e0c 	.word	0x20000e0c
 800628c:	20000ddc 	.word	0x20000ddc
 8006290:	20000df0 	.word	0x20000df0
 8006294:	20000e04 	.word	0x20000e04
 8006298:	20000e08 	.word	0x20000e08
 800629c:	20000eb8 	.word	0x20000eb8
 80062a0:	20000e18 	.word	0x20000e18
 80062a4:	08007420 	.word	0x08007420

080062a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3b04      	subs	r3, #4
 80062b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f023 0201 	bic.w	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062d8:	4a0c      	ldr	r2, [pc, #48]	; (800630c <pxPortInitialiseStack+0x64>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b14      	subs	r3, #20
 80062e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f06f 0202 	mvn.w	r2, #2
 80062f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3b20      	subs	r3, #32
 80062fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062fe:	68fb      	ldr	r3, [r7, #12]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	08006311 	.word	0x08006311

08006310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800631a:	4b11      	ldr	r3, [pc, #68]	; (8006360 <prvTaskExitError+0x50>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d009      	beq.n	8006338 <prvTaskExitError+0x28>
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e7fe      	b.n	8006336 <prvTaskExitError+0x26>
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800634a:	bf00      	nop
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0fc      	beq.n	800634c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	2000000c 	.word	0x2000000c
	...

08006370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <pxCurrentTCBConst2>)
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	6808      	ldr	r0, [r1, #0]
 8006376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	f380 8809 	msr	PSP, r0
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8811 	msr	BASEPRI, r0
 800638a:	4770      	bx	lr
 800638c:	f3af 8000 	nop.w

08006390 <pxCurrentTCBConst2>:
 8006390:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop

08006398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006398:	4808      	ldr	r0, [pc, #32]	; (80063bc <prvPortStartFirstTask+0x24>)
 800639a:	6800      	ldr	r0, [r0, #0]
 800639c:	6800      	ldr	r0, [r0, #0]
 800639e:	f380 8808 	msr	MSP, r0
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f380 8814 	msr	CONTROL, r0
 80063aa:	b662      	cpsie	i
 80063ac:	b661      	cpsie	f
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	df00      	svc	0
 80063b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063ba:	bf00      	nop
 80063bc:	e000ed08 	.word	0xe000ed08

080063c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063c6:	4b44      	ldr	r3, [pc, #272]	; (80064d8 <xPortStartScheduler+0x118>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a44      	ldr	r2, [pc, #272]	; (80064dc <xPortStartScheduler+0x11c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d109      	bne.n	80063e4 <xPortStartScheduler+0x24>
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	e7fe      	b.n	80063e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063e4:	4b3c      	ldr	r3, [pc, #240]	; (80064d8 <xPortStartScheduler+0x118>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a3d      	ldr	r2, [pc, #244]	; (80064e0 <xPortStartScheduler+0x120>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d109      	bne.n	8006402 <xPortStartScheduler+0x42>
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e7fe      	b.n	8006400 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006402:	4b38      	ldr	r3, [pc, #224]	; (80064e4 <xPortStartScheduler+0x124>)
 8006404:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	22ff      	movs	r2, #255	; 0xff
 8006412:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006424:	b2da      	uxtb	r2, r3
 8006426:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <xPortStartScheduler+0x128>)
 8006428:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800642a:	4b30      	ldr	r3, [pc, #192]	; (80064ec <xPortStartScheduler+0x12c>)
 800642c:	2207      	movs	r2, #7
 800642e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006430:	e009      	b.n	8006446 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006432:	4b2e      	ldr	r3, [pc, #184]	; (80064ec <xPortStartScheduler+0x12c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3b01      	subs	r3, #1
 8006438:	4a2c      	ldr	r2, [pc, #176]	; (80064ec <xPortStartScheduler+0x12c>)
 800643a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d0ef      	beq.n	8006432 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006452:	4b26      	ldr	r3, [pc, #152]	; (80064ec <xPortStartScheduler+0x12c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f1c3 0307 	rsb	r3, r3, #7
 800645a:	2b04      	cmp	r3, #4
 800645c:	d009      	beq.n	8006472 <xPortStartScheduler+0xb2>
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	60bb      	str	r3, [r7, #8]
 8006470:	e7fe      	b.n	8006470 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006472:	4b1e      	ldr	r3, [pc, #120]	; (80064ec <xPortStartScheduler+0x12c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	4a1c      	ldr	r2, [pc, #112]	; (80064ec <xPortStartScheduler+0x12c>)
 800647a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800647c:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <xPortStartScheduler+0x12c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006484:	4a19      	ldr	r2, [pc, #100]	; (80064ec <xPortStartScheduler+0x12c>)
 8006486:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <xPortStartScheduler+0x130>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <xPortStartScheduler+0x130>)
 8006496:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800649a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <xPortStartScheduler+0x130>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a13      	ldr	r2, [pc, #76]	; (80064f0 <xPortStartScheduler+0x130>)
 80064a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064a8:	f000 f8d6 	bl	8006658 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064ac:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <xPortStartScheduler+0x134>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064b2:	f000 f8f5 	bl	80066a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064b6:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <xPortStartScheduler+0x138>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a0f      	ldr	r2, [pc, #60]	; (80064f8 <xPortStartScheduler+0x138>)
 80064bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064c2:	f7ff ff69 	bl	8006398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064c6:	f7fe ff9b 	bl	8005400 <vTaskSwitchContext>
	prvTaskExitError();
 80064ca:	f7ff ff21 	bl	8006310 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	e000ed00 	.word	0xe000ed00
 80064dc:	410fc271 	.word	0x410fc271
 80064e0:	410fc270 	.word	0x410fc270
 80064e4:	e000e400 	.word	0xe000e400
 80064e8:	20000f08 	.word	0x20000f08
 80064ec:	20000f0c 	.word	0x20000f0c
 80064f0:	e000ed20 	.word	0xe000ed20
 80064f4:	2000000c 	.word	0x2000000c
 80064f8:	e000ef34 	.word	0xe000ef34

080064fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <vPortEnterCritical+0x54>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3301      	adds	r3, #1
 800651a:	4a0d      	ldr	r2, [pc, #52]	; (8006550 <vPortEnterCritical+0x54>)
 800651c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <vPortEnterCritical+0x54>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d10e      	bne.n	8006544 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <vPortEnterCritical+0x58>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <vPortEnterCritical+0x48>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	e7fe      	b.n	8006542 <vPortEnterCritical+0x46>
	}
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	2000000c 	.word	0x2000000c
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800655e:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <vPortExitCritical+0x4c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <vPortExitCritical+0x22>
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	607b      	str	r3, [r7, #4]
 8006578:	e7fe      	b.n	8006578 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800657a:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <vPortExitCritical+0x4c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3b01      	subs	r3, #1
 8006580:	4a08      	ldr	r2, [pc, #32]	; (80065a4 <vPortExitCritical+0x4c>)
 8006582:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006584:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <vPortExitCritical+0x4c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <vPortExitCritical+0x3e>
 800658c:	2300      	movs	r3, #0
 800658e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000000c 	.word	0x2000000c
	...

080065b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065b0:	f3ef 8009 	mrs	r0, PSP
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <pxCurrentTCBConst>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f01e 0f10 	tst.w	lr, #16
 80065c0:	bf08      	it	eq
 80065c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	6010      	str	r0, [r2, #0]
 80065cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065d4:	f380 8811 	msr	BASEPRI, r0
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f7fe ff0e 	bl	8005400 <vTaskSwitchContext>
 80065e4:	f04f 0000 	mov.w	r0, #0
 80065e8:	f380 8811 	msr	BASEPRI, r0
 80065ec:	bc09      	pop	{r0, r3}
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	6808      	ldr	r0, [r1, #0]
 80065f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f6:	f01e 0f10 	tst.w	lr, #16
 80065fa:	bf08      	it	eq
 80065fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006600:	f380 8809 	msr	PSP, r0
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst>:
 8006610:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006630:	f7fe fe28 	bl	8005284 <xTaskIncrementTick>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <SysTick_Handler+0x3c>)
 800663c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <vPortSetupTimerInterrupt+0x34>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <vPortSetupTimerInterrupt+0x38>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <vPortSetupTimerInterrupt+0x3c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <vPortSetupTimerInterrupt+0x40>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	099b      	lsrs	r3, r3, #6
 8006674:	4a09      	ldr	r2, [pc, #36]	; (800669c <vPortSetupTimerInterrupt+0x44>)
 8006676:	3b01      	subs	r3, #1
 8006678:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800667a:	4b04      	ldr	r3, [pc, #16]	; (800668c <vPortSetupTimerInterrupt+0x34>)
 800667c:	2207      	movs	r2, #7
 800667e:	601a      	str	r2, [r3, #0]
}
 8006680:	bf00      	nop
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	e000e010 	.word	0xe000e010
 8006690:	e000e018 	.word	0xe000e018
 8006694:	20000000 	.word	0x20000000
 8006698:	10624dd3 	.word	0x10624dd3
 800669c:	e000e014 	.word	0xe000e014

080066a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066b0 <vPortEnableVFP+0x10>
 80066a4:	6801      	ldr	r1, [r0, #0]
 80066a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066aa:	6001      	str	r1, [r0, #0]
 80066ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066ae:	bf00      	nop
 80066b0:	e000ed88 	.word	0xe000ed88

080066b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066ba:	f3ef 8305 	mrs	r3, IPSR
 80066be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b0f      	cmp	r3, #15
 80066c4:	d913      	bls.n	80066ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066c6:	4a16      	ldr	r2, [pc, #88]	; (8006720 <vPortValidateInterruptPriority+0x6c>)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066d0:	4b14      	ldr	r3, [pc, #80]	; (8006724 <vPortValidateInterruptPriority+0x70>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	7afa      	ldrb	r2, [r7, #11]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d209      	bcs.n	80066ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	e7fe      	b.n	80066ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066ee:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <vPortValidateInterruptPriority+0x74>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <vPortValidateInterruptPriority+0x78>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d909      	bls.n	8006712 <vPortValidateInterruptPriority+0x5e>
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	e7fe      	b.n	8006710 <vPortValidateInterruptPriority+0x5c>
	}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	e000e3f0 	.word	0xe000e3f0
 8006724:	20000f08 	.word	0x20000f08
 8006728:	e000ed0c 	.word	0xe000ed0c
 800672c:	20000f0c 	.word	0x20000f0c

08006730 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	; 0x28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800673c:	f7fe fce8 	bl	8005110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006740:	4b57      	ldr	r3, [pc, #348]	; (80068a0 <pvPortMalloc+0x170>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006748:	f000 f90c 	bl	8006964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800674c:	4b55      	ldr	r3, [pc, #340]	; (80068a4 <pvPortMalloc+0x174>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4013      	ands	r3, r2
 8006754:	2b00      	cmp	r3, #0
 8006756:	f040 808c 	bne.w	8006872 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01c      	beq.n	800679a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006760:	2208      	movs	r2, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	2b00      	cmp	r3, #0
 8006770:	d013      	beq.n	800679a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f023 0307 	bic.w	r3, r3, #7
 8006778:	3308      	adds	r3, #8
 800677a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <pvPortMalloc+0x6a>
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	e7fe      	b.n	8006798 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d068      	beq.n	8006872 <pvPortMalloc+0x142>
 80067a0:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <pvPortMalloc+0x178>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d863      	bhi.n	8006872 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067aa:	4b40      	ldr	r3, [pc, #256]	; (80068ac <pvPortMalloc+0x17c>)
 80067ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067ae:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <pvPortMalloc+0x17c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067b4:	e004      	b.n	80067c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d903      	bls.n	80067d2 <pvPortMalloc+0xa2>
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f1      	bne.n	80067b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067d2:	4b33      	ldr	r3, [pc, #204]	; (80068a0 <pvPortMalloc+0x170>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d8:	429a      	cmp	r2, r3
 80067da:	d04a      	beq.n	8006872 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2208      	movs	r2, #8
 80067e2:	4413      	add	r3, r2
 80067e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	1ad2      	subs	r2, r2, r3
 80067f6:	2308      	movs	r3, #8
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d91e      	bls.n	800683c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <pvPortMalloc+0xf4>
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	e7fe      	b.n	8006822 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006836:	69b8      	ldr	r0, [r7, #24]
 8006838:	f000 f8f6 	bl	8006a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800683c:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <pvPortMalloc+0x178>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <pvPortMalloc+0x178>)
 8006848:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <pvPortMalloc+0x178>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	4b18      	ldr	r3, [pc, #96]	; (80068b0 <pvPortMalloc+0x180>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d203      	bcs.n	800685e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <pvPortMalloc+0x178>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <pvPortMalloc+0x180>)
 800685c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <pvPortMalloc+0x174>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	431a      	orrs	r2, r3
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006872:	f7fe fc5b 	bl	800512c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	2b00      	cmp	r3, #0
 800687e:	d009      	beq.n	8006894 <pvPortMalloc+0x164>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e7fe      	b.n	8006892 <pvPortMalloc+0x162>
	return pvReturn;
 8006894:	69fb      	ldr	r3, [r7, #28]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3728      	adds	r7, #40	; 0x28
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20001b18 	.word	0x20001b18
 80068a4:	20001b24 	.word	0x20001b24
 80068a8:	20001b1c 	.word	0x20001b1c
 80068ac:	20001b10 	.word	0x20001b10
 80068b0:	20001b20 	.word	0x20001b20

080068b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d046      	beq.n	8006954 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068c6:	2308      	movs	r3, #8
 80068c8:	425b      	negs	r3, r3
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4413      	add	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4b20      	ldr	r3, [pc, #128]	; (800695c <vPortFree+0xa8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d109      	bne.n	80068f6 <vPortFree+0x42>
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	e7fe      	b.n	80068f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <vPortFree+0x5e>
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	e7fe      	b.n	8006910 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	4b11      	ldr	r3, [pc, #68]	; (800695c <vPortFree+0xa8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d019      	beq.n	8006954 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d115      	bne.n	8006954 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <vPortFree+0xa8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	43db      	mvns	r3, r3
 8006932:	401a      	ands	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006938:	f7fe fbea 	bl	8005110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4b07      	ldr	r3, [pc, #28]	; (8006960 <vPortFree+0xac>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4413      	add	r3, r2
 8006946:	4a06      	ldr	r2, [pc, #24]	; (8006960 <vPortFree+0xac>)
 8006948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f000 f86c 	bl	8006a28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006950:	f7fe fbec 	bl	800512c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006954:	bf00      	nop
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20001b24 	.word	0x20001b24
 8006960:	20001b1c 	.word	0x20001b1c

08006964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800696a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800696e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006970:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <prvHeapInit+0xac>)
 8006972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00c      	beq.n	8006998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3307      	adds	r3, #7
 8006982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0307 	bic.w	r3, r3, #7
 800698a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <prvHeapInit+0xac>)
 8006994:	4413      	add	r3, r2
 8006996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800699c:	4a1d      	ldr	r2, [pc, #116]	; (8006a14 <prvHeapInit+0xb0>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069a2:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <prvHeapInit+0xb0>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4413      	add	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069b0:	2208      	movs	r2, #8
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <prvHeapInit+0xb4>)
 80069c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <prvHeapInit+0xb4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <prvHeapInit+0xb4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <prvHeapInit+0xb4>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <prvHeapInit+0xb8>)
 80069f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <prvHeapInit+0xbc>)
 80069fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069fc:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <prvHeapInit+0xc0>)
 80069fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a02:	601a      	str	r2, [r3, #0]
}
 8006a04:	bf00      	nop
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	20000f10 	.word	0x20000f10
 8006a14:	20001b10 	.word	0x20001b10
 8006a18:	20001b18 	.word	0x20001b18
 8006a1c:	20001b20 	.word	0x20001b20
 8006a20:	20001b1c 	.word	0x20001b1c
 8006a24:	20001b24 	.word	0x20001b24

08006a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a30:	4b28      	ldr	r3, [pc, #160]	; (8006ad4 <prvInsertBlockIntoFreeList+0xac>)
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e002      	b.n	8006a3c <prvInsertBlockIntoFreeList+0x14>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d8f7      	bhi.n	8006a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d108      	bne.n	8006a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	441a      	add	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	441a      	add	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d118      	bne.n	8006ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d00d      	beq.n	8006aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	441a      	add	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e008      	b.n	8006ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e003      	b.n	8006ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d002      	beq.n	8006ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20001b10 	.word	0x20001b10
 8006ad8:	20001b18 	.word	0x20001b18

08006adc <__errno>:
 8006adc:	4b01      	ldr	r3, [pc, #4]	; (8006ae4 <__errno+0x8>)
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000010 	.word	0x20000010

08006ae8 <__libc_init_array>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	4e0d      	ldr	r6, [pc, #52]	; (8006b20 <__libc_init_array+0x38>)
 8006aec:	4c0d      	ldr	r4, [pc, #52]	; (8006b24 <__libc_init_array+0x3c>)
 8006aee:	1ba4      	subs	r4, r4, r6
 8006af0:	10a4      	asrs	r4, r4, #2
 8006af2:	2500      	movs	r5, #0
 8006af4:	42a5      	cmp	r5, r4
 8006af6:	d109      	bne.n	8006b0c <__libc_init_array+0x24>
 8006af8:	4e0b      	ldr	r6, [pc, #44]	; (8006b28 <__libc_init_array+0x40>)
 8006afa:	4c0c      	ldr	r4, [pc, #48]	; (8006b2c <__libc_init_array+0x44>)
 8006afc:	f000 fc28 	bl	8007350 <_init>
 8006b00:	1ba4      	subs	r4, r4, r6
 8006b02:	10a4      	asrs	r4, r4, #2
 8006b04:	2500      	movs	r5, #0
 8006b06:	42a5      	cmp	r5, r4
 8006b08:	d105      	bne.n	8006b16 <__libc_init_array+0x2e>
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b10:	4798      	blx	r3
 8006b12:	3501      	adds	r5, #1
 8006b14:	e7ee      	b.n	8006af4 <__libc_init_array+0xc>
 8006b16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b1a:	4798      	blx	r3
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	e7f2      	b.n	8006b06 <__libc_init_array+0x1e>
 8006b20:	08007494 	.word	0x08007494
 8006b24:	08007494 	.word	0x08007494
 8006b28:	08007494 	.word	0x08007494
 8006b2c:	08007498 	.word	0x08007498

08006b30 <memcpy>:
 8006b30:	b510      	push	{r4, lr}
 8006b32:	1e43      	subs	r3, r0, #1
 8006b34:	440a      	add	r2, r1
 8006b36:	4291      	cmp	r1, r2
 8006b38:	d100      	bne.n	8006b3c <memcpy+0xc>
 8006b3a:	bd10      	pop	{r4, pc}
 8006b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b44:	e7f7      	b.n	8006b36 <memcpy+0x6>

08006b46 <memset>:
 8006b46:	4402      	add	r2, r0
 8006b48:	4603      	mov	r3, r0
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d100      	bne.n	8006b50 <memset+0xa>
 8006b4e:	4770      	bx	lr
 8006b50:	f803 1b01 	strb.w	r1, [r3], #1
 8006b54:	e7f9      	b.n	8006b4a <memset+0x4>
	...

08006b58 <siprintf>:
 8006b58:	b40e      	push	{r1, r2, r3}
 8006b5a:	b500      	push	{lr}
 8006b5c:	b09c      	sub	sp, #112	; 0x70
 8006b5e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b60:	9002      	str	r0, [sp, #8]
 8006b62:	9006      	str	r0, [sp, #24]
 8006b64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b68:	4809      	ldr	r0, [pc, #36]	; (8006b90 <siprintf+0x38>)
 8006b6a:	9107      	str	r1, [sp, #28]
 8006b6c:	9104      	str	r1, [sp, #16]
 8006b6e:	4909      	ldr	r1, [pc, #36]	; (8006b94 <siprintf+0x3c>)
 8006b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b74:	9105      	str	r1, [sp, #20]
 8006b76:	6800      	ldr	r0, [r0, #0]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	a902      	add	r1, sp, #8
 8006b7c:	f000 f866 	bl	8006c4c <_svfiprintf_r>
 8006b80:	9b02      	ldr	r3, [sp, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	b01c      	add	sp, #112	; 0x70
 8006b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b8c:	b003      	add	sp, #12
 8006b8e:	4770      	bx	lr
 8006b90:	20000010 	.word	0x20000010
 8006b94:	ffff0208 	.word	0xffff0208

08006b98 <__ssputs_r>:
 8006b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	688e      	ldr	r6, [r1, #8]
 8006b9e:	429e      	cmp	r6, r3
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	4690      	mov	r8, r2
 8006ba6:	4699      	mov	r9, r3
 8006ba8:	d837      	bhi.n	8006c1a <__ssputs_r+0x82>
 8006baa:	898a      	ldrh	r2, [r1, #12]
 8006bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bb0:	d031      	beq.n	8006c16 <__ssputs_r+0x7e>
 8006bb2:	6825      	ldr	r5, [r4, #0]
 8006bb4:	6909      	ldr	r1, [r1, #16]
 8006bb6:	1a6f      	subs	r7, r5, r1
 8006bb8:	6965      	ldr	r5, [r4, #20]
 8006bba:	2302      	movs	r3, #2
 8006bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006bc4:	f109 0301 	add.w	r3, r9, #1
 8006bc8:	443b      	add	r3, r7
 8006bca:	429d      	cmp	r5, r3
 8006bcc:	bf38      	it	cc
 8006bce:	461d      	movcc	r5, r3
 8006bd0:	0553      	lsls	r3, r2, #21
 8006bd2:	d530      	bpl.n	8006c36 <__ssputs_r+0x9e>
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f000 fb21 	bl	800721c <_malloc_r>
 8006bda:	4606      	mov	r6, r0
 8006bdc:	b950      	cbnz	r0, 8006bf4 <__ssputs_r+0x5c>
 8006bde:	230c      	movs	r3, #12
 8006be0:	f8ca 3000 	str.w	r3, [sl]
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf4:	463a      	mov	r2, r7
 8006bf6:	6921      	ldr	r1, [r4, #16]
 8006bf8:	f7ff ff9a 	bl	8006b30 <memcpy>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	6126      	str	r6, [r4, #16]
 8006c0a:	6165      	str	r5, [r4, #20]
 8006c0c:	443e      	add	r6, r7
 8006c0e:	1bed      	subs	r5, r5, r7
 8006c10:	6026      	str	r6, [r4, #0]
 8006c12:	60a5      	str	r5, [r4, #8]
 8006c14:	464e      	mov	r6, r9
 8006c16:	454e      	cmp	r6, r9
 8006c18:	d900      	bls.n	8006c1c <__ssputs_r+0x84>
 8006c1a:	464e      	mov	r6, r9
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	4641      	mov	r1, r8
 8006c20:	6820      	ldr	r0, [r4, #0]
 8006c22:	f000 fa93 	bl	800714c <memmove>
 8006c26:	68a3      	ldr	r3, [r4, #8]
 8006c28:	1b9b      	subs	r3, r3, r6
 8006c2a:	60a3      	str	r3, [r4, #8]
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	441e      	add	r6, r3
 8006c30:	6026      	str	r6, [r4, #0]
 8006c32:	2000      	movs	r0, #0
 8006c34:	e7dc      	b.n	8006bf0 <__ssputs_r+0x58>
 8006c36:	462a      	mov	r2, r5
 8006c38:	f000 fb4a 	bl	80072d0 <_realloc_r>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d1e2      	bne.n	8006c08 <__ssputs_r+0x70>
 8006c42:	6921      	ldr	r1, [r4, #16]
 8006c44:	4650      	mov	r0, sl
 8006c46:	f000 fa9b 	bl	8007180 <_free_r>
 8006c4a:	e7c8      	b.n	8006bde <__ssputs_r+0x46>

08006c4c <_svfiprintf_r>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	461d      	mov	r5, r3
 8006c52:	898b      	ldrh	r3, [r1, #12]
 8006c54:	061f      	lsls	r7, r3, #24
 8006c56:	b09d      	sub	sp, #116	; 0x74
 8006c58:	4680      	mov	r8, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	d50f      	bpl.n	8006c80 <_svfiprintf_r+0x34>
 8006c60:	690b      	ldr	r3, [r1, #16]
 8006c62:	b96b      	cbnz	r3, 8006c80 <_svfiprintf_r+0x34>
 8006c64:	2140      	movs	r1, #64	; 0x40
 8006c66:	f000 fad9 	bl	800721c <_malloc_r>
 8006c6a:	6020      	str	r0, [r4, #0]
 8006c6c:	6120      	str	r0, [r4, #16]
 8006c6e:	b928      	cbnz	r0, 8006c7c <_svfiprintf_r+0x30>
 8006c70:	230c      	movs	r3, #12
 8006c72:	f8c8 3000 	str.w	r3, [r8]
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7a:	e0c8      	b.n	8006e0e <_svfiprintf_r+0x1c2>
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	6163      	str	r3, [r4, #20]
 8006c80:	2300      	movs	r3, #0
 8006c82:	9309      	str	r3, [sp, #36]	; 0x24
 8006c84:	2320      	movs	r3, #32
 8006c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c8a:	2330      	movs	r3, #48	; 0x30
 8006c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c90:	9503      	str	r5, [sp, #12]
 8006c92:	f04f 0b01 	mov.w	fp, #1
 8006c96:	4637      	mov	r7, r6
 8006c98:	463d      	mov	r5, r7
 8006c9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c9e:	b10b      	cbz	r3, 8006ca4 <_svfiprintf_r+0x58>
 8006ca0:	2b25      	cmp	r3, #37	; 0x25
 8006ca2:	d13e      	bne.n	8006d22 <_svfiprintf_r+0xd6>
 8006ca4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ca8:	d00b      	beq.n	8006cc2 <_svfiprintf_r+0x76>
 8006caa:	4653      	mov	r3, sl
 8006cac:	4632      	mov	r2, r6
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	f7ff ff71 	bl	8006b98 <__ssputs_r>
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f000 80a4 	beq.w	8006e04 <_svfiprintf_r+0x1b8>
 8006cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cbe:	4453      	add	r3, sl
 8006cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc2:	783b      	ldrb	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 809d 	beq.w	8006e04 <_svfiprintf_r+0x1b8>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cd4:	9304      	str	r3, [sp, #16]
 8006cd6:	9307      	str	r3, [sp, #28]
 8006cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8006cde:	462f      	mov	r7, r5
 8006ce0:	2205      	movs	r2, #5
 8006ce2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006ce6:	4850      	ldr	r0, [pc, #320]	; (8006e28 <_svfiprintf_r+0x1dc>)
 8006ce8:	f7f9 fa82 	bl	80001f0 <memchr>
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	b9d0      	cbnz	r0, 8006d26 <_svfiprintf_r+0xda>
 8006cf0:	06d9      	lsls	r1, r3, #27
 8006cf2:	bf44      	itt	mi
 8006cf4:	2220      	movmi	r2, #32
 8006cf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cfa:	071a      	lsls	r2, r3, #28
 8006cfc:	bf44      	itt	mi
 8006cfe:	222b      	movmi	r2, #43	; 0x2b
 8006d00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d04:	782a      	ldrb	r2, [r5, #0]
 8006d06:	2a2a      	cmp	r2, #42	; 0x2a
 8006d08:	d015      	beq.n	8006d36 <_svfiprintf_r+0xea>
 8006d0a:	9a07      	ldr	r2, [sp, #28]
 8006d0c:	462f      	mov	r7, r5
 8006d0e:	2000      	movs	r0, #0
 8006d10:	250a      	movs	r5, #10
 8006d12:	4639      	mov	r1, r7
 8006d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d18:	3b30      	subs	r3, #48	; 0x30
 8006d1a:	2b09      	cmp	r3, #9
 8006d1c:	d94d      	bls.n	8006dba <_svfiprintf_r+0x16e>
 8006d1e:	b1b8      	cbz	r0, 8006d50 <_svfiprintf_r+0x104>
 8006d20:	e00f      	b.n	8006d42 <_svfiprintf_r+0xf6>
 8006d22:	462f      	mov	r7, r5
 8006d24:	e7b8      	b.n	8006c98 <_svfiprintf_r+0x4c>
 8006d26:	4a40      	ldr	r2, [pc, #256]	; (8006e28 <_svfiprintf_r+0x1dc>)
 8006d28:	1a80      	subs	r0, r0, r2
 8006d2a:	fa0b f000 	lsl.w	r0, fp, r0
 8006d2e:	4318      	orrs	r0, r3
 8006d30:	9004      	str	r0, [sp, #16]
 8006d32:	463d      	mov	r5, r7
 8006d34:	e7d3      	b.n	8006cde <_svfiprintf_r+0x92>
 8006d36:	9a03      	ldr	r2, [sp, #12]
 8006d38:	1d11      	adds	r1, r2, #4
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	9103      	str	r1, [sp, #12]
 8006d3e:	2a00      	cmp	r2, #0
 8006d40:	db01      	blt.n	8006d46 <_svfiprintf_r+0xfa>
 8006d42:	9207      	str	r2, [sp, #28]
 8006d44:	e004      	b.n	8006d50 <_svfiprintf_r+0x104>
 8006d46:	4252      	negs	r2, r2
 8006d48:	f043 0302 	orr.w	r3, r3, #2
 8006d4c:	9207      	str	r2, [sp, #28]
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	783b      	ldrb	r3, [r7, #0]
 8006d52:	2b2e      	cmp	r3, #46	; 0x2e
 8006d54:	d10c      	bne.n	8006d70 <_svfiprintf_r+0x124>
 8006d56:	787b      	ldrb	r3, [r7, #1]
 8006d58:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5a:	d133      	bne.n	8006dc4 <_svfiprintf_r+0x178>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	1d1a      	adds	r2, r3, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	9203      	str	r2, [sp, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfb8      	it	lt
 8006d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d6c:	3702      	adds	r7, #2
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	4d2e      	ldr	r5, [pc, #184]	; (8006e2c <_svfiprintf_r+0x1e0>)
 8006d72:	7839      	ldrb	r1, [r7, #0]
 8006d74:	2203      	movs	r2, #3
 8006d76:	4628      	mov	r0, r5
 8006d78:	f7f9 fa3a 	bl	80001f0 <memchr>
 8006d7c:	b138      	cbz	r0, 8006d8e <_svfiprintf_r+0x142>
 8006d7e:	2340      	movs	r3, #64	; 0x40
 8006d80:	1b40      	subs	r0, r0, r5
 8006d82:	fa03 f000 	lsl.w	r0, r3, r0
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	4303      	orrs	r3, r0
 8006d8a:	3701      	adds	r7, #1
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	7839      	ldrb	r1, [r7, #0]
 8006d90:	4827      	ldr	r0, [pc, #156]	; (8006e30 <_svfiprintf_r+0x1e4>)
 8006d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d96:	2206      	movs	r2, #6
 8006d98:	1c7e      	adds	r6, r7, #1
 8006d9a:	f7f9 fa29 	bl	80001f0 <memchr>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d038      	beq.n	8006e14 <_svfiprintf_r+0x1c8>
 8006da2:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <_svfiprintf_r+0x1e8>)
 8006da4:	bb13      	cbnz	r3, 8006dec <_svfiprintf_r+0x1a0>
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	3307      	adds	r3, #7
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	3308      	adds	r3, #8
 8006db0:	9303      	str	r3, [sp, #12]
 8006db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db4:	444b      	add	r3, r9
 8006db6:	9309      	str	r3, [sp, #36]	; 0x24
 8006db8:	e76d      	b.n	8006c96 <_svfiprintf_r+0x4a>
 8006dba:	fb05 3202 	mla	r2, r5, r2, r3
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	460f      	mov	r7, r1
 8006dc2:	e7a6      	b.n	8006d12 <_svfiprintf_r+0xc6>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	3701      	adds	r7, #1
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	250a      	movs	r5, #10
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd4:	3a30      	subs	r2, #48	; 0x30
 8006dd6:	2a09      	cmp	r2, #9
 8006dd8:	d903      	bls.n	8006de2 <_svfiprintf_r+0x196>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0c8      	beq.n	8006d70 <_svfiprintf_r+0x124>
 8006dde:	9105      	str	r1, [sp, #20]
 8006de0:	e7c6      	b.n	8006d70 <_svfiprintf_r+0x124>
 8006de2:	fb05 2101 	mla	r1, r5, r1, r2
 8006de6:	2301      	movs	r3, #1
 8006de8:	4607      	mov	r7, r0
 8006dea:	e7f0      	b.n	8006dce <_svfiprintf_r+0x182>
 8006dec:	ab03      	add	r3, sp, #12
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	4622      	mov	r2, r4
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <_svfiprintf_r+0x1ec>)
 8006df4:	a904      	add	r1, sp, #16
 8006df6:	4640      	mov	r0, r8
 8006df8:	f3af 8000 	nop.w
 8006dfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e00:	4681      	mov	r9, r0
 8006e02:	d1d6      	bne.n	8006db2 <_svfiprintf_r+0x166>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	065b      	lsls	r3, r3, #25
 8006e08:	f53f af35 	bmi.w	8006c76 <_svfiprintf_r+0x2a>
 8006e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e0e:	b01d      	add	sp, #116	; 0x74
 8006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e14:	ab03      	add	r3, sp, #12
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <_svfiprintf_r+0x1ec>)
 8006e1c:	a904      	add	r1, sp, #16
 8006e1e:	4640      	mov	r0, r8
 8006e20:	f000 f882 	bl	8006f28 <_printf_i>
 8006e24:	e7ea      	b.n	8006dfc <_svfiprintf_r+0x1b0>
 8006e26:	bf00      	nop
 8006e28:	08007460 	.word	0x08007460
 8006e2c:	08007466 	.word	0x08007466
 8006e30:	0800746a 	.word	0x0800746a
 8006e34:	00000000 	.word	0x00000000
 8006e38:	08006b99 	.word	0x08006b99

08006e3c <_printf_common>:
 8006e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	4691      	mov	r9, r2
 8006e42:	461f      	mov	r7, r3
 8006e44:	688a      	ldr	r2, [r1, #8]
 8006e46:	690b      	ldr	r3, [r1, #16]
 8006e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	bfb8      	it	lt
 8006e50:	4613      	movlt	r3, r2
 8006e52:	f8c9 3000 	str.w	r3, [r9]
 8006e56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	b112      	cbz	r2, 8006e66 <_printf_common+0x2a>
 8006e60:	3301      	adds	r3, #1
 8006e62:	f8c9 3000 	str.w	r3, [r9]
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	0699      	lsls	r1, r3, #26
 8006e6a:	bf42      	ittt	mi
 8006e6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e70:	3302      	addmi	r3, #2
 8006e72:	f8c9 3000 	strmi.w	r3, [r9]
 8006e76:	6825      	ldr	r5, [r4, #0]
 8006e78:	f015 0506 	ands.w	r5, r5, #6
 8006e7c:	d107      	bne.n	8006e8e <_printf_common+0x52>
 8006e7e:	f104 0a19 	add.w	sl, r4, #25
 8006e82:	68e3      	ldr	r3, [r4, #12]
 8006e84:	f8d9 2000 	ldr.w	r2, [r9]
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	42ab      	cmp	r3, r5
 8006e8c:	dc28      	bgt.n	8006ee0 <_printf_common+0xa4>
 8006e8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	3300      	adds	r3, #0
 8006e96:	bf18      	it	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	0692      	lsls	r2, r2, #26
 8006e9c:	d42d      	bmi.n	8006efa <_printf_common+0xbe>
 8006e9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	47c0      	blx	r8
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d020      	beq.n	8006eee <_printf_common+0xb2>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	68e5      	ldr	r5, [r4, #12]
 8006eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8006eb4:	f003 0306 	and.w	r3, r3, #6
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	bf08      	it	eq
 8006ebc:	1aad      	subeq	r5, r5, r2
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	6922      	ldr	r2, [r4, #16]
 8006ec2:	bf0c      	ite	eq
 8006ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec8:	2500      	movne	r5, #0
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bfc4      	itt	gt
 8006ece:	1a9b      	subgt	r3, r3, r2
 8006ed0:	18ed      	addgt	r5, r5, r3
 8006ed2:	f04f 0900 	mov.w	r9, #0
 8006ed6:	341a      	adds	r4, #26
 8006ed8:	454d      	cmp	r5, r9
 8006eda:	d11a      	bne.n	8006f12 <_printf_common+0xd6>
 8006edc:	2000      	movs	r0, #0
 8006ede:	e008      	b.n	8006ef2 <_printf_common+0xb6>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	47c0      	blx	r8
 8006eea:	3001      	adds	r0, #1
 8006eec:	d103      	bne.n	8006ef6 <_printf_common+0xba>
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef6:	3501      	adds	r5, #1
 8006ef8:	e7c3      	b.n	8006e82 <_printf_common+0x46>
 8006efa:	18e1      	adds	r1, r4, r3
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	2030      	movs	r0, #48	; 0x30
 8006f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f04:	4422      	add	r2, r4
 8006f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f0e:	3302      	adds	r3, #2
 8006f10:	e7c5      	b.n	8006e9e <_printf_common+0x62>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4622      	mov	r2, r4
 8006f16:	4639      	mov	r1, r7
 8006f18:	4630      	mov	r0, r6
 8006f1a:	47c0      	blx	r8
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d0e6      	beq.n	8006eee <_printf_common+0xb2>
 8006f20:	f109 0901 	add.w	r9, r9, #1
 8006f24:	e7d8      	b.n	8006ed8 <_printf_common+0x9c>
	...

08006f28 <_printf_i>:
 8006f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f30:	460c      	mov	r4, r1
 8006f32:	7e09      	ldrb	r1, [r1, #24]
 8006f34:	b085      	sub	sp, #20
 8006f36:	296e      	cmp	r1, #110	; 0x6e
 8006f38:	4617      	mov	r7, r2
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	4698      	mov	r8, r3
 8006f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f40:	f000 80b3 	beq.w	80070aa <_printf_i+0x182>
 8006f44:	d822      	bhi.n	8006f8c <_printf_i+0x64>
 8006f46:	2963      	cmp	r1, #99	; 0x63
 8006f48:	d036      	beq.n	8006fb8 <_printf_i+0x90>
 8006f4a:	d80a      	bhi.n	8006f62 <_printf_i+0x3a>
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	f000 80b9 	beq.w	80070c4 <_printf_i+0x19c>
 8006f52:	2958      	cmp	r1, #88	; 0x58
 8006f54:	f000 8083 	beq.w	800705e <_printf_i+0x136>
 8006f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f60:	e032      	b.n	8006fc8 <_printf_i+0xa0>
 8006f62:	2964      	cmp	r1, #100	; 0x64
 8006f64:	d001      	beq.n	8006f6a <_printf_i+0x42>
 8006f66:	2969      	cmp	r1, #105	; 0x69
 8006f68:	d1f6      	bne.n	8006f58 <_printf_i+0x30>
 8006f6a:	6820      	ldr	r0, [r4, #0]
 8006f6c:	6813      	ldr	r3, [r2, #0]
 8006f6e:	0605      	lsls	r5, r0, #24
 8006f70:	f103 0104 	add.w	r1, r3, #4
 8006f74:	d52a      	bpl.n	8006fcc <_printf_i+0xa4>
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6011      	str	r1, [r2, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da03      	bge.n	8006f86 <_printf_i+0x5e>
 8006f7e:	222d      	movs	r2, #45	; 0x2d
 8006f80:	425b      	negs	r3, r3
 8006f82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f86:	486f      	ldr	r0, [pc, #444]	; (8007144 <_printf_i+0x21c>)
 8006f88:	220a      	movs	r2, #10
 8006f8a:	e039      	b.n	8007000 <_printf_i+0xd8>
 8006f8c:	2973      	cmp	r1, #115	; 0x73
 8006f8e:	f000 809d 	beq.w	80070cc <_printf_i+0x1a4>
 8006f92:	d808      	bhi.n	8006fa6 <_printf_i+0x7e>
 8006f94:	296f      	cmp	r1, #111	; 0x6f
 8006f96:	d020      	beq.n	8006fda <_printf_i+0xb2>
 8006f98:	2970      	cmp	r1, #112	; 0x70
 8006f9a:	d1dd      	bne.n	8006f58 <_printf_i+0x30>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	f043 0320 	orr.w	r3, r3, #32
 8006fa2:	6023      	str	r3, [r4, #0]
 8006fa4:	e003      	b.n	8006fae <_printf_i+0x86>
 8006fa6:	2975      	cmp	r1, #117	; 0x75
 8006fa8:	d017      	beq.n	8006fda <_printf_i+0xb2>
 8006faa:	2978      	cmp	r1, #120	; 0x78
 8006fac:	d1d4      	bne.n	8006f58 <_printf_i+0x30>
 8006fae:	2378      	movs	r3, #120	; 0x78
 8006fb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fb4:	4864      	ldr	r0, [pc, #400]	; (8007148 <_printf_i+0x220>)
 8006fb6:	e055      	b.n	8007064 <_printf_i+0x13c>
 8006fb8:	6813      	ldr	r3, [r2, #0]
 8006fba:	1d19      	adds	r1, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6011      	str	r1, [r2, #0]
 8006fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e08c      	b.n	80070e6 <_printf_i+0x1be>
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6011      	str	r1, [r2, #0]
 8006fd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fd4:	bf18      	it	ne
 8006fd6:	b21b      	sxthne	r3, r3
 8006fd8:	e7cf      	b.n	8006f7a <_printf_i+0x52>
 8006fda:	6813      	ldr	r3, [r2, #0]
 8006fdc:	6825      	ldr	r5, [r4, #0]
 8006fde:	1d18      	adds	r0, r3, #4
 8006fe0:	6010      	str	r0, [r2, #0]
 8006fe2:	0628      	lsls	r0, r5, #24
 8006fe4:	d501      	bpl.n	8006fea <_printf_i+0xc2>
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	e002      	b.n	8006ff0 <_printf_i+0xc8>
 8006fea:	0668      	lsls	r0, r5, #25
 8006fec:	d5fb      	bpl.n	8006fe6 <_printf_i+0xbe>
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	4854      	ldr	r0, [pc, #336]	; (8007144 <_printf_i+0x21c>)
 8006ff2:	296f      	cmp	r1, #111	; 0x6f
 8006ff4:	bf14      	ite	ne
 8006ff6:	220a      	movne	r2, #10
 8006ff8:	2208      	moveq	r2, #8
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007000:	6865      	ldr	r5, [r4, #4]
 8007002:	60a5      	str	r5, [r4, #8]
 8007004:	2d00      	cmp	r5, #0
 8007006:	f2c0 8095 	blt.w	8007134 <_printf_i+0x20c>
 800700a:	6821      	ldr	r1, [r4, #0]
 800700c:	f021 0104 	bic.w	r1, r1, #4
 8007010:	6021      	str	r1, [r4, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d13d      	bne.n	8007092 <_printf_i+0x16a>
 8007016:	2d00      	cmp	r5, #0
 8007018:	f040 808e 	bne.w	8007138 <_printf_i+0x210>
 800701c:	4665      	mov	r5, ip
 800701e:	2a08      	cmp	r2, #8
 8007020:	d10b      	bne.n	800703a <_printf_i+0x112>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	07db      	lsls	r3, r3, #31
 8007026:	d508      	bpl.n	800703a <_printf_i+0x112>
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	6862      	ldr	r2, [r4, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	bfde      	ittt	le
 8007030:	2330      	movle	r3, #48	; 0x30
 8007032:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007036:	f105 35ff 	addle.w	r5, r5, #4294967295
 800703a:	ebac 0305 	sub.w	r3, ip, r5
 800703e:	6123      	str	r3, [r4, #16]
 8007040:	f8cd 8000 	str.w	r8, [sp]
 8007044:	463b      	mov	r3, r7
 8007046:	aa03      	add	r2, sp, #12
 8007048:	4621      	mov	r1, r4
 800704a:	4630      	mov	r0, r6
 800704c:	f7ff fef6 	bl	8006e3c <_printf_common>
 8007050:	3001      	adds	r0, #1
 8007052:	d14d      	bne.n	80070f0 <_printf_i+0x1c8>
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	b005      	add	sp, #20
 800705a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800705e:	4839      	ldr	r0, [pc, #228]	; (8007144 <_printf_i+0x21c>)
 8007060:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007064:	6813      	ldr	r3, [r2, #0]
 8007066:	6821      	ldr	r1, [r4, #0]
 8007068:	1d1d      	adds	r5, r3, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6015      	str	r5, [r2, #0]
 800706e:	060a      	lsls	r2, r1, #24
 8007070:	d50b      	bpl.n	800708a <_printf_i+0x162>
 8007072:	07ca      	lsls	r2, r1, #31
 8007074:	bf44      	itt	mi
 8007076:	f041 0120 	orrmi.w	r1, r1, #32
 800707a:	6021      	strmi	r1, [r4, #0]
 800707c:	b91b      	cbnz	r3, 8007086 <_printf_i+0x15e>
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	f022 0220 	bic.w	r2, r2, #32
 8007084:	6022      	str	r2, [r4, #0]
 8007086:	2210      	movs	r2, #16
 8007088:	e7b7      	b.n	8006ffa <_printf_i+0xd2>
 800708a:	064d      	lsls	r5, r1, #25
 800708c:	bf48      	it	mi
 800708e:	b29b      	uxthmi	r3, r3
 8007090:	e7ef      	b.n	8007072 <_printf_i+0x14a>
 8007092:	4665      	mov	r5, ip
 8007094:	fbb3 f1f2 	udiv	r1, r3, r2
 8007098:	fb02 3311 	mls	r3, r2, r1, r3
 800709c:	5cc3      	ldrb	r3, [r0, r3]
 800709e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80070a2:	460b      	mov	r3, r1
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d1f5      	bne.n	8007094 <_printf_i+0x16c>
 80070a8:	e7b9      	b.n	800701e <_printf_i+0xf6>
 80070aa:	6813      	ldr	r3, [r2, #0]
 80070ac:	6825      	ldr	r5, [r4, #0]
 80070ae:	6961      	ldr	r1, [r4, #20]
 80070b0:	1d18      	adds	r0, r3, #4
 80070b2:	6010      	str	r0, [r2, #0]
 80070b4:	0628      	lsls	r0, r5, #24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	d501      	bpl.n	80070be <_printf_i+0x196>
 80070ba:	6019      	str	r1, [r3, #0]
 80070bc:	e002      	b.n	80070c4 <_printf_i+0x19c>
 80070be:	066a      	lsls	r2, r5, #25
 80070c0:	d5fb      	bpl.n	80070ba <_printf_i+0x192>
 80070c2:	8019      	strh	r1, [r3, #0]
 80070c4:	2300      	movs	r3, #0
 80070c6:	6123      	str	r3, [r4, #16]
 80070c8:	4665      	mov	r5, ip
 80070ca:	e7b9      	b.n	8007040 <_printf_i+0x118>
 80070cc:	6813      	ldr	r3, [r2, #0]
 80070ce:	1d19      	adds	r1, r3, #4
 80070d0:	6011      	str	r1, [r2, #0]
 80070d2:	681d      	ldr	r5, [r3, #0]
 80070d4:	6862      	ldr	r2, [r4, #4]
 80070d6:	2100      	movs	r1, #0
 80070d8:	4628      	mov	r0, r5
 80070da:	f7f9 f889 	bl	80001f0 <memchr>
 80070de:	b108      	cbz	r0, 80070e4 <_printf_i+0x1bc>
 80070e0:	1b40      	subs	r0, r0, r5
 80070e2:	6060      	str	r0, [r4, #4]
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	2300      	movs	r3, #0
 80070ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ee:	e7a7      	b.n	8007040 <_printf_i+0x118>
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	462a      	mov	r2, r5
 80070f4:	4639      	mov	r1, r7
 80070f6:	4630      	mov	r0, r6
 80070f8:	47c0      	blx	r8
 80070fa:	3001      	adds	r0, #1
 80070fc:	d0aa      	beq.n	8007054 <_printf_i+0x12c>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	079b      	lsls	r3, r3, #30
 8007102:	d413      	bmi.n	800712c <_printf_i+0x204>
 8007104:	68e0      	ldr	r0, [r4, #12]
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	4298      	cmp	r0, r3
 800710a:	bfb8      	it	lt
 800710c:	4618      	movlt	r0, r3
 800710e:	e7a3      	b.n	8007058 <_printf_i+0x130>
 8007110:	2301      	movs	r3, #1
 8007112:	464a      	mov	r2, r9
 8007114:	4639      	mov	r1, r7
 8007116:	4630      	mov	r0, r6
 8007118:	47c0      	blx	r8
 800711a:	3001      	adds	r0, #1
 800711c:	d09a      	beq.n	8007054 <_printf_i+0x12c>
 800711e:	3501      	adds	r5, #1
 8007120:	68e3      	ldr	r3, [r4, #12]
 8007122:	9a03      	ldr	r2, [sp, #12]
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	42ab      	cmp	r3, r5
 8007128:	dcf2      	bgt.n	8007110 <_printf_i+0x1e8>
 800712a:	e7eb      	b.n	8007104 <_printf_i+0x1dc>
 800712c:	2500      	movs	r5, #0
 800712e:	f104 0919 	add.w	r9, r4, #25
 8007132:	e7f5      	b.n	8007120 <_printf_i+0x1f8>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1ac      	bne.n	8007092 <_printf_i+0x16a>
 8007138:	7803      	ldrb	r3, [r0, #0]
 800713a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800713e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007142:	e76c      	b.n	800701e <_printf_i+0xf6>
 8007144:	08007471 	.word	0x08007471
 8007148:	08007482 	.word	0x08007482

0800714c <memmove>:
 800714c:	4288      	cmp	r0, r1
 800714e:	b510      	push	{r4, lr}
 8007150:	eb01 0302 	add.w	r3, r1, r2
 8007154:	d807      	bhi.n	8007166 <memmove+0x1a>
 8007156:	1e42      	subs	r2, r0, #1
 8007158:	4299      	cmp	r1, r3
 800715a:	d00a      	beq.n	8007172 <memmove+0x26>
 800715c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007160:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007164:	e7f8      	b.n	8007158 <memmove+0xc>
 8007166:	4283      	cmp	r3, r0
 8007168:	d9f5      	bls.n	8007156 <memmove+0xa>
 800716a:	1881      	adds	r1, r0, r2
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	42d3      	cmn	r3, r2
 8007170:	d100      	bne.n	8007174 <memmove+0x28>
 8007172:	bd10      	pop	{r4, pc}
 8007174:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007178:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800717c:	e7f7      	b.n	800716e <memmove+0x22>
	...

08007180 <_free_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4605      	mov	r5, r0
 8007184:	2900      	cmp	r1, #0
 8007186:	d045      	beq.n	8007214 <_free_r+0x94>
 8007188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718c:	1f0c      	subs	r4, r1, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	18e4      	addlt	r4, r4, r3
 8007194:	f000 f8d2 	bl	800733c <__malloc_lock>
 8007198:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <_free_r+0x98>)
 800719a:	6813      	ldr	r3, [r2, #0]
 800719c:	4610      	mov	r0, r2
 800719e:	b933      	cbnz	r3, 80071ae <_free_r+0x2e>
 80071a0:	6063      	str	r3, [r4, #4]
 80071a2:	6014      	str	r4, [r2, #0]
 80071a4:	4628      	mov	r0, r5
 80071a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071aa:	f000 b8c8 	b.w	800733e <__malloc_unlock>
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	d90c      	bls.n	80071cc <_free_r+0x4c>
 80071b2:	6821      	ldr	r1, [r4, #0]
 80071b4:	1862      	adds	r2, r4, r1
 80071b6:	4293      	cmp	r3, r2
 80071b8:	bf04      	itt	eq
 80071ba:	681a      	ldreq	r2, [r3, #0]
 80071bc:	685b      	ldreq	r3, [r3, #4]
 80071be:	6063      	str	r3, [r4, #4]
 80071c0:	bf04      	itt	eq
 80071c2:	1852      	addeq	r2, r2, r1
 80071c4:	6022      	streq	r2, [r4, #0]
 80071c6:	6004      	str	r4, [r0, #0]
 80071c8:	e7ec      	b.n	80071a4 <_free_r+0x24>
 80071ca:	4613      	mov	r3, r2
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	b10a      	cbz	r2, 80071d4 <_free_r+0x54>
 80071d0:	42a2      	cmp	r2, r4
 80071d2:	d9fa      	bls.n	80071ca <_free_r+0x4a>
 80071d4:	6819      	ldr	r1, [r3, #0]
 80071d6:	1858      	adds	r0, r3, r1
 80071d8:	42a0      	cmp	r0, r4
 80071da:	d10b      	bne.n	80071f4 <_free_r+0x74>
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	4401      	add	r1, r0
 80071e0:	1858      	adds	r0, r3, r1
 80071e2:	4282      	cmp	r2, r0
 80071e4:	6019      	str	r1, [r3, #0]
 80071e6:	d1dd      	bne.n	80071a4 <_free_r+0x24>
 80071e8:	6810      	ldr	r0, [r2, #0]
 80071ea:	6852      	ldr	r2, [r2, #4]
 80071ec:	605a      	str	r2, [r3, #4]
 80071ee:	4401      	add	r1, r0
 80071f0:	6019      	str	r1, [r3, #0]
 80071f2:	e7d7      	b.n	80071a4 <_free_r+0x24>
 80071f4:	d902      	bls.n	80071fc <_free_r+0x7c>
 80071f6:	230c      	movs	r3, #12
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	e7d3      	b.n	80071a4 <_free_r+0x24>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	1821      	adds	r1, r4, r0
 8007200:	428a      	cmp	r2, r1
 8007202:	bf04      	itt	eq
 8007204:	6811      	ldreq	r1, [r2, #0]
 8007206:	6852      	ldreq	r2, [r2, #4]
 8007208:	6062      	str	r2, [r4, #4]
 800720a:	bf04      	itt	eq
 800720c:	1809      	addeq	r1, r1, r0
 800720e:	6021      	streq	r1, [r4, #0]
 8007210:	605c      	str	r4, [r3, #4]
 8007212:	e7c7      	b.n	80071a4 <_free_r+0x24>
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	bf00      	nop
 8007218:	20001b28 	.word	0x20001b28

0800721c <_malloc_r>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	1ccd      	adds	r5, r1, #3
 8007220:	f025 0503 	bic.w	r5, r5, #3
 8007224:	3508      	adds	r5, #8
 8007226:	2d0c      	cmp	r5, #12
 8007228:	bf38      	it	cc
 800722a:	250c      	movcc	r5, #12
 800722c:	2d00      	cmp	r5, #0
 800722e:	4606      	mov	r6, r0
 8007230:	db01      	blt.n	8007236 <_malloc_r+0x1a>
 8007232:	42a9      	cmp	r1, r5
 8007234:	d903      	bls.n	800723e <_malloc_r+0x22>
 8007236:	230c      	movs	r3, #12
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	2000      	movs	r0, #0
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	f000 f87d 	bl	800733c <__malloc_lock>
 8007242:	4a21      	ldr	r2, [pc, #132]	; (80072c8 <_malloc_r+0xac>)
 8007244:	6814      	ldr	r4, [r2, #0]
 8007246:	4621      	mov	r1, r4
 8007248:	b991      	cbnz	r1, 8007270 <_malloc_r+0x54>
 800724a:	4c20      	ldr	r4, [pc, #128]	; (80072cc <_malloc_r+0xb0>)
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	b91b      	cbnz	r3, 8007258 <_malloc_r+0x3c>
 8007250:	4630      	mov	r0, r6
 8007252:	f000 f863 	bl	800731c <_sbrk_r>
 8007256:	6020      	str	r0, [r4, #0]
 8007258:	4629      	mov	r1, r5
 800725a:	4630      	mov	r0, r6
 800725c:	f000 f85e 	bl	800731c <_sbrk_r>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d124      	bne.n	80072ae <_malloc_r+0x92>
 8007264:	230c      	movs	r3, #12
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	4630      	mov	r0, r6
 800726a:	f000 f868 	bl	800733e <__malloc_unlock>
 800726e:	e7e4      	b.n	800723a <_malloc_r+0x1e>
 8007270:	680b      	ldr	r3, [r1, #0]
 8007272:	1b5b      	subs	r3, r3, r5
 8007274:	d418      	bmi.n	80072a8 <_malloc_r+0x8c>
 8007276:	2b0b      	cmp	r3, #11
 8007278:	d90f      	bls.n	800729a <_malloc_r+0x7e>
 800727a:	600b      	str	r3, [r1, #0]
 800727c:	50cd      	str	r5, [r1, r3]
 800727e:	18cc      	adds	r4, r1, r3
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f85c 	bl	800733e <__malloc_unlock>
 8007286:	f104 000b 	add.w	r0, r4, #11
 800728a:	1d23      	adds	r3, r4, #4
 800728c:	f020 0007 	bic.w	r0, r0, #7
 8007290:	1ac3      	subs	r3, r0, r3
 8007292:	d0d3      	beq.n	800723c <_malloc_r+0x20>
 8007294:	425a      	negs	r2, r3
 8007296:	50e2      	str	r2, [r4, r3]
 8007298:	e7d0      	b.n	800723c <_malloc_r+0x20>
 800729a:	428c      	cmp	r4, r1
 800729c:	684b      	ldr	r3, [r1, #4]
 800729e:	bf16      	itet	ne
 80072a0:	6063      	strne	r3, [r4, #4]
 80072a2:	6013      	streq	r3, [r2, #0]
 80072a4:	460c      	movne	r4, r1
 80072a6:	e7eb      	b.n	8007280 <_malloc_r+0x64>
 80072a8:	460c      	mov	r4, r1
 80072aa:	6849      	ldr	r1, [r1, #4]
 80072ac:	e7cc      	b.n	8007248 <_malloc_r+0x2c>
 80072ae:	1cc4      	adds	r4, r0, #3
 80072b0:	f024 0403 	bic.w	r4, r4, #3
 80072b4:	42a0      	cmp	r0, r4
 80072b6:	d005      	beq.n	80072c4 <_malloc_r+0xa8>
 80072b8:	1a21      	subs	r1, r4, r0
 80072ba:	4630      	mov	r0, r6
 80072bc:	f000 f82e 	bl	800731c <_sbrk_r>
 80072c0:	3001      	adds	r0, #1
 80072c2:	d0cf      	beq.n	8007264 <_malloc_r+0x48>
 80072c4:	6025      	str	r5, [r4, #0]
 80072c6:	e7db      	b.n	8007280 <_malloc_r+0x64>
 80072c8:	20001b28 	.word	0x20001b28
 80072cc:	20001b2c 	.word	0x20001b2c

080072d0 <_realloc_r>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	4607      	mov	r7, r0
 80072d4:	4614      	mov	r4, r2
 80072d6:	460e      	mov	r6, r1
 80072d8:	b921      	cbnz	r1, 80072e4 <_realloc_r+0x14>
 80072da:	4611      	mov	r1, r2
 80072dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072e0:	f7ff bf9c 	b.w	800721c <_malloc_r>
 80072e4:	b922      	cbnz	r2, 80072f0 <_realloc_r+0x20>
 80072e6:	f7ff ff4b 	bl	8007180 <_free_r>
 80072ea:	4625      	mov	r5, r4
 80072ec:	4628      	mov	r0, r5
 80072ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f0:	f000 f826 	bl	8007340 <_malloc_usable_size_r>
 80072f4:	42a0      	cmp	r0, r4
 80072f6:	d20f      	bcs.n	8007318 <_realloc_r+0x48>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4638      	mov	r0, r7
 80072fc:	f7ff ff8e 	bl	800721c <_malloc_r>
 8007300:	4605      	mov	r5, r0
 8007302:	2800      	cmp	r0, #0
 8007304:	d0f2      	beq.n	80072ec <_realloc_r+0x1c>
 8007306:	4631      	mov	r1, r6
 8007308:	4622      	mov	r2, r4
 800730a:	f7ff fc11 	bl	8006b30 <memcpy>
 800730e:	4631      	mov	r1, r6
 8007310:	4638      	mov	r0, r7
 8007312:	f7ff ff35 	bl	8007180 <_free_r>
 8007316:	e7e9      	b.n	80072ec <_realloc_r+0x1c>
 8007318:	4635      	mov	r5, r6
 800731a:	e7e7      	b.n	80072ec <_realloc_r+0x1c>

0800731c <_sbrk_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4c06      	ldr	r4, [pc, #24]	; (8007338 <_sbrk_r+0x1c>)
 8007320:	2300      	movs	r3, #0
 8007322:	4605      	mov	r5, r0
 8007324:	4608      	mov	r0, r1
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	f7f9 fc0c 	bl	8000b44 <_sbrk>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_sbrk_r+0x1a>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	b103      	cbz	r3, 8007336 <_sbrk_r+0x1a>
 8007334:	602b      	str	r3, [r5, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	20001bb4 	.word	0x20001bb4

0800733c <__malloc_lock>:
 800733c:	4770      	bx	lr

0800733e <__malloc_unlock>:
 800733e:	4770      	bx	lr

08007340 <_malloc_usable_size_r>:
 8007340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007344:	1f18      	subs	r0, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfbc      	itt	lt
 800734a:	580b      	ldrlt	r3, [r1, r0]
 800734c:	18c0      	addlt	r0, r0, r3
 800734e:	4770      	bx	lr

08007350 <_init>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr

0800735c <_fini>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr
