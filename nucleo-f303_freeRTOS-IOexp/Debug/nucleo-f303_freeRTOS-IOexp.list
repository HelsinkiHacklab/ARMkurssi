
nucleo-f303_freeRTOS-IOexp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080046d0  080046d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d0  080046d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  2000000c  080046e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  080046e4  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130a3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002696  00000000  00000000  000330df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e8  00000000  00000000  00035778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b0  00000000  00000000  00036960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000024ef  00000000  00000000  00037a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e07c  00000000  00000000  00039eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b632e  00000000  00000000  00047f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe2a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b44  00000000  00000000  000fe324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004680 	.word	0x08004680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08004680 	.word	0x08004680

080001e0 <main>:
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
void StartDefaultTask(void *argument);


int main(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0

  HAL_Init();
 80001e4:	f000 fbde 	bl	80009a4 <HAL_Init>

  SystemClock_Config();
 80001e8:	f000 f809 	bl	80001fe <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 80001ec:	f000 f91e 	bl	800042c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80001f0:	f000 f8f6 	bl	80003e0 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80001f4:	f000 f8c0 	bl	8000378 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80001f8:	f000 f870 	bl	80002dc <_ZL12MX_I2C1_Initv>

  while (1) {
 80001fc:	e7fe      	b.n	80001fc <main+0x1c>

080001fe <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b0a6      	sub	sp, #152	; 0x98
 8000202:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000204:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000208:	2228      	movs	r2, #40	; 0x28
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f004 fa2f 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000212:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2258      	movs	r2, #88	; 0x58
 8000226:	2100      	movs	r1, #0
 8000228:	4618      	mov	r0, r3
 800022a:	f004 fa21 	bl	8004670 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fe1d 	bl	8001e9c <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	bf14      	ite	ne
 8000268:	2301      	movne	r3, #1
 800026a:	2300      	moveq	r3, #0
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000272:	f000 f973 	bl	800055c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000286:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f002 fd18 	bl	8002cc8 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	bf14      	ite	ne
 800029e:	2301      	movne	r3, #1
 80002a0:	2300      	moveq	r3, #0
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80002a8:	f000 f958 	bl	800055c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80002ac:	2322      	movs	r3, #34	; 0x22
 80002ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 ff6c 	bl	8003198 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	bf14      	ite	ne
 80002c6:	2301      	movne	r3, #1
 80002c8:	2300      	moveq	r3, #0
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80002d0:	f000 f944 	bl	800055c <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3798      	adds	r7, #152	; 0x98
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 80002e2:	4a24      	ldr	r2, [pc, #144]	; (8000374 <_ZL12MX_I2C1_Initv+0x98>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80002e6:	4b22      	ldr	r3, [pc, #136]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 80002e8:	f240 220b 	movw	r2, #523	; 0x20b
 80002ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ee:	4b20      	ldr	r3, [pc, #128]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002fa:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 8000302:	2200      	movs	r2, #0
 8000304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 8000314:	2200      	movs	r2, #0
 8000316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000318:	4815      	ldr	r0, [pc, #84]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 800031a:	f000 ff84 	bl	8001226 <HAL_I2C_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	bf14      	ite	ne
 8000324:	2301      	movne	r3, #1
 8000326:	2300      	moveq	r3, #0
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800032e:	f000 f915 	bl	800055c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000332:	2100      	movs	r1, #0
 8000334:	480e      	ldr	r0, [pc, #56]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 8000336:	f001 fd1a 	bl	8001d6e <HAL_I2CEx_ConfigAnalogFilter>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	bf14      	ite	ne
 8000340:	2301      	movne	r3, #1
 8000342:	2300      	moveq	r3, #0
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 800034a:	f000 f907 	bl	800055c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800034e:	2100      	movs	r1, #0
 8000350:	4807      	ldr	r0, [pc, #28]	; (8000370 <_ZL12MX_I2C1_Initv+0x94>)
 8000352:	f001 fd57 	bl	8001e04 <HAL_I2CEx_ConfigDigitalFilter>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	bf14      	ite	ne
 800035c:	2301      	movne	r3, #1
 800035e:	2300      	moveq	r3, #0
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 8000366:	f000 f8f9 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000028 	.word	0x20000028
 8000374:	40005400 	.word	0x40005400

08000378 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800037e:	4a17      	ldr	r2, [pc, #92]	; (80003dc <_ZL19MX_USART2_UART_Initv+0x64>)
 8000380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000384:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ba:	4807      	ldr	r0, [pc, #28]	; (80003d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003bc:	f003 fb6e 	bl	8003a9c <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	bf14      	ite	ne
 80003c6:	2301      	movne	r3, #1
 80003c8:	2300      	moveq	r3, #0
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80003d0:	f000 f8c4 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000fc 	.word	0x200000fc
 80003dc:	40004400 	.word	0x40004400

080003e0 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <_ZL11MX_DMA_Initv+0x48>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a0f      	ldr	r2, [pc, #60]	; (8000428 <_ZL11MX_DMA_Initv+0x48>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <_ZL11MX_DMA_Initv+0x48>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2105      	movs	r1, #5
 8000402:	2010      	movs	r0, #16
 8000404:	f000 fbbc 	bl	8000b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000408:	2010      	movs	r0, #16
 800040a:	f000 fbd5 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2105      	movs	r1, #5
 8000412:	2011      	movs	r0, #17
 8000414:	f000 fbb4 	bl	8000b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000418:	2011      	movs	r0, #17
 800041a:	f000 fbcd 	bl	8000bb8 <HAL_NVIC_EnableIRQ>

}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b3a      	ldr	r3, [pc, #232]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a39      	ldr	r2, [pc, #228]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b37      	ldr	r3, [pc, #220]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b34      	ldr	r3, [pc, #208]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a33      	ldr	r2, [pc, #204]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b31      	ldr	r3, [pc, #196]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b2e      	ldr	r3, [pc, #184]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a2d      	ldr	r2, [pc, #180]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b2b      	ldr	r3, [pc, #172]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b28      	ldr	r3, [pc, #160]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a27      	ldr	r2, [pc, #156]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <_ZL12MX_GPIO_Initv+0x100>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1509RESET_GPIO_Port, SX1509RESET_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2104      	movs	r1, #4
 80004a6:	4822      	ldr	r0, [pc, #136]	; (8000530 <_ZL12MX_GPIO_Initv+0x104>)
 80004a8:	f000 fe82 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2120      	movs	r1, #32
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fe7c 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004be:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <_ZL12MX_GPIO_Initv+0x108>)
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4619      	mov	r1, r3
 80004cc:	4818      	ldr	r0, [pc, #96]	; (8000530 <_ZL12MX_GPIO_Initv+0x104>)
 80004ce:	f000 fce5 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1509INT_Pin */
  GPIO_InitStruct.Pin = SX1509INT_Pin;
 80004d2:	2302      	movs	r3, #2
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <_ZL12MX_GPIO_Initv+0x108>)
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004da:	2301      	movs	r3, #1
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1509INT_GPIO_Port, &GPIO_InitStruct);
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	4812      	ldr	r0, [pc, #72]	; (8000530 <_ZL12MX_GPIO_Initv+0x104>)
 80004e6:	f000 fcd9 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1509RESET_Pin */
  GPIO_InitStruct.Pin = SX1509RESET_Pin;
 80004ea:	2304      	movs	r3, #4
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2300      	movs	r3, #0
 80004f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1509RESET_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	480b      	ldr	r0, [pc, #44]	; (8000530 <_ZL12MX_GPIO_Initv+0x104>)
 8000502:	f000 fccb 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000506:	2320      	movs	r3, #32
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2300      	movs	r3, #0
 8000514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fcbc 	bl	8000e9c <HAL_GPIO_Init>

}
 8000524:	bf00      	nop
 8000526:	3728      	adds	r7, #40	; 0x28
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	48000800 	.word	0x48000800
 8000534:	10210000 	.word	0x10210000

08000538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d101      	bne.n	800054e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800054a:	f000 fa41 	bl	80009d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40001000 	.word	0x40001000

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <HAL_MspInit+0x4c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <HAL_MspInit+0x4c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_MspInit+0x4c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <HAL_MspInit+0x4c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_MspInit+0x4c>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_MspInit+0x4c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	210f      	movs	r1, #15
 80005a6:	f06f 0001 	mvn.w	r0, #1
 80005aa:	f000 fae9 	bl	8000b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a54      	ldr	r2, [pc, #336]	; (800072c <HAL_I2C_MspInit+0x170>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	f040 80a2 	bne.w	8000724 <HAL_I2C_MspInit+0x168>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b53      	ldr	r3, [pc, #332]	; (8000730 <HAL_I2C_MspInit+0x174>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a52      	ldr	r2, [pc, #328]	; (8000730 <HAL_I2C_MspInit+0x174>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b50      	ldr	r3, [pc, #320]	; (8000730 <HAL_I2C_MspInit+0x174>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b4d      	ldr	r3, [pc, #308]	; (8000730 <HAL_I2C_MspInit+0x174>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a4c      	ldr	r2, [pc, #304]	; (8000730 <HAL_I2C_MspInit+0x174>)
 80005fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	4b4a      	ldr	r3, [pc, #296]	; (8000730 <HAL_I2C_MspInit+0x174>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000616:	2312      	movs	r3, #18
 8000618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000622:	2304      	movs	r3, #4
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fc34 	bl	8000e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000638:	2312      	movs	r3, #18
 800063a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000644:	2304      	movs	r3, #4
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4839      	ldr	r0, [pc, #228]	; (8000734 <HAL_I2C_MspInit+0x178>)
 8000650:	f000 fc24 	bl	8000e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000654:	4b36      	ldr	r3, [pc, #216]	; (8000730 <HAL_I2C_MspInit+0x174>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a35      	ldr	r2, [pc, #212]	; (8000730 <HAL_I2C_MspInit+0x174>)
 800065a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065e:	61d3      	str	r3, [r2, #28]
 8000660:	4b33      	ldr	r3, [pc, #204]	; (8000730 <HAL_I2C_MspInit+0x174>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 800066e:	4a33      	ldr	r2, [pc, #204]	; (800073c <HAL_I2C_MspInit+0x180>)
 8000670:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000678:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800069c:	4826      	ldr	r0, [pc, #152]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 800069e:	f000 fa99 	bl	8000bd4 <HAL_DMA_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 80006a8:	f7ff ff58 	bl	800055c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a22      	ldr	r2, [pc, #136]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 80006b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80006b2:	4a21      	ldr	r2, [pc, #132]	; (8000738 <HAL_I2C_MspInit+0x17c>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <HAL_I2C_MspInit+0x188>)
 80006bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006c0:	2210      	movs	r2, #16
 80006c2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80006e8:	4815      	ldr	r0, [pc, #84]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006ea:	f000 fa73 	bl	8000bd4 <HAL_DMA_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 80006f4:	f7ff ff32 	bl	800055c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <HAL_I2C_MspInit+0x184>)
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <HAL_I2C_MspInit+0x184>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2105      	movs	r1, #5
 8000708:	201f      	movs	r0, #31
 800070a:	f000 fa39 	bl	8000b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800070e:	201f      	movs	r0, #31
 8000710:	f000 fa52 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2105      	movs	r1, #5
 8000718:	2020      	movs	r0, #32
 800071a:	f000 fa31 	bl	8000b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800071e:	2020      	movs	r0, #32
 8000720:	f000 fa4a 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40005400 	.word	0x40005400
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400
 8000738:	20000074 	.word	0x20000074
 800073c:	40020080 	.word	0x40020080
 8000740:	200000b8 	.word	0x200000b8
 8000744:	4002006c 	.word	0x4002006c

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <HAL_UART_MspInit+0x7c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d128      	bne.n	80007bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_UART_MspInit+0x80>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <HAL_UART_MspInit+0x80>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_UART_MspInit+0x80>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_UART_MspInit+0x80>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <HAL_UART_MspInit+0x80>)
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_UART_MspInit+0x80>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800079a:	230c      	movs	r3, #12
 800079c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007aa:	2307      	movs	r3, #7
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f000 fb70 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40004400 	.word	0x40004400
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	2036      	movs	r0, #54	; 0x36
 80007e2:	f000 f9cd 	bl	8000b80 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80007e6:	2036      	movs	r0, #54	; 0x36
 80007e8:	f000 f9e6 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_InitTick+0xa0>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <HAL_InitTick+0xa0>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	61d3      	str	r3, [r2, #28]
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <HAL_InitTick+0xa0>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	f003 0310 	and.w	r3, r3, #16
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000804:	f107 0210 	add.w	r2, r7, #16
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fc90 	bl	8003134 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000814:	f002 fc4a 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8000818:	4603      	mov	r3, r0
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <HAL_InitTick+0xa4>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	0c9b      	lsrs	r3, r3, #18
 8000828:	3b01      	subs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_InitTick+0xa8>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <HAL_InitTick+0xac>)
 8000830:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_InitTick+0xa8>)
 8000834:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000838:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_InitTick+0xa8>)
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_InitTick+0xa8>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_InitTick+0xa8>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <HAL_InitTick+0xa8>)
 800084e:	f002 fec1 	bl	80035d4 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d104      	bne.n	8000862 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <HAL_InitTick+0xa8>)
 800085a:	f002 fef1 	bl	8003640 <HAL_TIM_Base_Start_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3730      	adds	r7, #48	; 0x30
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	431bde83 	.word	0x431bde83
 8000874:	20000604 	.word	0x20000604
 8000878:	40001000 	.word	0x40001000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 fc93 	bl	80011e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <DMA1_Channel6_IRQHandler+0x10>)
 80008c6:	f000 fa0a 	bl	8000cde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000b8 	.word	0x200000b8

080008d4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <DMA1_Channel7_IRQHandler+0x10>)
 80008da:	f000 fa00 	bl	8000cde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000074 	.word	0x20000074

080008e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <I2C1_EV_IRQHandler+0x10>)
 80008ee:	f000 fd29 	bl	8001344 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000028 	.word	0x20000028

080008fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <I2C1_ER_IRQHandler+0x10>)
 8000902:	f000 fd39 	bl	8001378 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000028 	.word	0x20000028

08000910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <TIM6_DAC_IRQHandler+0x10>)
 8000916:	f002 febd 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000604 	.word	0x20000604

08000924 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <SystemInit+0x28>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <SystemInit+0x28>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <SystemInit+0x28>)
 800093a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093e:	609a      	str	r2, [r3, #8]
#endif
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000954:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000956:	e003      	b.n	8000960 <LoopCopyDataInit>

08000958 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800095a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800095c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800095e:	3104      	adds	r1, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000964:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000966:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000968:	d3f6      	bcc.n	8000958 <CopyDataInit>
	ldr	r2, =_sbss
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <LoopForever+0x12>)
	b	LoopFillZerobss
 800096c:	e002      	b.n	8000974 <LoopFillZerobss>

0800096e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800096e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000970:	f842 3b04 	str.w	r3, [r2], #4

08000974 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <LoopForever+0x16>)
	cmp	r2, r3
 8000976:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000978:	d3f9      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800097a:	f7ff ffd3 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097e:	f003 fe53 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000982:	f7ff fc2d 	bl	80001e0 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000988:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800098c:	080046d8 	.word	0x080046d8
	ldr	r0, =_sdata
 8000990:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000994:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000998:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800099c:	20000648 	.word	0x20000648

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x28>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x28>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f8d8 	bl	8000b6a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ff06 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fdd4 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000644 	.word	0x20000644

080009f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000644 	.word	0x20000644

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	; (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ff4c 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b92:	f7ff ff61 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000b96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	68b9      	ldr	r1, [r7, #8]
 8000b9c:	6978      	ldr	r0, [r7, #20]
 8000b9e:	f7ff ffb1 	bl	8000b04 <NVIC_EncodePriority>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff80 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff54 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e037      	b.n	8000c5a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2202      	movs	r2, #2
 8000bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c00:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c04:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 f8f1 	bl	8000e24 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}  
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d005      	beq.n	8000c84 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	e027      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 020e 	bic.w	r2, r2, #14
 8000c92:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 0201 	bic.w	r2, r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cac:	2101      	movs	r1, #1
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	4798      	blx	r3
    } 
  }
  return status;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b084      	sub	sp, #16
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d024      	beq.n	8000d50 <HAL_DMA_IRQHandler+0x72>
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d01f      	beq.n	8000d50 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d107      	bne.n	8000d2e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0204 	bic.w	r2, r2, #4
 8000d2c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d36:	2104      	movs	r1, #4
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d06a      	beq.n	8000e1c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d4e:	e065      	b.n	8000e1c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	2202      	movs	r2, #2
 8000d56:	409a      	lsls	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d02c      	beq.n	8000dba <HAL_DMA_IRQHandler+0xdc>
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d027      	beq.n	8000dba <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10b      	bne.n	8000d90 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 020a 	bic.w	r2, r2, #10
 8000d86:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d98:	2102      	movs	r1, #2
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d035      	beq.n	8000e1c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000db8:	e030      	b.n	8000e1c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d028      	beq.n	8000e1c <HAL_DMA_IRQHandler+0x13e>
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d023      	beq.n	8000e1c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 020e 	bic.w	r2, r2, #14
 8000de2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2201      	movs	r2, #1
 8000df8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	4798      	blx	r3
    }
  }
}  
 8000e1a:	e7ff      	b.n	8000e1c <HAL_DMA_IRQHandler+0x13e>
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <DMA_CalcBaseAndBitshift+0x60>)
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d80f      	bhi.n	8000e58 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <DMA_CalcBaseAndBitshift+0x64>)
 8000e40:	4413      	add	r3, r2
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <DMA_CalcBaseAndBitshift+0x68>)
 8000e44:	fba2 2303 	umull	r2, r3, r2, r3
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	009a      	lsls	r2, r3, #2
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <DMA_CalcBaseAndBitshift+0x6c>)
 8000e54:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000e56:	e00e      	b.n	8000e76 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <DMA_CalcBaseAndBitshift+0x70>)
 8000e60:	4413      	add	r3, r2
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <DMA_CalcBaseAndBitshift+0x68>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	009a      	lsls	r2, r3, #2
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <DMA_CalcBaseAndBitshift+0x74>)
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40020407 	.word	0x40020407
 8000e88:	bffdfff8 	.word	0xbffdfff8
 8000e8c:	cccccccd 	.word	0xcccccccd
 8000e90:	40020000 	.word	0x40020000
 8000e94:	bffdfbf8 	.word	0xbffdfbf8
 8000e98:	40020400 	.word	0x40020400

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e160      	b.n	800116e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8152 	beq.w	8001168 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x38>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	6939      	ldr	r1, [r7, #16]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d00b      	beq.n	8000f70 <HAL_GPIO_Init+0xd4>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d007      	beq.n	8000f70 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f64:	2b11      	cmp	r3, #17
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b12      	cmp	r3, #18
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	f003 0201 	and.w	r2, r3, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80ac 	beq.w	8001168 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b5e      	ldr	r3, [pc, #376]	; (800118c <HAL_GPIO_Init+0x2f0>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a5d      	ldr	r2, [pc, #372]	; (800118c <HAL_GPIO_Init+0x2f0>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b5b      	ldr	r3, [pc, #364]	; (800118c <HAL_GPIO_Init+0x2f0>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001028:	4a59      	ldr	r2, [pc, #356]	; (8001190 <HAL_GPIO_Init+0x2f4>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001052:	d025      	beq.n	80010a0 <HAL_GPIO_Init+0x204>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a4f      	ldr	r2, [pc, #316]	; (8001194 <HAL_GPIO_Init+0x2f8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d01f      	beq.n	800109c <HAL_GPIO_Init+0x200>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d019      	beq.n	8001098 <HAL_GPIO_Init+0x1fc>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4d      	ldr	r2, [pc, #308]	; (800119c <HAL_GPIO_Init+0x300>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d013      	beq.n	8001094 <HAL_GPIO_Init+0x1f8>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d00d      	beq.n	8001090 <HAL_GPIO_Init+0x1f4>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4b      	ldr	r2, [pc, #300]	; (80011a4 <HAL_GPIO_Init+0x308>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d007      	beq.n	800108c <HAL_GPIO_Init+0x1f0>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4a      	ldr	r2, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d101      	bne.n	8001088 <HAL_GPIO_Init+0x1ec>
 8001084:	2306      	movs	r3, #6
 8001086:	e00c      	b.n	80010a2 <HAL_GPIO_Init+0x206>
 8001088:	2307      	movs	r3, #7
 800108a:	e00a      	b.n	80010a2 <HAL_GPIO_Init+0x206>
 800108c:	2305      	movs	r3, #5
 800108e:	e008      	b.n	80010a2 <HAL_GPIO_Init+0x206>
 8001090:	2304      	movs	r3, #4
 8001092:	e006      	b.n	80010a2 <HAL_GPIO_Init+0x206>
 8001094:	2303      	movs	r3, #3
 8001096:	e004      	b.n	80010a2 <HAL_GPIO_Init+0x206>
 8001098:	2302      	movs	r3, #2
 800109a:	e002      	b.n	80010a2 <HAL_GPIO_Init+0x206>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <HAL_GPIO_Init+0x206>
 80010a0:	2300      	movs	r3, #0
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	f002 0203 	and.w	r2, r2, #3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	4093      	lsls	r3, r2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b2:	4937      	ldr	r1, [pc, #220]	; (8001190 <HAL_GPIO_Init+0x2f4>)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_GPIO_Init+0x310>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_GPIO_Init+0x310>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_GPIO_Init+0x310>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001138:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <HAL_GPIO_Init+0x310>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	f47f ae97 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000
 8001194:	48000400 	.word	0x48000400
 8001198:	48000800 	.word	0x48000800
 800119c:	48000c00 	.word	0x48000c00
 80011a0:	48001000 	.word	0x48001000
 80011a4:	48001400 	.word	0x48001400
 80011a8:	48001800 	.word	0x48001800
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f806 	bl	8001210 <HAL_GPIO_EXTI_Callback>
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e081      	b.n	800133c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d106      	bne.n	8001252 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff f9b5 	bl	80005bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2224      	movs	r2, #36	; 0x24
 8001256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0201 	bic.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001276:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001286:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d107      	bne.n	80012a0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e006      	b.n	80012ae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d104      	bne.n	80012c0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	ea42 0103 	orr.w	r1, r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	021a      	lsls	r2, r3, #8
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69d9      	ldr	r1, [r3, #28]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1a      	ldr	r2, [r3, #32]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2220      	movs	r2, #32
 8001328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	68f9      	ldr	r1, [r7, #12]
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	4798      	blx	r3
  }
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d010      	beq.n	80013be <HAL_I2C_ER_IRQHandler+0x46>
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	09db      	lsrs	r3, r3, #7
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00a      	beq.n	80013be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f043 0201 	orr.w	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	0a9b      	lsrs	r3, r3, #10
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d010      	beq.n	80013ec <HAL_I2C_ER_IRQHandler+0x74>
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	09db      	lsrs	r3, r3, #7
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00a      	beq.n	80013ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f043 0208 	orr.w	r2, r3, #8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	0a5b      	lsrs	r3, r3, #9
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d010      	beq.n	800141a <HAL_I2C_ER_IRQHandler+0xa2>
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	09db      	lsrs	r3, r3, #7
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00a      	beq.n	800141a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001408:	f043 0202 	orr.w	r2, r3, #2
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001418:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 030b 	and.w	r3, r3, #11
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800142a:	68f9      	ldr	r1, [r7, #12]
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fb31 	bl	8001a94 <I2C_ITError>
  }
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	70fb      	strb	r3, [r7, #3]
 800146e:	4613      	mov	r3, r2
 8001470:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <I2C_Slave_ISR_IT+0x24>
 80014da:	2302      	movs	r3, #2
 80014dc:	e0ec      	b.n	80016b8 <I2C_Slave_ISR_IT+0x1fe>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	095b      	lsrs	r3, r3, #5
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <I2C_Slave_ISR_IT+0x4c>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	095b      	lsrs	r3, r3, #5
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f99d 	bl	8001840 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d04d      	beq.n	80015ae <I2C_Slave_ISR_IT+0xf4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d047      	beq.n	80015ae <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d128      	bne.n	800157a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b28      	cmp	r3, #40	; 0x28
 8001532:	d108      	bne.n	8001546 <I2C_Slave_ISR_IT+0x8c>
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800153a:	d104      	bne.n	8001546 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800153c:	6939      	ldr	r1, [r7, #16]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fa54 	bl	80019ec <I2C_ITListenCplt>
 8001544:	e032      	b.n	80015ac <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b29      	cmp	r3, #41	; 0x29
 8001550:	d10e      	bne.n	8001570 <I2C_Slave_ISR_IT+0xb6>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001558:	d00a      	beq.n	8001570 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2210      	movs	r2, #16
 8001560:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 fb56 	bl	8001c14 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f92b 	bl	80017c4 <I2C_ITSlaveSeqCplt>
 800156e:	e01d      	b.n	80015ac <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2210      	movs	r2, #16
 8001576:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001578:	e096      	b.n	80016a8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2210      	movs	r2, #16
 8001580:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f043 0204 	orr.w	r2, r3, #4
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <I2C_Slave_ISR_IT+0xe4>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159a:	f040 8085 	bne.w	80016a8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4619      	mov	r1, r3
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 fa75 	bl	8001a94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80015aa:	e07d      	b.n	80016a8 <I2C_Slave_ISR_IT+0x1ee>
 80015ac:	e07c      	b.n	80016a8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d030      	beq.n	800161c <I2C_Slave_ISR_IT+0x162>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d02a      	beq.n	800161c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d018      	beq.n	8001602 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29b      	uxth	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d14f      	bne.n	80016ac <I2C_Slave_ISR_IT+0x1f2>
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001612:	d04b      	beq.n	80016ac <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f8d5 	bl	80017c4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800161a:	e047      	b.n	80016ac <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00a      	beq.n	800163e <I2C_Slave_ISR_IT+0x184>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001634:	6939      	ldr	r1, [r7, #16]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f842 	bl	80016c0 <I2C_ITAddrCplt>
 800163c:	e037      	b.n	80016ae <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d031      	beq.n	80016ae <I2C_Slave_ISR_IT+0x1f4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d02b      	beq.n	80016ae <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165a:	b29b      	uxth	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d018      	beq.n	8001692 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	; 0x28
 8001690:	e00d      	b.n	80016ae <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d002      	beq.n	80016a0 <I2C_Slave_ISR_IT+0x1e6>
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d106      	bne.n	80016ae <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f88f 	bl	80017c4 <I2C_ITSlaveSeqCplt>
 80016a6:	e002      	b.n	80016ae <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80016a8:	bf00      	nop
 80016aa:	e000      	b.n	80016ae <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80016ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80016d6:	2b28      	cmp	r3, #40	; 0x28
 80016d8:	d168      	bne.n	80017ac <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	0c1b      	lsrs	r3, r3, #16
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80016f8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	b29b      	uxth	r3, r3
 8001702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001706:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	b29b      	uxth	r3, r3
 8001710:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001714:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d137      	bne.n	800178e <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800171e:	897b      	ldrh	r3, [r7, #10]
 8001720:	09db      	lsrs	r3, r3, #7
 8001722:	b29a      	uxth	r2, r3
 8001724:	89bb      	ldrh	r3, [r7, #12]
 8001726:	4053      	eors	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	f003 0306 	and.w	r3, r3, #6
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11c      	bne.n	800176c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001744:	2b02      	cmp	r3, #2
 8001746:	d139      	bne.n	80017bc <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2208      	movs	r2, #8
 8001754:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800175e:	89ba      	ldrh	r2, [r7, #12]
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fe7c 	bl	8001462 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800176a:	e027      	b.n	80017bc <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800176c:	893b      	ldrh	r3, [r7, #8]
 800176e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001770:	2104      	movs	r1, #4
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fa96 	bl	8001ca4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001780:	89ba      	ldrh	r2, [r7, #12]
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fe6b 	bl	8001462 <HAL_I2C_AddrCallback>
}
 800178c:	e016      	b.n	80017bc <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800178e:	2104      	movs	r1, #4
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fa87 	bl	8001ca4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800179e:	89ba      	ldrh	r2, [r7, #12]
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fe5c 	bl	8001462 <HAL_I2C_AddrCallback>
}
 80017aa:	e007      	b.n	80017bc <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b29      	cmp	r3, #41	; 0x29
 80017de:	d112      	bne.n	8001806 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2228      	movs	r2, #40	; 0x28
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2221      	movs	r2, #33	; 0x21
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017ee:	2101      	movs	r1, #1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fa57 	bl	8001ca4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe1b 	bl	800143a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001804:	e017      	b.n	8001836 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b2a      	cmp	r3, #42	; 0x2a
 8001810:	d111      	bne.n	8001836 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2228      	movs	r2, #40	; 0x28
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2222      	movs	r2, #34	; 0x22
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001820:	2102      	movs	r1, #2
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fa3e 	bl	8001ca4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fe0c 	bl	800144e <HAL_I2C_SlaveRxCpltCallback>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2220      	movs	r2, #32
 800185c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800185e:	2107      	movs	r1, #7
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fa1f 	bl	8001ca4 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001874:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <I2C_ITSlaveCplt+0x1a4>)
 8001882:	400b      	ands	r3, r1
 8001884:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f9c4 	bl	8001c14 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	0b9b      	lsrs	r3, r3, #14
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00b      	beq.n	80018b0 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	2b00      	cmp	r3, #0
 800189e:	d018      	beq.n	80018d2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018ae:	e010      	b.n	80018d2 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	0bdb      	lsrs	r3, r3, #15
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00a      	beq.n	80018d2 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d020      	beq.n	8001920 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f023 0304 	bic.w	r3, r3, #4
 80018e4:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00c      	beq.n	8001920 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29b      	uxth	r3, r3
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f043 0204 	orr.w	r2, r3, #4
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	2b00      	cmp	r3, #0
 8001950:	d010      	beq.n	8001974 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f89b 	bl	8001a94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b28      	cmp	r3, #40	; 0x28
 8001968:	d138      	bne.n	80019dc <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f83d 	bl	80019ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001972:	e033      	b.n	80019dc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800197c:	d011      	beq.n	80019a2 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff20 	bl	80017c4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <I2C_ITSlaveCplt+0x1a8>)
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fd6f 	bl	800147e <HAL_I2C_ListenCpltCallback>
}
 80019a0:	e01c      	b.n	80019dc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b22      	cmp	r3, #34	; 0x22
 80019ac:	d10b      	bne.n	80019c6 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fd45 	bl	800144e <HAL_I2C_SlaveRxCpltCallback>
}
 80019c4:	e00a      	b.n	80019dc <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fd2f 	bl	800143a <HAL_I2C_SlaveTxCpltCallback>
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	fe00e800 	.word	0xfe00e800
 80019e8:	ffff0000 	.word	0xffff0000

080019ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <I2C_ITListenCplt+0xa4>)
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d022      	beq.n	8001a6a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d012      	beq.n	8001a6a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f043 0204 	orr.w	r2, r3, #4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a6a:	2107      	movs	r1, #7
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f919 	bl	8001ca4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2210      	movs	r2, #16
 8001a78:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fcfb 	bl	800147e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	ffff0000 	.word	0xffff0000

08001a94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa4:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a55      	ldr	r2, [pc, #340]	; (8001c08 <I2C_ITError+0x174>)
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b28      	cmp	r3, #40	; 0x28
 8001aca:	d005      	beq.n	8001ad8 <I2C_ITError+0x44>
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b29      	cmp	r3, #41	; 0x29
 8001ad0:	d002      	beq.n	8001ad8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ad6:	d10e      	bne.n	8001af6 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ad8:	2103      	movs	r1, #3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f8e2 	bl	8001ca4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2228      	movs	r2, #40	; 0x28
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <I2C_ITError+0x178>)
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34
 8001af4:	e013      	b.n	8001b1e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001af6:	2107      	movs	r1, #7
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8d3 	bl	8001ca4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b60      	cmp	r3, #96	; 0x60
 8001b08:	d003      	beq.n	8001b12 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b2c:	d123      	bne.n	8001b76 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d05c      	beq.n	8001c00 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4a:	4a31      	ldr	r2, [pc, #196]	; (8001c10 <I2C_ITError+0x17c>)
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f881 	bl	8000c62 <HAL_DMA_Abort_IT>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d04c      	beq.n	8001c00 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b70:	4610      	mov	r0, r2
 8001b72:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001b74:	e044      	b.n	8001c00 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b84:	d123      	bne.n	8001bce <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b94:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d030      	beq.n	8001c00 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <I2C_ITError+0x17c>)
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f855 	bl	8000c62 <HAL_DMA_Abort_IT>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4798      	blx	r3
}
 8001bcc:	e018      	b.n	8001c00 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b60      	cmp	r3, #96	; 0x60
 8001bd8:	d10b      	bne.n	8001bf2 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fc5b 	bl	80014a6 <HAL_I2C_AbortCpltCallback>
}
 8001bf0:	e006      	b.n	8001c00 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fc49 	bl	8001492 <HAL_I2C_ErrorCallback>
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	ffff0000 	.word	0xffff0000
 8001c0c:	080014bb 	.word	0x080014bb
 8001c10:	08001c5d 	.word	0x08001c5d

08001c14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d103      	bne.n	8001c32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d007      	beq.n	8001c50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	619a      	str	r2, [r3, #24]
  }
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	2200      	movs	r2, #0
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	2200      	movs	r2, #0
 8001c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b60      	cmp	r3, #96	; 0x60
 8001c84:	d107      	bne.n	8001c96 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff fc09 	bl	80014a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001c94:	e002      	b.n	8001c9c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff fbfb 	bl	8001492 <HAL_I2C_ErrorCallback>
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00f      	beq.n	8001cde <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8001cc4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001cd2:	2b28      	cmp	r3, #40	; 0x28
 8001cd4:	d003      	beq.n	8001cde <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001cdc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00f      	beq.n	8001d08 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8001cee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001cfc:	2b28      	cmp	r3, #40	; 0x28
 8001cfe:	d003      	beq.n	8001d08 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001d06:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	f003 0311 	and.w	r3, r3, #17
 8001d20:	2b11      	cmp	r3, #17
 8001d22:	d103      	bne.n	8001d2c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001d2a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	f003 0312 	and.w	r3, r3, #18
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d103      	bne.n	8001d3e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f043 0320 	orr.w	r3, r3, #32
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	f003 0312 	and.w	r3, r3, #18
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	d103      	bne.n	8001d50 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	400a      	ands	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d138      	bne.n	8001df6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e032      	b.n	8001df8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2224      	movs	r2, #36	; 0x24
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d139      	bne.n	8001e8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e033      	b.n	8001e90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f000 bf01 	b.w	8002cb8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8160 	beq.w	8002186 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ec6:	4bae      	ldr	r3, [pc, #696]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ed2:	4bab      	ldr	r3, [pc, #684]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d159      	bne.n	8001f92 <HAL_RCC_OscConfig+0xf6>
 8001ede:	4ba8      	ldr	r3, [pc, #672]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eea:	d152      	bne.n	8001f92 <HAL_RCC_OscConfig+0xf6>
 8001eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_OscConfig+0x82>
 8001f18:	4b99      	ldr	r3, [pc, #612]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0xae>
 8001f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f22:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f36:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f3a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f46:	4b8e      	ldr	r3, [pc, #568]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f4e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001f52:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001f5e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f62:	fab2 f282 	clz	r2, r2
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f002 021f 	and.w	r2, r2, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8102 	beq.w	8002184 <HAL_RCC_OscConfig+0x2e8>
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80fc 	bne.w	8002184 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f000 be93 	b.w	8002cb8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x110>
 8001f9e:	4b78      	ldr	r3, [pc, #480]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a77      	ldr	r2, [pc, #476]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e030      	b.n	800200e <HAL_RCC_OscConfig+0x172>
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x134>
 8001fb6:	4b72      	ldr	r3, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a71      	ldr	r2, [pc, #452]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01e      	b.n	800200e <HAL_RCC_OscConfig+0x172>
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x15a>
 8001fdc:	4b68      	ldr	r3, [pc, #416]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a67      	ldr	r2, [pc, #412]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b65      	ldr	r3, [pc, #404]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a64      	ldr	r2, [pc, #400]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x172>
 8001ff6:	4b62      	ldr	r3, [pc, #392]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a61      	ldr	r2, [pc, #388]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a5e      	ldr	r2, [pc, #376]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8002008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d059      	beq.n	80020cc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fcee 	bl	80009f8 <HAL_GetTick>
 800201c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002022:	f7fe fce9 	bl	80009f8 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d902      	bls.n	8002038 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	f000 be40 	b.w	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 8002038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800203c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800204c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <HAL_RCC_OscConfig+0x1ce>
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x1fa>
 800206a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800207e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002082:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002086:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800209a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800209e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80020aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0ab      	beq.n	8002022 <HAL_RCC_OscConfig+0x186>
 80020ca:	e05c      	b.n	8002186 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe fc94 	bl	80009f8 <HAL_GetTick>
 80020d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d6:	f7fe fc8f 	bl	80009f8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d902      	bls.n	80020ec <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	f000 bde6 	b.w	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 80020ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002100:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_RCC_OscConfig+0x282>
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x2ae>
 800211e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002122:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002136:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800213a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_RCC_OscConfig+0x2e4>)
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800214e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002152:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002156:	fa92 f2a2 	rbit	r2, r2
 800215a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800215e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ab      	bne.n	80020d6 <HAL_RCC_OscConfig+0x23a>
 800217e:	e002      	b.n	8002186 <HAL_RCC_OscConfig+0x2ea>
 8002180:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8170 	beq.w	8002476 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002196:	4bd0      	ldr	r3, [pc, #832]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021a2:	4bcd      	ldr	r3, [pc, #820]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d16d      	bne.n	800228a <HAL_RCC_OscConfig+0x3ee>
 80021ae:	4bca      	ldr	r3, [pc, #808]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80021b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ba:	d166      	bne.n	800228a <HAL_RCC_OscConfig+0x3ee>
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80021ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_RCC_OscConfig+0x350>
 80021e6:	4bbc      	ldr	r3, [pc, #752]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	e013      	b.n	8002214 <HAL_RCC_OscConfig+0x378>
 80021ec:	2302      	movs	r3, #2
 80021ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002204:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002210:	4bb1      	ldr	r3, [pc, #708]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2202      	movs	r2, #2
 8002216:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800221a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800221e:	fa92 f2a2 	rbit	r2, r2
 8002222:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002226:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800222a:	fab2 f282 	clz	r2, r2
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f042 0220 	orr.w	r2, r2, #32
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_RCC_OscConfig+0x3ba>
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d002      	beq.n	8002256 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f000 bd31 	b.w	8002cb8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4ba0      	ldr	r3, [pc, #640]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	21f8      	movs	r1, #248	; 0xf8
 8002266:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800226e:	fa91 f1a1 	rbit	r1, r1
 8002272:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002276:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800227a:	fab1 f181 	clz	r1, r1
 800227e:	b2c9      	uxtb	r1, r1
 8002280:	408b      	lsls	r3, r1
 8002282:	4995      	ldr	r1, [pc, #596]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002288:	e0f5      	b.n	8002476 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8085 	beq.w	80023a0 <HAL_RCC_OscConfig+0x504>
 8002296:	2301      	movs	r3, #1
 8002298:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80022a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	2301      	movs	r3, #1
 80022c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fb99 	bl	80009f8 <HAL_GetTick>
 80022c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022cc:	f7fe fb94 	bl	80009f8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d902      	bls.n	80022e2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	f000 bceb 	b.w	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80022f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d102      	bne.n	8002312 <HAL_RCC_OscConfig+0x476>
 800230c:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	e013      	b.n	800233a <HAL_RCC_OscConfig+0x49e>
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800232a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002336:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2202      	movs	r2, #2
 800233c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002340:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002344:	fa92 f2a2 	rbit	r2, r2
 8002348:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800234c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f002 021f 	and.w	r2, r2, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f202 	lsl.w	r2, r1, r2
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0af      	beq.n	80022cc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	21f8      	movs	r1, #248	; 0xf8
 800237c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002384:	fa91 f1a1 	rbit	r1, r1
 8002388:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800238c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002390:	fab1 f181 	clz	r1, r1
 8002394:	b2c9      	uxtb	r1, r1
 8002396:	408b      	lsls	r3, r1
 8002398:	494f      	ldr	r1, [pc, #316]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
 800239e:	e06a      	b.n	8002476 <HAL_RCC_OscConfig+0x5da>
 80023a0:	2301      	movs	r3, #1
 80023a2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80023b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	461a      	mov	r2, r3
 80023c8:	2300      	movs	r3, #0
 80023ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fb14 	bl	80009f8 <HAL_GetTick>
 80023d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d6:	f7fe fb0f 	bl	80009f8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	f000 bc66 	b.w	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 80023ec:	2302      	movs	r3, #2
 80023ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80023fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_OscConfig+0x580>
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e013      	b.n	8002444 <HAL_RCC_OscConfig+0x5a8>
 800241c:	2302      	movs	r3, #2
 800241e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800242e:	2302      	movs	r3, #2
 8002430:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002434:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_RCC_OscConfig+0x63c>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2202      	movs	r2, #2
 8002446:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800244a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800244e:	fa92 f2a2 	rbit	r2, r2
 8002452:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002456:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800245a:	fab2 f282 	clz	r2, r2
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f042 0220 	orr.w	r2, r2, #32
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f002 021f 	and.w	r2, r2, #31
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1af      	bne.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80da 	beq.w	800263a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d069      	beq.n	8002564 <HAL_RCC_OscConfig+0x6c8>
 8002490:	2301      	movs	r3, #1
 8002492:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80024a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x640>)
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	461a      	mov	r2, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ba:	f7fe fa9d 	bl	80009f8 <HAL_GetTick>
 80024be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	e00d      	b.n	80024e0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe fa98 	bl	80009f8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d905      	bls.n	80024e0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e3ef      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	10908120 	.word	0x10908120
 80024e0:	2302      	movs	r3, #2
 80024e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80024f8:	2202      	movs	r2, #2
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	fa93 f2a3 	rbit	r2, r3
 8002506:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002510:	2202      	movs	r2, #2
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	fa93 f2a3 	rbit	r2, r3
 800251e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002522:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002524:	4ba4      	ldr	r3, [pc, #656]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 8002526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002528:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800252c:	2102      	movs	r1, #2
 800252e:	6019      	str	r1, [r3, #0]
 8002530:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	fa93 f1a3 	rbit	r1, r3
 800253a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800253e:	6019      	str	r1, [r3, #0]
  return result;
 8002540:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0b0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x628>
 8002562:	e06a      	b.n	800263a <HAL_RCC_OscConfig+0x79e>
 8002564:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fa93 f2a3 	rbit	r2, r3
 8002576:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800257a:	601a      	str	r2, [r3, #0]
  return result;
 800257c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002580:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	4b8c      	ldr	r3, [pc, #560]	; (80027bc <HAL_RCC_OscConfig+0x920>)
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	461a      	mov	r2, r3
 8002592:	2300      	movs	r3, #0
 8002594:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe fa2f 	bl	80009f8 <HAL_GetTick>
 800259a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259e:	e009      	b.n	80025b4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe fa2a 	bl	80009f8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e381      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 80025b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025b8:	2202      	movs	r2, #2
 80025ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025d0:	2202      	movs	r2, #2
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025e8:	2202      	movs	r2, #2
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80025fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 80025fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002600:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002604:	2102      	movs	r1, #2
 8002606:	6019      	str	r1, [r3, #0]
 8002608:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f1a3 	rbit	r1, r3
 8002612:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002616:	6019      	str	r1, [r3, #0]
  return result;
 8002618:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1b2      	bne.n	80025a0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8157 	beq.w	80028f8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d112      	bne.n	8002682 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	4a55      	ldr	r2, [pc, #340]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	61d3      	str	r3, [r2, #28]
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800267c:	2301      	movs	r3, #1
 800267e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_RCC_OscConfig+0x924>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11a      	bne.n	80026c4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_RCC_OscConfig+0x924>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a4b      	ldr	r2, [pc, #300]	; (80027c0 <HAL_RCC_OscConfig+0x924>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7fe f9ad 	bl	80009f8 <HAL_GetTick>
 800269e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	e009      	b.n	80026b8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe f9a8 	bl	80009f8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b64      	cmp	r3, #100	; 0x64
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e2ff      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_RCC_OscConfig+0x924>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ef      	beq.n	80026a4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x840>
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a39      	ldr	r2, [pc, #228]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6213      	str	r3, [r2, #32]
 80026da:	e02f      	b.n	800273c <HAL_RCC_OscConfig+0x8a0>
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x864>
 80026e6:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0x8a0>
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x888>
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x8a0>
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6213      	str	r3, [r2, #32]
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d06a      	beq.n	800281c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe f957 	bl	80009f8 <HAL_GetTick>
 800274a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe f952 	bl	80009f8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e2a7      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 8002768:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800276c:	2202      	movs	r2, #2
 800276e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002784:	2202      	movs	r2, #2
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	fa93 f2a3 	rbit	r2, r3
 8002792:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002796:	601a      	str	r2, [r3, #0]
  return result;
 8002798:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800279c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_OscConfig+0x928>
 80027b2:	4b01      	ldr	r3, [pc, #4]	; (80027b8 <HAL_RCC_OscConfig+0x91c>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	e013      	b.n	80027e0 <HAL_RCC_OscConfig+0x944>
 80027b8:	40021000 	.word	0x40021000
 80027bc:	10908120 	.word	0x10908120
 80027c0:	40007000 	.word	0x40007000
 80027c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027c8:	2202      	movs	r2, #2
 80027ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4bc0      	ldr	r3, [pc, #768]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80027e4:	2102      	movs	r1, #2
 80027e6:	6011      	str	r1, [r2, #0]
 80027e8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	fa92 f1a2 	rbit	r1, r2
 80027f2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80027f6:	6011      	str	r1, [r2, #0]
  return result;
 80027f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d09a      	beq.n	8002750 <HAL_RCC_OscConfig+0x8b4>
 800281a:	e063      	b.n	80028e4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281c:	f7fe f8ec 	bl	80009f8 <HAL_GetTick>
 8002820:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe f8e7 	bl	80009f8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e23c      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 800283e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002842:	2202      	movs	r2, #2
 8002844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	fa93 f2a3 	rbit	r2, r3
 8002850:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800285a:	2202      	movs	r2, #2
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f2a3 	rbit	r2, r3
 8002868:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800286c:	601a      	str	r2, [r3, #0]
  return result;
 800286e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002872:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d102      	bne.n	800288e <HAL_RCC_OscConfig+0x9f2>
 8002888:	4b95      	ldr	r3, [pc, #596]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	e00d      	b.n	80028aa <HAL_RCC_OscConfig+0xa0e>
 800288e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002892:	2202      	movs	r2, #2
 8002894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fa93 f2a3 	rbit	r2, r3
 80028a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	4b8e      	ldr	r3, [pc, #568]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80028ae:	2102      	movs	r1, #2
 80028b0:	6011      	str	r1, [r2, #0]
 80028b2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	fa92 f1a2 	rbit	r1, r2
 80028bc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80028c0:	6011      	str	r1, [r2, #0]
  return result;
 80028c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	fab2 f282 	clz	r2, r2
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	f002 021f 	and.w	r2, r2, #31
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1a0      	bne.n	8002826 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028e4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b7c      	ldr	r3, [pc, #496]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4a7b      	ldr	r2, [pc, #492]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 81d9 	beq.w	8002cb6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002904:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	f000 81a6 	beq.w	8002c5e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b02      	cmp	r3, #2
 800291a:	f040 811e 	bne.w	8002b5a <HAL_RCC_OscConfig+0xcbe>
 800291e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002922:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	fa93 f2a3 	rbit	r2, r3
 8002932:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002936:	601a      	str	r2, [r3, #0]
  return result;
 8002938:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800293c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	461a      	mov	r2, r3
 8002950:	2300      	movs	r3, #0
 8002952:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe f850 	bl	80009f8 <HAL_GetTick>
 8002958:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	e009      	b.n	8002972 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe f84b 	bl	80009f8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1a2      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 8002972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002976:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800297a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800298a:	601a      	str	r2, [r3, #0]
  return result;
 800298c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002990:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_RCC_OscConfig+0xb10>
 80029a6:	4b4e      	ldr	r3, [pc, #312]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e01b      	b.n	80029e4 <HAL_RCC_OscConfig+0xb48>
 80029ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80029e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029ec:	6011      	str	r1, [r2, #0]
 80029ee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	fa92 f1a2 	rbit	r1, r2
 80029f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029fc:	6011      	str	r1, [r2, #0]
  return result;
 80029fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0220 	orr.w	r2, r2, #32
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d19e      	bne.n	800295e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a20:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	f023 020f 	bic.w	r2, r3, #15
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	492c      	ldr	r1, [pc, #176]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002a34:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a19      	ldr	r1, [r3, #32]
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	4925      	ldr	r1, [pc, #148]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a68:	601a      	str	r2, [r3, #0]
  return result;
 8002a6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	461a      	mov	r2, r3
 8002a82:	2301      	movs	r3, #1
 8002a84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fd ffb7 	bl	80009f8 <HAL_GetTick>
 8002a8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fd ffb2 	bl	80009f8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e109      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 8002aa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002abc:	601a      	str	r2, [r3, #0]
  return result;
 8002abe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ac2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xc48>
 8002ad8:	4b01      	ldr	r3, [pc, #4]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	e01e      	b.n	8002b1c <HAL_RCC_OscConfig+0xc80>
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0xe28>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b24:	6011      	str	r1, [r2, #0]
 8002b26:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fa92 f1a2 	rbit	r1, r2
 8002b30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b34:	6011      	str	r1, [r2, #0]
  return result;
 8002b36:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f002 021f 	and.w	r2, r2, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d09b      	beq.n	8002a90 <HAL_RCC_OscConfig+0xbf4>
 8002b58:	e0ad      	b.n	8002cb6 <HAL_RCC_OscConfig+0xe1a>
 8002b5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b72:	601a      	str	r2, [r3, #0]
  return result;
 8002b74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fd ff32 	bl	80009f8 <HAL_GetTick>
 8002b94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b98:	e009      	b.n	8002bae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fd ff2d 	bl	80009f8 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e084      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
 8002bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f2a3 	rbit	r2, r3
 8002bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc6:	601a      	str	r2, [r3, #0]
  return result;
 8002bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_OscConfig+0xd4c>
 8002be2:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_RCC_OscConfig+0xe28>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e01b      	b.n	8002c20 <HAL_RCC_OscConfig+0xd84>
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	fa93 f2a3 	rbit	r2, r3
 8002bfc:	f107 0320 	add.w	r3, r7, #32
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f2a3 	rbit	r2, r3
 8002c16:	f107 0318 	add.w	r3, r7, #24
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <HAL_RCC_OscConfig+0xe28>)
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	f107 0214 	add.w	r2, r7, #20
 8002c24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c28:	6011      	str	r1, [r2, #0]
 8002c2a:	f107 0214 	add.w	r2, r7, #20
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	fa92 f1a2 	rbit	r1, r2
 8002c34:	f107 0210 	add.w	r2, r7, #16
 8002c38:	6011      	str	r1, [r2, #0]
  return result;
 8002c3a:	f107 0210 	add.w	r2, r7, #16
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 021f 	and.w	r2, r2, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d19e      	bne.n	8002b9a <HAL_RCC_OscConfig+0xcfe>
 8002c5c:	e02b      	b.n	8002cb6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e025      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_RCC_OscConfig+0xe28>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_RCC_OscConfig+0xe28>)
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c80:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d111      	bne.n	8002cb2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d108      	bne.n	8002cb2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b09e      	sub	sp, #120	; 0x78
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e162      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b90      	ldr	r3, [pc, #576]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d910      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b8d      	ldr	r3, [pc, #564]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0207 	bic.w	r2, r3, #7
 8002cf6:	498b      	ldr	r1, [pc, #556]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b89      	ldr	r3, [pc, #548]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e14a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b82      	ldr	r3, [pc, #520]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	497f      	ldr	r1, [pc, #508]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80dc 	beq.w	8002ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d13c      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xf6>
 8002d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d102      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xa6>
 8002d68:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	e00f      	b.n	8002d8e <HAL_RCC_ClockConfig+0xc6>
 8002d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8002d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d80:	663b      	str	r3, [r7, #96]	; 0x60
 8002d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d9e:	fab2 f282 	clz	r2, r2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f042 0220 	orr.w	r2, r2, #32
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f002 021f 	and.w	r2, r2, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d17b      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0f3      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d13c      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x178>
 8002dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x128>
 8002dea:	4b4f      	ldr	r3, [pc, #316]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_ClockConfig+0x148>
 8002df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
 8002e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0c:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e14:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e18:	fa92 f2a2 	rbit	r2, r2
 8002e1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f042 0220 	orr.w	r2, r2, #32
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f002 021f 	and.w	r2, r2, #31
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d13a      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b2      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
 8002e40:	2302      	movs	r3, #2
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x1a0>
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	e00d      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1bc>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	2302      	movs	r3, #2
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2202      	movs	r2, #2
 8002e86:	61ba      	str	r2, [r7, #24]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	617a      	str	r2, [r7, #20]
  return result;
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0220 	orr.w	r2, r2, #32
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e079      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	491a      	ldr	r1, [pc, #104]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fd fd98 	bl	80009f8 <HAL_GetTick>
 8002ec8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fd fd94 	bl	80009f8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e061      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d214      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4906      	ldr	r1, [pc, #24]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e040      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
 8002f24:	40022000 	.word	0x40022000
 8002f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	491a      	ldr	r1, [pc, #104]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4912      	ldr	r1, [pc, #72]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f6a:	f000 f829 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4601      	mov	r1, r0
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f78:	22f0      	movs	r2, #240	; 0xf0
 8002f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	fa92 f2a2 	rbit	r2, r2
 8002f82:	60fa      	str	r2, [r7, #12]
  return result;
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	fab2 f282 	clz	r2, r2
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	40d3      	lsrs	r3, r2
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	fa21 f303 	lsr.w	r3, r1, r3
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_RCC_ClockConfig+0x2f4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fc14 	bl	80007cc <HAL_InitTick>
  
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3778      	adds	r7, #120	; 0x78
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08004698 	.word	0x08004698
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	20000004 	.word	0x20000004

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b08b      	sub	sp, #44	; 0x2c
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d002      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8002fee:	e03f      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ff2:	623b      	str	r3, [r7, #32]
      break;
 8002ff4:	e03f      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ffc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003000:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	607a      	str	r2, [r7, #4]
  return result;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	fab2 f282 	clz	r2, r2
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	40d3      	lsrs	r3, r2
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	220f      	movs	r2, #15
 8003024:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	fa92 f2a2 	rbit	r2, r2
 800302c:	60fa      	str	r2, [r7, #12]
  return result;
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	fab2 f282 	clz	r2, r2
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	40d3      	lsrs	r3, r2
 8003038:	4a15      	ldr	r2, [pc, #84]	; (8003090 <HAL_RCC_GetSysClockFreq+0xd0>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc8>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e007      	b.n	800306a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc8>)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	623b      	str	r3, [r7, #32]
      break;
 800306e:	e002      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003072:	623b      	str	r3, [r7, #32]
      break;
 8003074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003076:	6a3b      	ldr	r3, [r7, #32]
}
 8003078:	4618      	mov	r0, r3
 800307a:	372c      	adds	r7, #44	; 0x2c
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40021000 	.word	0x40021000
 8003088:	007a1200 	.word	0x007a1200
 800308c:	080046b0 	.word	0x080046b0
 8003090:	080046c0 	.word	0x080046c0

08003094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030b2:	f7ff ffef 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b6:	4601      	mov	r1, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	fa92 f2a2 	rbit	r2, r2
 80030cc:	603a      	str	r2, [r7, #0]
  return result;
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	fab2 f282 	clz	r2, r2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	40d3      	lsrs	r3, r2
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	080046a8 	.word	0x080046a8

080030f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030f6:	f7ff ffcd 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030fa:	4601      	mov	r1, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003104:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	fa92 f2a2 	rbit	r2, r2
 8003110:	603a      	str	r2, [r7, #0]
  return result;
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	40d3      	lsrs	r3, r2
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x40>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	080046a8 	.word	0x080046a8

08003134 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	220f      	movs	r2, #15
 8003142:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCC_GetClockConfig+0x60>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0207 	and.w	r2, r3, #7
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	40022000 	.word	0x40022000

08003198 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b092      	sub	sp, #72	; 0x48
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80d7 	beq.w	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031bc:	4b4e      	ldr	r3, [pc, #312]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10e      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4a4a      	ldr	r2, [pc, #296]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d2:	61d3      	str	r3, [r2, #28]
 80031d4:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4b45      	ldr	r3, [pc, #276]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d118      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f2:	4b42      	ldr	r3, [pc, #264]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a41      	ldr	r2, [pc, #260]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fe:	f7fd fbfb 	bl	80009f8 <HAL_GetTick>
 8003202:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	e008      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003206:	f7fd fbf7 	bl	80009f8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	; 0x64
 8003212:	d901      	bls.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1d6      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003224:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8084 	beq.w	800333e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003240:	429a      	cmp	r2, r3
 8003242:	d07c      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003244:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800324e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003252:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	461a      	mov	r2, r3
 800326e:	2301      	movs	r3, #1
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	461a      	mov	r2, r3
 8003292:	2300      	movs	r3, #0
 8003294:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003296:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d04b      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fd fba7 	bl	80009f8 <HAL_GetTick>
 80032aa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fd fba3 	bl	80009f8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e180      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80032c4:	2302      	movs	r3, #2
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	61fb      	str	r3, [r7, #28]
  return result;
 80032dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d108      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032f2:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	e00d      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40007000 	.word	0x40007000
 8003300:	10908100 	.word	0x10908100
 8003304:	2302      	movs	r3, #2
 8003306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	2202      	movs	r2, #2
 8003316:	613a      	str	r2, [r7, #16]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	60fa      	str	r2, [r7, #12]
  return result;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f002 021f 	and.w	r2, r2, #31
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0b7      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800333e:	4b95      	ldr	r3, [pc, #596]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4992      	ldr	r1, [pc, #584]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003350:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003358:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4a8d      	ldr	r2, [pc, #564]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003362:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003370:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	f023 0203 	bic.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4985      	ldr	r1, [pc, #532]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800338e:	4b81      	ldr	r3, [pc, #516]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	497e      	ldr	r1, [pc, #504]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800339c:	4313      	orrs	r3, r2
 800339e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033ac:	4b79      	ldr	r3, [pc, #484]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4976      	ldr	r1, [pc, #472]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ca:	4b72      	ldr	r3, [pc, #456]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f023 0210 	bic.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	496f      	ldr	r1, [pc, #444]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	4967      	ldr	r1, [pc, #412]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f023 0220 	bic.w	r2, r3, #32
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4960      	ldr	r1, [pc, #384]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003424:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	4958      	ldr	r1, [pc, #352]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003442:	4b54      	ldr	r3, [pc, #336]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4951      	ldr	r1, [pc, #324]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003460:	4b4c      	ldr	r3, [pc, #304]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4949      	ldr	r1, [pc, #292]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800347e:	4b45      	ldr	r3, [pc, #276]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4942      	ldr	r1, [pc, #264]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800349c:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	493a      	ldr	r1, [pc, #232]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80034ba:	4b36      	ldr	r3, [pc, #216]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	4933      	ldr	r1, [pc, #204]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034d8:	4b2e      	ldr	r3, [pc, #184]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e4:	492b      	ldr	r1, [pc, #172]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4924      	ldr	r1, [pc, #144]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	491c      	ldr	r1, [pc, #112]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	4915      	ldr	r1, [pc, #84]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003540:	4313      	orrs	r3, r2
 8003542:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003550:	4b10      	ldr	r3, [pc, #64]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	490d      	ldr	r1, [pc, #52]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	4906      	ldr	r1, [pc, #24]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00c      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	e002      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a0:	490b      	ldr	r1, [pc, #44]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3748      	adds	r7, #72	; 0x48
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000

080035d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e01d      	b.n	8003622 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f815 	bl	800362a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f000 f986 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_TIM_Base_Start_IT+0x50>)
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b06      	cmp	r3, #6
 8003668:	d00b      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x42>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003670:	d007      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	00010007 	.word	0x00010007

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f905 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8f7 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f908 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8db 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8cd 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8de 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8b1 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8a3 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8b4 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f887 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f879 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f88a 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fc fe90 	bl	8000538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f918 	bl	8003a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003852:	d10e      	bne.n	8003872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d107      	bne.n	8003872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800386a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f90b 	bl	8003a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d10e      	bne.n	800389e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d107      	bne.n	800389e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f838 	bl	800390e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0220 	mvn.w	r2, #32
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8cb 	bl	8003a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a42      	ldr	r2, [pc, #264]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d00f      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3f      	ldr	r2, [pc, #252]	; (8003a44 <TIM_Base_SetConfig+0x120>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00b      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3e      	ldr	r2, [pc, #248]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <TIM_Base_SetConfig+0x128>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <TIM_Base_SetConfig+0x12c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d108      	bne.n	8003976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d01b      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <TIM_Base_SetConfig+0x120>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d017      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2d      	ldr	r2, [pc, #180]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <TIM_Base_SetConfig+0x128>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00f      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2c      	ldr	r2, [pc, #176]	; (8003a54 <TIM_Base_SetConfig+0x130>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <TIM_Base_SetConfig+0x134>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <TIM_Base_SetConfig+0x138>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <TIM_Base_SetConfig+0x12c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <TIM_Base_SetConfig+0x128>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <TIM_Base_SetConfig+0x130>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <TIM_Base_SetConfig+0x134>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <TIM_Base_SetConfig+0x138>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <TIM_Base_SetConfig+0x12c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40013400 	.word	0x40013400
 8003a50:	40015000 	.word	0x40015000
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e040      	b.n	8003b30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc fe42 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f82c 	bl	8003b38 <UART_SetConfig>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa3a 	bl	8003f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fac1 	bl	80040b0 <UART_CheckIdleState>
 8003b2e:	4603      	mov	r3, r0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4bac      	ldr	r3, [pc, #688]	; (8003e18 <UART_SetConfig+0x2e0>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	6939      	ldr	r1, [r7, #16]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a9a      	ldr	r2, [pc, #616]	; (8003e1c <UART_SetConfig+0x2e4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d121      	bne.n	8003bfc <UART_SetConfig+0xc4>
 8003bb8:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <UART_SetConfig+0x2e8>)
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d817      	bhi.n	8003bf4 <UART_SetConfig+0xbc>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <UART_SetConfig+0x94>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003be9 	.word	0x08003be9
 8003bd4:	08003bef 	.word	0x08003bef
 8003bd8:	08003be3 	.word	0x08003be3
 8003bdc:	2301      	movs	r3, #1
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e0b2      	b.n	8003d48 <UART_SetConfig+0x210>
 8003be2:	2302      	movs	r3, #2
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e0af      	b.n	8003d48 <UART_SetConfig+0x210>
 8003be8:	2304      	movs	r3, #4
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e0ac      	b.n	8003d48 <UART_SetConfig+0x210>
 8003bee:	2308      	movs	r3, #8
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e0a9      	b.n	8003d48 <UART_SetConfig+0x210>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	bf00      	nop
 8003bfa:	e0a5      	b.n	8003d48 <UART_SetConfig+0x210>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a88      	ldr	r2, [pc, #544]	; (8003e24 <UART_SetConfig+0x2ec>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d123      	bne.n	8003c4e <UART_SetConfig+0x116>
 8003c06:	4b86      	ldr	r3, [pc, #536]	; (8003e20 <UART_SetConfig+0x2e8>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c12:	d012      	beq.n	8003c3a <UART_SetConfig+0x102>
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c18:	d802      	bhi.n	8003c20 <UART_SetConfig+0xe8>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <UART_SetConfig+0xf6>
 8003c1e:	e012      	b.n	8003c46 <UART_SetConfig+0x10e>
 8003c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c24:	d00c      	beq.n	8003c40 <UART_SetConfig+0x108>
 8003c26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c2a:	d003      	beq.n	8003c34 <UART_SetConfig+0xfc>
 8003c2c:	e00b      	b.n	8003c46 <UART_SetConfig+0x10e>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e089      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c34:	2302      	movs	r3, #2
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e086      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e083      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c40:	2308      	movs	r3, #8
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e080      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c46:	2310      	movs	r3, #16
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	bf00      	nop
 8003c4c:	e07c      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a75      	ldr	r2, [pc, #468]	; (8003e28 <UART_SetConfig+0x2f0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d123      	bne.n	8003ca0 <UART_SetConfig+0x168>
 8003c58:	4b71      	ldr	r3, [pc, #452]	; (8003e20 <UART_SetConfig+0x2e8>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c64:	d012      	beq.n	8003c8c <UART_SetConfig+0x154>
 8003c66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c6a:	d802      	bhi.n	8003c72 <UART_SetConfig+0x13a>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <UART_SetConfig+0x148>
 8003c70:	e012      	b.n	8003c98 <UART_SetConfig+0x160>
 8003c72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c76:	d00c      	beq.n	8003c92 <UART_SetConfig+0x15a>
 8003c78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c7c:	d003      	beq.n	8003c86 <UART_SetConfig+0x14e>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x160>
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e060      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e05d      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e05a      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e057      	b.n	8003d48 <UART_SetConfig+0x210>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	bf00      	nop
 8003c9e:	e053      	b.n	8003d48 <UART_SetConfig+0x210>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a61      	ldr	r2, [pc, #388]	; (8003e2c <UART_SetConfig+0x2f4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d123      	bne.n	8003cf2 <UART_SetConfig+0x1ba>
 8003caa:	4b5d      	ldr	r3, [pc, #372]	; (8003e20 <UART_SetConfig+0x2e8>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb6:	d012      	beq.n	8003cde <UART_SetConfig+0x1a6>
 8003cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cbc:	d802      	bhi.n	8003cc4 <UART_SetConfig+0x18c>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <UART_SetConfig+0x19a>
 8003cc2:	e012      	b.n	8003cea <UART_SetConfig+0x1b2>
 8003cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cc8:	d00c      	beq.n	8003ce4 <UART_SetConfig+0x1ac>
 8003cca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cce:	d003      	beq.n	8003cd8 <UART_SetConfig+0x1a0>
 8003cd0:	e00b      	b.n	8003cea <UART_SetConfig+0x1b2>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e037      	b.n	8003d48 <UART_SetConfig+0x210>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e034      	b.n	8003d48 <UART_SetConfig+0x210>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e031      	b.n	8003d48 <UART_SetConfig+0x210>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e02e      	b.n	8003d48 <UART_SetConfig+0x210>
 8003cea:	2310      	movs	r3, #16
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	bf00      	nop
 8003cf0:	e02a      	b.n	8003d48 <UART_SetConfig+0x210>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	; (8003e30 <UART_SetConfig+0x2f8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d123      	bne.n	8003d44 <UART_SetConfig+0x20c>
 8003cfc:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <UART_SetConfig+0x2e8>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d08:	d012      	beq.n	8003d30 <UART_SetConfig+0x1f8>
 8003d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0e:	d802      	bhi.n	8003d16 <UART_SetConfig+0x1de>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <UART_SetConfig+0x1ec>
 8003d14:	e012      	b.n	8003d3c <UART_SetConfig+0x204>
 8003d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d1a:	d00c      	beq.n	8003d36 <UART_SetConfig+0x1fe>
 8003d1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d20:	d003      	beq.n	8003d2a <UART_SetConfig+0x1f2>
 8003d22:	e00b      	b.n	8003d3c <UART_SetConfig+0x204>
 8003d24:	2300      	movs	r3, #0
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e00e      	b.n	8003d48 <UART_SetConfig+0x210>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e00b      	b.n	8003d48 <UART_SetConfig+0x210>
 8003d30:	2304      	movs	r3, #4
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e008      	b.n	8003d48 <UART_SetConfig+0x210>
 8003d36:	2308      	movs	r3, #8
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e005      	b.n	8003d48 <UART_SetConfig+0x210>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	bf00      	nop
 8003d42:	e001      	b.n	8003d48 <UART_SetConfig+0x210>
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d50:	f040 8090 	bne.w	8003e74 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003d54:	7ffb      	ldrb	r3, [r7, #31]
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d86c      	bhi.n	8003e34 <UART_SetConfig+0x2fc>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x228>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003da5 	.word	0x08003da5
 8003d68:	08003dc5 	.word	0x08003dc5
 8003d6c:	08003e35 	.word	0x08003e35
 8003d70:	08003de1 	.word	0x08003de1
 8003d74:	08003e35 	.word	0x08003e35
 8003d78:	08003e35 	.word	0x08003e35
 8003d7c:	08003e35 	.word	0x08003e35
 8003d80:	08003e01 	.word	0x08003e01
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7ff f992 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8003d88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	005a      	lsls	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	441a      	add	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	61bb      	str	r3, [r7, #24]
        break;
 8003da2:	e04a      	b.n	8003e3a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da4:	f7ff f9a4 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 8003da8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	005a      	lsls	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	441a      	add	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	61bb      	str	r3, [r7, #24]
        break;
 8003dc2:	e03a      	b.n	8003e3a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003dce:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6852      	ldr	r2, [r2, #4]
 8003dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	61bb      	str	r3, [r7, #24]
        break;
 8003dde:	e02c      	b.n	8003e3a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de0:	f7ff f8ee 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8003de4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	005a      	lsls	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	61bb      	str	r3, [r7, #24]
        break;
 8003dfe:	e01c      	b.n	8003e3a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	61bb      	str	r3, [r7, #24]
        break;
 8003e16:	e010      	b.n	8003e3a <UART_SetConfig+0x302>
 8003e18:	efff69f3 	.word	0xefff69f3
 8003e1c:	40013800 	.word	0x40013800
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40004400 	.word	0x40004400
 8003e28:	40004800 	.word	0x40004800
 8003e2c:	40004c00 	.word	0x40004c00
 8003e30:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
        break;
 8003e38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d916      	bls.n	8003e6e <UART_SetConfig+0x336>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e46:	d212      	bcs.n	8003e6e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f023 030f 	bic.w	r3, r3, #15
 8003e50:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	897a      	ldrh	r2, [r7, #10]
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	e072      	b.n	8003f54 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
 8003e72:	e06f      	b.n	8003f54 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003e74:	7ffb      	ldrb	r3, [r7, #31]
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d85b      	bhi.n	8003f32 <UART_SetConfig+0x3fa>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <UART_SetConfig+0x348>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003ee1 	.word	0x08003ee1
 8003e8c:	08003f33 	.word	0x08003f33
 8003e90:	08003efd 	.word	0x08003efd
 8003e94:	08003f33 	.word	0x08003f33
 8003e98:	08003f33 	.word	0x08003f33
 8003e9c:	08003f33 	.word	0x08003f33
 8003ea0:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7ff f902 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8003ea8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	085a      	lsrs	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	441a      	add	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	61bb      	str	r3, [r7, #24]
        break;
 8003ec0:	e03a      	b.n	8003f38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec2:	f7ff f915 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 8003ec6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	085a      	lsrs	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	441a      	add	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	61bb      	str	r3, [r7, #24]
        break;
 8003ede:	e02b      	b.n	8003f38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003eea:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6852      	ldr	r2, [r2, #4]
 8003ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	61bb      	str	r3, [r7, #24]
        break;
 8003efa:	e01d      	b.n	8003f38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efc:	f7ff f860 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8003f00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085a      	lsrs	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	61bb      	str	r3, [r7, #24]
        break;
 8003f18:	e00e      	b.n	8003f38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	61bb      	str	r3, [r7, #24]
        break;
 8003f30:	e002      	b.n	8003f38 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
        break;
 8003f36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d908      	bls.n	8003f50 <UART_SetConfig+0x418>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d204      	bcs.n	8003f50 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e001      	b.n	8003f54 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop

08003f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01a      	beq.n	8004082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406a:	d10a      	bne.n	8004082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040be:	f7fc fc9b 	bl	80009f8 <HAL_GetTick>
 80040c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d10e      	bne.n	80040f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f82a 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e020      	b.n	8004132 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d10e      	bne.n	800411c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f814 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e00a      	b.n	8004132 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414a:	e05d      	b.n	8004208 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d059      	beq.n	8004208 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004154:	f7fc fc50 	bl	80009f8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	429a      	cmp	r2, r3
 8004162:	d302      	bcc.n	800416a <UART_WaitOnFlagUntilTimeout+0x30>
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11b      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004178:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e042      	b.n	8004228 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d02b      	beq.n	8004208 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041be:	d123      	bne.n	8004208 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e00f      	b.n	8004228 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	429a      	cmp	r2, r3
 8004224:	d092      	beq.n	800414c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6852      	ldr	r2, [r2, #4]
 8004298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d103      	bne.n	80042ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1e5a      	subs	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d6:	4b51      	ldr	r3, [pc, #324]	; (800441c <xTaskIncrementTick+0x150>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f040 808d 	bne.w	80043fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042e0:	4b4f      	ldr	r3, [pc, #316]	; (8004420 <xTaskIncrementTick+0x154>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042e8:	4a4d      	ldr	r2, [pc, #308]	; (8004420 <xTaskIncrementTick+0x154>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11f      	bne.n	8004334 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80042f4:	4b4b      	ldr	r3, [pc, #300]	; (8004424 <xTaskIncrementTick+0x158>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	e7fe      	b.n	8004310 <xTaskIncrementTick+0x44>
 8004312:	4b44      	ldr	r3, [pc, #272]	; (8004424 <xTaskIncrementTick+0x158>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	4b43      	ldr	r3, [pc, #268]	; (8004428 <xTaskIncrementTick+0x15c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a41      	ldr	r2, [pc, #260]	; (8004424 <xTaskIncrementTick+0x158>)
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4a41      	ldr	r2, [pc, #260]	; (8004428 <xTaskIncrementTick+0x15c>)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <xTaskIncrementTick+0x160>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	4a3f      	ldr	r2, [pc, #252]	; (800442c <xTaskIncrementTick+0x160>)
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	f000 f8e6 	bl	8004500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004334:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <xTaskIncrementTick+0x164>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	429a      	cmp	r2, r3
 800433c:	d34e      	bcc.n	80043dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <xTaskIncrementTick+0x158>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <xTaskIncrementTick+0x80>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <xTaskIncrementTick+0x82>
 800434c:	2300      	movs	r3, #0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004352:	4b37      	ldr	r3, [pc, #220]	; (8004430 <xTaskIncrementTick+0x164>)
 8004354:	f04f 32ff 	mov.w	r2, #4294967295
 8004358:	601a      	str	r2, [r3, #0]
					break;
 800435a:	e03f      	b.n	80043dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <xTaskIncrementTick+0x158>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d203      	bcs.n	800437c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004374:	4a2e      	ldr	r2, [pc, #184]	; (8004430 <xTaskIncrementTick+0x164>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6013      	str	r3, [r2, #0]
						break;
 800437a:	e02f      	b.n	80043dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff79 	bl	8004278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3318      	adds	r3, #24
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff70 	bl	8004278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <xTaskIncrementTick+0x168>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d903      	bls.n	80043ac <xTaskIncrementTick+0xe0>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	4a22      	ldr	r2, [pc, #136]	; (8004434 <xTaskIncrementTick+0x168>)
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4a1f      	ldr	r2, [pc, #124]	; (8004438 <xTaskIncrementTick+0x16c>)
 80043ba:	441a      	add	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f7ff ff34 	bl	8004230 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <xTaskIncrementTick+0x170>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d3b3      	bcc.n	800433e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043da:	e7b0      	b.n	800433e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043dc:	4b17      	ldr	r3, [pc, #92]	; (800443c <xTaskIncrementTick+0x170>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	4915      	ldr	r1, [pc, #84]	; (8004438 <xTaskIncrementTick+0x16c>)
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d907      	bls.n	8004404 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80043f4:	2301      	movs	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	e004      	b.n	8004404 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <xTaskIncrementTick+0x174>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3301      	adds	r3, #1
 8004400:	4a0f      	ldr	r2, [pc, #60]	; (8004440 <xTaskIncrementTick+0x174>)
 8004402:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <xTaskIncrementTick+0x178>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800440c:	2301      	movs	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004410:	697b      	ldr	r3, [r7, #20]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000600 	.word	0x20000600
 8004420:	200005e8 	.word	0x200005e8
 8004424:	200005e0 	.word	0x200005e0
 8004428:	200005e4 	.word	0x200005e4
 800442c:	200005f8 	.word	0x200005f8
 8004430:	200005fc 	.word	0x200005fc
 8004434:	200005ec 	.word	0x200005ec
 8004438:	20000180 	.word	0x20000180
 800443c:	2000017c 	.word	0x2000017c
 8004440:	200005f0 	.word	0x200005f0
 8004444:	200005f4 	.word	0x200005f4

08004448 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800444e:	4b27      	ldr	r3, [pc, #156]	; (80044ec <vTaskSwitchContext+0xa4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <vTaskSwitchContext+0xa8>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800445c:	e040      	b.n	80044e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <vTaskSwitchContext+0xa8>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <vTaskSwitchContext+0xac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e00f      	b.n	800448c <vTaskSwitchContext+0x44>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <vTaskSwitchContext+0x3e>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	e7fe      	b.n	8004484 <vTaskSwitchContext+0x3c>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3b01      	subs	r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	491a      	ldr	r1, [pc, #104]	; (80044f8 <vTaskSwitchContext+0xb0>)
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0e5      	beq.n	800446c <vTaskSwitchContext+0x24>
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <vTaskSwitchContext+0xb0>)
 80044ac:	4413      	add	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	3308      	adds	r3, #8
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d104      	bne.n	80044d0 <vTaskSwitchContext+0x88>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a09      	ldr	r2, [pc, #36]	; (80044fc <vTaskSwitchContext+0xb4>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4a06      	ldr	r2, [pc, #24]	; (80044f4 <vTaskSwitchContext+0xac>)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	20000600 	.word	0x20000600
 80044f0:	200005f4 	.word	0x200005f4
 80044f4:	200005ec 	.word	0x200005ec
 80044f8:	20000180 	.word	0x20000180
 80044fc:	2000017c 	.word	0x2000017c

08004500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <prvResetNextTaskUnblockTime+0x44>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <prvResetNextTaskUnblockTime+0x14>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <prvResetNextTaskUnblockTime+0x16>
 8004514:	2300      	movs	r3, #0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <prvResetNextTaskUnblockTime+0x48>)
 800451c:	f04f 32ff 	mov.w	r2, #4294967295
 8004520:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004522:	e008      	b.n	8004536 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <prvResetNextTaskUnblockTime+0x44>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <prvResetNextTaskUnblockTime+0x48>)
 8004534:	6013      	str	r3, [r2, #0]
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	200005e0 	.word	0x200005e0
 8004548:	200005fc 	.word	0x200005fc
 800454c:	00000000 	.word	0x00000000

08004550 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <pxCurrentTCBConst2>)
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	6808      	ldr	r0, [r1, #0]
 8004556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455a:	f380 8809 	msr	PSP, r0
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f380 8811 	msr	BASEPRI, r0
 800456a:	4770      	bx	lr
 800456c:	f3af 8000 	nop.w

08004570 <pxCurrentTCBConst2>:
 8004570:	2000017c 	.word	0x2000017c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
	...

08004580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004580:	f3ef 8009 	mrs	r0, PSP
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <pxCurrentTCBConst>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	f01e 0f10 	tst.w	lr, #16
 8004590:	bf08      	it	eq
 8004592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459a:	6010      	str	r0, [r2, #0]
 800459c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045a4:	f380 8811 	msr	BASEPRI, r0
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f7ff ff4a 	bl	8004448 <vTaskSwitchContext>
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f380 8811 	msr	BASEPRI, r0
 80045bc:	bc09      	pop	{r0, r3}
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c6:	f01e 0f10 	tst.w	lr, #16
 80045ca:	bf08      	it	eq
 80045cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045d0:	f380 8809 	msr	PSP, r0
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst>:
 80045e0:	2000017c 	.word	0x2000017c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004600:	f7ff fe64 	bl	80042cc <xTaskIncrementTick>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <SysTick_Handler+0x3c>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4e0d      	ldr	r6, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1ba4      	subs	r4, r4, r6
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2500      	movs	r5, #0
 8004634:	42a5      	cmp	r5, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4e0b      	ldr	r6, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f000 f820 	bl	8004680 <_init>
 8004640:	1ba4      	subs	r4, r4, r6
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2500      	movs	r5, #0
 8004646:	42a5      	cmp	r5, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004650:	4798      	blx	r3
 8004652:	3501      	adds	r5, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800465a:	4798      	blx	r3
 800465c:	3501      	adds	r5, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	080046d0 	.word	0x080046d0
 8004664:	080046d0 	.word	0x080046d0
 8004668:	080046d0 	.word	0x080046d0
 800466c:	080046d4 	.word	0x080046d4

08004670 <memset>:
 8004670:	4402      	add	r2, r0
 8004672:	4603      	mov	r3, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
