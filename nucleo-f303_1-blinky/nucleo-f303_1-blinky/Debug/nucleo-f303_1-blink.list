
nucleo-f303_1-blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002b84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002b84  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dbd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001290  00000000  00000000  00026df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  00028090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000598  00000000  00000000  000286d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b638  00000000  00000000  00028c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f6b  00000000  00000000  000442a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2731  00000000  00000000  0004a20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec93c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001830  00000000  00000000  000ec9b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002b20 	.word	0x08002b20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002b20 	.word	0x08002b20

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa00 	bl	80005dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f82c 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8b8 	bl	8000354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f886 	bl	80002f4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET ) {	// onko nappi painettuna (huom! nappi kytkee maihin!)
 80001e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ec:	4811      	ldr	r0, [pc, #68]	; (8000234 <main+0x60>)
 80001ee:	f000 fced 	bl	8000bcc <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d113      	bne.n	8000220 <main+0x4c>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		// "painettu"-sekvenssi
 80001f8:	2201      	movs	r2, #1
 80001fa:	2120      	movs	r1, #32
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f000 fcfc 	bl	8000bfc <HAL_GPIO_WritePin>
	  	  HAL_Delay(100);
 8000204:	2064      	movs	r0, #100	; 0x64
 8000206:	f000 fa4f 	bl	80006a8 <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800020a:	2200      	movs	r2, #0
 800020c:	2120      	movs	r1, #32
 800020e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000212:	f000 fcf3 	bl	8000bfc <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 8000216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021a:	f000 fa45 	bl	80006a8 <HAL_Delay>
 800021e:	e7e3      	b.n	80001e8 <main+0x14>
	  }
	  else {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);					// "ei painettu"-sekvenssi
 8000220:	2120      	movs	r1, #32
 8000222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000226:	f000 fd01 	bl	8000c2c <HAL_GPIO_TogglePin>
	  	  HAL_Delay(200);
 800022a:	20c8      	movs	r0, #200	; 0xc8
 800022c:	f000 fa3c 	bl	80006a8 <HAL_Delay>
	  if ( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET ) {	// onko nappi painettuna (huom! nappi kytkee maihin!)
 8000230:	e7da      	b.n	80001e8 <main+0x14>
 8000232:	bf00      	nop
 8000234:	48000800 	.word	0x48000800

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b0a6      	sub	sp, #152	; 0x98
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fc62 	bl	8002b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2258      	movs	r2, #88	; 0x58
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fc54 	bl	8002b10 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000288:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fce2 	bl	8000c60 <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a2:	f000 f8bf 	bl	8000424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2302      	movs	r3, #2
 80002ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fbe2 	bl	8001a8c <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ce:	f000 f8a9 	bl	8000424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fe0b 	bl	8001ef8 <HAL_RCCEx_PeriphCLKConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002e8:	f000 f89c 	bl	8000424 <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3798      	adds	r7, #152	; 0x98
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_USART2_UART_Init+0x58>)
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <MX_USART2_UART_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000300:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART2_UART_Init+0x58>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000338:	f001 fffc 	bl	8002334 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 f86f 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	40004400 	.word	0x40004400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08a      	sub	sp, #40	; 0x28
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a2a      	ldr	r2, [pc, #168]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b28      	ldr	r3, [pc, #160]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800037e:	613b      	str	r3, [r7, #16]
 8000380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a24      	ldr	r2, [pc, #144]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b2:	4b19      	ldr	r3, [pc, #100]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a18      	ldr	r2, [pc, #96]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2120      	movs	r1, #32
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f000 fc13 	bl	8000bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_GPIO_Init+0xc8>)
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_GPIO_Init+0xcc>)
 80003ec:	f000 fa64 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f0:	2320      	movs	r3, #32
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040a:	f000 fa55 	bl	80008b8 <HAL_GPIO_Init>

}
 800040e:	bf00      	nop
 8000410:	3728      	adds	r7, #40	; 0x28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	10210000 	.word	0x10210000
 8000420:	48000800 	.word	0x48000800

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x44>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x44>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x44>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <HAL_MspInit+0x44>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <HAL_MspInit+0x44>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <HAL_MspInit+0x44>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800046a:	2007      	movs	r0, #7
 800046c:	f000 f9f0 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000

0800047c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <HAL_UART_MspInit+0x7c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d128      	bne.n	80004f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800049e:	4b17      	ldr	r3, [pc, #92]	; (80004fc <HAL_UART_MspInit+0x80>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a16      	ldr	r2, [pc, #88]	; (80004fc <HAL_UART_MspInit+0x80>)
 80004a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <HAL_UART_MspInit+0x80>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <HAL_UART_MspInit+0x80>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a10      	ldr	r2, [pc, #64]	; (80004fc <HAL_UART_MspInit+0x80>)
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_UART_MspInit+0x80>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004ce:	230c      	movs	r3, #12
 80004d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004de:	2307      	movs	r3, #7
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ec:	f000 f9e4 	bl	80008b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3728      	adds	r7, #40	; 0x28
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40004400 	.word	0x40004400
 80004fc:	40021000 	.word	0x40021000

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000554:	f000 f888 	bl	8000668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SystemInit+0x28>)
 8000562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SystemInit+0x28>)
 8000568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800056c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <SystemInit+0x28>)
 8000572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000576:	609a      	str	r2, [r3, #8]
#endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800058c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800058e:	e003      	b.n	8000598 <LoopCopyDataInit>

08000590 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000592:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000594:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000596:	3104      	adds	r1, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800059c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800059e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005a0:	d3f6      	bcc.n	8000590 <CopyDataInit>
	ldr	r2, =_sbss
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005a4:	e002      	b.n	80005ac <LoopFillZerobss>

080005a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005a8:	f842 3b04 	str.w	r3, [r2], #4

080005ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <LoopForever+0x16>)
	cmp	r2, r3
 80005ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005b0:	d3f9      	bcc.n	80005a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005b2:	f7ff ffd3 	bl	800055c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b6:	f002 fa87 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ba:	f7ff fe0b 	bl	80001d4 <main>

080005be <LoopForever>:

LoopForever:
    b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80005c4:	08002b78 	.word	0x08002b78
	ldr	r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005cc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80005d0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005d4:	200000ac 	.word	0x200000ac

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <HAL_Init+0x28>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_Init+0x28>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 f92f 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f808 	bl	8000608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f8:	f7ff ff1c 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40022000 	.word	0x40022000

08000608 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x54>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x58>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f939 	bl	800089e <HAL_SYSTICK_Config>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e00e      	b.n	8000654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	d80a      	bhi.n	8000652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800063c:	2200      	movs	r2, #0
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f000 f90f 	bl	8000866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <HAL_InitTick+0x5c>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800064e:	2300      	movs	r3, #0
 8000650:	e000      	b.n	8000654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	20000008 	.word	0x20000008
 8000664:	20000004 	.word	0x20000004

08000668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x20>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <HAL_IncTick+0x24>)
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	200000a8 	.word	0x200000a8

08000690 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;  
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GetTick+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	200000a8 	.word	0x200000a8

080006a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff ffee 	bl	8000690 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c0:	d005      	beq.n	80006ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_Delay+0x40>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006ce:	bf00      	nop
 80006d0:	f7ff ffde 	bl	8000690 <HAL_GetTick>
 80006d4:	4602      	mov	r2, r0
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8f7      	bhi.n	80006d0 <HAL_Delay+0x28>
  {
  }
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000008 	.word	0x20000008

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff47 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000878:	f7ff ff5c 	bl	8000734 <__NVIC_GetPriorityGrouping>
 800087c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff8e 	bl	80007a4 <NVIC_EncodePriority>
 8000888:	4602      	mov	r2, r0
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffb0 	bl	800080c <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c6:	e160      	b.n	8000b8a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 8152 	beq.w	8000b84 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d003      	beq.n	80008f0 <HAL_GPIO_Init+0x38>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2b12      	cmp	r3, #18
 80008ee:	d123      	bne.n	8000938 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	08da      	lsrs	r2, r3, #3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3208      	adds	r2, #8
 80008f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	220f      	movs	r2, #15
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	691a      	ldr	r2, [r3, #16]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	08da      	lsrs	r2, r3, #3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3208      	adds	r2, #8
 8000932:	6939      	ldr	r1, [r7, #16]
 8000934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	2203      	movs	r2, #3
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 0203 	and.w	r2, r3, #3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d00b      	beq.n	800098c <HAL_GPIO_Init+0xd4>
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d007      	beq.n	800098c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000980:	2b11      	cmp	r3, #17
 8000982:	d003      	beq.n	800098c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b12      	cmp	r3, #18
 800098a:	d130      	bne.n	80009ee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68da      	ldr	r2, [r3, #12]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009c2:	2201      	movs	r2, #1
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	091b      	lsrs	r3, r3, #4
 80009d8:	f003 0201 	and.w	r2, r3, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2203      	movs	r2, #3
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 80ac 	beq.w	8000b84 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2c:	4b5e      	ldr	r3, [pc, #376]	; (8000ba8 <HAL_GPIO_Init+0x2f0>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a5d      	ldr	r2, [pc, #372]	; (8000ba8 <HAL_GPIO_Init+0x2f0>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b5b      	ldr	r3, [pc, #364]	; (8000ba8 <HAL_GPIO_Init+0x2f0>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a44:	4a59      	ldr	r2, [pc, #356]	; (8000bac <HAL_GPIO_Init+0x2f4>)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a6e:	d025      	beq.n	8000abc <HAL_GPIO_Init+0x204>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a4f      	ldr	r2, [pc, #316]	; (8000bb0 <HAL_GPIO_Init+0x2f8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d01f      	beq.n	8000ab8 <HAL_GPIO_Init+0x200>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a4e      	ldr	r2, [pc, #312]	; (8000bb4 <HAL_GPIO_Init+0x2fc>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d019      	beq.n	8000ab4 <HAL_GPIO_Init+0x1fc>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a4d      	ldr	r2, [pc, #308]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d013      	beq.n	8000ab0 <HAL_GPIO_Init+0x1f8>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a4c      	ldr	r2, [pc, #304]	; (8000bbc <HAL_GPIO_Init+0x304>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00d      	beq.n	8000aac <HAL_GPIO_Init+0x1f4>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a4b      	ldr	r2, [pc, #300]	; (8000bc0 <HAL_GPIO_Init+0x308>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_Init+0x1f0>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a4a      	ldr	r2, [pc, #296]	; (8000bc4 <HAL_GPIO_Init+0x30c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d101      	bne.n	8000aa4 <HAL_GPIO_Init+0x1ec>
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	e00c      	b.n	8000abe <HAL_GPIO_Init+0x206>
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	e00a      	b.n	8000abe <HAL_GPIO_Init+0x206>
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	e008      	b.n	8000abe <HAL_GPIO_Init+0x206>
 8000aac:	2304      	movs	r3, #4
 8000aae:	e006      	b.n	8000abe <HAL_GPIO_Init+0x206>
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e004      	b.n	8000abe <HAL_GPIO_Init+0x206>
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	e002      	b.n	8000abe <HAL_GPIO_Init+0x206>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <HAL_GPIO_Init+0x206>
 8000abc:	2300      	movs	r3, #0
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	f002 0203 	and.w	r2, r2, #3
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	4093      	lsls	r3, r2
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ace:	4937      	ldr	r1, [pc, #220]	; (8000bac <HAL_GPIO_Init+0x2f4>)
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000adc:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b00:	4a31      	ldr	r2, [pc, #196]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b2a:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b54:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f47f ae97 	bne.w	80008c8 <HAL_GPIO_Init+0x10>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	371c      	adds	r7, #28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	48000800 	.word	0x48000800
 8000bb8:	48000c00 	.word	0x48000c00
 8000bbc:	48001000 	.word	0x48001000
 8000bc0:	48001400 	.word	0x48001400
 8000bc4:	48001800 	.word	0x48001800
 8000bc8:	40010400 	.word	0x40010400

08000bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e001      	b.n	8000bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c0c:	787b      	ldrb	r3, [r7, #1]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c18:	e002      	b.n	8000c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	041a      	lsls	r2, r3, #16
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000c4c:	e002      	b.n	8000c54 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c4e:	887a      	ldrh	r2, [r7, #2]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	619a      	str	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f000 bf01 	b.w	8001a7c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 8160 	beq.w	8000f4a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c8a:	4bae      	ldr	r3, [pc, #696]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d00c      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c96:	4bab      	ldr	r3, [pc, #684]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d159      	bne.n	8000d56 <HAL_RCC_OscConfig+0xf6>
 8000ca2:	4ba8      	ldr	r3, [pc, #672]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cae:	d152      	bne.n	8000d56 <HAL_RCC_OscConfig+0xf6>
 8000cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d102      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x82>
 8000cdc:	4b99      	ldr	r3, [pc, #612]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	e015      	b.n	8000d0e <HAL_RCC_OscConfig+0xae>
 8000ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000cee:	fa93 f3a3 	rbit	r3, r3
 8000cf2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000cf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cfe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d0a:	4b8e      	ldr	r3, [pc, #568]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d12:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d16:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d1a:	fa92 f2a2 	rbit	r2, r2
 8000d1e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d22:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	f042 0220 	orr.w	r2, r2, #32
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	f002 021f 	and.w	r2, r2, #31
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8102 	beq.w	8000f48 <HAL_RCC_OscConfig+0x2e8>
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 80fc 	bne.w	8000f48 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	f000 be93 	b.w	8001a7c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d60:	d106      	bne.n	8000d70 <HAL_RCC_OscConfig+0x110>
 8000d62:	4b78      	ldr	r3, [pc, #480]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a77      	ldr	r2, [pc, #476]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e030      	b.n	8000dd2 <HAL_RCC_OscConfig+0x172>
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10c      	bne.n	8000d94 <HAL_RCC_OscConfig+0x134>
 8000d7a:	4b72      	ldr	r3, [pc, #456]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a71      	ldr	r2, [pc, #452]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	4b6f      	ldr	r3, [pc, #444]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a6e      	ldr	r2, [pc, #440]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e01e      	b.n	8000dd2 <HAL_RCC_OscConfig+0x172>
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9e:	d10c      	bne.n	8000dba <HAL_RCC_OscConfig+0x15a>
 8000da0:	4b68      	ldr	r3, [pc, #416]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a67      	ldr	r2, [pc, #412]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b65      	ldr	r3, [pc, #404]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a64      	ldr	r2, [pc, #400]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e00b      	b.n	8000dd2 <HAL_RCC_OscConfig+0x172>
 8000dba:	4b62      	ldr	r3, [pc, #392]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a61      	ldr	r2, [pc, #388]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a5e      	ldr	r2, [pc, #376]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d059      	beq.n	8000e90 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fc58 	bl	8000690 <HAL_GetTick>
 8000de0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de4:	e00a      	b.n	8000dfc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de6:	f7ff fc53 	bl	8000690 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b64      	cmp	r3, #100	; 0x64
 8000df4:	d902      	bls.n	8000dfc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	f000 be40 	b.w	8001a7c <HAL_RCC_OscConfig+0xe1c>
 8000dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e00:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e04:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e08:	fa93 f3a3 	rbit	r3, r3
 8000e0c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000e10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d102      	bne.n	8000e2e <HAL_RCC_OscConfig+0x1ce>
 8000e28:	4b46      	ldr	r3, [pc, #280]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	e015      	b.n	8000e5a <HAL_RCC_OscConfig+0x1fa>
 8000e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000e3a:	fa93 f3a3 	rbit	r3, r3
 8000e3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e4a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e56:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e5e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000e62:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000e66:	fa92 f2a2 	rbit	r2, r2
 8000e6a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000e6e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e72:	fab2 f282 	clz	r2, r2
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	f042 0220 	orr.w	r2, r2, #32
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	f002 021f 	and.w	r2, r2, #31
 8000e82:	2101      	movs	r1, #1
 8000e84:	fa01 f202 	lsl.w	r2, r1, r2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0ab      	beq.n	8000de6 <HAL_RCC_OscConfig+0x186>
 8000e8e:	e05c      	b.n	8000f4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fbfe 	bl	8000690 <HAL_GetTick>
 8000e94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e98:	e00a      	b.n	8000eb0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9a:	f7ff fbf9 	bl	8000690 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	; 0x64
 8000ea8:	d902      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	f000 bde6 	b.w	8001a7c <HAL_RCC_OscConfig+0xe1c>
 8000eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000ebc:	fa93 f3a3 	rbit	r3, r3
 8000ec0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000ec4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec8:	fab3 f383 	clz	r3, r3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d102      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x282>
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	e015      	b.n	8000f0e <HAL_RCC_OscConfig+0x2ae>
 8000ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000eee:	fa93 f3a3 	rbit	r3, r3
 8000ef2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000efe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_RCC_OscConfig+0x2e4>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f12:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f16:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f1a:	fa92 f2a2 	rbit	r2, r2
 8000f1e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000f22:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f26:	fab2 f282 	clz	r2, r2
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	f042 0220 	orr.w	r2, r2, #32
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	f002 021f 	and.w	r2, r2, #31
 8000f36:	2101      	movs	r1, #1
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1ab      	bne.n	8000e9a <HAL_RCC_OscConfig+0x23a>
 8000f42:	e002      	b.n	8000f4a <HAL_RCC_OscConfig+0x2ea>
 8000f44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 8170 	beq.w	800123a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f5a:	4bd0      	ldr	r3, [pc, #832]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f66:	4bcd      	ldr	r3, [pc, #820]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d16d      	bne.n	800104e <HAL_RCC_OscConfig+0x3ee>
 8000f72:	4bca      	ldr	r3, [pc, #808]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f7e:	d166      	bne.n	800104e <HAL_RCC_OscConfig+0x3ee>
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000f92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d102      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x350>
 8000faa:	4bbc      	ldr	r3, [pc, #752]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	e013      	b.n	8000fd8 <HAL_RCC_OscConfig+0x378>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000fba:	fa93 f3a3 	rbit	r3, r3
 8000fbe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fd4:	4bb1      	ldr	r3, [pc, #708]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000fde:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000fe2:	fa92 f2a2 	rbit	r2, r2
 8000fe6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000fea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fee:	fab2 f282 	clz	r2, r2
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	f042 0220 	orr.w	r2, r2, #32
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	f002 021f 	and.w	r2, r2, #31
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	4013      	ands	r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <HAL_RCC_OscConfig+0x3ba>
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d002      	beq.n	800101a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	f000 bd31 	b.w	8001a7c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	21f8      	movs	r1, #248	; 0xf8
 800102a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001032:	fa91 f1a1 	rbit	r1, r1
 8001036:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800103a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800103e:	fab1 f181 	clz	r1, r1
 8001042:	b2c9      	uxtb	r1, r1
 8001044:	408b      	lsls	r3, r1
 8001046:	4995      	ldr	r1, [pc, #596]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104c:	e0f5      	b.n	800123a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8085 	beq.w	8001164 <HAL_RCC_OscConfig+0x504>
 800105a:	2301      	movs	r3, #1
 800105c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800106c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800107a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	461a      	mov	r2, r3
 8001082:	2301      	movs	r3, #1
 8001084:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fb03 	bl	8000690 <HAL_GetTick>
 800108a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108e:	e00a      	b.n	80010a6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001090:	f7ff fafe 	bl	8000690 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d902      	bls.n	80010a6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	f000 bceb 	b.w	8001a7c <HAL_RCC_OscConfig+0xe1c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80010b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d102      	bne.n	80010d6 <HAL_RCC_OscConfig+0x476>
 80010d0:	4b72      	ldr	r3, [pc, #456]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	e013      	b.n	80010fe <HAL_RCC_OscConfig+0x49e>
 80010d6:	2302      	movs	r3, #2
 80010d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010fa:	4b68      	ldr	r3, [pc, #416]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	2202      	movs	r2, #2
 8001100:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001104:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001108:	fa92 f2a2 	rbit	r2, r2
 800110c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001110:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001114:	fab2 f282 	clz	r2, r2
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	f042 0220 	orr.w	r2, r2, #32
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	f002 021f 	and.w	r2, r2, #31
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0af      	beq.n	8001090 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b5a      	ldr	r3, [pc, #360]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	21f8      	movs	r1, #248	; 0xf8
 8001140:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001148:	fa91 f1a1 	rbit	r1, r1
 800114c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001150:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001154:	fab1 f181 	clz	r1, r1
 8001158:	b2c9      	uxtb	r1, r1
 800115a:	408b      	lsls	r3, r1
 800115c:	494f      	ldr	r1, [pc, #316]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
 8001162:	e06a      	b.n	800123a <HAL_RCC_OscConfig+0x5da>
 8001164:	2301      	movs	r3, #1
 8001166:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001176:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001184:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	461a      	mov	r2, r3
 800118c:	2300      	movs	r3, #0
 800118e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fa7e 	bl	8000690 <HAL_GetTick>
 8001194:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001198:	e00a      	b.n	80011b0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff fa79 	bl	8000690 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d902      	bls.n	80011b0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	f000 bc66 	b.w	8001a7c <HAL_RCC_OscConfig+0xe1c>
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80011c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	095b      	lsrs	r3, r3, #5
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d102      	bne.n	80011e0 <HAL_RCC_OscConfig+0x580>
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	e013      	b.n	8001208 <HAL_RCC_OscConfig+0x5a8>
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_RCC_OscConfig+0x63c>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	2202      	movs	r2, #2
 800120a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800120e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001212:	fa92 f2a2 	rbit	r2, r2
 8001216:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800121a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800121e:	fab2 f282 	clz	r2, r2
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	f042 0220 	orr.w	r2, r2, #32
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f002 021f 	and.w	r2, r2, #31
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1af      	bne.n	800119a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80da 	beq.w	80013fe <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d069      	beq.n	8001328 <HAL_RCC_OscConfig+0x6c8>
 8001254:	2301      	movs	r3, #1
 8001256:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001266:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x640>)
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	461a      	mov	r2, r3
 800127a:	2301      	movs	r3, #1
 800127c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fa07 	bl	8000690 <HAL_GetTick>
 8001282:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e00d      	b.n	80012a4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fa02 	bl	8000690 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d905      	bls.n	80012a4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e3ef      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
 800129c:	40021000 	.word	0x40021000
 80012a0:	10908120 	.word	0x10908120
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012ae:	fa93 f2a3 	rbit	r2, r3
 80012b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80012bc:	2202      	movs	r2, #2
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	fa93 f2a3 	rbit	r2, r3
 80012ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012d4:	2202      	movs	r2, #2
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	fa93 f2a3 	rbit	r2, r3
 80012e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e8:	4ba4      	ldr	r3, [pc, #656]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80012ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012f0:	2102      	movs	r1, #2
 80012f2:	6019      	str	r1, [r3, #0]
 80012f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	fa93 f1a3 	rbit	r1, r3
 80012fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001302:	6019      	str	r1, [r3, #0]
  return result;
 8001304:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0b0      	beq.n	8001288 <HAL_RCC_OscConfig+0x628>
 8001326:	e06a      	b.n	80013fe <HAL_RCC_OscConfig+0x79e>
 8001328:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001330:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	fa93 f2a3 	rbit	r2, r3
 800133a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800133e:	601a      	str	r2, [r3, #0]
  return result;
 8001340:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001344:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	4b8c      	ldr	r3, [pc, #560]	; (8001580 <HAL_RCC_OscConfig+0x920>)
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	461a      	mov	r2, r3
 8001356:	2300      	movs	r3, #0
 8001358:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff f999 	bl	8000690 <HAL_GetTick>
 800135e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001362:	e009      	b.n	8001378 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff f994 	bl	8000690 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e381      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
 8001378:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800137c:	2202      	movs	r2, #2
 800137e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001380:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	fa93 f2a3 	rbit	r2, r3
 800138a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001394:	2202      	movs	r2, #2
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f2a3 	rbit	r2, r3
 80013a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ac:	2202      	movs	r2, #2
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	fa93 f2a3 	rbit	r2, r3
 80013ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b6e      	ldr	r3, [pc, #440]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80013c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013c8:	2102      	movs	r1, #2
 80013ca:	6019      	str	r1, [r3, #0]
 80013cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fa93 f1a3 	rbit	r1, r3
 80013d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013da:	6019      	str	r1, [r3, #0]
  return result;
 80013dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1b2      	bne.n	8001364 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8157 	beq.w	80016bc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001414:	4b59      	ldr	r3, [pc, #356]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d112      	bne.n	8001446 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	4a55      	ldr	r2, [pc, #340]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	61d3      	str	r3, [r2, #28]
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001440:	2301      	movs	r3, #1
 8001442:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <HAL_RCC_OscConfig+0x924>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11a      	bne.n	8001488 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001452:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <HAL_RCC_OscConfig+0x924>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <HAL_RCC_OscConfig+0x924>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff f917 	bl	8000690 <HAL_GetTick>
 8001462:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	e009      	b.n	800147c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001468:	f7ff f912 	bl	8000690 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b64      	cmp	r3, #100	; 0x64
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e2ff      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_RCC_OscConfig+0x924>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ef      	beq.n	8001468 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x840>
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a39      	ldr	r2, [pc, #228]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	e02f      	b.n	8001500 <HAL_RCC_OscConfig+0x8a0>
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x864>
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a33      	ldr	r2, [pc, #204]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6213      	str	r3, [r2, #32]
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0x8a0>
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x888>
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a2a      	ldr	r2, [pc, #168]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6213      	str	r3, [r2, #32]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x8a0>
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a23      	ldr	r2, [pc, #140]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a20      	ldr	r2, [pc, #128]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 80014fa:	f023 0304 	bic.w	r3, r3, #4
 80014fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d06a      	beq.n	80015e0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7ff f8c1 	bl	8000690 <HAL_GetTick>
 800150e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff f8bc 	bl	8000690 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e2a7      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
 800152c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001530:	2202      	movs	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001534:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fa93 f2a3 	rbit	r2, r3
 800153e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001548:	2202      	movs	r2, #2
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	fa93 f2a3 	rbit	r2, r3
 8001556:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800155a:	601a      	str	r2, [r3, #0]
  return result;
 800155c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001560:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	fab3 f383 	clz	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	095b      	lsrs	r3, r3, #5
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d108      	bne.n	8001588 <HAL_RCC_OscConfig+0x928>
 8001576:	4b01      	ldr	r3, [pc, #4]	; (800157c <HAL_RCC_OscConfig+0x91c>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	e013      	b.n	80015a4 <HAL_RCC_OscConfig+0x944>
 800157c:	40021000 	.word	0x40021000
 8001580:	10908120 	.word	0x10908120
 8001584:	40007000 	.word	0x40007000
 8001588:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800158c:	2202      	movs	r2, #2
 800158e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	fa93 f2a3 	rbit	r2, r3
 800159a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	4bc0      	ldr	r3, [pc, #768]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80015a8:	2102      	movs	r1, #2
 80015aa:	6011      	str	r1, [r2, #0]
 80015ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	fa92 f1a2 	rbit	r1, r2
 80015b6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015ba:	6011      	str	r1, [r2, #0]
  return result;
 80015bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	fab2 f282 	clz	r2, r2
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	f002 021f 	and.w	r2, r2, #31
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d09a      	beq.n	8001514 <HAL_RCC_OscConfig+0x8b4>
 80015de:	e063      	b.n	80016a8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff f856 	bl	8000690 <HAL_GetTick>
 80015e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	e00b      	b.n	8001602 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff f851 	bl	8000690 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e23c      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
 8001602:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001606:	2202      	movs	r2, #2
 8001608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	fa93 f2a3 	rbit	r2, r3
 8001614:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800161e:	2202      	movs	r2, #2
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fa93 f2a3 	rbit	r2, r3
 800162c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001630:	601a      	str	r2, [r3, #0]
  return result;
 8001632:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001636:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d102      	bne.n	8001652 <HAL_RCC_OscConfig+0x9f2>
 800164c:	4b95      	ldr	r3, [pc, #596]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	e00d      	b.n	800166e <HAL_RCC_OscConfig+0xa0e>
 8001652:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001656:	2202      	movs	r2, #2
 8001658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	4b8e      	ldr	r3, [pc, #568]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001672:	2102      	movs	r1, #2
 8001674:	6011      	str	r1, [r2, #0]
 8001676:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	fa92 f1a2 	rbit	r1, r2
 8001680:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001684:	6011      	str	r1, [r2, #0]
  return result;
 8001686:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	fab2 f282 	clz	r2, r2
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	f002 021f 	and.w	r2, r2, #31
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f202 	lsl.w	r2, r1, r2
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1a0      	bne.n	80015ea <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016a8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d105      	bne.n	80016bc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4b7c      	ldr	r3, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	4a7b      	ldr	r2, [pc, #492]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 80016b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 81d9 	beq.w	8001a7a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	f000 81a6 	beq.w	8001a22 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	f040 811e 	bne.w	800191e <HAL_RCC_OscConfig+0xcbe>
 80016e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016fa:	601a      	str	r2, [r3, #0]
  return result;
 80016fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001700:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800170c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	461a      	mov	r2, r3
 8001714:	2300      	movs	r3, #0
 8001716:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7fe ffba 	bl	8000690 <HAL_GetTick>
 800171c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001720:	e009      	b.n	8001736 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001722:	f7fe ffb5 	bl	8000690 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1a2      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
 8001736:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800173a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800173e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800174e:	601a      	str	r2, [r3, #0]
  return result;
 8001750:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001754:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <HAL_RCC_OscConfig+0xb10>
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e01b      	b.n	80017a8 <HAL_RCC_OscConfig+0xb48>
 8001770:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800178e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80017ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017b0:	6011      	str	r1, [r2, #0]
 80017b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	fa92 f1a2 	rbit	r1, r2
 80017bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017c0:	6011      	str	r1, [r2, #0]
  return result;
 80017c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	fab2 f282 	clz	r2, r2
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	f042 0220 	orr.w	r2, r2, #32
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	f002 021f 	and.w	r2, r2, #31
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d19e      	bne.n	8001722 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	f023 020f 	bic.w	r2, r3, #15
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	492c      	ldr	r1, [pc, #176]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6a19      	ldr	r1, [r3, #32]
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	430b      	orrs	r3, r1
 800180e:	4925      	ldr	r1, [pc, #148]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
 8001814:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800181c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800182c:	601a      	str	r2, [r3, #0]
  return result;
 800182e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001832:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800183e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	461a      	mov	r2, r3
 8001846:	2301      	movs	r3, #1
 8001848:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7fe ff21 	bl	8000690 <HAL_GetTick>
 800184e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001852:	e009      	b.n	8001868 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001854:	f7fe ff1c 	bl	8000690 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e109      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
 8001868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800186c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fa93 f2a3 	rbit	r2, r3
 800187c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001880:	601a      	str	r2, [r3, #0]
  return result;
 8001882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001886:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0xc48>
 800189c:	4b01      	ldr	r3, [pc, #4]	; (80018a4 <HAL_RCC_OscConfig+0xc44>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	e01e      	b.n	80018e0 <HAL_RCC_OscConfig+0xc80>
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fa93 f2a3 	rbit	r2, r3
 80018d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0xe28>)
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018e8:	6011      	str	r1, [r2, #0]
 80018ea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	fa92 f1a2 	rbit	r1, r2
 80018f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018f8:	6011      	str	r1, [r2, #0]
  return result;
 80018fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	fab2 f282 	clz	r2, r2
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f042 0220 	orr.w	r2, r2, #32
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f002 021f 	and.w	r2, r2, #31
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d09b      	beq.n	8001854 <HAL_RCC_OscConfig+0xbf4>
 800191c:	e0ad      	b.n	8001a7a <HAL_RCC_OscConfig+0xe1a>
 800191e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001922:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	fa93 f2a3 	rbit	r2, r3
 8001932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001936:	601a      	str	r2, [r3, #0]
  return result;
 8001938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800193c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	461a      	mov	r2, r3
 8001950:	2300      	movs	r3, #0
 8001952:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7fe fe9c 	bl	8000690 <HAL_GetTick>
 8001958:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	e009      	b.n	8001972 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7fe fe97 	bl	8000690 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e084      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800197a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f2a3 	rbit	r2, r3
 8001986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198a:	601a      	str	r2, [r3, #0]
  return result;
 800198c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001990:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	095b      	lsrs	r3, r3, #5
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <HAL_RCC_OscConfig+0xd4c>
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_RCC_OscConfig+0xe28>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	e01b      	b.n	80019e4 <HAL_RCC_OscConfig+0xd84>
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_RCC_OscConfig+0xe28>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f107 0214 	add.w	r2, r7, #20
 80019e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ec:	6011      	str	r1, [r2, #0]
 80019ee:	f107 0214 	add.w	r2, r7, #20
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	fa92 f1a2 	rbit	r1, r2
 80019f8:	f107 0210 	add.w	r2, r7, #16
 80019fc:	6011      	str	r1, [r2, #0]
  return result;
 80019fe:	f107 0210 	add.w	r2, r7, #16
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f002 021f 	and.w	r2, r2, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d19e      	bne.n	800195e <HAL_RCC_OscConfig+0xcfe>
 8001a20:	e02b      	b.n	8001a7a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e025      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_RCC_OscConfig+0xe28>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_RCC_OscConfig+0xe28>)
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a44:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d111      	bne.n	8001a76 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d108      	bne.n	8001a76 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001a64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a68:	f003 020f 	and.w	r2, r3, #15
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b09e      	sub	sp, #120	; 0x78
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e162      	b.n	8001d6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b90      	ldr	r3, [pc, #576]	; (8001ce8 <HAL_RCC_ClockConfig+0x25c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d910      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b8d      	ldr	r3, [pc, #564]	; (8001ce8 <HAL_RCC_ClockConfig+0x25c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0207 	bic.w	r2, r3, #7
 8001aba:	498b      	ldr	r1, [pc, #556]	; (8001ce8 <HAL_RCC_ClockConfig+0x25c>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b89      	ldr	r3, [pc, #548]	; (8001ce8 <HAL_RCC_ClockConfig+0x25c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e14a      	b.n	8001d6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b82      	ldr	r3, [pc, #520]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	497f      	ldr	r1, [pc, #508]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80dc 	beq.w	8001cb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d13c      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xf6>
 8001b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xa6>
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	e00f      	b.n	8001b52 <HAL_RCC_ClockConfig+0xc6>
 8001b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b44:	663b      	str	r3, [r7, #96]	; 0x60
 8001b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b56:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b5a:	fa92 f2a2 	rbit	r2, r2
 8001b5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b62:	fab2 f282 	clz	r2, r2
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	f042 0220 	orr.w	r2, r2, #32
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f002 021f 	and.w	r2, r2, #31
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f202 	lsl.w	r2, r1, r2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d17b      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0f3      	b.n	8001d6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d13c      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x178>
 8001b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x128>
 8001bae:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
 8001bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8001bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bdc:	fa92 f2a2 	rbit	r2, r2
 8001be0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001be4:	fab2 f282 	clz	r2, r2
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f042 0220 	orr.w	r2, r2, #32
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f002 021f 	and.w	r2, r2, #31
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d13a      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b2      	b.n	8001d6a <HAL_RCC_ClockConfig+0x2de>
 8001c04:	2302      	movs	r3, #2
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	095b      	lsrs	r3, r3, #5
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x1a0>
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e00d      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1bc>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	2302      	movs	r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	2202      	movs	r2, #2
 8001c4a:	61ba      	str	r2, [r7, #24]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	fa92 f2a2 	rbit	r2, r2
 8001c52:	617a      	str	r2, [r7, #20]
  return result;
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	fab2 f282 	clz	r2, r2
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e079      	b.n	8001d6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f023 0203 	bic.w	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	491a      	ldr	r1, [pc, #104]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c88:	f7fe fd02 	bl	8000690 <HAL_GetTick>
 8001c8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7fe fcfe 	bl	8000690 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e061      	b.n	8001d6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 020c 	and.w	r2, r3, #12
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d1eb      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_ClockConfig+0x25c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d214      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_RCC_ClockConfig+0x25c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <HAL_RCC_ClockConfig+0x25c>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_RCC_ClockConfig+0x25c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e040      	b.n	8001d6a <HAL_RCC_ClockConfig+0x2de>
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_ClockConfig+0x2e8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	491a      	ldr	r1, [pc, #104]	; (8001d74 <HAL_RCC_ClockConfig+0x2e8>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_RCC_ClockConfig+0x2e8>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4912      	ldr	r1, [pc, #72]	; (8001d74 <HAL_RCC_ClockConfig+0x2e8>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d2e:	f000 f829 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001d32:	4601      	mov	r1, r0
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_RCC_ClockConfig+0x2e8>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d3c:	22f0      	movs	r2, #240	; 0xf0
 8001d3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	fa92 f2a2 	rbit	r2, r2
 8001d46:	60fa      	str	r2, [r7, #12]
  return result;
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	40d3      	lsrs	r3, r2
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x2ec>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	fa21 f303 	lsr.w	r3, r1, r3
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_RCC_ClockConfig+0x2f0>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_RCC_ClockConfig+0x2f4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fc50 	bl	8000608 <HAL_InitTick>
  
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3778      	adds	r7, #120	; 0x78
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08002b38 	.word	0x08002b38
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000004 	.word	0x20000004

08001d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b08b      	sub	sp, #44	; 0x2c
 8001d88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x36>
 8001db2:	e03f      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001db6:	623b      	str	r3, [r7, #32]
      break;
 8001db8:	e03f      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dc0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	fa92 f2a2 	rbit	r2, r2
 8001dcc:	607a      	str	r2, [r7, #4]
  return result;
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	40d3      	lsrs	r3, r2
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	220f      	movs	r2, #15
 8001de8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	fa92 f2a2 	rbit	r2, r2
 8001df0:	60fa      	str	r2, [r7, #12]
  return result;
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	40d3      	lsrs	r3, r2
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	e007      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	623b      	str	r3, [r7, #32]
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e36:	623b      	str	r3, [r7, #32]
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	372c      	adds	r7, #44	; 0x2c
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	007a1200 	.word	0x007a1200
 8001e50:	08002b50 	.word	0x08002b50
 8001e54:	08002b60 	.word	0x08002b60

08001e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e76:	f7ff ffef 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	fa92 f2a2 	rbit	r2, r2
 8001e90:	603a      	str	r2, [r7, #0]
  return result;
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	fab2 f282 	clz	r2, r2
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	40d3      	lsrs	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08002b48 	.word	0x08002b48

08001eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001eba:	f7ff ffcd 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ec8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ecc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	603a      	str	r2, [r7, #0]
  return result;
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	40d3      	lsrs	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08002b48 	.word	0x08002b48

08001ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b092      	sub	sp, #72	; 0x48
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80d7 	beq.w	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10e      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	61d3      	str	r3, [r2, #28]
 8001f34:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f46:	4b45      	ldr	r3, [pc, #276]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f52:	4b42      	ldr	r3, [pc, #264]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a41      	ldr	r2, [pc, #260]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fb97 	bl	8000690 <HAL_GetTick>
 8001f62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7fe fb93 	bl	8000690 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1d6      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8084 	beq.w	800209e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d07c      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2301      	movs	r3, #1
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ff6:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ffa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d04b      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fb43 	bl	8000690 <HAL_GetTick>
 800200a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	e00a      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fb3f 	bl	8000690 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e180      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002024:	2302      	movs	r3, #2
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	2302      	movs	r3, #2
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	61fb      	str	r3, [r7, #28]
  return result;
 800203c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d108      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002052:	4b01      	ldr	r3, [pc, #4]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	e00d      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002058:	40021000 	.word	0x40021000
 800205c:	40007000 	.word	0x40007000
 8002060:	10908100 	.word	0x10908100
 8002064:	2302      	movs	r3, #2
 8002066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	4ba0      	ldr	r3, [pc, #640]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2202      	movs	r2, #2
 8002076:	613a      	str	r2, [r7, #16]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	fa92 f2a2 	rbit	r2, r2
 800207e:	60fa      	str	r2, [r7, #12]
  return result;
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0b7      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800209e:	4b95      	ldr	r3, [pc, #596]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4992      	ldr	r1, [pc, #584]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d105      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b8:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	4a8d      	ldr	r2, [pc, #564]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d0:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f023 0203 	bic.w	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4985      	ldr	r1, [pc, #532]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ee:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	497e      	ldr	r1, [pc, #504]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800210c:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	4976      	ldr	r1, [pc, #472]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800212a:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f023 0210 	bic.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	496f      	ldr	r1, [pc, #444]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002148:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002154:	4967      	ldr	r1, [pc, #412]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f023 0220 	bic.w	r2, r3, #32
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4960      	ldr	r1, [pc, #384]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002174:	4313      	orrs	r3, r2
 8002176:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002184:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	4958      	ldr	r1, [pc, #352]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a2:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4951      	ldr	r1, [pc, #324]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4949      	ldr	r1, [pc, #292]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021de:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4942      	ldr	r1, [pc, #264]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021fc:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	493a      	ldr	r1, [pc, #232]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	4933      	ldr	r1, [pc, #204]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	492b      	ldr	r1, [pc, #172]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4924      	ldr	r1, [pc, #144]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	491c      	ldr	r1, [pc, #112]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002292:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	4915      	ldr	r1, [pc, #84]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	490d      	ldr	r1, [pc, #52]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022da:	4906      	ldr	r1, [pc, #24]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00c      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80022ec:	4b01      	ldr	r3, [pc, #4]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	e002      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	490b      	ldr	r1, [pc, #44]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002302:	4313      	orrs	r3, r2
 8002304:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231e:	4904      	ldr	r1, [pc, #16]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002320:	4313      	orrs	r3, r2
 8002322:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3748      	adds	r7, #72	; 0x48
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e040      	b.n	80023c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe f890 	bl	800047c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f82c 	bl	80023d0 <UART_SetConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e022      	b.n	80023c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa3a 	bl	8002804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800239e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fac1 	bl	8002948 <UART_CheckIdleState>
 80023c6:	4603      	mov	r3, r0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4bac      	ldr	r3, [pc, #688]	; (80026b0 <UART_SetConfig+0x2e0>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	430b      	orrs	r3, r1
 800240a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	430a      	orrs	r2, r1
 8002444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a9a      	ldr	r2, [pc, #616]	; (80026b4 <UART_SetConfig+0x2e4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d121      	bne.n	8002494 <UART_SetConfig+0xc4>
 8002450:	4b99      	ldr	r3, [pc, #612]	; (80026b8 <UART_SetConfig+0x2e8>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b03      	cmp	r3, #3
 800245a:	d817      	bhi.n	800248c <UART_SetConfig+0xbc>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <UART_SetConfig+0x94>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002475 	.word	0x08002475
 8002468:	08002481 	.word	0x08002481
 800246c:	08002487 	.word	0x08002487
 8002470:	0800247b 	.word	0x0800247b
 8002474:	2301      	movs	r3, #1
 8002476:	77fb      	strb	r3, [r7, #31]
 8002478:	e0b2      	b.n	80025e0 <UART_SetConfig+0x210>
 800247a:	2302      	movs	r3, #2
 800247c:	77fb      	strb	r3, [r7, #31]
 800247e:	e0af      	b.n	80025e0 <UART_SetConfig+0x210>
 8002480:	2304      	movs	r3, #4
 8002482:	77fb      	strb	r3, [r7, #31]
 8002484:	e0ac      	b.n	80025e0 <UART_SetConfig+0x210>
 8002486:	2308      	movs	r3, #8
 8002488:	77fb      	strb	r3, [r7, #31]
 800248a:	e0a9      	b.n	80025e0 <UART_SetConfig+0x210>
 800248c:	2310      	movs	r3, #16
 800248e:	77fb      	strb	r3, [r7, #31]
 8002490:	bf00      	nop
 8002492:	e0a5      	b.n	80025e0 <UART_SetConfig+0x210>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a88      	ldr	r2, [pc, #544]	; (80026bc <UART_SetConfig+0x2ec>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d123      	bne.n	80024e6 <UART_SetConfig+0x116>
 800249e:	4b86      	ldr	r3, [pc, #536]	; (80026b8 <UART_SetConfig+0x2e8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024aa:	d012      	beq.n	80024d2 <UART_SetConfig+0x102>
 80024ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b0:	d802      	bhi.n	80024b8 <UART_SetConfig+0xe8>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <UART_SetConfig+0xf6>
 80024b6:	e012      	b.n	80024de <UART_SetConfig+0x10e>
 80024b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024bc:	d00c      	beq.n	80024d8 <UART_SetConfig+0x108>
 80024be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024c2:	d003      	beq.n	80024cc <UART_SetConfig+0xfc>
 80024c4:	e00b      	b.n	80024de <UART_SetConfig+0x10e>
 80024c6:	2300      	movs	r3, #0
 80024c8:	77fb      	strb	r3, [r7, #31]
 80024ca:	e089      	b.n	80025e0 <UART_SetConfig+0x210>
 80024cc:	2302      	movs	r3, #2
 80024ce:	77fb      	strb	r3, [r7, #31]
 80024d0:	e086      	b.n	80025e0 <UART_SetConfig+0x210>
 80024d2:	2304      	movs	r3, #4
 80024d4:	77fb      	strb	r3, [r7, #31]
 80024d6:	e083      	b.n	80025e0 <UART_SetConfig+0x210>
 80024d8:	2308      	movs	r3, #8
 80024da:	77fb      	strb	r3, [r7, #31]
 80024dc:	e080      	b.n	80025e0 <UART_SetConfig+0x210>
 80024de:	2310      	movs	r3, #16
 80024e0:	77fb      	strb	r3, [r7, #31]
 80024e2:	bf00      	nop
 80024e4:	e07c      	b.n	80025e0 <UART_SetConfig+0x210>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	; (80026c0 <UART_SetConfig+0x2f0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d123      	bne.n	8002538 <UART_SetConfig+0x168>
 80024f0:	4b71      	ldr	r3, [pc, #452]	; (80026b8 <UART_SetConfig+0x2e8>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80024f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024fc:	d012      	beq.n	8002524 <UART_SetConfig+0x154>
 80024fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002502:	d802      	bhi.n	800250a <UART_SetConfig+0x13a>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <UART_SetConfig+0x148>
 8002508:	e012      	b.n	8002530 <UART_SetConfig+0x160>
 800250a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800250e:	d00c      	beq.n	800252a <UART_SetConfig+0x15a>
 8002510:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002514:	d003      	beq.n	800251e <UART_SetConfig+0x14e>
 8002516:	e00b      	b.n	8002530 <UART_SetConfig+0x160>
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
 800251c:	e060      	b.n	80025e0 <UART_SetConfig+0x210>
 800251e:	2302      	movs	r3, #2
 8002520:	77fb      	strb	r3, [r7, #31]
 8002522:	e05d      	b.n	80025e0 <UART_SetConfig+0x210>
 8002524:	2304      	movs	r3, #4
 8002526:	77fb      	strb	r3, [r7, #31]
 8002528:	e05a      	b.n	80025e0 <UART_SetConfig+0x210>
 800252a:	2308      	movs	r3, #8
 800252c:	77fb      	strb	r3, [r7, #31]
 800252e:	e057      	b.n	80025e0 <UART_SetConfig+0x210>
 8002530:	2310      	movs	r3, #16
 8002532:	77fb      	strb	r3, [r7, #31]
 8002534:	bf00      	nop
 8002536:	e053      	b.n	80025e0 <UART_SetConfig+0x210>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a61      	ldr	r2, [pc, #388]	; (80026c4 <UART_SetConfig+0x2f4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d123      	bne.n	800258a <UART_SetConfig+0x1ba>
 8002542:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <UART_SetConfig+0x2e8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800254a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800254e:	d012      	beq.n	8002576 <UART_SetConfig+0x1a6>
 8002550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002554:	d802      	bhi.n	800255c <UART_SetConfig+0x18c>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <UART_SetConfig+0x19a>
 800255a:	e012      	b.n	8002582 <UART_SetConfig+0x1b2>
 800255c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002560:	d00c      	beq.n	800257c <UART_SetConfig+0x1ac>
 8002562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002566:	d003      	beq.n	8002570 <UART_SetConfig+0x1a0>
 8002568:	e00b      	b.n	8002582 <UART_SetConfig+0x1b2>
 800256a:	2300      	movs	r3, #0
 800256c:	77fb      	strb	r3, [r7, #31]
 800256e:	e037      	b.n	80025e0 <UART_SetConfig+0x210>
 8002570:	2302      	movs	r3, #2
 8002572:	77fb      	strb	r3, [r7, #31]
 8002574:	e034      	b.n	80025e0 <UART_SetConfig+0x210>
 8002576:	2304      	movs	r3, #4
 8002578:	77fb      	strb	r3, [r7, #31]
 800257a:	e031      	b.n	80025e0 <UART_SetConfig+0x210>
 800257c:	2308      	movs	r3, #8
 800257e:	77fb      	strb	r3, [r7, #31]
 8002580:	e02e      	b.n	80025e0 <UART_SetConfig+0x210>
 8002582:	2310      	movs	r3, #16
 8002584:	77fb      	strb	r3, [r7, #31]
 8002586:	bf00      	nop
 8002588:	e02a      	b.n	80025e0 <UART_SetConfig+0x210>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <UART_SetConfig+0x2f8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d123      	bne.n	80025dc <UART_SetConfig+0x20c>
 8002594:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <UART_SetConfig+0x2e8>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800259c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a0:	d012      	beq.n	80025c8 <UART_SetConfig+0x1f8>
 80025a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a6:	d802      	bhi.n	80025ae <UART_SetConfig+0x1de>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <UART_SetConfig+0x1ec>
 80025ac:	e012      	b.n	80025d4 <UART_SetConfig+0x204>
 80025ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b2:	d00c      	beq.n	80025ce <UART_SetConfig+0x1fe>
 80025b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025b8:	d003      	beq.n	80025c2 <UART_SetConfig+0x1f2>
 80025ba:	e00b      	b.n	80025d4 <UART_SetConfig+0x204>
 80025bc:	2300      	movs	r3, #0
 80025be:	77fb      	strb	r3, [r7, #31]
 80025c0:	e00e      	b.n	80025e0 <UART_SetConfig+0x210>
 80025c2:	2302      	movs	r3, #2
 80025c4:	77fb      	strb	r3, [r7, #31]
 80025c6:	e00b      	b.n	80025e0 <UART_SetConfig+0x210>
 80025c8:	2304      	movs	r3, #4
 80025ca:	77fb      	strb	r3, [r7, #31]
 80025cc:	e008      	b.n	80025e0 <UART_SetConfig+0x210>
 80025ce:	2308      	movs	r3, #8
 80025d0:	77fb      	strb	r3, [r7, #31]
 80025d2:	e005      	b.n	80025e0 <UART_SetConfig+0x210>
 80025d4:	2310      	movs	r3, #16
 80025d6:	77fb      	strb	r3, [r7, #31]
 80025d8:	bf00      	nop
 80025da:	e001      	b.n	80025e0 <UART_SetConfig+0x210>
 80025dc:	2310      	movs	r3, #16
 80025de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e8:	f040 8090 	bne.w	800270c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80025ec:	7ffb      	ldrb	r3, [r7, #31]
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d86c      	bhi.n	80026cc <UART_SetConfig+0x2fc>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <UART_SetConfig+0x228>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	0800261d 	.word	0x0800261d
 80025fc:	0800263d 	.word	0x0800263d
 8002600:	0800265d 	.word	0x0800265d
 8002604:	080026cd 	.word	0x080026cd
 8002608:	08002679 	.word	0x08002679
 800260c:	080026cd 	.word	0x080026cd
 8002610:	080026cd 	.word	0x080026cd
 8002614:	080026cd 	.word	0x080026cd
 8002618:	08002699 	.word	0x08002699
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800261c:	f7ff fc28 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002620:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	005a      	lsls	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	b29b      	uxth	r3, r3
 8002638:	61bb      	str	r3, [r7, #24]
        break;
 800263a:	e04a      	b.n	80026d2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800263c:	f7ff fc3a 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 8002640:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	005a      	lsls	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	b29b      	uxth	r3, r3
 8002658:	61bb      	str	r3, [r7, #24]
        break;
 800265a:	e03a      	b.n	80026d2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002666:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6852      	ldr	r2, [r2, #4]
 800266e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	61bb      	str	r3, [r7, #24]
        break;
 8002676:	e02c      	b.n	80026d2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002678:	f7ff fb84 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 800267c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	005a      	lsls	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	441a      	add	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	b29b      	uxth	r3, r3
 8002694:	61bb      	str	r3, [r7, #24]
        break;
 8002696:	e01c      	b.n	80026d2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	61bb      	str	r3, [r7, #24]
        break;
 80026ae:	e010      	b.n	80026d2 <UART_SetConfig+0x302>
 80026b0:	efff69f3 	.word	0xefff69f3
 80026b4:	40013800 	.word	0x40013800
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40004400 	.word	0x40004400
 80026c0:	40004800 	.word	0x40004800
 80026c4:	40004c00 	.word	0x40004c00
 80026c8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	75fb      	strb	r3, [r7, #23]
        break;
 80026d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d916      	bls.n	8002706 <UART_SetConfig+0x336>
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026de:	d212      	bcs.n	8002706 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f023 030f 	bic.w	r3, r3, #15
 80026e8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	897b      	ldrh	r3, [r7, #10]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	897a      	ldrh	r2, [r7, #10]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	e072      	b.n	80027ec <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
 800270a:	e06f      	b.n	80027ec <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800270c:	7ffb      	ldrb	r3, [r7, #31]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d85b      	bhi.n	80027ca <UART_SetConfig+0x3fa>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <UART_SetConfig+0x348>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	0800273d 	.word	0x0800273d
 800271c:	0800275b 	.word	0x0800275b
 8002720:	08002779 	.word	0x08002779
 8002724:	080027cb 	.word	0x080027cb
 8002728:	08002795 	.word	0x08002795
 800272c:	080027cb 	.word	0x080027cb
 8002730:	080027cb 	.word	0x080027cb
 8002734:	080027cb 	.word	0x080027cb
 8002738:	080027b3 	.word	0x080027b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800273c:	f7ff fb98 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002740:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	085a      	lsrs	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	441a      	add	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	b29b      	uxth	r3, r3
 8002756:	61bb      	str	r3, [r7, #24]
        break;
 8002758:	e03a      	b.n	80027d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800275a:	f7ff fbab 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 800275e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	085a      	lsrs	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	441a      	add	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	b29b      	uxth	r3, r3
 8002774:	61bb      	str	r3, [r7, #24]
        break;
 8002776:	e02b      	b.n	80027d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002782:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6852      	ldr	r2, [r2, #4]
 800278a:	fbb3 f3f2 	udiv	r3, r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	61bb      	str	r3, [r7, #24]
        break;
 8002792:	e01d      	b.n	80027d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002794:	f7ff faf6 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8002798:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	085a      	lsrs	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	441a      	add	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	61bb      	str	r3, [r7, #24]
        break;
 80027b0:	e00e      	b.n	80027d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	61bb      	str	r3, [r7, #24]
        break;
 80027c8:	e002      	b.n	80027d0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
        break;
 80027ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	d908      	bls.n	80027e8 <UART_SetConfig+0x418>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d204      	bcs.n	80027e8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	e001      	b.n	80027ec <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop

08002804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01a      	beq.n	800291a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002902:	d10a      	bne.n	800291a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
  }
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002956:	f7fd fe9b 	bl	8000690 <HAL_GetTick>
 800295a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d10e      	bne.n	8002988 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800296a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f82a 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e020      	b.n	80029ca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b04      	cmp	r3, #4
 8002994:	d10e      	bne.n	80029b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002996:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f814 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e00a      	b.n	80029ca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e2:	e05d      	b.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d059      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ec:	f7fd fe50 	bl	8000690 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d302      	bcc.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11b      	bne.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e042      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d02b      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a56:	d123      	bne.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a60:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e00f      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d092      	beq.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4e0d      	ldr	r6, [pc, #52]	; (8002b00 <__libc_init_array+0x38>)
 8002acc:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <__libc_init_array+0x3c>)
 8002ace:	1ba4      	subs	r4, r4, r6
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	42a5      	cmp	r5, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	4e0b      	ldr	r6, [pc, #44]	; (8002b08 <__libc_init_array+0x40>)
 8002ada:	4c0c      	ldr	r4, [pc, #48]	; (8002b0c <__libc_init_array+0x44>)
 8002adc:	f000 f820 	bl	8002b20 <_init>
 8002ae0:	1ba4      	subs	r4, r4, r6
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	2500      	movs	r5, #0
 8002ae6:	42a5      	cmp	r5, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002af0:	4798      	blx	r3
 8002af2:	3501      	adds	r5, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002afa:	4798      	blx	r3
 8002afc:	3501      	adds	r5, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	08002b70 	.word	0x08002b70
 8002b04:	08002b70 	.word	0x08002b70
 8002b08:	08002b70 	.word	0x08002b70
 8002b0c:	08002b74 	.word	0x08002b74

08002b10 <memset>:
 8002b10:	4402      	add	r2, r0
 8002b12:	4603      	mov	r3, r0
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d100      	bne.n	8002b1a <memset+0xa>
 8002b18:	4770      	bx	lr
 8002b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1e:	e7f9      	b.n	8002b14 <memset+0x4>

08002b20 <_init>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	bf00      	nop
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr

08002b2c <_fini>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	bf00      	nop
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr
