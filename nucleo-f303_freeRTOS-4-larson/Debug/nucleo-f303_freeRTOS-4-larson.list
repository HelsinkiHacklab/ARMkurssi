
nucleo-f303_freeRTOS-4-larson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006e3c  08006e3c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e3c  08006e3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e24  20000010  08006e54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20002e34  08006e54  00022e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d15  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e00  00000000  00000000  00038d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  0003bb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e0  00000000  00000000  0003ce80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004f79  00000000  00000000  0003e060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f858  00000000  00000000  00042fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b8581  00000000  00000000  00052831  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010adb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  0010ae30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dcc 	.word	0x08006dcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006dcc 	.word	0x08006dcc

080001e0 <_Z7pwmTaskPv>:
// Taski lukee omasta viestijonostaan yksinkertaisen yhden tavun mittaisen käskyn ja
// käynnistää pwm-sekvenssin. Kun sekvenssi on saavuttanut maksimiarvonsa, viesti välitetään eteenpäin
// ja aletaan ajamaan pwm-modulaatiota alaspäin kohti nollaa.
// suunta vaihtuu kun taski havaitsee, että jatkosuunnassa olevan taskin kahva on NULL (eli siinä suunnassa ei enää ole ketään)
// silloin jatkokäsky lähetetään siihen suuntaan mistä se saatiinkin.
void pwmTask( void *pvParameters ) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]

	uint32_t pwm;
	volatile uint32_t *ccr;		// osoitin timerin (muistimapattuun) counter compare-rekisteriin

	// puretaan kutsuargumenttina saadut parametrit
	par = (pwmTaskParams_t *)pvParameters;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	613b      	str	r3, [r7, #16]
	switch ( par->pwmchannel ) {
 80001ec:	693b      	ldr	r3, [r7, #16]
 80001ee:	7c1b      	ldrb	r3, [r3, #16]
 80001f0:	3b01      	subs	r3, #1
 80001f2:	2b03      	cmp	r3, #3
 80001f4:	d822      	bhi.n	800023c <_Z7pwmTaskPv+0x5c>
 80001f6:	a201      	add	r2, pc, #4	; (adr r2, 80001fc <_Z7pwmTaskPv+0x1c>)
 80001f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fc:	0800020d 	.word	0x0800020d
 8000200:	08000219 	.word	0x08000219
 8000204:	08000225 	.word	0x08000225
 8000208:	08000231 	.word	0x08000231
		case 1: {
			ccr = &par->phtim->Instance->CCR1;
 800020c:	693b      	ldr	r3, [r7, #16]
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	3334      	adds	r3, #52	; 0x34
 8000214:	617b      	str	r3, [r7, #20]
			break;
 8000216:	e011      	b.n	800023c <_Z7pwmTaskPv+0x5c>
		}
		case 2: {
			ccr = &par->phtim->Instance->CCR2;
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	3338      	adds	r3, #56	; 0x38
 8000220:	617b      	str	r3, [r7, #20]
			break;
 8000222:	e00b      	b.n	800023c <_Z7pwmTaskPv+0x5c>
		}
		case 3: {
			ccr = &par->phtim->Instance->CCR3;
 8000224:	693b      	ldr	r3, [r7, #16]
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	333c      	adds	r3, #60	; 0x3c
 800022c:	617b      	str	r3, [r7, #20]
			break;
 800022e:	e005      	b.n	800023c <_Z7pwmTaskPv+0x5c>
		}
		case 4: {
			ccr = &par->phtim->Instance->CCR4;
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	3340      	adds	r3, #64	; 0x40
 8000238:	617b      	str	r3, [r7, #20]
			break;
 800023a:	bf00      	nop
		}
	}

	// jos ollaan alimman ledin ohjaustaski niin ekalla kerralla aloitetaan
	// odottamatta saapuvaa viestiä (koska kukaan ei ole lähettämässä sitä)
	if ( par->dnQ == NULL ) {
 800023c:	693b      	ldr	r3, [r7, #16]
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d104      	bne.n	800024e <_Z7pwmTaskPv+0x6e>
		message = msg_up;
 8000244:	2301      	movs	r3, #1
 8000246:	73fb      	strb	r3, [r7, #15]
		waitForMessage = false;
 8000248:	2300      	movs	r3, #0
 800024a:	77fb      	strb	r3, [r7, #31]
 800024c:	e001      	b.n	8000252 <_Z7pwmTaskPv+0x72>
	}
	else waitForMessage = true;
 800024e:	2301      	movs	r3, #1
 8000250:	77fb      	strb	r3, [r7, #31]

	for ( ;; ) {
		// viestin odottelu
		if (waitForMessage) xQueueReceive(par->inQ, &message, portMAX_DELAY);
 8000252:	7ffb      	ldrb	r3, [r7, #31]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d008      	beq.n	800026a <_Z7pwmTaskPv+0x8a>
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f107 010f 	add.w	r1, r7, #15
 8000260:	f04f 32ff 	mov.w	r2, #4294967295
 8000264:	4618      	mov	r0, r3
 8000266:	f004 fd69 	bl	8004d3c <xQueueReceive>
		waitForMessage = true;
 800026a:	2301      	movs	r3, #1
 800026c:	77fb      	strb	r3, [r7, #31]

		// ryhdytään ohjaamaan lediä

		// startataan pwm ja ajetaan pulssisuhde 0->100%
		HAL_TIM_PWM_Start( par->phtim, (par->pwmchannel-1)<<2 );
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	68da      	ldr	r2, [r3, #12]
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	7c1b      	ldrb	r3, [r3, #16]
 8000276:	3b01      	subs	r3, #1
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	4619      	mov	r1, r3
 800027c:	4610      	mov	r0, r2
 800027e:	f002 fce7 	bl	8002c50 <HAL_TIM_PWM_Start>
		for (pwm = PWMSTEP; pwm < MAXMODULATION; pwm += PWMSTEP ) {
 8000282:	2319      	movs	r3, #25
 8000284:	61bb      	str	r3, [r7, #24]
 8000286:	69bb      	ldr	r3, [r7, #24]
 8000288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800028c:	d209      	bcs.n	80002a2 <_Z7pwmTaskPv+0xc2>
			*ccr = pwm;
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	69ba      	ldr	r2, [r7, #24]
 8000292:	601a      	str	r2, [r3, #0]
			vTaskDelay( LOOPDELAY / portTICK_PERIOD_MS);
 8000294:	2005      	movs	r0, #5
 8000296:	f005 f8e9 	bl	800546c <vTaskDelay>
		for (pwm = PWMSTEP; pwm < MAXMODULATION; pwm += PWMSTEP ) {
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	3319      	adds	r3, #25
 800029e:	61bb      	str	r3, [r7, #24]
 80002a0:	e7f1      	b.n	8000286 <_Z7pwmTaskPv+0xa6>
		}

		// kun ledi palaa täysillä, viestitetään käynnistyskäsky seuraavan ledin ohjaustaskille
		if ( message == msg_up ) {
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d119      	bne.n	80002dc <_Z7pwmTaskPv+0xfc>
			if ( par->upQ != NULL ) xQueueSend( par->upQ, &message, portMAX_DELAY );
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d009      	beq.n	80002c4 <_Z7pwmTaskPv+0xe4>
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	6858      	ldr	r0, [r3, #4]
 80002b4:	f107 010f 	add.w	r1, r7, #15
 80002b8:	2300      	movs	r3, #0
 80002ba:	f04f 32ff 	mov.w	r2, #4294967295
 80002be:	f004 fbaf 	bl	8004a20 <xQueueGenericSend>
 80002c2:	e024      	b.n	800030e <_Z7pwmTaskPv+0x12e>
			else {
				message = msg_dn;
 80002c4:	2300      	movs	r3, #0
 80002c6:	73fb      	strb	r3, [r7, #15]
				xQueueSend( par->dnQ, &message, portMAX_DELAY );
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	6898      	ldr	r0, [r3, #8]
 80002cc:	f107 010f 	add.w	r1, r7, #15
 80002d0:	2300      	movs	r3, #0
 80002d2:	f04f 32ff 	mov.w	r2, #4294967295
 80002d6:	f004 fba3 	bl	8004a20 <xQueueGenericSend>
 80002da:	e018      	b.n	800030e <_Z7pwmTaskPv+0x12e>
			}
		}
		else {
			if ( par->dnQ != NULL ) xQueueSend( par->dnQ, &message, portMAX_DELAY );
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d009      	beq.n	80002f8 <_Z7pwmTaskPv+0x118>
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	6898      	ldr	r0, [r3, #8]
 80002e8:	f107 010f 	add.w	r1, r7, #15
 80002ec:	2300      	movs	r3, #0
 80002ee:	f04f 32ff 	mov.w	r2, #4294967295
 80002f2:	f004 fb95 	bl	8004a20 <xQueueGenericSend>
 80002f6:	e00a      	b.n	800030e <_Z7pwmTaskPv+0x12e>
			else {
				message = msg_up;
 80002f8:	2301      	movs	r3, #1
 80002fa:	73fb      	strb	r3, [r7, #15]
				xQueueSend( par->upQ, &message, portMAX_DELAY );
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	6858      	ldr	r0, [r3, #4]
 8000300:	f107 010f 	add.w	r1, r7, #15
 8000304:	2300      	movs	r3, #0
 8000306:	f04f 32ff 	mov.w	r2, #4294967295
 800030a:	f004 fb89 	bl	8004a20 <xQueueGenericSend>
			}
		}

		// ajetaan pulssisuhde 100->0% ja pysäytetään pwm
		for ( ; pwm > 0; pwm -= PWMSTEP ) {
 800030e:	69bb      	ldr	r3, [r7, #24]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d009      	beq.n	8000328 <_Z7pwmTaskPv+0x148>
			*ccr = pwm;
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	69ba      	ldr	r2, [r7, #24]
 8000318:	601a      	str	r2, [r3, #0]
			vTaskDelay( LOOPDELAY / portTICK_PERIOD_MS);
 800031a:	2005      	movs	r0, #5
 800031c:	f005 f8a6 	bl	800546c <vTaskDelay>
		for ( ; pwm > 0; pwm -= PWMSTEP ) {
 8000320:	69bb      	ldr	r3, [r7, #24]
 8000322:	3b19      	subs	r3, #25
 8000324:	61bb      	str	r3, [r7, #24]
 8000326:	e7f2      	b.n	800030e <_Z7pwmTaskPv+0x12e>
		}
		HAL_TIM_PWM_Stop( par->phtim, (par->pwmchannel-1)<<2 );
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	68da      	ldr	r2, [r3, #12]
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	7c1b      	ldrb	r3, [r3, #16]
 8000330:	3b01      	subs	r3, #1
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	4619      	mov	r1, r3
 8000336:	4610      	mov	r0, r2
 8000338:	f002 fcea 	bl	8002d10 <HAL_TIM_PWM_Stop>
		if (waitForMessage) xQueueReceive(par->inQ, &message, portMAX_DELAY);
 800033c:	e789      	b.n	8000252 <_Z7pwmTaskPv+0x72>
 800033e:	bf00      	nop

08000340 <main>:

// Taskien kontekstit - staattisesti allokoituna
static StackType_t stack[NUMCHANNELS][TASKSTACKDEPTH];		// Taskien pinot
static StaticTask_t tcb[NUMCHANNELS];						// kernelin Task Control Blockit

int main(void) {
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b087      	sub	sp, #28
 8000344:	af04      	add	r7, sp, #16
uint8_t channel;
uint8_t taskName[] = "PWMx";
 8000346:	4a82      	ldr	r2, [pc, #520]	; (8000550 <main+0x210>)
 8000348:	463b      	mov	r3, r7
 800034a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800034e:	6018      	str	r0, [r3, #0]
 8000350:	3304      	adds	r3, #4
 8000352:	7019      	strb	r1, [r3, #0]

	HAL_Init();
 8000354:	f000 fd9a 	bl	8000e8c <HAL_Init>
	SystemClock_Config();
 8000358:	f000 f908 	bl	800056c <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 800035c:	f000 fb28 	bl	80009b0 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8000360:	f000 faf2 	bl	8000948 <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 8000364:	f000 f970 	bl	8000648 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 8000368:	f000 fa2e 	bl	80007c8 <_ZL12MX_TIM3_Initv>

	memset(stack, 0xff, sizeof(stack));
 800036c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000370:	21ff      	movs	r1, #255	; 0xff
 8000372:	4878      	ldr	r0, [pc, #480]	; (8000554 <main+0x214>)
 8000374:	f006 fd21 	bl	8006dba <memset>
	memset(tcb, 0xff, sizeof(tcb));
 8000378:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800037c:	21ff      	movs	r1, #255	; 0xff
 800037e:	4876      	ldr	r0, [pc, #472]	; (8000558 <main+0x218>)
 8000380:	f006 fd1b 	bl	8006dba <memset>

	// luodaan jokaiselle taskille oma viestijono
	for ( channel = 0; channel < NUMCHANNELS; channel++ ) {
 8000384:	2300      	movs	r3, #0
 8000386:	71fb      	strb	r3, [r7, #7]
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b07      	cmp	r3, #7
 800038c:	d811      	bhi.n	80003b2 <main+0x72>
		params[channel].inQ = xQueueCreate( MAXQUEUEDMESSAGES, sizeof(msg) );
 800038e:	79fc      	ldrb	r4, [r7, #7]
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	2002      	movs	r0, #2
 8000396:	f004 fae3 	bl	8004960 <xQueueGenericCreate>
 800039a:	4601      	mov	r1, r0
 800039c:	4a6f      	ldr	r2, [pc, #444]	; (800055c <main+0x21c>)
 800039e:	4623      	mov	r3, r4
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4423      	add	r3, r4
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4413      	add	r3, r2
 80003a8:	6019      	str	r1, [r3, #0]
	for ( channel = 0; channel < NUMCHANNELS; channel++ ) {
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	3301      	adds	r3, #1
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	e7ea      	b.n	8000388 <main+0x48>
	}
	// linkitetään viestijonot ja pwm-kanavat taskien alustusparametri-struktuureihin
	// Ensin timerin 2 pwm-ohjain
	for ( channel = 0; channel < NUMCHANNELS/2; channel++ ) {
 80003b2:	2300      	movs	r3, #0
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	d84c      	bhi.n	8000456 <main+0x116>
		params[channel].upQ = params[channel+1].inQ;
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	1c59      	adds	r1, r3, #1
 80003c0:	79fa      	ldrb	r2, [r7, #7]
 80003c2:	4866      	ldr	r0, [pc, #408]	; (800055c <main+0x21c>)
 80003c4:	460b      	mov	r3, r1
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	440b      	add	r3, r1
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4403      	add	r3, r0
 80003ce:	6819      	ldr	r1, [r3, #0]
 80003d0:	4862      	ldr	r0, [pc, #392]	; (800055c <main+0x21c>)
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4403      	add	r3, r0
 80003dc:	3304      	adds	r3, #4
 80003de:	6019      	str	r1, [r3, #0]
		if ( channel == 0 ) params[channel].dnQ = NULL;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d10a      	bne.n	80003fc <main+0xbc>
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	495c      	ldr	r1, [pc, #368]	; (800055c <main+0x21c>)
 80003ea:	4613      	mov	r3, r2
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4413      	add	r3, r2
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	440b      	add	r3, r1
 80003f4:	3308      	adds	r3, #8
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e011      	b.n	8000420 <main+0xe0>
		else params[channel].dnQ = params[channel-1].inQ;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	1e59      	subs	r1, r3, #1
 8000400:	79fa      	ldrb	r2, [r7, #7]
 8000402:	4856      	ldr	r0, [pc, #344]	; (800055c <main+0x21c>)
 8000404:	460b      	mov	r3, r1
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	440b      	add	r3, r1
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	4403      	add	r3, r0
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	4852      	ldr	r0, [pc, #328]	; (800055c <main+0x21c>)
 8000412:	4613      	mov	r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4413      	add	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4403      	add	r3, r0
 800041c:	3308      	adds	r3, #8
 800041e:	6019      	str	r1, [r3, #0]
		params[channel].phtim = &htim2;
 8000420:	79fa      	ldrb	r2, [r7, #7]
 8000422:	494e      	ldr	r1, [pc, #312]	; (800055c <main+0x21c>)
 8000424:	4613      	mov	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	440b      	add	r3, r1
 800042e:	330c      	adds	r3, #12
 8000430:	4a4b      	ldr	r2, [pc, #300]	; (8000560 <main+0x220>)
 8000432:	601a      	str	r2, [r3, #0]
		params[channel].pwmchannel = channel +1;
 8000434:	79fa      	ldrb	r2, [r7, #7]
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	3301      	adds	r3, #1
 800043a:	b2d8      	uxtb	r0, r3
 800043c:	4947      	ldr	r1, [pc, #284]	; (800055c <main+0x21c>)
 800043e:	4613      	mov	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4413      	add	r3, r2
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	440b      	add	r3, r1
 8000448:	3310      	adds	r3, #16
 800044a:	4602      	mov	r2, r0
 800044c:	701a      	strb	r2, [r3, #0]
	for ( channel = 0; channel < NUMCHANNELS/2; channel++ ) {
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	3301      	adds	r3, #1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	e7af      	b.n	80003b6 <main+0x76>
	}
	// ja sitten timerin 3 pwm-ohjain
	for ( channel = NUMCHANNELS/2; channel < NUMCHANNELS; channel++ ) {
 8000456:	2304      	movs	r3, #4
 8000458:	71fb      	strb	r3, [r7, #7]
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b07      	cmp	r3, #7
 800045e:	d84c      	bhi.n	80004fa <main+0x1ba>
		params[channel].dnQ = params[channel-1].inQ;
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	1e59      	subs	r1, r3, #1
 8000464:	79fa      	ldrb	r2, [r7, #7]
 8000466:	483d      	ldr	r0, [pc, #244]	; (800055c <main+0x21c>)
 8000468:	460b      	mov	r3, r1
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	440b      	add	r3, r1
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	4403      	add	r3, r0
 8000472:	6819      	ldr	r1, [r3, #0]
 8000474:	4839      	ldr	r0, [pc, #228]	; (800055c <main+0x21c>)
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4403      	add	r3, r0
 8000480:	3308      	adds	r3, #8
 8000482:	6019      	str	r1, [r3, #0]
		if ( channel == NUMCHANNELS -1 ) params[channel].upQ = NULL;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b07      	cmp	r3, #7
 8000488:	d10a      	bne.n	80004a0 <main+0x160>
 800048a:	79fa      	ldrb	r2, [r7, #7]
 800048c:	4933      	ldr	r1, [pc, #204]	; (800055c <main+0x21c>)
 800048e:	4613      	mov	r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	4413      	add	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	440b      	add	r3, r1
 8000498:	3304      	adds	r3, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	e011      	b.n	80004c4 <main+0x184>
		else params[channel].upQ = params[channel+1].inQ;
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	1c59      	adds	r1, r3, #1
 80004a4:	79fa      	ldrb	r2, [r7, #7]
 80004a6:	482d      	ldr	r0, [pc, #180]	; (800055c <main+0x21c>)
 80004a8:	460b      	mov	r3, r1
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	440b      	add	r3, r1
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	4403      	add	r3, r0
 80004b2:	6819      	ldr	r1, [r3, #0]
 80004b4:	4829      	ldr	r0, [pc, #164]	; (800055c <main+0x21c>)
 80004b6:	4613      	mov	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4403      	add	r3, r0
 80004c0:	3304      	adds	r3, #4
 80004c2:	6019      	str	r1, [r3, #0]
		params[channel].phtim = &htim3;
 80004c4:	79fa      	ldrb	r2, [r7, #7]
 80004c6:	4925      	ldr	r1, [pc, #148]	; (800055c <main+0x21c>)
 80004c8:	4613      	mov	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	440b      	add	r3, r1
 80004d2:	330c      	adds	r3, #12
 80004d4:	4a23      	ldr	r2, [pc, #140]	; (8000564 <main+0x224>)
 80004d6:	601a      	str	r2, [r3, #0]
		params[channel].pwmchannel = channel - NUMCHANNELS/2 + 1;
 80004d8:	79fa      	ldrb	r2, [r7, #7]
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	3b03      	subs	r3, #3
 80004de:	b2d8      	uxtb	r0, r3
 80004e0:	491e      	ldr	r1, [pc, #120]	; (800055c <main+0x21c>)
 80004e2:	4613      	mov	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	440b      	add	r3, r1
 80004ec:	3310      	adds	r3, #16
 80004ee:	4602      	mov	r2, r0
 80004f0:	701a      	strb	r2, [r3, #0]
	for ( channel = NUMCHANNELS/2; channel < NUMCHANNELS; channel++ ) {
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3301      	adds	r3, #1
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	e7af      	b.n	800045a <main+0x11a>
	}
	// Lopuksi luodaan taskit, kukin saa omat alustusparametrinsa ja staattisesti varatut resurssit
	// HUOMAA: kaikilla taskeilla on yhteinen koodi. Taskin identiteetin määrää sen Task Control Block, EI sen koodi.
	// Huomaa myös: Nyt luodaan 8 kpl taskeja ja voisi hyvin käydä, ettei heap riittäisikään tälle määrälle
	// Kun taskien TCB ja heap on staattisesti allokoitu tuolla ylempänä niin linkkausvaiheessa jo tiedetään onnistuuko
	for ( channel = 0; channel < NUMCHANNELS; channel++ ) {
 80004fa:	2300      	movs	r3, #0
 80004fc:	71fb      	strb	r3, [r7, #7]
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b07      	cmp	r3, #7
 8000502:	d822      	bhi.n	800054a <main+0x20a>
		taskName[3] = channel + '1';
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	3331      	adds	r3, #49	; 0x31
 8000508:	b2db      	uxtb	r3, r3
 800050a:	70fb      	strb	r3, [r7, #3]
		xTaskCreateStatic( pwmTask, (const char *)taskName, TASKSTACKDEPTH, &params[channel], tskIDLE_PRIORITY+1, &stack[channel][0], &tcb[channel] );
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4a11      	ldr	r2, [pc, #68]	; (800055c <main+0x21c>)
 8000518:	1898      	adds	r0, r3, r2
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	025b      	lsls	r3, r3, #9
 800051e:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <main+0x214>)
 8000520:	4413      	add	r3, r2
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	215c      	movs	r1, #92	; 0x5c
 8000526:	fb01 f202 	mul.w	r2, r1, r2
 800052a:	490b      	ldr	r1, [pc, #44]	; (8000558 <main+0x218>)
 800052c:	440a      	add	r2, r1
 800052e:	4639      	mov	r1, r7
 8000530:	9202      	str	r2, [sp, #8]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	2301      	movs	r3, #1
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4603      	mov	r3, r0
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0x228>)
 800053e:	f004 fe45 	bl	80051cc <xTaskCreateStatic>
	for ( channel = 0; channel < NUMCHANNELS; channel++ ) {
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	3301      	adds	r3, #1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	e7d9      	b.n	80004fe <main+0x1be>
	}

	// ja menoksi
	vTaskStartScheduler();
 800054a:	f004 ffc3 	bl	80054d4 <vTaskStartScheduler>

	while (1) {
 800054e:	e7fe      	b.n	800054e <main+0x20e>
 8000550:	08006de4 	.word	0x08006de4
 8000554:	200001cc 	.word	0x200001cc
 8000558:	200011cc 	.word	0x200011cc
 800055c:	2000012c 	.word	0x2000012c
 8000560:	2000002c 	.word	0x2000002c
 8000564:	2000006c 	.word	0x2000006c
 8000568:	080001e1 	.word	0x080001e1

0800056c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b0a6      	sub	sp, #152	; 0x98
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000576:	2228      	movs	r2, #40	; 0x28
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 fc1d 	bl	8006dba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2258      	movs	r2, #88	; 0x58
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fc0f 	bl	8006dba <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ff18 	bl	8001400 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	bf14      	ite	ne
 80005d6:	2301      	movne	r3, #1
 80005d8:	2300      	moveq	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 80005e0:	f000 fa60 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fe13 	bl	800222c <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000616:	f000 fa45 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800061a:	2302      	movs	r3, #2
 800061c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f002 f869 	bl	80026fc <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800063a:	f000 fa33 	bl	8000aa4 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3798      	adds	r7, #152	; 0x98
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08e      	sub	sp, #56	; 0x38
 800064c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800067a:	4b52      	ldr	r3, [pc, #328]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 800067c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000682:	4b50      	ldr	r3, [pc, #320]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 8000684:	2248      	movs	r2, #72	; 0x48
 8000686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b4e      	ldr	r3, [pc, #312]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800068e:	4b4d      	ldr	r3, [pc, #308]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 8000690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	4b4b      	ldr	r3, [pc, #300]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a2:	4848      	ldr	r0, [pc, #288]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 80006a4:	f002 fa48 	bl	8002b38 <HAL_TIM_Base_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80006b8:	f000 f9f4 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	4619      	mov	r1, r3
 80006c8:	483e      	ldr	r0, [pc, #248]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 80006ca:	f002 fdcd 	bl	8003268 <HAL_TIM_ConfigClockSource>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 80006de:	f000 f9e1 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006e2:	4838      	ldr	r0, [pc, #224]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 80006e4:	f002 fa7e 	bl	8002be4 <HAL_TIM_PWM_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 80006f8:	f000 f9d4 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	482e      	ldr	r0, [pc, #184]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 800070c:	f003 faf2 	bl	8003cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8000720:	f000 f9c0 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000724:	2360      	movs	r3, #96	; 0x60
 8000726:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	4822      	ldr	r0, [pc, #136]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 800073c:	f002 fc7c 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8000750:	f000 f9a8 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	2204      	movs	r2, #4
 8000758:	4619      	mov	r1, r3
 800075a:	481a      	ldr	r0, [pc, #104]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 800075c:	f002 fc6c 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2301      	movne	r3, #1
 8000768:	2300      	moveq	r3, #0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 8000770:	f000 f998 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	2208      	movs	r2, #8
 8000778:	4619      	mov	r1, r3
 800077a:	4812      	ldr	r0, [pc, #72]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 800077c:	f002 fc5c 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <_ZL12MX_TIM2_Initv+0x14c>
  {
    Error_Handler();
 8000790:	f000 f988 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	220c      	movs	r2, #12
 8000798:	4619      	mov	r1, r3
 800079a:	480a      	ldr	r0, [pc, #40]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 800079c:	f002 fc4c 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <_ZL12MX_TIM2_Initv+0x16c>
  {
    Error_Handler();
 80007b0:	f000 f978 	bl	8000aa4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <_ZL12MX_TIM2_Initv+0x17c>)
 80007b6:	f000 f9d7 	bl	8000b68 <HAL_TIM_MspPostInit>
}
 80007ba:	bf00      	nop
 80007bc:	3738      	adds	r7, #56	; 0x38
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000002c 	.word	0x2000002c

080007c8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80007fa:	4b51      	ldr	r3, [pc, #324]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 80007fc:	4a51      	ldr	r2, [pc, #324]	; (8000944 <_ZL12MX_TIM3_Initv+0x17c>)
 80007fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000800:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 8000802:	2248      	movs	r2, #72	; 0x48
 8000804:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800080c:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 800080e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000812:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b4a      	ldr	r3, [pc, #296]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b49      	ldr	r3, [pc, #292]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000820:	4847      	ldr	r0, [pc, #284]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 8000822:	f002 f989 	bl	8002b38 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	bf14      	ite	ne
 800082c:	2301      	movne	r3, #1
 800082e:	2300      	moveq	r3, #0
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8000836:	f000 f935 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000844:	4619      	mov	r1, r3
 8000846:	483e      	ldr	r0, [pc, #248]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 8000848:	f002 fd0e 	bl	8003268 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf14      	ite	ne
 8000852:	2301      	movne	r3, #1
 8000854:	2300      	moveq	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 800085c:	f000 f922 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000860:	4837      	ldr	r0, [pc, #220]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 8000862:	f002 f9bf 	bl	8002be4 <HAL_TIM_PWM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf14      	ite	ne
 800086c:	2301      	movne	r3, #1
 800086e:	2300      	moveq	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8000876:	f000 f915 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	482d      	ldr	r0, [pc, #180]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 800088a:	f003 fa33 	bl	8003cf4 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 800089e:	f000 f901 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a2:	2360      	movs	r3, #96	; 0x60
 80008a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4821      	ldr	r0, [pc, #132]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 80008ba:	f002 fbbd 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 80008ce:	f000 f8e9 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	2204      	movs	r2, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4819      	ldr	r0, [pc, #100]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 80008da:	f002 fbad 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <_ZL12MX_TIM3_Initv+0x12a>
  {
    Error_Handler();
 80008ee:	f000 f8d9 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	2208      	movs	r2, #8
 80008f6:	4619      	mov	r1, r3
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 80008fa:	f002 fb9d 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <_ZL12MX_TIM3_Initv+0x14a>
  {
    Error_Handler();
 800090e:	f000 f8c9 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	220c      	movs	r2, #12
 8000916:	4619      	mov	r1, r3
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 800091a:	f002 fb8d 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf14      	ite	ne
 8000924:	2301      	movne	r3, #1
 8000926:	2300      	moveq	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <_ZL12MX_TIM3_Initv+0x16a>
  {
    Error_Handler();
 800092e:	f000 f8b9 	bl	8000aa4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <_ZL12MX_TIM3_Initv+0x178>)
 8000934:	f000 f918 	bl	8000b68 <HAL_TIM_MspPostInit>

}
 8000938:	bf00      	nop
 800093a:	3738      	adds	r7, #56	; 0x38
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000006c 	.word	0x2000006c
 8000944:	40000400 	.word	0x40000400

08000948 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <_ZL19MX_USART2_UART_Initv+0x64>)
 8000950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000954:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800098c:	f003 fa5c 	bl	8003e48 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf14      	ite	ne
 8000996:	2301      	movne	r3, #1
 8000998:	2300      	moveq	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80009a0:	f000 f880 	bl	8000aa4 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000ac 	.word	0x200000ac
 80009ac:	40004400 	.word	0x40004400

080009b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 80009cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a24      	ldr	r2, [pc, #144]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2120      	movs	r1, #32
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f000 fccf 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <_ZL12MX_GPIO_Initv+0xc8>)
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <_ZL12MX_GPIO_Initv+0xcc>)
 8000a48:	f000 fb38 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f000 fb29 	bl	80010bc <HAL_GPIO_Init>

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	10210000 	.word	0x10210000
 8000a7c:	48000800 	.word	0x48000800

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 fa11 	bl	8000eb8 <HAL_IncTick>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40001000 	.word	0x40001000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_MspInit+0x4c>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6193      	str	r3, [r2, #24]
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	61d3      	str	r3, [r2, #28]
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	210f      	movs	r1, #15
 8000aee:	f06f 0001 	mvn.w	r0, #1
 8000af2:	f000 fab9 	bl	8001068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b14:	d10c      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_TIM_Base_MspInit+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <HAL_TIM_Base_MspInit+0x5c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_TIM_Base_MspInit+0x5c>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b2e:	e010      	b.n	8000b52 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <HAL_TIM_Base_MspInit+0x60>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10b      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_TIM_Base_MspInit+0x5c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_TIM_Base_MspInit+0x5c>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_TIM_Base_MspInit+0x5c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40000400 	.word	0x40000400

08000b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b88:	d13a      	bne.n	8000c00 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	4a3d      	ldr	r2, [pc, #244]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6153      	str	r3, [r2, #20]
 8000b96:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a37      	ldr	r2, [pc, #220]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f000 fa70 	bl	80010bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4823      	ldr	r0, [pc, #140]	; (8000c88 <HAL_TIM_MspPostInit+0x120>)
 8000bfa:	f000 fa5f 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bfe:	e03d      	b.n	8000c7c <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <HAL_TIM_MspPostInit+0x124>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d138      	bne.n	8000c7c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_TIM_MspPostInit+0x11c>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000c3a:	2350      	movs	r3, #80	; 0x50
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f000 fa30 	bl	80010bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <HAL_TIM_MspPostInit+0x120>)
 8000c78:	f000 fa20 	bl	80010bc <HAL_GPIO_Init>
}
 8000c7c:	bf00      	nop
 8000c7e:	3730      	adds	r7, #48	; 0x30
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	40000400 	.word	0x40000400

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_UART_MspInit+0x7c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d128      	bne.n	8000d04 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_UART_MspInit+0x80>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <HAL_UART_MspInit+0x80>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0x80>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_MspInit+0x80>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_UART_MspInit+0x80>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_UART_MspInit+0x80>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 f9dc 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	2036      	movs	r0, #54	; 0x36
 8000d2a:	f000 f99d 	bl	8001068 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000d2e:	2036      	movs	r0, #54	; 0x36
 8000d30:	f000 f9b6 	bl	80010a0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <HAL_InitTick+0xa0>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <HAL_InitTick+0xa0>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	61d3      	str	r3, [r2, #28]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_InitTick+0xa0>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d4c:	f107 0210 	add.w	r2, r7, #16
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fc9e 	bl	8002698 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d5c:	f001 fc58 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8000d60:	4603      	mov	r3, r0
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <HAL_InitTick+0xa4>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	0c9b      	lsrs	r3, r3, #18
 8000d70:	3b01      	subs	r3, #1
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <HAL_InitTick+0xac>)
 8000d78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d96:	f001 fecf 	bl	8002b38 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d104      	bne.n	8000daa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_InitTick+0xa8>)
 8000da2:	f001 fef5 	bl	8002b90 <HAL_TIM_Base_Start_IT>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3730      	adds	r7, #48	; 0x30
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	431bde83 	.word	0x431bde83
 8000dbc:	20002db0 	.word	0x20002db0
 8000dc0:	40001000 	.word	0x40001000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM6_DAC_IRQHandler+0x10>)
 8000dfe:	f001 fffb 	bl	8002df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20002db0 	.word	0x20002db0

08000e0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <SystemInit+0x28>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <SystemInit+0x28>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SystemInit+0x28>)
 8000e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e26:	609a      	str	r2, [r3, #8]
#endif
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
	ldr	r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e58:	f842 3b04 	str.w	r3, [r2], #4

08000e5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <LoopForever+0x16>)
	cmp	r2, r3
 8000e5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e62:	f7ff ffd3 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f005 ff79 	bl	8006d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f7ff fa69 	bl	8000340 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e70:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000e74:	08006e44 	.word	0x08006e44
	ldr	r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e7c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e80:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e84:	20002e34 	.word	0x20002e34

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x28>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x28>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f8d8 	bl	8001052 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff ff36 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fe04 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20002df0 	.word	0x20002df0

08000ee0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20002df0 	.word	0x20002df0

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff4c 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107a:	f7ff ff61 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 800107e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	6978      	ldr	r0, [r7, #20]
 8001086:	f7ff ffb1 	bl	8000fec <NVIC_EncodePriority>
 800108a:	4602      	mov	r2, r0
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff80 	bl	8000f98 <__NVIC_SetPriority>
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff54 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	e160      	b.n	800138e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2101      	movs	r1, #1
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8152 	beq.w	8001388 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x38>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b12      	cmp	r3, #18
 80010f2:	d123      	bne.n	800113c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	6939      	ldr	r1, [r7, #16]
 8001138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0203 	and.w	r2, r3, #3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d00b      	beq.n	8001190 <HAL_GPIO_Init+0xd4>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d007      	beq.n	8001190 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001184:	2b11      	cmp	r3, #17
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b12      	cmp	r3, #18
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 0201 	and.w	r2, r3, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80ac 	beq.w	8001388 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001230:	4b5e      	ldr	r3, [pc, #376]	; (80013ac <HAL_GPIO_Init+0x2f0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a5d      	ldr	r2, [pc, #372]	; (80013ac <HAL_GPIO_Init+0x2f0>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <HAL_GPIO_Init+0x2f0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001248:	4a59      	ldr	r2, [pc, #356]	; (80013b0 <HAL_GPIO_Init+0x2f4>)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001272:	d025      	beq.n	80012c0 <HAL_GPIO_Init+0x204>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <HAL_GPIO_Init+0x2f8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d01f      	beq.n	80012bc <HAL_GPIO_Init+0x200>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_GPIO_Init+0x2fc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d019      	beq.n	80012b8 <HAL_GPIO_Init+0x1fc>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a4d      	ldr	r2, [pc, #308]	; (80013bc <HAL_GPIO_Init+0x300>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d013      	beq.n	80012b4 <HAL_GPIO_Init+0x1f8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <HAL_GPIO_Init+0x304>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d00d      	beq.n	80012b0 <HAL_GPIO_Init+0x1f4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_GPIO_Init+0x308>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_Init+0x1f0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <HAL_GPIO_Init+0x30c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <HAL_GPIO_Init+0x1ec>
 80012a4:	2306      	movs	r3, #6
 80012a6:	e00c      	b.n	80012c2 <HAL_GPIO_Init+0x206>
 80012a8:	2307      	movs	r3, #7
 80012aa:	e00a      	b.n	80012c2 <HAL_GPIO_Init+0x206>
 80012ac:	2305      	movs	r3, #5
 80012ae:	e008      	b.n	80012c2 <HAL_GPIO_Init+0x206>
 80012b0:	2304      	movs	r3, #4
 80012b2:	e006      	b.n	80012c2 <HAL_GPIO_Init+0x206>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e004      	b.n	80012c2 <HAL_GPIO_Init+0x206>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x206>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <HAL_GPIO_Init+0x206>
 80012c0:	2300      	movs	r3, #0
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	f002 0203 	and.w	r2, r2, #3
 80012c8:	0092      	lsls	r2, r2, #2
 80012ca:	4093      	lsls	r3, r2
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012d2:	4937      	ldr	r1, [pc, #220]	; (80013b0 <HAL_GPIO_Init+0x2f4>)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <HAL_GPIO_Init+0x310>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001304:	4a31      	ldr	r2, [pc, #196]	; (80013cc <HAL_GPIO_Init+0x310>)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <HAL_GPIO_Init+0x310>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800132e:	4a27      	ldr	r2, [pc, #156]	; (80013cc <HAL_GPIO_Init+0x310>)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <HAL_GPIO_Init+0x310>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001358:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <HAL_GPIO_Init+0x310>)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_GPIO_Init+0x310>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <HAL_GPIO_Init+0x310>)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	fa22 f303 	lsr.w	r3, r2, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	f47f ae97 	bne.w	80010cc <HAL_GPIO_Init+0x10>
  }
}
 800139e:	bf00      	nop
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000
 80013b4:	48000400 	.word	0x48000400
 80013b8:	48000800 	.word	0x48000800
 80013bc:	48000c00 	.word	0x48000c00
 80013c0:	48001000 	.word	0x48001000
 80013c4:	48001400 	.word	0x48001400
 80013c8:	48001800 	.word	0x48001800
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001406:	af00      	add	r7, sp, #0
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	f000 bf01 	b.w	800221c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8160 	beq.w	80016ea <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800142a:	4bae      	ldr	r3, [pc, #696]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b04      	cmp	r3, #4
 8001434:	d00c      	beq.n	8001450 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001436:	4bab      	ldr	r3, [pc, #684]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b08      	cmp	r3, #8
 8001440:	d159      	bne.n	80014f6 <HAL_RCC_OscConfig+0xf6>
 8001442:	4ba8      	ldr	r3, [pc, #672]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144e:	d152      	bne.n	80014f6 <HAL_RCC_OscConfig+0xf6>
 8001450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001454:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800145c:	fa93 f3a3 	rbit	r3, r3
 8001460:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001464:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d102      	bne.n	8001482 <HAL_RCC_OscConfig+0x82>
 800147c:	4b99      	ldr	r3, [pc, #612]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0xae>
 8001482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001486:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800149e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014aa:	4b8e      	ldr	r3, [pc, #568]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014b2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80014b6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80014ba:	fa92 f2a2 	rbit	r2, r2
 80014be:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80014c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014c6:	fab2 f282 	clz	r2, r2
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	f042 0220 	orr.w	r2, r2, #32
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f002 021f 	and.w	r2, r2, #31
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8102 	beq.w	80016e8 <HAL_RCC_OscConfig+0x2e8>
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 80fc 	bne.w	80016e8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f000 be93 	b.w	800221c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x110>
 8001502:	4b78      	ldr	r3, [pc, #480]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a77      	ldr	r2, [pc, #476]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e030      	b.n	8001572 <HAL_RCC_OscConfig+0x172>
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x134>
 800151a:	4b72      	ldr	r3, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a71      	ldr	r2, [pc, #452]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b6f      	ldr	r3, [pc, #444]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6e      	ldr	r2, [pc, #440]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01e      	b.n	8001572 <HAL_RCC_OscConfig+0x172>
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x15a>
 8001540:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a67      	ldr	r2, [pc, #412]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a64      	ldr	r2, [pc, #400]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x172>
 800155a:	4b62      	ldr	r3, [pc, #392]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a61      	ldr	r2, [pc, #388]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a5e      	ldr	r2, [pc, #376]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 800156c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001570:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d059      	beq.n	8001630 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fcb0 	bl	8000ee0 <HAL_GetTick>
 8001580:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fcab 	bl	8000ee0 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d902      	bls.n	800159c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	f000 be40 	b.w	800221c <HAL_RCC_OscConfig+0xe1c>
 800159c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80015b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d102      	bne.n	80015ce <HAL_RCC_OscConfig+0x1ce>
 80015c8:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x1fa>
 80015ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80015e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015fe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001602:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001606:	fa92 f2a2 	rbit	r2, r2
 800160a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800160e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001612:	fab2 f282 	clz	r2, r2
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	f042 0220 	orr.w	r2, r2, #32
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f002 021f 	and.w	r2, r2, #31
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ab      	beq.n	8001586 <HAL_RCC_OscConfig+0x186>
 800162e:	e05c      	b.n	80016ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fc56 	bl	8000ee0 <HAL_GetTick>
 8001634:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163a:	f7ff fc51 	bl	8000ee0 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d902      	bls.n	8001650 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	f000 bde6 	b.w	800221c <HAL_RCC_OscConfig+0xe1c>
 8001650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001654:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001664:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d102      	bne.n	8001682 <HAL_RCC_OscConfig+0x282>
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x2ae>
 8001682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001686:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800169e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_RCC_OscConfig+0x2e4>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80016b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80016ba:	fa92 f2a2 	rbit	r2, r2
 80016be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80016c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016c6:	fab2 f282 	clz	r2, r2
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f042 0220 	orr.w	r2, r2, #32
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	f002 021f 	and.w	r2, r2, #31
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ab      	bne.n	800163a <HAL_RCC_OscConfig+0x23a>
 80016e2:	e002      	b.n	80016ea <HAL_RCC_OscConfig+0x2ea>
 80016e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8170 	beq.w	80019da <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016fa:	4bd0      	ldr	r3, [pc, #832]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00c      	beq.n	8001720 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001706:	4bcd      	ldr	r3, [pc, #820]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d16d      	bne.n	80017ee <HAL_RCC_OscConfig+0x3ee>
 8001712:	4bca      	ldr	r3, [pc, #808]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800171a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800171e:	d166      	bne.n	80017ee <HAL_RCC_OscConfig+0x3ee>
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001732:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d102      	bne.n	8001750 <HAL_RCC_OscConfig+0x350>
 800174a:	4bbc      	ldr	r3, [pc, #752]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	e013      	b.n	8001778 <HAL_RCC_OscConfig+0x378>
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001768:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001774:	4bb1      	ldr	r3, [pc, #708]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	2202      	movs	r2, #2
 800177a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800177e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001782:	fa92 f2a2 	rbit	r2, r2
 8001786:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800178a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800178e:	fab2 f282 	clz	r2, r2
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	f002 021f 	and.w	r2, r2, #31
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_RCC_OscConfig+0x3ba>
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d002      	beq.n	80017ba <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f000 bd31 	b.w	800221c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4ba0      	ldr	r3, [pc, #640]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	21f8      	movs	r1, #248	; 0xf8
 80017ca:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80017d2:	fa91 f1a1 	rbit	r1, r1
 80017d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80017da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017de:	fab1 f181 	clz	r1, r1
 80017e2:	b2c9      	uxtb	r1, r1
 80017e4:	408b      	lsls	r3, r1
 80017e6:	4995      	ldr	r1, [pc, #596]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ec:	e0f5      	b.n	80019da <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8085 	beq.w	8001904 <HAL_RCC_OscConfig+0x504>
 80017fa:	2301      	movs	r3, #1
 80017fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800180c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	461a      	mov	r2, r3
 8001822:	2301      	movs	r3, #1
 8001824:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fb5b 	bl	8000ee0 <HAL_GetTick>
 800182a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fb56 	bl	8000ee0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d902      	bls.n	8001846 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	f000 bceb 	b.w	800221c <HAL_RCC_OscConfig+0xe1c>
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001858:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <HAL_RCC_OscConfig+0x476>
 8001870:	4b72      	ldr	r3, [pc, #456]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	e013      	b.n	800189e <HAL_RCC_OscConfig+0x49e>
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001888:	2302      	movs	r3, #2
 800188a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800188e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800189a:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	2202      	movs	r2, #2
 80018a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80018a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80018a8:	fa92 f2a2 	rbit	r2, r2
 80018ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80018b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018b4:	fab2 f282 	clz	r2, r2
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f042 0220 	orr.w	r2, r2, #32
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f002 021f 	and.w	r2, r2, #31
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0af      	beq.n	8001830 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	21f8      	movs	r1, #248	; 0xf8
 80018e0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80018e8:	fa91 f1a1 	rbit	r1, r1
 80018ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80018f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018f4:	fab1 f181 	clz	r1, r1
 80018f8:	b2c9      	uxtb	r1, r1
 80018fa:	408b      	lsls	r3, r1
 80018fc:	494f      	ldr	r1, [pc, #316]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
 8001902:	e06a      	b.n	80019da <HAL_RCC_OscConfig+0x5da>
 8001904:	2301      	movs	r3, #1
 8001906:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001916:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	461a      	mov	r2, r3
 800192c:	2300      	movs	r3, #0
 800192e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fad6 	bl	8000ee0 <HAL_GetTick>
 8001934:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff fad1 	bl	8000ee0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d902      	bls.n	8001950 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	f000 bc66 	b.w	800221c <HAL_RCC_OscConfig+0xe1c>
 8001950:	2302      	movs	r3, #2
 8001952:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001962:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <HAL_RCC_OscConfig+0x580>
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e013      	b.n	80019a8 <HAL_RCC_OscConfig+0x5a8>
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001998:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_RCC_OscConfig+0x63c>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	2202      	movs	r2, #2
 80019aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80019ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80019b2:	fa92 f2a2 	rbit	r2, r2
 80019b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80019ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019be:	fab2 f282 	clz	r2, r2
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f042 0220 	orr.w	r2, r2, #32
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f002 021f 	and.w	r2, r2, #31
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f202 	lsl.w	r2, r1, r2
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1af      	bne.n	800193a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80da 	beq.w	8001b9e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d069      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x6c8>
 80019f4:	2301      	movs	r3, #1
 80019f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x640>)
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fa5f 	bl	8000ee0 <HAL_GetTick>
 8001a22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e00d      	b.n	8001a44 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fa5a 	bl	8000ee0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d905      	bls.n	8001a44 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e3ef      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	10908120 	.word	0x10908120
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a74:	2202      	movs	r2, #2
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a88:	4ba4      	ldr	r3, [pc, #656]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a90:	2102      	movs	r1, #2
 8001a92:	6019      	str	r1, [r3, #0]
 8001a94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f1a3 	rbit	r1, r3
 8001a9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001aa2:	6019      	str	r1, [r3, #0]
  return result;
 8001aa4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	2101      	movs	r1, #1
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0b0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x628>
 8001ac6:	e06a      	b.n	8001b9e <HAL_RCC_OscConfig+0x79e>
 8001ac8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ade:	601a      	str	r2, [r3, #0]
  return result;
 8001ae0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ae4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <HAL_RCC_OscConfig+0x920>)
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	461a      	mov	r2, r3
 8001af6:	2300      	movs	r3, #0
 8001af8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f9f1 	bl	8000ee0 <HAL_GetTick>
 8001afe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b02:	e009      	b.n	8001b18 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b04:	f7ff f9ec 	bl	8000ee0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e381      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
 8001b18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fa93 f2a3 	rbit	r2, r3
 8001b2a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b34:	2202      	movs	r2, #2
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b68:	2102      	movs	r1, #2
 8001b6a:	6019      	str	r1, [r3, #0]
 8001b6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f1a3 	rbit	r1, r3
 8001b76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b7a:	6019      	str	r1, [r3, #0]
  return result;
 8001b7c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1b2      	bne.n	8001b04 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 8157 	beq.w	8001e5c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d112      	bne.n	8001be6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4a55      	ldr	r2, [pc, #340]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bca:	61d3      	str	r3, [r2, #28]
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <HAL_RCC_OscConfig+0x924>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d11a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <HAL_RCC_OscConfig+0x924>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a4b      	ldr	r2, [pc, #300]	; (8001d24 <HAL_RCC_OscConfig+0x924>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f96f 	bl	8000ee0 <HAL_GetTick>
 8001c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	e009      	b.n	8001c1c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c08:	f7ff f96a 	bl	8000ee0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e2ff      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_OscConfig+0x924>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ef      	beq.n	8001c08 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x840>
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a39      	ldr	r2, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	e02f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x8a0>
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x864>
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6213      	str	r3, [r2, #32]
 8001c56:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x8a0>
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x888>
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a2a      	ldr	r2, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6213      	str	r3, [r2, #32]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0x8a0>
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d06a      	beq.n	8001d80 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff f919 	bl	8000ee0 <HAL_GetTick>
 8001cae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f914 	bl	8000ee0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e2a7      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
 8001ccc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ce8:	2202      	movs	r2, #2
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cfa:	601a      	str	r2, [r3, #0]
  return result;
 8001cfc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d108      	bne.n	8001d28 <HAL_RCC_OscConfig+0x928>
 8001d16:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <HAL_RCC_OscConfig+0x91c>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	e013      	b.n	8001d44 <HAL_RCC_OscConfig+0x944>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	10908120 	.word	0x10908120
 8001d24:	40007000 	.word	0x40007000
 8001d28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	4bc0      	ldr	r3, [pc, #768]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001d48:	2102      	movs	r1, #2
 8001d4a:	6011      	str	r1, [r2, #0]
 8001d4c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	fa92 f1a2 	rbit	r1, r2
 8001d56:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d5a:	6011      	str	r1, [r2, #0]
  return result;
 8001d5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	fab2 f282 	clz	r2, r2
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f002 021f 	and.w	r2, r2, #31
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f202 	lsl.w	r2, r1, r2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d09a      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x8b4>
 8001d7e:	e063      	b.n	8001e48 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff f8ae 	bl	8000ee0 <HAL_GetTick>
 8001d84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00b      	b.n	8001da2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f8a9 	bl	8000ee0 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e23c      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
 8001da2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001da6:	2202      	movs	r2, #2
 8001da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dd0:	601a      	str	r2, [r3, #0]
  return result;
 8001dd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_OscConfig+0x9f2>
 8001dec:	4b95      	ldr	r3, [pc, #596]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	e00d      	b.n	8001e0e <HAL_RCC_OscConfig+0xa0e>
 8001df2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e12:	2102      	movs	r1, #2
 8001e14:	6011      	str	r1, [r2, #0]
 8001e16:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	fa92 f1a2 	rbit	r1, r2
 8001e20:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e24:	6011      	str	r1, [r2, #0]
  return result;
 8001e26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	fab2 f282 	clz	r2, r2
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	f002 021f 	and.w	r2, r2, #31
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1a0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e48:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	4a7b      	ldr	r2, [pc, #492]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 81d9 	beq.w	800221a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	f000 81a6 	beq.w	80021c2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f040 811e 	bne.w	80020be <HAL_RCC_OscConfig+0xcbe>
 8001e82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ea0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f812 	bl	8000ee0 <HAL_GetTick>
 8001ebc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	e009      	b.n	8001ed6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f80d 	bl	8000ee0 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1a2      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
 8001ed6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	fa93 f2a3 	rbit	r2, r3
 8001eea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001eee:	601a      	str	r2, [r3, #0]
  return result;
 8001ef0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0xb10>
 8001f0a:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e01b      	b.n	8001f48 <HAL_RCC_OscConfig+0xb48>
 8001f10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001f4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f50:	6011      	str	r1, [r2, #0]
 8001f52:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	fa92 f1a2 	rbit	r1, r2
 8001f5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f60:	6011      	str	r1, [r2, #0]
  return result;
 8001f62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d19e      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f023 020f 	bic.w	r2, r3, #15
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	492c      	ldr	r1, [pc, #176]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a19      	ldr	r1, [r3, #32]
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	4925      	ldr	r1, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fcc:	601a      	str	r2, [r3, #0]
  return result;
 8001fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fd2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe ff79 	bl	8000ee0 <HAL_GetTick>
 8001fee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff2:	e009      	b.n	8002008 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe ff74 	bl	8000ee0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e109      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
 8002008:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800200c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002020:	601a      	str	r2, [r3, #0]
  return result;
 8002022:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002026:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_RCC_OscConfig+0xc48>
 800203c:	4b01      	ldr	r3, [pc, #4]	; (8002044 <HAL_RCC_OscConfig+0xc44>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	e01e      	b.n	8002080 <HAL_RCC_OscConfig+0xc80>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800204c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	fa93 f2a3 	rbit	r2, r3
 8002076:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0xe28>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002084:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	fa92 f1a2 	rbit	r1, r2
 8002094:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002098:	6011      	str	r1, [r2, #0]
  return result;
 800209a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 021f 	and.w	r2, r2, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d09b      	beq.n	8001ff4 <HAL_RCC_OscConfig+0xbf4>
 80020bc:	e0ad      	b.n	800221a <HAL_RCC_OscConfig+0xe1a>
 80020be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020d6:	601a      	str	r2, [r3, #0]
  return result;
 80020d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	461a      	mov	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe fef4 	bl	8000ee0 <HAL_GetTick>
 80020f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe feef 	bl	8000ee0 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e084      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
 8002112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212a:	601a      	str	r2, [r3, #0]
  return result;
 800212c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_RCC_OscConfig+0xd4c>
 8002146:	4b38      	ldr	r3, [pc, #224]	; (8002228 <HAL_RCC_OscConfig+0xe28>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	e01b      	b.n	8002184 <HAL_RCC_OscConfig+0xd84>
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f107 0320 	add.w	r3, r7, #32
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fa93 f2a3 	rbit	r2, r3
 800217a:	f107 0318 	add.w	r3, r7, #24
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_RCC_OscConfig+0xe28>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f107 0214 	add.w	r2, r7, #20
 8002188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800218c:	6011      	str	r1, [r2, #0]
 800218e:	f107 0214 	add.w	r2, r7, #20
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fa92 f1a2 	rbit	r1, r2
 8002198:	f107 0210 	add.w	r2, r7, #16
 800219c:	6011      	str	r1, [r2, #0]
  return result;
 800219e:	f107 0210 	add.w	r2, r7, #16
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f042 0220 	orr.w	r2, r2, #32
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f002 021f 	and.w	r2, r2, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d19e      	bne.n	80020fe <HAL_RCC_OscConfig+0xcfe>
 80021c0:	e02b      	b.n	800221a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e025      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_RCC_OscConfig+0xe28>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_RCC_OscConfig+0xe28>)
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021e4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d111      	bne.n	8002216 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002200:	429a      	cmp	r2, r3
 8002202:	d108      	bne.n	8002216 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002208:	f003 020f 	and.w	r2, r3, #15
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b09e      	sub	sp, #120	; 0x78
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e162      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b90      	ldr	r3, [pc, #576]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b8d      	ldr	r3, [pc, #564]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	498b      	ldr	r1, [pc, #556]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b89      	ldr	r3, [pc, #548]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e14a      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b82      	ldr	r3, [pc, #520]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	497f      	ldr	r1, [pc, #508]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80dc 	beq.w	8002458 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d13c      	bne.n	8002322 <HAL_RCC_ClockConfig+0xf6>
 80022a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xa6>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e00f      	b.n	80022f2 <HAL_RCC_ClockConfig+0xc6>
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	667b      	str	r3, [r7, #100]	; 0x64
 80022e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e4:	663b      	str	r3, [r7, #96]	; 0x60
 80022e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80022f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022fa:	fa92 f2a2 	rbit	r2, r2
 80022fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f042 0220 	orr.w	r2, r2, #32
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f002 021f 	and.w	r2, r2, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d17b      	bne.n	8002416 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0f3      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d13c      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x178>
 800232a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d102      	bne.n	8002354 <HAL_RCC_ClockConfig+0x128>
 800234e:	4b4f      	ldr	r3, [pc, #316]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e00f      	b.n	8002374 <HAL_RCC_ClockConfig+0x148>
 8002354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	647b      	str	r3, [r7, #68]	; 0x44
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002366:	643b      	str	r3, [r7, #64]	; 0x40
 8002368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002370:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002378:	63ba      	str	r2, [r7, #56]	; 0x38
 800237a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f042 0220 	orr.w	r2, r2, #32
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f002 021f 	and.w	r2, r2, #31
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f202 	lsl.w	r2, r1, r2
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d13a      	bne.n	8002416 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b2      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
 80023a4:	2302      	movs	r3, #2
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_RCC_ClockConfig+0x1a0>
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e00d      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1bc>
 80023cc:	2302      	movs	r3, #2
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	2302      	movs	r3, #2
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2202      	movs	r2, #2
 80023ea:	61ba      	str	r2, [r7, #24]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	617a      	str	r2, [r7, #20]
  return result;
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f042 0220 	orr.w	r2, r2, #32
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f002 021f 	and.w	r2, r2, #31
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e079      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	491a      	ldr	r1, [pc, #104]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002428:	f7fe fd5a 	bl	8000ee0 <HAL_GetTick>
 800242c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fd56 	bl	8000ee0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e061      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d214      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 0207 	bic.w	r2, r3, #7
 800246e:	4906      	ldr	r1, [pc, #24]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e040      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
 8002488:	40022000 	.word	0x40022000
 800248c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	491a      	ldr	r1, [pc, #104]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4912      	ldr	r1, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024ce:	f000 f829 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024d2:	4601      	mov	r1, r0
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024dc:	22f0      	movs	r2, #240	; 0xf0
 80024de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	fa92 f2a2 	rbit	r2, r2
 80024e6:	60fa      	str	r2, [r7, #12]
  return result;
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	40d3      	lsrs	r3, r2
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x2ec>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	fa21 f303 	lsr.w	r3, r1, r3
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_RCC_ClockConfig+0x2f0>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCC_ClockConfig+0x2f4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fc06 	bl	8000d14 <HAL_InitTick>
  
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3778      	adds	r7, #120	; 0x78
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	08006e04 	.word	0x08006e04
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b08b      	sub	sp, #44	; 0x2c
 8002528:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x30>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x36>
 8002552:	e03f      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8002556:	623b      	str	r3, [r7, #32]
      break;
 8002558:	e03f      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002560:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002564:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	607a      	str	r2, [r7, #4]
  return result;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	40d3      	lsrs	r3, r2
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	220f      	movs	r2, #15
 8002588:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	fa92 f2a2 	rbit	r2, r2
 8002590:	60fa      	str	r2, [r7, #12]
  return result;
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	fab2 f282 	clz	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	40d3      	lsrs	r3, r2
 800259c:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025ac:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e007      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	623b      	str	r3, [r7, #32]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80025d6:	623b      	str	r3, [r7, #32]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	6a3b      	ldr	r3, [r7, #32]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	372c      	adds	r7, #44	; 0x2c
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	08006e1c 	.word	0x08006e1c
 80025f4:	08006e2c 	.word	0x08006e2c

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_RCC_GetHCLKFreq+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000000 	.word	0x20000000

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002616:	f7ff ffef 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800261a:	4601      	mov	r1, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002624:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002628:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	fa92 f2a2 	rbit	r2, r2
 8002630:	603a      	str	r2, [r7, #0]
  return result;
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	40d3      	lsrs	r3, r2
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x40>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	08006e14 	.word	0x08006e14

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800265a:	f7ff ffcd 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800265e:	4601      	mov	r1, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002668:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800266c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	fa92 f2a2 	rbit	r2, r2
 8002674:	603a      	str	r2, [r7, #0]
  return result;
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	40d3      	lsrs	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	08006e14 	.word	0x08006e14

08002698 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	220f      	movs	r2, #15
 80026a6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_RCC_GetClockConfig+0x60>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0207 	and.w	r2, r3, #7
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40022000 	.word	0x40022000

080026fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b092      	sub	sp, #72	; 0x48
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80d7 	beq.w	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002720:	4b4e      	ldr	r3, [pc, #312]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10e      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4a4a      	ldr	r2, [pc, #296]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	61d3      	str	r3, [r2, #28]
 8002738:	4b48      	ldr	r3, [pc, #288]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b45      	ldr	r3, [pc, #276]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a41      	ldr	r2, [pc, #260]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe fbbd 	bl	8000ee0 <HAL_GetTick>
 8002766:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e008      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe fbb9 	bl	8000ee0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1d6      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b38      	ldr	r3, [pc, #224]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8084 	beq.w	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d07c      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	2301      	movs	r3, #1
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	461a      	mov	r2, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027fa:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d04b      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe fb69 	bl	8000ee0 <HAL_GetTick>
 800280e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe fb65 	bl	8000ee0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e180      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	61fb      	str	r3, [r7, #28]
  return result;
 8002840:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d108      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002856:	4b01      	ldr	r3, [pc, #4]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	e00d      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800285c:	40021000 	.word	0x40021000
 8002860:	40007000 	.word	0x40007000
 8002864:	10908100 	.word	0x10908100
 8002868:	2302      	movs	r3, #2
 800286a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	4ba0      	ldr	r3, [pc, #640]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	2202      	movs	r2, #2
 800287a:	613a      	str	r2, [r7, #16]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	fa92 f2a2 	rbit	r2, r2
 8002882:	60fa      	str	r2, [r7, #12]
  return result;
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	fab2 f282 	clz	r2, r2
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f002 021f 	and.w	r2, r2, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0b7      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028a2:	4b95      	ldr	r3, [pc, #596]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4992      	ldr	r1, [pc, #584]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b8e      	ldr	r3, [pc, #568]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a8d      	ldr	r2, [pc, #564]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d4:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f023 0203 	bic.w	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4985      	ldr	r1, [pc, #532]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f2:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	497e      	ldr	r1, [pc, #504]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002910:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4976      	ldr	r1, [pc, #472]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292e:	4b72      	ldr	r3, [pc, #456]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f023 0210 	bic.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	496f      	ldr	r1, [pc, #444]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	4967      	ldr	r1, [pc, #412]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800296a:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f023 0220 	bic.w	r2, r3, #32
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4960      	ldr	r1, [pc, #384]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002988:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	4958      	ldr	r1, [pc, #352]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4951      	ldr	r1, [pc, #324]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4949      	ldr	r1, [pc, #292]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029e2:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4942      	ldr	r1, [pc, #264]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a00:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	493a      	ldr	r1, [pc, #232]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	4933      	ldr	r1, [pc, #204]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a3c:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	492b      	ldr	r1, [pc, #172]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4924      	ldr	r1, [pc, #144]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	491c      	ldr	r1, [pc, #112]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	4915      	ldr	r1, [pc, #84]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	490d      	ldr	r1, [pc, #52]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ade:	4906      	ldr	r1, [pc, #24]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00c      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002af0:	4b01      	ldr	r3, [pc, #4]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	e002      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	490b      	ldr	r1, [pc, #44]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3748      	adds	r7, #72	; 0x48
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000

08002b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e01d      	b.n	8002b86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fd ffd0 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f000 fc58 	bl	800342c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_TIM_Base_Start_IT+0x50>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_TIM_Base_Start_IT+0x42>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d007      	beq.n	8002bd2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	00010007 	.word	0x00010007

08002be4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e01d      	b.n	8002c32 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f815 	bl	8002c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	f000 fc02 	bl	800342c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	6839      	ldr	r1, [r7, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f820 	bl	8003ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a21      	ldr	r2, [pc, #132]	; (8002cf4 <HAL_TIM_PWM_Start+0xa4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d018      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x54>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_TIM_PWM_Start+0xa8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x54>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_TIM_PWM_Start+0xac>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00e      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x54>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_TIM_PWM_Start+0xb0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x54>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1b      	ldr	r2, [pc, #108]	; (8002d04 <HAL_TIM_PWM_Start+0xb4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x54>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_TIM_PWM_Start+0xb8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIM_PWM_Start+0x58>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_TIM_PWM_Start+0x5a>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_TIM_PWM_Start+0xbc>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d00b      	beq.n	8002ce8 <HAL_TIM_PWM_Start+0x98>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd6:	d007      	beq.n	8002ce8 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40013400 	.word	0x40013400
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40014400 	.word	0x40014400
 8002d04:	40014800 	.word	0x40014800
 8002d08:	40015000 	.word	0x40015000
 8002d0c:	00010007 	.word	0x00010007

08002d10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 ffc0 	bl	8003ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <HAL_TIM_PWM_Stop+0xd0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d018      	beq.n	8002d64 <HAL_TIM_PWM_Stop+0x54>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2b      	ldr	r2, [pc, #172]	; (8002de4 <HAL_TIM_PWM_Stop+0xd4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_TIM_PWM_Stop+0x54>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <HAL_TIM_PWM_Stop+0xd8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_TIM_PWM_Stop+0x54>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a28      	ldr	r2, [pc, #160]	; (8002dec <HAL_TIM_PWM_Stop+0xdc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_TIM_PWM_Stop+0x54>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <HAL_TIM_PWM_Stop+0xe0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_TIM_PWM_Stop+0x54>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a25      	ldr	r2, [pc, #148]	; (8002df4 <HAL_TIM_PWM_Stop+0xe4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d101      	bne.n	8002d68 <HAL_TIM_PWM_Stop+0x58>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_TIM_PWM_Stop+0x5a>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d017      	beq.n	8002d9e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <HAL_TIM_PWM_Stop+0x8e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	f240 4344 	movw	r3, #1092	; 0x444
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d107      	bne.n	8002d9e <HAL_TIM_PWM_Stop+0x8e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <HAL_TIM_PWM_Stop+0xbe>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	f240 4344 	movw	r3, #1092	; 0x444
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d107      	bne.n	8002dce <HAL_TIM_PWM_Stop+0xbe>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40013400 	.word	0x40013400
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40014400 	.word	0x40014400
 8002df0:	40014800 	.word	0x40014800
 8002df4:	40015000 	.word	0x40015000

08002df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0202 	mvn.w	r2, #2
 8002e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fad7 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fac9 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fada 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0204 	mvn.w	r2, #4
 8002e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 faad 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa9f 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fab0 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0208 	mvn.w	r2, #8
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa83 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa75 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fa86 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0210 	mvn.w	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fa59 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa4b 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa5c 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0201 	mvn.w	r2, #1
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fd82 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b80      	cmp	r3, #128	; 0x80
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 ff3c 	bl	8003e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d107      	bne.n	8002fd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 ff2f 	bl	8003e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d10e      	bne.n	8003002 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d107      	bne.n	8003002 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fa0a 	bl	8003416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b20      	cmp	r3, #32
 800300e:	d10e      	bne.n	800302e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b20      	cmp	r3, #32
 800301c:	d107      	bne.n	800302e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f06f 0220 	mvn.w	r2, #32
 8003026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 feef 	bl	8003e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800304e:	2302      	movs	r3, #2
 8003050:	e105      	b.n	800325e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b14      	cmp	r3, #20
 8003066:	f200 80f0 	bhi.w	800324a <HAL_TIM_PWM_ConfigChannel+0x212>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	080030c5 	.word	0x080030c5
 8003074:	0800324b 	.word	0x0800324b
 8003078:	0800324b 	.word	0x0800324b
 800307c:	0800324b 	.word	0x0800324b
 8003080:	08003105 	.word	0x08003105
 8003084:	0800324b 	.word	0x0800324b
 8003088:	0800324b 	.word	0x0800324b
 800308c:	0800324b 	.word	0x0800324b
 8003090:	08003147 	.word	0x08003147
 8003094:	0800324b 	.word	0x0800324b
 8003098:	0800324b 	.word	0x0800324b
 800309c:	0800324b 	.word	0x0800324b
 80030a0:	08003187 	.word	0x08003187
 80030a4:	0800324b 	.word	0x0800324b
 80030a8:	0800324b 	.word	0x0800324b
 80030ac:	0800324b 	.word	0x0800324b
 80030b0:	080031c9 	.word	0x080031c9
 80030b4:	0800324b 	.word	0x0800324b
 80030b8:	0800324b 	.word	0x0800324b
 80030bc:	0800324b 	.word	0x0800324b
 80030c0:	08003209 	.word	0x08003209
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fa4c 	bl	8003568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0208 	orr.w	r2, r2, #8
 80030de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	619a      	str	r2, [r3, #24]
      break;
 8003102:	e0a3      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fac6 	bl	800369c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6999      	ldr	r1, [r3, #24]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	619a      	str	r2, [r3, #24]
      break;
 8003144:	e082      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fb39 	bl	80037c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0208 	orr.w	r2, r2, #8
 8003160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0204 	bic.w	r2, r2, #4
 8003170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69d9      	ldr	r1, [r3, #28]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	61da      	str	r2, [r3, #28]
      break;
 8003184:	e062      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fbab 	bl	80038e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69d9      	ldr	r1, [r3, #28]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	021a      	lsls	r2, r3, #8
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	61da      	str	r2, [r3, #28]
      break;
 80031c6:	e041      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fbfa 	bl	80039c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003206:	e021      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc44 	bl	8003a9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	021a      	lsls	r2, r3, #8
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003248:	e000      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800324a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop

08003268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_TIM_ConfigClockSource+0x18>
 800327c:	2302      	movs	r3, #2
 800327e:	e0a8      	b.n	80033d2 <HAL_TIM_ConfigClockSource+0x16a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d067      	beq.n	800338c <HAL_TIM_ConfigClockSource+0x124>
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d80b      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x70>
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d073      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0x144>
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d802      	bhi.n	80032ce <HAL_TIM_ConfigClockSource+0x66>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d06f      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80032cc:	e078      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d06c      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0x144>
 80032d2:	2b30      	cmp	r3, #48	; 0x30
 80032d4:	d06a      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0x144>
      break;
 80032d6:	e073      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d00d      	beq.n	80032f8 <HAL_TIM_ConfigClockSource+0x90>
 80032dc:	2b70      	cmp	r3, #112	; 0x70
 80032de:	d804      	bhi.n	80032ea <HAL_TIM_ConfigClockSource+0x82>
 80032e0:	2b50      	cmp	r3, #80	; 0x50
 80032e2:	d033      	beq.n	800334c <HAL_TIM_ConfigClockSource+0xe4>
 80032e4:	2b60      	cmp	r3, #96	; 0x60
 80032e6:	d041      	beq.n	800336c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80032e8:	e06a      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d066      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x156>
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d017      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80032f6:	e063      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6899      	ldr	r1, [r3, #8]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f000 fcae 	bl	8003c68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800331a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	609a      	str	r2, [r3, #8]
      break;
 8003324:	e04c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f000 fc97 	bl	8003c68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003348:	609a      	str	r2, [r3, #8]
      break;
 800334a:	e039      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	461a      	mov	r2, r3
 800335a:	f000 fc0b 	bl	8003b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2150      	movs	r1, #80	; 0x50
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fc64 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 800336a:	e029      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	461a      	mov	r2, r3
 800337a:	f000 fc2a 	bl	8003bd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2160      	movs	r1, #96	; 0x60
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fc54 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 800338a:	e019      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	461a      	mov	r2, r3
 800339a:	f000 fbeb 	bl	8003b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2140      	movs	r1, #64	; 0x40
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fc44 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80033aa:	e009      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 fc3b 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80033bc:	e000      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80033be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a42      	ldr	r2, [pc, #264]	; (8003548 <TIM_Base_SetConfig+0x11c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344a:	d00f      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3f      	ldr	r2, [pc, #252]	; (800354c <TIM_Base_SetConfig+0x120>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00b      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3e      	ldr	r2, [pc, #248]	; (8003550 <TIM_Base_SetConfig+0x124>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3d      	ldr	r2, [pc, #244]	; (8003554 <TIM_Base_SetConfig+0x128>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <TIM_Base_SetConfig+0x12c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d108      	bne.n	800347e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a31      	ldr	r2, [pc, #196]	; (8003548 <TIM_Base_SetConfig+0x11c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <TIM_Base_SetConfig+0x9a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d01b      	beq.n	80034c6 <TIM_Base_SetConfig+0x9a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2e      	ldr	r2, [pc, #184]	; (800354c <TIM_Base_SetConfig+0x120>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d017      	beq.n	80034c6 <TIM_Base_SetConfig+0x9a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <TIM_Base_SetConfig+0x124>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <TIM_Base_SetConfig+0x9a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <TIM_Base_SetConfig+0x128>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00f      	beq.n	80034c6 <TIM_Base_SetConfig+0x9a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2c      	ldr	r2, [pc, #176]	; (800355c <TIM_Base_SetConfig+0x130>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <TIM_Base_SetConfig+0x9a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <TIM_Base_SetConfig+0x134>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <TIM_Base_SetConfig+0x9a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <TIM_Base_SetConfig+0x138>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_Base_SetConfig+0x9a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <TIM_Base_SetConfig+0x12c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d108      	bne.n	80034d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <TIM_Base_SetConfig+0x11c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <TIM_Base_SetConfig+0x100>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <TIM_Base_SetConfig+0x128>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00f      	beq.n	800352c <TIM_Base_SetConfig+0x100>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a13      	ldr	r2, [pc, #76]	; (800355c <TIM_Base_SetConfig+0x130>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00b      	beq.n	800352c <TIM_Base_SetConfig+0x100>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <TIM_Base_SetConfig+0x134>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_Base_SetConfig+0x100>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <TIM_Base_SetConfig+0x138>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_Base_SetConfig+0x100>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <TIM_Base_SetConfig+0x12c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d103      	bne.n	8003534 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	615a      	str	r2, [r3, #20]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40000400 	.word	0x40000400
 8003550:	40000800 	.word	0x40000800
 8003554:	40013400 	.word	0x40013400
 8003558:	40015000 	.word	0x40015000
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800

08003568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0201 	bic.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 0302 	bic.w	r3, r3, #2
 80035b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a30      	ldr	r2, [pc, #192]	; (8003684 <TIM_OC1_SetConfig+0x11c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <TIM_OC1_SetConfig+0x88>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <TIM_OC1_SetConfig+0x120>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00f      	beq.n	80035f0 <TIM_OC1_SetConfig+0x88>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a2e      	ldr	r2, [pc, #184]	; (800368c <TIM_OC1_SetConfig+0x124>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <TIM_OC1_SetConfig+0x88>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a2d      	ldr	r2, [pc, #180]	; (8003690 <TIM_OC1_SetConfig+0x128>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_OC1_SetConfig+0x88>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <TIM_OC1_SetConfig+0x12c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC1_SetConfig+0x88>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <TIM_OC1_SetConfig+0x130>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10c      	bne.n	800360a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0308 	bic.w	r3, r3, #8
 80035f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <TIM_OC1_SetConfig+0x11c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <TIM_OC1_SetConfig+0xd2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <TIM_OC1_SetConfig+0x120>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00f      	beq.n	800363a <TIM_OC1_SetConfig+0xd2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a1b      	ldr	r2, [pc, #108]	; (800368c <TIM_OC1_SetConfig+0x124>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00b      	beq.n	800363a <TIM_OC1_SetConfig+0xd2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <TIM_OC1_SetConfig+0x128>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <TIM_OC1_SetConfig+0xd2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a19      	ldr	r2, [pc, #100]	; (8003694 <TIM_OC1_SetConfig+0x12c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <TIM_OC1_SetConfig+0xd2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <TIM_OC1_SetConfig+0x130>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d111      	bne.n	800365e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40013400 	.word	0x40013400
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400
 8003694:	40014800 	.word	0x40014800
 8003698:	40015000 	.word	0x40015000

0800369c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0210 	bic.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0320 	bic.w	r3, r3, #32
 80036ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a2c      	ldr	r2, [pc, #176]	; (80037ac <TIM_OC2_SetConfig+0x110>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d007      	beq.n	8003710 <TIM_OC2_SetConfig+0x74>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <TIM_OC2_SetConfig+0x114>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_OC2_SetConfig+0x74>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a2a      	ldr	r2, [pc, #168]	; (80037b4 <TIM_OC2_SetConfig+0x118>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10d      	bne.n	800372c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800372a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <TIM_OC2_SetConfig+0x110>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <TIM_OC2_SetConfig+0xc0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <TIM_OC2_SetConfig+0x114>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00f      	beq.n	800375c <TIM_OC2_SetConfig+0xc0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <TIM_OC2_SetConfig+0x11c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00b      	beq.n	800375c <TIM_OC2_SetConfig+0xc0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <TIM_OC2_SetConfig+0x120>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d007      	beq.n	800375c <TIM_OC2_SetConfig+0xc0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <TIM_OC2_SetConfig+0x124>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <TIM_OC2_SetConfig+0xc0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <TIM_OC2_SetConfig+0x118>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d113      	bne.n	8003784 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003762:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800376a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40013400 	.word	0x40013400
 80037b4:	40015000 	.word	0x40015000
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400
 80037c0:	40014800 	.word	0x40014800

080037c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <TIM_OC3_SetConfig+0x10c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d007      	beq.n	8003836 <TIM_OC3_SetConfig+0x72>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <TIM_OC3_SetConfig+0x110>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d003      	beq.n	8003836 <TIM_OC3_SetConfig+0x72>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <TIM_OC3_SetConfig+0x114>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003850:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <TIM_OC3_SetConfig+0x10c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <TIM_OC3_SetConfig+0xbe>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <TIM_OC3_SetConfig+0x110>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00f      	beq.n	8003882 <TIM_OC3_SetConfig+0xbe>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <TIM_OC3_SetConfig+0x118>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00b      	beq.n	8003882 <TIM_OC3_SetConfig+0xbe>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <TIM_OC3_SetConfig+0x11c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <TIM_OC3_SetConfig+0xbe>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <TIM_OC3_SetConfig+0x120>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_OC3_SetConfig+0xbe>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <TIM_OC3_SetConfig+0x114>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d113      	bne.n	80038aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	621a      	str	r2, [r3, #32]
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40013400 	.word	0x40013400
 80038d8:	40015000 	.word	0x40015000
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800

080038e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	031b      	lsls	r3, r3, #12
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1a      	ldr	r2, [pc, #104]	; (80039b0 <TIM_OC4_SetConfig+0xc8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <TIM_OC4_SetConfig+0x8c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <TIM_OC4_SetConfig+0xcc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00f      	beq.n	8003974 <TIM_OC4_SetConfig+0x8c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <TIM_OC4_SetConfig+0xd0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_OC4_SetConfig+0x8c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <TIM_OC4_SetConfig+0xd4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_OC4_SetConfig+0x8c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <TIM_OC4_SetConfig+0xd8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC4_SetConfig+0x8c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <TIM_OC4_SetConfig+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d109      	bne.n	8003988 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800397a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	019b      	lsls	r3, r3, #6
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40013400 	.word	0x40013400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800
 80039c4:	40015000 	.word	0x40015000

080039c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <TIM_OC5_SetConfig+0xbc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <TIM_OC5_SetConfig+0x82>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <TIM_OC5_SetConfig+0xc0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00f      	beq.n	8003a4a <TIM_OC5_SetConfig+0x82>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <TIM_OC5_SetConfig+0xc4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <TIM_OC5_SetConfig+0x82>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <TIM_OC5_SetConfig+0xc8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <TIM_OC5_SetConfig+0x82>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <TIM_OC5_SetConfig+0xcc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_OC5_SetConfig+0x82>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <TIM_OC5_SetConfig+0xd0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d109      	bne.n	8003a5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	621a      	str	r2, [r3, #32]
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40013400 	.word	0x40013400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800
 8003a98:	40015000 	.word	0x40015000

08003a9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	051b      	lsls	r3, r3, #20
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <TIM_OC6_SetConfig+0xc0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_OC6_SetConfig+0x84>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <TIM_OC6_SetConfig+0xc4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00f      	beq.n	8003b20 <TIM_OC6_SetConfig+0x84>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <TIM_OC6_SetConfig+0xc8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_OC6_SetConfig+0x84>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <TIM_OC6_SetConfig+0xcc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_OC6_SetConfig+0x84>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <TIM_OC6_SetConfig+0xd0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_OC6_SetConfig+0x84>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <TIM_OC6_SetConfig+0xd4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d109      	bne.n	8003b34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	029b      	lsls	r3, r3, #10
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40013400 	.word	0x40013400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800
 8003b70:	40015000 	.word	0x40015000

08003b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0201 	bic.w	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 030a 	bic.w	r3, r3, #10
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0210 	bic.w	r2, r3, #16
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f043 0307 	orr.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2201      	movs	r2, #1
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	401a      	ands	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e06d      	b.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2d      	ldr	r2, [pc, #180]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d018      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d10c      	bne.n	8003dd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40013400 	.word	0x40013400
 8003dfc:	40015000 	.word	0x40015000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40014000 	.word	0x40014000

08003e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e040      	b.n	8003edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fc ff10 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f82c 	bl	8003ee4 <UART_SetConfig>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e022      	b.n	8003edc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa3a 	bl	8004318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fac1 	bl	800445c <UART_CheckIdleState>
 8003eda:	4603      	mov	r3, r0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4bac      	ldr	r3, [pc, #688]	; (80041c4 <UART_SetConfig+0x2e0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	6939      	ldr	r1, [r7, #16]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a9a      	ldr	r2, [pc, #616]	; (80041c8 <UART_SetConfig+0x2e4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d121      	bne.n	8003fa8 <UART_SetConfig+0xc4>
 8003f64:	4b99      	ldr	r3, [pc, #612]	; (80041cc <UART_SetConfig+0x2e8>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d817      	bhi.n	8003fa0 <UART_SetConfig+0xbc>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0x94>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f89 	.word	0x08003f89
 8003f7c:	08003f95 	.word	0x08003f95
 8003f80:	08003f9b 	.word	0x08003f9b
 8003f84:	08003f8f 	.word	0x08003f8f
 8003f88:	2301      	movs	r3, #1
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e0b2      	b.n	80040f4 <UART_SetConfig+0x210>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	77fb      	strb	r3, [r7, #31]
 8003f92:	e0af      	b.n	80040f4 <UART_SetConfig+0x210>
 8003f94:	2304      	movs	r3, #4
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e0ac      	b.n	80040f4 <UART_SetConfig+0x210>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	e0a9      	b.n	80040f4 <UART_SetConfig+0x210>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	bf00      	nop
 8003fa6:	e0a5      	b.n	80040f4 <UART_SetConfig+0x210>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a88      	ldr	r2, [pc, #544]	; (80041d0 <UART_SetConfig+0x2ec>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d123      	bne.n	8003ffa <UART_SetConfig+0x116>
 8003fb2:	4b86      	ldr	r3, [pc, #536]	; (80041cc <UART_SetConfig+0x2e8>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbe:	d012      	beq.n	8003fe6 <UART_SetConfig+0x102>
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d802      	bhi.n	8003fcc <UART_SetConfig+0xe8>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <UART_SetConfig+0xf6>
 8003fca:	e012      	b.n	8003ff2 <UART_SetConfig+0x10e>
 8003fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fd0:	d00c      	beq.n	8003fec <UART_SetConfig+0x108>
 8003fd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fd6:	d003      	beq.n	8003fe0 <UART_SetConfig+0xfc>
 8003fd8:	e00b      	b.n	8003ff2 <UART_SetConfig+0x10e>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e089      	b.n	80040f4 <UART_SetConfig+0x210>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e086      	b.n	80040f4 <UART_SetConfig+0x210>
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e083      	b.n	80040f4 <UART_SetConfig+0x210>
 8003fec:	2308      	movs	r3, #8
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e080      	b.n	80040f4 <UART_SetConfig+0x210>
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	bf00      	nop
 8003ff8:	e07c      	b.n	80040f4 <UART_SetConfig+0x210>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a75      	ldr	r2, [pc, #468]	; (80041d4 <UART_SetConfig+0x2f0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d123      	bne.n	800404c <UART_SetConfig+0x168>
 8004004:	4b71      	ldr	r3, [pc, #452]	; (80041cc <UART_SetConfig+0x2e8>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800400c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004010:	d012      	beq.n	8004038 <UART_SetConfig+0x154>
 8004012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004016:	d802      	bhi.n	800401e <UART_SetConfig+0x13a>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <UART_SetConfig+0x148>
 800401c:	e012      	b.n	8004044 <UART_SetConfig+0x160>
 800401e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004022:	d00c      	beq.n	800403e <UART_SetConfig+0x15a>
 8004024:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004028:	d003      	beq.n	8004032 <UART_SetConfig+0x14e>
 800402a:	e00b      	b.n	8004044 <UART_SetConfig+0x160>
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e060      	b.n	80040f4 <UART_SetConfig+0x210>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e05d      	b.n	80040f4 <UART_SetConfig+0x210>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e05a      	b.n	80040f4 <UART_SetConfig+0x210>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e057      	b.n	80040f4 <UART_SetConfig+0x210>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	bf00      	nop
 800404a:	e053      	b.n	80040f4 <UART_SetConfig+0x210>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a61      	ldr	r2, [pc, #388]	; (80041d8 <UART_SetConfig+0x2f4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d123      	bne.n	800409e <UART_SetConfig+0x1ba>
 8004056:	4b5d      	ldr	r3, [pc, #372]	; (80041cc <UART_SetConfig+0x2e8>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800405e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004062:	d012      	beq.n	800408a <UART_SetConfig+0x1a6>
 8004064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004068:	d802      	bhi.n	8004070 <UART_SetConfig+0x18c>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <UART_SetConfig+0x19a>
 800406e:	e012      	b.n	8004096 <UART_SetConfig+0x1b2>
 8004070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004074:	d00c      	beq.n	8004090 <UART_SetConfig+0x1ac>
 8004076:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800407a:	d003      	beq.n	8004084 <UART_SetConfig+0x1a0>
 800407c:	e00b      	b.n	8004096 <UART_SetConfig+0x1b2>
 800407e:	2300      	movs	r3, #0
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e037      	b.n	80040f4 <UART_SetConfig+0x210>
 8004084:	2302      	movs	r3, #2
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e034      	b.n	80040f4 <UART_SetConfig+0x210>
 800408a:	2304      	movs	r3, #4
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e031      	b.n	80040f4 <UART_SetConfig+0x210>
 8004090:	2308      	movs	r3, #8
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e02e      	b.n	80040f4 <UART_SetConfig+0x210>
 8004096:	2310      	movs	r3, #16
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	bf00      	nop
 800409c:	e02a      	b.n	80040f4 <UART_SetConfig+0x210>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a4e      	ldr	r2, [pc, #312]	; (80041dc <UART_SetConfig+0x2f8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d123      	bne.n	80040f0 <UART_SetConfig+0x20c>
 80040a8:	4b48      	ldr	r3, [pc, #288]	; (80041cc <UART_SetConfig+0x2e8>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80040b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b4:	d012      	beq.n	80040dc <UART_SetConfig+0x1f8>
 80040b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ba:	d802      	bhi.n	80040c2 <UART_SetConfig+0x1de>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <UART_SetConfig+0x1ec>
 80040c0:	e012      	b.n	80040e8 <UART_SetConfig+0x204>
 80040c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c6:	d00c      	beq.n	80040e2 <UART_SetConfig+0x1fe>
 80040c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040cc:	d003      	beq.n	80040d6 <UART_SetConfig+0x1f2>
 80040ce:	e00b      	b.n	80040e8 <UART_SetConfig+0x204>
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e00e      	b.n	80040f4 <UART_SetConfig+0x210>
 80040d6:	2302      	movs	r3, #2
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e00b      	b.n	80040f4 <UART_SetConfig+0x210>
 80040dc:	2304      	movs	r3, #4
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e008      	b.n	80040f4 <UART_SetConfig+0x210>
 80040e2:	2308      	movs	r3, #8
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e005      	b.n	80040f4 <UART_SetConfig+0x210>
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	bf00      	nop
 80040ee:	e001      	b.n	80040f4 <UART_SetConfig+0x210>
 80040f0:	2310      	movs	r3, #16
 80040f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	f040 8090 	bne.w	8004220 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004100:	7ffb      	ldrb	r3, [r7, #31]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d86c      	bhi.n	80041e0 <UART_SetConfig+0x2fc>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x228>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004131 	.word	0x08004131
 8004110:	08004151 	.word	0x08004151
 8004114:	08004171 	.word	0x08004171
 8004118:	080041e1 	.word	0x080041e1
 800411c:	0800418d 	.word	0x0800418d
 8004120:	080041e1 	.word	0x080041e1
 8004124:	080041e1 	.word	0x080041e1
 8004128:	080041e1 	.word	0x080041e1
 800412c:	080041ad 	.word	0x080041ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe fa6e 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8004134:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	005a      	lsls	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	441a      	add	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	61bb      	str	r3, [r7, #24]
        break;
 800414e:	e04a      	b.n	80041e6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004150:	f7fe fa80 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8004154:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	005a      	lsls	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	fbb2 f3f3 	udiv	r3, r2, r3
 800416a:	b29b      	uxth	r3, r3
 800416c:	61bb      	str	r3, [r7, #24]
        break;
 800416e:	e03a      	b.n	80041e6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800417a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6852      	ldr	r2, [r2, #4]
 8004182:	fbb3 f3f2 	udiv	r3, r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	61bb      	str	r3, [r7, #24]
        break;
 800418a:	e02c      	b.n	80041e6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418c:	f7fe f9ca 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 8004190:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	005a      	lsls	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	441a      	add	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	61bb      	str	r3, [r7, #24]
        break;
 80041aa:	e01c      	b.n	80041e6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	b29b      	uxth	r3, r3
 80041c0:	61bb      	str	r3, [r7, #24]
        break;
 80041c2:	e010      	b.n	80041e6 <UART_SetConfig+0x302>
 80041c4:	efff69f3 	.word	0xefff69f3
 80041c8:	40013800 	.word	0x40013800
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40004400 	.word	0x40004400
 80041d4:	40004800 	.word	0x40004800
 80041d8:	40004c00 	.word	0x40004c00
 80041dc:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	75fb      	strb	r3, [r7, #23]
        break;
 80041e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d916      	bls.n	800421a <UART_SetConfig+0x336>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d212      	bcs.n	800421a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f023 030f 	bic.w	r3, r3, #15
 80041fc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	b29a      	uxth	r2, r3
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	4313      	orrs	r3, r2
 800420e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	897a      	ldrh	r2, [r7, #10]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	e072      	b.n	8004300 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
 800421e:	e06f      	b.n	8004300 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004220:	7ffb      	ldrb	r3, [r7, #31]
 8004222:	2b08      	cmp	r3, #8
 8004224:	d85b      	bhi.n	80042de <UART_SetConfig+0x3fa>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0x348>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	08004251 	.word	0x08004251
 8004230:	0800426f 	.word	0x0800426f
 8004234:	0800428d 	.word	0x0800428d
 8004238:	080042df 	.word	0x080042df
 800423c:	080042a9 	.word	0x080042a9
 8004240:	080042df 	.word	0x080042df
 8004244:	080042df 	.word	0x080042df
 8004248:	080042df 	.word	0x080042df
 800424c:	080042c7 	.word	0x080042c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe f9de 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8004254:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	085a      	lsrs	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	441a      	add	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	b29b      	uxth	r3, r3
 800426a:	61bb      	str	r3, [r7, #24]
        break;
 800426c:	e03a      	b.n	80042e4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800426e:	f7fe f9f1 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8004272:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	085a      	lsrs	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	441a      	add	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	b29b      	uxth	r3, r3
 8004288:	61bb      	str	r3, [r7, #24]
        break;
 800428a:	e02b      	b.n	80042e4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004296:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6852      	ldr	r2, [r2, #4]
 800429e:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	61bb      	str	r3, [r7, #24]
        break;
 80042a6:	e01d      	b.n	80042e4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a8:	f7fe f93c 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80042ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	085a      	lsrs	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	441a      	add	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	61bb      	str	r3, [r7, #24]
        break;
 80042c4:	e00e      	b.n	80042e4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	b29b      	uxth	r3, r3
 80042da:	61bb      	str	r3, [r7, #24]
        break;
 80042dc:	e002      	b.n	80042e4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
        break;
 80042e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b0f      	cmp	r3, #15
 80042e8:	d908      	bls.n	80042fc <UART_SetConfig+0x418>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d204      	bcs.n	80042fc <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	e001      	b.n	8004300 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800430c:	7dfb      	ldrb	r3, [r7, #23]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01a      	beq.n	800442e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004416:	d10a      	bne.n	800442e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800446a:	f7fc fd39 	bl	8000ee0 <HAL_GetTick>
 800446e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b08      	cmp	r3, #8
 800447c:	d10e      	bne.n	800449c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800447e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f82a 	bl	80044e6 <UART_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e020      	b.n	80044de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d10e      	bne.n	80044c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f814 	bl	80044e6 <UART_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e00a      	b.n	80044de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f6:	e05d      	b.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d059      	beq.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004500:	f7fc fcee 	bl	8000ee0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <UART_WaitOnFlagUntilTimeout+0x30>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11b      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004524:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e042      	b.n	80045d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d02b      	beq.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456a:	d123      	bne.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004574:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004584:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e00f      	b.n	80045d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4013      	ands	r3, r2
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d092      	beq.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a07      	ldr	r2, [pc, #28]	; (8004608 <vApplicationGetIdleTaskMemory+0x2c>)
 80045ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a06      	ldr	r2, [pc, #24]	; (800460c <vApplicationGetIdleTaskMemory+0x30>)
 80045f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2280      	movs	r2, #128	; 0x80
 80045f8:	601a      	str	r2, [r3, #0]
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	200014ac 	.word	0x200014ac
 800460c:	20001508 	.word	0x20001508

08004610 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <vApplicationGetTimerTaskMemory+0x2c>)
 8004620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4a06      	ldr	r2, [pc, #24]	; (8004640 <vApplicationGetTimerTaskMemory+0x30>)
 8004626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800462e:	601a      	str	r2, [r3, #0]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	20001708 	.word	0x20001708
 8004640:	20001764 	.word	0x20001764

08004644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f103 0208 	add.w	r2, r3, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f04f 32ff 	mov.w	r2, #4294967295
 800465c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f103 0208 	add.w	r2, r3, #8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f103 0208 	add.w	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d103      	bne.n	8004706 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e00c      	b.n	8004720 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3308      	adds	r3, #8
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e002      	b.n	8004714 <vListInsert+0x2e>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	d2f6      	bcs.n	800470e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6892      	ldr	r2, [r2, #8]
 800476e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6852      	ldr	r2, [r2, #4]
 8004778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d103      	bne.n	800478c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	1e5a      	subs	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	e7fe      	b.n	80047d2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80047d4:	f001 ffd2 	bl	800677c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	68f9      	ldr	r1, [r7, #12]
 80047e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	441a      	add	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	3b01      	subs	r3, #1
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	441a      	add	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	22ff      	movs	r2, #255	; 0xff
 8004818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	22ff      	movs	r2, #255	; 0xff
 8004820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d114      	bne.n	8004854 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01a      	beq.n	8004868 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3310      	adds	r3, #16
 8004836:	4618      	mov	r0, r3
 8004838:	f001 f8d2 	bl	80059e0 <xTaskRemoveFromEventList>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d012      	beq.n	8004868 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <xQueueGenericReset+0xcc>)
 8004844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	e009      	b.n	8004868 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3310      	adds	r3, #16
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fef3 	bl	8004644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3324      	adds	r3, #36	; 0x24
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff feee 	bl	8004644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004868:	f001 ffb6 	bl	80067d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800486c:	2301      	movs	r3, #1
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08e      	sub	sp, #56	; 0x38
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <xQueueGenericCreateStatic+0x28>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a2:	e7fe      	b.n	80048a2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <xQueueGenericCreateStatic+0x42>
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <xQueueGenericCreateStatic+0x4e>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <xQueueGenericCreateStatic+0x52>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <xQueueGenericCreateStatic+0x54>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <xQueueGenericCreateStatic+0x6c>
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	e7fe      	b.n	80048e6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <xQueueGenericCreateStatic+0x78>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <xQueueGenericCreateStatic+0x7c>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <xQueueGenericCreateStatic+0x7e>
 80048f8:	2300      	movs	r3, #0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <xQueueGenericCreateStatic+0x96>
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e7fe      	b.n	8004910 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004912:	2350      	movs	r3, #80	; 0x50
 8004914:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b50      	cmp	r3, #80	; 0x50
 800491a:	d009      	beq.n	8004930 <xQueueGenericCreateStatic+0xb4>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	e7fe      	b.n	800492e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00d      	beq.n	8004956 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004942:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f842 	bl	80049da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004958:	4618      	mov	r0, r3
 800495a:	3730      	adds	r7, #48	; 0x30
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <xQueueGenericCreate+0x28>
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	e7fe      	b.n	8004986 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e004      	b.n	800499e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3350      	adds	r3, #80	; 0x50
 80049a2:	4618      	mov	r0, r3
 80049a4:	f002 f804 	bl	80069b0 <pvPortMalloc>
 80049a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00f      	beq.n	80049d0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	3350      	adds	r3, #80	; 0x50
 80049b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049be:	79fa      	ldrb	r2, [r7, #7]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f805 	bl	80049da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049d0:	69bb      	ldr	r3, [r7, #24]
	}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e002      	b.n	80049fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a08:	2101      	movs	r1, #1
 8004a0a:	69b8      	ldr	r0, [r7, #24]
 8004a0c:	f7ff fece 	bl	80047ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08e      	sub	sp, #56	; 0x38
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <xQueueGenericSend+0x30>
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4e:	e7fe      	b.n	8004a4e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <xQueueGenericSend+0x3e>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <xQueueGenericSend+0x42>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <xQueueGenericSend+0x44>
 8004a62:	2300      	movs	r3, #0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d109      	bne.n	8004a7c <xQueueGenericSend+0x5c>
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	e7fe      	b.n	8004a7a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d103      	bne.n	8004a8a <xQueueGenericSend+0x6a>
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <xQueueGenericSend+0x6e>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <xQueueGenericSend+0x70>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <xQueueGenericSend+0x88>
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	e7fe      	b.n	8004aa6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aa8:	f001 f956 	bl	8005d58 <xTaskGetSchedulerState>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <xQueueGenericSend+0x98>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <xQueueGenericSend+0x9c>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <xQueueGenericSend+0x9e>
 8004abc:	2300      	movs	r3, #0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <xQueueGenericSend+0xb6>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ad6:	f001 fe51 	bl	800677c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <xQueueGenericSend+0xcc>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d129      	bne.n	8004b40 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004af2:	f000 f9ff 	bl	8004ef4 <prvCopyDataToQueue>
 8004af6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d010      	beq.n	8004b22 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 ff6b 	bl	80059e0 <xTaskRemoveFromEventList>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b10:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <xQueueGenericSend+0x1f0>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	e00a      	b.n	8004b38 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b28:	4b39      	ldr	r3, [pc, #228]	; (8004c10 <xQueueGenericSend+0x1f0>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b38:	f001 fe4e 	bl	80067d8 <vPortExitCritical>
				return pdPASS;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e063      	b.n	8004c08 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b46:	f001 fe47 	bl	80067d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e05c      	b.n	8004c08 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 ffa3 	bl	8005aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b62:	f001 fe39 	bl	80067d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b66:	f000 fd19 	bl	800559c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b6a:	f001 fe07 	bl	800677c <vPortEnterCritical>
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b74:	b25b      	sxtb	r3, r3
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d103      	bne.n	8004b84 <xQueueGenericSend+0x164>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b8a:	b25b      	sxtb	r3, r3
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d103      	bne.n	8004b9a <xQueueGenericSend+0x17a>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9a:	f001 fe1d 	bl	80067d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b9e:	1d3a      	adds	r2, r7, #4
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 ff92 	bl	8005ad0 <xTaskCheckForTimeOut>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d124      	bne.n	8004bfc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb4:	f000 fa96 	bl	80050e4 <prvIsQueueFull>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d018      	beq.n	8004bf0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	3310      	adds	r3, #16
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 febc 	bl	8005944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bce:	f000 fa21 	bl	8005014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bd2:	f000 fcf1 	bl	80055b8 <xTaskResumeAll>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f af7c 	bne.w	8004ad6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <xQueueGenericSend+0x1f0>)
 8004be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	e772      	b.n	8004ad6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bf2:	f000 fa0f 	bl	8005014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bf6:	f000 fcdf 	bl	80055b8 <xTaskResumeAll>
 8004bfa:	e76c      	b.n	8004ad6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfe:	f000 fa09 	bl	8005014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c02:	f000 fcd9 	bl	80055b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c06:	2300      	movs	r3, #0
		}
	}
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3738      	adds	r7, #56	; 0x38
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08e      	sub	sp, #56	; 0x38
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <xQueueGenericSendFromISR+0x2c>
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3e:	e7fe      	b.n	8004c3e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <xQueueGenericSendFromISR+0x3a>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <xQueueGenericSendFromISR+0x3e>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <xQueueGenericSendFromISR+0x40>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <xQueueGenericSendFromISR+0x58>
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	e7fe      	b.n	8004c6a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d103      	bne.n	8004c7a <xQueueGenericSendFromISR+0x66>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <xQueueGenericSendFromISR+0x6a>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <xQueueGenericSendFromISR+0x6c>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <xQueueGenericSendFromISR+0x84>
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	e7fe      	b.n	8004c96 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c98:	f001 fe4c 	bl	8006934 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c9c:	f3ef 8211 	mrs	r2, BASEPRI
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	61ba      	str	r2, [r7, #24]
 8004cb2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <xQueueGenericSendFromISR+0xb6>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d12c      	bne.n	8004d24 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cda:	f000 f90b 	bl	8004ef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cde:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d112      	bne.n	8004d0e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d016      	beq.n	8004d1e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	3324      	adds	r3, #36	; 0x24
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fe73 	bl	80059e0 <xTaskRemoveFromEventList>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e007      	b.n	8004d1e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d12:	3301      	adds	r3, #1
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	b25a      	sxtb	r2, r3
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004d22:	e001      	b.n	8004d28 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3738      	adds	r7, #56	; 0x38
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08c      	sub	sp, #48	; 0x30
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <xQueueReceive+0x2e>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	e7fe      	b.n	8004d68 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <xQueueReceive+0x3c>
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <xQueueReceive+0x40>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <xQueueReceive+0x42>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <xQueueReceive+0x5a>
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e7fe      	b.n	8004d94 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d96:	f000 ffdf 	bl	8005d58 <xTaskGetSchedulerState>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <xQueueReceive+0x6a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <xQueueReceive+0x6e>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueReceive+0x70>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <xQueueReceive+0x88>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dc4:	f001 fcda 	bl	800677c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01f      	beq.n	8004e14 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd8:	f000 f8f6 	bl	8004fc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	1e5a      	subs	r2, r3, #1
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	3310      	adds	r3, #16
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fdf5 	bl	80059e0 <xTaskRemoveFromEventList>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dfc:	4b3c      	ldr	r3, [pc, #240]	; (8004ef0 <xQueueReceive+0x1b4>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e0c:	f001 fce4 	bl	80067d8 <vPortExitCritical>
				return pdPASS;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e069      	b.n	8004ee8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e1a:	f001 fcdd 	bl	80067d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e062      	b.n	8004ee8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d106      	bne.n	8004e36 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fe39 	bl	8005aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e32:	2301      	movs	r3, #1
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e36:	f001 fccf 	bl	80067d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e3a:	f000 fbaf 	bl	800559c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e3e:	f001 fc9d 	bl	800677c <vPortEnterCritical>
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d103      	bne.n	8004e58 <xQueueReceive+0x11c>
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5e:	b25b      	sxtb	r3, r3
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d103      	bne.n	8004e6e <xQueueReceive+0x132>
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e6e:	f001 fcb3 	bl	80067d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e72:	1d3a      	adds	r2, r7, #4
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fe28 	bl	8005ad0 <xTaskCheckForTimeOut>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d123      	bne.n	8004ece <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e88:	f000 f916 	bl	80050b8 <prvIsQueueEmpty>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d017      	beq.n	8004ec2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	3324      	adds	r3, #36	; 0x24
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fd52 	bl	8005944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea2:	f000 f8b7 	bl	8005014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ea6:	f000 fb87 	bl	80055b8 <xTaskResumeAll>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d189      	bne.n	8004dc4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <xQueueReceive+0x1b4>)
 8004eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	e780      	b.n	8004dc4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec4:	f000 f8a6 	bl	8005014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec8:	f000 fb76 	bl	80055b8 <xTaskResumeAll>
 8004ecc:	e77a      	b.n	8004dc4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed0:	f000 f8a0 	bl	8005014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ed4:	f000 fb70 	bl	80055b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eda:	f000 f8ed 	bl	80050b8 <prvIsQueueEmpty>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f43f af6f 	beq.w	8004dc4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ee6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3730      	adds	r7, #48	; 0x30
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d14d      	bne.n	8004fb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 ff38 	bl	8005d94 <xTaskPriorityDisinherit>
 8004f24:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	605a      	str	r2, [r3, #4]
 8004f2c:	e043      	b.n	8004fb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d119      	bne.n	8004f68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6898      	ldr	r0, [r3, #8]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	f001 ff30 	bl	8006da4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d32b      	bcc.n	8004fb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	609a      	str	r2, [r3, #8]
 8004f66:	e026      	b.n	8004fb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68d8      	ldr	r0, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	461a      	mov	r2, r3
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	f001 ff16 	bl	8006da4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	425b      	negs	r3, r3
 8004f82:	441a      	add	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d207      	bcs.n	8004fa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	425b      	negs	r3, r3
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d105      	bne.n	8004fb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fbe:	697b      	ldr	r3, [r7, #20]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d018      	beq.n	800500c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	441a      	add	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d303      	bcc.n	8004ffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68d9      	ldr	r1, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	461a      	mov	r2, r3
 8005006:	6838      	ldr	r0, [r7, #0]
 8005008:	f001 fecc 	bl	8006da4 <memcpy>
	}
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800501c:	f001 fbae 	bl	800677c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005028:	e011      	b.n	800504e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d012      	beq.n	8005058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3324      	adds	r3, #36	; 0x24
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fcd2 	bl	80059e0 <xTaskRemoveFromEventList>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005042:	f000 fda5 	bl	8005b90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	3b01      	subs	r3, #1
 800504a:	b2db      	uxtb	r3, r3
 800504c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800504e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005052:	2b00      	cmp	r3, #0
 8005054:	dce9      	bgt.n	800502a <prvUnlockQueue+0x16>
 8005056:	e000      	b.n	800505a <prvUnlockQueue+0x46>
					break;
 8005058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005062:	f001 fbb9 	bl	80067d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005066:	f001 fb89 	bl	800677c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005072:	e011      	b.n	8005098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d012      	beq.n	80050a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3310      	adds	r3, #16
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fcad 	bl	80059e0 <xTaskRemoveFromEventList>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800508c:	f000 fd80 	bl	8005b90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	3b01      	subs	r3, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dce9      	bgt.n	8005074 <prvUnlockQueue+0x60>
 80050a0:	e000      	b.n	80050a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	22ff      	movs	r2, #255	; 0xff
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050ac:	f001 fb94 	bl	80067d8 <vPortExitCritical>
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050c0:	f001 fb5c 	bl	800677c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e001      	b.n	80050d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050d6:	f001 fb7f 	bl	80067d8 <vPortExitCritical>

	return xReturn;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050ec:	f001 fb46 	bl	800677c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d102      	bne.n	8005102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e001      	b.n	8005106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005106:	f001 fb67 	bl	80067d8 <vPortExitCritical>

	return xReturn;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e014      	b.n	800514e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005124:	4a0e      	ldr	r2, [pc, #56]	; (8005160 <vQueueAddToRegistry+0x4c>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005130:	490b      	ldr	r1, [pc, #44]	; (8005160 <vQueueAddToRegistry+0x4c>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800513a:	4a09      	ldr	r2, [pc, #36]	; (8005160 <vQueueAddToRegistry+0x4c>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005146:	e005      	b.n	8005154 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b07      	cmp	r3, #7
 8005152:	d9e7      	bls.n	8005124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20002df4 	.word	0x20002df4

08005164 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005174:	f001 fb02 	bl	800677c <vPortEnterCritical>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800517e:	b25b      	sxtb	r3, r3
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d103      	bne.n	800518e <vQueueWaitForMessageRestricted+0x2a>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005194:	b25b      	sxtb	r3, r3
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d103      	bne.n	80051a4 <vQueueWaitForMessageRestricted+0x40>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a4:	f001 fb18 	bl	80067d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	3324      	adds	r3, #36	; 0x24
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fbe7 	bl	800598c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051be:	6978      	ldr	r0, [r7, #20]
 80051c0:	f7ff ff28 	bl	8005014 <prvUnlockQueue>
	}
 80051c4:	bf00      	nop
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08e      	sub	sp, #56	; 0x38
 80051d0:	af04      	add	r7, sp, #16
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <xTaskCreateStatic+0x28>
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	e7fe      	b.n	80051f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <xTaskCreateStatic+0x42>
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	e7fe      	b.n	800520c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800520e:	235c      	movs	r3, #92	; 0x5c
 8005210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b5c      	cmp	r3, #92	; 0x5c
 8005216:	d009      	beq.n	800522c <xTaskCreateStatic+0x60>
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	e7fe      	b.n	800522a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01e      	beq.n	8005270 <xTaskCreateStatic+0xa4>
 8005232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01b      	beq.n	8005270 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005240:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	2202      	movs	r2, #2
 8005246:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800524a:	2300      	movs	r3, #0
 800524c:	9303      	str	r3, [sp, #12]
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	9302      	str	r3, [sp, #8]
 8005252:	f107 0314 	add.w	r3, r7, #20
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f80b 	bl	800527e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800526a:	f000 f88f 	bl	800538c <prvAddNewTaskToReadyList>
 800526e:	e001      	b.n	8005274 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005274:	697b      	ldr	r3, [r7, #20]
	}
 8005276:	4618      	mov	r0, r3
 8005278:	3728      	adds	r7, #40	; 0x28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	461a      	mov	r2, r3
 8005296:	21a5      	movs	r1, #165	; 0xa5
 8005298:	f001 fd8f 	bl	8006dba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052a6:	3b01      	subs	r3, #1
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f023 0307 	bic.w	r3, r3, #7
 80052b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <prvInitialiseNewTask+0x56>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e7fe      	b.n	80052d2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	e012      	b.n	8005300 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	7819      	ldrb	r1, [r3, #0]
 80052e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	3334      	adds	r3, #52	; 0x34
 80052ea:	460a      	mov	r2, r1
 80052ec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3301      	adds	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b0f      	cmp	r3, #15
 8005304:	d9e9      	bls.n	80052da <prvInitialiseNewTask+0x5c>
 8005306:	e000      	b.n	800530a <prvInitialiseNewTask+0x8c>
		{
			break;
 8005308:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2b37      	cmp	r3, #55	; 0x37
 8005316:	d901      	bls.n	800531c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005318:	2337      	movs	r3, #55	; 0x37
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005326:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2200      	movs	r2, #0
 800532c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	3304      	adds	r3, #4
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff f9a6 	bl	8004684 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	3318      	adds	r3, #24
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff f9a1 	bl	8004684 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005356:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2200      	movs	r2, #0
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	69b8      	ldr	r0, [r7, #24]
 800536c:	f001 f8dc 	bl	8006528 <pxPortInitialiseStack>
 8005370:	4602      	mov	r2, r0
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005382:	bf00      	nop
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005394:	f001 f9f2 	bl	800677c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <prvAddNewTaskToReadyList+0xc4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3301      	adds	r3, #1
 800539e:	4a2c      	ldr	r2, [pc, #176]	; (8005450 <prvAddNewTaskToReadyList+0xc4>)
 80053a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053a2:	4b2c      	ldr	r3, [pc, #176]	; (8005454 <prvAddNewTaskToReadyList+0xc8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053aa:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <prvAddNewTaskToReadyList+0xc8>)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053b0:	4b27      	ldr	r3, [pc, #156]	; (8005450 <prvAddNewTaskToReadyList+0xc4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d110      	bne.n	80053da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053b8:	f000 fc0e 	bl	8005bd8 <prvInitialiseTaskLists>
 80053bc:	e00d      	b.n	80053da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053be:	4b26      	ldr	r3, [pc, #152]	; (8005458 <prvAddNewTaskToReadyList+0xcc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053c6:	4b23      	ldr	r3, [pc, #140]	; (8005454 <prvAddNewTaskToReadyList+0xc8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d802      	bhi.n	80053da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053d4:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <prvAddNewTaskToReadyList+0xc8>)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053da:	4b20      	ldr	r3, [pc, #128]	; (800545c <prvAddNewTaskToReadyList+0xd0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3301      	adds	r3, #1
 80053e0:	4a1e      	ldr	r2, [pc, #120]	; (800545c <prvAddNewTaskToReadyList+0xd0>)
 80053e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053e4:	4b1d      	ldr	r3, [pc, #116]	; (800545c <prvAddNewTaskToReadyList+0xd0>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <prvAddNewTaskToReadyList+0xd4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d903      	bls.n	8005400 <prvAddNewTaskToReadyList+0x74>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	4a18      	ldr	r2, [pc, #96]	; (8005460 <prvAddNewTaskToReadyList+0xd4>)
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <prvAddNewTaskToReadyList+0xd8>)
 800540e:	441a      	add	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f7ff f941 	bl	800469e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800541c:	f001 f9dc 	bl	80067d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005420:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <prvAddNewTaskToReadyList+0xcc>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00e      	beq.n	8005446 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <prvAddNewTaskToReadyList+0xc8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	429a      	cmp	r2, r3
 8005434:	d207      	bcs.n	8005446 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <prvAddNewTaskToReadyList+0xdc>)
 8005438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20002038 	.word	0x20002038
 8005454:	20001b64 	.word	0x20001b64
 8005458:	20002044 	.word	0x20002044
 800545c:	20002054 	.word	0x20002054
 8005460:	20002040 	.word	0x20002040
 8005464:	20001b68 	.word	0x20001b68
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <vTaskDelay+0x60>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <vTaskDelay+0x2e>
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	e7fe      	b.n	8005498 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800549a:	f000 f87f 	bl	800559c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800549e:	2100      	movs	r1, #0
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fce3 	bl	8005e6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054a6:	f000 f887 	bl	80055b8 <xTaskResumeAll>
 80054aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <vTaskDelay+0x64>)
 80054b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20002060 	.word	0x20002060
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054e2:	463a      	mov	r2, r7
 80054e4:	1d39      	adds	r1, r7, #4
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff f876 	bl	80045dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	9202      	str	r2, [sp, #8]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	2300      	movs	r3, #0
 8005500:	460a      	mov	r2, r1
 8005502:	4920      	ldr	r1, [pc, #128]	; (8005584 <vTaskStartScheduler+0xb0>)
 8005504:	4820      	ldr	r0, [pc, #128]	; (8005588 <vTaskStartScheduler+0xb4>)
 8005506:	f7ff fe61 	bl	80051cc <xTaskCreateStatic>
 800550a:	4602      	mov	r2, r0
 800550c:	4b1f      	ldr	r3, [pc, #124]	; (800558c <vTaskStartScheduler+0xb8>)
 800550e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005510:	4b1e      	ldr	r3, [pc, #120]	; (800558c <vTaskStartScheduler+0xb8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005518:	2301      	movs	r3, #1
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e001      	b.n	8005522 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d102      	bne.n	800552e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005528:	f000 fcf4 	bl	8005f14 <xTimerCreateTimerTask>
 800552c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d115      	bne.n	8005560 <vTaskStartScheduler+0x8c>
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <vTaskStartScheduler+0xbc>)
 8005548:	f04f 32ff 	mov.w	r2, #4294967295
 800554c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800554e:	4b11      	ldr	r3, [pc, #68]	; (8005594 <vTaskStartScheduler+0xc0>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005554:	4b10      	ldr	r3, [pc, #64]	; (8005598 <vTaskStartScheduler+0xc4>)
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800555a:	f001 f871 	bl	8006640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800555e:	e00d      	b.n	800557c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d109      	bne.n	800557c <vTaskStartScheduler+0xa8>
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e7fe      	b.n	800557a <vTaskStartScheduler+0xa6>
}
 800557c:	bf00      	nop
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	08006dec 	.word	0x08006dec
 8005588:	08005ba9 	.word	0x08005ba9
 800558c:	2000205c 	.word	0x2000205c
 8005590:	20002058 	.word	0x20002058
 8005594:	20002044 	.word	0x20002044
 8005598:	2000203c 	.word	0x2000203c

0800559c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055a0:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <vTaskSuspendAll+0x18>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	4a03      	ldr	r2, [pc, #12]	; (80055b4 <vTaskSuspendAll+0x18>)
 80055a8:	6013      	str	r3, [r2, #0]
}
 80055aa:	bf00      	nop
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	20002060 	.word	0x20002060

080055b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <xTaskResumeAll+0x114>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <xTaskResumeAll+0x2a>
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	e7fe      	b.n	80055e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055e2:	f001 f8cb 	bl	800677c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055e6:	4b39      	ldr	r3, [pc, #228]	; (80056cc <xTaskResumeAll+0x114>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	4a37      	ldr	r2, [pc, #220]	; (80056cc <xTaskResumeAll+0x114>)
 80055ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f0:	4b36      	ldr	r3, [pc, #216]	; (80056cc <xTaskResumeAll+0x114>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d162      	bne.n	80056be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055f8:	4b35      	ldr	r3, [pc, #212]	; (80056d0 <xTaskResumeAll+0x118>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d05e      	beq.n	80056be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005600:	e02f      	b.n	8005662 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005602:	4b34      	ldr	r3, [pc, #208]	; (80056d4 <xTaskResumeAll+0x11c>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3318      	adds	r3, #24
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff f8a2 	bl	8004758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3304      	adds	r3, #4
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff f89d 	bl	8004758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005622:	4b2d      	ldr	r3, [pc, #180]	; (80056d8 <xTaskResumeAll+0x120>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d903      	bls.n	8005632 <xTaskResumeAll+0x7a>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <xTaskResumeAll+0x120>)
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a27      	ldr	r2, [pc, #156]	; (80056dc <xTaskResumeAll+0x124>)
 8005640:	441a      	add	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f7ff f828 	bl	800469e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005652:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <xTaskResumeAll+0x128>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800565c:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <xTaskResumeAll+0x12c>)
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <xTaskResumeAll+0x11c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1cb      	bne.n	8005602 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005670:	f000 fb4c 	bl	8005d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005674:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <xTaskResumeAll+0x130>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d010      	beq.n	80056a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005680:	f000 f846 	bl	8005710 <xTaskIncrementTick>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800568a:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <xTaskResumeAll+0x12c>)
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3b01      	subs	r3, #1
 8005694:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f1      	bne.n	8005680 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800569c:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <xTaskResumeAll+0x130>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <xTaskResumeAll+0x12c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056ae:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <xTaskResumeAll+0x134>)
 80056b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056be:	f001 f88b 	bl	80067d8 <vPortExitCritical>

	return xAlreadyYielded;
 80056c2:	68bb      	ldr	r3, [r7, #8]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20002060 	.word	0x20002060
 80056d0:	20002038 	.word	0x20002038
 80056d4:	20001ff8 	.word	0x20001ff8
 80056d8:	20002040 	.word	0x20002040
 80056dc:	20001b68 	.word	0x20001b68
 80056e0:	20001b64 	.word	0x20001b64
 80056e4:	2000204c 	.word	0x2000204c
 80056e8:	20002048 	.word	0x20002048
 80056ec:	e000ed04 	.word	0xe000ed04

080056f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <xTaskGetTickCount+0x1c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056fc:	687b      	ldr	r3, [r7, #4]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	2000203c 	.word	0x2000203c

08005710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571a:	4b51      	ldr	r3, [pc, #324]	; (8005860 <xTaskIncrementTick+0x150>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 808d 	bne.w	800583e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005724:	4b4f      	ldr	r3, [pc, #316]	; (8005864 <xTaskIncrementTick+0x154>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800572c:	4a4d      	ldr	r2, [pc, #308]	; (8005864 <xTaskIncrementTick+0x154>)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11f      	bne.n	8005778 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005738:	4b4b      	ldr	r3, [pc, #300]	; (8005868 <xTaskIncrementTick+0x158>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <xTaskIncrementTick+0x46>
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	e7fe      	b.n	8005754 <xTaskIncrementTick+0x44>
 8005756:	4b44      	ldr	r3, [pc, #272]	; (8005868 <xTaskIncrementTick+0x158>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	4b43      	ldr	r3, [pc, #268]	; (800586c <xTaskIncrementTick+0x15c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a41      	ldr	r2, [pc, #260]	; (8005868 <xTaskIncrementTick+0x158>)
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4a41      	ldr	r2, [pc, #260]	; (800586c <xTaskIncrementTick+0x15c>)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	4b41      	ldr	r3, [pc, #260]	; (8005870 <xTaskIncrementTick+0x160>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3301      	adds	r3, #1
 8005770:	4a3f      	ldr	r2, [pc, #252]	; (8005870 <xTaskIncrementTick+0x160>)
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	f000 faca 	bl	8005d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005778:	4b3e      	ldr	r3, [pc, #248]	; (8005874 <xTaskIncrementTick+0x164>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d34e      	bcc.n	8005820 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005782:	4b39      	ldr	r3, [pc, #228]	; (8005868 <xTaskIncrementTick+0x158>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <xTaskIncrementTick+0x80>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <xTaskIncrementTick+0x82>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005796:	4b37      	ldr	r3, [pc, #220]	; (8005874 <xTaskIncrementTick+0x164>)
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	601a      	str	r2, [r3, #0]
					break;
 800579e:	e03f      	b.n	8005820 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057a0:	4b31      	ldr	r3, [pc, #196]	; (8005868 <xTaskIncrementTick+0x158>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d203      	bcs.n	80057c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057b8:	4a2e      	ldr	r2, [pc, #184]	; (8005874 <xTaskIncrementTick+0x164>)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6013      	str	r3, [r2, #0]
						break;
 80057be:	e02f      	b.n	8005820 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe ffc7 	bl	8004758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	3318      	adds	r3, #24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe ffbe 	bl	8004758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <xTaskIncrementTick+0x168>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d903      	bls.n	80057f0 <xTaskIncrementTick+0xe0>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a22      	ldr	r2, [pc, #136]	; (8005878 <xTaskIncrementTick+0x168>)
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4a1f      	ldr	r2, [pc, #124]	; (800587c <xTaskIncrementTick+0x16c>)
 80057fe:	441a      	add	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fe ff49 	bl	800469e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <xTaskIncrementTick+0x170>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	429a      	cmp	r2, r3
 8005818:	d3b3      	bcc.n	8005782 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800581a:	2301      	movs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581e:	e7b0      	b.n	8005782 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <xTaskIncrementTick+0x170>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005826:	4915      	ldr	r1, [pc, #84]	; (800587c <xTaskIncrementTick+0x16c>)
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d907      	bls.n	8005848 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005838:	2301      	movs	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e004      	b.n	8005848 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <xTaskIncrementTick+0x174>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3301      	adds	r3, #1
 8005844:	4a0f      	ldr	r2, [pc, #60]	; (8005884 <xTaskIncrementTick+0x174>)
 8005846:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <xTaskIncrementTick+0x178>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005854:	697b      	ldr	r3, [r7, #20]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20002060 	.word	0x20002060
 8005864:	2000203c 	.word	0x2000203c
 8005868:	20001ff0 	.word	0x20001ff0
 800586c:	20001ff4 	.word	0x20001ff4
 8005870:	20002050 	.word	0x20002050
 8005874:	20002058 	.word	0x20002058
 8005878:	20002040 	.word	0x20002040
 800587c:	20001b68 	.word	0x20001b68
 8005880:	20001b64 	.word	0x20001b64
 8005884:	20002048 	.word	0x20002048
 8005888:	2000204c 	.word	0x2000204c

0800588c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005892:	4b27      	ldr	r3, [pc, #156]	; (8005930 <vTaskSwitchContext+0xa4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800589a:	4b26      	ldr	r3, [pc, #152]	; (8005934 <vTaskSwitchContext+0xa8>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058a0:	e040      	b.n	8005924 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <vTaskSwitchContext+0xa8>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058a8:	4b23      	ldr	r3, [pc, #140]	; (8005938 <vTaskSwitchContext+0xac>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e00f      	b.n	80058d0 <vTaskSwitchContext+0x44>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <vTaskSwitchContext+0x3e>
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e7fe      	b.n	80058c8 <vTaskSwitchContext+0x3c>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	491a      	ldr	r1, [pc, #104]	; (800593c <vTaskSwitchContext+0xb0>)
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0e5      	beq.n	80058b0 <vTaskSwitchContext+0x24>
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4a13      	ldr	r2, [pc, #76]	; (800593c <vTaskSwitchContext+0xb0>)
 80058f0:	4413      	add	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	3308      	adds	r3, #8
 8005906:	429a      	cmp	r2, r3
 8005908:	d104      	bne.n	8005914 <vTaskSwitchContext+0x88>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	605a      	str	r2, [r3, #4]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	4a09      	ldr	r2, [pc, #36]	; (8005940 <vTaskSwitchContext+0xb4>)
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4a06      	ldr	r2, [pc, #24]	; (8005938 <vTaskSwitchContext+0xac>)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6013      	str	r3, [r2, #0]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	20002060 	.word	0x20002060
 8005934:	2000204c 	.word	0x2000204c
 8005938:	20002040 	.word	0x20002040
 800593c:	20001b68 	.word	0x20001b68
 8005940:	20001b64 	.word	0x20001b64

08005944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <vTaskPlaceOnEventList+0x24>
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	e7fe      	b.n	8005966 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005968:	4b07      	ldr	r3, [pc, #28]	; (8005988 <vTaskPlaceOnEventList+0x44>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3318      	adds	r3, #24
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7fe feb8 	bl	80046e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005976:	2101      	movs	r1, #1
 8005978:	6838      	ldr	r0, [r7, #0]
 800597a:	f000 fa77 	bl	8005e6c <prvAddCurrentTaskToDelayedList>
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20001b64 	.word	0x20001b64

0800598c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <vTaskPlaceOnEventListRestricted+0x26>
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e7fe      	b.n	80059b0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059b2:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <vTaskPlaceOnEventListRestricted+0x50>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3318      	adds	r3, #24
 80059b8:	4619      	mov	r1, r3
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7fe fe6f 	bl	800469e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	68b8      	ldr	r0, [r7, #8]
 80059d0:	f000 fa4c 	bl	8005e6c <prvAddCurrentTaskToDelayedList>
	}
 80059d4:	bf00      	nop
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20001b64 	.word	0x20001b64

080059e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <xTaskRemoveFromEventList+0x2a>
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e7fe      	b.n	8005a08 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fea2 	bl	8004758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a14:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <xTaskRemoveFromEventList+0xac>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d11d      	bne.n	8005a58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fe99 	bl	8004758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <xTaskRemoveFromEventList+0xb0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d903      	bls.n	8005a3a <xTaskRemoveFromEventList+0x5a>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <xTaskRemoveFromEventList+0xb0>)
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <xTaskRemoveFromEventList+0xb4>)
 8005a48:	441a      	add	r2, r3
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7fe fe24 	bl	800469e <vListInsertEnd>
 8005a56:	e005      	b.n	8005a64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	3318      	adds	r3, #24
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	480e      	ldr	r0, [pc, #56]	; (8005a98 <xTaskRemoveFromEventList+0xb8>)
 8005a60:	f7fe fe1d 	bl	800469e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <xTaskRemoveFromEventList+0xbc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d905      	bls.n	8005a7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a76:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <xTaskRemoveFromEventList+0xc0>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e001      	b.n	8005a82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a82:	697b      	ldr	r3, [r7, #20]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20002060 	.word	0x20002060
 8005a90:	20002040 	.word	0x20002040
 8005a94:	20001b68 	.word	0x20001b68
 8005a98:	20001ff8 	.word	0x20001ff8
 8005a9c:	20001b64 	.word	0x20001b64
 8005aa0:	2000204c 	.word	0x2000204c

08005aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <vTaskInternalSetTimeOutState+0x24>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <vTaskInternalSetTimeOutState+0x28>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	605a      	str	r2, [r3, #4]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20002050 	.word	0x20002050
 8005acc:	2000203c 	.word	0x2000203c

08005ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <xTaskCheckForTimeOut+0x24>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e7fe      	b.n	8005af2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <xTaskCheckForTimeOut+0x3e>
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e7fe      	b.n	8005b0c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005b0e:	f000 fe35 	bl	800677c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b12:	4b1d      	ldr	r3, [pc, #116]	; (8005b88 <xTaskCheckForTimeOut+0xb8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d102      	bne.n	8005b32 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	e023      	b.n	8005b7a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <xTaskCheckForTimeOut+0xbc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d007      	beq.n	8005b4e <xTaskCheckForTimeOut+0x7e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d302      	bcc.n	8005b4e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	e015      	b.n	8005b7a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d20b      	bcs.n	8005b70 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ff9d 	bl	8005aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	e004      	b.n	8005b7a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b76:	2301      	movs	r3, #1
 8005b78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b7a:	f000 fe2d 	bl	80067d8 <vPortExitCritical>

	return xReturn;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	2000203c 	.word	0x2000203c
 8005b8c:	20002050 	.word	0x20002050

08005b90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b94:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <vTaskMissedYield+0x14>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	2000204c 	.word	0x2000204c

08005ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bb0:	f000 f852 	bl	8005c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <prvIdleTask+0x28>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d9f9      	bls.n	8005bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <prvIdleTask+0x2c>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bcc:	e7f0      	b.n	8005bb0 <prvIdleTask+0x8>
 8005bce:	bf00      	nop
 8005bd0:	20001b68 	.word	0x20001b68
 8005bd4:	e000ed04 	.word	0xe000ed04

08005bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bde:	2300      	movs	r3, #0
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	e00c      	b.n	8005bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4a12      	ldr	r2, [pc, #72]	; (8005c38 <prvInitialiseTaskLists+0x60>)
 8005bf0:	4413      	add	r3, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fd26 	bl	8004644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	607b      	str	r3, [r7, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b37      	cmp	r3, #55	; 0x37
 8005c02:	d9ef      	bls.n	8005be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c04:	480d      	ldr	r0, [pc, #52]	; (8005c3c <prvInitialiseTaskLists+0x64>)
 8005c06:	f7fe fd1d 	bl	8004644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c0a:	480d      	ldr	r0, [pc, #52]	; (8005c40 <prvInitialiseTaskLists+0x68>)
 8005c0c:	f7fe fd1a 	bl	8004644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c10:	480c      	ldr	r0, [pc, #48]	; (8005c44 <prvInitialiseTaskLists+0x6c>)
 8005c12:	f7fe fd17 	bl	8004644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c16:	480c      	ldr	r0, [pc, #48]	; (8005c48 <prvInitialiseTaskLists+0x70>)
 8005c18:	f7fe fd14 	bl	8004644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c1c:	480b      	ldr	r0, [pc, #44]	; (8005c4c <prvInitialiseTaskLists+0x74>)
 8005c1e:	f7fe fd11 	bl	8004644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <prvInitialiseTaskLists+0x78>)
 8005c24:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <prvInitialiseTaskLists+0x64>)
 8005c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <prvInitialiseTaskLists+0x7c>)
 8005c2a:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <prvInitialiseTaskLists+0x68>)
 8005c2c:	601a      	str	r2, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20001b68 	.word	0x20001b68
 8005c3c:	20001fc8 	.word	0x20001fc8
 8005c40:	20001fdc 	.word	0x20001fdc
 8005c44:	20001ff8 	.word	0x20001ff8
 8005c48:	2000200c 	.word	0x2000200c
 8005c4c:	20002024 	.word	0x20002024
 8005c50:	20001ff0 	.word	0x20001ff0
 8005c54:	20001ff4 	.word	0x20001ff4

08005c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c5e:	e019      	b.n	8005c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c60:	f000 fd8c 	bl	800677c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <prvCheckTasksWaitingTermination+0x4c>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fe fd71 	bl	8004758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <prvCheckTasksWaitingTermination+0x50>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	4a0a      	ldr	r2, [pc, #40]	; (8005ca8 <prvCheckTasksWaitingTermination+0x50>)
 8005c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <prvCheckTasksWaitingTermination+0x54>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <prvCheckTasksWaitingTermination+0x54>)
 8005c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c8a:	f000 fda5 	bl	80067d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f80e 	bl	8005cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <prvCheckTasksWaitingTermination+0x54>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e1      	bne.n	8005c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	2000200c 	.word	0x2000200c
 8005ca8:	20002038 	.word	0x20002038
 8005cac:	20002020 	.word	0x20002020

08005cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d108      	bne.n	8005cd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 ff34 	bl	8006b34 <vPortFree>
				vPortFree( pxTCB );
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 ff31 	bl	8006b34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cd2:	e017      	b.n	8005d04 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d103      	bne.n	8005ce6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 ff28 	bl	8006b34 <vPortFree>
	}
 8005ce4:	e00e      	b.n	8005d04 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d009      	beq.n	8005d04 <prvDeleteTCB+0x54>
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e7fe      	b.n	8005d02 <prvDeleteTCB+0x52>
	}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d12:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <prvResetNextTaskUnblockTime+0x44>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <prvResetNextTaskUnblockTime+0x14>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <prvResetNextTaskUnblockTime+0x16>
 8005d20:	2300      	movs	r3, #0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <prvResetNextTaskUnblockTime+0x48>)
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d2e:	e008      	b.n	8005d42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <prvResetNextTaskUnblockTime+0x44>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4a05      	ldr	r2, [pc, #20]	; (8005d54 <prvResetNextTaskUnblockTime+0x48>)
 8005d40:	6013      	str	r3, [r2, #0]
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20001ff0 	.word	0x20001ff0
 8005d54:	20002058 	.word	0x20002058

08005d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <xTaskGetSchedulerState+0x34>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d66:	2301      	movs	r3, #1
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	e008      	b.n	8005d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d6c:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <xTaskGetSchedulerState+0x38>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d74:	2302      	movs	r3, #2
 8005d76:	607b      	str	r3, [r7, #4]
 8005d78:	e001      	b.n	8005d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d7e:	687b      	ldr	r3, [r7, #4]
	}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20002044 	.word	0x20002044
 8005d90:	20002060 	.word	0x20002060

08005d94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d054      	beq.n	8005e54 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005daa:	4b2d      	ldr	r3, [pc, #180]	; (8005e60 <xTaskPriorityDisinherit+0xcc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d009      	beq.n	8005dc8 <xTaskPriorityDisinherit+0x34>
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e7fe      	b.n	8005dc6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <xTaskPriorityDisinherit+0x50>
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	e7fe      	b.n	8005de2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	1e5a      	subs	r2, r3, #1
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d02c      	beq.n	8005e54 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d128      	bne.n	8005e54 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fca6 	bl	8004758 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <xTaskPriorityDisinherit+0xd0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d903      	bls.n	8005e34 <xTaskPriorityDisinherit+0xa0>
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	4a0c      	ldr	r2, [pc, #48]	; (8005e64 <xTaskPriorityDisinherit+0xd0>)
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4a09      	ldr	r2, [pc, #36]	; (8005e68 <xTaskPriorityDisinherit+0xd4>)
 8005e42:	441a      	add	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f7fe fc27 	bl	800469e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e54:	697b      	ldr	r3, [r7, #20]
	}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20001b64 	.word	0x20001b64
 8005e64:	20002040 	.word	0x20002040
 8005e68:	20001b68 	.word	0x20001b68

08005e6c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e76:	4b21      	ldr	r3, [pc, #132]	; (8005efc <prvAddCurrentTaskToDelayedList+0x90>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e7c:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fc68 	bl	8004758 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d10a      	bne.n	8005ea6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e96:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4819      	ldr	r0, [pc, #100]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ea0:	f7fe fbfd 	bl	800469e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ea4:	e026      	b.n	8005ef4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4413      	add	r3, r2
 8005eac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005eae:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d209      	bcs.n	8005ed2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ebe:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7fe fc0b 	bl	80046e6 <vListInsert>
}
 8005ed0:	e010      	b.n	8005ef4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f7fe fc01 	bl	80046e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d202      	bcs.n	8005ef4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005eee:	4a08      	ldr	r2, [pc, #32]	; (8005f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6013      	str	r3, [r2, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	2000203c 	.word	0x2000203c
 8005f00:	20001b64 	.word	0x20001b64
 8005f04:	20002024 	.word	0x20002024
 8005f08:	20001ff4 	.word	0x20001ff4
 8005f0c:	20001ff0 	.word	0x20001ff0
 8005f10:	20002058 	.word	0x20002058

08005f14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	; 0x28
 8005f18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f1e:	f000 fac3 	bl	80064a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f22:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <xTimerCreateTimerTask+0x80>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d021      	beq.n	8005f6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f32:	1d3a      	adds	r2, r7, #4
 8005f34:	f107 0108 	add.w	r1, r7, #8
 8005f38:	f107 030c 	add.w	r3, r7, #12
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe fb67 	bl	8004610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	9202      	str	r2, [sp, #8]
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	2300      	movs	r3, #0
 8005f52:	460a      	mov	r2, r1
 8005f54:	4910      	ldr	r1, [pc, #64]	; (8005f98 <xTimerCreateTimerTask+0x84>)
 8005f56:	4811      	ldr	r0, [pc, #68]	; (8005f9c <xTimerCreateTimerTask+0x88>)
 8005f58:	f7ff f938 	bl	80051cc <xTaskCreateStatic>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <xTimerCreateTimerTask+0x8c>)
 8005f60:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <xTimerCreateTimerTask+0x8c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d109      	bne.n	8005f88 <xTimerCreateTimerTask+0x74>
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e7fe      	b.n	8005f86 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005f88:	697b      	ldr	r3, [r7, #20]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20002094 	.word	0x20002094
 8005f98:	08006df4 	.word	0x08006df4
 8005f9c:	080060bd 	.word	0x080060bd
 8005fa0:	20002098 	.word	0x20002098

08005fa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d109      	bne.n	8005fd0 <xTimerGenericCommand+0x2c>
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	e7fe      	b.n	8005fce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fd0:	4b19      	ldr	r3, [pc, #100]	; (8006038 <xTimerGenericCommand+0x94>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02a      	beq.n	800602e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	dc18      	bgt.n	800601c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fea:	f7ff feb5 	bl	8005d58 <xTaskGetSchedulerState>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d109      	bne.n	8006008 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ff4:	4b10      	ldr	r3, [pc, #64]	; (8006038 <xTimerGenericCommand+0x94>)
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	f107 0110 	add.w	r1, r7, #16
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006000:	f7fe fd0e 	bl	8004a20 <xQueueGenericSend>
 8006004:	6278      	str	r0, [r7, #36]	; 0x24
 8006006:	e012      	b.n	800602e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <xTimerGenericCommand+0x94>)
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	f107 0110 	add.w	r1, r7, #16
 8006010:	2300      	movs	r3, #0
 8006012:	2200      	movs	r2, #0
 8006014:	f7fe fd04 	bl	8004a20 <xQueueGenericSend>
 8006018:	6278      	str	r0, [r7, #36]	; 0x24
 800601a:	e008      	b.n	800602e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <xTimerGenericCommand+0x94>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	f107 0110 	add.w	r1, r7, #16
 8006024:	2300      	movs	r3, #0
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	f7fe fdf4 	bl	8004c14 <xQueueGenericSendFromISR>
 800602c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006030:	4618      	mov	r0, r3
 8006032:	3728      	adds	r7, #40	; 0x28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20002094 	.word	0x20002094

0800603c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af02      	add	r7, sp, #8
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <prvProcessExpiredTimer+0x7c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3304      	adds	r3, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f7fe fb7f 	bl	8004758 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d121      	bne.n	80060a6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	18d1      	adds	r1, r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f000 f8c8 	bl	8006204 <prvInsertTimerInActiveList>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d015      	beq.n	80060a6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800607a:	2300      	movs	r3, #0
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	2300      	movs	r3, #0
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	2100      	movs	r1, #0
 8006084:	6978      	ldr	r0, [r7, #20]
 8006086:	f7ff ff8d 	bl	8005fa4 <xTimerGenericCommand>
 800608a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <prvProcessExpiredTimer+0x6a>
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e7fe      	b.n	80060a4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	4798      	blx	r3
}
 80060ae:	bf00      	nop
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	2000208c 	.word	0x2000208c

080060bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f857 	bl	800617c <prvGetNextExpireTime>
 80060ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4619      	mov	r1, r3
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f803 	bl	80060e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060da:	f000 f8d5 	bl	8006288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060de:	e7f1      	b.n	80060c4 <prvTimerTask+0x8>

080060e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060ea:	f7ff fa57 	bl	800559c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ee:	f107 0308 	add.w	r3, r7, #8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f866 	bl	80061c4 <prvSampleTimeNow>
 80060f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d130      	bne.n	8006162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <prvProcessTimerOrBlockTask+0x3c>
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	429a      	cmp	r2, r3
 800610c:	d806      	bhi.n	800611c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800610e:	f7ff fa53 	bl	80055b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff91 	bl	800603c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800611a:	e024      	b.n	8006166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <prvProcessTimerOrBlockTask+0x90>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <prvProcessTimerOrBlockTask+0x94>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	f7ff f80f 	bl	8005164 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006146:	f7ff fa37 	bl	80055b8 <xTaskResumeAll>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <prvProcessTimerOrBlockTask+0x98>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
}
 8006160:	e001      	b.n	8006166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006162:	f7ff fa29 	bl	80055b8 <xTaskResumeAll>
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20002090 	.word	0x20002090
 8006174:	20002094 	.word	0x20002094
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <prvGetNextExpireTime+0x44>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	bf0c      	ite	eq
 800618e:	2301      	moveq	r3, #1
 8006190:	2300      	movne	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d105      	bne.n	80061ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <prvGetNextExpireTime+0x44>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e001      	b.n	80061b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	2000208c 	.word	0x2000208c

080061c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061cc:	f7ff fa90 	bl	80056f0 <xTaskGetTickCount>
 80061d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <prvSampleTimeNow+0x3c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d205      	bcs.n	80061e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061dc:	f000 f904 	bl	80063e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e002      	b.n	80061ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061ee:	4a04      	ldr	r2, [pc, #16]	; (8006200 <prvSampleTimeNow+0x3c>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	2000209c 	.word	0x2000209c

08006204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	429a      	cmp	r2, r3
 8006228:	d812      	bhi.n	8006250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e01b      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <prvInsertTimerInActiveList+0x7c>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fe fa4c 	bl	80046e6 <vListInsert>
 800624e:	e012      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d206      	bcs.n	8006266 <prvInsertTimerInActiveList+0x62>
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e007      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <prvInsertTimerInActiveList+0x80>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fe fa38 	bl	80046e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20002090 	.word	0x20002090
 8006284:	2000208c 	.word	0x2000208c

08006288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	; 0x38
 800628c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800628e:	e099      	b.n	80063c4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da17      	bge.n	80062c6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	3304      	adds	r3, #4
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <prvProcessReceivedCommands+0x2e>
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	e7fe      	b.n	80062b4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062bc:	6850      	ldr	r0, [r2, #4]
 80062be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c0:	6892      	ldr	r2, [r2, #8]
 80062c2:	4611      	mov	r1, r2
 80062c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	db7a      	blt.n	80063c2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	3304      	adds	r3, #4
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fa3b 	bl	8004758 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062e2:	463b      	mov	r3, r7
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff ff6d 	bl	80061c4 <prvSampleTimeNow>
 80062ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b09      	cmp	r3, #9
 80062f0:	d868      	bhi.n	80063c4 <prvProcessReceivedCommands+0x13c>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <prvProcessReceivedCommands+0x70>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006321 	.word	0x08006321
 8006304:	080063c5 	.word	0x080063c5
 8006308:	0800637b 	.word	0x0800637b
 800630c:	080063b1 	.word	0x080063b1
 8006310:	08006321 	.word	0x08006321
 8006314:	08006321 	.word	0x08006321
 8006318:	080063c5 	.word	0x080063c5
 800631c:	0800637b 	.word	0x0800637b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	18d1      	adds	r1, r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632e:	f7ff ff69 	bl	8006204 <prvInsertTimerInActiveList>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d045      	beq.n	80063c4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d13d      	bne.n	80063c4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	441a      	add	r2, r3
 8006350:	2300      	movs	r3, #0
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	2100      	movs	r1, #0
 8006358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635a:	f7ff fe23 	bl	8005fa4 <xTimerGenericCommand>
 800635e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d12e      	bne.n	80063c4 <prvProcessReceivedCommands+0x13c>
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e7fe      	b.n	8006378 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <prvProcessReceivedCommands+0x114>
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e7fe      	b.n	800639a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	18d1      	adds	r1, r2, r3
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063aa:	f7ff ff2b 	bl	8006204 <prvInsertTimerInActiveList>
					break;
 80063ae:	e009      	b.n	80063c4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80063ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063bc:	f000 fbba 	bl	8006b34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063c0:	e000      	b.n	80063c4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80063c2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063c4:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <prvProcessReceivedCommands+0x15c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	1d39      	adds	r1, r7, #4
 80063ca:	2200      	movs	r2, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe fcb5 	bl	8004d3c <xQueueReceive>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f47f af5b 	bne.w	8006290 <prvProcessReceivedCommands+0x8>
	}
}
 80063da:	bf00      	nop
 80063dc:	3730      	adds	r7, #48	; 0x30
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20002094 	.word	0x20002094

080063e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ee:	e044      	b.n	800647a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f0:	4b2b      	ldr	r3, [pc, #172]	; (80064a0 <prvSwitchTimerLists+0xb8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063fa:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <prvSwitchTimerLists+0xb8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe f9a5 	bl	8004758 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d12d      	bne.n	800647a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4413      	add	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	429a      	cmp	r2, r3
 800642e:	d90e      	bls.n	800644e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800643c:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <prvSwitchTimerLists+0xb8>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f7fe f94d 	bl	80046e6 <vListInsert>
 800644c:	e015      	b.n	800647a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800644e:	2300      	movs	r3, #0
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	2300      	movs	r3, #0
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	2100      	movs	r1, #0
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff fda3 	bl	8005fa4 <xTimerGenericCommand>
 800645e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <prvSwitchTimerLists+0x92>
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	e7fe      	b.n	8006478 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800647a:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <prvSwitchTimerLists+0xb8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1b5      	bne.n	80063f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <prvSwitchTimerLists+0xb8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <prvSwitchTimerLists+0xbc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a04      	ldr	r2, [pc, #16]	; (80064a0 <prvSwitchTimerLists+0xb8>)
 8006490:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006492:	4a04      	ldr	r2, [pc, #16]	; (80064a4 <prvSwitchTimerLists+0xbc>)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	6013      	str	r3, [r2, #0]
}
 8006498:	bf00      	nop
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	2000208c 	.word	0x2000208c
 80064a4:	20002090 	.word	0x20002090

080064a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064ae:	f000 f965 	bl	800677c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <prvCheckForValidListAndQueue+0x60>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d120      	bne.n	80064fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064ba:	4814      	ldr	r0, [pc, #80]	; (800650c <prvCheckForValidListAndQueue+0x64>)
 80064bc:	f7fe f8c2 	bl	8004644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064c0:	4813      	ldr	r0, [pc, #76]	; (8006510 <prvCheckForValidListAndQueue+0x68>)
 80064c2:	f7fe f8bf 	bl	8004644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <prvCheckForValidListAndQueue+0x6c>)
 80064c8:	4a10      	ldr	r2, [pc, #64]	; (800650c <prvCheckForValidListAndQueue+0x64>)
 80064ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064cc:	4b12      	ldr	r3, [pc, #72]	; (8006518 <prvCheckForValidListAndQueue+0x70>)
 80064ce:	4a10      	ldr	r2, [pc, #64]	; (8006510 <prvCheckForValidListAndQueue+0x68>)
 80064d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064d2:	2300      	movs	r3, #0
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <prvCheckForValidListAndQueue+0x74>)
 80064d8:	4a11      	ldr	r2, [pc, #68]	; (8006520 <prvCheckForValidListAndQueue+0x78>)
 80064da:	2110      	movs	r1, #16
 80064dc:	200a      	movs	r0, #10
 80064de:	f7fe f9cd 	bl	800487c <xQueueGenericCreateStatic>
 80064e2:	4602      	mov	r2, r0
 80064e4:	4b08      	ldr	r3, [pc, #32]	; (8006508 <prvCheckForValidListAndQueue+0x60>)
 80064e6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064e8:	4b07      	ldr	r3, [pc, #28]	; (8006508 <prvCheckForValidListAndQueue+0x60>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <prvCheckForValidListAndQueue+0x60>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	490b      	ldr	r1, [pc, #44]	; (8006524 <prvCheckForValidListAndQueue+0x7c>)
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe fe0c 	bl	8005114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064fc:	f000 f96c 	bl	80067d8 <vPortExitCritical>
}
 8006500:	bf00      	nop
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20002094 	.word	0x20002094
 800650c:	20002064 	.word	0x20002064
 8006510:	20002078 	.word	0x20002078
 8006514:	2000208c 	.word	0x2000208c
 8006518:	20002090 	.word	0x20002090
 800651c:	20002140 	.word	0x20002140
 8006520:	200020a0 	.word	0x200020a0
 8006524:	08006dfc 	.word	0x08006dfc

08006528 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3b04      	subs	r3, #4
 8006538:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3b04      	subs	r3, #4
 8006546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f023 0201 	bic.w	r2, r3, #1
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b04      	subs	r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006558:	4a0c      	ldr	r2, [pc, #48]	; (800658c <pxPortInitialiseStack+0x64>)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3b14      	subs	r3, #20
 8006562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3b04      	subs	r3, #4
 800656e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f06f 0202 	mvn.w	r2, #2
 8006576:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3b20      	subs	r3, #32
 800657c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800657e:	68fb      	ldr	r3, [r7, #12]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	08006591 	.word	0x08006591

08006590 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800659a:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <prvTaskExitError+0x50>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d009      	beq.n	80065b8 <prvTaskExitError+0x28>
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	e7fe      	b.n	80065b6 <prvTaskExitError+0x26>
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065ca:	bf00      	nop
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0fc      	beq.n	80065cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	2000000c 	.word	0x2000000c
	...

080065f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <pxCurrentTCBConst2>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	f380 8809 	msr	PSP, r0
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	4770      	bx	lr
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst2>:
 8006610:	20001b64 	.word	0x20001b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006618:	4808      	ldr	r0, [pc, #32]	; (800663c <prvPortStartFirstTask+0x24>)
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f380 8808 	msr	MSP, r0
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8814 	msr	CONTROL, r0
 800662a:	b662      	cpsie	i
 800662c:	b661      	cpsie	f
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	df00      	svc	0
 8006638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800663a:	bf00      	nop
 800663c:	e000ed08 	.word	0xe000ed08

08006640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006646:	4b44      	ldr	r3, [pc, #272]	; (8006758 <xPortStartScheduler+0x118>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a44      	ldr	r2, [pc, #272]	; (800675c <xPortStartScheduler+0x11c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d109      	bne.n	8006664 <xPortStartScheduler+0x24>
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	e7fe      	b.n	8006662 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006664:	4b3c      	ldr	r3, [pc, #240]	; (8006758 <xPortStartScheduler+0x118>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a3d      	ldr	r2, [pc, #244]	; (8006760 <xPortStartScheduler+0x120>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d109      	bne.n	8006682 <xPortStartScheduler+0x42>
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	e7fe      	b.n	8006680 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006682:	4b38      	ldr	r3, [pc, #224]	; (8006764 <xPortStartScheduler+0x124>)
 8006684:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	22ff      	movs	r2, #255	; 0xff
 8006692:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	4b30      	ldr	r3, [pc, #192]	; (8006768 <xPortStartScheduler+0x128>)
 80066a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066aa:	4b30      	ldr	r3, [pc, #192]	; (800676c <xPortStartScheduler+0x12c>)
 80066ac:	2207      	movs	r2, #7
 80066ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b0:	e009      	b.n	80066c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80066b2:	4b2e      	ldr	r3, [pc, #184]	; (800676c <xPortStartScheduler+0x12c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	4a2c      	ldr	r2, [pc, #176]	; (800676c <xPortStartScheduler+0x12c>)
 80066ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d0ef      	beq.n	80066b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066d2:	4b26      	ldr	r3, [pc, #152]	; (800676c <xPortStartScheduler+0x12c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f1c3 0307 	rsb	r3, r3, #7
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d009      	beq.n	80066f2 <xPortStartScheduler+0xb2>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	e7fe      	b.n	80066f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066f2:	4b1e      	ldr	r3, [pc, #120]	; (800676c <xPortStartScheduler+0x12c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	4a1c      	ldr	r2, [pc, #112]	; (800676c <xPortStartScheduler+0x12c>)
 80066fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <xPortStartScheduler+0x12c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006704:	4a19      	ldr	r2, [pc, #100]	; (800676c <xPortStartScheduler+0x12c>)
 8006706:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <xPortStartScheduler+0x130>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a16      	ldr	r2, [pc, #88]	; (8006770 <xPortStartScheduler+0x130>)
 8006716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800671a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800671c:	4b14      	ldr	r3, [pc, #80]	; (8006770 <xPortStartScheduler+0x130>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <xPortStartScheduler+0x130>)
 8006722:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006726:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006728:	f000 f8d6 	bl	80068d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800672c:	4b11      	ldr	r3, [pc, #68]	; (8006774 <xPortStartScheduler+0x134>)
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006732:	f000 f8f5 	bl	8006920 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <xPortStartScheduler+0x138>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a0f      	ldr	r2, [pc, #60]	; (8006778 <xPortStartScheduler+0x138>)
 800673c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006740:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006742:	f7ff ff69 	bl	8006618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006746:	f7ff f8a1 	bl	800588c <vTaskSwitchContext>
	prvTaskExitError();
 800674a:	f7ff ff21 	bl	8006590 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed00 	.word	0xe000ed00
 800675c:	410fc271 	.word	0x410fc271
 8006760:	410fc270 	.word	0x410fc270
 8006764:	e000e400 	.word	0xe000e400
 8006768:	20002190 	.word	0x20002190
 800676c:	20002194 	.word	0x20002194
 8006770:	e000ed20 	.word	0xe000ed20
 8006774:	2000000c 	.word	0x2000000c
 8006778:	e000ef34 	.word	0xe000ef34

0800677c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006794:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <vPortEnterCritical+0x54>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a0d      	ldr	r2, [pc, #52]	; (80067d0 <vPortEnterCritical+0x54>)
 800679c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <vPortEnterCritical+0x54>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d10e      	bne.n	80067c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067a6:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <vPortEnterCritical+0x58>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <vPortEnterCritical+0x48>
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	e7fe      	b.n	80067c2 <vPortEnterCritical+0x46>
	}
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	2000000c 	.word	0x2000000c
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <vPortExitCritical+0x4c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <vPortExitCritical+0x22>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	607b      	str	r3, [r7, #4]
 80067f8:	e7fe      	b.n	80067f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <vPortExitCritical+0x4c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3b01      	subs	r3, #1
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <vPortExitCritical+0x4c>)
 8006802:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006804:	4b07      	ldr	r3, [pc, #28]	; (8006824 <vPortExitCritical+0x4c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d104      	bne.n	8006816 <vPortExitCritical+0x3e>
 800680c:	2300      	movs	r3, #0
 800680e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	2000000c 	.word	0x2000000c
	...

08006830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006830:	f3ef 8009 	mrs	r0, PSP
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	4b15      	ldr	r3, [pc, #84]	; (8006890 <pxCurrentTCBConst>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	f01e 0f10 	tst.w	lr, #16
 8006840:	bf08      	it	eq
 8006842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	6010      	str	r0, [r2, #0]
 800684c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006854:	f380 8811 	msr	BASEPRI, r0
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f7ff f814 	bl	800588c <vTaskSwitchContext>
 8006864:	f04f 0000 	mov.w	r0, #0
 8006868:	f380 8811 	msr	BASEPRI, r0
 800686c:	bc09      	pop	{r0, r3}
 800686e:	6819      	ldr	r1, [r3, #0]
 8006870:	6808      	ldr	r0, [r1, #0]
 8006872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006876:	f01e 0f10 	tst.w	lr, #16
 800687a:	bf08      	it	eq
 800687c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006880:	f380 8809 	msr	PSP, r0
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	f3af 8000 	nop.w

08006890 <pxCurrentTCBConst>:
 8006890:	20001b64 	.word	0x20001b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068b0:	f7fe ff2e 	bl	8005710 <xTaskIncrementTick>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <SysTick_Handler+0x3c>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	e000ed04 	.word	0xe000ed04

080068d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <vPortSetupTimerInterrupt+0x34>)
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068e2:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <vPortSetupTimerInterrupt+0x38>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <vPortSetupTimerInterrupt+0x3c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a0a      	ldr	r2, [pc, #40]	; (8006918 <vPortSetupTimerInterrupt+0x40>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	099b      	lsrs	r3, r3, #6
 80068f4:	4a09      	ldr	r2, [pc, #36]	; (800691c <vPortSetupTimerInterrupt+0x44>)
 80068f6:	3b01      	subs	r3, #1
 80068f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068fa:	4b04      	ldr	r3, [pc, #16]	; (800690c <vPortSetupTimerInterrupt+0x34>)
 80068fc:	2207      	movs	r2, #7
 80068fe:	601a      	str	r2, [r3, #0]
}
 8006900:	bf00      	nop
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	e000e010 	.word	0xe000e010
 8006910:	e000e018 	.word	0xe000e018
 8006914:	20000000 	.word	0x20000000
 8006918:	10624dd3 	.word	0x10624dd3
 800691c:	e000e014 	.word	0xe000e014

08006920 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006920:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006930 <vPortEnableVFP+0x10>
 8006924:	6801      	ldr	r1, [r0, #0]
 8006926:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800692a:	6001      	str	r1, [r0, #0]
 800692c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800692e:	bf00      	nop
 8006930:	e000ed88 	.word	0xe000ed88

08006934 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800693a:	f3ef 8305 	mrs	r3, IPSR
 800693e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b0f      	cmp	r3, #15
 8006944:	d913      	bls.n	800696e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006946:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <vPortValidateInterruptPriority+0x6c>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006950:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <vPortValidateInterruptPriority+0x70>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	7afa      	ldrb	r2, [r7, #11]
 8006956:	429a      	cmp	r2, r3
 8006958:	d209      	bcs.n	800696e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	e7fe      	b.n	800696c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800696e:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <vPortValidateInterruptPriority+0x74>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006976:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <vPortValidateInterruptPriority+0x78>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d909      	bls.n	8006992 <vPortValidateInterruptPriority+0x5e>
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	e7fe      	b.n	8006990 <vPortValidateInterruptPriority+0x5c>
	}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	e000e3f0 	.word	0xe000e3f0
 80069a4:	20002190 	.word	0x20002190
 80069a8:	e000ed0c 	.word	0xe000ed0c
 80069ac:	20002194 	.word	0x20002194

080069b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	; 0x28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069bc:	f7fe fdee 	bl	800559c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069c0:	4b57      	ldr	r3, [pc, #348]	; (8006b20 <pvPortMalloc+0x170>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069c8:	f000 f90c 	bl	8006be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069cc:	4b55      	ldr	r3, [pc, #340]	; (8006b24 <pvPortMalloc+0x174>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 808c 	bne.w	8006af2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01c      	beq.n	8006a1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80069e0:	2208      	movs	r2, #8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d013      	beq.n	8006a1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f023 0307 	bic.w	r3, r3, #7
 80069f8:	3308      	adds	r3, #8
 80069fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <pvPortMalloc+0x6a>
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e7fe      	b.n	8006a18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d068      	beq.n	8006af2 <pvPortMalloc+0x142>
 8006a20:	4b41      	ldr	r3, [pc, #260]	; (8006b28 <pvPortMalloc+0x178>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d863      	bhi.n	8006af2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a2a:	4b40      	ldr	r3, [pc, #256]	; (8006b2c <pvPortMalloc+0x17c>)
 8006a2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a2e:	4b3f      	ldr	r3, [pc, #252]	; (8006b2c <pvPortMalloc+0x17c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a34:	e004      	b.n	8006a40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d903      	bls.n	8006a52 <pvPortMalloc+0xa2>
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f1      	bne.n	8006a36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a52:	4b33      	ldr	r3, [pc, #204]	; (8006b20 <pvPortMalloc+0x170>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d04a      	beq.n	8006af2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2208      	movs	r2, #8
 8006a62:	4413      	add	r3, r2
 8006a64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	2308      	movs	r3, #8
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d91e      	bls.n	8006abc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <pvPortMalloc+0xf4>
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e7fe      	b.n	8006aa2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	1ad2      	subs	r2, r2, r3
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ab6:	69b8      	ldr	r0, [r7, #24]
 8006ab8:	f000 f8f6 	bl	8006ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006abc:	4b1a      	ldr	r3, [pc, #104]	; (8006b28 <pvPortMalloc+0x178>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <pvPortMalloc+0x178>)
 8006ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aca:	4b17      	ldr	r3, [pc, #92]	; (8006b28 <pvPortMalloc+0x178>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	4b18      	ldr	r3, [pc, #96]	; (8006b30 <pvPortMalloc+0x180>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d203      	bcs.n	8006ade <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <pvPortMalloc+0x178>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a15      	ldr	r2, [pc, #84]	; (8006b30 <pvPortMalloc+0x180>)
 8006adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	4b10      	ldr	r3, [pc, #64]	; (8006b24 <pvPortMalloc+0x174>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006af2:	f7fe fd61 	bl	80055b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <pvPortMalloc+0x164>
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	e7fe      	b.n	8006b12 <pvPortMalloc+0x162>
	return pvReturn;
 8006b14:	69fb      	ldr	r3, [r7, #28]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3728      	adds	r7, #40	; 0x28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20002da0 	.word	0x20002da0
 8006b24:	20002dac 	.word	0x20002dac
 8006b28:	20002da4 	.word	0x20002da4
 8006b2c:	20002d98 	.word	0x20002d98
 8006b30:	20002da8 	.word	0x20002da8

08006b34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d046      	beq.n	8006bd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b46:	2308      	movs	r3, #8
 8006b48:	425b      	negs	r3, r3
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	4b20      	ldr	r3, [pc, #128]	; (8006bdc <vPortFree+0xa8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <vPortFree+0x42>
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e7fe      	b.n	8006b74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d009      	beq.n	8006b92 <vPortFree+0x5e>
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	60bb      	str	r3, [r7, #8]
 8006b90:	e7fe      	b.n	8006b90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <vPortFree+0xa8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d019      	beq.n	8006bd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d115      	bne.n	8006bd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <vPortFree+0xa8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bb8:	f7fe fcf0 	bl	800559c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <vPortFree+0xac>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	4a06      	ldr	r2, [pc, #24]	; (8006be0 <vPortFree+0xac>)
 8006bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f000 f86c 	bl	8006ca8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006bd0:	f7fe fcf2 	bl	80055b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bd4:	bf00      	nop
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20002dac 	.word	0x20002dac
 8006be0:	20002da4 	.word	0x20002da4

08006be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bf0:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <prvHeapInit+0xac>)
 8006bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00c      	beq.n	8006c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3307      	adds	r3, #7
 8006c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0307 	bic.w	r3, r3, #7
 8006c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	4a1f      	ldr	r2, [pc, #124]	; (8006c90 <prvHeapInit+0xac>)
 8006c14:	4413      	add	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	; (8006c94 <prvHeapInit+0xb0>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c22:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <prvHeapInit+0xb0>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c30:	2208      	movs	r2, #8
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0307 	bic.w	r3, r3, #7
 8006c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <prvHeapInit+0xb4>)
 8006c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <prvHeapInit+0xb4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <prvHeapInit+0xb4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c64:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <prvHeapInit+0xb4>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <prvHeapInit+0xb8>)
 8006c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	4a09      	ldr	r2, [pc, #36]	; (8006ca0 <prvHeapInit+0xbc>)
 8006c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <prvHeapInit+0xc0>)
 8006c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20002198 	.word	0x20002198
 8006c94:	20002d98 	.word	0x20002d98
 8006c98:	20002da0 	.word	0x20002da0
 8006c9c:	20002da8 	.word	0x20002da8
 8006ca0:	20002da4 	.word	0x20002da4
 8006ca4:	20002dac 	.word	0x20002dac

08006ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cb0:	4b28      	ldr	r3, [pc, #160]	; (8006d54 <prvInsertBlockIntoFreeList+0xac>)
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e002      	b.n	8006cbc <prvInsertBlockIntoFreeList+0x14>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d8f7      	bhi.n	8006cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d108      	bne.n	8006cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d118      	bne.n	8006d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <prvInsertBlockIntoFreeList+0xb0>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d00d      	beq.n	8006d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	441a      	add	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e008      	b.n	8006d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d26:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <prvInsertBlockIntoFreeList+0xb0>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e003      	b.n	8006d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d002      	beq.n	8006d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20002d98 	.word	0x20002d98
 8006d58:	20002da0 	.word	0x20002da0

08006d5c <__libc_init_array>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	4e0d      	ldr	r6, [pc, #52]	; (8006d94 <__libc_init_array+0x38>)
 8006d60:	4c0d      	ldr	r4, [pc, #52]	; (8006d98 <__libc_init_array+0x3c>)
 8006d62:	1ba4      	subs	r4, r4, r6
 8006d64:	10a4      	asrs	r4, r4, #2
 8006d66:	2500      	movs	r5, #0
 8006d68:	42a5      	cmp	r5, r4
 8006d6a:	d109      	bne.n	8006d80 <__libc_init_array+0x24>
 8006d6c:	4e0b      	ldr	r6, [pc, #44]	; (8006d9c <__libc_init_array+0x40>)
 8006d6e:	4c0c      	ldr	r4, [pc, #48]	; (8006da0 <__libc_init_array+0x44>)
 8006d70:	f000 f82c 	bl	8006dcc <_init>
 8006d74:	1ba4      	subs	r4, r4, r6
 8006d76:	10a4      	asrs	r4, r4, #2
 8006d78:	2500      	movs	r5, #0
 8006d7a:	42a5      	cmp	r5, r4
 8006d7c:	d105      	bne.n	8006d8a <__libc_init_array+0x2e>
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d84:	4798      	blx	r3
 8006d86:	3501      	adds	r5, #1
 8006d88:	e7ee      	b.n	8006d68 <__libc_init_array+0xc>
 8006d8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d8e:	4798      	blx	r3
 8006d90:	3501      	adds	r5, #1
 8006d92:	e7f2      	b.n	8006d7a <__libc_init_array+0x1e>
 8006d94:	08006e3c 	.word	0x08006e3c
 8006d98:	08006e3c 	.word	0x08006e3c
 8006d9c:	08006e3c 	.word	0x08006e3c
 8006da0:	08006e40 	.word	0x08006e40

08006da4 <memcpy>:
 8006da4:	b510      	push	{r4, lr}
 8006da6:	1e43      	subs	r3, r0, #1
 8006da8:	440a      	add	r2, r1
 8006daa:	4291      	cmp	r1, r2
 8006dac:	d100      	bne.n	8006db0 <memcpy+0xc>
 8006dae:	bd10      	pop	{r4, pc}
 8006db0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db8:	e7f7      	b.n	8006daa <memcpy+0x6>

08006dba <memset>:
 8006dba:	4402      	add	r2, r0
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d100      	bne.n	8006dc4 <memset+0xa>
 8006dc2:	4770      	bx	lr
 8006dc4:	f803 1b01 	strb.w	r1, [r3], #1
 8006dc8:	e7f9      	b.n	8006dbe <memset+0x4>
	...

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
