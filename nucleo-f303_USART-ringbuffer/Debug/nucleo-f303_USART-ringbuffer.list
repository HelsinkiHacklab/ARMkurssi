
nucleo-f303_USART-ringbuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006964  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006c44  08006c44  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c44  08006c44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003314  20000010  08006c60  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003324  08006c60  00023324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8c4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003640  00000000  00000000  0003b904  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d8  00000000  00000000  0003ef48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  00040420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005663  00000000  00000000  00041780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001131d  00000000  00000000  00046de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b8e72  00000000  00000000  00058100  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005720  00000000  00000000  00110ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006aec 	.word	0x08006aec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006aec 	.word	0x08006aec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <_ZN5Usart5usart16updatewrDMAIndexEv>:
	HAL_StatusTypeDef putChar( uint8_t c );
	HAL_StatusTypeDef putLine( uint8_t *lineData );
	HAL_StatusTypeDef putBlock( uint8_t *blockData, uint16_t blockLength );
	uint16_t available();
	bool isEnabled() { return enabled; }
	void updatewrDMAIndex() { wrDMABufferIndex =  BUFSIZE - hrxDMA->Instance->CNDTR; };
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	b29b      	uxth	r3, r3
 8000202:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000206:	b29a      	uxth	r2, r3
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr

0800021a <_Znwj>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);

// FreeRTOS:in muistiallokaattorit, jos satuttaisi tarviimaan
void * operator new( size_t size )
{
 800021a:	b580      	push	{r7, lr}
 800021c:	b082      	sub	sp, #8
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f006 fa54 	bl	80066d0 <pvPortMalloc>
 8000228:	4603      	mov	r3, r0
}
 800022a:	4618      	mov	r0, r3
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <vApplicationTickHook>:

// FreeRTOS:in kellokeskeytykseen koukutettu apuproseduuri jota kutsutaan
// jokaisella kellokeskeytyksellä (millisekunnin välein)
// Proseduuri päivittää usart-luokan rengaspuskurin kirjoitusindeksin
// DMA-ohjaimen rautarekisteristä luokan jäsenmuuttujaan.
void vApplicationTickHook( void ) {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	U2->updatewrDMAIndex();
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <vApplicationTickHook+0x14>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffd7 	bl	80001f0 <_ZN5Usart5usart16updatewrDMAIndexEv>
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000134 	.word	0x20000134

0800024c <_Z10serialTaskPv>:
static StaticTask_t serTCB;
static TaskHandle_t hSER;

// Yksinkertainen taski joka 'keskustelee' käyttäjän kanssa demonstroiden
// usart-luokan ja rengaspuskurin käyttöä.
void serialTask( void *pvParameters ) {
 800024c:	b5b0      	push	{r4, r5, r7, lr}
 800024e:	b0cc      	sub	sp, #304	; 0x130
 8000250:	af02      	add	r7, sp, #8
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	6018      	str	r0, [r3, #0]
uint8_t greeting[] = "Hello, World! serialTask here!\r\n";
 8000256:	4b71      	ldr	r3, [pc, #452]	; (800041c <_Z10serialTaskPv+0x1d0>)
 8000258:	f507 7482 	add.w	r4, r7, #260	; 0x104
 800025c:	461d      	mov	r5, r3
 800025e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000266:	682b      	ldr	r3, [r5, #0]
 8000268:	7023      	strb	r3, [r4, #0]
uint8_t select[] = "Hit '1' for line input (max 80 chars) or '2' for block input (max 5 chars)\r\n";
 800026a:	4a6d      	ldr	r2, [pc, #436]	; (8000420 <_Z10serialTaskPv+0x1d4>)
 800026c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000270:	4611      	mov	r1, r2
 8000272:	224d      	movs	r2, #77	; 0x4d
 8000274:	4618      	mov	r0, r3
 8000276:	f006 fc25 	bl	8006ac4 <memcpy>
uint8_t prompt1[] = "Waiting for text line!\r\n";
 800027a:	4b6a      	ldr	r3, [pc, #424]	; (8000424 <_Z10serialTaskPv+0x1d8>)
 800027c:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000280:	461d      	mov	r5, r3
 8000282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800028a:	c403      	stmia	r4!, {r0, r1}
 800028c:	7022      	strb	r2, [r4, #0]
uint8_t prompt2[] = "Waiting for text block!\r\n";
 800028e:	4b66      	ldr	r3, [pc, #408]	; (8000428 <_Z10serialTaskPv+0x1dc>)
 8000290:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000294:	461d      	mov	r5, r3
 8000296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800029e:	c403      	stmia	r4!, {r0, r1}
 80002a0:	8022      	strh	r2, [r4, #0]
uint8_t unknown[] = "That did not compute :( \r\n";
 80002a2:	4b62      	ldr	r3, [pc, #392]	; (800042c <_Z10serialTaskPv+0x1e0>)
 80002a4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80002a8:	461d      	mov	r5, r3
 80002aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b2:	c403      	stmia	r4!, {r0, r1}
 80002b4:	8022      	strh	r2, [r4, #0]
 80002b6:	3402      	adds	r4, #2
 80002b8:	0c13      	lsrs	r3, r2, #16
 80002ba:	7023      	strb	r3, [r4, #0]
uint8_t ch;
uint8_t inputLine[80];
uint16_t len;


	U2->begin( &huart2, &hdma_usart2_rx, &hdma_usart2_tx);
 80002bc:	4b5c      	ldr	r3, [pc, #368]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	4b5c      	ldr	r3, [pc, #368]	; (8000434 <_Z10serialTaskPv+0x1e8>)
 80002c2:	4a5d      	ldr	r2, [pc, #372]	; (8000438 <_Z10serialTaskPv+0x1ec>)
 80002c4:	495d      	ldr	r1, [pc, #372]	; (800043c <_Z10serialTaskPv+0x1f0>)
 80002c6:	f000 fc17 	bl	8000af8 <_ZN5Usart5usart5beginEP20__UART_HandleTypeDefP19__DMA_HandleTypeDefS4_>
	U2->putLine(greeting);
 80002ca:	4b59      	ldr	r3, [pc, #356]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80002d2:	4611      	mov	r1, r2
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fc6a 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
	vTaskDelay(100);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f004 fede 	bl	800509c <vTaskDelay>
	for ( ;; ) {
		U2->putLine(select);
 80002e0:	4b53      	ldr	r3, [pc, #332]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80002e8:	4611      	mov	r1, r2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fc5f 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
		U2->clear();
 80002f0:	4b4f      	ldr	r3, [pc, #316]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fc45 	bl	8000b84 <_ZN5Usart5usart5clearEv>
		ch = U2->getChar();
 80002fa:	4b4d      	ldr	r3, [pc, #308]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fc8d 	bl	8000c1e <_ZN5Usart5usart7getCharEv>
 8000304:	4603      	mov	r3, r0
 8000306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if ( ch == '1' ) {
 800030a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800030e:	2b31      	cmp	r3, #49	; 0x31
 8000310:	d135      	bne.n	800037e <_Z10serialTaskPv+0x132>
			U2->putLine(prompt1);
 8000312:	4b47      	ldr	r3, [pc, #284]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fc46 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
			len = 0;
 8000322:	f107 030e 	add.w	r3, r7, #14
 8000326:	2200      	movs	r2, #0
 8000328:	801a      	strh	r2, [r3, #0]
			U2->getLine( inputLine, 80, 20000, &len);
 800032a:	4b41      	ldr	r3, [pc, #260]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	f107 0110 	add.w	r1, r7, #16
 8000332:	f107 030e 	add.w	r3, r7, #14
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	f644 6320 	movw	r3, #20000	; 0x4e20
 800033c:	2250      	movs	r2, #80	; 0x50
 800033e:	f000 fc99 	bl	8000c74 <_ZN5Usart5usart7getLineEPhtmPt>
			if ( len ) {
 8000342:	f107 030e 	add.w	r3, r7, #14
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d011      	beq.n	8000370 <_Z10serialTaskPv+0x124>
				U2->putLine( inputLine );
 800034c:	4b38      	ldr	r3, [pc, #224]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f107 0210 	add.w	r2, r7, #16
 8000354:	4611      	mov	r1, r2
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fc29 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
				vTaskDelay(100);
 800035c:	2064      	movs	r0, #100	; 0x64
 800035e:	f004 fe9d 	bl	800509c <vTaskDelay>
				U2->putLine((uint8_t *)"\r\n");
 8000362:	4b33      	ldr	r3, [pc, #204]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4936      	ldr	r1, [pc, #216]	; (8000440 <_Z10serialTaskPv+0x1f4>)
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fc20 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
 800036e:	e050      	b.n	8000412 <_Z10serialTaskPv+0x1c6>
			}
			else U2->putLine( (uint8_t *)"No text within timeout!\r\n");
 8000370:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4933      	ldr	r1, [pc, #204]	; (8000444 <_Z10serialTaskPv+0x1f8>)
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fc19 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
 800037c:	e049      	b.n	8000412 <_Z10serialTaskPv+0x1c6>
		}
		else if ( ch == '2' ){
 800037e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000382:	2b32      	cmp	r3, #50	; 0x32
 8000384:	d13d      	bne.n	8000402 <_Z10serialTaskPv+0x1b6>
			U2->putLine(prompt2);
 8000386:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fc0c 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
			len = 0;
 8000396:	f107 030e 	add.w	r3, r7, #14
 800039a:	2200      	movs	r2, #0
 800039c:	801a      	strh	r2, [r3, #0]
			U2->getBlock( inputLine, 5, 20000, &len);
 800039e:	4b24      	ldr	r3, [pc, #144]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80003a0:	6818      	ldr	r0, [r3, #0]
 80003a2:	f107 0110 	add.w	r1, r7, #16
 80003a6:	f107 030e 	add.w	r3, r7, #14
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	f644 6320 	movw	r3, #20000	; 0x4e20
 80003b0:	2205      	movs	r2, #5
 80003b2:	f000 fce3 	bl	8000d7c <_ZN5Usart5usart8getBlockEPhtmPt>
			if ( len ) {
 80003b6:	f107 030e 	add.w	r3, r7, #14
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d019      	beq.n	80003f4 <_Z10serialTaskPv+0x1a8>
				inputLine[len] = '\0';
 80003c0:	f107 030e 	add.w	r3, r7, #14
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	461a      	mov	r2, r3
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	2100      	movs	r1, #0
 80003ce:	5499      	strb	r1, [r3, r2]
				U2->putLine( inputLine );
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f107 0210 	add.w	r2, r7, #16
 80003d8:	4611      	mov	r1, r2
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 fbe7 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
				vTaskDelay(100);
 80003e0:	2064      	movs	r0, #100	; 0x64
 80003e2:	f004 fe5b 	bl	800509c <vTaskDelay>
				U2->putLine((uint8_t *)"\r\n");
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4915      	ldr	r1, [pc, #84]	; (8000440 <_Z10serialTaskPv+0x1f4>)
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 fbde 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
 80003f2:	e00e      	b.n	8000412 <_Z10serialTaskPv+0x1c6>
			}
			else U2->putLine( (uint8_t *)"No text within timeout!\r\n");
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4912      	ldr	r1, [pc, #72]	; (8000444 <_Z10serialTaskPv+0x1f8>)
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fbd7 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
 8000400:	e007      	b.n	8000412 <_Z10serialTaskPv+0x1c6>
		}
		else U2->putLine( unknown );
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <_Z10serialTaskPv+0x1e4>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800040a:	4611      	mov	r1, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fbce 	bl	8000bae <_ZN5Usart5usart7putLineEPh>
		vTaskDelay(500);
 8000412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000416:	f004 fe41 	bl	800509c <vTaskDelay>
		U2->putLine(select);
 800041a:	e761      	b.n	80002e0 <_Z10serialTaskPv+0x94>
 800041c:	08006b24 	.word	0x08006b24
 8000420:	08006b48 	.word	0x08006b48
 8000424:	08006b98 	.word	0x08006b98
 8000428:	08006bb4 	.word	0x08006bb4
 800042c:	08006bd0 	.word	0x08006bd0
 8000430:	20000134 	.word	0x20000134
 8000434:	200000f0 	.word	0x200000f0
 8000438:	200000ac 	.word	0x200000ac
 800043c:	2000002c 	.word	0x2000002c
 8000440:	08006b04 	.word	0x08006b04
 8000444:	08006b08 	.word	0x08006b08

08000448 <main>:
	}
}

int main(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af04      	add	r7, sp, #16

	HAL_Init();
 800044e:	f000 fda1 	bl	8000f94 <HAL_Init>

	SystemClock_Config();
 8000452:	f000 f823 	bl	800049c <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 8000456:	f000 f8e9 	bl	800062c <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 800045a:	f000 f8c1 	bl	80005e0 <_ZL11MX_DMA_Initv>
	MX_USART2_UART_Init();
 800045e:	f000 f88b 	bl	8000578 <_ZL19MX_USART2_UART_Initv>

	// usart-luokka käyttää FreeRTOS:in Timer-palvelua. Palvelu on kernelin sisäinen taski joka kilpailee ajoajasta
	// käyttäjän taskien kanssa. SEN OLETUSPRIORITEETTI ON tskIDLE_PRIORITY+2. Pitää olla erittäin varovainen
	// jos käyttäjän taskeilla on korkeampi prioriteetti (isompi numeroarvo) koska Timer-palvelu ei ehkä saa koskaan ajovuoroa.
	// FreeRTOS:in konfiguraatiossa Timerin prioriteettia voi nostaa tarvittaessa.
	hSER = xTaskCreateStatic( serialTask, "SER", SER_STACKSIZE, NULL, tskIDLE_PRIORITY+1, serStack, &serTCB );
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <main+0x40>)
 8000464:	9302      	str	r3, [sp, #8]
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <main+0x44>)
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	2301      	movs	r3, #1
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2300      	movs	r3, #0
 8000470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000474:	4906      	ldr	r1, [pc, #24]	; (8000490 <main+0x48>)
 8000476:	4807      	ldr	r0, [pc, #28]	; (8000494 <main+0x4c>)
 8000478:	f004 fcc0 	bl	8004dfc <xTaskCreateStatic>
 800047c:	4602      	mov	r2, r0
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <main+0x50>)
 8000480:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 8000482:	f004 fe3f 	bl	8005104 <vTaskStartScheduler>


	while (1){
 8000486:	e7fe      	b.n	8000486 <main+0x3e>
 8000488:	20000538 	.word	0x20000538
 800048c:	20000138 	.word	0x20000138
 8000490:	08006bec 	.word	0x08006bec
 8000494:	0800024d 	.word	0x0800024d
 8000498:	20000594 	.word	0x20000594

0800049c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b0a6      	sub	sp, #152	; 0x98
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004a6:	2228      	movs	r2, #40	; 0x28
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f006 fb15 	bl	8006ada <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2258      	movs	r2, #88	; 0x58
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f006 fb07 	bl	8006ada <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004cc:	2302      	movs	r3, #2
 80004ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d0:	2301      	movs	r3, #1
 80004d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d4:	2310      	movs	r3, #16
 80004d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004da:	2302      	movs	r3, #2
 80004dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 fa38 	bl	8001970 <HAL_RCC_OscConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	bf14      	ite	ne
 8000506:	2301      	movne	r3, #1
 8000508:	2300      	moveq	r3, #0
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000510:	f000 f906 	bl	8000720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000514:	230f      	movs	r3, #15
 8000516:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000518:	2302      	movs	r3, #2
 800051a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000524:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800052e:	2102      	movs	r1, #2
 8000530:	4618      	mov	r0, r3
 8000532:	f002 f933 	bl	800279c <HAL_RCC_ClockConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000546:	f000 f8eb 	bl	8000720 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800054a:	2302      	movs	r3, #2
 800054c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4618      	mov	r0, r3
 8000556:	f002 fb89 	bl	8002c6c <HAL_RCCEx_PeriphCLKConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	bf14      	ite	ne
 8000560:	2301      	movne	r3, #1
 8000562:	2300      	moveq	r3, #0
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800056a:	f000 f8d9 	bl	8000720 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3798      	adds	r7, #152	; 0x98
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <_ZL19MX_USART2_UART_Initv+0x64>)
 8000580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005bc:	f002 ffd8 	bl	8003570 <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf14      	ite	ne
 80005c6:	2301      	movne	r3, #1
 80005c8:	2300      	moveq	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80005d0:	f000 f8a6 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	40004400 	.word	0x40004400

080005e0 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <_ZL11MX_DMA_Initv+0x48>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <_ZL11MX_DMA_Initv+0x48>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <_ZL11MX_DMA_Initv+0x48>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2105      	movs	r1, #5
 8000602:	2010      	movs	r0, #16
 8000604:	f000 fdb4 	bl	8001170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000608:	2010      	movs	r0, #16
 800060a:	f000 fdcd 	bl	80011a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2105      	movs	r1, #5
 8000612:	2011      	movs	r0, #17
 8000614:	f000 fdac 	bl	8001170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000618:	2011      	movs	r0, #17
 800061a:	f000 fdc5 	bl	80011a8 <HAL_NVIC_EnableIRQ>

}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 f949 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <_ZL12MX_GPIO_Initv+0xc8>)
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <_ZL12MX_GPIO_Initv+0xcc>)
 80006c4:	f000 ffb2 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f000 ffa3 	bl	800162c <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	10210000 	.word	0x10210000
 80006f8:	48000800 	.word	0x48000800

080006fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d101      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800070e:	f000 fc57 	bl	8000fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40001000 	.word	0x40001000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	while ( 1 );
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x4>
	...

08000728 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d109      	bne.n	800074c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073e:	4293      	cmp	r3, r2
 8000740:	d104      	bne.n	800074c <_Z41__static_initialization_and_destruction_0ii+0x24>
Usart::usart *U2 = U2->getInstance();	// haetaan luokan ainoan instanssin osoite. osoitin SINGLETON USART2-objektiin
 8000742:	f000 f997 	bl	8000a74 <_ZN5Usart5usart11getInstanceEv>
 8000746:	4602      	mov	r2, r0
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000134 	.word	0x20000134

08000758 <_GLOBAL__sub_I_huart2>:
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
 800075c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ffe1 	bl	8000728 <_Z41__static_initialization_and_destruction_0ii>
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_MspInit+0x4c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_MspInit+0x4c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_MspInit+0x4c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	210f      	movs	r1, #15
 80007a2:	f06f 0001 	mvn.w	r0, #1
 80007a6:	f000 fce3 	bl	8001170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a41      	ldr	r2, [pc, #260]	; (80008dc <HAL_UART_MspInit+0x124>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d17c      	bne.n	80008d4 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007da:	4b41      	ldr	r3, [pc, #260]	; (80008e0 <HAL_UART_MspInit+0x128>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a40      	ldr	r2, [pc, #256]	; (80008e0 <HAL_UART_MspInit+0x128>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <HAL_UART_MspInit+0x128>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <HAL_UART_MspInit+0x128>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a3a      	ldr	r2, [pc, #232]	; (80008e0 <HAL_UART_MspInit+0x128>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <HAL_UART_MspInit+0x128>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080a:	230c      	movs	r3, #12
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081a:	2307      	movs	r3, #7
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f000 ff00 	bl	800162c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 800082e:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <HAL_UART_MspInit+0x130>)
 8000830:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000832:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 8000852:	2220      	movs	r2, #32
 8000854:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800085c:	4821      	ldr	r0, [pc, #132]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 800085e:	f000 fcb1 	bl	80011c4 <HAL_DMA_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000868:	f7ff ff5a 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 8000870:	66da      	str	r2, [r3, #108]	; 0x6c
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <HAL_UART_MspInit+0x12c>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_UART_MspInit+0x134>)
 800087a:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_UART_MspInit+0x138>)
 800087c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_UART_MspInit+0x134>)
 8000880:	2210      	movs	r2, #16
 8000882:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <HAL_UART_MspInit+0x134>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_UART_MspInit+0x134>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <HAL_UART_MspInit+0x134>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_UART_MspInit+0x134>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <HAL_UART_MspInit+0x134>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_UART_MspInit+0x134>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008a8:	4810      	ldr	r0, [pc, #64]	; (80008ec <HAL_UART_MspInit+0x134>)
 80008aa:	f000 fc8b 	bl	80011c4 <HAL_DMA_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80008b4:	f7ff ff34 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <HAL_UART_MspInit+0x134>)
 80008bc:	669a      	str	r2, [r3, #104]	; 0x68
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <HAL_UART_MspInit+0x134>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2105      	movs	r1, #5
 80008c8:	2026      	movs	r0, #38	; 0x26
 80008ca:	f000 fc51 	bl	8001170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ce:	2026      	movs	r0, #38	; 0x26
 80008d0:	f000 fc6a 	bl	80011a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40021000 	.word	0x40021000
 80008e4:	200000ac 	.word	0x200000ac
 80008e8:	4002006c 	.word	0x4002006c
 80008ec:	200000f0 	.word	0x200000f0
 80008f0:	40020080 	.word	0x40020080

080008f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	2036      	movs	r0, #54	; 0x36
 800090a:	f000 fc31 	bl	8001170 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800090e:	2036      	movs	r0, #54	; 0x36
 8000910:	f000 fc4a 	bl	80011a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <HAL_InitTick+0xa0>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <HAL_InitTick+0xa0>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	61d3      	str	r3, [r2, #28]
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_InitTick+0xa0>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092c:	f107 0210 	add.w	r2, r7, #16
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f966 	bl	8002c08 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800093c:	f002 f920 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8000940:	4603      	mov	r3, r0
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000948:	4a13      	ldr	r2, [pc, #76]	; (8000998 <HAL_InitTick+0xa4>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	0c9b      	lsrs	r3, r3, #18
 8000950:	3b01      	subs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_InitTick+0xa8>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <HAL_InitTick+0xac>)
 8000958:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_InitTick+0xa8>)
 800095c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000960:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_InitTick+0xa8>)
 8000964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000966:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_InitTick+0xa8>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_InitTick+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <HAL_InitTick+0xa8>)
 8000976:	f002 fb97 	bl	80030a8 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d104      	bne.n	800098a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <HAL_InitTick+0xa8>)
 8000982:	f002 fbc7 	bl	8003114 <HAL_TIM_Base_Start_IT>
 8000986:	4603      	mov	r3, r0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3730      	adds	r7, #48	; 0x30
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	431bde83 	.word	0x431bde83
 800099c:	200032a0 	.word	0x200032a0
 80009a0:	40001000 	.word	0x40001000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <DMA1_Channel6_IRQHandler+0x10>)
 80009de:	f000 fd17 	bl	8001410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000ac 	.word	0x200000ac

080009ec <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <DMA1_Channel7_IRQHandler+0x10>)
 80009f2:	f000 fd0d 	bl	8001410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000f0 	.word	0x200000f0

08000a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <USART2_IRQHandler+0x10>)
 8000a06:	f002 fe7d 	bl	8003704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000002c 	.word	0x2000002c

08000a14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM6_DAC_IRQHandler+0x10>)
 8000a1a:	f002 fba5 	bl	8003168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200032a0 	.word	0x200032a0

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <SystemInit+0x28>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <SystemInit+0x28>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SystemInit+0x28>)
 8000a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a42:	609a      	str	r2, [r3, #8]
#endif
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <_ZN5Usart18usartTimerCallbackEPv>:

#define STATBUFSIZE 8
uint8_t staticBuffer[STATBUFSIZE];
uint8_t statIndex = 0;

__weak void usartTimerCallback( TimerHandle_t xTimer ) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	6078      	str	r0, [r7, #4]
	xTimerStop( xTimer, 0 );
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	2103      	movs	r1, #3
 8000a68:	f005 f90e 	bl	8005c88 <xTimerGenericCommand>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_ZN5Usart5usart11getInstanceEv>:

usart *usart::instance = 0;


usart* usart::getInstance() {
 8000a74:	b598      	push	{r3, r4, r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    if (!instance)
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <_ZN5Usart5usart11getInstanceEv+0x2c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10a      	bne.n	8000a96 <_ZN5Usart5usart11getInstanceEv+0x22>
    instance = new usart;
 8000a80:	f44f 7094 	mov.w	r0, #296	; 0x128
 8000a84:	f7ff fbc9 	bl	800021a <_Znwj>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f000 f809 	bl	8000aa4 <_ZN5Usart5usartC1Ev>
 8000a92:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <_ZN5Usart5usart11getInstanceEv+0x2c>)
 8000a94:	601c      	str	r4, [r3, #0]
    return instance;
 8000a96:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <_ZN5Usart5usart11getInstanceEv+0x2c>)
 8000a98:	681b      	ldr	r3, [r3, #0]

}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd98      	pop	{r3, r4, r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000598 	.word	0x20000598

08000aa4 <_ZN5Usart5usartC1Ev>:

usart::usart() {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	serMode = lineMode;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	751a      	strb	r2, [r3, #20]
	rdDMABufferIndex = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	wrDMABufferIndex = 0;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	rdSerBufferIndex = 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
	wrSerBufferIndex = 0;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	serBuffer = NULL;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	serBufferSize = 0;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
	rxResult = 0;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
}
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <_ZN5Usart5usart5beginEP20__UART_HandleTypeDefP19__DMA_HandleTypeDefS4_>:
usart::~usart() {
	// TODO Auto-generated destructor stub
}

// Alustusmetodi joka valmistelee usart-objektin käyttöä varten
void usart::begin( UART_HandleTypeDef *hUart, DMA_HandleTypeDef *hrxDma, DMA_HandleTypeDef *htxDma ) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	603b      	str	r3, [r7, #0]
	hUART = hUart;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	605a      	str	r2, [r3, #4]
	hrxDMA = hrxDma;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	609a      	str	r2, [r3, #8]
	htxDMA = htxDma;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	60da      	str	r2, [r3, #12]
	// vastaanottometodeilla on timeout joka on toteutettu FreeRTOS:in timer-palvelulla
	// tässä luodaan metodien käyttämä timeri
	hRxTimer = xTimerCreate( "RxT", pdMS_TO_TICKS( DEFAULT_RX_TIMEOUT ), pdFALSE, NULL, usartTimerCallback );
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <_ZN5Usart5usart5beginEP20__UART_HandleTypeDefP19__DMA_HandleTypeDefS4_+0x84>)
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b24:	4816      	ldr	r0, [pc, #88]	; (8000b80 <_ZN5Usart5usart5beginEP20__UART_HandleTypeDefP19__DMA_HandleTypeDefS4_+0x88>)
 8000b26:	f005 f85d 	bl	8005be4 <xTimerCreate>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
	if ( hRxTimer ) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d01b      	beq.n	8000b70 <_ZN5Usart5usart5beginEP20__UART_HandleTypeDefP19__DMA_HandleTypeDefS4_+0x78>
		// enabloidaan USARTin vastaanotto ja DMA-siirto
		SET_BIT(hUART->Instance->CR3, USART_CR3_DMAR);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b4a:	609a      	str	r2, [r3, #8]
		HAL_DMA_Start( hrxDMA, (uint32_t)(&(hUART->Instance->RDR)), (uint32_t)&dmaBuffer, BUFSIZE );
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6898      	ldr	r0, [r3, #8]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3324      	adds	r3, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3316      	adds	r3, #22
 8000b5e:	461a      	mov	r2, r3
 8000b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b64:	f000 fb75 	bl	8001252 <HAL_DMA_Start>
		enabled = true;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	755a      	strb	r2, [r3, #21]
	}
	else Error_Handler();
}
 8000b6e:	e001      	b.n	8000b74 <_ZN5Usart5usart5beginEP20__UART_HandleTypeDefP19__DMA_HandleTypeDefS4_+0x7c>
	else Error_Handler();
 8000b70:	f7ff fdd6 	bl	8000720 <Error_Handler>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	08000a55 	.word	0x08000a55
 8000b80:	08006bf0 	.word	0x08006bf0

08000b84 <_ZN5Usart5usart5clearEv>:
    CLEAR_BIT(hUART->Instance->CR3, USART_CR3_DMAR);
	HAL_DMA_Abort( hrxDMA );
	enabled = false;
}

void usart::clear() {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	rdDMABufferIndex = BUFSIZE - hrxDMA->Instance->CNDTR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_ZN5Usart5usart7putLineEPh>:
	staticBuffer[statIndex++] = c;
	if ( statIndex >= STATBUFSIZE ) statIndex = 0;
	return putBlock( &staticBuffer[i], 1);
}

HAL_StatusTypeDef usart::putLine(uint8_t *txData) {
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
		return putBlock( txData, strlen( (char *)txData ) );
 8000bb8:	6838      	ldr	r0, [r7, #0]
 8000bba:	f7ff fb11 	bl	80001e0 <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f805 	bl	8000bd6 <_ZN5Usart5usart8putBlockEPht>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_ZN5Usart5usart8putBlockEPht>:

// Tällä metodilla oikeasti lähtee kaikki tavara ulos
HAL_StatusTypeDef usart::putBlock( uint8_t *blockData, uint16_t blockLength ) {
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	4613      	mov	r3, r2
 8000be2:	80fb      	strh	r3, [r7, #6]
	if ( htxDMA->Instance->CNDTR == 0 ) {
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	bf0c      	ite	eq
 8000bf0:	2301      	moveq	r3, #1
 8000bf2:	2300      	movne	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00c      	beq.n	8000c14 <_ZN5Usart5usart8putBlockEPht+0x3e>
		hUART->gState = HAL_UART_STATE_READY;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2220      	movs	r2, #32
 8000c00:	675a      	str	r2, [r3, #116]	; 0x74
		return HAL_UART_Transmit_DMA( hUART, blockData, blockLength );
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	88fa      	ldrh	r2, [r7, #6]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fcfe 	bl	800360c <HAL_UART_Transmit_DMA>
 8000c10:	4603      	mov	r3, r0
 8000c12:	e000      	b.n	8000c16 <_ZN5Usart5usart8putBlockEPht+0x40>
	}
	return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <_ZN5Usart5usart7getCharEv>:
	if ( wrDMABufferIndex >= rdDMABufferIndex ) return wrDMABufferIndex - rdDMABufferIndex;
	else return ( BUFSIZE - ( rdDMABufferIndex - wrDMABufferIndex ) );
}

// Metodi palauttaa seuraavan vastaanotetun merkin ilman timeoutia (eli odottaa vaikka ikuisesti)
uint8_t usart::getChar() {
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	uint8_t ch;
	while ( wrDMABufferIndex == rdDMABufferIndex );
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d100      	bne.n	8000c38 <_ZN5Usart5usart7getCharEv+0x1a>
 8000c36:	e7f6      	b.n	8000c26 <_ZN5Usart5usart7getCharEv+0x8>
	ch = dmaBuffer[rdDMABufferIndex++];
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	b291      	uxth	r1, r2
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	f8a2 1116 	strh.w	r1, [r2, #278]	; 0x116
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	7d9b      	ldrb	r3, [r3, #22]
 8000c50:	73fb      	strb	r3, [r7, #15]
	if ( rdDMABufferIndex >= BUFSIZE ) rdDMABufferIndex = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d903      	bls.n	8000c64 <_ZN5Usart5usart7getCharEv+0x46>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	return ch;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <_ZN5Usart5usart7getLineEPhtmPt>:

// Metodi lukee USARTin rengaspuskurista tekstirivin joka päättyy joko '\r' tai '\n' -merkkiin.
// Jos rivi on pidempi kuin varattu puskuri, teksti katkaistaan väkisin ja terminoidaan '\0'
// Käyttäjän täytyy selvittää että rivi on vielä vajaa.
// Argumenttiin *rxLen palautetaan luetun rivin todellinen pituus (jos timeout ennen kuin rivin lopetus)
bool usart::getLine(uint8_t *lineBuffer, uint16_t lineSize, uint32_t timeout, uint16_t *rxLen ) {
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	4613      	mov	r3, r2
 8000c82:	80fb      	strh	r3, [r7, #6]
	bool st = true;
 8000c84:	2301      	movs	r3, #1
 8000c86:	75fb      	strb	r3, [r7, #23]
	serBuffer = lineBuffer;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	serBufferSize = lineSize;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	88fa      	ldrh	r2, [r7, #6]
 8000c94:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
	wrSerBufferIndex = 0;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	serMode = lineMode;		// halutaan lukea riveittäin. (rivi tai sen osa päättyy '\0')
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	751a      	strb	r2, [r3, #20]
	if ( xTimerChangePeriod( hRxTimer, pdMS_TO_TICKS( timeout ), 1 ) == pdFAIL ) Error_Handler();
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6918      	ldr	r0, [r3, #16]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	4a2f      	ldr	r2, [pc, #188]	; (8000d74 <_ZN5Usart5usart7getLineEPhtmPt+0x100>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	099a      	lsrs	r2, r3, #6
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	f004 ffe0 	bl	8005c88 <xTimerGenericCommand>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf0c      	ite	eq
 8000cce:	2301      	moveq	r3, #1
 8000cd0:	2300      	movne	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <_ZN5Usart5usart7getLineEPhtmPt+0x68>
 8000cd8:	f7ff fd22 	bl	8000720 <Error_Handler>
	if ( xTimerStart( hRxTimer, 100 ) == pdFAIL ) Error_Handler();
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	691c      	ldr	r4, [r3, #16]
 8000ce0:	f004 fb1e 	bl	8005320 <xTaskGetTickCount>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	2364      	movs	r3, #100	; 0x64
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	2101      	movs	r1, #1
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f004 ffca 	bl	8005c88 <xTimerGenericCommand>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2301      	moveq	r3, #1
 8000cfc:	2300      	movne	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <_ZN5Usart5usart7getLineEPhtmPt+0x94>
 8000d04:	f7ff fd0c 	bl	8000720 <Error_Handler>
	while ( !spoolDMABuffer() ) {
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f000 f893 	bl	8000e34 <_ZN5Usart5usart14spoolDMABufferEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f083 0301 	eor.w	r3, r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d021      	beq.n	8000d5e <_ZN5Usart5usart7getLineEPhtmPt+0xea>
		if ( !xTimerIsTimerActive( hRxTimer ) ) {
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f005 fa74 	bl	800620c <xTimerIsTimerActive>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00b      	beq.n	8000d4c <_ZN5Usart5usart7getLineEPhtmPt+0xd8>
			st = false;
 8000d34:	2300      	movs	r3, #0
 8000d36:	75fb      	strb	r3, [r7, #23]
			serBuffer[wrSerBufferIndex] = '\0';
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	f8b2 2124 	ldrh.w	r2, [r2, #292]	; 0x124
 8000d44:	4413      	add	r3, r2
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
			break;
 8000d4a:	e008      	b.n	8000d5e <_ZN5Usart5usart7getLineEPhtmPt+0xea>
		}
		taskYIELD();
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <_ZN5Usart5usart7getLineEPhtmPt+0x104>)
 8000d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	f3bf 8f6f 	isb	sy
	while ( !spoolDMABuffer() ) {
 8000d5c:	e7d4      	b.n	8000d08 <_ZN5Usart5usart7getLineEPhtmPt+0x94>
	}
	*rxLen = wrSerBufferIndex;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f8b3 2124 	ldrh.w	r2, [r3, #292]	; 0x124
 8000d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d66:	801a      	strh	r2, [r3, #0]
	return st;
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	10624dd3 	.word	0x10624dd3
 8000d78:	e000ed04 	.word	0xe000ed04

08000d7c <_ZN5Usart5usart8getBlockEPhtmPt>:

// Metodi lukee USARTin rengaspuskurista määrämittaisen lohkon (esim protokollakehyksen)
// Lohkoa ei terminoida millään vaan se palautetaan juuri kuten luettiin linjalta.
// Argumenttiin *rxLen palautetaan luetun lohkon todellinen pituus (jos timeout ennen kuin lohko täysi)
bool usart::getBlock(uint8_t *blockBuffer, uint16_t blockSize, uint32_t timeout, uint16_t *rxLen ) {
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	80fb      	strh	r3, [r7, #6]
	bool st = true;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	75fb      	strb	r3, [r7, #23]
	serBuffer = blockBuffer;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	serBufferSize = blockSize;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	88fa      	ldrh	r2, [r7, #6]
 8000d9c:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
	wrSerBufferIndex = 0;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	serMode = blockMode;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2202      	movs	r2, #2
 8000dac:	751a      	strb	r2, [r3, #20]
	xTimerChangePeriod( hRxTimer, timeout / portTICK_PERIOD_MS, 100);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6918      	ldr	r0, [r3, #16]
 8000db2:	2364      	movs	r3, #100	; 0x64
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2300      	movs	r3, #0
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	2104      	movs	r1, #4
 8000dbc:	f004 ff64 	bl	8005c88 <xTimerGenericCommand>
	xTimerStart( hRxTimer, 100 );
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	691c      	ldr	r4, [r3, #16]
 8000dc4:	f004 faac 	bl	8005320 <xTaskGetTickCount>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	2364      	movs	r3, #100	; 0x64
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f004 ff58 	bl	8005c88 <xTimerGenericCommand>
	while ( !spoolDMABuffer() ) {
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 f82b 	bl	8000e34 <_ZN5Usart5usart14spoolDMABufferEv>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f083 0301 	eor.w	r3, r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d018      	beq.n	8000e1c <_ZN5Usart5usart8getBlockEPhtmPt+0xa0>
		if ( !xTimerIsTimerActive( hRxTimer ) ) {
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f005 fa0c 	bl	800620c <xTimerIsTimerActive>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <_ZN5Usart5usart8getBlockEPhtmPt+0x8e>
			st = false;
 8000e04:	2300      	movs	r3, #0
 8000e06:	75fb      	strb	r3, [r7, #23]
			break;
 8000e08:	e008      	b.n	8000e1c <_ZN5Usart5usart8getBlockEPhtmPt+0xa0>
		}
		taskYIELD();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <_ZN5Usart5usart8getBlockEPhtmPt+0xb4>)
 8000e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	f3bf 8f4f 	dsb	sy
 8000e16:	f3bf 8f6f 	isb	sy
	while ( !spoolDMABuffer() ) {
 8000e1a:	e7dd      	b.n	8000dd8 <_ZN5Usart5usart8getBlockEPhtmPt+0x5c>
	}
	*rxLen = wrSerBufferIndex;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f8b3 2124 	ldrh.w	r2, [r3, #292]	; 0x124
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	801a      	strh	r2, [r3, #0]
	return st;
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	e000ed04 	.word	0xe000ed04

08000e34 <_ZN5Usart5usart14spoolDMABufferEv>:

// Spooleri siirtää merkkejä DMA-vastaanottopuskurista käyttäjän lukumetodin osoittamaan puskuriin
bool usart::spoolDMABuffer() {
 8000e34:	b490      	push	{r4, r7}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
			}
			else break;
		}
	}
*/
	while ( rdDMABufferIndex != wrDMABufferIndex ) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d072      	beq.n	8000f32 <_ZN5Usart5usart14spoolDMABufferEv+0xfe>
		if ( serMode == lineMode ) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7d1b      	ldrb	r3, [r3, #20]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d129      	bne.n	8000ea8 <_ZN5Usart5usart14spoolDMABufferEv+0x74>
			if ( dmaBuffer[rdDMABufferIndex] == '\r' || dmaBuffer[rdDMABufferIndex] == '\n') {  // rivin loppumerkki?
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	7d9b      	ldrb	r3, [r3, #22]
 8000e62:	2b0d      	cmp	r3, #13
 8000e64:	d008      	beq.n	8000e78 <_ZN5Usart5usart14spoolDMABufferEv+0x44>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	7d9b      	ldrb	r3, [r3, #22]
 8000e74:	2b0a      	cmp	r3, #10
 8000e76:	d117      	bne.n	8000ea8 <_ZN5Usart5usart14spoolDMABufferEv+0x74>
				serBuffer[wrSerBufferIndex++] = '\0';
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8000e84:	1c59      	adds	r1, r3, #1
 8000e86:	b288      	uxth	r0, r1
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	f8a1 0124 	strh.w	r0, [r1, #292]	; 0x124
 8000e8e:	4413      	add	r3, r2
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
				rdDMABufferIndex++;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
				return true;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e045      	b.n	8000f34 <_ZN5Usart5usart14spoolDMABufferEv+0x100>
			}
		}
		serBuffer[wrSerBufferIndex++] = dmaBuffer[rdDMABufferIndex++];
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	b291      	uxth	r1, r2
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	f8a2 1116 	strh.w	r1, [r2, #278]	; 0x116
 8000eb8:	4618      	mov	r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8000ec6:	1c59      	adds	r1, r3, #1
 8000ec8:	b28c      	uxth	r4, r1
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f8a1 4124 	strh.w	r4, [r1, #292]	; 0x124
 8000ed0:	4413      	add	r3, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4402      	add	r2, r0
 8000ed6:	7d92      	ldrb	r2, [r2, #22]
 8000ed8:	701a      	strb	r2, [r3, #0]
		if ( rdDMABufferIndex >= BUFSIZE ) rdDMABufferIndex = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8000ee0:	2bff      	cmp	r3, #255	; 0xff
 8000ee2:	d903      	bls.n	8000eec <_ZN5Usart5usart14spoolDMABufferEv+0xb8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
		if ( serMode == lineMode ) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7d1b      	ldrb	r3, [r3, #20]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d114      	bne.n	8000f1e <_ZN5Usart5usart14spoolDMABufferEv+0xea>
			if ( wrSerBufferIndex >= serBufferSize-1 ) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8000efa:	461a      	mov	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8000f02:	3b01      	subs	r3, #1
 8000f04:	429a      	cmp	r2, r3
 8000f06:	db99      	blt.n	8000e3c <_ZN5Usart5usart14spoolDMABufferEv+0x8>
				serBuffer[wrSerBufferIndex] = '\0';
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	f8b2 2124 	ldrh.w	r2, [r2, #292]	; 0x124
 8000f14:	4413      	add	r3, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
				return true;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00a      	b.n	8000f34 <_ZN5Usart5usart14spoolDMABufferEv+0x100>
			}
		}
		else {
			if ( wrSerBufferIndex >= serBufferSize ) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8b3 2124 	ldrh.w	r2, [r3, #292]	; 0x124
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d386      	bcc.n	8000e3c <_ZN5Usart5usart14spoolDMABufferEv+0x8>
				return true;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <_ZN5Usart5usart14spoolDMABufferEv+0x100>
			}
		}
	}
	return false;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc90      	pop	{r4, r7}
 8000f3c:	4770      	bx	lr
	...

08000f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f46:	e003      	b.n	8000f50 <LoopCopyDataInit>

08000f48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f4e:	3104      	adds	r1, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f58:	d3f6      	bcc.n	8000f48 <CopyDataInit>
	ldr	r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f5c:	e002      	b.n	8000f64 <LoopFillZerobss>

08000f5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f60:	f842 3b04 	str.w	r3, [r2], #4

08000f64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <LoopForever+0x16>)
	cmp	r2, r3
 8000f66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f68:	d3f9      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f6a:	f7ff fd5d 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f005 fd85 	bl	8006a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f72:	f7ff fa69 	bl	8000448 <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f78:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f7c:	08006c50 	.word	0x08006c50
	ldr	r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f84:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000f88:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000f8c:	20003324 	.word	0x20003324

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x28>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x28>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f8d8 	bl	800115a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff fca2 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fbda 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200032e0 	.word	0x200032e0

08000fe8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200032e0 	.word	0x200032e0

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	; (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	; (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff4c 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001182:	f7ff ff61 	bl	8001048 <__NVIC_GetPriorityGrouping>
 8001186:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f7ff ffb1 	bl	80010f4 <NVIC_EncodePriority>
 8001192:	4602      	mov	r2, r0
 8001194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff80 	bl	80010a0 <__NVIC_SetPriority>
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff54 	bl	8001064 <__NVIC_EnableIRQ>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e037      	b.n	800124a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011f4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f9c1 	bl	80015b4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}  
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_DMA_Start+0x20>
 800126e:	2302      	movs	r3, #2
 8001270:	e02d      	b.n	80012ce <HAL_DMA_Start+0x7c>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001280:	2b01      	cmp	r3, #1
 8001282:	d11d      	bne.n	80012c0 <HAL_DMA_Start+0x6e>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2202      	movs	r2, #2
 8001288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2200      	movs	r2, #0
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f954 	bl	8001556 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e005      	b.n	80012cc <HAL_DMA_Start+0x7a>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 80012c8:	2302      	movs	r3, #2
 80012ca:	75fb      	strb	r3, [r7, #23]
  }  

  return status; 
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_DMA_Start_IT+0x20>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e04a      	b.n	800138c <HAL_DMA_Start_IT+0xb6>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001304:	2b01      	cmp	r3, #1
 8001306:	d13a      	bne.n	800137e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0201 	bic.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 f912 	bl	8001556 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	2b00      	cmp	r3, #0
 8001338:	d008      	beq.n	800134c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 020e 	orr.w	r2, r2, #14
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e00f      	b.n	800136c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 020a 	orr.w	r2, r2, #10
 800135a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0204 	bic.w	r2, r2, #4
 800136a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0201 	orr.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	e005      	b.n	800138a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001386:	2302      	movs	r3, #2
 8001388:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800138a:	7dfb      	ldrb	r3, [r7, #23]
} 
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d005      	beq.n	80013b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2204      	movs	r2, #4
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e027      	b.n	8001406 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 020e 	bic.w	r2, r2, #14
 80013c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013de:	2101      	movs	r1, #1
 80013e0:	fa01 f202 	lsl.w	r2, r1, r2
 80013e4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4798      	blx	r3
    } 
  }
  return status;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	2204      	movs	r2, #4
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d024      	beq.n	8001482 <HAL_DMA_IRQHandler+0x72>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01f      	beq.n	8001482 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0204 	bic.w	r2, r2, #4
 800145e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001468:	2104      	movs	r1, #4
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	2b00      	cmp	r3, #0
 8001476:	d06a      	beq.n	800154e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001480:	e065      	b.n	800154e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2202      	movs	r2, #2
 8001488:	409a      	lsls	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d02c      	beq.n	80014ec <HAL_DMA_IRQHandler+0xdc>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d027      	beq.n	80014ec <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10b      	bne.n	80014c2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 020a 	bic.w	r2, r2, #10
 80014b8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ca:	2102      	movs	r1, #2
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d035      	beq.n	800154e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80014ea:	e030      	b.n	800154e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	2208      	movs	r2, #8
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d028      	beq.n	800154e <HAL_DMA_IRQHandler+0x13e>
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d023      	beq.n	800154e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020e 	bic.w	r2, r2, #14
 8001514:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	4798      	blx	r3
    }
  }
}  
 800154c:	e7ff      	b.n	800154e <HAL_DMA_IRQHandler+0x13e>
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b10      	cmp	r3, #16
 8001582:	d108      	bne.n	8001596 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001594:	e007      	b.n	80015a6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	60da      	str	r2, [r3, #12]
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <DMA_CalcBaseAndBitshift+0x60>)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d80f      	bhi.n	80015e8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <DMA_CalcBaseAndBitshift+0x64>)
 80015d0:	4413      	add	r3, r2
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <DMA_CalcBaseAndBitshift+0x68>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	009a      	lsls	r2, r3, #2
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <DMA_CalcBaseAndBitshift+0x6c>)
 80015e4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80015e6:	e00e      	b.n	8001606 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <DMA_CalcBaseAndBitshift+0x70>)
 80015f0:	4413      	add	r3, r2
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <DMA_CalcBaseAndBitshift+0x68>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	009a      	lsls	r2, r3, #2
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <DMA_CalcBaseAndBitshift+0x74>)
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40020407 	.word	0x40020407
 8001618:	bffdfff8 	.word	0xbffdfff8
 800161c:	cccccccd 	.word	0xcccccccd
 8001620:	40020000 	.word	0x40020000
 8001624:	bffdfbf8 	.word	0xbffdfbf8
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e160      	b.n	80018fe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8152 	beq.w	80018f8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x38>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	6939      	ldr	r1, [r7, #16]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d00b      	beq.n	8001700 <HAL_GPIO_Init+0xd4>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f4:	2b11      	cmp	r3, #17
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b12      	cmp	r3, #18
 80016fe:	d130      	bne.n	8001762 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001736:	2201      	movs	r2, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80ac 	beq.w	80018f8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a0:	4b5e      	ldr	r3, [pc, #376]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a5d      	ldr	r2, [pc, #372]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b5b      	ldr	r3, [pc, #364]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b8:	4a59      	ldr	r2, [pc, #356]	; (8001920 <HAL_GPIO_Init+0x2f4>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e2:	d025      	beq.n	8001830 <HAL_GPIO_Init+0x204>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d01f      	beq.n	800182c <HAL_GPIO_Init+0x200>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a4e      	ldr	r2, [pc, #312]	; (8001928 <HAL_GPIO_Init+0x2fc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d019      	beq.n	8001828 <HAL_GPIO_Init+0x1fc>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a4d      	ldr	r2, [pc, #308]	; (800192c <HAL_GPIO_Init+0x300>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_GPIO_Init+0x1f8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x304>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00d      	beq.n	8001820 <HAL_GPIO_Init+0x1f4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a4b      	ldr	r2, [pc, #300]	; (8001934 <HAL_GPIO_Init+0x308>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x1f0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_GPIO_Init+0x30c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_GPIO_Init+0x1ec>
 8001814:	2306      	movs	r3, #6
 8001816:	e00c      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001818:	2307      	movs	r3, #7
 800181a:	e00a      	b.n	8001832 <HAL_GPIO_Init+0x206>
 800181c:	2305      	movs	r3, #5
 800181e:	e008      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001820:	2304      	movs	r3, #4
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001824:	2303      	movs	r3, #3
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x206>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x206>
 8001830:	2300      	movs	r3, #0
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001842:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_GPIO_Init+0x2f4>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001850:	4b3a      	ldr	r3, [pc, #232]	; (800193c <HAL_GPIO_Init+0x310>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001874:	4a31      	ldr	r2, [pc, #196]	; (800193c <HAL_GPIO_Init+0x310>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_GPIO_Init+0x310>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800189e:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_GPIO_Init+0x310>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_GPIO_Init+0x310>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_GPIO_Init+0x310>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_GPIO_Init+0x310>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_GPIO_Init+0x310>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	f47f ae97 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	48000c00 	.word	0x48000c00
 8001930:	48001000 	.word	0x48001000
 8001934:	48001400 	.word	0x48001400
 8001938:	48001800 	.word	0x48001800
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800195c:	e002      	b.n	8001964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001976:	af00      	add	r7, sp, #0
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	f000 bf01 	b.w	800278c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8160 	beq.w	8001c5a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800199a:	4bae      	ldr	r3, [pc, #696]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d00c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a6:	4bab      	ldr	r3, [pc, #684]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d159      	bne.n	8001a66 <HAL_RCC_OscConfig+0xf6>
 80019b2:	4ba8      	ldr	r3, [pc, #672]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019be:	d152      	bne.n	8001a66 <HAL_RCC_OscConfig+0xf6>
 80019c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_OscConfig+0x82>
 80019ec:	4b99      	ldr	r3, [pc, #612]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0xae>
 80019f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a1a:	4b8e      	ldr	r3, [pc, #568]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a22:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001a26:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001a2a:	fa92 f2a2 	rbit	r2, r2
 8001a2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001a32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8102 	beq.w	8001c58 <HAL_RCC_OscConfig+0x2e8>
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80fc 	bne.w	8001c58 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f000 be93 	b.w	800278c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a70:	d106      	bne.n	8001a80 <HAL_RCC_OscConfig+0x110>
 8001a72:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a77      	ldr	r2, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e030      	b.n	8001ae2 <HAL_RCC_OscConfig+0x172>
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x134>
 8001a8a:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a71      	ldr	r2, [pc, #452]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01e      	b.n	8001ae2 <HAL_RCC_OscConfig+0x172>
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x15a>
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a64      	ldr	r2, [pc, #400]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x172>
 8001aca:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a61      	ldr	r2, [pc, #388]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d059      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa7c 	bl	8000fe8 <HAL_GetTick>
 8001af0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af6:	f7ff fa77 	bl	8000fe8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d902      	bls.n	8001b0c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	f000 be40 	b.w	800278c <HAL_RCC_OscConfig+0xe1c>
 8001b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b10:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001b20:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d102      	bne.n	8001b3e <HAL_RCC_OscConfig+0x1ce>
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x1fa>
 8001b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b42:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b56:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b5a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b66:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b6e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001b72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001b76:	fa92 f2a2 	rbit	r2, r2
 8001b7a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001b7e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f042 0220 	orr.w	r2, r2, #32
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f002 021f 	and.w	r2, r2, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f202 	lsl.w	r2, r1, r2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0ab      	beq.n	8001af6 <HAL_RCC_OscConfig+0x186>
 8001b9e:	e05c      	b.n	8001c5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fa22 	bl	8000fe8 <HAL_GetTick>
 8001ba4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001baa:	f7ff fa1d 	bl	8000fe8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d902      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f000 bde6 	b.w	800278c <HAL_RCC_OscConfig+0xe1c>
 8001bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001bd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x282>
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x2ae>
 8001bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c22:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001c26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001c2a:	fa92 f2a2 	rbit	r2, r2
 8001c2e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001c32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c36:	fab2 f282 	clz	r2, r2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f042 0220 	orr.w	r2, r2, #32
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f002 021f 	and.w	r2, r2, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ab      	bne.n	8001baa <HAL_RCC_OscConfig+0x23a>
 8001c52:	e002      	b.n	8001c5a <HAL_RCC_OscConfig+0x2ea>
 8001c54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8170 	beq.w	8001f4a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c6a:	4bd0      	ldr	r3, [pc, #832]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c76:	4bcd      	ldr	r3, [pc, #820]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d16d      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3ee>
 8001c82:	4bca      	ldr	r3, [pc, #808]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c8e:	d166      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3ee>
 8001c90:	2302      	movs	r3, #2
 8001c92:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001ca2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x350>
 8001cba:	4bbc      	ldr	r3, [pc, #752]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e013      	b.n	8001ce8 <HAL_RCC_OscConfig+0x378>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cd8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ce4:	4bb1      	ldr	r3, [pc, #708]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001cee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001cf2:	fa92 f2a2 	rbit	r2, r2
 8001cf6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001cfa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cfe:	fab2 f282 	clz	r2, r2
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f042 0220 	orr.w	r2, r2, #32
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f002 021f 	and.w	r2, r2, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3ba>
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d002      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f000 bd31 	b.w	800278c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	21f8      	movs	r1, #248	; 0xf8
 8001d3a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001d42:	fa91 f1a1 	rbit	r1, r1
 8001d46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001d4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d4e:	fab1 f181 	clz	r1, r1
 8001d52:	b2c9      	uxtb	r1, r1
 8001d54:	408b      	lsls	r3, r1
 8001d56:	4995      	ldr	r1, [pc, #596]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5c:	e0f5      	b.n	8001f4a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8085 	beq.w	8001e74 <HAL_RCC_OscConfig+0x504>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001d7c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	461a      	mov	r2, r3
 8001d92:	2301      	movs	r3, #1
 8001d94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff f927 	bl	8000fe8 <HAL_GetTick>
 8001d9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff f922 	bl	8000fe8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d902      	bls.n	8001db6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	f000 bceb 	b.w	800278c <HAL_RCC_OscConfig+0xe1c>
 8001db6:	2302      	movs	r3, #2
 8001db8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001dc8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x476>
 8001de0:	4b72      	ldr	r3, [pc, #456]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	e013      	b.n	8001e0e <HAL_RCC_OscConfig+0x49e>
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001dfe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e0a:	4b68      	ldr	r3, [pc, #416]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001e14:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e18:	fa92 f2a2 	rbit	r2, r2
 8001e1c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001e20:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e24:	fab2 f282 	clz	r2, r2
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	f042 0220 	orr.w	r2, r2, #32
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f002 021f 	and.w	r2, r2, #31
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0af      	beq.n	8001da0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	21f8      	movs	r1, #248	; 0xf8
 8001e50:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001e58:	fa91 f1a1 	rbit	r1, r1
 8001e5c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001e60:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e64:	fab1 f181 	clz	r1, r1
 8001e68:	b2c9      	uxtb	r1, r1
 8001e6a:	408b      	lsls	r3, r1
 8001e6c:	494f      	ldr	r1, [pc, #316]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]
 8001e72:	e06a      	b.n	8001f4a <HAL_RCC_OscConfig+0x5da>
 8001e74:	2301      	movs	r3, #1
 8001e76:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001e86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f8a2 	bl	8000fe8 <HAL_GetTick>
 8001ea4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7ff f89d 	bl	8000fe8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d902      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	f000 bc66 	b.w	800278c <HAL_RCC_OscConfig+0xe1c>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x580>
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	e013      	b.n	8001f18 <HAL_RCC_OscConfig+0x5a8>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_OscConfig+0x63c>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2202      	movs	r2, #2
 8001f1a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001f1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f22:	fa92 f2a2 	rbit	r2, r2
 8001f26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001f2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f042 0220 	orr.w	r2, r2, #32
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f002 021f 	and.w	r2, r2, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1af      	bne.n	8001eaa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80da 	beq.w	800210e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d069      	beq.n	8002038 <HAL_RCC_OscConfig+0x6c8>
 8001f64:	2301      	movs	r3, #1
 8001f66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001f76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x640>)
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f82b 	bl	8000fe8 <HAL_GetTick>
 8001f92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	e00d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff f826 	bl	8000fe8 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d905      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e3ef      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	10908120 	.word	0x10908120
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fbe:	fa93 f2a3 	rbit	r2, r3
 8001fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fa93 f2a3 	rbit	r2, r3
 8001fda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ff6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff8:	4ba4      	ldr	r3, [pc, #656]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 8001ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ffc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002000:	2102      	movs	r1, #2
 8002002:	6019      	str	r1, [r3, #0]
 8002004:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f1a3 	rbit	r1, r3
 800200e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002012:	6019      	str	r1, [r3, #0]
  return result;
 8002014:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0b0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x628>
 8002036:	e06a      	b.n	800210e <HAL_RCC_OscConfig+0x79e>
 8002038:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800204e:	601a      	str	r2, [r3, #0]
  return result;
 8002050:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002054:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_OscConfig+0x920>)
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	461a      	mov	r2, r3
 8002066:	2300      	movs	r3, #0
 8002068:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe ffbd 	bl	8000fe8 <HAL_GetTick>
 800206e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002072:	e009      	b.n	8002088 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe ffb8 	bl	8000fe8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e381      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
 8002088:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800208c:	2202      	movs	r2, #2
 800208e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fa93 f2a3 	rbit	r2, r3
 800209a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020a4:	2202      	movs	r2, #2
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020bc:	2202      	movs	r2, #2
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b6e      	ldr	r3, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80020d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020d8:	2102      	movs	r1, #2
 80020da:	6019      	str	r1, [r3, #0]
 80020dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fa93 f1a3 	rbit	r1, r3
 80020e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020ea:	6019      	str	r1, [r3, #0]
  return result;
 80020ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1b2      	bne.n	8002074 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8157 	beq.w	80023cc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d112      	bne.n	8002156 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	4a55      	ldr	r2, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213a:	61d3      	str	r3, [r2, #28]
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <HAL_RCC_OscConfig+0x924>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11a      	bne.n	8002198 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_RCC_OscConfig+0x924>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <HAL_RCC_OscConfig+0x924>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe ff3b 	bl	8000fe8 <HAL_GetTick>
 8002172:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	e009      	b.n	800218c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7fe ff36 	bl	8000fe8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e2ff      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_OscConfig+0x924>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ef      	beq.n	8002178 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x840>
 80021a2:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a39      	ldr	r2, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	e02f      	b.n	8002210 <HAL_RCC_OscConfig+0x8a0>
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x864>
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a33      	ldr	r2, [pc, #204]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a30      	ldr	r2, [pc, #192]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6213      	str	r3, [r2, #32]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0x8a0>
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x888>
 80021de:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a2a      	ldr	r2, [pc, #168]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a27      	ldr	r2, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0x8a0>
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a20      	ldr	r2, [pc, #128]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 800220a:	f023 0304 	bic.w	r3, r3, #4
 800220e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d06a      	beq.n	80022f0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7fe fee5 	bl	8000fe8 <HAL_GetTick>
 800221e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7fe fee0 	bl	8000fe8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e2a7      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
 800223c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002240:	2202      	movs	r2, #2
 8002242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002258:	2202      	movs	r2, #2
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800226a:	601a      	str	r2, [r3, #0]
  return result;
 800226c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002270:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d108      	bne.n	8002298 <HAL_RCC_OscConfig+0x928>
 8002286:	4b01      	ldr	r3, [pc, #4]	; (800228c <HAL_RCC_OscConfig+0x91c>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	e013      	b.n	80022b4 <HAL_RCC_OscConfig+0x944>
 800228c:	40021000 	.word	0x40021000
 8002290:	10908120 	.word	0x10908120
 8002294:	40007000 	.word	0x40007000
 8002298:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800229c:	2202      	movs	r2, #2
 800229e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	4bc0      	ldr	r3, [pc, #768]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022b8:	2102      	movs	r1, #2
 80022ba:	6011      	str	r1, [r2, #0]
 80022bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	fa92 f1a2 	rbit	r1, r2
 80022c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022ca:	6011      	str	r1, [r2, #0]
  return result;
 80022cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	fab2 f282 	clz	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 021f 	and.w	r2, r2, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d09a      	beq.n	8002224 <HAL_RCC_OscConfig+0x8b4>
 80022ee:	e063      	b.n	80023b8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7fe fe7a 	bl	8000fe8 <HAL_GetTick>
 80022f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fe75 	bl	8000fe8 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e23c      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
 8002312:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002316:	2202      	movs	r2, #2
 8002318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f2a3 	rbit	r2, r3
 8002324:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800232e:	2202      	movs	r2, #2
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002340:	601a      	str	r2, [r3, #0]
  return result;
 8002342:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002346:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f043 0302 	orr.w	r3, r3, #2
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d102      	bne.n	8002362 <HAL_RCC_OscConfig+0x9f2>
 800235c:	4b95      	ldr	r3, [pc, #596]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	e00d      	b.n	800237e <HAL_RCC_OscConfig+0xa0e>
 8002362:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002366:	2202      	movs	r2, #2
 8002368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	fa93 f2a3 	rbit	r2, r3
 8002374:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	4b8e      	ldr	r3, [pc, #568]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002382:	2102      	movs	r1, #2
 8002384:	6011      	str	r1, [r2, #0]
 8002386:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	fa92 f1a2 	rbit	r1, r2
 8002390:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002394:	6011      	str	r1, [r2, #0]
  return result;
 8002396:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	fab2 f282 	clz	r2, r2
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f002 021f 	and.w	r2, r2, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1a0      	bne.n	80022fa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b7c      	ldr	r3, [pc, #496]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4a7b      	ldr	r2, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 81d9 	beq.w	800278a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	f000 81a6 	beq.w	8002732 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	f040 811e 	bne.w	800262e <HAL_RCC_OscConfig+0xcbe>
 80023f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80023f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800240a:	601a      	str	r2, [r3, #0]
  return result;
 800240c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002410:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800241c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	461a      	mov	r2, r3
 8002424:	2300      	movs	r3, #0
 8002426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fdde 	bl	8000fe8 <HAL_GetTick>
 800242c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002430:	e009      	b.n	8002446 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fdd9 	bl	8000fe8 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1a2      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
 8002446:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800244a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800245e:	601a      	str	r2, [r3, #0]
  return result;
 8002460:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002464:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0xb10>
 800247a:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	e01b      	b.n	80024b8 <HAL_RCC_OscConfig+0xb48>
 8002480:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800249e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80024bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024c0:	6011      	str	r1, [r2, #0]
 80024c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	fa92 f1a2 	rbit	r1, r2
 80024cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024d0:	6011      	str	r1, [r2, #0]
  return result;
 80024d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	fab2 f282 	clz	r2, r2
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f042 0220 	orr.w	r2, r2, #32
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	f002 021f 	and.w	r2, r2, #31
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d19e      	bne.n	8002432 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	f023 020f 	bic.w	r2, r3, #15
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	492c      	ldr	r1, [pc, #176]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 8002504:	4313      	orrs	r3, r2
 8002506:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6a19      	ldr	r1, [r3, #32]
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	430b      	orrs	r3, r1
 800251e:	4925      	ldr	r1, [pc, #148]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
 8002524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800252c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	fa93 f2a3 	rbit	r2, r3
 8002538:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800253c:	601a      	str	r2, [r3, #0]
  return result;
 800253e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002542:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800254e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	461a      	mov	r2, r3
 8002556:	2301      	movs	r3, #1
 8002558:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fd45 	bl	8000fe8 <HAL_GetTick>
 800255e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002562:	e009      	b.n	8002578 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fd40 	bl	8000fe8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e109      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
 8002578:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800257c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002590:	601a      	str	r2, [r3, #0]
  return result;
 8002592:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002596:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0xc48>
 80025ac:	4b01      	ldr	r3, [pc, #4]	; (80025b4 <HAL_RCC_OscConfig+0xc44>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	e01e      	b.n	80025f0 <HAL_RCC_OscConfig+0xc80>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0xe28>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80025f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025f8:	6011      	str	r1, [r2, #0]
 80025fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	fa92 f1a2 	rbit	r1, r2
 8002604:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002608:	6011      	str	r1, [r2, #0]
  return result;
 800260a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d09b      	beq.n	8002564 <HAL_RCC_OscConfig+0xbf4>
 800262c:	e0ad      	b.n	800278a <HAL_RCC_OscConfig+0xe1a>
 800262e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002632:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002646:	601a      	str	r2, [r3, #0]
  return result;
 8002648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800264c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002658:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	461a      	mov	r2, r3
 8002660:	2300      	movs	r3, #0
 8002662:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe fcc0 	bl	8000fe8 <HAL_GetTick>
 8002668:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	e009      	b.n	8002682 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fcbb 	bl	8000fe8 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e084      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
 8002682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269a:	601a      	str	r2, [r3, #0]
  return result;
 800269c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_RCC_OscConfig+0xd4c>
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_RCC_OscConfig+0xe28>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	e01b      	b.n	80026f4 <HAL_RCC_OscConfig+0xd84>
 80026bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f107 031c 	add.w	r3, r7, #28
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f107 0318 	add.w	r3, r7, #24
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <HAL_RCC_OscConfig+0xe28>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f107 0214 	add.w	r2, r7, #20
 80026f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026fc:	6011      	str	r1, [r2, #0]
 80026fe:	f107 0214 	add.w	r2, r7, #20
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	fa92 f1a2 	rbit	r1, r2
 8002708:	f107 0210 	add.w	r2, r7, #16
 800270c:	6011      	str	r1, [r2, #0]
  return result;
 800270e:	f107 0210 	add.w	r2, r7, #16
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d19e      	bne.n	800266e <HAL_RCC_OscConfig+0xcfe>
 8002730:	e02b      	b.n	800278a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e025      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_RCC_OscConfig+0xe28>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <HAL_RCC_OscConfig+0xe28>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002750:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002754:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	429a      	cmp	r2, r3
 8002760:	d111      	bne.n	8002786 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002762:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002770:	429a      	cmp	r2, r3
 8002772:	d108      	bne.n	8002786 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	f003 020f 	and.w	r2, r3, #15
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000

0800279c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b09e      	sub	sp, #120	; 0x78
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e162      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b90      	ldr	r3, [pc, #576]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d910      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b8d      	ldr	r3, [pc, #564]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	498b      	ldr	r1, [pc, #556]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b89      	ldr	r3, [pc, #548]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e14a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b82      	ldr	r3, [pc, #520]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	497f      	ldr	r1, [pc, #508]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80dc 	beq.w	80029c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d13c      	bne.n	8002892 <HAL_RCC_ClockConfig+0xf6>
 8002818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800281c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <HAL_RCC_ClockConfig+0xa6>
 800283c:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	e00f      	b.n	8002862 <HAL_RCC_ClockConfig+0xc6>
 8002842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	667b      	str	r3, [r7, #100]	; 0x64
 8002850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002854:	663b      	str	r3, [r7, #96]	; 0x60
 8002856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800285e:	4b67      	ldr	r3, [pc, #412]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002866:	65ba      	str	r2, [r7, #88]	; 0x58
 8002868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800286a:	fa92 f2a2 	rbit	r2, r2
 800286e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d17b      	bne.n	8002986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0f3      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d13c      	bne.n	8002914 <HAL_RCC_ClockConfig+0x178>
 800289a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x128>
 80028be:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e00f      	b.n	80028e4 <HAL_RCC_ClockConfig+0x148>
 80028c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
 80028d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
 80028d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80028ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f042 0220 	orr.w	r2, r2, #32
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f002 021f 	and.w	r2, r2, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d13a      	bne.n	8002986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b2      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
 8002914:	2302      	movs	r3, #2
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_RCC_ClockConfig+0x1a0>
 8002936:	4b31      	ldr	r3, [pc, #196]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	e00d      	b.n	8002958 <HAL_RCC_ClockConfig+0x1bc>
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2202      	movs	r2, #2
 800295a:	61ba      	str	r2, [r7, #24]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	fa92 f2a2 	rbit	r2, r2
 8002962:	617a      	str	r2, [r7, #20]
  return result;
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	fab2 f282 	clz	r2, r2
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f042 0220 	orr.w	r2, r2, #32
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f002 021f 	and.w	r2, r2, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e079      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	491a      	ldr	r1, [pc, #104]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002998:	f7fe fb26 	bl	8000fe8 <HAL_GetTick>
 800299c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7fe fb22 	bl	8000fe8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e061      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 020c 	and.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1eb      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d214      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 0207 	bic.w	r2, r3, #7
 80029de:	4906      	ldr	r1, [pc, #24]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e040      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	491a      	ldr	r1, [pc, #104]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4912      	ldr	r1, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a3e:	f000 f829 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a42:	4601      	mov	r1, r0
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4c:	22f0      	movs	r2, #240	; 0xf0
 8002a4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	fa92 f2a2 	rbit	r2, r2
 8002a56:	60fa      	str	r2, [r7, #12]
  return result;
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	40d3      	lsrs	r3, r2
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x2ec>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	fa21 f303 	lsr.w	r3, r1, r3
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <HAL_RCC_ClockConfig+0x2f0>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_RCC_ClockConfig+0x2f4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd ff3e 	bl	80008f4 <HAL_InitTick>
  
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3778      	adds	r7, #120	; 0x78
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08006c0c 	.word	0x08006c0c
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000004 	.word	0x20000004

08002a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b08b      	sub	sp, #44	; 0x2c
 8002a98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x36>
 8002ac2:	e03f      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ac6:	623b      	str	r3, [r7, #32]
      break;
 8002ac8:	e03f      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ad0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ad4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	607a      	str	r2, [r7, #4]
  return result;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	40d3      	lsrs	r3, r2
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	220f      	movs	r2, #15
 8002af8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	fa92 f2a2 	rbit	r2, r2
 8002b00:	60fa      	str	r2, [r7, #12]
  return result;
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	40d3      	lsrs	r3, r2
 8002b0c:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2c:	e007      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	623b      	str	r3, [r7, #32]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b46:	623b      	str	r3, [r7, #32]
      break;
 8002b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	372c      	adds	r7, #44	; 0x2c
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	007a1200 	.word	0x007a1200
 8002b60:	08006c24 	.word	0x08006c24
 8002b64:	08006c34 	.word	0x08006c34

08002b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000000 	.word	0x20000000

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b86:	f7ff ffef 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	603a      	str	r2, [r7, #0]
  return result;
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	40d3      	lsrs	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08006c1c 	.word	0x08006c1c

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bca:	f7ff ffcd 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bce:	4601      	mov	r1, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	fa92 f2a2 	rbit	r2, r2
 8002be4:	603a      	str	r2, [r7, #0]
  return result;
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	fab2 f282 	clz	r2, r2
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	40d3      	lsrs	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08006c1c 	.word	0x08006c1c

08002c08 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	220f      	movs	r2, #15
 8002c16:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_GetClockConfig+0x5c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0203 	and.w	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RCC_GetClockConfig+0x5c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_GetClockConfig+0x5c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCC_GetClockConfig+0x60>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0207 	and.w	r2, r3, #7
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	601a      	str	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40022000 	.word	0x40022000

08002c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b092      	sub	sp, #72	; 0x48
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80d7 	beq.w	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c90:	4b4e      	ldr	r3, [pc, #312]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10e      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9c:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	61d3      	str	r3, [r2, #28]
 8002ca8:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	4b45      	ldr	r3, [pc, #276]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d118      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc6:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a41      	ldr	r2, [pc, #260]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe f989 	bl	8000fe8 <HAL_GetTick>
 8002cd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd8:	e008      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cda:	f7fe f985 	bl	8000fe8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	; 0x64
 8002ce6:	d901      	bls.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1d6      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cf8:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8084 	beq.w	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d07c      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	461a      	mov	r2, r3
 8002d42:	2301      	movs	r3, #1
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	461a      	mov	r2, r3
 8002d66:	2300      	movs	r3, #0
 8002d68:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d04b      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe f935 	bl	8000fe8 <HAL_GetTick>
 8002d7e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe f931 	bl	8000fe8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e180      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	2302      	movs	r3, #2
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	61fb      	str	r3, [r7, #28]
  return result;
 8002db0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dc6:	4b01      	ldr	r3, [pc, #4]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	e00d      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	10908100 	.word	0x10908100
 8002dd8:	2302      	movs	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	4ba0      	ldr	r3, [pc, #640]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2202      	movs	r2, #2
 8002dea:	613a      	str	r2, [r7, #16]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	60fa      	str	r2, [r7, #12]
  return result;
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f002 021f 	and.w	r2, r2, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0b7      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e12:	4b95      	ldr	r3, [pc, #596]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4992      	ldr	r1, [pc, #584]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2c:	4b8e      	ldr	r3, [pc, #568]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	4a8d      	ldr	r2, [pc, #564]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e44:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f023 0203 	bic.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4985      	ldr	r1, [pc, #532]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e62:	4b81      	ldr	r3, [pc, #516]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	497e      	ldr	r1, [pc, #504]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e80:	4b79      	ldr	r3, [pc, #484]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4976      	ldr	r1, [pc, #472]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e9e:	4b72      	ldr	r3, [pc, #456]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f023 0210 	bic.w	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	496f      	ldr	r1, [pc, #444]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	4967      	ldr	r1, [pc, #412]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f023 0220 	bic.w	r2, r3, #32
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4960      	ldr	r1, [pc, #384]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef8:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	4958      	ldr	r1, [pc, #352]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f16:	4b54      	ldr	r3, [pc, #336]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4951      	ldr	r1, [pc, #324]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f34:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4949      	ldr	r1, [pc, #292]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f52:	4b45      	ldr	r3, [pc, #276]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4942      	ldr	r1, [pc, #264]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f70:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	493a      	ldr	r1, [pc, #232]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	4933      	ldr	r1, [pc, #204]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fac:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	492b      	ldr	r1, [pc, #172]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002fca:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4924      	ldr	r1, [pc, #144]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	491c      	ldr	r1, [pc, #112]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	4915      	ldr	r1, [pc, #84]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	490d      	ldr	r1, [pc, #52]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	4906      	ldr	r1, [pc, #24]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00c      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003060:	4b01      	ldr	r3, [pc, #4]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	e002      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	490b      	ldr	r1, [pc, #44]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003076:	4313      	orrs	r3, r2
 8003078:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003092:	4904      	ldr	r1, [pc, #16]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003094:	4313      	orrs	r3, r2
 8003096:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3748      	adds	r7, #72	; 0x48
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000

080030a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01d      	b.n	80030f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f815 	bl	80030fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f000 f986 	bl	80033f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_TIM_Base_Start_IT+0x50>)
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b06      	cmp	r3, #6
 800313c:	d00b      	beq.n	8003156 <HAL_TIM_Base_Start_IT+0x42>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d007      	beq.n	8003156 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	00010007 	.word	0x00010007

08003168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d122      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d11b      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0202 	mvn.w	r2, #2
 8003194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f905 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8f7 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f908 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d122      	bne.n	8003218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d11b      	bne.n	8003218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0204 	mvn.w	r2, #4
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8db 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8cd 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8de 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	d122      	bne.n	800326c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b08      	cmp	r3, #8
 8003232:	d11b      	bne.n	800326c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0208 	mvn.w	r2, #8
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2204      	movs	r2, #4
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8b1 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8a3 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f8b4 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b10      	cmp	r3, #16
 8003278:	d122      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d11b      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0210 	mvn.w	r2, #16
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2208      	movs	r2, #8
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f887 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f879 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f88a 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0201 	mvn.w	r2, #1
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fa08 	bl	80006fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f918 	bl	8003548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	d10e      	bne.n	8003346 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b80      	cmp	r3, #128	; 0x80
 8003334:	d107      	bne.n	8003346 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800333e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f90b 	bl	800355c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d10e      	bne.n	8003372 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d107      	bne.n	8003372 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f838 	bl	80033e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b20      	cmp	r3, #32
 800337e:	d10e      	bne.n	800339e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b20      	cmp	r3, #32
 800338c:	d107      	bne.n	800339e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0220 	mvn.w	r2, #32
 8003396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8cb 	bl	8003534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a42      	ldr	r2, [pc, #264]	; (8003514 <TIM_Base_SetConfig+0x11c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003416:	d00f      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a3f      	ldr	r2, [pc, #252]	; (8003518 <TIM_Base_SetConfig+0x120>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00b      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a3e      	ldr	r2, [pc, #248]	; (800351c <TIM_Base_SetConfig+0x124>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <TIM_Base_SetConfig+0x128>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3c      	ldr	r2, [pc, #240]	; (8003524 <TIM_Base_SetConfig+0x12c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a31      	ldr	r2, [pc, #196]	; (8003514 <TIM_Base_SetConfig+0x11c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01f      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d01b      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2e      	ldr	r2, [pc, #184]	; (8003518 <TIM_Base_SetConfig+0x120>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d017      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2d      	ldr	r2, [pc, #180]	; (800351c <TIM_Base_SetConfig+0x124>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <TIM_Base_SetConfig+0x128>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <TIM_Base_SetConfig+0x130>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2b      	ldr	r2, [pc, #172]	; (800352c <TIM_Base_SetConfig+0x134>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <TIM_Base_SetConfig+0x138>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <TIM_Base_SetConfig+0x12c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d108      	bne.n	80034a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <TIM_Base_SetConfig+0x11c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <TIM_Base_SetConfig+0x100>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a13      	ldr	r2, [pc, #76]	; (8003520 <TIM_Base_SetConfig+0x128>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00f      	beq.n	80034f8 <TIM_Base_SetConfig+0x100>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <TIM_Base_SetConfig+0x130>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00b      	beq.n	80034f8 <TIM_Base_SetConfig+0x100>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <TIM_Base_SetConfig+0x134>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x100>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a11      	ldr	r2, [pc, #68]	; (8003530 <TIM_Base_SetConfig+0x138>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x100>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <TIM_Base_SetConfig+0x12c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	615a      	str	r2, [r3, #20]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40013400 	.word	0x40013400
 8003524:	40015000 	.word	0x40015000
 8003528:	40014000 	.word	0x40014000
 800352c:	40014400 	.word	0x40014400
 8003530:	40014800 	.word	0x40014800

08003534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e040      	b.n	8003604 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd f910 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	; 0x24
 800359c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa0c 	bl	80039cc <UART_SetConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e022      	b.n	8003604 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fc1a 	bl	8003e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fca1 	bl	8003f44 <UART_CheckIdleState>
 8003602:	4603      	mov	r3, r0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	2b20      	cmp	r3, #32
 8003620:	d164      	bne.n	80036ec <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_UART_Transmit_DMA+0x22>
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e05d      	b.n	80036ee <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_UART_Transmit_DMA+0x34>
 800363c:	2302      	movs	r3, #2
 800363e:	e056      	b.n	80036ee <HAL_UART_Transmit_DMA+0xe2>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	88fa      	ldrh	r2, [r7, #6]
 800365a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2221      	movs	r2, #33	; 0x21
 8003668:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800366e:	2b00      	cmp	r3, #0
 8003670:	d02a      	beq.n	80036c8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <HAL_UART_Transmit_DMA+0xec>)
 8003678:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_UART_Transmit_DMA+0xf0>)
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003686:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <HAL_UART_Transmit_DMA+0xf4>)
 8003688:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800368e:	2200      	movs	r2, #0
 8003690:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	4619      	mov	r1, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3328      	adds	r3, #40	; 0x28
 80036a2:	461a      	mov	r2, r3
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	f7fd fe16 	bl	80012d6 <HAL_DMA_Start_IT>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2210      	movs	r2, #16
 80036b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e012      	b.n	80036ee <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036e6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	0800412f 	.word	0x0800412f
 80036fc:	0800417d 	.word	0x0800417d
 8003700:	08004199 	.word	0x08004199

08003704 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	f640 030f 	movw	r3, #2063	; 0x80f
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d113      	bne.n	800375c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00e      	beq.n	800375c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d009      	beq.n	800375c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8114 	beq.w	800397a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
      }
      return;
 800375a:	e10e      	b.n	800397a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80d6 	beq.w	8003910 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80cb 	beq.w	8003910 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <HAL_UART_IRQHandler+0x9e>
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2201      	movs	r2, #1
 8003794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379a:	f043 0201 	orr.w	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <HAL_UART_IRQHandler+0xc6>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2202      	movs	r2, #2
 80037bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <HAL_UART_IRQHandler+0xee>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2204      	movs	r2, #4
 80037e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800380c:	2b00      	cmp	r3, #0
 800380e:	d009      	beq.n	8003824 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2208      	movs	r2, #8
 8003816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800381c:	f043 0208 	orr.w	r2, r3, #8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00f      	beq.n	800384e <HAL_UART_IRQHandler+0x14a>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8093 	beq.w	800397e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003880:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d004      	beq.n	800389a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003896:	2b00      	cmp	r3, #0
 8003898:	d031      	beq.n	80038fe <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fc27 	bl	80040ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d123      	bne.n	80038f6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d013      	beq.n	80038ee <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ca:	4a30      	ldr	r2, [pc, #192]	; (800398c <HAL_UART_IRQHandler+0x288>)
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fd5e 	bl	8001394 <HAL_DMA_Abort_IT>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80038e8:	4610      	mov	r0, r2
 80038ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e00e      	b.n	800390c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f862 	bl	80039b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e00a      	b.n	800390c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f85e 	bl	80039b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e006      	b.n	800390c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f85a 	bl	80039b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800390a:	e038      	b.n	800397e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	bf00      	nop
    return;
 800390e:	e036      	b.n	800397e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <HAL_UART_IRQHandler+0x232>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800392c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fc9d 	bl	800426e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003934:	e026      	b.n	8003984 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394e:	2b00      	cmp	r3, #0
 8003950:	d017      	beq.n	8003982 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
    }
    return;
 800395a:	e012      	b.n	8003982 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <HAL_UART_IRQHandler+0x280>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fc63 	bl	800423c <UART_EndTransmit_IT>
    return;
 8003976:	bf00      	nop
 8003978:	e004      	b.n	8003984 <HAL_UART_IRQHandler+0x280>
      return;
 800397a:	bf00      	nop
 800397c:	e002      	b.n	8003984 <HAL_UART_IRQHandler+0x280>
    return;
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <HAL_UART_IRQHandler+0x280>
    return;
 8003982:	bf00      	nop
  }

}
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	08004211 	.word	0x08004211

08003990 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4bac      	ldr	r3, [pc, #688]	; (8003cac <UART_SetConfig+0x2e0>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	6939      	ldr	r1, [r7, #16]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a9a      	ldr	r2, [pc, #616]	; (8003cb0 <UART_SetConfig+0x2e4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d121      	bne.n	8003a90 <UART_SetConfig+0xc4>
 8003a4c:	4b99      	ldr	r3, [pc, #612]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d817      	bhi.n	8003a88 <UART_SetConfig+0xbc>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <UART_SetConfig+0x94>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a7d 	.word	0x08003a7d
 8003a68:	08003a83 	.word	0x08003a83
 8003a6c:	08003a77 	.word	0x08003a77
 8003a70:	2301      	movs	r3, #1
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e0b2      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a76:	2302      	movs	r3, #2
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e0af      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e0ac      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a82:	2308      	movs	r3, #8
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e0a9      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	bf00      	nop
 8003a8e:	e0a5      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a88      	ldr	r2, [pc, #544]	; (8003cb8 <UART_SetConfig+0x2ec>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d123      	bne.n	8003ae2 <UART_SetConfig+0x116>
 8003a9a:	4b86      	ldr	r3, [pc, #536]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d012      	beq.n	8003ace <UART_SetConfig+0x102>
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aac:	d802      	bhi.n	8003ab4 <UART_SetConfig+0xe8>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <UART_SetConfig+0xf6>
 8003ab2:	e012      	b.n	8003ada <UART_SetConfig+0x10e>
 8003ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab8:	d00c      	beq.n	8003ad4 <UART_SetConfig+0x108>
 8003aba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003abe:	d003      	beq.n	8003ac8 <UART_SetConfig+0xfc>
 8003ac0:	e00b      	b.n	8003ada <UART_SetConfig+0x10e>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e089      	b.n	8003bdc <UART_SetConfig+0x210>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e086      	b.n	8003bdc <UART_SetConfig+0x210>
 8003ace:	2304      	movs	r3, #4
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e083      	b.n	8003bdc <UART_SetConfig+0x210>
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e080      	b.n	8003bdc <UART_SetConfig+0x210>
 8003ada:	2310      	movs	r3, #16
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	bf00      	nop
 8003ae0:	e07c      	b.n	8003bdc <UART_SetConfig+0x210>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	; (8003cbc <UART_SetConfig+0x2f0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d123      	bne.n	8003b34 <UART_SetConfig+0x168>
 8003aec:	4b71      	ldr	r3, [pc, #452]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003af4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af8:	d012      	beq.n	8003b20 <UART_SetConfig+0x154>
 8003afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003afe:	d802      	bhi.n	8003b06 <UART_SetConfig+0x13a>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <UART_SetConfig+0x148>
 8003b04:	e012      	b.n	8003b2c <UART_SetConfig+0x160>
 8003b06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b0a:	d00c      	beq.n	8003b26 <UART_SetConfig+0x15a>
 8003b0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b10:	d003      	beq.n	8003b1a <UART_SetConfig+0x14e>
 8003b12:	e00b      	b.n	8003b2c <UART_SetConfig+0x160>
 8003b14:	2300      	movs	r3, #0
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e060      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e05d      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b20:	2304      	movs	r3, #4
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e05a      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b26:	2308      	movs	r3, #8
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e057      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	bf00      	nop
 8003b32:	e053      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <UART_SetConfig+0x2f4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d123      	bne.n	8003b86 <UART_SetConfig+0x1ba>
 8003b3e:	4b5d      	ldr	r3, [pc, #372]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4a:	d012      	beq.n	8003b72 <UART_SetConfig+0x1a6>
 8003b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b50:	d802      	bhi.n	8003b58 <UART_SetConfig+0x18c>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <UART_SetConfig+0x19a>
 8003b56:	e012      	b.n	8003b7e <UART_SetConfig+0x1b2>
 8003b58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b5c:	d00c      	beq.n	8003b78 <UART_SetConfig+0x1ac>
 8003b5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b62:	d003      	beq.n	8003b6c <UART_SetConfig+0x1a0>
 8003b64:	e00b      	b.n	8003b7e <UART_SetConfig+0x1b2>
 8003b66:	2300      	movs	r3, #0
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e037      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e034      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b72:	2304      	movs	r3, #4
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e031      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b78:	2308      	movs	r3, #8
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e02e      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b7e:	2310      	movs	r3, #16
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	bf00      	nop
 8003b84:	e02a      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a4e      	ldr	r2, [pc, #312]	; (8003cc4 <UART_SetConfig+0x2f8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d123      	bne.n	8003bd8 <UART_SetConfig+0x20c>
 8003b90:	4b48      	ldr	r3, [pc, #288]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9c:	d012      	beq.n	8003bc4 <UART_SetConfig+0x1f8>
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d802      	bhi.n	8003baa <UART_SetConfig+0x1de>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <UART_SetConfig+0x1ec>
 8003ba8:	e012      	b.n	8003bd0 <UART_SetConfig+0x204>
 8003baa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bae:	d00c      	beq.n	8003bca <UART_SetConfig+0x1fe>
 8003bb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bb4:	d003      	beq.n	8003bbe <UART_SetConfig+0x1f2>
 8003bb6:	e00b      	b.n	8003bd0 <UART_SetConfig+0x204>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e00e      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e00b      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e008      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e005      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	bf00      	nop
 8003bd6:	e001      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be4:	f040 8090 	bne.w	8003d08 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003be8:	7ffb      	ldrb	r3, [r7, #31]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d86c      	bhi.n	8003cc8 <UART_SetConfig+0x2fc>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <UART_SetConfig+0x228>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c39 	.word	0x08003c39
 8003bfc:	08003c59 	.word	0x08003c59
 8003c00:	08003cc9 	.word	0x08003cc9
 8003c04:	08003c75 	.word	0x08003c75
 8003c08:	08003cc9 	.word	0x08003cc9
 8003c0c:	08003cc9 	.word	0x08003cc9
 8003c10:	08003cc9 	.word	0x08003cc9
 8003c14:	08003c95 	.word	0x08003c95
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c18:	f7fe ffb2 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8003c1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	005a      	lsls	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	61bb      	str	r3, [r7, #24]
        break;
 8003c36:	e04a      	b.n	8003cce <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c38:	f7fe ffc4 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003c3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	005a      	lsls	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	441a      	add	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	61bb      	str	r3, [r7, #24]
        break;
 8003c56:	e03a      	b.n	8003cce <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003c62:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6852      	ldr	r2, [r2, #4]
 8003c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	61bb      	str	r3, [r7, #24]
        break;
 8003c72:	e02c      	b.n	8003cce <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c74:	f7fe ff0e 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8003c78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	005a      	lsls	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	441a      	add	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	61bb      	str	r3, [r7, #24]
        break;
 8003c92:	e01c      	b.n	8003cce <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	61bb      	str	r3, [r7, #24]
        break;
 8003caa:	e010      	b.n	8003cce <UART_SetConfig+0x302>
 8003cac:	efff69f3 	.word	0xefff69f3
 8003cb0:	40013800 	.word	0x40013800
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40004400 	.word	0x40004400
 8003cbc:	40004800 	.word	0x40004800
 8003cc0:	40004c00 	.word	0x40004c00
 8003cc4:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	75fb      	strb	r3, [r7, #23]
        break;
 8003ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d916      	bls.n	8003d02 <UART_SetConfig+0x336>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cda:	d212      	bcs.n	8003d02 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f023 030f 	bic.w	r3, r3, #15
 8003ce4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	897b      	ldrh	r3, [r7, #10]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	897a      	ldrh	r2, [r7, #10]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	e072      	b.n	8003de8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
 8003d06:	e06f      	b.n	8003de8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d85b      	bhi.n	8003dc6 <UART_SetConfig+0x3fa>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <UART_SetConfig+0x348>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d57 	.word	0x08003d57
 8003d1c:	08003d75 	.word	0x08003d75
 8003d20:	08003dc7 	.word	0x08003dc7
 8003d24:	08003d91 	.word	0x08003d91
 8003d28:	08003dc7 	.word	0x08003dc7
 8003d2c:	08003dc7 	.word	0x08003dc7
 8003d30:	08003dc7 	.word	0x08003dc7
 8003d34:	08003daf 	.word	0x08003daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d38:	f7fe ff22 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8003d3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085a      	lsrs	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	441a      	add	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	61bb      	str	r3, [r7, #24]
        break;
 8003d54:	e03a      	b.n	8003dcc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d56:	f7fe ff35 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003d5a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	085a      	lsrs	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	441a      	add	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	61bb      	str	r3, [r7, #24]
        break;
 8003d72:	e02b      	b.n	8003dcc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003d7e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6852      	ldr	r2, [r2, #4]
 8003d86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	61bb      	str	r3, [r7, #24]
        break;
 8003d8e:	e01d      	b.n	8003dcc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d90:	f7fe fe80 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8003d94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	085a      	lsrs	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	441a      	add	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	61bb      	str	r3, [r7, #24]
        break;
 8003dac:	e00e      	b.n	8003dcc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	61bb      	str	r3, [r7, #24]
        break;
 8003dc4:	e002      	b.n	8003dcc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
        break;
 8003dca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d908      	bls.n	8003de4 <UART_SetConfig+0x418>
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d204      	bcs.n	8003de4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	e001      	b.n	8003de8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3720      	adds	r7, #32
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop

08003e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d10a      	bne.n	8003f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f52:	f7fd f849 	bl	8000fe8 <HAL_GetTick>
 8003f56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d10e      	bne.n	8003f84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f82a 	bl	8003fce <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e020      	b.n	8003fc6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d10e      	bne.n	8003fb0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f814 	bl	8003fce <UART_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e00a      	b.n	8003fc6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fde:	e05d      	b.n	800409c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d059      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe8:	f7fc fffe 	bl	8000fe8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d302      	bcc.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11b      	bne.n	8004036 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800400c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e042      	b.n	80040bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02b      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004052:	d123      	bne.n	800409c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800405c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800406c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e00f      	b.n	80040bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d092      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80040da:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004104:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b20      	cmp	r3, #32
 8004142:	d014      	beq.n	800416e <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800415a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800416a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800416c:	e002      	b.n	8004174 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff fc0e 	bl	8003990 <HAL_UART_TxCpltCallback>
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff fc0a 	bl	80039a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b80      	cmp	r3, #128	; 0x80
 80041be:	d109      	bne.n	80041d4 <UART_DMAError+0x3c>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b21      	cmp	r3, #33	; 0x21
 80041c4:	d106      	bne.n	80041d4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	f7ff ff78 	bl	80040c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d109      	bne.n	80041f6 <UART_DMAError+0x5e>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b22      	cmp	r3, #34	; 0x22
 80041e6:	d106      	bne.n	80041f6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80041f0:	6978      	ldr	r0, [r7, #20]
 80041f2:	f7ff ff7c 	bl	80040ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041fa:	f043 0210 	orr.w	r2, r3, #16
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004202:	6978      	ldr	r0, [r7, #20]
 8004204:	f7ff fbd8 	bl	80039b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004208:	bf00      	nop
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f7ff fbc2 	bl	80039b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004252:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff fb95 	bl	8003990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4a06      	ldr	r2, [pc, #24]	; (80042b4 <vApplicationGetIdleTaskMemory+0x30>)
 800429a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	2000059c 	.word	0x2000059c
 80042b4:	200005f8 	.word	0x200005f8

080042b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80042c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4a06      	ldr	r2, [pc, #24]	; (80042e8 <vApplicationGetTimerTaskMemory+0x30>)
 80042ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	200007f8 	.word	0x200007f8
 80042e8:	20000854 	.word	0x20000854

080042ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f103 0208 	add.w	r2, r3, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f103 0208 	add.w	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f103 0208 	add.w	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d103      	bne.n	80043ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e00c      	b.n	80043c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3308      	adds	r3, #8
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e002      	b.n	80043bc <vListInsert+0x2e>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d2f6      	bcs.n	80043b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d103      	bne.n	8004434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	e7fe      	b.n	800447a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800447c:	f002 f80e 	bl	800649c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004488:	68f9      	ldr	r1, [r7, #12]
 800448a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	441a      	add	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	3b01      	subs	r3, #1
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	22ff      	movs	r2, #255	; 0xff
 80044c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	22ff      	movs	r2, #255	; 0xff
 80044c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d114      	bne.n	80044fc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01a      	beq.n	8004510 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3310      	adds	r3, #16
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 f89e 	bl	8005620 <xTaskRemoveFromEventList>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d012      	beq.n	8004510 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <xQueueGenericReset+0xcc>)
 80044ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	e009      	b.n	8004510 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3310      	adds	r3, #16
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fef3 	bl	80042ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3324      	adds	r3, #36	; 0x24
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff feee 	bl	80042ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004510:	f001 fff2 	bl	80064f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004514:	2301      	movs	r3, #1
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	; 0x38
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <xQueueGenericCreateStatic+0x28>
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
 800454a:	e7fe      	b.n	800454a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <xQueueGenericCreateStatic+0x42>
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
 8004564:	e7fe      	b.n	8004564 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <xQueueGenericCreateStatic+0x4e>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <xQueueGenericCreateStatic+0x52>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <xQueueGenericCreateStatic+0x54>
 8004576:	2300      	movs	r3, #0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <xQueueGenericCreateStatic+0x6c>
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	623b      	str	r3, [r7, #32]
 800458e:	e7fe      	b.n	800458e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <xQueueGenericCreateStatic+0x78>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <xQueueGenericCreateStatic+0x7c>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <xQueueGenericCreateStatic+0x7e>
 80045a0:	2300      	movs	r3, #0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <xQueueGenericCreateStatic+0x96>
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	e7fe      	b.n	80045b8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045ba:	2350      	movs	r3, #80	; 0x50
 80045bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b50      	cmp	r3, #80	; 0x50
 80045c2:	d009      	beq.n	80045d8 <xQueueGenericCreateStatic+0xb4>
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	e7fe      	b.n	80045d6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f805 	bl	8004608 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004600:	4618      	mov	r0, r3
 8004602:	3730      	adds	r7, #48	; 0x30
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e002      	b.n	800462a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004636:	2101      	movs	r1, #1
 8004638:	69b8      	ldr	r0, [r7, #24]
 800463a:	f7ff ff0b 	bl	8004454 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800465e:	2300      	movs	r3, #0
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <xQueueGenericSend+0x30>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
 800467e:	e7fe      	b.n	800467e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <xQueueGenericSend+0x3e>
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <xQueueGenericSend+0x42>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <xQueueGenericSend+0x44>
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <xQueueGenericSend+0x5c>
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
 80046aa:	e7fe      	b.n	80046aa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d103      	bne.n	80046ba <xQueueGenericSend+0x6a>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <xQueueGenericSend+0x6e>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <xQueueGenericSend+0x70>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <xQueueGenericSend+0x88>
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	e7fe      	b.n	80046d6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046d8:	f001 f95e 	bl	8005998 <xTaskGetSchedulerState>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <xQueueGenericSend+0x98>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <xQueueGenericSend+0x9c>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <xQueueGenericSend+0x9e>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <xQueueGenericSend+0xb6>
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	e7fe      	b.n	8004704 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004706:	f001 fec9 	bl	800649c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <xQueueGenericSend+0xcc>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d129      	bne.n	8004770 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004722:	f000 f9ff 	bl	8004b24 <prvCopyDataToQueue>
 8004726:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	d010      	beq.n	8004752 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	3324      	adds	r3, #36	; 0x24
 8004734:	4618      	mov	r0, r3
 8004736:	f000 ff73 	bl	8005620 <xTaskRemoveFromEventList>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d013      	beq.n	8004768 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004740:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <xQueueGenericSend+0x1f0>)
 8004742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	e00a      	b.n	8004768 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004758:	4b39      	ldr	r3, [pc, #228]	; (8004840 <xQueueGenericSend+0x1f0>)
 800475a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004768:	f001 fec6 	bl	80064f8 <vPortExitCritical>
				return pdPASS;
 800476c:	2301      	movs	r3, #1
 800476e:	e063      	b.n	8004838 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004776:	f001 febf 	bl	80064f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800477a:	2300      	movs	r3, #0
 800477c:	e05c      	b.n	8004838 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	4618      	mov	r0, r3
 800478a:	f000 ffab 	bl	80056e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800478e:	2301      	movs	r3, #1
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004792:	f001 feb1 	bl	80064f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004796:	f000 fd19 	bl	80051cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800479a:	f001 fe7f 	bl	800649c <vPortEnterCritical>
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a4:	b25b      	sxtb	r3, r3
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d103      	bne.n	80047b4 <xQueueGenericSend+0x164>
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d103      	bne.n	80047ca <xQueueGenericSend+0x17a>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ca:	f001 fe95 	bl	80064f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047ce:	1d3a      	adds	r2, r7, #4
 80047d0:	f107 0314 	add.w	r3, r7, #20
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 ff9a 	bl	8005710 <xTaskCheckForTimeOut>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d124      	bne.n	800482c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e4:	f000 fa96 	bl	8004d14 <prvIsQueueFull>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d018      	beq.n	8004820 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	3310      	adds	r3, #16
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fec4 	bl	8005584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047fe:	f000 fa21 	bl	8004c44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004802:	f000 fcf1 	bl	80051e8 <xTaskResumeAll>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	f47f af7c 	bne.w	8004706 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800480e:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <xQueueGenericSend+0x1f0>)
 8004810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	e772      	b.n	8004706 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004822:	f000 fa0f 	bl	8004c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004826:	f000 fcdf 	bl	80051e8 <xTaskResumeAll>
 800482a:	e76c      	b.n	8004706 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800482c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800482e:	f000 fa09 	bl	8004c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004832:	f000 fcd9 	bl	80051e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004836:	2300      	movs	r3, #0
		}
	}
}
 8004838:	4618      	mov	r0, r3
 800483a:	3738      	adds	r7, #56	; 0x38
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08e      	sub	sp, #56	; 0x38
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <xQueueGenericSendFromISR+0x2c>
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
 800486e:	e7fe      	b.n	800486e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <xQueueGenericSendFromISR+0x3a>
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <xQueueGenericSendFromISR+0x3e>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueGenericSendFromISR+0x40>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <xQueueGenericSendFromISR+0x58>
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	e7fe      	b.n	800489a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d103      	bne.n	80048aa <xQueueGenericSendFromISR+0x66>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <xQueueGenericSendFromISR+0x6a>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <xQueueGenericSendFromISR+0x6c>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <xQueueGenericSendFromISR+0x84>
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e7fe      	b.n	80048c6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048c8:	f001 fec4 	bl	8006654 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048cc:	f3ef 8211 	mrs	r2, BASEPRI
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	61ba      	str	r2, [r7, #24]
 80048e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <xQueueGenericSendFromISR+0xb6>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d12c      	bne.n	8004954 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490a:	f000 f90b 	bl	8004b24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800490e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d112      	bne.n	800493e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d016      	beq.n	800494e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	3324      	adds	r3, #36	; 0x24
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fe7b 	bl	8005620 <xTaskRemoveFromEventList>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00e      	beq.n	800494e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00b      	beq.n	800494e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e007      	b.n	800494e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800493e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004942:	3301      	adds	r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	b25a      	sxtb	r2, r3
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800494e:	2301      	movs	r3, #1
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004952:	e001      	b.n	8004958 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004954:	2300      	movs	r3, #0
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004964:	4618      	mov	r0, r3
 8004966:	3738      	adds	r7, #56	; 0x38
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08c      	sub	sp, #48	; 0x30
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <xQueueReceive+0x2e>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	e7fe      	b.n	8004998 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <xQueueReceive+0x3c>
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <xQueueReceive+0x40>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <xQueueReceive+0x42>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <xQueueReceive+0x5a>
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e7fe      	b.n	80049c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c6:	f000 ffe7 	bl	8005998 <xTaskGetSchedulerState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <xQueueReceive+0x6a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <xQueueReceive+0x6e>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <xQueueReceive+0x70>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <xQueueReceive+0x88>
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	e7fe      	b.n	80049f2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049f4:	f001 fd52 	bl	800649c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01f      	beq.n	8004a44 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a08:	f000 f8f6 	bl	8004bf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00f      	beq.n	8004a3c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	3310      	adds	r3, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fdfd 	bl	8005620 <xTaskRemoveFromEventList>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a2c:	4b3c      	ldr	r3, [pc, #240]	; (8004b20 <xQueueReceive+0x1b4>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a3c:	f001 fd5c 	bl	80064f8 <vPortExitCritical>
				return pdPASS;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e069      	b.n	8004b18 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a4a:	f001 fd55 	bl	80064f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e062      	b.n	8004b18 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a58:	f107 0310 	add.w	r3, r7, #16
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fe41 	bl	80056e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a62:	2301      	movs	r3, #1
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a66:	f001 fd47 	bl	80064f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a6a:	f000 fbaf 	bl	80051cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a6e:	f001 fd15 	bl	800649c <vPortEnterCritical>
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a78:	b25b      	sxtb	r3, r3
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d103      	bne.n	8004a88 <xQueueReceive+0x11c>
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a8e:	b25b      	sxtb	r3, r3
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d103      	bne.n	8004a9e <xQueueReceive+0x132>
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a9e:	f001 fd2b 	bl	80064f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aa2:	1d3a      	adds	r2, r7, #4
 8004aa4:	f107 0310 	add.w	r3, r7, #16
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fe30 	bl	8005710 <xTaskCheckForTimeOut>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d123      	bne.n	8004afe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab8:	f000 f916 	bl	8004ce8 <prvIsQueueEmpty>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d017      	beq.n	8004af2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	3324      	adds	r3, #36	; 0x24
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fd5a 	bl	8005584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad2:	f000 f8b7 	bl	8004c44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ad6:	f000 fb87 	bl	80051e8 <xTaskResumeAll>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d189      	bne.n	80049f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <xQueueReceive+0x1b4>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	e780      	b.n	80049f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af4:	f000 f8a6 	bl	8004c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004af8:	f000 fb76 	bl	80051e8 <xTaskResumeAll>
 8004afc:	e77a      	b.n	80049f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b00:	f000 f8a0 	bl	8004c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b04:	f000 fb70 	bl	80051e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0a:	f000 f8ed 	bl	8004ce8 <prvIsQueueEmpty>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f43f af6f 	beq.w	80049f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3730      	adds	r7, #48	; 0x30
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d14d      	bne.n	8004be6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 ff40 	bl	80059d4 <xTaskPriorityDisinherit>
 8004b54:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	e043      	b.n	8004be6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d119      	bne.n	8004b98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6898      	ldr	r0, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	f001 ffa8 	bl	8006ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	441a      	add	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d32b      	bcc.n	8004be6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	e026      	b.n	8004be6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68d8      	ldr	r0, [r3, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	f001 ff8e 	bl	8006ac4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	425b      	negs	r3, r3
 8004bb2:	441a      	add	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d207      	bcs.n	8004bd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	425b      	negs	r3, r3
 8004bce:	441a      	add	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d105      	bne.n	8004be6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bee:	697b      	ldr	r3, [r7, #20]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	441a      	add	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d303      	bcc.n	8004c2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68d9      	ldr	r1, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	461a      	mov	r2, r3
 8004c36:	6838      	ldr	r0, [r7, #0]
 8004c38:	f001 ff44 	bl	8006ac4 <memcpy>
	}
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c4c:	f001 fc26 	bl	800649c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c58:	e011      	b.n	8004c7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3324      	adds	r3, #36	; 0x24
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fcda 	bl	8005620 <xTaskRemoveFromEventList>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c72:	f000 fdad 	bl	80057d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dce9      	bgt.n	8004c5a <prvUnlockQueue+0x16>
 8004c86:	e000      	b.n	8004c8a <prvUnlockQueue+0x46>
					break;
 8004c88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	22ff      	movs	r2, #255	; 0xff
 8004c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c92:	f001 fc31 	bl	80064f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c96:	f001 fc01 	bl	800649c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ca2:	e011      	b.n	8004cc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d012      	beq.n	8004cd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3310      	adds	r3, #16
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fcb5 	bl	8005620 <xTaskRemoveFromEventList>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cbc:	f000 fd88 	bl	80057d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cc0:	7bbb      	ldrb	r3, [r7, #14]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dce9      	bgt.n	8004ca4 <prvUnlockQueue+0x60>
 8004cd0:	e000      	b.n	8004cd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	22ff      	movs	r2, #255	; 0xff
 8004cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cdc:	f001 fc0c 	bl	80064f8 <vPortExitCritical>
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cf0:	f001 fbd4 	bl	800649c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e001      	b.n	8004d06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d06:	f001 fbf7 	bl	80064f8 <vPortExitCritical>

	return xReturn;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d1c:	f001 fbbe 	bl	800649c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d102      	bne.n	8004d32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e001      	b.n	8004d36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d36:	f001 fbdf 	bl	80064f8 <vPortExitCritical>

	return xReturn;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e014      	b.n	8004d7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d54:	4a0e      	ldr	r2, [pc, #56]	; (8004d90 <vQueueAddToRegistry+0x4c>)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d60:	490b      	ldr	r1, [pc, #44]	; (8004d90 <vQueueAddToRegistry+0x4c>)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d6a:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <vQueueAddToRegistry+0x4c>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d76:	e005      	b.n	8004d84 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b07      	cmp	r3, #7
 8004d82:	d9e7      	bls.n	8004d54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	200032e4 	.word	0x200032e4

08004d94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004da4:	f001 fb7a 	bl	800649c <vPortEnterCritical>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dae:	b25b      	sxtb	r3, r3
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d103      	bne.n	8004dbe <vQueueWaitForMessageRestricted+0x2a>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dc4:	b25b      	sxtb	r3, r3
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d103      	bne.n	8004dd4 <vQueueWaitForMessageRestricted+0x40>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd4:	f001 fb90 	bl	80064f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3324      	adds	r3, #36	; 0x24
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fbef 	bl	80055cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dee:	6978      	ldr	r0, [r7, #20]
 8004df0:	f7ff ff28 	bl	8004c44 <prvUnlockQueue>
	}
 8004df4:	bf00      	nop
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08e      	sub	sp, #56	; 0x38
 8004e00:	af04      	add	r7, sp, #16
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <xTaskCreateStatic+0x28>
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	623b      	str	r3, [r7, #32]
 8004e22:	e7fe      	b.n	8004e22 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d109      	bne.n	8004e3e <xTaskCreateStatic+0x42>
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	e7fe      	b.n	8004e3c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e3e:	235c      	movs	r3, #92	; 0x5c
 8004e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b5c      	cmp	r3, #92	; 0x5c
 8004e46:	d009      	beq.n	8004e5c <xTaskCreateStatic+0x60>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e7fe      	b.n	8004e5a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01e      	beq.n	8004ea0 <xTaskCreateStatic+0xa4>
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	9302      	str	r3, [sp, #8]
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f80b 	bl	8004eae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e9a:	f000 f88f 	bl	8004fbc <prvAddNewTaskToReadyList>
 8004e9e:	e001      	b.n	8004ea4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ea4:	697b      	ldr	r3, [r7, #20]
	}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3728      	adds	r7, #40	; 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b088      	sub	sp, #32
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	21a5      	movs	r1, #165	; 0xa5
 8004ec8:	f001 fe07 	bl	8006ada <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	f023 0307 	bic.w	r3, r3, #7
 8004ee4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <prvInitialiseNewTask+0x56>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e7fe      	b.n	8004f02 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	e012      	b.n	8004f30 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	7819      	ldrb	r1, [r3, #0]
 8004f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	3334      	adds	r3, #52	; 0x34
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d006      	beq.n	8004f38 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d9e9      	bls.n	8004f0a <prvInitialiseNewTask+0x5c>
 8004f36:	e000      	b.n	8004f3a <prvInitialiseNewTask+0x8c>
		{
			break;
 8004f38:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	2b37      	cmp	r3, #55	; 0x37
 8004f46:	d901      	bls.n	8004f4c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f48:	2337      	movs	r3, #55	; 0x37
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	3304      	adds	r3, #4
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff f9e2 	bl	800432c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	3318      	adds	r3, #24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff f9dd 	bl	800432c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	69b8      	ldr	r0, [r7, #24]
 8004f9c:	f001 f95a 	bl	8006254 <pxPortInitialiseStack>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb2:	bf00      	nop
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fc4:	f001 fa6a 	bl	800649c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fda:	4a2a      	ldr	r2, [pc, #168]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d110      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fe8:	f000 fc16 	bl	8005818 <prvInitialiseTaskLists>
 8004fec:	e00d      	b.n	800500a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ff6:	4b23      	ldr	r3, [pc, #140]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d802      	bhi.n	800500a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005004:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 8005012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <prvAddNewTaskToReadyList+0xd4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d903      	bls.n	8005030 <prvAddNewTaskToReadyList+0x74>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <prvAddNewTaskToReadyList+0xd4>)
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4a15      	ldr	r2, [pc, #84]	; (8005094 <prvAddNewTaskToReadyList+0xd8>)
 800503e:	441a      	add	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7ff f97d 	bl	8004346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800504c:	f001 fa54 	bl	80064f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005050:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	429a      	cmp	r2, r3
 8005064:	d207      	bcs.n	8005076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <prvAddNewTaskToReadyList+0xdc>)
 8005068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20001128 	.word	0x20001128
 8005084:	20000c54 	.word	0x20000c54
 8005088:	20001134 	.word	0x20001134
 800508c:	20001144 	.word	0x20001144
 8005090:	20001130 	.word	0x20001130
 8005094:	20000c58 	.word	0x20000c58
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d016      	beq.n	80050dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <vTaskDelay+0x60>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <vTaskDelay+0x2e>
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	e7fe      	b.n	80050c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80050ca:	f000 f87f 	bl	80051cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050ce:	2100      	movs	r1, #0
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fceb 	bl	8005aac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050d6:	f000 f887 	bl	80051e8 <xTaskResumeAll>
 80050da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <vTaskDelay+0x64>)
 80050e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20001150 	.word	0x20001150
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005112:	463a      	mov	r2, r7
 8005114:	1d39      	adds	r1, r7, #4
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f8b2 	bl	8004284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	9202      	str	r2, [sp, #8]
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	2300      	movs	r3, #0
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	460a      	mov	r2, r1
 8005132:	4920      	ldr	r1, [pc, #128]	; (80051b4 <vTaskStartScheduler+0xb0>)
 8005134:	4820      	ldr	r0, [pc, #128]	; (80051b8 <vTaskStartScheduler+0xb4>)
 8005136:	f7ff fe61 	bl	8004dfc <xTaskCreateStatic>
 800513a:	4602      	mov	r2, r0
 800513c:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <vTaskStartScheduler+0xb8>)
 800513e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <vTaskStartScheduler+0xb8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e001      	b.n	8005152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d102      	bne.n	800515e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005158:	f000 fcfc 	bl	8005b54 <xTimerCreateTimerTask>
 800515c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d115      	bne.n	8005190 <vTaskStartScheduler+0x8c>
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005176:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <vTaskStartScheduler+0xbc>)
 8005178:	f04f 32ff 	mov.w	r2, #4294967295
 800517c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <vTaskStartScheduler+0xc0>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005184:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <vTaskStartScheduler+0xc4>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800518a:	f001 f8e9 	bl	8006360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800518e:	e00d      	b.n	80051ac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d109      	bne.n	80051ac <vTaskStartScheduler+0xa8>
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	e7fe      	b.n	80051aa <vTaskStartScheduler+0xa6>
}
 80051ac:	bf00      	nop
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	08006bf4 	.word	0x08006bf4
 80051b8:	080057e9 	.word	0x080057e9
 80051bc:	2000114c 	.word	0x2000114c
 80051c0:	20001148 	.word	0x20001148
 80051c4:	20001134 	.word	0x20001134
 80051c8:	2000112c 	.word	0x2000112c

080051cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051d0:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <vTaskSuspendAll+0x18>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <vTaskSuspendAll+0x18>)
 80051d8:	6013      	str	r3, [r2, #0]
}
 80051da:	bf00      	nop
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	20001150 	.word	0x20001150

080051e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051f6:	4b41      	ldr	r3, [pc, #260]	; (80052fc <xTaskResumeAll+0x114>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <xTaskResumeAll+0x2a>
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	e7fe      	b.n	8005210 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005212:	f001 f943 	bl	800649c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005216:	4b39      	ldr	r3, [pc, #228]	; (80052fc <xTaskResumeAll+0x114>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3b01      	subs	r3, #1
 800521c:	4a37      	ldr	r2, [pc, #220]	; (80052fc <xTaskResumeAll+0x114>)
 800521e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005220:	4b36      	ldr	r3, [pc, #216]	; (80052fc <xTaskResumeAll+0x114>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d162      	bne.n	80052ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005228:	4b35      	ldr	r3, [pc, #212]	; (8005300 <xTaskResumeAll+0x118>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d05e      	beq.n	80052ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005230:	e02f      	b.n	8005292 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005232:	4b34      	ldr	r3, [pc, #208]	; (8005304 <xTaskResumeAll+0x11c>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3318      	adds	r3, #24
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f8de 	bl	8004400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3304      	adds	r3, #4
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff f8d9 	bl	8004400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005252:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <xTaskResumeAll+0x120>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d903      	bls.n	8005262 <xTaskResumeAll+0x7a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <xTaskResumeAll+0x120>)
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4a27      	ldr	r2, [pc, #156]	; (800530c <xTaskResumeAll+0x124>)
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3304      	adds	r3, #4
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7ff f864 	bl	8004346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005282:	4b23      	ldr	r3, [pc, #140]	; (8005310 <xTaskResumeAll+0x128>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <xTaskResumeAll+0x12c>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <xTaskResumeAll+0x11c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1cb      	bne.n	8005232 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052a0:	f000 fb54 	bl	800594c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <xTaskResumeAll+0x130>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d010      	beq.n	80052d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052b0:	f000 f846 	bl	8005340 <xTaskIncrementTick>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80052ba:	4b16      	ldr	r3, [pc, #88]	; (8005314 <xTaskResumeAll+0x12c>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f1      	bne.n	80052b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <xTaskResumeAll+0x130>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <xTaskResumeAll+0x12c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052da:	2301      	movs	r3, #1
 80052dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <xTaskResumeAll+0x134>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ee:	f001 f903 	bl	80064f8 <vPortExitCritical>

	return xAlreadyYielded;
 80052f2:	68bb      	ldr	r3, [r7, #8]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20001150 	.word	0x20001150
 8005300:	20001128 	.word	0x20001128
 8005304:	200010e8 	.word	0x200010e8
 8005308:	20001130 	.word	0x20001130
 800530c:	20000c58 	.word	0x20000c58
 8005310:	20000c54 	.word	0x20000c54
 8005314:	2000113c 	.word	0x2000113c
 8005318:	20001138 	.word	0x20001138
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <xTaskGetTickCount+0x1c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800532c:	687b      	ldr	r3, [r7, #4]
}
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	2000112c 	.word	0x2000112c

08005340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534a:	4b55      	ldr	r3, [pc, #340]	; (80054a0 <xTaskIncrementTick+0x160>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f040 8093 	bne.w	800547a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005354:	4b53      	ldr	r3, [pc, #332]	; (80054a4 <xTaskIncrementTick+0x164>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800535c:	4a51      	ldr	r2, [pc, #324]	; (80054a4 <xTaskIncrementTick+0x164>)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d11f      	bne.n	80053a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005368:	4b4f      	ldr	r3, [pc, #316]	; (80054a8 <xTaskIncrementTick+0x168>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <xTaskIncrementTick+0x46>
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	e7fe      	b.n	8005384 <xTaskIncrementTick+0x44>
 8005386:	4b48      	ldr	r3, [pc, #288]	; (80054a8 <xTaskIncrementTick+0x168>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	4b47      	ldr	r3, [pc, #284]	; (80054ac <xTaskIncrementTick+0x16c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a45      	ldr	r2, [pc, #276]	; (80054a8 <xTaskIncrementTick+0x168>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4a45      	ldr	r2, [pc, #276]	; (80054ac <xTaskIncrementTick+0x16c>)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	4b45      	ldr	r3, [pc, #276]	; (80054b0 <xTaskIncrementTick+0x170>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3301      	adds	r3, #1
 80053a0:	4a43      	ldr	r2, [pc, #268]	; (80054b0 <xTaskIncrementTick+0x170>)
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	f000 fad2 	bl	800594c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053a8:	4b42      	ldr	r3, [pc, #264]	; (80054b4 <xTaskIncrementTick+0x174>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d34e      	bcc.n	8005450 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b2:	4b3d      	ldr	r3, [pc, #244]	; (80054a8 <xTaskIncrementTick+0x168>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <xTaskIncrementTick+0x80>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <xTaskIncrementTick+0x82>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c6:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <xTaskIncrementTick+0x174>)
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	601a      	str	r2, [r3, #0]
					break;
 80053ce:	e03f      	b.n	8005450 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <xTaskIncrementTick+0x168>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d203      	bcs.n	80053f0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053e8:	4a32      	ldr	r2, [pc, #200]	; (80054b4 <xTaskIncrementTick+0x174>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6013      	str	r3, [r2, #0]
						break;
 80053ee:	e02f      	b.n	8005450 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff f803 	bl	8004400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	3318      	adds	r3, #24
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe fffa 	bl	8004400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b29      	ldr	r3, [pc, #164]	; (80054b8 <xTaskIncrementTick+0x178>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d903      	bls.n	8005420 <xTaskIncrementTick+0xe0>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <xTaskIncrementTick+0x178>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a23      	ldr	r2, [pc, #140]	; (80054bc <xTaskIncrementTick+0x17c>)
 800542e:	441a      	add	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe ff85 	bl	8004346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <xTaskIncrementTick+0x180>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	429a      	cmp	r2, r3
 8005448:	d3b3      	bcc.n	80053b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544e:	e7b0      	b.n	80053b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005450:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <xTaskIncrementTick+0x180>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005456:	4919      	ldr	r1, [pc, #100]	; (80054bc <xTaskIncrementTick+0x17c>)
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d901      	bls.n	800546c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 800546c:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <xTaskIncrementTick+0x184>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8005474:	f7fa fede 	bl	8000234 <vApplicationTickHook>
 8005478:	e006      	b.n	8005488 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <xTaskIncrementTick+0x184>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <xTaskIncrementTick+0x184>)
 8005482:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8005484:	f7fa fed6 	bl	8000234 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005488:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <xTaskIncrementTick+0x188>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005494:	697b      	ldr	r3, [r7, #20]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20001150 	.word	0x20001150
 80054a4:	2000112c 	.word	0x2000112c
 80054a8:	200010e0 	.word	0x200010e0
 80054ac:	200010e4 	.word	0x200010e4
 80054b0:	20001140 	.word	0x20001140
 80054b4:	20001148 	.word	0x20001148
 80054b8:	20001130 	.word	0x20001130
 80054bc:	20000c58 	.word	0x20000c58
 80054c0:	20000c54 	.word	0x20000c54
 80054c4:	20001138 	.word	0x20001138
 80054c8:	2000113c 	.word	0x2000113c

080054cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054d2:	4b27      	ldr	r3, [pc, #156]	; (8005570 <vTaskSwitchContext+0xa4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054da:	4b26      	ldr	r3, [pc, #152]	; (8005574 <vTaskSwitchContext+0xa8>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054e0:	e040      	b.n	8005564 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80054e2:	4b24      	ldr	r3, [pc, #144]	; (8005574 <vTaskSwitchContext+0xa8>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054e8:	4b23      	ldr	r3, [pc, #140]	; (8005578 <vTaskSwitchContext+0xac>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	e00f      	b.n	8005510 <vTaskSwitchContext+0x44>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <vTaskSwitchContext+0x3e>
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	e7fe      	b.n	8005508 <vTaskSwitchContext+0x3c>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b01      	subs	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	491a      	ldr	r1, [pc, #104]	; (800557c <vTaskSwitchContext+0xb0>)
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0e5      	beq.n	80054f0 <vTaskSwitchContext+0x24>
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <vTaskSwitchContext+0xb0>)
 8005530:	4413      	add	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	3308      	adds	r3, #8
 8005546:	429a      	cmp	r2, r3
 8005548:	d104      	bne.n	8005554 <vTaskSwitchContext+0x88>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4a09      	ldr	r2, [pc, #36]	; (8005580 <vTaskSwitchContext+0xb4>)
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4a06      	ldr	r2, [pc, #24]	; (8005578 <vTaskSwitchContext+0xac>)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6013      	str	r3, [r2, #0]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20001150 	.word	0x20001150
 8005574:	2000113c 	.word	0x2000113c
 8005578:	20001130 	.word	0x20001130
 800557c:	20000c58 	.word	0x20000c58
 8005580:	20000c54 	.word	0x20000c54

08005584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d109      	bne.n	80055a8 <vTaskPlaceOnEventList+0x24>
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e7fe      	b.n	80055a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055a8:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <vTaskPlaceOnEventList+0x44>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3318      	adds	r3, #24
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fe feec 	bl	800438e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055b6:	2101      	movs	r1, #1
 80055b8:	6838      	ldr	r0, [r7, #0]
 80055ba:	f000 fa77 	bl	8005aac <prvAddCurrentTaskToDelayedList>
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000c54 	.word	0x20000c54

080055cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <vTaskPlaceOnEventListRestricted+0x26>
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	e7fe      	b.n	80055f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <vTaskPlaceOnEventListRestricted+0x50>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3318      	adds	r3, #24
 80055f8:	4619      	mov	r1, r3
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7fe fea3 	bl	8004346 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005606:	f04f 33ff 	mov.w	r3, #4294967295
 800560a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	68b8      	ldr	r0, [r7, #8]
 8005610:	f000 fa4c 	bl	8005aac <prvAddCurrentTaskToDelayedList>
	}
 8005614:	bf00      	nop
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000c54 	.word	0x20000c54

08005620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <xTaskRemoveFromEventList+0x2a>
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e7fe      	b.n	8005648 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3318      	adds	r3, #24
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fed6 	bl	8004400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005654:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <xTaskRemoveFromEventList+0xac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11d      	bne.n	8005698 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	3304      	adds	r3, #4
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe fecd 	bl	8004400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <xTaskRemoveFromEventList+0xb0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d903      	bls.n	800567a <xTaskRemoveFromEventList+0x5a>
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <xTaskRemoveFromEventList+0xb0>)
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <xTaskRemoveFromEventList+0xb4>)
 8005688:	441a      	add	r2, r3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7fe fe58 	bl	8004346 <vListInsertEnd>
 8005696:	e005      	b.n	80056a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3318      	adds	r3, #24
 800569c:	4619      	mov	r1, r3
 800569e:	480e      	ldr	r0, [pc, #56]	; (80056d8 <xTaskRemoveFromEventList+0xb8>)
 80056a0:	f7fe fe51 	bl	8004346 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <xTaskRemoveFromEventList+0xbc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d905      	bls.n	80056be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056b2:	2301      	movs	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <xTaskRemoveFromEventList+0xc0>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e001      	b.n	80056c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80056c2:	697b      	ldr	r3, [r7, #20]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20001150 	.word	0x20001150
 80056d0:	20001130 	.word	0x20001130
 80056d4:	20000c58 	.word	0x20000c58
 80056d8:	200010e8 	.word	0x200010e8
 80056dc:	20000c54 	.word	0x20000c54
 80056e0:	2000113c 	.word	0x2000113c

080056e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <vTaskInternalSetTimeOutState+0x24>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <vTaskInternalSetTimeOutState+0x28>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	20001140 	.word	0x20001140
 800570c:	2000112c 	.word	0x2000112c

08005710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <xTaskCheckForTimeOut+0x24>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	e7fe      	b.n	8005732 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <xTaskCheckForTimeOut+0x3e>
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e7fe      	b.n	800574c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800574e:	f000 fea5 	bl	800649c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005752:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <xTaskCheckForTimeOut+0xb8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d102      	bne.n	8005772 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	e023      	b.n	80057ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <xTaskCheckForTimeOut+0xbc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d007      	beq.n	800578e <xTaskCheckForTimeOut+0x7e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e015      	b.n	80057ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d20b      	bcs.n	80057b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff9d 	bl	80056e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e004      	b.n	80057ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057ba:	f000 fe9d 	bl	80064f8 <vPortExitCritical>

	return xReturn;
 80057be:	69fb      	ldr	r3, [r7, #28]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	2000112c 	.word	0x2000112c
 80057cc:	20001140 	.word	0x20001140

080057d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <vTaskMissedYield+0x14>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
}
 80057da:	bf00      	nop
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	2000113c 	.word	0x2000113c

080057e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057f0:	f000 f852 	bl	8005898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <prvIdleTask+0x28>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d9f9      	bls.n	80057f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057fc:	4b05      	ldr	r3, [pc, #20]	; (8005814 <prvIdleTask+0x2c>)
 80057fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800580c:	e7f0      	b.n	80057f0 <prvIdleTask+0x8>
 800580e:	bf00      	nop
 8005810:	20000c58 	.word	0x20000c58
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	e00c      	b.n	800583e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <prvInitialiseTaskLists+0x60>)
 8005830:	4413      	add	r3, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fd5a 	bl	80042ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3301      	adds	r3, #1
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b37      	cmp	r3, #55	; 0x37
 8005842:	d9ef      	bls.n	8005824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005844:	480d      	ldr	r0, [pc, #52]	; (800587c <prvInitialiseTaskLists+0x64>)
 8005846:	f7fe fd51 	bl	80042ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800584a:	480d      	ldr	r0, [pc, #52]	; (8005880 <prvInitialiseTaskLists+0x68>)
 800584c:	f7fe fd4e 	bl	80042ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005850:	480c      	ldr	r0, [pc, #48]	; (8005884 <prvInitialiseTaskLists+0x6c>)
 8005852:	f7fe fd4b 	bl	80042ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005856:	480c      	ldr	r0, [pc, #48]	; (8005888 <prvInitialiseTaskLists+0x70>)
 8005858:	f7fe fd48 	bl	80042ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800585c:	480b      	ldr	r0, [pc, #44]	; (800588c <prvInitialiseTaskLists+0x74>)
 800585e:	f7fe fd45 	bl	80042ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <prvInitialiseTaskLists+0x78>)
 8005864:	4a05      	ldr	r2, [pc, #20]	; (800587c <prvInitialiseTaskLists+0x64>)
 8005866:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <prvInitialiseTaskLists+0x7c>)
 800586a:	4a05      	ldr	r2, [pc, #20]	; (8005880 <prvInitialiseTaskLists+0x68>)
 800586c:	601a      	str	r2, [r3, #0]
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000c58 	.word	0x20000c58
 800587c:	200010b8 	.word	0x200010b8
 8005880:	200010cc 	.word	0x200010cc
 8005884:	200010e8 	.word	0x200010e8
 8005888:	200010fc 	.word	0x200010fc
 800588c:	20001114 	.word	0x20001114
 8005890:	200010e0 	.word	0x200010e0
 8005894:	200010e4 	.word	0x200010e4

08005898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800589e:	e019      	b.n	80058d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058a0:	f000 fdfc 	bl	800649c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <prvCheckTasksWaitingTermination+0x4c>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe fda5 	bl	8004400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <prvCheckTasksWaitingTermination+0x50>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <prvCheckTasksWaitingTermination+0x50>)
 80058be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <prvCheckTasksWaitingTermination+0x54>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <prvCheckTasksWaitingTermination+0x54>)
 80058c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058ca:	f000 fe15 	bl	80064f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f80e 	bl	80058f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <prvCheckTasksWaitingTermination+0x54>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e1      	bne.n	80058a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200010fc 	.word	0x200010fc
 80058e8:	20001128 	.word	0x20001128
 80058ec:	20001110 	.word	0x20001110

080058f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d108      	bne.n	8005914 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	4618      	mov	r0, r3
 8005908:	f000 ffa4 	bl	8006854 <vPortFree>
				vPortFree( pxTCB );
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 ffa1 	bl	8006854 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005912:	e017      	b.n	8005944 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800591a:	2b01      	cmp	r3, #1
 800591c:	d103      	bne.n	8005926 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 ff98 	bl	8006854 <vPortFree>
	}
 8005924:	e00e      	b.n	8005944 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800592c:	2b02      	cmp	r3, #2
 800592e:	d009      	beq.n	8005944 <prvDeleteTCB+0x54>
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e7fe      	b.n	8005942 <prvDeleteTCB+0x52>
	}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005952:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <prvResetNextTaskUnblockTime+0x44>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <prvResetNextTaskUnblockTime+0x14>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <prvResetNextTaskUnblockTime+0x16>
 8005960:	2300      	movs	r3, #0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <prvResetNextTaskUnblockTime+0x48>)
 8005968:	f04f 32ff 	mov.w	r2, #4294967295
 800596c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800596e:	e008      	b.n	8005982 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <prvResetNextTaskUnblockTime+0x44>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4a05      	ldr	r2, [pc, #20]	; (8005994 <prvResetNextTaskUnblockTime+0x48>)
 8005980:	6013      	str	r3, [r2, #0]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	200010e0 	.word	0x200010e0
 8005994:	20001148 	.word	0x20001148

08005998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <xTaskGetSchedulerState+0x34>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059a6:	2301      	movs	r3, #1
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e008      	b.n	80059be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <xTaskGetSchedulerState+0x38>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059b4:	2302      	movs	r3, #2
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	e001      	b.n	80059be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059be:	687b      	ldr	r3, [r7, #4]
	}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20001134 	.word	0x20001134
 80059d0:	20001150 	.word	0x20001150

080059d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d054      	beq.n	8005a94 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059ea:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <xTaskPriorityDisinherit+0xcc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d009      	beq.n	8005a08 <xTaskPriorityDisinherit+0x34>
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e7fe      	b.n	8005a06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <xTaskPriorityDisinherit+0x50>
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	e7fe      	b.n	8005a22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d02c      	beq.n	8005a94 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d128      	bne.n	8005a94 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fcda 	bl	8004400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <xTaskPriorityDisinherit+0xd0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d903      	bls.n	8005a74 <xTaskPriorityDisinherit+0xa0>
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <xTaskPriorityDisinherit+0xd0>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a09      	ldr	r2, [pc, #36]	; (8005aa8 <xTaskPriorityDisinherit+0xd4>)
 8005a82:	441a      	add	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f7fe fc5b 	bl	8004346 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a94:	697b      	ldr	r3, [r7, #20]
	}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000c54 	.word	0x20000c54
 8005aa4:	20001130 	.word	0x20001130
 8005aa8:	20000c58 	.word	0x20000c58

08005aac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ab6:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <prvAddCurrentTaskToDelayedList+0x90>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005abc:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fc9c 	bl	8004400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d10a      	bne.n	8005ae6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4819      	ldr	r0, [pc, #100]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ae0:	f7fe fc31 	bl	8004346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ae4:	e026      	b.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d209      	bcs.n	8005b12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe fc3f 	bl	800438e <vListInsert>
}
 8005b10:	e010      	b.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b12:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe fc35 	bl	800438e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d202      	bcs.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b2e:	4a08      	ldr	r2, [pc, #32]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6013      	str	r3, [r2, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	2000112c 	.word	0x2000112c
 8005b40:	20000c54 	.word	0x20000c54
 8005b44:	20001114 	.word	0x20001114
 8005b48:	200010e4 	.word	0x200010e4
 8005b4c:	200010e0 	.word	0x200010e0
 8005b50:	20001148 	.word	0x20001148

08005b54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b5e:	f000 fb15 	bl	800618c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <xTimerCreateTimerTask+0x80>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d021      	beq.n	8005bae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b72:	1d3a      	adds	r2, r7, #4
 8005b74:	f107 0108 	add.w	r1, r7, #8
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fb9b 	bl	80042b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	9202      	str	r2, [sp, #8]
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	2300      	movs	r3, #0
 8005b92:	460a      	mov	r2, r1
 8005b94:	4910      	ldr	r1, [pc, #64]	; (8005bd8 <xTimerCreateTimerTask+0x84>)
 8005b96:	4811      	ldr	r0, [pc, #68]	; (8005bdc <xTimerCreateTimerTask+0x88>)
 8005b98:	f7ff f930 	bl	8004dfc <xTaskCreateStatic>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <xTimerCreateTimerTask+0x8c>)
 8005ba0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <xTimerCreateTimerTask+0x8c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <xTimerCreateTimerTask+0x74>
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	e7fe      	b.n	8005bc6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005bc8:	697b      	ldr	r3, [r7, #20]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20001184 	.word	0x20001184
 8005bd8:	08006bfc 	.word	0x08006bfc
 8005bdc:	08005da1 	.word	0x08005da1
 8005be0:	20001188 	.word	0x20001188

08005be4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005bf2:	2030      	movs	r0, #48	; 0x30
 8005bf4:	f000 fd6c 	bl	80066d0 <pvPortMalloc>
 8005bf8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f809 	bl	8005c26 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005c1c:	697b      	ldr	r3, [r7, #20]
	}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <prvInitialiseNewTimer+0x28>
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e7fe      	b.n	8005c4c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005c54:	f000 fa9a 	bl	800618c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	6a3a      	ldr	r2, [r7, #32]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fb56 	bl	800432c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005c80:	bf00      	nop
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <xTimerGenericCommand+0x2c>
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	e7fe      	b.n	8005cb2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <xTimerGenericCommand+0x94>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02a      	beq.n	8005d12 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	dc18      	bgt.n	8005d00 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cce:	f7ff fe63 	bl	8005998 <xTaskGetSchedulerState>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d109      	bne.n	8005cec <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cd8:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <xTimerGenericCommand+0x94>)
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	f107 0110 	add.w	r1, r7, #16
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce4:	f7fe fcb4 	bl	8004650 <xQueueGenericSend>
 8005ce8:	6278      	str	r0, [r7, #36]	; 0x24
 8005cea:	e012      	b.n	8005d12 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <xTimerGenericCommand+0x94>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	f107 0110 	add.w	r1, r7, #16
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f7fe fcaa 	bl	8004650 <xQueueGenericSend>
 8005cfc:	6278      	str	r0, [r7, #36]	; 0x24
 8005cfe:	e008      	b.n	8005d12 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <xTimerGenericCommand+0x94>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	f107 0110 	add.w	r1, r7, #16
 8005d08:	2300      	movs	r3, #0
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	f7fe fd9a 	bl	8004844 <xQueueGenericSendFromISR>
 8005d10:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3728      	adds	r7, #40	; 0x28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20001184 	.word	0x20001184

08005d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <prvProcessExpiredTimer+0x7c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fb61 	bl	8004400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d121      	bne.n	8005d8a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	18d1      	adds	r1, r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	f000 f8c8 	bl	8005ee8 <prvInsertTimerInActiveList>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d015      	beq.n	8005d8a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	2100      	movs	r1, #0
 8005d68:	6978      	ldr	r0, [r7, #20]
 8005d6a:	f7ff ff8d 	bl	8005c88 <xTimerGenericCommand>
 8005d6e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <prvProcessExpiredTimer+0x6a>
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e7fe      	b.n	8005d88 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	6978      	ldr	r0, [r7, #20]
 8005d90:	4798      	blx	r3
}
 8005d92:	bf00      	nop
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	2000117c 	.word	0x2000117c

08005da0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005da8:	f107 0308 	add.w	r3, r7, #8
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 f857 	bl	8005e60 <prvGetNextExpireTime>
 8005db2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4619      	mov	r1, r3
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f803 	bl	8005dc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dbe:	f000 f8d5 	bl	8005f6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dc2:	e7f1      	b.n	8005da8 <prvTimerTask+0x8>

08005dc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005dce:	f7ff f9fd 	bl	80051cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dd2:	f107 0308 	add.w	r3, r7, #8
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f866 	bl	8005ea8 <prvSampleTimeNow>
 8005ddc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d130      	bne.n	8005e46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <prvProcessTimerOrBlockTask+0x3c>
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d806      	bhi.n	8005e00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005df2:	f7ff f9f9 	bl	80051e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ff91 	bl	8005d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005dfe:	e024      	b.n	8005e4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e06:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <prvProcessTimerOrBlockTask+0x90>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	bf0c      	ite	eq
 8005e10:	2301      	moveq	r3, #1
 8005e12:	2300      	movne	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <prvProcessTimerOrBlockTask+0x94>)
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7fe ffb5 	bl	8004d94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e2a:	f7ff f9dd 	bl	80051e8 <xTaskResumeAll>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <prvProcessTimerOrBlockTask+0x98>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
}
 8005e44:	e001      	b.n	8005e4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e46:	f7ff f9cf 	bl	80051e8 <xTaskResumeAll>
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20001180 	.word	0x20001180
 8005e58:	20001184 	.word	0x20001184
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e68:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <prvGetNextExpireTime+0x44>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d105      	bne.n	8005e92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <prvGetNextExpireTime+0x44>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e001      	b.n	8005e96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	2000117c 	.word	0x2000117c

08005ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005eb0:	f7ff fa36 	bl	8005320 <xTaskGetTickCount>
 8005eb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <prvSampleTimeNow+0x3c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d205      	bcs.n	8005ecc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ec0:	f000 f904 	bl	80060cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e002      	b.n	8005ed2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ed2:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <prvSampleTimeNow+0x3c>)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	2000118c 	.word	0x2000118c

08005ee8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d812      	bhi.n	8005f34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d302      	bcc.n	8005f22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e01b      	b.n	8005f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f22:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <prvInsertTimerInActiveList+0x7c>)
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f7fe fa2e 	bl	800438e <vListInsert>
 8005f32:	e012      	b.n	8005f5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d206      	bcs.n	8005f4a <prvInsertTimerInActiveList+0x62>
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d302      	bcc.n	8005f4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f44:	2301      	movs	r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e007      	b.n	8005f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <prvInsertTimerInActiveList+0x80>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3304      	adds	r3, #4
 8005f52:	4619      	mov	r1, r3
 8005f54:	4610      	mov	r0, r2
 8005f56:	f7fe fa1a 	bl	800438e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20001180 	.word	0x20001180
 8005f68:	2000117c 	.word	0x2000117c

08005f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08e      	sub	sp, #56	; 0x38
 8005f70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f72:	e099      	b.n	80060a8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	da17      	bge.n	8005faa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f7a:	1d3b      	adds	r3, r7, #4
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <prvProcessReceivedCommands+0x2e>
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	e7fe      	b.n	8005f98 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa0:	6850      	ldr	r0, [r2, #4]
 8005fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa4:	6892      	ldr	r2, [r2, #8]
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	db7a      	blt.n	80060a6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fa1d 	bl	8004400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff ff6d 	bl	8005ea8 <prvSampleTimeNow>
 8005fce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b09      	cmp	r3, #9
 8005fd4:	d868      	bhi.n	80060a8 <prvProcessReceivedCommands+0x13c>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <prvProcessReceivedCommands+0x70>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	08006005 	.word	0x08006005
 8005fe8:	080060a9 	.word	0x080060a9
 8005fec:	0800605f 	.word	0x0800605f
 8005ff0:	08006095 	.word	0x08006095
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	08006005 	.word	0x08006005
 8005ffc:	080060a9 	.word	0x080060a9
 8006000:	0800605f 	.word	0x0800605f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	18d1      	adds	r1, r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006012:	f7ff ff69 	bl	8005ee8 <prvInsertTimerInActiveList>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d045      	beq.n	80060a8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006022:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d13d      	bne.n	80060a8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	441a      	add	r2, r3
 8006034:	2300      	movs	r3, #0
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2300      	movs	r3, #0
 800603a:	2100      	movs	r1, #0
 800603c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603e:	f7ff fe23 	bl	8005c88 <xTimerGenericCommand>
 8006042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d12e      	bne.n	80060a8 <prvProcessReceivedCommands+0x13c>
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e7fe      	b.n	800605c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <prvProcessReceivedCommands+0x114>
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e7fe      	b.n	800607e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	18d1      	adds	r1, r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608e:	f7ff ff2b 	bl	8005ee8 <prvInsertTimerInActiveList>
					break;
 8006092:	e009      	b.n	80060a8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800609e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a0:	f000 fbd8 	bl	8006854 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060a4:	e000      	b.n	80060a8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <prvProcessReceivedCommands+0x15c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	1d39      	adds	r1, r7, #4
 80060ae:	2200      	movs	r2, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fc5b 	bl	800496c <xQueueReceive>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f47f af5b 	bne.w	8005f74 <prvProcessReceivedCommands+0x8>
	}
}
 80060be:	bf00      	nop
 80060c0:	3730      	adds	r7, #48	; 0x30
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20001184 	.word	0x20001184

080060cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060d2:	e044      	b.n	800615e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <prvSwitchTimerLists+0xb8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060de:	4b29      	ldr	r3, [pc, #164]	; (8006184 <prvSwitchTimerLists+0xb8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3304      	adds	r3, #4
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe f987 	bl	8004400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d12d      	bne.n	800615e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	429a      	cmp	r2, r3
 8006112:	d90e      	bls.n	8006132 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006120:	4b18      	ldr	r3, [pc, #96]	; (8006184 <prvSwitchTimerLists+0xb8>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7fe f92f 	bl	800438e <vListInsert>
 8006130:	e015      	b.n	800615e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	2300      	movs	r3, #0
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	2100      	movs	r1, #0
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fda3 	bl	8005c88 <xTimerGenericCommand>
 8006142:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <prvSwitchTimerLists+0x92>
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	e7fe      	b.n	800615c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <prvSwitchTimerLists+0xb8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1b5      	bne.n	80060d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <prvSwitchTimerLists+0xb8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <prvSwitchTimerLists+0xbc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a04      	ldr	r2, [pc, #16]	; (8006184 <prvSwitchTimerLists+0xb8>)
 8006174:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006176:	4a04      	ldr	r2, [pc, #16]	; (8006188 <prvSwitchTimerLists+0xbc>)
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	6013      	str	r3, [r2, #0]
}
 800617c:	bf00      	nop
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	2000117c 	.word	0x2000117c
 8006188:	20001180 	.word	0x20001180

0800618c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006192:	f000 f983 	bl	800649c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006196:	4b15      	ldr	r3, [pc, #84]	; (80061ec <prvCheckForValidListAndQueue+0x60>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d120      	bne.n	80061e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800619e:	4814      	ldr	r0, [pc, #80]	; (80061f0 <prvCheckForValidListAndQueue+0x64>)
 80061a0:	f7fe f8a4 	bl	80042ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061a4:	4813      	ldr	r0, [pc, #76]	; (80061f4 <prvCheckForValidListAndQueue+0x68>)
 80061a6:	f7fe f8a1 	bl	80042ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <prvCheckForValidListAndQueue+0x6c>)
 80061ac:	4a10      	ldr	r2, [pc, #64]	; (80061f0 <prvCheckForValidListAndQueue+0x64>)
 80061ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <prvCheckForValidListAndQueue+0x70>)
 80061b2:	4a10      	ldr	r2, [pc, #64]	; (80061f4 <prvCheckForValidListAndQueue+0x68>)
 80061b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061b6:	2300      	movs	r3, #0
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <prvCheckForValidListAndQueue+0x74>)
 80061bc:	4a11      	ldr	r2, [pc, #68]	; (8006204 <prvCheckForValidListAndQueue+0x78>)
 80061be:	2110      	movs	r1, #16
 80061c0:	200a      	movs	r0, #10
 80061c2:	f7fe f9af 	bl	8004524 <xQueueGenericCreateStatic>
 80061c6:	4602      	mov	r2, r0
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <prvCheckForValidListAndQueue+0x60>)
 80061ca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061cc:	4b07      	ldr	r3, [pc, #28]	; (80061ec <prvCheckForValidListAndQueue+0x60>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061d4:	4b05      	ldr	r3, [pc, #20]	; (80061ec <prvCheckForValidListAndQueue+0x60>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	490b      	ldr	r1, [pc, #44]	; (8006208 <prvCheckForValidListAndQueue+0x7c>)
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fdb2 	bl	8004d44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061e0:	f000 f98a 	bl	80064f8 <vPortExitCritical>
}
 80061e4:	bf00      	nop
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20001184 	.word	0x20001184
 80061f0:	20001154 	.word	0x20001154
 80061f4:	20001168 	.word	0x20001168
 80061f8:	2000117c 	.word	0x2000117c
 80061fc:	20001180 	.word	0x20001180
 8006200:	20001230 	.word	0x20001230
 8006204:	20001190 	.word	0x20001190
 8006208:	08006c04 	.word	0x08006c04

0800620c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <xTimerIsTimerActive+0x26>
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e7fe      	b.n	8006230 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8006232:	f000 f933 	bl	800649c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	bf14      	ite	ne
 800623e:	2301      	movne	r3, #1
 8006240:	2300      	moveq	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006246:	f000 f957 	bl	80064f8 <vPortExitCritical>

	return xTimerIsInActiveList;
 800624a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3b04      	subs	r3, #4
 8006264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800626c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3b04      	subs	r3, #4
 8006272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f023 0201 	bic.w	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3b04      	subs	r3, #4
 8006282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006284:	4a0c      	ldr	r2, [pc, #48]	; (80062b8 <pxPortInitialiseStack+0x64>)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3b14      	subs	r3, #20
 800628e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3b04      	subs	r3, #4
 800629a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f06f 0202 	mvn.w	r2, #2
 80062a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3b20      	subs	r3, #32
 80062a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062aa:	68fb      	ldr	r3, [r7, #12]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	080062bd 	.word	0x080062bd

080062bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062c6:	4b11      	ldr	r3, [pc, #68]	; (800630c <prvTaskExitError+0x50>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ce:	d009      	beq.n	80062e4 <prvTaskExitError+0x28>
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	e7fe      	b.n	80062e2 <prvTaskExitError+0x26>
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062f6:	bf00      	nop
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0fc      	beq.n	80062f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	2000000c 	.word	0x2000000c

08006310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <pxCurrentTCBConst2>)
 8006312:	6819      	ldr	r1, [r3, #0]
 8006314:	6808      	ldr	r0, [r1, #0]
 8006316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631a:	f380 8809 	msr	PSP, r0
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8811 	msr	BASEPRI, r0
 800632a:	4770      	bx	lr
 800632c:	f3af 8000 	nop.w

08006330 <pxCurrentTCBConst2>:
 8006330:	20000c54 	.word	0x20000c54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006338:	4808      	ldr	r0, [pc, #32]	; (800635c <prvPortStartFirstTask+0x24>)
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	6800      	ldr	r0, [r0, #0]
 800633e:	f380 8808 	msr	MSP, r0
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8814 	msr	CONTROL, r0
 800634a:	b662      	cpsie	i
 800634c:	b661      	cpsie	f
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	df00      	svc	0
 8006358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800635a:	bf00      	nop
 800635c:	e000ed08 	.word	0xe000ed08

08006360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006366:	4b44      	ldr	r3, [pc, #272]	; (8006478 <xPortStartScheduler+0x118>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a44      	ldr	r2, [pc, #272]	; (800647c <xPortStartScheduler+0x11c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d109      	bne.n	8006384 <xPortStartScheduler+0x24>
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	e7fe      	b.n	8006382 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006384:	4b3c      	ldr	r3, [pc, #240]	; (8006478 <xPortStartScheduler+0x118>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a3d      	ldr	r2, [pc, #244]	; (8006480 <xPortStartScheduler+0x120>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d109      	bne.n	80063a2 <xPortStartScheduler+0x42>
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	e7fe      	b.n	80063a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063a2:	4b38      	ldr	r3, [pc, #224]	; (8006484 <xPortStartScheduler+0x124>)
 80063a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	22ff      	movs	r2, #255	; 0xff
 80063b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	4b30      	ldr	r3, [pc, #192]	; (8006488 <xPortStartScheduler+0x128>)
 80063c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ca:	4b30      	ldr	r3, [pc, #192]	; (800648c <xPortStartScheduler+0x12c>)
 80063cc:	2207      	movs	r2, #7
 80063ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063d0:	e009      	b.n	80063e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80063d2:	4b2e      	ldr	r3, [pc, #184]	; (800648c <xPortStartScheduler+0x12c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	4a2c      	ldr	r2, [pc, #176]	; (800648c <xPortStartScheduler+0x12c>)
 80063da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ee:	2b80      	cmp	r3, #128	; 0x80
 80063f0:	d0ef      	beq.n	80063d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063f2:	4b26      	ldr	r3, [pc, #152]	; (800648c <xPortStartScheduler+0x12c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f1c3 0307 	rsb	r3, r3, #7
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d009      	beq.n	8006412 <xPortStartScheduler+0xb2>
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	60bb      	str	r3, [r7, #8]
 8006410:	e7fe      	b.n	8006410 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006412:	4b1e      	ldr	r3, [pc, #120]	; (800648c <xPortStartScheduler+0x12c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	4a1c      	ldr	r2, [pc, #112]	; (800648c <xPortStartScheduler+0x12c>)
 800641a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800641c:	4b1b      	ldr	r3, [pc, #108]	; (800648c <xPortStartScheduler+0x12c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006424:	4a19      	ldr	r2, [pc, #100]	; (800648c <xPortStartScheduler+0x12c>)
 8006426:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <xPortStartScheduler+0x130>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a16      	ldr	r2, [pc, #88]	; (8006490 <xPortStartScheduler+0x130>)
 8006436:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800643a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800643c:	4b14      	ldr	r3, [pc, #80]	; (8006490 <xPortStartScheduler+0x130>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a13      	ldr	r2, [pc, #76]	; (8006490 <xPortStartScheduler+0x130>)
 8006442:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006446:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006448:	f000 f8d6 	bl	80065f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800644c:	4b11      	ldr	r3, [pc, #68]	; (8006494 <xPortStartScheduler+0x134>)
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006452:	f000 f8f5 	bl	8006640 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <xPortStartScheduler+0x138>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a0f      	ldr	r2, [pc, #60]	; (8006498 <xPortStartScheduler+0x138>)
 800645c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006460:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006462:	f7ff ff69 	bl	8006338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006466:	f7ff f831 	bl	80054cc <vTaskSwitchContext>
	prvTaskExitError();
 800646a:	f7ff ff27 	bl	80062bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000ed00 	.word	0xe000ed00
 800647c:	410fc271 	.word	0x410fc271
 8006480:	410fc270 	.word	0x410fc270
 8006484:	e000e400 	.word	0xe000e400
 8006488:	20001280 	.word	0x20001280
 800648c:	20001284 	.word	0x20001284
 8006490:	e000ed20 	.word	0xe000ed20
 8006494:	2000000c 	.word	0x2000000c
 8006498:	e000ef34 	.word	0xe000ef34

0800649c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064b4:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <vPortEnterCritical+0x54>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3301      	adds	r3, #1
 80064ba:	4a0d      	ldr	r2, [pc, #52]	; (80064f0 <vPortEnterCritical+0x54>)
 80064bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064be:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <vPortEnterCritical+0x54>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d10e      	bne.n	80064e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <vPortEnterCritical+0x58>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <vPortEnterCritical+0x48>
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	e7fe      	b.n	80064e2 <vPortEnterCritical+0x46>
	}
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	2000000c 	.word	0x2000000c
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064fe:	4b11      	ldr	r3, [pc, #68]	; (8006544 <vPortExitCritical+0x4c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <vPortExitCritical+0x22>
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	607b      	str	r3, [r7, #4]
 8006518:	e7fe      	b.n	8006518 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800651a:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <vPortExitCritical+0x4c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3b01      	subs	r3, #1
 8006520:	4a08      	ldr	r2, [pc, #32]	; (8006544 <vPortExitCritical+0x4c>)
 8006522:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <vPortExitCritical+0x4c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <vPortExitCritical+0x3e>
 800652c:	2300      	movs	r3, #0
 800652e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	2000000c 	.word	0x2000000c
	...

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f01e 0f10 	tst.w	lr, #16
 8006560:	bf08      	it	eq
 8006562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6010      	str	r0, [r2, #0]
 800656c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006574:	f380 8811 	msr	BASEPRI, r0
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f7fe ffa4 	bl	80054cc <vTaskSwitchContext>
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f380 8811 	msr	BASEPRI, r0
 800658c:	bc09      	pop	{r0, r3}
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	6808      	ldr	r0, [r1, #0]
 8006592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006596:	f01e 0f10 	tst.w	lr, #16
 800659a:	bf08      	it	eq
 800659c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065a0:	f380 8809 	msr	PSP, r0
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst>:
 80065b0:	20000c54 	.word	0x20000c54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d0:	f7fe feb6 	bl	8005340 <xTaskIncrementTick>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065da:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <SysTick_Handler+0x3c>)
 80065dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	2300      	movs	r3, #0
 80065e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	e000ed04 	.word	0xe000ed04

080065f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <vPortSetupTimerInterrupt+0x34>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <vPortSetupTimerInterrupt+0x38>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <vPortSetupTimerInterrupt+0x3c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a0a      	ldr	r2, [pc, #40]	; (8006638 <vPortSetupTimerInterrupt+0x40>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	099b      	lsrs	r3, r3, #6
 8006614:	4a09      	ldr	r2, [pc, #36]	; (800663c <vPortSetupTimerInterrupt+0x44>)
 8006616:	3b01      	subs	r3, #1
 8006618:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800661a:	4b04      	ldr	r3, [pc, #16]	; (800662c <vPortSetupTimerInterrupt+0x34>)
 800661c:	2207      	movs	r2, #7
 800661e:	601a      	str	r2, [r3, #0]
}
 8006620:	bf00      	nop
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	e000e010 	.word	0xe000e010
 8006630:	e000e018 	.word	0xe000e018
 8006634:	20000000 	.word	0x20000000
 8006638:	10624dd3 	.word	0x10624dd3
 800663c:	e000e014 	.word	0xe000e014

08006640 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006640:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006650 <vPortEnableVFP+0x10>
 8006644:	6801      	ldr	r1, [r0, #0]
 8006646:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800664a:	6001      	str	r1, [r0, #0]
 800664c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800664e:	bf00      	nop
 8006650:	e000ed88 	.word	0xe000ed88

08006654 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800665a:	f3ef 8305 	mrs	r3, IPSR
 800665e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b0f      	cmp	r3, #15
 8006664:	d913      	bls.n	800668e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006666:	4a16      	ldr	r2, [pc, #88]	; (80066c0 <vPortValidateInterruptPriority+0x6c>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006670:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <vPortValidateInterruptPriority+0x70>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	7afa      	ldrb	r2, [r7, #11]
 8006676:	429a      	cmp	r2, r3
 8006678:	d209      	bcs.n	800668e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	e7fe      	b.n	800668c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800668e:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <vPortValidateInterruptPriority+0x74>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <vPortValidateInterruptPriority+0x78>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d909      	bls.n	80066b2 <vPortValidateInterruptPriority+0x5e>
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	e7fe      	b.n	80066b0 <vPortValidateInterruptPriority+0x5c>
	}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	e000e3f0 	.word	0xe000e3f0
 80066c4:	20001280 	.word	0x20001280
 80066c8:	e000ed0c 	.word	0xe000ed0c
 80066cc:	20001284 	.word	0x20001284

080066d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	; 0x28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066dc:	f7fe fd76 	bl	80051cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066e0:	4b57      	ldr	r3, [pc, #348]	; (8006840 <pvPortMalloc+0x170>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066e8:	f000 f90c 	bl	8006904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066ec:	4b55      	ldr	r3, [pc, #340]	; (8006844 <pvPortMalloc+0x174>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f040 808c 	bne.w	8006812 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01c      	beq.n	800673a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006700:	2208      	movs	r2, #8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4413      	add	r3, r2
 8006706:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	2b00      	cmp	r3, #0
 8006710:	d013      	beq.n	800673a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f023 0307 	bic.w	r3, r3, #7
 8006718:	3308      	adds	r3, #8
 800671a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <pvPortMalloc+0x6a>
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e7fe      	b.n	8006738 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d068      	beq.n	8006812 <pvPortMalloc+0x142>
 8006740:	4b41      	ldr	r3, [pc, #260]	; (8006848 <pvPortMalloc+0x178>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	d863      	bhi.n	8006812 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800674a:	4b40      	ldr	r3, [pc, #256]	; (800684c <pvPortMalloc+0x17c>)
 800674c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800674e:	4b3f      	ldr	r3, [pc, #252]	; (800684c <pvPortMalloc+0x17c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006754:	e004      	b.n	8006760 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d903      	bls.n	8006772 <pvPortMalloc+0xa2>
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f1      	bne.n	8006756 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006772:	4b33      	ldr	r3, [pc, #204]	; (8006840 <pvPortMalloc+0x170>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006778:	429a      	cmp	r2, r3
 800677a:	d04a      	beq.n	8006812 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2208      	movs	r2, #8
 8006782:	4413      	add	r3, r2
 8006784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	1ad2      	subs	r2, r2, r3
 8006796:	2308      	movs	r3, #8
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	429a      	cmp	r2, r3
 800679c:	d91e      	bls.n	80067dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800679e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <pvPortMalloc+0xf4>
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	e7fe      	b.n	80067c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067d6:	69b8      	ldr	r0, [r7, #24]
 80067d8:	f000 f8f6 	bl	80069c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067dc:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <pvPortMalloc+0x178>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	4a18      	ldr	r2, [pc, #96]	; (8006848 <pvPortMalloc+0x178>)
 80067e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067ea:	4b17      	ldr	r3, [pc, #92]	; (8006848 <pvPortMalloc+0x178>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4b18      	ldr	r3, [pc, #96]	; (8006850 <pvPortMalloc+0x180>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d203      	bcs.n	80067fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067f6:	4b14      	ldr	r3, [pc, #80]	; (8006848 <pvPortMalloc+0x178>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a15      	ldr	r2, [pc, #84]	; (8006850 <pvPortMalloc+0x180>)
 80067fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	4b10      	ldr	r3, [pc, #64]	; (8006844 <pvPortMalloc+0x174>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	431a      	orrs	r2, r3
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006812:	f7fe fce9 	bl	80051e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	2b00      	cmp	r3, #0
 800681e:	d009      	beq.n	8006834 <pvPortMalloc+0x164>
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e7fe      	b.n	8006832 <pvPortMalloc+0x162>
	return pvReturn;
 8006834:	69fb      	ldr	r3, [r7, #28]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3728      	adds	r7, #40	; 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20003290 	.word	0x20003290
 8006844:	2000329c 	.word	0x2000329c
 8006848:	20003294 	.word	0x20003294
 800684c:	20003288 	.word	0x20003288
 8006850:	20003298 	.word	0x20003298

08006854 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d046      	beq.n	80068f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006866:	2308      	movs	r3, #8
 8006868:	425b      	negs	r3, r3
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4413      	add	r3, r2
 800686e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	4b20      	ldr	r3, [pc, #128]	; (80068fc <vPortFree+0xa8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4013      	ands	r3, r2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <vPortFree+0x42>
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e7fe      	b.n	8006894 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <vPortFree+0x5e>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60bb      	str	r3, [r7, #8]
 80068b0:	e7fe      	b.n	80068b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	4b11      	ldr	r3, [pc, #68]	; (80068fc <vPortFree+0xa8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d019      	beq.n	80068f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d115      	bne.n	80068f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <vPortFree+0xa8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	43db      	mvns	r3, r3
 80068d2:	401a      	ands	r2, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068d8:	f7fe fc78 	bl	80051cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <vPortFree+0xac>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4413      	add	r3, r2
 80068e6:	4a06      	ldr	r2, [pc, #24]	; (8006900 <vPortFree+0xac>)
 80068e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ea:	6938      	ldr	r0, [r7, #16]
 80068ec:	f000 f86c 	bl	80069c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068f0:	f7fe fc7a 	bl	80051e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068f4:	bf00      	nop
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	2000329c 	.word	0x2000329c
 8006900:	20003294 	.word	0x20003294

08006904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800690a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800690e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006910:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <prvHeapInit+0xac>)
 8006912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3307      	adds	r3, #7
 8006922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <prvHeapInit+0xac>)
 8006934:	4413      	add	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <prvHeapInit+0xb0>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <prvHeapInit+0xb0>)
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4413      	add	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006950:	2208      	movs	r2, #8
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0307 	bic.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <prvHeapInit+0xb4>)
 8006964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <prvHeapInit+0xb4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <prvHeapInit+0xb4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <prvHeapInit+0xb4>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <prvHeapInit+0xb8>)
 8006992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <prvHeapInit+0xbc>)
 800699a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <prvHeapInit+0xc0>)
 800699e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20001288 	.word	0x20001288
 80069b4:	20003288 	.word	0x20003288
 80069b8:	20003290 	.word	0x20003290
 80069bc:	20003298 	.word	0x20003298
 80069c0:	20003294 	.word	0x20003294
 80069c4:	2000329c 	.word	0x2000329c

080069c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069d0:	4b28      	ldr	r3, [pc, #160]	; (8006a74 <prvInsertBlockIntoFreeList+0xac>)
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e002      	b.n	80069dc <prvInsertBlockIntoFreeList+0x14>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d8f7      	bhi.n	80069d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d108      	bne.n	8006a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d118      	bne.n	8006a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d00d      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e008      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a46:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e003      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d002      	beq.n	8006a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20003288 	.word	0x20003288
 8006a78:	20003290 	.word	0x20003290

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4e0d      	ldr	r6, [pc, #52]	; (8006ab4 <__libc_init_array+0x38>)
 8006a80:	4c0d      	ldr	r4, [pc, #52]	; (8006ab8 <__libc_init_array+0x3c>)
 8006a82:	1ba4      	subs	r4, r4, r6
 8006a84:	10a4      	asrs	r4, r4, #2
 8006a86:	2500      	movs	r5, #0
 8006a88:	42a5      	cmp	r5, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	4e0b      	ldr	r6, [pc, #44]	; (8006abc <__libc_init_array+0x40>)
 8006a8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ac0 <__libc_init_array+0x44>)
 8006a90:	f000 f82c 	bl	8006aec <_init>
 8006a94:	1ba4      	subs	r4, r4, r6
 8006a96:	10a4      	asrs	r4, r4, #2
 8006a98:	2500      	movs	r5, #0
 8006a9a:	42a5      	cmp	r5, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aa4:	4798      	blx	r3
 8006aa6:	3501      	adds	r5, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aae:	4798      	blx	r3
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08006c44 	.word	0x08006c44
 8006ab8:	08006c44 	.word	0x08006c44
 8006abc:	08006c44 	.word	0x08006c44
 8006ac0:	08006c4c 	.word	0x08006c4c

08006ac4 <memcpy>:
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	1e43      	subs	r3, r0, #1
 8006ac8:	440a      	add	r2, r1
 8006aca:	4291      	cmp	r1, r2
 8006acc:	d100      	bne.n	8006ad0 <memcpy+0xc>
 8006ace:	bd10      	pop	{r4, pc}
 8006ad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ad8:	e7f7      	b.n	8006aca <memcpy+0x6>

08006ada <memset>:
 8006ada:	4402      	add	r2, r0
 8006adc:	4603      	mov	r3, r0
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d100      	bne.n	8006ae4 <memset+0xa>
 8006ae2:	4770      	bx	lr
 8006ae4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae8:	e7f9      	b.n	8006ade <memset+0x4>
	...

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
