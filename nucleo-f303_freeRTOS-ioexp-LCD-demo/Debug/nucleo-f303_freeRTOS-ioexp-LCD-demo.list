
nucleo-f303_freeRTOS-ioexp-LCD-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010860  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08010a00  08010a00  00020a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f28  08010f28  000301ec  2**0
                  CONTENTS
  4 .ARM          00000000  08010f28  08010f28  000301ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010f28  08010f28  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010f28  08010f28  00020f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08010f30  08010f30  00020f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08010f38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d34  200001ec  08011124  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00008400  20003f20  08011124  00033f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a990  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e25  00000000  00000000  0005abac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d68  00000000  00000000  0005f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b90  00000000  00000000  00061740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a6e3  00000000  00000000  000632d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019883  00000000  00000000  0006d9b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfb49  00000000  00000000  00087236  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156d7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094e8  00000000  00000000  00156dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080109e8 	.word	0x080109e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080109e8 	.word	0x080109e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_ZN6sx15095ioexp10getEXTIPinEv>:
	void clearPort(uint16_t portMask);
	uint16_t getPort();
	void setBit(uint8_t bitIndex);
	void clearBit(uint8_t bitIndex);
	bool getBit(uint8_t bitIndex);
	uint16_t getEXTIPin() { return intPin; };
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	8b1b      	ldrh	r3, [r3, #24]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_ZN6sx15095DelayEm>:

#ifdef USING_FREERTOS



void Delay( uint32_t ms ) { vTaskDelay(ms / portTICK_PERIOD_MS); }
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f008 fe3f 	bl	8009954 <vTaskDelay>
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE>:

TaskHandle_t ioexp::hHandler;
std::vector<ioexp *> ioexp::expanders;


ioexp::ioexp(I2C_HandleTypeDef *hI2C, uint8_t i2cAddr, GPIO_TypeDef *reset_Port, uint16_t reset_Pin, GPIO_TypeDef *int_Port, uint16_t int_Pin, initMode_t mode) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af04      	add	r7, sp, #16
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	4613      	mov	r3, r2
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xdc>)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	601a      	str	r2, [r3, #0]

	hi2c = hI2C;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	605a      	str	r2, [r3, #4]
	i2caddr = i2cAddr;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	721a      	strb	r2, [r3, #8]
	resetPort = reset_Port;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	60da      	str	r2, [r3, #12]
	resetPin = reset_Pin;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	8c3a      	ldrh	r2, [r7, #32]
 8000d0c:	821a      	strh	r2, [r3, #16]
	intPort = int_Port;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d12:	615a      	str	r2, [r3, #20]
	intPin = int_Pin;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d18:	831a      	strh	r2, [r3, #24]
	portData = 0;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	835a      	strh	r2, [r3, #26]

	// resetoidaan piiri
	HAL_GPIO_WritePin(resetPort, resetPin, GPIO_PIN_RESET);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	68d8      	ldr	r0, [r3, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8a1b      	ldrh	r3, [r3, #16]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f004 fa90 	bl	8005250 <HAL_GPIO_WritePin>
	Delay(2);
 8000d30:	2002      	movs	r0, #2
 8000d32:	f7ff ffc9 	bl	8000cc8 <_ZN6sx15095DelayEm>
	HAL_GPIO_WritePin(resetPort, resetPin, GPIO_PIN_SET);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	68d8      	ldr	r0, [r3, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	8a1b      	ldrh	r3, [r3, #16]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	f004 fa85 	bl	8005250 <HAL_GPIO_WritePin>

	// asetetaan kaikki pinnit tuloiksi
	writeRegister( RegDirA, 0xff );
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	210f      	movs	r1, #15
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 f982 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
	writeRegister( RegDirB, 0xff );
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	210e      	movs	r1, #14
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 f97d 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>

	if ( expanders.empty() ) {
 8000d5a:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xe0>)
 8000d5c:	f000 fa09 	bl	8001172 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE5emptyEv>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d01d      	beq.n	8000da2 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xc2>
		hEXTISync = xSemaphoreCreateBinaryStatic( &EXTISyncBuffer );
 8000d66:	2303      	movs	r3, #3
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xe4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2001      	movs	r0, #1
 8000d72:	f007 fed7 	bl	8008b24 <xQueueGenericCreateStatic>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xe8>)
 8000d7a:	601a      	str	r2, [r3, #0]
		hEXTI = xTaskCreateStatic( extiHandler, "EXTI", EXTI_STACKSIZE, NULL, tskIDLE_PRIORITY+3, extiStack, &extiTCB );
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xec>)
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xf0>)
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	2303      	movs	r3, #3
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	4911      	ldr	r1, [pc, #68]	; (8000dd4 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xf4>)
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xf8>)
 8000d90:	f008 fc90 	bl	80096b4 <xTaskCreateStatic>
 8000d94:	4602      	mov	r2, r0
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xfc>)
 8000d98:	601a      	str	r2, [r3, #0]
		hHandler = hEXTI;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xfc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x100>)
 8000da0:	6013      	str	r3, [r2, #0]
	}
	expanders.push_back(this);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xe0>)
 8000dae:	f000 fa06 	bl	80011be <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE9push_backEOS2_>

}
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	08010ae0 	.word	0x08010ae0
 8000dc0:	200004c0 	.word	0x200004c0
 8000dc4:	20000208 	.word	0x20000208
 8000dc8:	20000258 	.word	0x20000258
 8000dcc:	2000045c 	.word	0x2000045c
 8000dd0:	2000025c 	.word	0x2000025c
 8000dd4:	08010a00 	.word	0x08010a00
 8000dd8:	080010c9 	.word	0x080010c9
 8000ddc:	200004b8 	.word	0x200004b8
 8000de0:	200004bc 	.word	0x200004bc

08000de4 <_ZN6sx15095ioexpD1Ev>:

ioexp::~ioexp() {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <_ZN6sx15095ioexpD1Ev+0x1c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	08010ae0 	.word	0x08010ae0

08000e04 <_ZN6sx15095ioexpD0Ev>:
ioexp::~ioexp() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
}
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ffe9 	bl	8000de4 <_ZN6sx15095ioexpD1Ev>
 8000e12:	211c      	movs	r1, #28
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f00a fb19 	bl	800b44c <_ZdlPvj>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_ZN6sx15095ioexp20configPushPullOutputEt>:

void ioexp::configPushPullOutput(uint16_t portMask) {
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = ( readRegister( RegDirB ) << 8 ) | readRegister( RegDirA );
 8000e30:	210e      	movs	r1, #14
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f92b 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b21c      	sxth	r4, r3
 8000e3e:	210f      	movs	r1, #15
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f924 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4323      	orrs	r3, r4
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	81fb      	strh	r3, [r7, #14]
	writeRegister( RegDirA, (~portMask & tmp) | 0xff00 );
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	b25a      	sxtb	r2, r3
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	210f      	movs	r1, #15
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 f8f4 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
	writeRegister( RegDirB, ((~portMask & tmp) >> 8) | 0xff00 );
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	89fb      	ldrh	r3, [r7, #14]
 8000e72:	4013      	ands	r3, r2
 8000e74:	121b      	asrs	r3, r3, #8
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	210e      	movs	r1, #14
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f8e9 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
	tmp = ( readRegister( RegOpenDrainB ) << 8 ) | readRegister( RegOpenDrainA );
 8000e82:	210a      	movs	r1, #10
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f902 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21c      	sxth	r4, r3
 8000e90:	210b      	movs	r1, #11
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f8fb 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	81fb      	strh	r3, [r7, #14]
	writeRegister( RegOpenDrainA, (~portMask & tmp) | 0xff00 );
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	b25a      	sxtb	r2, r3
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	4013      	ands	r3, r2
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	210b      	movs	r1, #11
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f8cb 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
	writeRegister( RegOpenDrainB, ((~portMask & tmp) >> 8) | 0xff00 );
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	121b      	asrs	r3, r3, #8
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	210a      	movs	r1, #10
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f8c0 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}

08000edc <_ZN6sx15095ioexp10writePortAEh>:
// Asetetaan I/O-pinnit joiden maskibitti on '1'. Muut pinnit pysyvät ennallaan.
void ioexp::setPort(uint16_t portMask) {
	writeRegister( RegDataA, ( ( portMask & 0x00ff ) | readRegister( RegDataA ) ) );
	writeRegister( RegDataB, ( ( ( portMask>>8 ) & 0x00ff ) | readRegister( RegDataB ) ) );
}
void ioexp::writePortA(uint8_t portVal) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
	writeRegister( RegDataA, portVal);
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	461a      	mov	r2, r3
 8000eec:	2111      	movs	r1, #17
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f8b0 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_ZN6sx15095ioexp7getPortEv>:
	writeRegister( RegDataB, ( ~( ( portMask >> 8 ) & 0x00ff ) & readRegister( RegDataB ) ) );

}

// palauttaa I/O-pinnien tilan
uint16_t ioexp::getPort() {
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	portData = ( readRegister( RegDataB ) << 8 ) | readRegister( RegDataA );
 8000f04:	2110      	movs	r1, #16
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f8c1 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21c      	sxth	r4, r3
 8000f12:	2111      	movs	r1, #17
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f8ba 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	835a      	strh	r2, [r3, #26]
	return portData;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	8b5b      	ldrh	r3, [r3, #26]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd90      	pop	{r4, r7, pc}

08000f34 <_ZN6sx15095ioexp6setBitEh>:

// asettaa indeksin osoittaman bitin
void ioexp::setBit(uint8_t bitIndex) {
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
	assert ( bitIndex < 16 );
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d905      	bls.n	8000f52 <_ZN6sx15095ioexp6setBitEh+0x1e>
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <_ZN6sx15095ioexp6setBitEh+0x80>)
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <_ZN6sx15095ioexp6setBitEh+0x84>)
 8000f4a:	2196      	movs	r1, #150	; 0x96
 8000f4c:	481b      	ldr	r0, [pc, #108]	; (8000fbc <_ZN6sx15095ioexp6setBitEh+0x88>)
 8000f4e:	f00b fae3 	bl	800c518 <__assert_func>
	if (bitIndex < 8) writeRegister( RegDataA, 1<<bitIndex | readRegister( RegDataA ) );
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	2b07      	cmp	r3, #7
 8000f56:	d813      	bhi.n	8000f80 <_ZN6sx15095ioexp6setBitEh+0x4c>
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	b25c      	sxtb	r4, r3
 8000f62:	2111      	movs	r1, #17
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f892 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4323      	orrs	r3, r4
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	2111      	movs	r1, #17
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f86b 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
	else writeRegister( RegDataB, 1<<bitIndex / 2 | readRegister( RegDataB ) );
}
 8000f7e:	e014      	b.n	8000faa <_ZN6sx15095ioexp6setBitEh+0x76>
	else writeRegister( RegDataB, 1<<bitIndex / 2 | readRegister( RegDataB ) );
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	b25c      	sxtb	r4, r3
 8000f8e:	2110      	movs	r1, #16
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f87c 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f855 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08010a08 	.word	0x08010a08
 8000fb8:	08010ae8 	.word	0x08010ae8
 8000fbc:	08010a18 	.word	0x08010a18

08000fc0 <_ZN6sx15095ioexp8clearBitEh>:


void ioexp::clearBit(uint8_t bitIndex) {
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	assert ( bitIndex < 16 );
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	d905      	bls.n	8000fde <_ZN6sx15095ioexp8clearBitEh+0x1e>
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <_ZN6sx15095ioexp8clearBitEh+0x88>)
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <_ZN6sx15095ioexp8clearBitEh+0x8c>)
 8000fd6:	219d      	movs	r1, #157	; 0x9d
 8000fd8:	481d      	ldr	r0, [pc, #116]	; (8001050 <_ZN6sx15095ioexp8clearBitEh+0x90>)
 8000fda:	f00b fa9d 	bl	800c518 <__assert_func>
	if (bitIndex < 8) writeRegister( RegDataA, ~( 1 << bitIndex ) & readRegister( RegDataA ) );
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d815      	bhi.n	8001010 <_ZN6sx15095ioexp8clearBitEh+0x50>
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	b25c      	sxtb	r4, r3
 8000ff2:	2111      	movs	r1, #17
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f84a 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	4023      	ands	r3, r4
 8001000:	b25b      	sxtb	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	2111      	movs	r1, #17
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f823 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
	else writeRegister( RegDataB, ~( 1 << bitIndex / 2 ) & readRegister( RegDataB ) );

}
 800100e:	e016      	b.n	800103e <_ZN6sx15095ioexp8clearBitEh+0x7e>
	else writeRegister( RegDataB, ~( 1 << bitIndex / 2 ) & readRegister( RegDataB ) );
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	085b      	lsrs	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	2301      	movs	r3, #1
 800101a:	4093      	lsls	r3, r2
 800101c:	b25b      	sxtb	r3, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	b25c      	sxtb	r4, r3
 8001022:	2110      	movs	r1, #16
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f832 	bl	800108e <_ZN6sx15095ioexp12readRegisterEh>
 800102a:	4603      	mov	r3, r0
 800102c:	b25b      	sxtb	r3, r3
 800102e:	4023      	ands	r3, r4
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	2110      	movs	r1, #16
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f80b 	bl	8001054 <_ZN6sx15095ioexp13writeRegisterEhh>
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	bf00      	nop
 8001048:	08010a08 	.word	0x08010a08
 800104c:	08010b0c 	.word	0x08010b0c
 8001050:	08010a18 	.word	0x08010a18

08001054 <_ZN6sx15095ioexp13writeRegisterEhh>:
	assert ( bitIndex < 16 );
	if (bitIndex < 8) return ( readRegister( RegDataA ) & ( 1 << bitIndex ) ) > 0 ;
	else return ( readRegister( RegDataB ) & ( 1 << ( bitIndex / 2 ) ) ) > 0 ;
}

void ioexp::writeRegister(uint8_t reg, uint8_t regData) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af04      	add	r7, sp, #16
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
 8001060:	4613      	mov	r3, r2
 8001062:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(hi2c, i2caddr, reg, sizeof(uint8_t), &regData, sizeof(regData), 0xffffffff );
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6858      	ldr	r0, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7a1b      	ldrb	r3, [r3, #8]
 800106c:	b299      	uxth	r1, r3
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	b29a      	uxth	r2, r3
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2301      	movs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	1cbb      	adds	r3, r7, #2
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	f004 f98d 	bl	80053a0 <HAL_I2C_Mem_Write>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZN6sx15095ioexp12readRegisterEh>:

uint8_t ioexp::readRegister(uint8_t reg) {
 800108e:	b580      	push	{r7, lr}
 8001090:	b088      	sub	sp, #32
 8001092:	af04      	add	r7, sp, #16
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	HAL_I2C_Mem_Read(hi2c, i2caddr, reg, sizeof(uint8_t), &regData, sizeof(regData), 0xffffffff );
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6858      	ldr	r0, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7a1b      	ldrb	r3, [r3, #8]
 80010a2:	b299      	uxth	r1, r3
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	f107 030f 	add.w	r3, r7, #15
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	f004 fa85 	bl	80055c8 <HAL_I2C_Mem_Read>
	return regData;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_ZN6sx150911extiHandlerEPv>:


// Exti-keskeytyksen käsittely taskitasolla.
// Tätä ei tehdä keskeytyshandlerissa koska i2c-väylän käsittely,
// ja kestää muutenkin turhan kauan ajettavaksi keskeytyskontekstissa
void extiHandler( void *pvParameters) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	ioexp *pIOE;
	for ( ;;) {
		if ( xSemaphoreTake( hEXTISync, portMAX_DELAY ) == pdTRUE ) {
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <_ZN6sx150911extiHandlerEPv+0x88>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	4618      	mov	r0, r3
 80010da:	f008 f85f 	bl	800919c <xQueueSemaphoreTake>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <_ZN6sx150911extiHandlerEPv+0x8>
			for ( std::vector<ioexp *>::iterator it = ioexp::expanders.begin() ; it != ioexp::expanders.end(); ++it) {
 80010ee:	4819      	ldr	r0, [pc, #100]	; (8001154 <_ZN6sx150911extiHandlerEPv+0x8c>)
 80010f0:	f000 f876 	bl	80011e0 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>
 80010f4:	4603      	mov	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4816      	ldr	r0, [pc, #88]	; (8001154 <_ZN6sx150911extiHandlerEPv+0x8c>)
 80010fa:	f000 f881 	bl	8001200 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>
 80010fe:	4603      	mov	r3, r0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	f107 0210 	add.w	r2, r7, #16
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f888 	bl	8001222 <_ZN9__gnu_cxxneIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0db      	beq.n	80010d0 <_ZN6sx150911extiHandlerEPv+0x8>
				pIOE = *it;
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f8a8 	bl	8001272 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEdeEv>
 8001122:	4603      	mov	r3, r0
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	617b      	str	r3, [r7, #20]
				if ( pIOE->getEXTIPin() == GPIO_PIN_1 ) pIOE->getPort();
 8001128:	6978      	ldr	r0, [r7, #20]
 800112a:	f7ff fdc1 	bl	8000cb0 <_ZN6sx15095ioexp10getEXTIPinEv>
 800112e:	4603      	mov	r3, r0
 8001130:	2b02      	cmp	r3, #2
 8001132:	bf0c      	ite	eq
 8001134:	2301      	moveq	r3, #1
 8001136:	2300      	movne	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <_ZN6sx150911extiHandlerEPv+0x7c>
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff fedc 	bl	8000efc <_ZN6sx15095ioexp7getPortEv>
			for ( std::vector<ioexp *>::iterator it = ioexp::expanders.begin() ; it != ioexp::expanders.end(); ++it) {
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f882 	bl	8001252 <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEppEv>
 800114e:	e7d3      	b.n	80010f8 <_ZN6sx150911extiHandlerEPv+0x30>
 8001150:	20000258 	.word	0x20000258
 8001154:	200004c0 	.word	0x200004c0

08001158 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f89d 	bl	80012a2 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EEC1Ev>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      bool
      empty() const _GLIBCXX_NOEXCEPT
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f8b8 	bl	80012f0 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>
 8001180:	4603      	mov	r3, r0
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f8c7 	bl	8001318 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>
 800118a:	4603      	mov	r3, r0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	f107 020c 	add.w	r2, r7, #12
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f8d1 	bl	8001340 <_ZN9__gnu_cxxeqIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800119e:	4603      	mov	r3, r0
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZSt4moveIRPN6sx15095ioexpEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE9push_backEOS2_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f7ff ffed 	bl	80011a8 <_ZSt4moveIRPN6sx15095ioexpEEONSt16remove_referenceIT_E4typeEOS5_>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4619      	mov	r1, r3
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f8d7 	bl	8001386 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE12emplace_backIJS2_EEEvDpOT_>
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f8f6 	bl	80013e2 <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1d1a      	adds	r2, r3, #4
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f8e5 	bl	80013e2 <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZN9__gnu_cxxneIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001222:	b590      	push	{r4, r7, lr}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f8e8 	bl	8001402 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8001232:	4603      	mov	r3, r0
 8001234:	681c      	ldr	r4, [r3, #0]
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f000 f8e3 	bl	8001402 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 800123c:	4603      	mov	r3, r0
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429c      	cmp	r4, r3
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}

08001252 <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	++_M_current;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1d1a      	adds	r2, r3, #4
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	601a      	str	r2, [r3, #0]
	return *this;
 8001264:	687b      	ldr	r3, [r7, #4]
      }
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f8d5 	bl	8001442 <_ZNSaIPN6sx15095ioexpEED1Ev>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EEC1Ev>:
      _Vector_base()
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f8b3 	bl	8001418 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE12_Vector_implC1Ev>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80012d6:	461a      	mov	r2, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f8be 	bl	800145a <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ffd2 	bl	800128a <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE12_Vector_implD1Ev>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	f107 020c 	add.w	r2, r7, #12
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f8b9 	bl	8001480 <_ZN9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	f107 020c 	add.w	r2, r7, #12
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f8a5 	bl	8001480 <_ZN9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZN9__gnu_cxxeqIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f8a8 	bl	80014a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8001350:	4603      	mov	r3, r0
 8001352:	681c      	ldr	r4, [r3, #0]
 8001354:	6838      	ldr	r0, [r7, #0]
 8001356:	f000 f8a3 	bl	80014a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 800135a:	4603      	mov	r3, r0
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	429c      	cmp	r4, r3
 8001360:	bf0c      	ite	eq
 8001362:	2301      	moveq	r3, #1
 8001364:	2300      	movne	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE12emplace_backIJS2_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8001386:	b5b0      	push	{r4, r5, r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	429a      	cmp	r2, r3
 800139a:	d011      	beq.n	80013c0 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE12emplace_backIJS2_EEEvDpOT_+0x3a>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800139c:	687c      	ldr	r4, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685d      	ldr	r5, [r3, #4]
 80013a2:	6838      	ldr	r0, [r7, #0]
 80013a4:	f7ff ffe4 	bl	8001370 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4629      	mov	r1, r5
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 f881 	bl	80014b6 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	1d1a      	adds	r2, r3, #4
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80013be:	e00c      	b.n	80013da <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE12emplace_backIJS2_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff1d 	bl	8001200 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>
 80013c6:	4604      	mov	r4, r0
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f7ff ffd1 	bl	8001370 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4621      	mov	r1, r4
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f881 	bl	80014dc <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bdb0      	pop	{r4, r5, r7, pc}

080013e2 <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f8e7 	bl	80015f4 <_ZNSaIPN6sx15095ioexpEEC1Ev>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
	{ }
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZNSaIPN6sx15095ioexpEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f8de 	bl	800160c <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEED1Ev>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
	if (__p)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f8d5 	bl	8001622 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE10deallocateERS3_PS2_j>
      }
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff54 	bl	8001370 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 f8b6 	bl	8001640 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE9constructIS3_JS3_EEEvPT_DpOT0_>
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80014e8:	4a41      	ldr	r2, [pc, #260]	; (80015f0 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x114>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f8bf 	bl	8001670 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc>
 80014f2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7ff fe73 	bl	80011e0 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	f107 0214 	add.w	r2, r7, #20
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f8f9 	bl	8001700 <_ZN9__gnu_cxxmiIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800150e:	4603      	mov	r3, r0
 8001510:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f908 	bl	800172c <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE11_M_allocateEj>
 800151c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001522:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	18d5      	adds	r5, r2, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff1f 	bl	8001370 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4629      	mov	r1, r5
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff ffbc 	bl	80014b6 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681c      	ldr	r4, [r3, #0]
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff59 	bl	8001402 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8001550:	4603      	mov	r3, r0
 8001552:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f8fc 	bl	8001754 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 800155c:	4603      	mov	r3, r0
	  __new_finish
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	4629      	mov	r1, r5
 8001562:	4620      	mov	r0, r4
 8001564:	f000 f901 	bl	800176a <_ZSt34__uninitialized_move_if_noexcept_aIPPN6sx15095ioexpES3_SaIS2_EET0_T_S6_S5_RT1_>
 8001568:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	3304      	adds	r3, #4
 800156e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff44 	bl	8001402 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 800157a:	4603      	mov	r3, r0
 800157c:	681c      	ldr	r4, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 f8e5 	bl	8001754 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 800158a:	4603      	mov	r3, r0
	  __new_finish
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4629      	mov	r1, r5
 8001590:	4620      	mov	r0, r4
 8001592:	f000 f8ea 	bl	800176a <_ZSt34__uninitialized_move_if_noexcept_aIPPN6sx15095ioexpES3_SaIS2_EET0_T_S6_S5_RT1_>
 8001596:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681c      	ldr	r4, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f8d6 	bl	8001754 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 80015a8:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f000 f8f4 	bl	800179c <_ZSt8_DestroyIPPN6sx15095ioexpES2_EvT_S4_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80015c8:	461a      	mov	r2, r3
 80015ca:	f7ff ff46 	bl	800145a <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	441a      	add	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	609a      	str	r2, [r3, #8]
    }
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	08010a30 	.word	0x08010a30

080015f4 <_ZNSaIPN6sx15095ioexpEEC1Ev>:
      allocator() throw() { }
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f8db 	bl	80017b8 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEEC1Ev>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f8cb 	bl	80017ce <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE10deallocateEPS3_j>
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE9constructIS3_JS3_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fe8f 	bl	8001370 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001652:	4603      	mov	r3, r0
 8001654:	681c      	ldr	r4, [r3, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4619      	mov	r1, r3
 800165a:	2004      	movs	r0, #4
 800165c:	f7ff fb1c 	bl	8000c98 <_ZnwjPv>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d000      	beq.n	8001668 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE9constructIS3_JS3_EEEvPT_DpOT0_+0x28>
 8001666:	601c      	str	r4, [r3, #0]
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}

08001670 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f8b3 	bl	80017e8 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE8max_sizeEv>
 8001682:	4604      	mov	r4, r0
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f8c0 	bl	800180a <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>
 800168a:	4603      	mov	r3, r0
 800168c:	1ae2      	subs	r2, r4, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	429a      	cmp	r2, r3
 8001692:	bf34      	ite	cc
 8001694:	2301      	movcc	r3, #1
 8001696:	2300      	movcs	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f009 fed8 	bl	800b456 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f8af 	bl	800180a <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>
 80016ac:	4604      	mov	r4, r0
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f8ab 	bl	800180a <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>
 80016b4:	4603      	mov	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	f107 0208 	add.w	r2, r7, #8
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f8b2 	bl	800182c <_ZSt3maxIjERKT_S2_S2_>
 80016c8:	4603      	mov	r3, r0
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4423      	add	r3, r4
 80016ce:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 f89a 	bl	800180a <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4293      	cmp	r3, r2
 80016dc:	d306      	bcc.n	80016ec <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc+0x7c>
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f882 	bl	80017e8 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE8max_sizeEv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d904      	bls.n	80016f6 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc+0x86>
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f87b 	bl	80017e8 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE8max_sizeEv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	e000      	b.n	80016f8 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc+0x88>
 80016f6:	697b      	ldr	r3, [r7, #20]
      }
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}

08001700 <_ZN9__gnu_cxxmiIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fe79 	bl	8001402 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8001710:	4603      	mov	r3, r0
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	461c      	mov	r4, r3
 8001716:	6838      	ldr	r0, [r7, #0]
 8001718:	f7ff fe73 	bl	8001402 <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 800171c:	4603      	mov	r3, r0
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1ae3      	subs	r3, r4, r3
 8001722:	109b      	asrs	r3, r3, #2
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}

0800172c <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE11_M_allocateEj+0x1e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f000 f887 	bl	8001854 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE8allocateERS3_j>
 8001746:	4603      	mov	r3, r0
 8001748:	e000      	b.n	800174c <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE11_M_allocateEj+0x20>
 800174a:	2300      	movs	r3, #0
      }
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_ZSt34__uninitialized_move_if_noexcept_aIPPN6sx15095ioexpES3_SaIS2_EET0_T_S6_S5_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800176a:	b590      	push	{r4, r7, lr}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 f87a 	bl	8001872 <_ZSt32__make_move_if_noexcept_iteratorIPN6sx15095ioexpESt13move_iteratorIPS2_EET0_PT_>
 800177e:	4604      	mov	r4, r0
 8001780:	68b8      	ldr	r0, [r7, #8]
 8001782:	f000 f876 	bl	8001872 <_ZSt32__make_move_if_noexcept_iteratorIPN6sx15095ioexpESt13move_iteratorIPS2_EET0_PT_>
 8001786:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4620      	mov	r0, r4
 800178e:	f000 f87f 	bl	8001890 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN6sx15095ioexpEES4_S3_ET0_T_S7_S6_RSaIT1_E>
 8001792:	4603      	mov	r3, r0
    }
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}

0800179c <_ZSt8_DestroyIPPN6sx15095ioexpES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f881 	bl	80018b2 <_ZSt8_DestroyIPPN6sx15095ioexpEEvT_S4_>
    }
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80017da:	68b8      	ldr	r0, [r7, #8]
 80017dc:	f000 fbd8 	bl	8001f90 <_ZdlPv>
      }
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f876 	bl	80018e4 <_ZNKSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f866 	bl	80018cc <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE8max_sizeERKS3_>
 8001800:	4603      	mov	r3, r0
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	109b      	asrs	r3, r3, #2
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d201      	bcs.n	8001846 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	e000      	b.n	8001848 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001846:	687b      	ldr	r3, [r7, #4]
    }
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800185e:	2200      	movs	r2, #0
 8001860:	6839      	ldr	r1, [r7, #0]
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f849 	bl	80018fa <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8allocateEjPKv>
 8001868:	4603      	mov	r3, r0
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZSt32__make_move_if_noexcept_iteratorIPN6sx15095ioexpESt13move_iteratorIPS2_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f858 	bl	8001936 <_ZNSt13move_iteratorIPPN6sx15095ioexpEEC1ES3_>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN6sx15095ioexpEES4_S3_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f856 	bl	8001954 <_ZSt18uninitialized_copyISt13move_iteratorIPPN6sx15095ioexpEES4_ET0_T_S7_S6_>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_ZSt8_DestroyIPPN6sx15095ioexpEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f85a 	bl	8001978 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN6sx15095ioexpEEEvT_S6_>
    }
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f85a 	bl	800198e <_ZNK9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8max_sizeEv>
 80018da:	4603      	mov	r3, r0
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZNKSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f841 	bl	800198e <_ZNK9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8max_sizeEv>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	4293      	cmp	r3, r2
 8001912:	bf8c      	ite	hi
 8001914:	2301      	movhi	r3, #1
 8001916:	2300      	movls	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800191e:	f009 fd97 	bl	800b450 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fb26 	bl	8001f78 <_Znwj>
 800192c:	4603      	mov	r3, r0
      }
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZNSt13move_iteratorIPPN6sx15095ioexpEEC1ES3_>:
      move_iterator(iterator_type __i)
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZSt18uninitialized_copyISt13move_iteratorIPPN6sx15095ioexpEES4_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001960:	2301      	movs	r3, #1
 8001962:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f81c 	bl	80019a6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN6sx15095ioexpEES6_EET0_T_S9_S8_>
 800196e:	4603      	mov	r3, r0
    }
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN6sx15095ioexpEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_ZNK9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8001996:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN6sx15095ioexpEES6_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f805 	bl	80019c6 <_ZSt4copyISt13move_iteratorIPPN6sx15095ioexpEES4_ET0_T_S7_S6_>
 80019bc:	4603      	mov	r3, r0
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_ZSt4copyISt13move_iteratorIPPN6sx15095ioexpEES4_ET0_T_S7_S6_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80019c6:	b590      	push	{r4, r7, lr}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f80f 	bl	80019f6 <_ZSt12__miter_baseIPPN6sx15095ioexpEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80019d8:	4604      	mov	r4, r0
 80019da:	68b8      	ldr	r0, [r7, #8]
 80019dc:	f000 f80b 	bl	80019f6 <_ZSt12__miter_baseIPPN6sx15095ioexpEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80019e0:	4603      	mov	r3, r0
	       __result));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4620      	mov	r0, r4
 80019e8:	f000 f816 	bl	8001a18 <_ZSt14__copy_move_a2ILb1EPPN6sx15095ioexpES3_ET1_T0_S5_S4_>
 80019ec:	4603      	mov	r3, r0
    }
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}

080019f6 <_ZSt12__miter_baseIPPN6sx15095ioexpEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f825 	bl	8001a50 <_ZNKSt13move_iteratorIPPN6sx15095ioexpEE4baseEv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f82d 	bl	8001a68 <_ZSt12__miter_baseIPPN6sx15095ioexpEET_S4_>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_ZSt14__copy_move_a2ILb1EPPN6sx15095ioexpES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f82a 	bl	8001a7e <_ZSt12__niter_baseIPPN6sx15095ioexpEET_S4_>
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f000 f826 	bl	8001a7e <_ZSt12__niter_baseIPPN6sx15095ioexpEET_S4_>
 8001a32:	4605      	mov	r5, r0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f822 	bl	8001a7e <_ZSt12__niter_baseIPPN6sx15095ioexpEET_S4_>
 8001a3a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4629      	mov	r1, r5
 8001a40:	4620      	mov	r0, r4
 8001a42:	f000 f827 	bl	8001a94 <_ZSt13__copy_move_aILb1EPPN6sx15095ioexpES3_ET1_T0_S5_S4_>
 8001a46:	4603      	mov	r3, r0
    }
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bdb0      	pop	{r4, r5, r7, pc}

08001a50 <_ZNKSt13move_iteratorIPPN6sx15095ioexpEE4baseEv>:
      base() const
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_ZSt12__miter_baseIPPN6sx15095ioexpEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_ZSt12__niter_baseIPPN6sx15095ioexpEET_S4_>:
    __niter_base(_Iterator __it)
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_ZSt13__copy_move_aILb1EPPN6sx15095ioexpES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f805 	bl	8001ab8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6sx15095ioexpEEEPT_PKS6_S9_S7_>
 8001aae:	4603      	mov	r3, r0
    }
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6sx15095ioexpEEEPT_PKS6_S9_S7_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	109b      	asrs	r3, r3, #2
 8001acc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6sx15095ioexpEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f00a fd80 	bl	800c5e2 <memmove>
	  return __result + _Num;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
	}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <_Z41__static_initialization_and_destruction_0ii>:
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
		}
	}
}

} /* namespace sx1509 */
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d102      	bne.n	8001b14 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<ioexp *> ioexp::expanders;
 8001b0e:	4809      	ldr	r0, [pc, #36]	; (8001b34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001b10:	f7ff fb22 	bl	8001158 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EEC1Ev>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d107      	bne.n	8001b2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d102      	bne.n	8001b2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001b26:	f000 f807 	bl	8001b38 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EED1Ev>
} /* namespace sx1509 */
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200004c0 	.word	0x200004c0

08001b38 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681c      	ldr	r4, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fe02 	bl	8001754 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 8001b50:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001b52:	461a      	mov	r2, r3
 8001b54:	4629      	mov	r1, r5
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fe20 	bl	800179c <_ZSt8_DestroyIPPN6sx15095ioexpES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fbac 	bl	80012bc <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EED1Ev>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}

08001b6e <_GLOBAL__sub_I__ZN6sx150914EXTISyncBufferE>:
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff ffbc 	bl	8001af4 <_Z41__static_initialization_and_destruction_0ii>
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_GLOBAL__sub_D__ZN6sx150914EXTISyncBufferE>:
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff ffb4 	bl	8001af4 <_Z41__static_initialization_and_destruction_0ii>
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_ZN3lcd5DelayEm>:
#include "lcd.h"

namespace lcd {

#ifdef USING_FREERTOS
void Delay( uint32_t ms ) { vTaskDelay(ms / portTICK_PERIOD_MS); }
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f007 fedc 	bl	8009954 <vTaskDelay>
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_ZN3lcd3LCDC1EPN6sx15095ioexpE>:
	HAL_GPIO_WritePin(en_port, en_pin, LCD_ENABLE_OFF);
	HAL_GPIO_WritePin(rw_port, rw_pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(rs_port, rs_pin, LCD_DATA_REG);
}

LCD::LCD( ioexp *Exp ) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <_ZN3lcd3LCDC1EPN6sx15095ioexpE+0x44>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	601a      	str	r2, [r3, #0]
	mode = LCD_EXP1509_MODE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ioExp = Exp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
	ioExp->configPushPullOutput(0x07ff); //portti A (data) ja portti B 3 LSB lähdöiksi
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f92a 	bl	8000e24 <_ZN6sx15095ioexp20configPushPullOutputEt>
	ioExp->clearBit(EXP_EN);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	210b      	movs	r1, #11
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f9f2 	bl	8000fc0 <_ZN6sx15095ioexp8clearBitEh>
}
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	08010b40 	.word	0x08010b40

08001bec <_ZN3lcd3LCDD1Ev>:

LCD::~LCD() {
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <_ZN3lcd3LCDD1Ev+0x1c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	08010b40 	.word	0x08010b40

08001c0c <_ZN3lcd3LCDD0Ev>:
LCD::~LCD() {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
}
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ffe9 	bl	8001bec <_ZN3lcd3LCDD1Ev>
 8001c1a:	2128      	movs	r1, #40	; 0x28
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f009 fc15 	bl	800b44c <_ZdlPvj>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZN3lcd3LCD5beginEv>:

		write(data >> 4, LCD_NIB);
}


void LCD::begin() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	Delay(50);
 8001c34:	2032      	movs	r0, #50	; 0x32
 8001c36:	f7ff ffaa 	bl	8001b8e <_ZN3lcd5DelayEm>
	if (mode == LCD_4_BIT_MODE) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11e      	bne.n	8001c82 <_ZN3lcd3LCD5beginEv+0x56>
		write_command(0x33);
 8001c44:	2133      	movs	r1, #51	; 0x33
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f887 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
		Delay(5);
 8001c4c:	2005      	movs	r0, #5
 8001c4e:	f7ff ff9e 	bl	8001b8e <_ZN3lcd5DelayEm>
		write_command(0x32);
 8001c52:	2132      	movs	r1, #50	; 0x32
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f880 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
		Delay(5);
 8001c5a:	2005      	movs	r0, #5
 8001c5c:	f7ff ff97 	bl	8001b8e <_ZN3lcd5DelayEm>
		write_command(FUNCTION_SET | OPT_N);
 8001c60:	2128      	movs	r1, #40	; 0x28
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f879 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
		write_command(CLEAR_DISPLAY);						// Clear screen
 8001c68:	2101      	movs	r1, #1
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f875 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
		write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001c70:	210c      	movs	r1, #12
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f871 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
		write_command(ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001c78:	2102      	movs	r1, #2
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f86d 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
 8001c80:	e003      	b.n	8001c8a <_ZN3lcd3LCD5beginEv+0x5e>
	}
	else write_command(FUNCTION_SET | OPT_DL | OPT_N);
 8001c82:	2138      	movs	r1, #56	; 0x38
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f868 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
	Delay(2);
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f7ff ff7f 	bl	8001b8e <_ZN3lcd5DelayEm>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_ZN3lcd3LCD9write_intEhl>:
//	return (read_status() & 0x80) > 0;
	Delay(50);
	return false;
}

void LCD::write_int(uint8_t len, int32_t number) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	72fb      	strb	r3, [r7, #11]
	char buffer[11];
	sprintf(buffer, "%*d", len, number);
 8001ca6:	7afa      	ldrb	r2, [r7, #11]
 8001ca8:	f107 0014 	add.w	r0, r7, #20
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <_ZN3lcd3LCD9write_intEhl+0x30>)
 8001cb0:	f00b fc80 	bl	800d5b4 <siprintf>
	write_string(buffer);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f806 	bl	8001ccc <_ZN3lcd3LCD12write_stringEPc>
}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	08010a4c 	.word	0x08010a4c

08001ccc <_ZN3lcd3LCD12write_stringEPc>:

	write_string(buffer);
}


void LCD::write_string(char *string) {
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	7bfc      	ldrb	r4, [r7, #15]
 8001cdc:	6838      	ldr	r0, [r7, #0]
 8001cde:	f7fe fa7f 	bl	80001e0 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	429c      	cmp	r4, r3
 8001ce6:	d20b      	bcs.n	8001d00 <_ZN3lcd3LCD12write_stringEPc+0x34>
	{
		write_data(string[i]);
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f885 	bl	8001e02 <_ZN3lcd3LCD10write_dataEh>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	e7ec      	b.n	8001cda <_ZN3lcd3LCD12write_stringEPc+0xe>
	}
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <_ZN3lcd3LCD11move_cursorEhh>:


void LCD::move_cursor(uint8_t row, uint8_t col) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
 8001d14:	4613      	mov	r3, r2
 8001d16:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	write_command(SET_DDRAM_ADDR + ROW_20[row] + col);
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <_ZN3lcd3LCD11move_cursorEhh+0x30>)
 8001d1c:	5cd2      	ldrb	r2, [r2, r3]
 8001d1e:	78bb      	ldrb	r3, [r7, #2]
 8001d20:	4413      	add	r3, r2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3b80      	subs	r3, #128	; 0x80
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f815 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
	#endif

	#ifdef LCD16xN
	write_command(SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	08010b34 	.word	0x08010b34

08001d3c <_ZN3lcd3LCD5clearEv>:


void LCD::clear() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	write_command(CLEAR_DISPLAY);
 8001d44:	2101      	movs	r1, #1
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f807 	bl	8001d5a <_ZN3lcd3LCD13write_commandEh>
	vTaskDelay(2);
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f007 fe01 	bl	8009954 <vTaskDelay>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_ZN3lcd3LCD13write_commandEh>:



void LCD::write_command( uint8_t command ) {
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
	if ( mode == LCD_EXP1509_MODE ) {
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d11f      	bne.n	8001db0 <_ZN3lcd3LCD13write_commandEh+0x56>
		ioExp->clearBit(EXP_RS);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2109      	movs	r1, #9
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f922 	bl	8000fc0 <_ZN6sx15095ioexp8clearBitEh>
		ioExp->clearBit(EXP_RW);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	210a      	movs	r1, #10
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f91c 	bl	8000fc0 <_ZN6sx15095ioexp8clearBitEh>
		ioExp->writePortA( command );
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f8a3 	bl	8000edc <_ZN6sx15095ioexp10writePortAEh>
		ioExp->setBit(EXP_EN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	210b      	movs	r1, #11
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f8c9 	bl	8000f34 <_ZN6sx15095ioexp6setBitEh>
		ioExp->clearBit(EXP_EN);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	210b      	movs	r1, #11
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f909 	bl	8000fc0 <_ZN6sx15095ioexp8clearBitEh>
		else
		{
			write(command, LCD_BYTE);
		}
	}
}
 8001dae:	e024      	b.n	8001dfa <_ZN3lcd3LCD13write_commandEh+0xa0>
		HAL_GPIO_WritePin(rs_port, rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68d8      	ldr	r0, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	8a1b      	ldrh	r3, [r3, #16]
 8001db8:	2200      	movs	r2, #0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f003 fa48 	bl	8005250 <HAL_GPIO_WritePin>
		if(mode == LCD_4_BIT_MODE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d111      	bne.n	8001dee <_ZN3lcd3LCD13write_commandEh+0x94>
			write((command >> 4), LCD_NIB);
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	111b      	asrs	r3, r3, #4
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f868 	bl	8001eaa <_ZN3lcd3LCD5writeEhh>
			write(command & 0x0F, LCD_NIB);
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2204      	movs	r2, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f85f 	bl	8001eaa <_ZN3lcd3LCD5writeEhh>
}
 8001dec:	e005      	b.n	8001dfa <_ZN3lcd3LCD13write_commandEh+0xa0>
			write(command, LCD_BYTE);
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2208      	movs	r2, #8
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f858 	bl	8001eaa <_ZN3lcd3LCD5writeEhh>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_ZN3lcd3LCD10write_dataEh>:


void LCD::write_data(uint8_t data) {
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
	if ( mode == LCD_EXP1509_MODE ) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d11f      	bne.n	8001e58 <_ZN3lcd3LCD10write_dataEh+0x56>
		ioExp->setBit(EXP_RS);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	2109      	movs	r1, #9
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f888 	bl	8000f34 <_ZN6sx15095ioexp6setBitEh>
		ioExp->clearBit(EXP_RW);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	210a      	movs	r1, #10
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f8c8 	bl	8000fc0 <_ZN6sx15095ioexp8clearBitEh>
		ioExp->writePortA( data );
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f84f 	bl	8000edc <_ZN6sx15095ioexp10writePortAEh>
		ioExp->setBit(EXP_EN);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	210b      	movs	r1, #11
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f875 	bl	8000f34 <_ZN6sx15095ioexp6setBitEh>
		ioExp->clearBit(EXP_EN);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	210b      	movs	r1, #11
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f8b5 	bl	8000fc0 <_ZN6sx15095ioexp8clearBitEh>
		{
			write(data, LCD_BYTE);
	}
	}

}
 8001e56:	e024      	b.n	8001ea2 <_ZN3lcd3LCD10write_dataEh+0xa0>
		HAL_GPIO_WritePin(rs_port, rs_pin, LCD_DATA_REG);			// Write to data register
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68d8      	ldr	r0, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	8a1b      	ldrh	r3, [r3, #16]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4619      	mov	r1, r3
 8001e64:	f003 f9f4 	bl	8005250 <HAL_GPIO_WritePin>
		if(mode == LCD_4_BIT_MODE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d111      	bne.n	8001e96 <_ZN3lcd3LCD10write_dataEh+0x94>
			write(data >> 4, LCD_NIB);
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	111b      	asrs	r3, r3, #4
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f814 	bl	8001eaa <_ZN3lcd3LCD5writeEhh>
			write(data & 0x0F, LCD_NIB);
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f80b 	bl	8001eaa <_ZN3lcd3LCD5writeEhh>
}
 8001e94:	e005      	b.n	8001ea2 <_ZN3lcd3LCD10write_dataEh+0xa0>
			write(data, LCD_BYTE);
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f804 	bl	8001eaa <_ZN3lcd3LCD5writeEhh>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_ZN3lcd3LCD5writeEhh>:

void LCD::write(uint8_t data, uint8_t len)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70fb      	strb	r3, [r7, #3]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(rw_port, rw_pin, LCD_WRITE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6958      	ldr	r0, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8b1b      	ldrh	r3, [r3, #24]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f003 f9c3 	bl	8005250 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d21a      	bcs.n	8001f0c <_ZN3lcd3LCD5writeEhh+0x62>
	{
		HAL_GPIO_WritePin(data_port[i], data_pin[i], (GPIO_PinState)((data >> i) & 0x01));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	8819      	ldrh	r1, [r3, #0]
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	fa42 f303 	asr.w	r3, r2, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	f003 f9a6 	bl	8005250 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	3301      	adds	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	e7e0      	b.n	8001ece <_ZN3lcd3LCD5writeEhh+0x24>
	}

	Delay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff fe3e 	bl	8001b8e <_ZN3lcd5DelayEm>
	HAL_GPIO_WritePin(en_port, en_pin, LCD_ENABLE_ON);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69d8      	ldr	r0, [r3, #28]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	8c1b      	ldrh	r3, [r3, #32]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f003 f997 	bl	8005250 <HAL_GPIO_WritePin>
	Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff fe33 	bl	8001b8e <_ZN3lcd5DelayEm>
	HAL_GPIO_WritePin(en_port, en_pin, LCD_ENABLE_OFF);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69d8      	ldr	r0, [r3, #28]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8c1b      	ldrh	r3, [r3, #32]
 8001f30:	2200      	movs	r2, #0
 8001f32:	4619      	mov	r1, r3
 8001f34:	f003 f98c 	bl	8005250 <HAL_GPIO_WritePin>
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZN3lcd10LCDMessageC1EhhPc>:
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, int16_t val) {x=X; y=Y; T=i16; Len=len; v.I16=val; };
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, uint32_t val) {x=X; y=Y; T=u32; Len=len; v.U32=val; };
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, int32_t val) {x=X; y=Y; T=i32; Len=len; v.I32=val; };
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, float val) {x=X; y=Y; T=f; Len=len; v.F=val; };
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, double val) {x=X; y=Y; T=d; Len=len; v.D=val; };
	LCDMessage(uint8_t X, uint8_t Y, char *val) {x=X; y=Y; T=s; v.S=val; };
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	72fb      	strb	r3, [r7, #11]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	72bb      	strb	r3, [r7, #10]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	7afa      	ldrb	r2, [r7, #11]
 8001f56:	701a      	strb	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	7aba      	ldrb	r2, [r7, #10]
 8001f5c:	705a      	strb	r2, [r3, #1]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2208      	movs	r2, #8
 8001f62:	70da      	strb	r2, [r3, #3]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_Znwj>:
static StackType_t uiStack[UI_STACKSIZE];
static StaticTask_t uiTCB;
static TaskHandle_t hUI;

void * operator new( size_t size )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f009 f88d 	bl	800b0a0 <pvPortMalloc>
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f009 f943 	bl	800b224 <vPortFree>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_Z7reversePci>:
    vPortFree ( ptr );
}

//***** Apufunktiot joilla kierretään printf float bugi
void reverse(char* str, int len)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b087      	sub	sp, #28
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	da19      	bge.n	8001ff6 <_Z7reversePci+0x50>
        temp = str[i];
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	441a      	add	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	440b      	add	r3, r1
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]
        i++;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
        j--;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001ff4:	e7e1      	b.n	8001fba <_Z7reversePci+0x14>
    }
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <_Z8intToStriPci>:

int intToStr(int x, char str[], int d)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
    while (x) {
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01e      	beq.n	8002058 <_Z8intToStriPci+0x54>
        str[i++] = (x % 10) + '0';
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <_Z8intToStriPci+0x8c>)
 800201e:	fb83 1302 	smull	r1, r3, r3, r2
 8002022:	1099      	asrs	r1, r3, #2
 8002024:	17d3      	asrs	r3, r2, #31
 8002026:	1ac9      	subs	r1, r1, r3
 8002028:	460b      	mov	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	1ad1      	subs	r1, r2, r3
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	6179      	str	r1, [r7, #20]
 800203a:	4619      	mov	r1, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	440b      	add	r3, r1
 8002040:	3230      	adds	r2, #48	; 0x30
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4a11      	ldr	r2, [pc, #68]	; (8002090 <_Z8intToStriPci+0x8c>)
 800204a:	fb82 1203 	smull	r1, r2, r2, r3
 800204e:	1092      	asrs	r2, r2, #2
 8002050:	17db      	asrs	r3, r3, #31
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002056:	e7dd      	b.n	8002014 <_Z8intToStriPci+0x10>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	da08      	bge.n	8002072 <_Z8intToStriPci+0x6e>
        str[i++] = '0';
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	617a      	str	r2, [r7, #20]
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4413      	add	r3, r2
 800206c:	2230      	movs	r2, #48	; 0x30
 800206e:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8002070:	e7f2      	b.n	8002058 <_Z8intToStriPci+0x54>

    reverse(str, i);
 8002072:	6979      	ldr	r1, [r7, #20]
 8002074:	68b8      	ldr	r0, [r7, #8]
 8002076:	f7ff ff96 	bl	8001fa6 <_Z7reversePci>
    str[i] = '\0';
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	4413      	add	r3, r2
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
    return i;
 8002084:	697b      	ldr	r3, [r7, #20]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	66666667 	.word	0x66666667

08002094 <_Z4ftoafPci>:

void ftoa(float n, char* res, int afterpoint)
{
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	ed87 0a03 	vstr	s0, [r7, #12]
 800209e:	60b8      	str	r0, [r7, #8]
 80020a0:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80020a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020aa:	ee17 3a90 	vmov	r3, s15
 80020ae:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80020be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c2:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	69f8      	ldr	r0, [r7, #28]
 80020cc:	f7ff ff9a 	bl	8002004 <_Z8intToStriPci>
 80020d0:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d029      	beq.n	800212c <_Z4ftoafPci+0x98>
        res[i] = '.'; // add dot
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	222e      	movs	r2, #46	; 0x2e
 80020e0:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80020e2:	69b8      	ldr	r0, [r7, #24]
 80020e4:	f7fe fa38 	bl	8000558 <__aeabi_f2d>
 80020e8:	4604      	mov	r4, r0
 80020ea:	460d      	mov	r5, r1
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	200a      	movs	r0, #10
 80020f0:	f000 fd55 	bl	8002b9e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80020f4:	ec53 2b10 	vmov	r2, r3, d0
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe fa84 	bl	8000608 <__aeabi_dmul>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	4618      	mov	r0, r3
 8002106:	4621      	mov	r1, r4
 8002108:	f7fe fd76 	bl	8000bf8 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8002110:	edd7 7a06 	vldr	s15, [r7, #24]
 8002114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4413      	add	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4619      	mov	r1, r3
 8002124:	ee17 0a90 	vmov	r0, s15
 8002128:	f7ff ff6c 	bl	8002004 <_Z8intToStriPci>
    }
}
 800212c:	bf00      	nop
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bdb0      	pop	{r4, r5, r7, pc}

08002134 <_read>:
//*********

extern "C" {	// C++ ohjelmasta kutsuttaessa pitää C-kieliset kirjasto-ohjelmat kutsua eri tavalla


	int _read(int fd, char *ptr, int len) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
		if (fd == STDIN_FILENO ) {
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <_read+0x2e>
			HAL_UART_Receive(&huart2, reinterpret_cast<uint8_t *>(ptr), 1, HAL_MAX_DELAY);
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	2201      	movs	r2, #1
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <_read+0x38>)
 8002150:	f005 ff4f 	bl	8007ff2 <HAL_UART_Receive>
			HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(ptr), 1, HAL_MAX_DELAY);
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	2201      	movs	r2, #1
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <_read+0x38>)
 800215e:	f005 feb5 	bl	8007ecc <HAL_UART_Transmit>
		}
		return 1;
 8002162:	2301      	movs	r3, #1
	}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	200005e8 	.word	0x200005e8

08002170 <_write>:

	int _write(int fd, char* ptr, int len) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
		HAL_StatusTypeDef hstatus;

		if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d002      	beq.n	8002188 <_write+0x18>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d110      	bne.n	80021aa <_write+0x3a>
		hstatus = HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(ptr) , len, HAL_MAX_DELAY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	b29a      	uxth	r2, r3
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <_write+0x50>)
 8002194:	f005 fe9a 	bl	8007ecc <HAL_UART_Transmit>
 8002198:	4603      	mov	r3, r0
 800219a:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <_write+0x36>
			return len;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	e008      	b.n	80021b8 <_write+0x48>
		else
			return EIO;
 80021a6:	2305      	movs	r3, #5
 80021a8:	e006      	b.n	80021b8 <_write+0x48>
		}
		errno = EBADF;
 80021aa:	f00a f9d3 	bl	800c554 <__errno>
 80021ae:	4602      	mov	r2, r0
 80021b0:	2309      	movs	r3, #9
 80021b2:	6013      	str	r3, [r2, #0]
		return -1;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
	}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200005e8 	.word	0x200005e8

080021c4 <_Z8chMapperPv>:
QueueHandle_t hUIQ;

using namespace lcd;

// Merkistön tulostustaski
void chMapper( void *pvParameters ) {
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b08d      	sub	sp, #52	; 0x34
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	QueueHandle_t *lcdQ;
	char chBuf[21];
	lcdQ = (QueueHandle_t *)pvParameters;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
	LCDMessage *pMsg;

	for ( ;; ) {
		for ( uint8_t col = 1; col <= 0x0f; col++ ) {
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	d8f8      	bhi.n	80021d0 <_Z8chMapperPv+0xc>
			sprintf(chBuf, "%2x: ", (col<<4));
 80021de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021e2:	011a      	lsls	r2, r3, #4
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	4921      	ldr	r1, [pc, #132]	; (8002270 <_Z8chMapperPv+0xac>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f00b f9e2 	bl	800d5b4 <siprintf>
			for ( uint8_t row = 0; row <= 0x0f; row ++ ) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80021f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	d815      	bhi.n	800222a <_Z8chMapperPv+0x66>
				chBuf[row+4] = ((col<<4) + row);
 80021fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	b2d9      	uxtb	r1, r3
 8002206:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800220a:	3304      	adds	r3, #4
 800220c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002210:	440a      	add	r2, r1
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002218:	440b      	add	r3, r1
 800221a:	f803 2c20 	strb.w	r2, [r3, #-32]
			for ( uint8_t row = 0; row <= 0x0f; row ++ ) {
 800221e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002222:	3301      	adds	r3, #1
 8002224:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002228:	e7e5      	b.n	80021f6 <_Z8chMapperPv+0x32>
			}
			chBuf[20] = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			pMsg = new LCDMessage( 1, 0, chBuf );
 8002230:	2010      	movs	r0, #16
 8002232:	f7ff fea1 	bl	8001f78 <_Znwj>
 8002236:	4603      	mov	r3, r0
 8002238:	461c      	mov	r4, r3
 800223a:	f107 0310 	add.w	r3, r7, #16
 800223e:	2200      	movs	r2, #0
 8002240:	2101      	movs	r1, #1
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff fe7c 	bl	8001f40 <_ZN3lcd10LCDMessageC1EhhPc>
 8002248:	60fc      	str	r4, [r7, #12]
			xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	f107 010c 	add.w	r1, r7, #12
 8002252:	2300      	movs	r3, #0
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	f006 fd36 	bl	8008cc8 <xQueueGenericSend>
			vTaskDelay(3000);
 800225c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002260:	f007 fb78 	bl	8009954 <vTaskDelay>
		for ( uint8_t col = 1; col <= 0x0f; col++ ) {
 8002264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002268:	3301      	adds	r3, #1
 800226a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800226e:	e7b2      	b.n	80021d6 <_Z8chMapperPv+0x12>
 8002270:	08010a58 	.word	0x08010a58

08002274 <_Z11tickCounterPv>:
		}
	}
}

// Kellolaskuritaski
void tickCounter( void *pvParameters ) {
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b08b      	sub	sp, #44	; 0x2c
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	QueueHandle_t *lcdQ;
	char chBuf[21];
	lcdQ = (QueueHandle_t *)pvParameters;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
	LCDMessage *pMsg;
	sprintf(chBuf, "Tick cnt:");
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <_Z11tickCounterPv+0x94>)
 8002286:	ca07      	ldmia	r2, {r0, r1, r2}
 8002288:	c303      	stmia	r3!, {r0, r1}
 800228a:	801a      	strh	r2, [r3, #0]
	pMsg = new LCDMessage( 2, 3, chBuf );
 800228c:	2010      	movs	r0, #16
 800228e:	f7ff fe73 	bl	8001f78 <_Znwj>
 8002292:	4603      	mov	r3, r0
 8002294:	461c      	mov	r4, r3
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	2203      	movs	r2, #3
 800229c:	2102      	movs	r1, #2
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff fe4e 	bl	8001f40 <_ZN3lcd10LCDMessageC1EhhPc>
 80022a4:	60bc      	str	r4, [r7, #8]
	xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	f107 0108 	add.w	r1, r7, #8
 80022ae:	2300      	movs	r3, #0
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	f006 fd08 	bl	8008cc8 <xQueueGenericSend>
	vTaskDelay(5000);
 80022b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80022bc:	f007 fb4a 	bl	8009954 <vTaskDelay>

	for ( ;; ) {
		sprintf(chBuf, "%8d", uwTick);
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <_Z11tickCounterPv+0x98>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	4911      	ldr	r1, [pc, #68]	; (8002310 <_Z11tickCounterPv+0x9c>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00b f972 	bl	800d5b4 <siprintf>
		pMsg = new LCDMessage( 2, 12, chBuf );
 80022d0:	2010      	movs	r0, #16
 80022d2:	f7ff fe51 	bl	8001f78 <_Znwj>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461c      	mov	r4, r3
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	220c      	movs	r2, #12
 80022e0:	2102      	movs	r1, #2
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff fe2c 	bl	8001f40 <_ZN3lcd10LCDMessageC1EhhPc>
 80022e8:	60bc      	str	r4, [r7, #8]
		xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	f107 0108 	add.w	r1, r7, #8
 80022f2:	2300      	movs	r3, #0
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	f006 fce6 	bl	8008cc8 <xQueueGenericSend>
		vTaskDelay(1000);
 80022fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002300:	f007 fb28 	bl	8009954 <vTaskDelay>
		sprintf(chBuf, "%8d", uwTick);
 8002304:	e7dc      	b.n	80022c0 <_Z11tickCounterPv+0x4c>
 8002306:	bf00      	nop
 8002308:	08010a60 	.word	0x08010a60
 800230c:	20003ed8 	.word	0x20003ed8
 8002310:	08010a6c 	.word	0x08010a6c
 8002314:	00000000 	.word	0x00000000

08002318 <_Z11thermoMeterPv>:
}

// Lämpömittari
static float V25 = 1.43;			// jännite 25C lämpötilassa
static float AVG_SLOPE = 0.0043;	// mV/C
void thermoMeter( void *pvParameters ) {
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b091      	sub	sp, #68	; 0x44
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	QueueHandle_t *lcdQ;
	char chBuf[21];
	bool convDone;
	HAL_StatusTypeDef ADCStatus;
	uint32_t tempVal;
	float volts, tempFlt = 21.25;
 8002320:	4b61      	ldr	r3, [pc, #388]	; (80024a8 <_Z11thermoMeterPv+0x190>)
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
	lcdQ = (QueueHandle_t *)pvParameters;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
	LCDMessage *pMsg;
	sprintf(chBuf, "Int temp C\xdf:");
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4a5f      	ldr	r2, [pc, #380]	; (80024ac <_Z11thermoMeterPv+0x194>)
 800232e:	461c      	mov	r4, r3
 8002330:	4613      	mov	r3, r2
 8002332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002334:	c407      	stmia	r4!, {r0, r1, r2}
 8002336:	7023      	strb	r3, [r4, #0]
	pMsg = new LCDMessage( 3, 0, chBuf );
 8002338:	2010      	movs	r0, #16
 800233a:	f7ff fe1d 	bl	8001f78 <_Znwj>
 800233e:	4603      	mov	r3, r0
 8002340:	461c      	mov	r4, r3
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	2200      	movs	r2, #0
 8002348:	2103      	movs	r1, #3
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff fdf8 	bl	8001f40 <_ZN3lcd10LCDMessageC1EhhPc>
 8002350:	60fc      	str	r4, [r7, #12]
	xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 8002352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	f107 010c 	add.w	r1, r7, #12
 800235a:	2300      	movs	r3, #0
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	f006 fcb2 	bl	8008cc8 <xQueueGenericSend>
	vTaskDelay(5000);
 8002364:	f241 3088 	movw	r0, #5000	; 0x1388
 8002368:	f007 faf4 	bl	8009954 <vTaskDelay>
	HAL_ADCEx_Calibration_Start (&hadc1, ADC_SINGLE_ENDED);
 800236c:	2100      	movs	r1, #0
 800236e:	4850      	ldr	r0, [pc, #320]	; (80024b0 <_Z11thermoMeterPv+0x198>)
 8002370:	f001 ff26 	bl	80041c0 <HAL_ADCEx_Calibration_Start>

	for ( ;; ) {
		HAL_ADC_Start(&hadc1);
 8002374:	484e      	ldr	r0, [pc, #312]	; (80024b0 <_Z11thermoMeterPv+0x198>)
 8002376:	f001 f9c3 	bl	8003700 <HAL_ADC_Start>
		convDone = false;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		while ( !convDone ) {
 8002380:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 8083 	bne.w	8002490 <_Z11thermoMeterPv+0x178>
			ADCStatus = HAL_ADC_PollForConversion(&hadc1, 0xffffffff );
 800238a:	f04f 31ff 	mov.w	r1, #4294967295
 800238e:	4848      	ldr	r0, [pc, #288]	; (80024b0 <_Z11thermoMeterPv+0x198>)
 8002390:	f001 fb02 	bl	8003998 <HAL_ADC_PollForConversion>
 8002394:	4603      	mov	r3, r0
 8002396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			switch ( ADCStatus ) {
 800239a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d055      	beq.n	800244e <_Z11thermoMeterPv+0x136>
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d053      	beq.n	800244e <_Z11thermoMeterPv+0x136>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d171      	bne.n	800248e <_Z11thermoMeterPv+0x176>
				case HAL_OK: {
					tempVal = HAL_ADC_GetValue(&hadc1);
 80023aa:	4841      	ldr	r0, [pc, #260]	; (80024b0 <_Z11thermoMeterPv+0x198>)
 80023ac:	f001 fbee 	bl	8003b8c <HAL_ADC_GetValue>
 80023b0:	62f8      	str	r0, [r7, #44]	; 0x2c
					volts=(float)tempVal/4096*3.3;
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023bc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80024b4 <_Z11thermoMeterPv+0x19c>
 80023c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023c4:	ee16 0a90 	vmov	r0, s13
 80023c8:	f7fe f8c6 	bl	8000558 <__aeabi_f2d>
 80023cc:	a334      	add	r3, pc, #208	; (adr r3, 80024a0 <_Z11thermoMeterPv+0x188>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f919 	bl	8000608 <__aeabi_dmul>
 80023d6:	4603      	mov	r3, r0
 80023d8:	460c      	mov	r4, r1
 80023da:	4618      	mov	r0, r3
 80023dc:	4621      	mov	r1, r4
 80023de:	f7fe fc0b 	bl	8000bf8 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
					tempFlt=(volts-V25)*AVG_SLOPE+25;
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <_Z11thermoMeterPv+0x1a0>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023f4:	4b31      	ldr	r3, [pc, #196]	; (80024bc <_Z11thermoMeterPv+0x1a4>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fe:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002402:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002406:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					ftoa( tempFlt, chBuf, 2 );
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	2102      	movs	r1, #2
 8002410:	4618      	mov	r0, r3
 8002412:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8002416:	f7ff fe3d 	bl	8002094 <_Z4ftoafPci>
					pMsg = new LCDMessage( 3, 15, chBuf );
 800241a:	2010      	movs	r0, #16
 800241c:	f7ff fdac 	bl	8001f78 <_Znwj>
 8002420:	4603      	mov	r3, r0
 8002422:	461c      	mov	r4, r3
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	220f      	movs	r2, #15
 800242a:	2103      	movs	r1, #3
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff fd87 	bl	8001f40 <_ZN3lcd10LCDMessageC1EhhPc>
 8002432:	60fc      	str	r4, [r7, #12]
					xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f107 010c 	add.w	r1, r7, #12
 800243c:	2300      	movs	r3, #0
 800243e:	f04f 32ff 	mov.w	r2, #4294967295
 8002442:	f006 fc41 	bl	8008cc8 <xQueueGenericSend>
					convDone = true;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					break;
 800244c:	e01f      	b.n	800248e <_Z11thermoMeterPv+0x176>
				}
				case HAL_ERROR:
				case HAL_TIMEOUT: {
					sprintf(chBuf, "ADC ERR!");
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <_Z11thermoMeterPv+0x1a8>)
 8002454:	ca07      	ldmia	r2, {r0, r1, r2}
 8002456:	c303      	stmia	r3!, {r0, r1}
 8002458:	701a      	strb	r2, [r3, #0]
					pMsg = new LCDMessage( 3, 12, chBuf );
 800245a:	2010      	movs	r0, #16
 800245c:	f7ff fd8c 	bl	8001f78 <_Znwj>
 8002460:	4603      	mov	r3, r0
 8002462:	461c      	mov	r4, r3
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	220c      	movs	r2, #12
 800246a:	2103      	movs	r1, #3
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff fd67 	bl	8001f40 <_ZN3lcd10LCDMessageC1EhhPc>
 8002472:	60fc      	str	r4, [r7, #12]
					xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	f107 010c 	add.w	r1, r7, #12
 800247c:	2300      	movs	r3, #0
 800247e:	f04f 32ff 	mov.w	r2, #4294967295
 8002482:	f006 fc21 	bl	8008cc8 <xQueueGenericSend>
					convDone = true;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					break;
 800248c:	bf00      	nop
		while ( !convDone ) {
 800248e:	e777      	b.n	8002380 <_Z11thermoMeterPv+0x68>
				default: {

				}
			}
		}
		HAL_ADC_Stop(&hadc1);
 8002490:	4807      	ldr	r0, [pc, #28]	; (80024b0 <_Z11thermoMeterPv+0x198>)
 8002492:	f001 fa4b 	bl	800392c <HAL_ADC_Stop>
		vTaskDelay(1000);
 8002496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800249a:	f007 fa5b 	bl	8009954 <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 800249e:	e769      	b.n	8002374 <_Z11thermoMeterPv+0x5c>
 80024a0:	66666666 	.word	0x66666666
 80024a4:	400a6666 	.word	0x400a6666
 80024a8:	41aa0000 	.word	0x41aa0000
 80024ac:	08010a70 	.word	0x08010a70
 80024b0:	200004cc 	.word	0x200004cc
 80024b4:	45800000 	.word	0x45800000
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004
 80024c0:	08010a80 	.word	0x08010a80

080024c4 <main>:
	}

}

int main(void) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af04      	add	r7, sp, #16

	HAL_Init();
 80024ca:	f000 fecb 	bl	8003264 <HAL_Init>

	SystemClock_Config();
 80024ce:	f000 f87b 	bl	80025c8 <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 80024d2:	f000 faad 	bl	8002a30 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 80024d6:	f000 fa77 	bl	80029c8 <_ZL19MX_USART2_UART_Initv>
	MX_TIM4_Init();
 80024da:	f000 fa15 	bl	8002908 <_ZL12MX_TIM4_Initv>
	MX_TIM2_Init();
 80024de:	f000 f9b5 	bl	800284c <_ZL12MX_TIM2_Initv>
	MX_ADC1_Init();
 80024e2:	f000 f8e7 	bl	80026b4 <_ZL12MX_ADC1_Initv>
	MX_I2C1_Init();
 80024e6:	f000 f963 	bl	80027b0 <_ZL12MX_I2C1_Initv>


	//  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);

	hUIQ = xQueueCreate( 5, sizeof( void *) );
 80024ea:	2200      	movs	r2, #0
 80024ec:	2104      	movs	r1, #4
 80024ee:	2005      	movs	r0, #5
 80024f0:	f006 fb8a 	bl	8008c08 <xQueueGenericCreate>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <main+0xb8>)
 80024f8:	601a      	str	r2, [r3, #0]
	hUI = xTaskCreateStatic( UI, "UI", UI_STACKSIZE, &hUIQ, tskIDLE_PRIORITY+4, uiStack, &uiTCB );
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <main+0xbc>)
 80024fc:	9302      	str	r3, [sp, #8]
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <main+0xc0>)
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	2304      	movs	r3, #4
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <main+0xb8>)
 8002508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250c:	491e      	ldr	r1, [pc, #120]	; (8002588 <main+0xc4>)
 800250e:	481f      	ldr	r0, [pc, #124]	; (800258c <main+0xc8>)
 8002510:	f007 f8d0 	bl	80096b4 <xTaskCreateStatic>
 8002514:	4602      	mov	r2, r0
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <main+0xcc>)
 8002518:	601a      	str	r2, [r3, #0]
	hCM = xTaskCreateStatic( chMapper, "CMAP", CHMAP_STACKSIZE, &hUIQ, tskIDLE_PRIORITY+3, chMapStack, &chMapTCB );
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <main+0xd0>)
 800251c:	9302      	str	r3, [sp, #8]
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <main+0xd4>)
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	2303      	movs	r3, #3
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <main+0xb8>)
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	491c      	ldr	r1, [pc, #112]	; (800259c <main+0xd8>)
 800252c:	481c      	ldr	r0, [pc, #112]	; (80025a0 <main+0xdc>)
 800252e:	f007 f8c1 	bl	80096b4 <xTaskCreateStatic>
 8002532:	4602      	mov	r2, r0
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <main+0xe0>)
 8002536:	601a      	str	r2, [r3, #0]
	hCM = xTaskCreateStatic( tickCounter, "TCNT", TCNT_STACKSIZE, &hUIQ, tskIDLE_PRIORITY+3, tCntStack, &tCntTCB );
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <main+0xe4>)
 800253a:	9302      	str	r3, [sp, #8]
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <main+0xe8>)
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	2303      	movs	r3, #3
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <main+0xb8>)
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	4919      	ldr	r1, [pc, #100]	; (80025b0 <main+0xec>)
 800254a:	481a      	ldr	r0, [pc, #104]	; (80025b4 <main+0xf0>)
 800254c:	f007 f8b2 	bl	80096b4 <xTaskCreateStatic>
 8002550:	4602      	mov	r2, r0
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <main+0xe0>)
 8002554:	601a      	str	r2, [r3, #0]
	hCM = xTaskCreateStatic( thermoMeter, "TMTR", TMTR_STACKSIZE, &hUIQ, tskIDLE_PRIORITY+3, tMtrStack, &tMtrTCB );
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <main+0xf4>)
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <main+0xf8>)
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2303      	movs	r3, #3
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <main+0xb8>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	4916      	ldr	r1, [pc, #88]	; (80025c0 <main+0xfc>)
 8002568:	4816      	ldr	r0, [pc, #88]	; (80025c4 <main+0x100>)
 800256a:	f007 f8a3 	bl	80096b4 <xTaskCreateStatic>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <main+0xe0>)
 8002572:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 8002574:	f007 fa22 	bl	80099bc <vTaskStartScheduler>

	while (1) { }
 8002578:	e7fe      	b.n	8002578 <main+0xb4>
 800257a:	bf00      	nop
 800257c:	200011e4 	.word	0x200011e4
 8002580:	20001184 	.word	0x20001184
 8002584:	20000d84 	.word	0x20000d84
 8002588:	08010a8c 	.word	0x08010a8c
 800258c:	08003115 	.word	0x08003115
 8002590:	200011e0 	.word	0x200011e0
 8002594:	2000086c 	.word	0x2000086c
 8002598:	2000066c 	.word	0x2000066c
 800259c:	08010a90 	.word	0x08010a90
 80025a0:	080021c5 	.word	0x080021c5
 80025a4:	200008c8 	.word	0x200008c8
 80025a8:	20000acc 	.word	0x20000acc
 80025ac:	200008cc 	.word	0x200008cc
 80025b0:	08010a98 	.word	0x08010a98
 80025b4:	08002275 	.word	0x08002275
 80025b8:	20000d28 	.word	0x20000d28
 80025bc:	20000b28 	.word	0x20000b28
 80025c0:	08010aa0 	.word	0x08010aa0
 80025c4:	08002319 	.word	0x08002319

080025c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b0a6      	sub	sp, #152	; 0x98
 80025cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025d2:	2228      	movs	r2, #40	; 0x28
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f00a f81c 	bl	800c614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2258      	movs	r2, #88	; 0x58
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f00a f80e 	bl	800c614 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025f8:	2302      	movs	r3, #2
 80025fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025fc:	2301      	movs	r3, #1
 80025fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002600:	2310      	movs	r3, #16
 8002602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800260c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002610:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002614:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002618:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002622:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fb9c 	bl	8005d64 <HAL_RCC_OscConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 800263c:	f000 faa8 	bl	8002b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002640:	230f      	movs	r3, #15
 8002642:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002644:	2302      	movs	r3, #2
 8002646:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002648:	2300      	movs	r3, #0
 800264a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800264c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002650:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002652:	2300      	movs	r3, #0
 8002654:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002656:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800265a:	2102      	movs	r1, #2
 800265c:	4618      	mov	r0, r3
 800265e:	f004 fa97 	bl	8006b90 <HAL_RCC_ClockConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8002672:	f000 fa8d 	bl	8002b90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <_Z18SystemClock_Configv+0xe8>)
 8002678:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800267e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002684:	2300      	movs	r3, #0
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002688:	2300      	movs	r3, #0
 800268a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	4618      	mov	r0, r3
 8002690:	f004 fce6 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 80026a4:	f000 fa74 	bl	8002b90 <Error_Handler>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3798      	adds	r7, #152	; 0x98
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	00300082 	.word	0x00300082

080026b4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
 80026d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80026d6:	4b35      	ldr	r3, [pc, #212]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 80026d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026de:	4b33      	ldr	r3, [pc, #204]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026ea:	4b30      	ldr	r3, [pc, #192]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 8002700:	2200      	movs	r2, #0
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 8002706:	2201      	movs	r2, #1
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 800270c:	2200      	movs	r2, #0
 800270e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 8002712:	2201      	movs	r2, #1
 8002714:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002716:	4b25      	ldr	r3, [pc, #148]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 8002720:	2204      	movs	r2, #4
 8002722:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 8002726:	2200      	movs	r2, #0
 8002728:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 800272c:	2200      	movs	r2, #0
 800272e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002730:	481e      	ldr	r0, [pc, #120]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 8002732:	f000 fdeb 	bl	800330c <HAL_ADC_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 8002746:	f000 fa23 	bl	8002b90 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4815      	ldr	r0, [pc, #84]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 8002756:	f002 f8b1 	bl	80048bc <HAL_ADCEx_MultiModeConfigChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <_ZL12MX_ADC1_Initv+0xba>
  {
    Error_Handler();
 800276a:	f000 fa11 	bl	8002b90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800276e:	2310      	movs	r3, #16
 8002770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002772:	2301      	movs	r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 800277a:	2306      	movs	r3, #6
 800277c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4808      	ldr	r0, [pc, #32]	; (80027ac <_ZL12MX_ADC1_Initv+0xf8>)
 800278c:	f001 fdaa 	bl	80042e4 <HAL_ADC_ConfigChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <_ZL12MX_ADC1_Initv+0xf0>
  {
    Error_Handler();
 80027a0:	f000 f9f6 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200004cc 	.word	0x200004cc

080027b0 <_ZL12MX_I2C1_Initv>:

static void MX_I2C1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027b6:	4a24      	ldr	r2, [pc, #144]	; (8002848 <_ZL12MX_I2C1_Initv+0x98>)
 80027b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027bc:	f240 220b 	movw	r2, #523	; 0x20b
 80027c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ec:	4815      	ldr	r0, [pc, #84]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 80027ee:	f002 fd47 	bl	8005280 <HAL_I2C_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002802:	f000 f9c5 	bl	8002b90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002806:	2100      	movs	r1, #0
 8002808:	480e      	ldr	r0, [pc, #56]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 800280a:	f003 fa13 	bl	8005c34 <HAL_I2CEx_ConfigAnalogFilter>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 800281e:	f000 f9b7 	bl	8002b90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002822:	2100      	movs	r1, #0
 8002824:	4807      	ldr	r0, [pc, #28]	; (8002844 <_ZL12MX_I2C1_Initv+0x94>)
 8002826:	f003 fa50 	bl	8005cca <HAL_I2CEx_ConfigDigitalFilter>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 800283a:	f000 f9a9 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000051c 	.word	0x2000051c
 8002848:	40005400 	.word	0x40005400

0800284c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002852:	f107 0310 	add.w	r3, r7, #16
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 800286c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002870:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 8002874:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 8002882:	f242 7210 	movw	r2, #10000	; 0x2710
 8002886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002894:	481b      	ldr	r0, [pc, #108]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 8002896:	f004 fe01 	bl	800749c <HAL_TIM_Base_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 80028aa:	f000 f971 	bl	8002b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4619      	mov	r1, r3
 80028ba:	4812      	ldr	r0, [pc, #72]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 80028bc:	f004 fff5 	bl	80078aa <HAL_TIM_ConfigClockSource>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80028d0:	f000 f95e 	bl	8002b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028d4:	2320      	movs	r3, #32
 80028d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	4808      	ldr	r0, [pc, #32]	; (8002904 <_ZL12MX_TIM2_Initv+0xb8>)
 80028e2:	f005 f9fb 	bl	8007cdc <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80028f6:	f000 f94b 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000568 	.word	0x20000568

08002908 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f009 fe7c 	bl	800c614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291c:	463b      	mov	r3, r7
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <_ZL12MX_TIM4_Initv+0xb8>)
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <_ZL12MX_TIM4_Initv+0xbc>)
 800292a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <_ZL12MX_TIM4_Initv+0xb8>)
 800292e:	2200      	movs	r2, #0
 8002930:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <_ZL12MX_TIM4_Initv+0xb8>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <_ZL12MX_TIM4_Initv+0xb8>)
 800293a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800293e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <_ZL12MX_TIM4_Initv+0xb8>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <_ZL12MX_TIM4_Initv+0xb8>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800294c:	2301      	movs	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002954:	2301      	movs	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800295c:	2305      	movs	r3, #5
 800295e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002964:	2301      	movs	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002968:	2300      	movs	r3, #0
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800296c:	2305      	movs	r3, #5
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	4619      	mov	r1, r3
 8002976:	4812      	ldr	r0, [pc, #72]	; (80029c0 <_ZL12MX_TIM4_Initv+0xb8>)
 8002978:	f004 fde6 	bl	8007548 <HAL_TIM_Encoder_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 800298c:	f000 f900 	bl	8002b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002990:	2300      	movs	r3, #0
 8002992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002998:	463b      	mov	r3, r7
 800299a:	4619      	mov	r1, r3
 800299c:	4808      	ldr	r0, [pc, #32]	; (80029c0 <_ZL12MX_TIM4_Initv+0xb8>)
 800299e:	f005 f99d 	bl	8007cdc <HAL_TIMEx_MasterConfigSynchronization>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 80029b2:	f000 f8ed 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	3730      	adds	r7, #48	; 0x30
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200005a8 	.word	0x200005a8
 80029c4:	40000800 	.word	0x40000800

080029c8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <_ZL19MX_USART2_UART_Initv+0x64>)
 80029d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 80029d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80029d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 80029ee:	220c      	movs	r2, #12
 80029f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a0a:	4807      	ldr	r0, [pc, #28]	; (8002a28 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002a0c:	f005 fa10 	bl	8007e30 <HAL_UART_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8002a20:	f000 f8b6 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200005e8 	.word	0x200005e8
 8002a2c:	40004400 	.word	0x40004400

08002a30 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a46:	4b45      	ldr	r3, [pc, #276]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4a44      	ldr	r2, [pc, #272]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a50:	6153      	str	r3, [r2, #20]
 8002a52:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	4a3e      	ldr	r2, [pc, #248]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a68:	6153      	str	r3, [r2, #20]
 8002a6a:	4b3c      	ldr	r3, [pc, #240]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4a38      	ldr	r2, [pc, #224]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	6153      	str	r3, [r2, #20]
 8002a82:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8e:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	4a32      	ldr	r2, [pc, #200]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6153      	str	r3, [r2, #20]
 8002a9a:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <_ZL12MX_GPIO_Initv+0x12c>)
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RW_Pin|SX1509RESET_Pin|RS_Pin|D4_Pin
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f240 31cd 	movw	r1, #973	; 0x3cd
 8002aac:	482c      	ldr	r0, [pc, #176]	; (8002b60 <_ZL12MX_GPIO_Initv+0x130>)
 8002aae:	f002 fbcf 	bl	8005250 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aba:	f002 fbc9 	bl	8005250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin, GPIO_PIN_RESET);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2130      	movs	r1, #48	; 0x30
 8002ac2:	4828      	ldr	r0, [pc, #160]	; (8002b64 <_ZL12MX_GPIO_Initv+0x134>)
 8002ac4:	f002 fbc4 	bl	8005250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <_ZL12MX_GPIO_Initv+0x138>)
 8002ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	4820      	ldr	r0, [pc, #128]	; (8002b60 <_ZL12MX_GPIO_Initv+0x130>)
 8002ade:	f002 fa2d 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RW_Pin SX1509RESET_Pin RS_Pin D4_Pin
                           D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RW_Pin|SX1509RESET_Pin|RS_Pin|D4_Pin
 8002ae2:	f240 33cd 	movw	r3, #973	; 0x3cd
 8002ae6:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	4819      	ldr	r0, [pc, #100]	; (8002b60 <_ZL12MX_GPIO_Initv+0x130>)
 8002afc:	f002 fa1e 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1509INT_Pin */
  GPIO_InitStruct.Pin = SX1509INT_Pin;
 8002b00:	2302      	movs	r3, #2
 8002b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <_ZL12MX_GPIO_Initv+0x138>)
 8002b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1509INT_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	4813      	ldr	r0, [pc, #76]	; (8002b60 <_ZL12MX_GPIO_Initv+0x130>)
 8002b14:	f002 fa12 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b32:	f002 fa03 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin;
 8002b36:	2330      	movs	r3, #48	; 0x30
 8002b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <_ZL12MX_GPIO_Initv+0x134>)
 8002b4e:	f002 f9f5 	bl	8004f3c <HAL_GPIO_Init>

}
 8002b52:	bf00      	nop
 8002b54:	3728      	adds	r7, #40	; 0x28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	48000800 	.word	0x48000800
 8002b64:	48000400 	.word	0x48000400
 8002b68:	10210000 	.word	0x10210000

08002b6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b7e:	f000 fb87 	bl	8003290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40001000 	.word	0x40001000

08002b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002b9e:	b5b0      	push	{r4, r5, r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fd fcc3 	bl	8000534 <__aeabi_i2d>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	460d      	mov	r5, r1
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f7fd fcbe 	bl	8000534 <__aeabi_i2d>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	ec43 2b11 	vmov	d1, r2, r3
 8002bc0:	ec45 4b10 	vmov	d0, r4, r5
 8002bc4:	f008 fc4a 	bl	800b45c <pow>
 8002bc8:	eeb0 7a40 	vmov.f32	s14, s0
 8002bcc:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd4:	eef0 0a67 	vmov.f32	s1, s15
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_MspInit+0x4c>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6193      	str	r3, [r2, #24]
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	61d3      	str	r3, [r2, #28]
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	210f      	movs	r1, #15
 8002c1a:	f06f 0001 	mvn.w	r0, #1
 8002c1e:	f002 f963 	bl	8004ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c40:	d113      	bne.n	8002c6a <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_ADC_MspInit+0x44>)
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <HAL_ADC_MspInit+0x44>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6153      	str	r3, [r2, #20]
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_ADC_MspInit+0x44>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2105      	movs	r1, #5
 8002c5e:	2012      	movs	r0, #18
 8002c60:	f002 f942 	bl	8004ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c64:	2012      	movs	r0, #18
 8002c66:	f002 f95b 	bl	8004f20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <HAL_I2C_MspInit+0xb8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d145      	bne.n	8002d26 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca4:	6153      	str	r3, [r2, #20]
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cbc:	6153      	str	r3, [r2, #20]
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cea:	f002 f927 	bl	8004f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf2:	2312      	movs	r3, #18
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	480b      	ldr	r0, [pc, #44]	; (8002d38 <HAL_I2C_MspInit+0xc0>)
 8002d0a:	f002 f917 	bl	8004f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_I2C_MspInit+0xbc>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d26:	bf00      	nop
 8002d28:	3728      	adds	r7, #40	; 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40005400 	.word	0x40005400
 8002d34:	40021000 	.word	0x40021000
 8002d38:	48000400 	.word	0x48000400

08002d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4c:	d113      	bne.n	8002d76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_TIM_Base_MspInit+0x44>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <HAL_TIM_Base_MspInit+0x44>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_TIM_Base_MspInit+0x44>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2105      	movs	r1, #5
 8002d6a:	201c      	movs	r0, #28
 8002d6c:	f002 f8bc 	bl	8004ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d70:	201c      	movs	r0, #28
 8002d72:	f002 f8d5 	bl	8004f20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <HAL_TIM_Encoder_MspInit+0x90>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d131      	bne.n	8002e0a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x94>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x94>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	61d3      	str	r3, [r2, #28]
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x94>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x94>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x94>)
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc8:	6153      	str	r3, [r2, #20]
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x94>)
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002de8:	230a      	movs	r3, #10
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df6:	f002 f8a1 	bl	8004f3c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2105      	movs	r1, #5
 8002dfe:	201e      	movs	r0, #30
 8002e00:	f002 f872 	bl	8004ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e04:	201e      	movs	r0, #30
 8002e06:	f002 f88b 	bl	8004f20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <HAL_UART_MspInit+0x7c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d128      	bne.n	8002e90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_UART_MspInit+0x80>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <HAL_UART_MspInit+0x80>)
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_UART_MspInit+0x80>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_UART_MspInit+0x80>)
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_UART_MspInit+0x80>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	6153      	str	r3, [r2, #20]
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_UART_MspInit+0x80>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e6e:	230c      	movs	r3, #12
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e7e:	2307      	movs	r3, #7
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8c:	f002 f856 	bl	8004f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e90:	bf00      	nop
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40004400 	.word	0x40004400
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	; 0x30
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	2036      	movs	r0, #54	; 0x36
 8002eb6:	f002 f817 	bl	8004ee8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002eba:	2036      	movs	r0, #54	; 0x36
 8002ebc:	f002 f830 	bl	8004f20 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_InitTick+0xa0>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <HAL_InitTick+0xa0>)
 8002ec6:	f043 0310 	orr.w	r3, r3, #16
 8002eca:	61d3      	str	r3, [r2, #28]
 8002ecc:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <HAL_InitTick+0xa0>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ed8:	f107 0210 	add.w	r2, r7, #16
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 f88a 	bl	8006ffc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ee8:	f004 f844 	bl	8006f74 <HAL_RCC_GetPCLK1Freq>
 8002eec:	4603      	mov	r3, r0
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <HAL_InitTick+0xa4>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	3b01      	subs	r3, #1
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_InitTick+0xa8>)
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <HAL_InitTick+0xac>)
 8002f04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_InitTick+0xa8>)
 8002f08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f0e:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <HAL_InitTick+0xa8>)
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_InitTick+0xa8>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_InitTick+0xa8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002f20:	4809      	ldr	r0, [pc, #36]	; (8002f48 <HAL_InitTick+0xa8>)
 8002f22:	f004 fabb 	bl	800749c <HAL_TIM_Base_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002f2c:	4806      	ldr	r0, [pc, #24]	; (8002f48 <HAL_InitTick+0xa8>)
 8002f2e:	f004 fae1 	bl	80074f4 <HAL_TIM_Base_Start_IT>
 8002f32:	4603      	mov	r3, r0
 8002f34:	e000      	b.n	8002f38 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3730      	adds	r7, #48	; 0x30
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000
 8002f44:	431bde83 	.word	0x431bde83
 8002f48:	20003e98 	.word	0x20003e98
 8002f4c:	40001000 	.word	0x40001000

08002f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f62:	e7fe      	b.n	8002f62 <HardFault_Handler+0x4>

08002f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <MemManage_Handler+0x4>

08002f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <BusFault_Handler+0x4>

08002f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <UsageFault_Handler+0x4>

08002f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <ADC1_2_IRQHandler+0x10>)
 8002f8a:	f000 fe0d 	bl	8003ba8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	200004cc 	.word	0x200004cc

08002f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <TIM2_IRQHandler+0x10>)
 8002f9e:	f004 fb65 	bl	800766c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000568 	.word	0x20000568

08002fac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	encCount = htim4.Instance->CNT;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <TIM4_IRQHandler+0x1c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <TIM4_IRQHandler+0x20>)
 8002fba:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <TIM4_IRQHandler+0x1c>)
 8002fbe:	f004 fb55 	bl	800766c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200005a8 	.word	0x200005a8
 8002fcc:	20000668 	.word	0x20000668

08002fd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <TIM6_DAC_IRQHandler+0x10>)
 8002fd6:	f004 fb49 	bl	800766c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20003e98 	.word	0x20003e98

08002fe4 <_getpid>:
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_kill>:
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	f009 faa9 	bl	800c554 <__errno>
 8003002:	4602      	mov	r2, r0
 8003004:	2316      	movs	r3, #22
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_exit>:
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ffe7 	bl	8002ff4 <_kill>
 8003026:	e7fe      	b.n	8003026 <_exit+0x12>

08003028 <_close>:
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_fstat>:
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	2300      	movs	r3, #0
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <_isatty>:
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	2301      	movs	r3, #1
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <_lseek>:
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	2300      	movs	r3, #0
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_sbrk>:
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <_sbrk+0x50>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <_sbrk+0x16>
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <_sbrk+0x50>)
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <_sbrk+0x54>)
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <_sbrk+0x50>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <_sbrk+0x50>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	466a      	mov	r2, sp
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d907      	bls.n	80030ca <_sbrk+0x3a>
 80030ba:	f009 fa4b 	bl	800c554 <__errno>
 80030be:	4602      	mov	r2, r0
 80030c0:	230c      	movs	r3, #12
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	e006      	b.n	80030d8 <_sbrk+0x48>
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <_sbrk+0x50>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <_sbrk+0x50>)
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200011e8 	.word	0x200011e8
 80030e4:	20003f20 	.word	0x20003f20

080030e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <SystemInit+0x28>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	4a07      	ldr	r2, [pc, #28]	; (8003110 <SystemInit+0x28>)
 80030f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <SystemInit+0x28>)
 80030fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003102:	609a      	str	r2, [r3, #8]
#endif
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <_Z2UIPv>:
static Lcd_PinType dataPins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};

using namespace lcd;
using namespace sx1509;

void UI( void *pvParameters ) {
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b08b      	sub	sp, #44	; 0x2c
 8003118:	af04      	add	r7, sp, #16
 800311a:	6078      	str	r0, [r7, #4]
	QueueHandle_t *lcdQ;
	LCDMessage *pMsg;
	LCD *display;
	ioexp *pexp;

	lcdQ = (QueueHandle_t *)pvParameters;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	617b      	str	r3, [r7, #20]

#ifdef USE_IOEXP
	pexp = new ioexp(&hi2c1, EXP_I2C_ADDR, SX1509RESET_GPIO_Port, SX1509RESET_Pin, SX1509INT_GPIO_Port, SX1509INT_Pin, outout );
 8003120:	201c      	movs	r0, #28
 8003122:	f7fe ff29 	bl	8001f78 <_Znwj>
 8003126:	4603      	mov	r3, r0
 8003128:	461c      	mov	r4, r3
 800312a:	2303      	movs	r3, #3
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	2302      	movs	r3, #2
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <_Z2UIPv+0xf0>)
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	2304      	movs	r3, #4
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	4b32      	ldr	r3, [pc, #200]	; (8003204 <_Z2UIPv+0xf0>)
 800313c:	223e      	movs	r2, #62	; 0x3e
 800313e:	4932      	ldr	r1, [pc, #200]	; (8003208 <_Z2UIPv+0xf4>)
 8003140:	4620      	mov	r0, r4
 8003142:	f7fd fdcd 	bl	8000ce0 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE>
 8003146:	613c      	str	r4, [r7, #16]
	display = new LCD( pexp );
 8003148:	2028      	movs	r0, #40	; 0x28
 800314a:	f7fe ff15 	bl	8001f78 <_Znwj>
 800314e:	4603      	mov	r3, r0
 8003150:	461c      	mov	r4, r3
 8003152:	6939      	ldr	r1, [r7, #16]
 8003154:	4620      	mov	r0, r4
 8003156:	f7fe fd25 	bl	8001ba4 <_ZN3lcd3LCDC1EPN6sx15095ioexpE>
 800315a:	60fc      	str	r4, [r7, #12]
#else
	display = new LCD( dataPorts, dataPins, RS_GPIO_Port, RS_Pin, RW_GPIO_Port, RW_Pin, EN1_GPIO_Port, EN1_Pin, LCD_4_BIT_MODE);
#endif
	display->begin();
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7fe fd65 	bl	8001c2c <_ZN3lcd3LCD5beginEv>
    display->clear();
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7fe fdea 	bl	8001d3c <_ZN3lcd3LCD5clearEv>
    vTaskDelay(1000);
 8003168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800316c:	f006 fbf2 	bl	8009954 <vTaskDelay>
    display->move_cursor(0,0);
 8003170:	2200      	movs	r2, #0
 8003172:	2100      	movs	r1, #0
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7fe fdc7 	bl	8001d08 <_ZN3lcd3LCD11move_cursorEhh>
    display->write_string((char *)"UITask ohjaa n\xe1ytt\xef\xe1");
 800317a:	4924      	ldr	r1, [pc, #144]	; (800320c <_Z2UIPv+0xf8>)
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7fe fda5 	bl	8001ccc <_ZN3lcd3LCD12write_stringEPc>
	while ( 1 ) {
		xQueueReceive(*lcdQ, &pMsg, portMAX_DELAY );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f107 0108 	add.w	r1, r7, #8
 800318a:	f04f 32ff 	mov.w	r2, #4294967295
 800318e:	4618      	mov	r0, r3
 8003190:	f005 ff28 	bl	8008fe4 <xQueueReceive>
		display->move_cursor(pMsg->x, pMsg->y);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	7819      	ldrb	r1, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	461a      	mov	r2, r3
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7fe fdb2 	bl	8001d08 <_ZN3lcd3LCD11move_cursorEhh>
		switch ( pMsg->T ) {
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	78db      	ldrb	r3, [r3, #3]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d00c      	beq.n	80031c6 <_Z2UIPv+0xb2>
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d014      	beq.n	80031da <_Z2UIPv+0xc6>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d119      	bne.n	80031e8 <_Z2UIPv+0xd4>
			case u8: {
				display->write_int(pMsg->Len, pMsg->v.U8);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	7899      	ldrb	r1, [r3, #2]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	7a1b      	ldrb	r3, [r3, #8]
 80031bc:	461a      	mov	r2, r3
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7fe fd6a 	bl	8001c98 <_ZN3lcd3LCD9write_intEhl>
				break;
 80031c4:	e018      	b.n	80031f8 <_Z2UIPv+0xe4>
			}
			case i8: {
				display->write_int(pMsg->Len, pMsg->v.I8);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	7899      	ldrb	r1, [r3, #2]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80031d0:	461a      	mov	r2, r3
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7fe fd60 	bl	8001c98 <_ZN3lcd3LCD9write_intEhl>
				break;
 80031d8:	e00e      	b.n	80031f8 <_Z2UIPv+0xe4>
			}
			case s: {
				display->write_string(pMsg->v.S);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4619      	mov	r1, r3
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7fe fd73 	bl	8001ccc <_ZN3lcd3LCD12write_stringEPc>
				break;
 80031e6:	e007      	b.n	80031f8 <_Z2UIPv+0xe4>
			}
			default: display->write_int(pMsg->Len, pMsg->v.U8);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	7899      	ldrb	r1, [r3, #2]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	7a1b      	ldrb	r3, [r3, #8]
 80031f0:	461a      	mov	r2, r3
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7fe fd50 	bl	8001c98 <_ZN3lcd3LCD9write_intEhl>
		}
		delete pMsg;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2110      	movs	r1, #16
 80031fc:	4618      	mov	r0, r3
 80031fe:	f008 f925 	bl	800b44c <_ZdlPvj>
		xQueueReceive(*lcdQ, &pMsg, portMAX_DELAY );
 8003202:	e7be      	b.n	8003182 <_Z2UIPv+0x6e>
 8003204:	48000800 	.word	0x48000800
 8003208:	2000051c 	.word	0x2000051c
 800320c:	08010aa8 	.word	0x08010aa8

08003210 <Reset_Handler>:
 8003210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003248 <LoopForever+0x2>
 8003214:	2100      	movs	r1, #0
 8003216:	e003      	b.n	8003220 <LoopCopyDataInit>

08003218 <CopyDataInit>:
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <LoopForever+0x6>)
 800321a:	585b      	ldr	r3, [r3, r1]
 800321c:	5043      	str	r3, [r0, r1]
 800321e:	3104      	adds	r1, #4

08003220 <LoopCopyDataInit>:
 8003220:	480b      	ldr	r0, [pc, #44]	; (8003250 <LoopForever+0xa>)
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <LoopForever+0xe>)
 8003224:	1842      	adds	r2, r0, r1
 8003226:	429a      	cmp	r2, r3
 8003228:	d3f6      	bcc.n	8003218 <CopyDataInit>
 800322a:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <LoopForever+0x12>)
 800322c:	e002      	b.n	8003234 <LoopFillZerobss>

0800322e <FillZerobss>:
 800322e:	2300      	movs	r3, #0
 8003230:	f842 3b04 	str.w	r3, [r2], #4

08003234 <LoopFillZerobss>:
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <LoopForever+0x16>)
 8003236:	429a      	cmp	r2, r3
 8003238:	d3f9      	bcc.n	800322e <FillZerobss>
 800323a:	f7ff ff55 	bl	80030e8 <SystemInit>
 800323e:	f009 f9a1 	bl	800c584 <__libc_init_array>
 8003242:	f7ff f93f 	bl	80024c4 <main>

08003246 <LoopForever>:
 8003246:	e7fe      	b.n	8003246 <LoopForever>
 8003248:	20010000 	.word	0x20010000
 800324c:	08010f38 	.word	0x08010f38
 8003250:	20000000 	.word	0x20000000
 8003254:	200001ec 	.word	0x200001ec
 8003258:	200001ec 	.word	0x200001ec
 800325c:	20003f20 	.word	0x20003f20

08003260 <ADC3_IRQHandler>:
 8003260:	e7fe      	b.n	8003260 <ADC3_IRQHandler>
	...

08003264 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_Init+0x28>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_Init+0x28>)
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f001 fe2c 	bl	8004ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	2000      	movs	r0, #0
 800327c:	f7ff fe10 	bl	8002ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7ff fcae 	bl	8002be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40022000 	.word	0x40022000

08003290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x20>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_IncTick+0x24>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_IncTick+0x24>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000010 	.word	0x20000010
 80032b4:	20003ed8 	.word	0x20003ed8

080032b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_GetTick+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20003ed8 	.word	0x20003ed8

080032d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b09a      	sub	sp, #104	; 0x68
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e1e3      	b.n	80036f4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d176      	bne.n	800342c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d152      	bne.n	80033ec <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff fc65 	bl	8002c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d13b      	bne.n	80033ec <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f001 fbf1 	bl	8004b5c <ADC_Disable>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d12f      	bne.n	80033ec <HAL_ADC_Init+0xe0>
 800338c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003390:	2b00      	cmp	r3, #0
 8003392:	d12b      	bne.n	80033ec <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800339c:	f023 0302 	bic.w	r3, r3, #2
 80033a0:	f043 0202 	orr.w	r2, r3, #2
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033b6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033c6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033c8:	4b92      	ldr	r3, [pc, #584]	; (8003614 <HAL_ADC_Init+0x308>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a92      	ldr	r2, [pc, #584]	; (8003618 <HAL_ADC_Init+0x30c>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0c9a      	lsrs	r2, r3, #18
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033de:	e002      	b.n	80033e6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003408:	d110      	bne.n	800342c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f023 0312 	bic.w	r3, r3, #18
 8003412:	f043 0210 	orr.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f043 0201 	orr.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 8150 	bne.w	80036da <HAL_ADC_Init+0x3ce>
 800343a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 814b 	bne.w	80036da <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 8143 	bne.w	80036da <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800345c:	f043 0202 	orr.w	r2, r3, #2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346c:	d004      	beq.n	8003478 <HAL_ADC_Init+0x16c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6a      	ldr	r2, [pc, #424]	; (800361c <HAL_ADC_Init+0x310>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_ADC_Init+0x170>
 8003478:	4b69      	ldr	r3, [pc, #420]	; (8003620 <HAL_ADC_Init+0x314>)
 800347a:	e000      	b.n	800347e <HAL_ADC_Init+0x172>
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <HAL_ADC_Init+0x318>)
 800347e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003488:	d102      	bne.n	8003490 <HAL_ADC_Init+0x184>
 800348a:	4b64      	ldr	r3, [pc, #400]	; (800361c <HAL_ADC_Init+0x310>)
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e01a      	b.n	80034c6 <HAL_ADC_Init+0x1ba>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a61      	ldr	r2, [pc, #388]	; (800361c <HAL_ADC_Init+0x310>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d103      	bne.n	80034a2 <HAL_ADC_Init+0x196>
 800349a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e011      	b.n	80034c6 <HAL_ADC_Init+0x1ba>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a60      	ldr	r2, [pc, #384]	; (8003628 <HAL_ADC_Init+0x31c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d102      	bne.n	80034b2 <HAL_ADC_Init+0x1a6>
 80034ac:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_ADC_Init+0x320>)
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e009      	b.n	80034c6 <HAL_ADC_Init+0x1ba>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5d      	ldr	r2, [pc, #372]	; (800362c <HAL_ADC_Init+0x320>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d102      	bne.n	80034c2 <HAL_ADC_Init+0x1b6>
 80034bc:	4b5a      	ldr	r3, [pc, #360]	; (8003628 <HAL_ADC_Init+0x31c>)
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e001      	b.n	80034c6 <HAL_ADC_Init+0x1ba>
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d108      	bne.n	80034e6 <HAL_ADC_Init+0x1da>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_Init+0x1da>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_ADC_Init+0x1dc>
 80034e6:	2300      	movs	r3, #0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11c      	bne.n	8003526 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_ADC_Init+0x202>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_ADC_Init+0x202>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_ADC_Init+0x204>
 800350e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003510:	2b00      	cmp	r3, #0
 8003512:	d108      	bne.n	8003526 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	431a      	orrs	r2, r3
 8003522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003524:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7e5b      	ldrb	r3, [r3, #25]
 800352a:	035b      	lsls	r3, r3, #13
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003530:	2a01      	cmp	r2, #1
 8003532:	d002      	beq.n	800353a <HAL_ADC_Init+0x22e>
 8003534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003538:	e000      	b.n	800353c <HAL_ADC_Init+0x230>
 800353a:	2200      	movs	r2, #0
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4313      	orrs	r3, r2
 800354a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800354c:	4313      	orrs	r3, r2
 800354e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d11b      	bne.n	8003592 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7e5b      	ldrb	r3, [r3, #25]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	3b01      	subs	r3, #1
 8003568:	045a      	lsls	r2, r3, #17
 800356a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800356c:	4313      	orrs	r3, r2
 800356e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003572:	663b      	str	r3, [r7, #96]	; 0x60
 8003574:	e00d      	b.n	8003592 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	2b01      	cmp	r3, #1
 8003598:	d054      	beq.n	8003644 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a22      	ldr	r2, [pc, #136]	; (8003628 <HAL_ADC_Init+0x31c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_ADC_Init+0x2a2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a20      	ldr	r2, [pc, #128]	; (800362c <HAL_ADC_Init+0x320>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d140      	bne.n	8003630 <HAL_ADC_Init+0x324>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80035b6:	d02a      	beq.n	800360e <HAL_ADC_Init+0x302>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c0:	d022      	beq.n	8003608 <HAL_ADC_Init+0x2fc>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80035ca:	d01a      	beq.n	8003602 <HAL_ADC_Init+0x2f6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80035d4:	d012      	beq.n	80035fc <HAL_ADC_Init+0x2f0>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80035de:	d00a      	beq.n	80035f6 <HAL_ADC_Init+0x2ea>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80035e8:	d002      	beq.n	80035f0 <HAL_ADC_Init+0x2e4>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	e023      	b.n	8003638 <HAL_ADC_Init+0x32c>
 80035f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80035f4:	e020      	b.n	8003638 <HAL_ADC_Init+0x32c>
 80035f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80035fa:	e01d      	b.n	8003638 <HAL_ADC_Init+0x32c>
 80035fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003600:	e01a      	b.n	8003638 <HAL_ADC_Init+0x32c>
 8003602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003606:	e017      	b.n	8003638 <HAL_ADC_Init+0x32c>
 8003608:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800360c:	e014      	b.n	8003638 <HAL_ADC_Init+0x32c>
 800360e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003612:	e011      	b.n	8003638 <HAL_ADC_Init+0x32c>
 8003614:	20000008 	.word	0x20000008
 8003618:	431bde83 	.word	0x431bde83
 800361c:	50000100 	.word	0x50000100
 8003620:	50000300 	.word	0x50000300
 8003624:	50000700 	.word	0x50000700
 8003628:	50000400 	.word	0x50000400
 800362c:	50000500 	.word	0x50000500
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800363c:	4313      	orrs	r3, r2
 800363e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003640:	4313      	orrs	r3, r2
 8003642:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b00      	cmp	r3, #0
 8003650:	d114      	bne.n	800367c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003660:	f023 0302 	bic.w	r3, r3, #2
 8003664:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7e1b      	ldrb	r3, [r3, #24]
 800366a:	039a      	lsls	r2, r3, #14
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4313      	orrs	r3, r2
 8003676:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003678:	4313      	orrs	r3, r2
 800367a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <HAL_ADC_Init+0x3f0>)
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800368c:	430b      	orrs	r3, r1
 800368e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10c      	bne.n	80036b2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f023 010f 	bic.w	r1, r3, #15
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	1e5a      	subs	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
 80036b0:	e007      	b.n	80036c2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 020f 	bic.w	r2, r2, #15
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
 80036d8:	e00a      	b.n	80036f0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f023 0312 	bic.w	r3, r3, #18
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80036f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3768      	adds	r7, #104	; 0x68
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	fff0c007 	.word	0xfff0c007

08003700 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 80f9 	bne.w	800390e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_ADC_Start+0x2a>
 8003726:	2302      	movs	r3, #2
 8003728:	e0f4      	b.n	8003914 <HAL_ADC_Start+0x214>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f001 f9b4 	bl	8004aa0 <ADC_Enable>
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 80e0 	bne.w	8003904 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003760:	d004      	beq.n	800376c <HAL_ADC_Start+0x6c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6d      	ldr	r2, [pc, #436]	; (800391c <HAL_ADC_Start+0x21c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d106      	bne.n	800377a <HAL_ADC_Start+0x7a>
 800376c:	4b6c      	ldr	r3, [pc, #432]	; (8003920 <HAL_ADC_Start+0x220>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <HAL_ADC_Start+0x9a>
 8003778:	e005      	b.n	8003786 <HAL_ADC_Start+0x86>
 800377a:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <HAL_ADC_Start+0x224>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_ADC_Start+0x9a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800378e:	d004      	beq.n	800379a <HAL_ADC_Start+0x9a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a64      	ldr	r2, [pc, #400]	; (8003928 <HAL_ADC_Start+0x228>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d115      	bne.n	80037c6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d036      	beq.n	8003822 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80037c4:	e02d      	b.n	8003822 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037da:	d004      	beq.n	80037e6 <HAL_ADC_Start+0xe6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a4e      	ldr	r2, [pc, #312]	; (800391c <HAL_ADC_Start+0x21c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10a      	bne.n	80037fc <HAL_ADC_Start+0xfc>
 80037e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e008      	b.n	800380e <HAL_ADC_Start+0x10e>
 80037fc:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_ADC_Start+0x228>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800381a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382e:	d106      	bne.n	800383e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	f023 0206 	bic.w	r2, r3, #6
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
 800383c:	e002      	b.n	8003844 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	221c      	movs	r2, #28
 8003852:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800385c:	d004      	beq.n	8003868 <HAL_ADC_Start+0x168>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2e      	ldr	r2, [pc, #184]	; (800391c <HAL_ADC_Start+0x21c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d106      	bne.n	8003876 <HAL_ADC_Start+0x176>
 8003868:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_ADC_Start+0x220>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2b00      	cmp	r3, #0
 8003872:	d03e      	beq.n	80038f2 <HAL_ADC_Start+0x1f2>
 8003874:	e005      	b.n	8003882 <HAL_ADC_Start+0x182>
 8003876:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_ADC_Start+0x224>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2b00      	cmp	r3, #0
 8003880:	d037      	beq.n	80038f2 <HAL_ADC_Start+0x1f2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800388a:	d004      	beq.n	8003896 <HAL_ADC_Start+0x196>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a22      	ldr	r2, [pc, #136]	; (800391c <HAL_ADC_Start+0x21c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d106      	bne.n	80038a4 <HAL_ADC_Start+0x1a4>
 8003896:	4b22      	ldr	r3, [pc, #136]	; (8003920 <HAL_ADC_Start+0x220>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d027      	beq.n	80038f2 <HAL_ADC_Start+0x1f2>
 80038a2:	e005      	b.n	80038b0 <HAL_ADC_Start+0x1b0>
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <HAL_ADC_Start+0x224>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d020      	beq.n	80038f2 <HAL_ADC_Start+0x1f2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b8:	d004      	beq.n	80038c4 <HAL_ADC_Start+0x1c4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_ADC_Start+0x21c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d106      	bne.n	80038d2 <HAL_ADC_Start+0x1d2>
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <HAL_ADC_Start+0x220>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d010      	beq.n	80038f2 <HAL_ADC_Start+0x1f2>
 80038d0:	e005      	b.n	80038de <HAL_ADC_Start+0x1de>
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <HAL_ADC_Start+0x224>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2b09      	cmp	r3, #9
 80038dc:	d009      	beq.n	80038f2 <HAL_ADC_Start+0x1f2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_Start+0x1f2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <HAL_ADC_Start+0x228>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10f      	bne.n	8003912 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0204 	orr.w	r2, r2, #4
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	e006      	b.n	8003912 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800390c:	e001      	b.n	8003912 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	50000100 	.word	0x50000100
 8003920:	50000300 	.word	0x50000300
 8003924:	50000700 	.word	0x50000700
 8003928:	50000400 	.word	0x50000400

0800392c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_ADC_Stop+0x1a>
 8003942:	2302      	movs	r3, #2
 8003944:	e023      	b.n	800398e <HAL_ADC_Stop+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800394e:	216c      	movs	r1, #108	; 0x6c
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f001 f963 	bl	8004c1c <ADC_ConversionStop>
 8003956:	4603      	mov	r3, r0
 8003958:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d111      	bne.n	8003984 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 f8fb 	bl	8004b5c <ADC_Disable>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d102      	bne.n	80039b4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80039ae:	2308      	movs	r3, #8
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e03a      	b.n	8003a2a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039bc:	d004      	beq.n	80039c8 <HAL_ADC_PollForConversion+0x30>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6e      	ldr	r2, [pc, #440]	; (8003b7c <HAL_ADC_PollForConversion+0x1e4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <HAL_ADC_PollForConversion+0x34>
 80039c8:	4b6d      	ldr	r3, [pc, #436]	; (8003b80 <HAL_ADC_PollForConversion+0x1e8>)
 80039ca:	e000      	b.n	80039ce <HAL_ADC_PollForConversion+0x36>
 80039cc:	4b6d      	ldr	r3, [pc, #436]	; (8003b84 <HAL_ADC_PollForConversion+0x1ec>)
 80039ce:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d112      	bne.n	8003a02 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d11d      	bne.n	8003a26 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0b8      	b.n	8003b74 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0a6      	b.n	8003b74 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003a26:	230c      	movs	r3, #12
 8003a28:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a32:	d004      	beq.n	8003a3e <HAL_ADC_PollForConversion+0xa6>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a50      	ldr	r2, [pc, #320]	; (8003b7c <HAL_ADC_PollForConversion+0x1e4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d106      	bne.n	8003a4c <HAL_ADC_PollForConversion+0xb4>
 8003a3e:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <HAL_ADC_PollForConversion+0x1e8>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_ADC_PollForConversion+0xd4>
 8003a4a:	e005      	b.n	8003a58 <HAL_ADC_PollForConversion+0xc0>
 8003a4c:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <HAL_ADC_PollForConversion+0x1ec>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_ADC_PollForConversion+0xd4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a60:	d004      	beq.n	8003a6c <HAL_ADC_PollForConversion+0xd4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a48      	ldr	r2, [pc, #288]	; (8003b88 <HAL_ADC_PollForConversion+0x1f0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d104      	bne.n	8003a76 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e00f      	b.n	8003a96 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a7e:	d004      	beq.n	8003a8a <HAL_ADC_PollForConversion+0xf2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a3d      	ldr	r2, [pc, #244]	; (8003b7c <HAL_ADC_PollForConversion+0x1e4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d102      	bne.n	8003a90 <HAL_ADC_PollForConversion+0xf8>
 8003a8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a8e:	e000      	b.n	8003a92 <HAL_ADC_PollForConversion+0xfa>
 8003a90:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_ADC_PollForConversion+0x1f0>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003a96:	f7ff fc0f 	bl	80032b8 <HAL_GetTick>
 8003a9a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003a9c:	e01a      	b.n	8003ad4 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d016      	beq.n	8003ad4 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_ADC_PollForConversion+0x124>
 8003aac:	f7ff fc04 	bl	80032b8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d20b      	bcs.n	8003ad4 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f043 0204 	orr.w	r2, r3, #4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e04f      	b.n	8003b74 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0dd      	beq.n	8003a9e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d131      	bne.n	8003b60 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d12c      	bne.n	8003b60 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d125      	bne.n	8003b60 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d112      	bne.n	8003b48 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d112      	bne.n	8003b60 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
 8003b46:	e00b      	b.n	8003b60 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	50000100 	.word	0x50000100
 8003b80:	50000300 	.word	0x50000300
 8003b84:	50000700 	.word	0x50000700
 8003b88:	50000400 	.word	0x50000400

08003b8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d106      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0x30>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d00f      	beq.n	8003bf8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	f040 80c0 	bne.w	8003d68 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	f040 80b8 	bne.w	8003d68 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c18:	d004      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x7c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a95      	ldr	r2, [pc, #596]	; (8003e74 <HAL_ADC_IRQHandler+0x2cc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d106      	bne.n	8003c32 <HAL_ADC_IRQHandler+0x8a>
 8003c24:	4b94      	ldr	r3, [pc, #592]	; (8003e78 <HAL_ADC_IRQHandler+0x2d0>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d03e      	beq.n	8003cae <HAL_ADC_IRQHandler+0x106>
 8003c30:	e005      	b.n	8003c3e <HAL_ADC_IRQHandler+0x96>
 8003c32:	4b92      	ldr	r3, [pc, #584]	; (8003e7c <HAL_ADC_IRQHandler+0x2d4>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d037      	beq.n	8003cae <HAL_ADC_IRQHandler+0x106>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c46:	d004      	beq.n	8003c52 <HAL_ADC_IRQHandler+0xaa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a89      	ldr	r2, [pc, #548]	; (8003e74 <HAL_ADC_IRQHandler+0x2cc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d106      	bne.n	8003c60 <HAL_ADC_IRQHandler+0xb8>
 8003c52:	4b89      	ldr	r3, [pc, #548]	; (8003e78 <HAL_ADC_IRQHandler+0x2d0>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d027      	beq.n	8003cae <HAL_ADC_IRQHandler+0x106>
 8003c5e:	e005      	b.n	8003c6c <HAL_ADC_IRQHandler+0xc4>
 8003c60:	4b86      	ldr	r3, [pc, #536]	; (8003e7c <HAL_ADC_IRQHandler+0x2d4>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d020      	beq.n	8003cae <HAL_ADC_IRQHandler+0x106>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c74:	d004      	beq.n	8003c80 <HAL_ADC_IRQHandler+0xd8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7e      	ldr	r2, [pc, #504]	; (8003e74 <HAL_ADC_IRQHandler+0x2cc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d106      	bne.n	8003c8e <HAL_ADC_IRQHandler+0xe6>
 8003c80:	4b7d      	ldr	r3, [pc, #500]	; (8003e78 <HAL_ADC_IRQHandler+0x2d0>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d010      	beq.n	8003cae <HAL_ADC_IRQHandler+0x106>
 8003c8c:	e005      	b.n	8003c9a <HAL_ADC_IRQHandler+0xf2>
 8003c8e:	4b7b      	ldr	r3, [pc, #492]	; (8003e7c <HAL_ADC_IRQHandler+0x2d4>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	2b09      	cmp	r3, #9
 8003c98:	d009      	beq.n	8003cae <HAL_ADC_IRQHandler+0x106>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca2:	d004      	beq.n	8003cae <HAL_ADC_IRQHandler+0x106>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a75      	ldr	r2, [pc, #468]	; (8003e80 <HAL_ADC_IRQHandler+0x2d8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d104      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	e00f      	b.n	8003cd8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc0:	d004      	beq.n	8003ccc <HAL_ADC_IRQHandler+0x124>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6b      	ldr	r2, [pc, #428]	; (8003e74 <HAL_ADC_IRQHandler+0x2cc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d102      	bne.n	8003cd2 <HAL_ADC_IRQHandler+0x12a>
 8003ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cd0:	e000      	b.n	8003cd4 <HAL_ADC_IRQHandler+0x12c>
 8003cd2:	4b6b      	ldr	r3, [pc, #428]	; (8003e80 <HAL_ADC_IRQHandler+0x2d8>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d139      	bne.n	8003d5a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d134      	bne.n	8003d5a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d12d      	bne.n	8003d5a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11a      	bne.n	8003d42 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 020c 	bic.w	r2, r2, #12
 8003d1a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d112      	bne.n	8003d5a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d40:	e00b      	b.n	8003d5a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fab8 	bl	80032d0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	220c      	movs	r2, #12
 8003d66:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d106      	bne.n	8003d84 <HAL_ADC_IRQHandler+0x1dc>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d00f      	beq.n	8003da4 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	f040 813c 	bne.w	800400c <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	f040 8134 	bne.w	800400c <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db8:	d004      	beq.n	8003dc4 <HAL_ADC_IRQHandler+0x21c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2d      	ldr	r2, [pc, #180]	; (8003e74 <HAL_ADC_IRQHandler+0x2cc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d106      	bne.n	8003dd2 <HAL_ADC_IRQHandler+0x22a>
 8003dc4:	4b2c      	ldr	r3, [pc, #176]	; (8003e78 <HAL_ADC_IRQHandler+0x2d0>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03e      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x2a6>
 8003dd0:	e005      	b.n	8003dde <HAL_ADC_IRQHandler+0x236>
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <HAL_ADC_IRQHandler+0x2d4>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d037      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x2a6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de6:	d004      	beq.n	8003df2 <HAL_ADC_IRQHandler+0x24a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <HAL_ADC_IRQHandler+0x2cc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d106      	bne.n	8003e00 <HAL_ADC_IRQHandler+0x258>
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <HAL_ADC_IRQHandler+0x2d0>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d027      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x2a6>
 8003dfe:	e005      	b.n	8003e0c <HAL_ADC_IRQHandler+0x264>
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_ADC_IRQHandler+0x2d4>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d020      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x2a6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e14:	d004      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x278>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <HAL_ADC_IRQHandler+0x2cc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d106      	bne.n	8003e2e <HAL_ADC_IRQHandler+0x286>
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_ADC_IRQHandler+0x2d0>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2b09      	cmp	r3, #9
 8003e2a:	d010      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x2a6>
 8003e2c:	e005      	b.n	8003e3a <HAL_ADC_IRQHandler+0x292>
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_ADC_IRQHandler+0x2d4>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d009      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x2a6>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e42:	d004      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x2a6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <HAL_ADC_IRQHandler+0x2d8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d104      	bne.n	8003e58 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	e018      	b.n	8003e8a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e60:	d004      	beq.n	8003e6c <HAL_ADC_IRQHandler+0x2c4>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a03      	ldr	r2, [pc, #12]	; (8003e74 <HAL_ADC_IRQHandler+0x2cc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10b      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x2dc>
 8003e6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e70:	e009      	b.n	8003e86 <HAL_ADC_IRQHandler+0x2de>
 8003e72:	bf00      	nop
 8003e74:	50000100 	.word	0x50000100
 8003e78:	50000300 	.word	0x50000300
 8003e7c:	50000700 	.word	0x50000700
 8003e80:	50000400 	.word	0x50000400
 8003e84:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <HAL_ADC_IRQHandler+0x554>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 80ad 	bne.w	8003ffe <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f040 80a5 	bne.w	8003ffe <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 809f 	bne.w	8003ffe <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	f040 8097 	bne.w	8003ffe <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed8:	d004      	beq.n	8003ee4 <HAL_ADC_IRQHandler+0x33c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a88      	ldr	r2, [pc, #544]	; (8004100 <HAL_ADC_IRQHandler+0x558>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d106      	bne.n	8003ef2 <HAL_ADC_IRQHandler+0x34a>
 8003ee4:	4b87      	ldr	r3, [pc, #540]	; (8004104 <HAL_ADC_IRQHandler+0x55c>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d03e      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x3c6>
 8003ef0:	e005      	b.n	8003efe <HAL_ADC_IRQHandler+0x356>
 8003ef2:	4b85      	ldr	r3, [pc, #532]	; (8004108 <HAL_ADC_IRQHandler+0x560>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d037      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x3c6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f06:	d004      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x36a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7c      	ldr	r2, [pc, #496]	; (8004100 <HAL_ADC_IRQHandler+0x558>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d106      	bne.n	8003f20 <HAL_ADC_IRQHandler+0x378>
 8003f12:	4b7c      	ldr	r3, [pc, #496]	; (8004104 <HAL_ADC_IRQHandler+0x55c>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d027      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x3c6>
 8003f1e:	e005      	b.n	8003f2c <HAL_ADC_IRQHandler+0x384>
 8003f20:	4b79      	ldr	r3, [pc, #484]	; (8004108 <HAL_ADC_IRQHandler+0x560>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	2b06      	cmp	r3, #6
 8003f2a:	d020      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x3c6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f34:	d004      	beq.n	8003f40 <HAL_ADC_IRQHandler+0x398>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a71      	ldr	r2, [pc, #452]	; (8004100 <HAL_ADC_IRQHandler+0x558>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d106      	bne.n	8003f4e <HAL_ADC_IRQHandler+0x3a6>
 8003f40:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_ADC_IRQHandler+0x55c>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2b07      	cmp	r3, #7
 8003f4a:	d010      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x3c6>
 8003f4c:	e005      	b.n	8003f5a <HAL_ADC_IRQHandler+0x3b2>
 8003f4e:	4b6e      	ldr	r3, [pc, #440]	; (8004108 <HAL_ADC_IRQHandler+0x560>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2b07      	cmp	r3, #7
 8003f58:	d009      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x3c6>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f62:	d004      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x3c6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a64      	ldr	r2, [pc, #400]	; (80040fc <HAL_ADC_IRQHandler+0x554>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d104      	bne.n	8003f78 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e00f      	b.n	8003f98 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_IRQHandler+0x3e4>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a5e      	ldr	r2, [pc, #376]	; (8004100 <HAL_ADC_IRQHandler+0x558>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d102      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x3ea>
 8003f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f90:	e000      	b.n	8003f94 <HAL_ADC_IRQHandler+0x3ec>
 8003f92:	4b5a      	ldr	r3, [pc, #360]	; (80040fc <HAL_ADC_IRQHandler+0x554>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d12d      	bne.n	8003ffe <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d11a      	bne.n	8003fe6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fbe:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d112      	bne.n	8003ffe <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fe4:	e00b      	b.n	8003ffe <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0210 	orr.w	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f948 	bl	8004294 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2260      	movs	r2, #96	; 0x60
 800400a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d113      	bne.n	8004042 <HAL_ADC_IRQHandler+0x49a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d10c      	bne.n	8004042 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff f955 	bl	80032e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004050:	d115      	bne.n	800407e <HAL_ADC_IRQHandler+0x4d6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004060:	d10d      	bne.n	800407e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f924 	bl	80042bc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800407c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408c:	d115      	bne.n	80040ba <HAL_ADC_IRQHandler+0x512>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409c:	d10d      	bne.n	80040ba <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f910 	bl	80042d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d151      	bne.n	800416c <HAL_ADC_IRQHandler+0x5c4>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d14a      	bne.n	800416c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d102      	bne.n	80040e4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 80040de:	2301      	movs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e02d      	b.n	8004140 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ec:	d004      	beq.n	80040f8 <HAL_ADC_IRQHandler+0x550>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a03      	ldr	r2, [pc, #12]	; (8004100 <HAL_ADC_IRQHandler+0x558>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d109      	bne.n	800410c <HAL_ADC_IRQHandler+0x564>
 80040f8:	4b02      	ldr	r3, [pc, #8]	; (8004104 <HAL_ADC_IRQHandler+0x55c>)
 80040fa:	e008      	b.n	800410e <HAL_ADC_IRQHandler+0x566>
 80040fc:	50000400 	.word	0x50000400
 8004100:	50000100 	.word	0x50000100
 8004104:	50000300 	.word	0x50000300
 8004108:	50000700 	.word	0x50000700
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <HAL_ADC_IRQHandler+0x614>)
 800410e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10a      	bne.n	8004140 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800412a:	2301      	movs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e007      	b.n	8004140 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10e      	bne.n	8004164 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f043 0202 	orr.w	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff f8ca 	bl	80032f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2210      	movs	r2, #16
 800416a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	d11b      	bne.n	80041b4 <HAL_ADC_IRQHandler+0x60c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418a:	d113      	bne.n	80041b4 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	f043 0208 	orr.w	r2, r3, #8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f87a 	bl	80042a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	50000700 	.word	0x50000700

080041c0 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_ADCEx_Calibration_Start+0x1c>
 80041d8:	2302      	movs	r3, #2
 80041da:	e057      	b.n	800428c <HAL_ADCEx_Calibration_Start+0xcc>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fcb9 	bl	8004b5c <ADC_Disable>
 80041ea:	4603      	mov	r3, r0
 80041ec:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d146      	bne.n	8004282 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004208:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800421e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800422e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004230:	f7ff f842 	bl	80032b8 <HAL_GetTick>
 8004234:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004236:	e014      	b.n	8004262 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004238:	f7ff f83e 	bl	80032b8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b0a      	cmp	r3, #10
 8004244:	d90d      	bls.n	8004262 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f023 0312 	bic.w	r3, r3, #18
 800424e:	f043 0210 	orr.w	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e014      	b.n	800428c <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800426c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004270:	d0e2      	beq.n	8004238 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	f043 0201 	orr.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b09b      	sub	sp, #108	; 0x6c
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x22>
 8004302:	2302      	movs	r3, #2
 8004304:	e2cb      	b.n	800489e <HAL_ADC_ConfigChannel+0x5ba>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 82af 	bne.w	800487c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b04      	cmp	r3, #4
 8004324:	d81c      	bhi.n	8004360 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	461a      	mov	r2, r3
 800433a:	231f      	movs	r3, #31
 800433c:	4093      	lsls	r3, r2
 800433e:	43db      	mvns	r3, r3
 8004340:	4019      	ands	r1, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fa00 f203 	lsl.w	r2, r0, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
 800435e:	e063      	b.n	8004428 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b09      	cmp	r3, #9
 8004366:	d81e      	bhi.n	80043a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	3b1e      	subs	r3, #30
 800437c:	221f      	movs	r2, #31
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	4019      	ands	r1, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	3b1e      	subs	r3, #30
 8004398:	fa00 f203 	lsl.w	r2, r0, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34
 80043a4:	e040      	b.n	8004428 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b0e      	cmp	r3, #14
 80043ac:	d81e      	bhi.n	80043ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	3b3c      	subs	r3, #60	; 0x3c
 80043c2:	221f      	movs	r2, #31
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	4019      	ands	r1, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	3b3c      	subs	r3, #60	; 0x3c
 80043de:	fa00 f203 	lsl.w	r2, r0, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
 80043ea:	e01d      	b.n	8004428 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	3b5a      	subs	r3, #90	; 0x5a
 8004400:	221f      	movs	r2, #31
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	4019      	ands	r1, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	3b5a      	subs	r3, #90	; 0x5a
 800441c:	fa00 f203 	lsl.w	r2, r0, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 80e5 	bne.w	8004602 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b09      	cmp	r3, #9
 800443e:	d91c      	bls.n	800447a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	3b1e      	subs	r3, #30
 8004452:	2207      	movs	r2, #7
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	4019      	ands	r1, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6898      	ldr	r0, [r3, #8]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	3b1e      	subs	r3, #30
 800446c:	fa00 f203 	lsl.w	r2, r0, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
 8004478:	e019      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6959      	ldr	r1, [r3, #20]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	2207      	movs	r2, #7
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	4019      	ands	r1, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6898      	ldr	r0, [r3, #8]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	fa00 f203 	lsl.w	r2, r0, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d84f      	bhi.n	8004570 <HAL_ADC_ConfigChannel+0x28c>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	0800450b 	.word	0x0800450b
 80044e0:	0800452d 	.word	0x0800452d
 80044e4:	0800454f 	.word	0x0800454f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044ee:	4b9f      	ldr	r3, [pc, #636]	; (800476c <HAL_ADC_ConfigChannel+0x488>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	0691      	lsls	r1, r2, #26
 80044f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044fa:	430a      	orrs	r2, r1
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004506:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004508:	e07e      	b.n	8004608 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004510:	4b96      	ldr	r3, [pc, #600]	; (800476c <HAL_ADC_ConfigChannel+0x488>)
 8004512:	4013      	ands	r3, r2
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	0691      	lsls	r1, r2, #26
 800451a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800451c:	430a      	orrs	r2, r1
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004528:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800452a:	e06d      	b.n	8004608 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004532:	4b8e      	ldr	r3, [pc, #568]	; (800476c <HAL_ADC_ConfigChannel+0x488>)
 8004534:	4013      	ands	r3, r2
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	0691      	lsls	r1, r2, #26
 800453c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800453e:	430a      	orrs	r2, r1
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800454a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800454c:	e05c      	b.n	8004608 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004554:	4b85      	ldr	r3, [pc, #532]	; (800476c <HAL_ADC_ConfigChannel+0x488>)
 8004556:	4013      	ands	r3, r2
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	0691      	lsls	r1, r2, #26
 800455e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004560:	430a      	orrs	r2, r1
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800456c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800456e:	e04b      	b.n	8004608 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	069b      	lsls	r3, r3, #26
 8004580:	429a      	cmp	r2, r3
 8004582:	d107      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800459a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	069b      	lsls	r3, r3, #26
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d107      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	069b      	lsls	r3, r3, #26
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d107      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	069b      	lsls	r3, r3, #26
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d10a      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004600:	e001      	b.n	8004606 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004606:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d108      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x344>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x344>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_ADC_ConfigChannel+0x346>
 8004628:	2300      	movs	r3, #0
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8131 	bne.w	8004892 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d00f      	beq.n	8004658 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2201      	movs	r2, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	400a      	ands	r2, r1
 8004652:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004656:	e049      	b.n	80046ec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2201      	movs	r2, #1
 8004666:	409a      	lsls	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b09      	cmp	r3, #9
 8004678:	d91c      	bls.n	80046b4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6999      	ldr	r1, [r3, #24]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4413      	add	r3, r2
 800468a:	3b1b      	subs	r3, #27
 800468c:	2207      	movs	r2, #7
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	4019      	ands	r1, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6898      	ldr	r0, [r3, #8]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4613      	mov	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	4413      	add	r3, r2
 80046a4:	3b1b      	subs	r3, #27
 80046a6:	fa00 f203 	lsl.w	r2, r0, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	619a      	str	r2, [r3, #24]
 80046b2:	e01b      	b.n	80046ec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6959      	ldr	r1, [r3, #20]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	4613      	mov	r3, r2
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	4413      	add	r3, r2
 80046c6:	2207      	movs	r2, #7
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	4019      	ands	r1, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6898      	ldr	r0, [r3, #8]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	fa00 f203 	lsl.w	r2, r0, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f4:	d004      	beq.n	8004700 <HAL_ADC_ConfigChannel+0x41c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <HAL_ADC_ConfigChannel+0x48c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x420>
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <HAL_ADC_ConfigChannel+0x490>)
 8004702:	e000      	b.n	8004706 <HAL_ADC_ConfigChannel+0x422>
 8004704:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <HAL_ADC_ConfigChannel+0x494>)
 8004706:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b10      	cmp	r3, #16
 800470e:	d105      	bne.n	800471c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004720:	2b11      	cmp	r3, #17
 8004722:	d105      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004734:	2b12      	cmp	r3, #18
 8004736:	f040 80ac 	bne.w	8004892 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800473a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 80a5 	bne.w	8004892 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004750:	d102      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x474>
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_ADC_ConfigChannel+0x48c>)
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e023      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x4bc>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a04      	ldr	r2, [pc, #16]	; (8004770 <HAL_ADC_ConfigChannel+0x48c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10c      	bne.n	800477c <HAL_ADC_ConfigChannel+0x498>
 8004762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e01a      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x4bc>
 800476a:	bf00      	nop
 800476c:	83fff000 	.word	0x83fff000
 8004770:	50000100 	.word	0x50000100
 8004774:	50000300 	.word	0x50000300
 8004778:	50000700 	.word	0x50000700
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a4a      	ldr	r2, [pc, #296]	; (80048ac <HAL_ADC_ConfigChannel+0x5c8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d102      	bne.n	800478c <HAL_ADC_ConfigChannel+0x4a8>
 8004786:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e009      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x4bc>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a47      	ldr	r2, [pc, #284]	; (80048b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d102      	bne.n	800479c <HAL_ADC_ConfigChannel+0x4b8>
 8004796:	4b45      	ldr	r3, [pc, #276]	; (80048ac <HAL_ADC_ConfigChannel+0x5c8>)
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e001      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x4bc>
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d108      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x4dc>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x4dc>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x4de>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d150      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x504>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x504>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_ADC_ConfigChannel+0x506>
 80047e8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13c      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d11d      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x54e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047fe:	d118      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800480c:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <HAL_ADC_ConfigChannel+0x5d0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	0c9a      	lsrs	r2, r3, #18
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004822:	e002      	b.n	800482a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3b01      	subs	r3, #1
 8004828:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f9      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004830:	e02e      	b.n	8004890 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b11      	cmp	r3, #17
 8004838:	d10b      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x56e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004842:	d106      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800484c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004850:	e01e      	b.n	8004890 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b12      	cmp	r3, #18
 8004858:	d11a      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800485a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004864:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004866:	e013      	b.n	8004890 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800487a:	e00a      	b.n	8004892 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800488e:	e000      	b.n	8004892 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004890:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800489a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800489e:	4618      	mov	r0, r3
 80048a0:	376c      	adds	r7, #108	; 0x6c
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	50000400 	.word	0x50000400
 80048b0:	50000500 	.word	0x50000500
 80048b4:	20000008 	.word	0x20000008
 80048b8:	431bde83 	.word	0x431bde83

080048bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80048bc:	b480      	push	{r7}
 80048be:	b099      	sub	sp, #100	; 0x64
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048d4:	d102      	bne.n	80048dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80048d6:	4b6d      	ldr	r3, [pc, #436]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	e01a      	b.n	8004912 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a6a      	ldr	r2, [pc, #424]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d103      	bne.n	80048ee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80048e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	e011      	b.n	8004912 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a67      	ldr	r2, [pc, #412]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d102      	bne.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048f8:	4b66      	ldr	r3, [pc, #408]	; (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	e009      	b.n	8004912 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a64      	ldr	r2, [pc, #400]	; (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d102      	bne.n	800490e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004908:	4b61      	ldr	r3, [pc, #388]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	e001      	b.n	8004912 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b0      	b.n	8004a7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004926:	2302      	movs	r3, #2
 8004928:	e0a9      	b.n	8004a7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 808d 	bne.w	8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	f040 8086 	bne.w	8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004958:	d004      	beq.n	8004964 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a4b      	ldr	r2, [pc, #300]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004964:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004966:	e000      	b.n	800496a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004968:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800496a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d040      	beq.n	80049f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004986:	035b      	lsls	r3, r3, #13
 8004988:	430b      	orrs	r3, r1
 800498a:	431a      	orrs	r2, r3
 800498c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800498e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d108      	bne.n	80049b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80049b0:	2300      	movs	r3, #0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d15c      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d107      	bne.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80049d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d14b      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80049d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049e0:	f023 030f 	bic.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	6811      	ldr	r1, [r2, #0]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	6892      	ldr	r2, [r2, #8]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	431a      	orrs	r2, r3
 80049f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80049f4:	e03c      	b.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d123      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004a44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d112      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a52:	f023 030f 	bic.w	r3, r3, #15
 8004a56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a5a:	e009      	b.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004a6e:	e000      	b.n	8004a72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3764      	adds	r7, #100	; 0x64
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	50000100 	.word	0x50000100
 8004a90:	50000400 	.word	0x50000400
 8004a94:	50000500 	.word	0x50000500
 8004a98:	50000300 	.word	0x50000300
 8004a9c:	50000700 	.word	0x50000700

08004aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d108      	bne.n	8004acc <ADC_Enable+0x2c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <ADC_Enable+0x2c>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <ADC_Enable+0x2e>
 8004acc:	2300      	movs	r3, #0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d13c      	bne.n	8004b4c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	4b1f      	ldr	r3, [pc, #124]	; (8004b58 <ADC_Enable+0xb8>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f043 0210 	orr.w	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af0:	f043 0201 	orr.w	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e028      	b.n	8004b4e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004b0c:	f7fe fbd4 	bl	80032b8 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b12:	e014      	b.n	8004b3e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b14:	f7fe fbd0 	bl	80032b8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d90d      	bls.n	8004b3e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0210 	orr.w	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f043 0201 	orr.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e007      	b.n	8004b4e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d1e3      	bne.n	8004b14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	8000003f 	.word	0x8000003f

08004b5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d108      	bne.n	8004b88 <ADC_Disable+0x2c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <ADC_Disable+0x2c>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <ADC_Disable+0x2e>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d040      	beq.n	8004c10 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 030d 	and.w	r3, r3, #13
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10f      	bne.n	8004bbc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0202 	orr.w	r2, r2, #2
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004bb4:	f7fe fb80 	bl	80032b8 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004bba:	e022      	b.n	8004c02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	f043 0210 	orr.w	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bcc:	f043 0201 	orr.w	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e01c      	b.n	8004c12 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bd8:	f7fe fb6e 	bl	80032b8 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d90d      	bls.n	8004c02 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f043 0210 	orr.w	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f043 0201 	orr.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e007      	b.n	8004c12 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d0e3      	beq.n	8004bd8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8093 	beq.w	8004d68 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c50:	d12a      	bne.n	8004ca8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d126      	bne.n	8004ca8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d122      	bne.n	8004ca8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004c62:	230c      	movs	r3, #12
 8004c64:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004c66:	e014      	b.n	8004c92 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4a42      	ldr	r2, [pc, #264]	; (8004d74 <ADC_ConversionStop+0x158>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d90d      	bls.n	8004c8c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	f043 0210 	orr.w	r2, r3, #16
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	f043 0201 	orr.w	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e06e      	b.n	8004d6a <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d1e3      	bne.n	8004c68 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2240      	movs	r2, #64	; 0x40
 8004ca6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b60      	cmp	r3, #96	; 0x60
 8004cac:	d015      	beq.n	8004cda <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d10e      	bne.n	8004cda <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0210 	orr.w	r2, r2, #16
 8004cd8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b0c      	cmp	r3, #12
 8004cde:	d015      	beq.n	8004d0c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d10e      	bne.n	8004d0c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0220 	orr.w	r2, r2, #32
 8004d0a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b60      	cmp	r3, #96	; 0x60
 8004d10:	d004      	beq.n	8004d1c <ADC_ConversionStop+0x100>
 8004d12:	2b6c      	cmp	r3, #108	; 0x6c
 8004d14:	d105      	bne.n	8004d22 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004d16:	230c      	movs	r3, #12
 8004d18:	617b      	str	r3, [r7, #20]
        break;
 8004d1a:	e005      	b.n	8004d28 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	617b      	str	r3, [r7, #20]
        break;
 8004d20:	e002      	b.n	8004d28 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004d22:	2304      	movs	r3, #4
 8004d24:	617b      	str	r3, [r7, #20]
        break;
 8004d26:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004d28:	f7fe fac6 	bl	80032b8 <HAL_GetTick>
 8004d2c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d2e:	e014      	b.n	8004d5a <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d30:	f7fe fac2 	bl	80032b8 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b0b      	cmp	r3, #11
 8004d3c:	d90d      	bls.n	8004d5a <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f043 0210 	orr.w	r2, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f043 0201 	orr.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e007      	b.n	8004d6a <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e3      	bne.n	8004d30 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	000993ff 	.word	0x000993ff

08004d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <__NVIC_SetPriorityGrouping+0x44>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d94:	4013      	ands	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004daa:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <__NVIC_SetPriorityGrouping+0x44>)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	60d3      	str	r3, [r2, #12]
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	e000ed00 	.word	0xe000ed00

08004dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	f003 0307 	and.w	r3, r3, #7
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	db0b      	blt.n	8004e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	f003 021f 	and.w	r2, r3, #31
 8004df4:	4907      	ldr	r1, [pc, #28]	; (8004e14 <__NVIC_EnableIRQ+0x38>)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8004e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	e000e100 	.word	0xe000e100

08004e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	6039      	str	r1, [r7, #0]
 8004e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	db0a      	blt.n	8004e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	490c      	ldr	r1, [pc, #48]	; (8004e64 <__NVIC_SetPriority+0x4c>)
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	0112      	lsls	r2, r2, #4
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e40:	e00a      	b.n	8004e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	4908      	ldr	r1, [pc, #32]	; (8004e68 <__NVIC_SetPriority+0x50>)
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	3b04      	subs	r3, #4
 8004e50:	0112      	lsls	r2, r2, #4
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	440b      	add	r3, r1
 8004e56:	761a      	strb	r2, [r3, #24]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	e000e100 	.word	0xe000e100
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b089      	sub	sp, #36	; 0x24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f1c3 0307 	rsb	r3, r3, #7
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	bf28      	it	cs
 8004e8a:	2304      	movcs	r3, #4
 8004e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3304      	adds	r3, #4
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d902      	bls.n	8004e9c <NVIC_EncodePriority+0x30>
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3b03      	subs	r3, #3
 8004e9a:	e000      	b.n	8004e9e <NVIC_EncodePriority+0x32>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43da      	mvns	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	401a      	ands	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	43d9      	mvns	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec4:	4313      	orrs	r3, r2
         );
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3724      	adds	r7, #36	; 0x24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff ff4c 	bl	8004d78 <__NVIC_SetPriorityGrouping>
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004efa:	f7ff ff61 	bl	8004dc0 <__NVIC_GetPriorityGrouping>
 8004efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	6978      	ldr	r0, [r7, #20]
 8004f06:	f7ff ffb1 	bl	8004e6c <NVIC_EncodePriority>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff ff80 	bl	8004e18 <__NVIC_SetPriority>
}
 8004f18:	bf00      	nop
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff ff54 	bl	8004ddc <__NVIC_EnableIRQ>
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f4a:	e160      	b.n	800520e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2101      	movs	r1, #1
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8152 	beq.w	8005208 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x38>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b12      	cmp	r3, #18
 8004f72:	d123      	bne.n	8004fbc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	08da      	lsrs	r2, r3, #3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3208      	adds	r2, #8
 8004f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	08da      	lsrs	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3208      	adds	r2, #8
 8004fb6:	6939      	ldr	r1, [r7, #16]
 8004fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 0203 	and.w	r2, r3, #3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d00b      	beq.n	8005010 <HAL_GPIO_Init+0xd4>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d007      	beq.n	8005010 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005004:	2b11      	cmp	r3, #17
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b12      	cmp	r3, #18
 800500e:	d130      	bne.n	8005072 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	2203      	movs	r2, #3
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005046:	2201      	movs	r2, #1
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 0201 	and.w	r2, r3, #1
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2203      	movs	r2, #3
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 80ac 	beq.w	8005208 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b0:	4b5e      	ldr	r3, [pc, #376]	; (800522c <HAL_GPIO_Init+0x2f0>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	4a5d      	ldr	r2, [pc, #372]	; (800522c <HAL_GPIO_Init+0x2f0>)
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	6193      	str	r3, [r2, #24]
 80050bc:	4b5b      	ldr	r3, [pc, #364]	; (800522c <HAL_GPIO_Init+0x2f0>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80050c8:	4a59      	ldr	r2, [pc, #356]	; (8005230 <HAL_GPIO_Init+0x2f4>)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	3302      	adds	r3, #2
 80050d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	220f      	movs	r2, #15
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4013      	ands	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050f2:	d025      	beq.n	8005140 <HAL_GPIO_Init+0x204>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a4f      	ldr	r2, [pc, #316]	; (8005234 <HAL_GPIO_Init+0x2f8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d01f      	beq.n	800513c <HAL_GPIO_Init+0x200>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a4e      	ldr	r2, [pc, #312]	; (8005238 <HAL_GPIO_Init+0x2fc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d019      	beq.n	8005138 <HAL_GPIO_Init+0x1fc>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a4d      	ldr	r2, [pc, #308]	; (800523c <HAL_GPIO_Init+0x300>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <HAL_GPIO_Init+0x1f8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a4c      	ldr	r2, [pc, #304]	; (8005240 <HAL_GPIO_Init+0x304>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00d      	beq.n	8005130 <HAL_GPIO_Init+0x1f4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a4b      	ldr	r2, [pc, #300]	; (8005244 <HAL_GPIO_Init+0x308>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <HAL_GPIO_Init+0x1f0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a4a      	ldr	r2, [pc, #296]	; (8005248 <HAL_GPIO_Init+0x30c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d101      	bne.n	8005128 <HAL_GPIO_Init+0x1ec>
 8005124:	2306      	movs	r3, #6
 8005126:	e00c      	b.n	8005142 <HAL_GPIO_Init+0x206>
 8005128:	2307      	movs	r3, #7
 800512a:	e00a      	b.n	8005142 <HAL_GPIO_Init+0x206>
 800512c:	2305      	movs	r3, #5
 800512e:	e008      	b.n	8005142 <HAL_GPIO_Init+0x206>
 8005130:	2304      	movs	r3, #4
 8005132:	e006      	b.n	8005142 <HAL_GPIO_Init+0x206>
 8005134:	2303      	movs	r3, #3
 8005136:	e004      	b.n	8005142 <HAL_GPIO_Init+0x206>
 8005138:	2302      	movs	r3, #2
 800513a:	e002      	b.n	8005142 <HAL_GPIO_Init+0x206>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_GPIO_Init+0x206>
 8005140:	2300      	movs	r3, #0
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	f002 0203 	and.w	r2, r2, #3
 8005148:	0092      	lsls	r2, r2, #2
 800514a:	4093      	lsls	r3, r2
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005152:	4937      	ldr	r1, [pc, #220]	; (8005230 <HAL_GPIO_Init+0x2f4>)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	089b      	lsrs	r3, r3, #2
 8005158:	3302      	adds	r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005160:	4b3a      	ldr	r3, [pc, #232]	; (800524c <HAL_GPIO_Init+0x310>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	43db      	mvns	r3, r3
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005184:	4a31      	ldr	r2, [pc, #196]	; (800524c <HAL_GPIO_Init+0x310>)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800518a:	4b30      	ldr	r3, [pc, #192]	; (800524c <HAL_GPIO_Init+0x310>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	43db      	mvns	r3, r3
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4013      	ands	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051ae:	4a27      	ldr	r2, [pc, #156]	; (800524c <HAL_GPIO_Init+0x310>)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051b4:	4b25      	ldr	r3, [pc, #148]	; (800524c <HAL_GPIO_Init+0x310>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	43db      	mvns	r3, r3
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4013      	ands	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80051d8:	4a1c      	ldr	r2, [pc, #112]	; (800524c <HAL_GPIO_Init+0x310>)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051de:	4b1b      	ldr	r3, [pc, #108]	; (800524c <HAL_GPIO_Init+0x310>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	43db      	mvns	r3, r3
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4013      	ands	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <HAL_GPIO_Init+0x310>)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	3301      	adds	r3, #1
 800520c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	f47f ae97 	bne.w	8004f4c <HAL_GPIO_Init+0x10>
  }
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000
 8005230:	40010000 	.word	0x40010000
 8005234:	48000400 	.word	0x48000400
 8005238:	48000800 	.word	0x48000800
 800523c:	48000c00 	.word	0x48000c00
 8005240:	48001000 	.word	0x48001000
 8005244:	48001400 	.word	0x48001400
 8005248:	48001800 	.word	0x48001800
 800524c:	40010400 	.word	0x40010400

08005250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	807b      	strh	r3, [r7, #2]
 800525c:	4613      	mov	r3, r2
 800525e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005260:	787b      	ldrb	r3, [r7, #1]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005266:	887a      	ldrh	r2, [r7, #2]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800526c:	e002      	b.n	8005274 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800526e:	887a      	ldrh	r2, [r7, #2]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e081      	b.n	8005396 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fd fce6 	bl	8002c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	e006      	b.n	8005308 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005306:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d104      	bne.n	800531a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005318:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800533c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	ea42 0103 	orr.w	r1, r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69d9      	ldr	r1, [r3, #28]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	817b      	strh	r3, [r7, #10]
 80053b2:	460b      	mov	r3, r1
 80053b4:	813b      	strh	r3, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	f040 80f9 	bne.w	80055ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_I2C_Mem_Write+0x34>
 80053ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0ed      	b.n	80055bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_I2C_Mem_Write+0x4e>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e0e6      	b.n	80055bc <HAL_I2C_Mem_Write+0x21c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053f6:	f7fd ff5f 	bl	80032b8 <HAL_GetTick>
 80053fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2319      	movs	r3, #25
 8005402:	2201      	movs	r2, #1
 8005404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fac3 	bl	8005994 <I2C_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0d1      	b.n	80055bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2221      	movs	r2, #33	; 0x21
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2240      	movs	r2, #64	; 0x40
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a3a      	ldr	r2, [r7, #32]
 8005432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005440:	88f8      	ldrh	r0, [r7, #6]
 8005442:	893a      	ldrh	r2, [r7, #8]
 8005444:	8979      	ldrh	r1, [r7, #10]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	4603      	mov	r3, r0
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f9d3 	bl	80057fc <I2C_RequestMemoryWrite>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0a9      	b.n	80055bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2bff      	cmp	r3, #255	; 0xff
 8005470:	d90e      	bls.n	8005490 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	22ff      	movs	r2, #255	; 0xff
 8005476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547c:	b2da      	uxtb	r2, r3
 800547e:	8979      	ldrh	r1, [r7, #10]
 8005480:	2300      	movs	r3, #0
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fba5 	bl	8005bd8 <I2C_TransferConfig>
 800548e:	e00f      	b.n	80054b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	8979      	ldrh	r1, [r7, #10]
 80054a2:	2300      	movs	r3, #0
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fb94 	bl	8005bd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 faad 	bl	8005a14 <I2C_WaitOnTXISFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e07b      	b.n	80055bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d034      	beq.n	8005568 <HAL_I2C_Mem_Write+0x1c8>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d130      	bne.n	8005568 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	2200      	movs	r2, #0
 800550e:	2180      	movs	r1, #128	; 0x80
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fa3f 	bl	8005994 <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e04d      	b.n	80055bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	2bff      	cmp	r3, #255	; 0xff
 8005528:	d90e      	bls.n	8005548 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	22ff      	movs	r2, #255	; 0xff
 800552e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005534:	b2da      	uxtb	r2, r3
 8005536:	8979      	ldrh	r1, [r7, #10]
 8005538:	2300      	movs	r3, #0
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fb49 	bl	8005bd8 <I2C_TransferConfig>
 8005546:	e00f      	b.n	8005568 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	b2da      	uxtb	r2, r3
 8005558:	8979      	ldrh	r1, [r7, #10]
 800555a:	2300      	movs	r3, #0
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fb38 	bl	8005bd8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d19e      	bne.n	80054b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fa8c 	bl	8005a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e01a      	b.n	80055bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2220      	movs	r2, #32
 800558c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <HAL_I2C_Mem_Write+0x224>)
 800559a:	400b      	ands	r3, r1
 800559c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
  }
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	fe00e800 	.word	0xfe00e800

080055c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	4608      	mov	r0, r1
 80055d2:	4611      	mov	r1, r2
 80055d4:	461a      	mov	r2, r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	817b      	strh	r3, [r7, #10]
 80055da:	460b      	mov	r3, r1
 80055dc:	813b      	strh	r3, [r7, #8]
 80055de:	4613      	mov	r3, r2
 80055e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	f040 80fd 	bne.w	80057ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_I2C_Mem_Read+0x34>
 80055f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d105      	bne.n	8005608 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005602:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0f1      	b.n	80057ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_I2C_Mem_Read+0x4e>
 8005612:	2302      	movs	r3, #2
 8005614:	e0ea      	b.n	80057ec <HAL_I2C_Mem_Read+0x224>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800561e:	f7fd fe4b 	bl	80032b8 <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	2319      	movs	r3, #25
 800562a:	2201      	movs	r2, #1
 800562c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f9af 	bl	8005994 <I2C_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0d5      	b.n	80057ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2222      	movs	r2, #34	; 0x22
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2240      	movs	r2, #64	; 0x40
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a3a      	ldr	r2, [r7, #32]
 800565a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005668:	88f8      	ldrh	r0, [r7, #6]
 800566a:	893a      	ldrh	r2, [r7, #8]
 800566c:	8979      	ldrh	r1, [r7, #10]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	4603      	mov	r3, r0
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f913 	bl	80058a4 <I2C_RequestMemoryRead>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0ad      	b.n	80057ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	2bff      	cmp	r3, #255	; 0xff
 8005698:	d90e      	bls.n	80056b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	22ff      	movs	r2, #255	; 0xff
 800569e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	8979      	ldrh	r1, [r7, #10]
 80056a8:	4b52      	ldr	r3, [pc, #328]	; (80057f4 <HAL_I2C_Mem_Read+0x22c>)
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fa91 	bl	8005bd8 <I2C_TransferConfig>
 80056b6:	e00f      	b.n	80056d8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	8979      	ldrh	r1, [r7, #10]
 80056ca:	4b4a      	ldr	r3, [pc, #296]	; (80057f4 <HAL_I2C_Mem_Read+0x22c>)
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fa80 	bl	8005bd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	2200      	movs	r2, #0
 80056e0:	2104      	movs	r1, #4
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f956 	bl	8005994 <I2C_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e07c      	b.n	80057ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d034      	beq.n	8005798 <HAL_I2C_Mem_Read+0x1d0>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005732:	2b00      	cmp	r3, #0
 8005734:	d130      	bne.n	8005798 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	2200      	movs	r2, #0
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f927 	bl	8005994 <I2C_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e04d      	b.n	80057ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2bff      	cmp	r3, #255	; 0xff
 8005758:	d90e      	bls.n	8005778 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005764:	b2da      	uxtb	r2, r3
 8005766:	8979      	ldrh	r1, [r7, #10]
 8005768:	2300      	movs	r3, #0
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fa31 	bl	8005bd8 <I2C_TransferConfig>
 8005776:	e00f      	b.n	8005798 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005786:	b2da      	uxtb	r2, r3
 8005788:	8979      	ldrh	r1, [r7, #10]
 800578a:	2300      	movs	r3, #0
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fa20 	bl	8005bd8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d19a      	bne.n	80056d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f974 	bl	8005a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e01a      	b.n	80057ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2220      	movs	r2, #32
 80057bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_I2C_Mem_Read+0x230>)
 80057ca:	400b      	ands	r3, r1
 80057cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	80002400 	.word	0x80002400
 80057f8:	fe00e800 	.word	0xfe00e800

080057fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	4608      	mov	r0, r1
 8005806:	4611      	mov	r1, r2
 8005808:	461a      	mov	r2, r3
 800580a:	4603      	mov	r3, r0
 800580c:	817b      	strh	r3, [r7, #10]
 800580e:	460b      	mov	r3, r1
 8005810:	813b      	strh	r3, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	8979      	ldrh	r1, [r7, #10]
 800581c:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <I2C_RequestMemoryWrite+0xa4>)
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f9d7 	bl	8005bd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	69b9      	ldr	r1, [r7, #24]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f8f0 	bl	8005a14 <I2C_WaitOnTXISFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e02c      	b.n	8005898 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d105      	bne.n	8005850 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005844:	893b      	ldrh	r3, [r7, #8]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	629a      	str	r2, [r3, #40]	; 0x28
 800584e:	e015      	b.n	800587c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005850:	893b      	ldrh	r3, [r7, #8]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	b29b      	uxth	r3, r3
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	69b9      	ldr	r1, [r7, #24]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f8d6 	bl	8005a14 <I2C_WaitOnTXISFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e012      	b.n	8005898 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005872:	893b      	ldrh	r3, [r7, #8]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2200      	movs	r2, #0
 8005884:	2180      	movs	r1, #128	; 0x80
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f884 	bl	8005994 <I2C_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	80002000 	.word	0x80002000

080058a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	4608      	mov	r0, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	461a      	mov	r2, r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	817b      	strh	r3, [r7, #10]
 80058b6:	460b      	mov	r3, r1
 80058b8:	813b      	strh	r3, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	8979      	ldrh	r1, [r7, #10]
 80058c4:	4b20      	ldr	r3, [pc, #128]	; (8005948 <I2C_RequestMemoryRead+0xa4>)
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2300      	movs	r3, #0
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f984 	bl	8005bd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	69b9      	ldr	r1, [r7, #24]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f89d 	bl	8005a14 <I2C_WaitOnTXISFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e02c      	b.n	800593e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d105      	bne.n	80058f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058ea:	893b      	ldrh	r3, [r7, #8]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
 80058f4:	e015      	b.n	8005922 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058f6:	893b      	ldrh	r3, [r7, #8]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	69b9      	ldr	r1, [r7, #24]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f883 	bl	8005a14 <I2C_WaitOnTXISFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e012      	b.n	800593e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005918:	893b      	ldrh	r3, [r7, #8]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2200      	movs	r2, #0
 800592a:	2140      	movs	r1, #64	; 0x40
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f831 	bl	8005994 <I2C_WaitOnFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	80002000 	.word	0x80002000

0800594c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b02      	cmp	r3, #2
 8005960:	d103      	bne.n	800596a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d007      	beq.n	8005988 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	619a      	str	r2, [r3, #24]
  }
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059a4:	e022      	b.n	80059ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d01e      	beq.n	80059ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fd fc83 	bl	80032b8 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d113      	bne.n	80059ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e00f      	b.n	8005a0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4013      	ands	r3, r2
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d0cd      	beq.n	80059a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a20:	e02c      	b.n	8005a7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f870 	bl	8005b0c <I2C_IsAcknowledgeFailed>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e02a      	b.n	8005a8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d01e      	beq.n	8005a7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3e:	f7fd fc3b 	bl	80032b8 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d113      	bne.n	8005a7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a58:	f043 0220 	orr.w	r2, r3, #32
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e007      	b.n	8005a8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d1cb      	bne.n	8005a22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aa0:	e028      	b.n	8005af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f830 	bl	8005b0c <I2C_IsAcknowledgeFailed>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e026      	b.n	8005b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab6:	f7fd fbff 	bl	80032b8 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d302      	bcc.n	8005acc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d113      	bne.n	8005af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad0:	f043 0220 	orr.w	r2, r3, #32
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e007      	b.n	8005b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d1cf      	bne.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b10      	cmp	r3, #16
 8005b24:	d151      	bne.n	8005bca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b26:	e022      	b.n	8005b6e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d01e      	beq.n	8005b6e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b30:	f7fd fbc2 	bl	80032b8 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <I2C_IsAcknowledgeFailed+0x3a>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d113      	bne.n	8005b6e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	f043 0220 	orr.w	r2, r3, #32
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e02e      	b.n	8005bcc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d1d5      	bne.n	8005b28 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2210      	movs	r2, #16
 8005b82:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff fedd 	bl	800594c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6859      	ldr	r1, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <I2C_IsAcknowledgeFailed+0xc8>)
 8005b9e:	400b      	ands	r3, r1
 8005ba0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	fe00e800 	.word	0xfe00e800

08005bd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	817b      	strh	r3, [r7, #10]
 8005be6:	4613      	mov	r3, r2
 8005be8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	0d5b      	lsrs	r3, r3, #21
 8005bf4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <I2C_TransferConfig+0x58>)
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	ea02 0103 	and.w	r1, r2, r3
 8005c02:	897b      	ldrh	r3, [r7, #10]
 8005c04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c08:	7a7b      	ldrb	r3, [r7, #9]
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c22:	bf00      	nop
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	03ff63ff 	.word	0x03ff63ff

08005c34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d138      	bne.n	8005cbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e032      	b.n	8005cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2224      	movs	r2, #36	; 0x24
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e000      	b.n	8005cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d139      	bne.n	8005d54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e033      	b.n	8005d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2224      	movs	r2, #36	; 0x24
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0201 	bic.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e000      	b.n	8005d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	1d3b      	adds	r3, r7, #4
 8005d6e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d70:	1d3b      	adds	r3, r7, #4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f000 bf01 	b.w	8006b80 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8160 	beq.w	800604e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d8e:	4bae      	ldr	r3, [pc, #696]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d00c      	beq.n	8005db4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d9a:	4bab      	ldr	r3, [pc, #684]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d159      	bne.n	8005e5a <HAL_RCC_OscConfig+0xf6>
 8005da6:	4ba8      	ldr	r3, [pc, #672]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d152      	bne.n	8005e5a <HAL_RCC_OscConfig+0xf6>
 8005db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005db8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005dc0:	fa93 f3a3 	rbit	r3, r3
 8005dc4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005dc8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dcc:	fab3 f383 	clz	r3, r3
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d102      	bne.n	8005de6 <HAL_RCC_OscConfig+0x82>
 8005de0:	4b99      	ldr	r3, [pc, #612]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	e015      	b.n	8005e12 <HAL_RCC_OscConfig+0xae>
 8005de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005df2:	fa93 f3a3 	rbit	r3, r3
 8005df6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dfe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005e02:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005e06:	fa93 f3a3 	rbit	r3, r3
 8005e0a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005e0e:	4b8e      	ldr	r3, [pc, #568]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e16:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005e1a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005e1e:	fa92 f2a2 	rbit	r2, r2
 8005e22:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005e26:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005e2a:	fab2 f282 	clz	r2, r2
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	f042 0220 	orr.w	r2, r2, #32
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	f002 021f 	and.w	r2, r2, #31
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8102 	beq.w	800604c <HAL_RCC_OscConfig+0x2e8>
 8005e48:	1d3b      	adds	r3, r7, #4
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 80fc 	bne.w	800604c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f000 be93 	b.w	8006b80 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e64:	d106      	bne.n	8005e74 <HAL_RCC_OscConfig+0x110>
 8005e66:	4b78      	ldr	r3, [pc, #480]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a77      	ldr	r2, [pc, #476]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e030      	b.n	8005ed6 <HAL_RCC_OscConfig+0x172>
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x134>
 8005e7e:	4b72      	ldr	r3, [pc, #456]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a71      	ldr	r2, [pc, #452]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4b6f      	ldr	r3, [pc, #444]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a6e      	ldr	r2, [pc, #440]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e01e      	b.n	8005ed6 <HAL_RCC_OscConfig+0x172>
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea2:	d10c      	bne.n	8005ebe <HAL_RCC_OscConfig+0x15a>
 8005ea4:	4b68      	ldr	r3, [pc, #416]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a67      	ldr	r2, [pc, #412]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b65      	ldr	r3, [pc, #404]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a64      	ldr	r2, [pc, #400]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	e00b      	b.n	8005ed6 <HAL_RCC_OscConfig+0x172>
 8005ebe:	4b62      	ldr	r3, [pc, #392]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a61      	ldr	r2, [pc, #388]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a5e      	ldr	r2, [pc, #376]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d059      	beq.n	8005f94 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fd f9ea 	bl	80032b8 <HAL_GetTick>
 8005ee4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee8:	e00a      	b.n	8005f00 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eea:	f7fd f9e5 	bl	80032b8 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d902      	bls.n	8005f00 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	f000 be40 	b.w	8006b80 <HAL_RCC_OscConfig+0xe1c>
 8005f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f04:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005f0c:	fa93 f3a3 	rbit	r3, r3
 8005f10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005f14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f18:	fab3 f383 	clz	r3, r3
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d102      	bne.n	8005f32 <HAL_RCC_OscConfig+0x1ce>
 8005f2c:	4b46      	ldr	r3, [pc, #280]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	e015      	b.n	8005f5e <HAL_RCC_OscConfig+0x1fa>
 8005f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005f3e:	fa93 f3a3 	rbit	r3, r3
 8005f42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005f4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005f52:	fa93 f3a3 	rbit	r3, r3
 8005f56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f62:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005f66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005f6a:	fa92 f2a2 	rbit	r2, r2
 8005f6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8005f72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005f76:	fab2 f282 	clz	r2, r2
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	f042 0220 	orr.w	r2, r2, #32
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	f002 021f 	and.w	r2, r2, #31
 8005f86:	2101      	movs	r1, #1
 8005f88:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0ab      	beq.n	8005eea <HAL_RCC_OscConfig+0x186>
 8005f92:	e05c      	b.n	800604e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fd f990 	bl	80032b8 <HAL_GetTick>
 8005f98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f9c:	e00a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f9e:	f7fd f98b 	bl	80032b8 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b64      	cmp	r3, #100	; 0x64
 8005fac:	d902      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	f000 bde6 	b.w	8006b80 <HAL_RCC_OscConfig+0xe1c>
 8005fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fb8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005fc0:	fa93 f3a3 	rbit	r3, r3
 8005fc4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005fc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fcc:	fab3 f383 	clz	r3, r3
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d102      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x282>
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	e015      	b.n	8006012 <HAL_RCC_OscConfig+0x2ae>
 8005fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005ff2:	fa93 f3a3 	rbit	r3, r3
 8005ff6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ffe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006002:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006006:	fa93 f3a3 	rbit	r3, r3
 800600a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800600e:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <HAL_RCC_OscConfig+0x2e4>)
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006016:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800601a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800601e:	fa92 f2a2 	rbit	r2, r2
 8006022:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006026:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800602a:	fab2 f282 	clz	r2, r2
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	f042 0220 	orr.w	r2, r2, #32
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	f002 021f 	and.w	r2, r2, #31
 800603a:	2101      	movs	r1, #1
 800603c:	fa01 f202 	lsl.w	r2, r1, r2
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1ab      	bne.n	8005f9e <HAL_RCC_OscConfig+0x23a>
 8006046:	e002      	b.n	800604e <HAL_RCC_OscConfig+0x2ea>
 8006048:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8170 	beq.w	800633e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800605e:	4bd0      	ldr	r3, [pc, #832]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800606a:	4bcd      	ldr	r3, [pc, #820]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f003 030c 	and.w	r3, r3, #12
 8006072:	2b08      	cmp	r3, #8
 8006074:	d16d      	bne.n	8006152 <HAL_RCC_OscConfig+0x3ee>
 8006076:	4bca      	ldr	r3, [pc, #808]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006082:	d166      	bne.n	8006152 <HAL_RCC_OscConfig+0x3ee>
 8006084:	2302      	movs	r3, #2
 8006086:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800608e:	fa93 f3a3 	rbit	r3, r3
 8006092:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006096:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800609a:	fab3 f383 	clz	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f043 0301 	orr.w	r3, r3, #1
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d102      	bne.n	80060b4 <HAL_RCC_OscConfig+0x350>
 80060ae:	4bbc      	ldr	r3, [pc, #752]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	e013      	b.n	80060dc <HAL_RCC_OscConfig+0x378>
 80060b4:	2302      	movs	r3, #2
 80060b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80060be:	fa93 f3a3 	rbit	r3, r3
 80060c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80060c6:	2302      	movs	r3, #2
 80060c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80060cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80060d0:	fa93 f3a3 	rbit	r3, r3
 80060d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80060d8:	4bb1      	ldr	r3, [pc, #708]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	2202      	movs	r2, #2
 80060de:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80060e2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80060e6:	fa92 f2a2 	rbit	r2, r2
 80060ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80060ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80060f2:	fab2 f282 	clz	r2, r2
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	f042 0220 	orr.w	r2, r2, #32
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	f002 021f 	and.w	r2, r2, #31
 8006102:	2101      	movs	r1, #1
 8006104:	fa01 f202 	lsl.w	r2, r1, r2
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_RCC_OscConfig+0x3ba>
 800610e:	1d3b      	adds	r3, r7, #4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d002      	beq.n	800611e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f000 bd31 	b.w	8006b80 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611e:	4ba0      	ldr	r3, [pc, #640]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006126:	1d3b      	adds	r3, r7, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	21f8      	movs	r1, #248	; 0xf8
 800612e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006132:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006136:	fa91 f1a1 	rbit	r1, r1
 800613a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800613e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006142:	fab1 f181 	clz	r1, r1
 8006146:	b2c9      	uxtb	r1, r1
 8006148:	408b      	lsls	r3, r1
 800614a:	4995      	ldr	r1, [pc, #596]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006150:	e0f5      	b.n	800633e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8085 	beq.w	8006268 <HAL_RCC_OscConfig+0x504>
 800615e:	2301      	movs	r3, #1
 8006160:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006164:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006168:	fa93 f3a3 	rbit	r3, r3
 800616c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006170:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006174:	fab3 f383 	clz	r3, r3
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800617e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	461a      	mov	r2, r3
 8006186:	2301      	movs	r3, #1
 8006188:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618a:	f7fd f895 	bl	80032b8 <HAL_GetTick>
 800618e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006192:	e00a      	b.n	80061aa <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006194:	f7fd f890 	bl	80032b8 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d902      	bls.n	80061aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	f000 bceb 	b.w	8006b80 <HAL_RCC_OscConfig+0xe1c>
 80061aa:	2302      	movs	r3, #2
 80061ac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80061b4:	fa93 f3a3 	rbit	r3, r3
 80061b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80061bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061c0:	fab3 f383 	clz	r3, r3
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d102      	bne.n	80061da <HAL_RCC_OscConfig+0x476>
 80061d4:	4b72      	ldr	r3, [pc, #456]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	e013      	b.n	8006202 <HAL_RCC_OscConfig+0x49e>
 80061da:	2302      	movs	r3, #2
 80061dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80061e4:	fa93 f3a3 	rbit	r3, r3
 80061e8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80061ec:	2302      	movs	r3, #2
 80061ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80061f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80061f6:	fa93 f3a3 	rbit	r3, r3
 80061fa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80061fe:	4b68      	ldr	r3, [pc, #416]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	2202      	movs	r2, #2
 8006204:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006208:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800620c:	fa92 f2a2 	rbit	r2, r2
 8006210:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006214:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006218:	fab2 f282 	clz	r2, r2
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	f042 0220 	orr.w	r2, r2, #32
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	f002 021f 	and.w	r2, r2, #31
 8006228:	2101      	movs	r1, #1
 800622a:	fa01 f202 	lsl.w	r2, r1, r2
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0af      	beq.n	8006194 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006234:	4b5a      	ldr	r3, [pc, #360]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800623c:	1d3b      	adds	r3, r7, #4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	21f8      	movs	r1, #248	; 0xf8
 8006244:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006248:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800624c:	fa91 f1a1 	rbit	r1, r1
 8006250:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006254:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006258:	fab1 f181 	clz	r1, r1
 800625c:	b2c9      	uxtb	r1, r1
 800625e:	408b      	lsls	r3, r1
 8006260:	494f      	ldr	r1, [pc, #316]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 8006262:	4313      	orrs	r3, r2
 8006264:	600b      	str	r3, [r1, #0]
 8006266:	e06a      	b.n	800633e <HAL_RCC_OscConfig+0x5da>
 8006268:	2301      	movs	r3, #1
 800626a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006272:	fa93 f3a3 	rbit	r3, r3
 8006276:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800627a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627e:	fab3 f383 	clz	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006288:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	461a      	mov	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fd f810 	bl	80032b8 <HAL_GetTick>
 8006298:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800629c:	e00a      	b.n	80062b4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800629e:	f7fd f80b 	bl	80032b8 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d902      	bls.n	80062b4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	f000 bc66 	b.w	8006b80 <HAL_RCC_OscConfig+0xe1c>
 80062b4:	2302      	movs	r3, #2
 80062b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062be:	fa93 f3a3 	rbit	r3, r3
 80062c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80062c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ca:	fab3 f383 	clz	r3, r3
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d102      	bne.n	80062e4 <HAL_RCC_OscConfig+0x580>
 80062de:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	e013      	b.n	800630c <HAL_RCC_OscConfig+0x5a8>
 80062e4:	2302      	movs	r3, #2
 80062e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ee:	fa93 f3a3 	rbit	r3, r3
 80062f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062f6:	2302      	movs	r3, #2
 80062f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80062fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006300:	fa93 f3a3 	rbit	r3, r3
 8006304:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006308:	4b25      	ldr	r3, [pc, #148]	; (80063a0 <HAL_RCC_OscConfig+0x63c>)
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	2202      	movs	r2, #2
 800630e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006312:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006316:	fa92 f2a2 	rbit	r2, r2
 800631a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800631e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006322:	fab2 f282 	clz	r2, r2
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	f042 0220 	orr.w	r2, r2, #32
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	f002 021f 	and.w	r2, r2, #31
 8006332:	2101      	movs	r1, #1
 8006334:	fa01 f202 	lsl.w	r2, r1, r2
 8006338:	4013      	ands	r3, r2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1af      	bne.n	800629e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80da 	beq.w	8006502 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d069      	beq.n	800642c <HAL_RCC_OscConfig+0x6c8>
 8006358:	2301      	movs	r3, #1
 800635a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006362:	fa93 f3a3 	rbit	r3, r3
 8006366:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800636a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800636e:	fab3 f383 	clz	r3, r3
 8006372:	b2db      	uxtb	r3, r3
 8006374:	461a      	mov	r2, r3
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <HAL_RCC_OscConfig+0x640>)
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	461a      	mov	r2, r3
 800637e:	2301      	movs	r3, #1
 8006380:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006382:	f7fc ff99 	bl	80032b8 <HAL_GetTick>
 8006386:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800638a:	e00d      	b.n	80063a8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800638c:	f7fc ff94 	bl	80032b8 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d905      	bls.n	80063a8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e3ef      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
 80063a0:	40021000 	.word	0x40021000
 80063a4:	10908120 	.word	0x10908120
 80063a8:	2302      	movs	r3, #2
 80063aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b2:	fa93 f2a3 	rbit	r2, r3
 80063b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80063c0:	2202      	movs	r2, #2
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	fa93 f2a3 	rbit	r2, r3
 80063ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80063d8:	2202      	movs	r2, #2
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	fa93 f2a3 	rbit	r2, r3
 80063e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80063ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ec:	4ba4      	ldr	r3, [pc, #656]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80063ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80063f4:	2102      	movs	r1, #2
 80063f6:	6019      	str	r1, [r3, #0]
 80063f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	fa93 f1a3 	rbit	r1, r3
 8006402:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006406:	6019      	str	r1, [r3, #0]
  return result;
 8006408:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	fab3 f383 	clz	r3, r3
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	2101      	movs	r1, #1
 8006420:	fa01 f303 	lsl.w	r3, r1, r3
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0b0      	beq.n	800638c <HAL_RCC_OscConfig+0x628>
 800642a:	e06a      	b.n	8006502 <HAL_RCC_OscConfig+0x79e>
 800642c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006434:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	fa93 f2a3 	rbit	r2, r3
 800643e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006442:	601a      	str	r2, [r3, #0]
  return result;
 8006444:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006448:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800644a:	fab3 f383 	clz	r3, r3
 800644e:	b2db      	uxtb	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	4b8c      	ldr	r3, [pc, #560]	; (8006684 <HAL_RCC_OscConfig+0x920>)
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800645e:	f7fc ff2b 	bl	80032b8 <HAL_GetTick>
 8006462:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006466:	e009      	b.n	800647c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006468:	f7fc ff26 	bl	80032b8 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e381      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
 800647c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006480:	2202      	movs	r2, #2
 8006482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006484:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	fa93 f2a3 	rbit	r2, r3
 800648e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006498:	2202      	movs	r2, #2
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	fa93 f2a3 	rbit	r2, r3
 80064a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80064b0:	2202      	movs	r2, #2
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	fa93 f2a3 	rbit	r2, r3
 80064be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80064c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c4:	4b6e      	ldr	r3, [pc, #440]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80064c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80064cc:	2102      	movs	r1, #2
 80064ce:	6019      	str	r1, [r3, #0]
 80064d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	fa93 f1a3 	rbit	r1, r3
 80064da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80064de:	6019      	str	r1, [r3, #0]
  return result;
 80064e0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	fab3 f383 	clz	r3, r3
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2101      	movs	r1, #1
 80064f8:	fa01 f303 	lsl.w	r3, r1, r3
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1b2      	bne.n	8006468 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006502:	1d3b      	adds	r3, r7, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8157 	beq.w	80067c0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006518:	4b59      	ldr	r3, [pc, #356]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d112      	bne.n	800654a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006524:	4b56      	ldr	r3, [pc, #344]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4a55      	ldr	r2, [pc, #340]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 800652a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652e:	61d3      	str	r3, [r2, #28]
 8006530:	4b53      	ldr	r3, [pc, #332]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006538:	f107 030c 	add.w	r3, r7, #12
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654a:	4b4f      	ldr	r3, [pc, #316]	; (8006688 <HAL_RCC_OscConfig+0x924>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d11a      	bne.n	800658c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006556:	4b4c      	ldr	r3, [pc, #304]	; (8006688 <HAL_RCC_OscConfig+0x924>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a4b      	ldr	r2, [pc, #300]	; (8006688 <HAL_RCC_OscConfig+0x924>)
 800655c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006560:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006562:	f7fc fea9 	bl	80032b8 <HAL_GetTick>
 8006566:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656a:	e009      	b.n	8006580 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656c:	f7fc fea4 	bl	80032b8 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b64      	cmp	r3, #100	; 0x64
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e2ff      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006580:	4b41      	ldr	r3, [pc, #260]	; (8006688 <HAL_RCC_OscConfig+0x924>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0ef      	beq.n	800656c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658c:	1d3b      	adds	r3, r7, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d106      	bne.n	80065a4 <HAL_RCC_OscConfig+0x840>
 8006596:	4b3a      	ldr	r3, [pc, #232]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	4a39      	ldr	r2, [pc, #228]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	6213      	str	r3, [r2, #32]
 80065a2:	e02f      	b.n	8006604 <HAL_RCC_OscConfig+0x8a0>
 80065a4:	1d3b      	adds	r3, r7, #4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10c      	bne.n	80065c8 <HAL_RCC_OscConfig+0x864>
 80065ae:	4b34      	ldr	r3, [pc, #208]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	4a33      	ldr	r2, [pc, #204]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	6213      	str	r3, [r2, #32]
 80065ba:	4b31      	ldr	r3, [pc, #196]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	4a30      	ldr	r2, [pc, #192]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065c0:	f023 0304 	bic.w	r3, r3, #4
 80065c4:	6213      	str	r3, [r2, #32]
 80065c6:	e01d      	b.n	8006604 <HAL_RCC_OscConfig+0x8a0>
 80065c8:	1d3b      	adds	r3, r7, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d10c      	bne.n	80065ec <HAL_RCC_OscConfig+0x888>
 80065d2:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	4a2a      	ldr	r2, [pc, #168]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065d8:	f043 0304 	orr.w	r3, r3, #4
 80065dc:	6213      	str	r3, [r2, #32]
 80065de:	4b28      	ldr	r3, [pc, #160]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	4a27      	ldr	r2, [pc, #156]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065e4:	f043 0301 	orr.w	r3, r3, #1
 80065e8:	6213      	str	r3, [r2, #32]
 80065ea:	e00b      	b.n	8006604 <HAL_RCC_OscConfig+0x8a0>
 80065ec:	4b24      	ldr	r3, [pc, #144]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	4a23      	ldr	r2, [pc, #140]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	6213      	str	r3, [r2, #32]
 80065f8:	4b21      	ldr	r3, [pc, #132]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	4a20      	ldr	r2, [pc, #128]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 80065fe:	f023 0304 	bic.w	r3, r3, #4
 8006602:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006604:	1d3b      	adds	r3, r7, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d06a      	beq.n	80066e4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800660e:	f7fc fe53 	bl	80032b8 <HAL_GetTick>
 8006612:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006616:	e00b      	b.n	8006630 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006618:	f7fc fe4e 	bl	80032b8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	f241 3288 	movw	r2, #5000	; 0x1388
 8006628:	4293      	cmp	r3, r2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e2a7      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
 8006630:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006634:	2202      	movs	r2, #2
 8006636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006638:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	fa93 f2a3 	rbit	r2, r3
 8006642:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800664c:	2202      	movs	r2, #2
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	fa93 f2a3 	rbit	r2, r3
 800665a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800665e:	601a      	str	r2, [r3, #0]
  return result;
 8006660:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006664:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006666:	fab3 f383 	clz	r3, r3
 800666a:	b2db      	uxtb	r3, r3
 800666c:	095b      	lsrs	r3, r3, #5
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f043 0302 	orr.w	r3, r3, #2
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d108      	bne.n	800668c <HAL_RCC_OscConfig+0x928>
 800667a:	4b01      	ldr	r3, [pc, #4]	; (8006680 <HAL_RCC_OscConfig+0x91c>)
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	e013      	b.n	80066a8 <HAL_RCC_OscConfig+0x944>
 8006680:	40021000 	.word	0x40021000
 8006684:	10908120 	.word	0x10908120
 8006688:	40007000 	.word	0x40007000
 800668c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006690:	2202      	movs	r2, #2
 8006692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006694:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	fa93 f2a3 	rbit	r2, r3
 800669e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	4bc0      	ldr	r3, [pc, #768]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80066ac:	2102      	movs	r1, #2
 80066ae:	6011      	str	r1, [r2, #0]
 80066b0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80066b4:	6812      	ldr	r2, [r2, #0]
 80066b6:	fa92 f1a2 	rbit	r1, r2
 80066ba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80066be:	6011      	str	r1, [r2, #0]
  return result;
 80066c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80066c4:	6812      	ldr	r2, [r2, #0]
 80066c6:	fab2 f282 	clz	r2, r2
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	f002 021f 	and.w	r2, r2, #31
 80066d6:	2101      	movs	r1, #1
 80066d8:	fa01 f202 	lsl.w	r2, r1, r2
 80066dc:	4013      	ands	r3, r2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d09a      	beq.n	8006618 <HAL_RCC_OscConfig+0x8b4>
 80066e2:	e063      	b.n	80067ac <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e4:	f7fc fde8 	bl	80032b8 <HAL_GetTick>
 80066e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ec:	e00b      	b.n	8006706 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ee:	f7fc fde3 	bl	80032b8 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fe:	4293      	cmp	r3, r2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e23c      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
 8006706:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800670a:	2202      	movs	r2, #2
 800670c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	fa93 f2a3 	rbit	r2, r3
 8006718:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006722:	2202      	movs	r2, #2
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	fa93 f2a3 	rbit	r2, r3
 8006730:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006734:	601a      	str	r2, [r3, #0]
  return result;
 8006736:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800673a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	fab3 f383 	clz	r3, r3
 8006740:	b2db      	uxtb	r3, r3
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f043 0302 	orr.w	r3, r3, #2
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d102      	bne.n	8006756 <HAL_RCC_OscConfig+0x9f2>
 8006750:	4b95      	ldr	r3, [pc, #596]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	e00d      	b.n	8006772 <HAL_RCC_OscConfig+0xa0e>
 8006756:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800675a:	2202      	movs	r2, #2
 800675c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	fa93 f2a3 	rbit	r2, r3
 8006768:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	4b8e      	ldr	r3, [pc, #568]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006776:	2102      	movs	r1, #2
 8006778:	6011      	str	r1, [r2, #0]
 800677a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	fa92 f1a2 	rbit	r1, r2
 8006784:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006788:	6011      	str	r1, [r2, #0]
  return result;
 800678a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	fab2 f282 	clz	r2, r2
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	f002 021f 	and.w	r2, r2, #31
 80067a0:	2101      	movs	r1, #1
 80067a2:	fa01 f202 	lsl.w	r2, r1, r2
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1a0      	bne.n	80066ee <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067ac:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d105      	bne.n	80067c0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b4:	4b7c      	ldr	r3, [pc, #496]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	4a7b      	ldr	r2, [pc, #492]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80067ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c0:	1d3b      	adds	r3, r7, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 81d9 	beq.w	8006b7e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067cc:	4b76      	ldr	r3, [pc, #472]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 030c 	and.w	r3, r3, #12
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	f000 81a6 	beq.w	8006b26 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	f040 811e 	bne.w	8006a22 <HAL_RCC_OscConfig+0xcbe>
 80067e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80067ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	fa93 f2a3 	rbit	r2, r3
 80067fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80067fe:	601a      	str	r2, [r3, #0]
  return result;
 8006800:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006804:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006806:	fab3 f383 	clz	r3, r3
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006810:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	461a      	mov	r2, r3
 8006818:	2300      	movs	r3, #0
 800681a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800681c:	f7fc fd4c 	bl	80032b8 <HAL_GetTick>
 8006820:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006824:	e009      	b.n	800683a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006826:	f7fc fd47 	bl	80032b8 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e1a2      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
 800683a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800683e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006844:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	fa93 f2a3 	rbit	r2, r3
 800684e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006852:	601a      	str	r2, [r3, #0]
  return result;
 8006854:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006858:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800685a:	fab3 f383 	clz	r3, r3
 800685e:	b2db      	uxtb	r3, r3
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b01      	cmp	r3, #1
 800686c:	d102      	bne.n	8006874 <HAL_RCC_OscConfig+0xb10>
 800686e:	4b4e      	ldr	r3, [pc, #312]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	e01b      	b.n	80068ac <HAL_RCC_OscConfig+0xb48>
 8006874:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800687c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	fa93 f2a3 	rbit	r2, r3
 8006888:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	fa93 f2a3 	rbit	r2, r3
 80068a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	4b3f      	ldr	r3, [pc, #252]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80068b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80068b4:	6011      	str	r1, [r2, #0]
 80068b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	fa92 f1a2 	rbit	r1, r2
 80068c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80068c4:	6011      	str	r1, [r2, #0]
  return result;
 80068c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	fab2 f282 	clz	r2, r2
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	f042 0220 	orr.w	r2, r2, #32
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	f002 021f 	and.w	r2, r2, #31
 80068dc:	2101      	movs	r1, #1
 80068de:	fa01 f202 	lsl.w	r2, r1, r2
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d19e      	bne.n	8006826 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068e8:	4b2f      	ldr	r3, [pc, #188]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	f023 020f 	bic.w	r2, r3, #15
 80068f0:	1d3b      	adds	r3, r7, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	492c      	ldr	r1, [pc, #176]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80068fc:	4b2a      	ldr	r3, [pc, #168]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006904:	1d3b      	adds	r3, r7, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6a19      	ldr	r1, [r3, #32]
 800690a:	1d3b      	adds	r3, r7, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	430b      	orrs	r3, r1
 8006912:	4925      	ldr	r1, [pc, #148]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 8006914:	4313      	orrs	r3, r2
 8006916:	604b      	str	r3, [r1, #4]
 8006918:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800691c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006922:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	fa93 f2a3 	rbit	r2, r3
 800692c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006930:	601a      	str	r2, [r3, #0]
  return result;
 8006932:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006936:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006938:	fab3 f383 	clz	r3, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006942:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	461a      	mov	r2, r3
 800694a:	2301      	movs	r3, #1
 800694c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694e:	f7fc fcb3 	bl	80032b8 <HAL_GetTick>
 8006952:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006956:	e009      	b.n	800696c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006958:	f7fc fcae 	bl	80032b8 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e109      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
 800696c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006970:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006976:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	fa93 f2a3 	rbit	r2, r3
 8006980:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006984:	601a      	str	r2, [r3, #0]
  return result;
 8006986:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800698a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800698c:	fab3 f383 	clz	r3, r3
 8006990:	b2db      	uxtb	r3, r3
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d105      	bne.n	80069ac <HAL_RCC_OscConfig+0xc48>
 80069a0:	4b01      	ldr	r3, [pc, #4]	; (80069a8 <HAL_RCC_OscConfig+0xc44>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	e01e      	b.n	80069e4 <HAL_RCC_OscConfig+0xc80>
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000
 80069ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80069b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	fa93 f2a3 	rbit	r2, r3
 80069c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80069ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	fa93 f2a3 	rbit	r2, r3
 80069da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	4b6a      	ldr	r3, [pc, #424]	; (8006b8c <HAL_RCC_OscConfig+0xe28>)
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80069e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80069ec:	6011      	str	r1, [r2, #0]
 80069ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80069f2:	6812      	ldr	r2, [r2, #0]
 80069f4:	fa92 f1a2 	rbit	r1, r2
 80069f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80069fc:	6011      	str	r1, [r2, #0]
  return result;
 80069fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	fab2 f282 	clz	r2, r2
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	f042 0220 	orr.w	r2, r2, #32
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	f002 021f 	and.w	r2, r2, #31
 8006a14:	2101      	movs	r1, #1
 8006a16:	fa01 f202 	lsl.w	r2, r1, r2
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d09b      	beq.n	8006958 <HAL_RCC_OscConfig+0xbf4>
 8006a20:	e0ad      	b.n	8006b7e <HAL_RCC_OscConfig+0xe1a>
 8006a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	fa93 f2a3 	rbit	r2, r3
 8006a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a3a:	601a      	str	r2, [r3, #0]
  return result;
 8006a3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a42:	fab3 f383 	clz	r3, r3
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	461a      	mov	r2, r3
 8006a54:	2300      	movs	r3, #0
 8006a56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a58:	f7fc fc2e 	bl	80032b8 <HAL_GetTick>
 8006a5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a60:	e009      	b.n	8006a76 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a62:	f7fc fc29 	bl	80032b8 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e084      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
 8006a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	fa93 f2a3 	rbit	r2, r3
 8006a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a8e:	601a      	str	r2, [r3, #0]
  return result;
 8006a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a96:	fab3 f383 	clz	r3, r3
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d102      	bne.n	8006ab0 <HAL_RCC_OscConfig+0xd4c>
 8006aaa:	4b38      	ldr	r3, [pc, #224]	; (8006b8c <HAL_RCC_OscConfig+0xe28>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	e01b      	b.n	8006ae8 <HAL_RCC_OscConfig+0xd84>
 8006ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	fa93 f2a3 	rbit	r2, r3
 8006ac4:	f107 0320 	add.w	r3, r7, #32
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	f107 031c 	add.w	r3, r7, #28
 8006ace:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f107 031c 	add.w	r3, r7, #28
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	fa93 f2a3 	rbit	r2, r3
 8006ade:	f107 0318 	add.w	r3, r7, #24
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	4b29      	ldr	r3, [pc, #164]	; (8006b8c <HAL_RCC_OscConfig+0xe28>)
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	f107 0214 	add.w	r2, r7, #20
 8006aec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006af0:	6011      	str	r1, [r2, #0]
 8006af2:	f107 0214 	add.w	r2, r7, #20
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	fa92 f1a2 	rbit	r1, r2
 8006afc:	f107 0210 	add.w	r2, r7, #16
 8006b00:	6011      	str	r1, [r2, #0]
  return result;
 8006b02:	f107 0210 	add.w	r2, r7, #16
 8006b06:	6812      	ldr	r2, [r2, #0]
 8006b08:	fab2 f282 	clz	r2, r2
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	f042 0220 	orr.w	r2, r2, #32
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	f002 021f 	and.w	r2, r2, #31
 8006b18:	2101      	movs	r1, #1
 8006b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d19e      	bne.n	8006a62 <HAL_RCC_OscConfig+0xcfe>
 8006b24:	e02b      	b.n	8006b7e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e025      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b34:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <HAL_RCC_OscConfig+0xe28>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006b3c:	4b13      	ldr	r3, [pc, #76]	; (8006b8c <HAL_RCC_OscConfig+0xe28>)
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006b44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b48:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d111      	bne.n	8006b7a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006b56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d108      	bne.n	8006b7a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	1d3b      	adds	r3, r7, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d001      	beq.n	8006b7e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40021000 	.word	0x40021000

08006b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b09e      	sub	sp, #120	; 0x78
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e162      	b.n	8006e6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba8:	4b90      	ldr	r3, [pc, #576]	; (8006dec <HAL_RCC_ClockConfig+0x25c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d910      	bls.n	8006bd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb6:	4b8d      	ldr	r3, [pc, #564]	; (8006dec <HAL_RCC_ClockConfig+0x25c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 0207 	bic.w	r2, r3, #7
 8006bbe:	498b      	ldr	r1, [pc, #556]	; (8006dec <HAL_RCC_ClockConfig+0x25c>)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc6:	4b89      	ldr	r3, [pc, #548]	; (8006dec <HAL_RCC_ClockConfig+0x25c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d001      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e14a      	b.n	8006e6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be4:	4b82      	ldr	r3, [pc, #520]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	497f      	ldr	r1, [pc, #508]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80dc 	beq.w	8006dbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d13c      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xf6>
 8006c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c14:	fa93 f3a3 	rbit	r3, r3
 8006c18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1c:	fab3 f383 	clz	r3, r3
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d102      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xa6>
 8006c30:	4b6f      	ldr	r3, [pc, #444]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	e00f      	b.n	8006c56 <HAL_RCC_ClockConfig+0xc6>
 8006c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c3e:	fa93 f3a3 	rbit	r3, r3
 8006c42:	667b      	str	r3, [r7, #100]	; 0x64
 8006c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c48:	663b      	str	r3, [r7, #96]	; 0x60
 8006c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c4c:	fa93 f3a3 	rbit	r3, r3
 8006c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c52:	4b67      	ldr	r3, [pc, #412]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c5e:	fa92 f2a2 	rbit	r2, r2
 8006c62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006c64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c66:	fab2 f282 	clz	r2, r2
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	f042 0220 	orr.w	r2, r2, #32
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	f002 021f 	and.w	r2, r2, #31
 8006c76:	2101      	movs	r1, #1
 8006c78:	fa01 f202 	lsl.w	r2, r1, r2
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d17b      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e0f3      	b.n	8006e6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d13c      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x178>
 8006c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c96:	fa93 f3a3 	rbit	r3, r3
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c9e:	fab3 f383 	clz	r3, r3
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d102      	bne.n	8006cb8 <HAL_RCC_ClockConfig+0x128>
 8006cb2:	4b4f      	ldr	r3, [pc, #316]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	e00f      	b.n	8006cd8 <HAL_RCC_ClockConfig+0x148>
 8006cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc0:	fa93 f3a3 	rbit	r3, r3
 8006cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cca:	643b      	str	r3, [r7, #64]	; 0x40
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cce:	fa93 f3a3 	rbit	r3, r3
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd4:	4b46      	ldr	r3, [pc, #280]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cdc:	63ba      	str	r2, [r7, #56]	; 0x38
 8006cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ce0:	fa92 f2a2 	rbit	r2, r2
 8006ce4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce8:	fab2 f282 	clz	r2, r2
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	f042 0220 	orr.w	r2, r2, #32
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	f002 021f 	and.w	r2, r2, #31
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8006cfe:	4013      	ands	r3, r2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d13a      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0b2      	b.n	8006e6e <HAL_RCC_ClockConfig+0x2de>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	fa93 f3a3 	rbit	r3, r3
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d16:	fab3 f383 	clz	r3, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d102      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x1a0>
 8006d2a:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	e00d      	b.n	8006d4c <HAL_RCC_ClockConfig+0x1bc>
 8006d30:	2302      	movs	r3, #2
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	fa93 f3a3 	rbit	r3, r3
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	623b      	str	r3, [r7, #32]
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	fa93 f3a3 	rbit	r3, r3
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	4b29      	ldr	r3, [pc, #164]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	61ba      	str	r2, [r7, #24]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	fa92 f2a2 	rbit	r2, r2
 8006d56:	617a      	str	r2, [r7, #20]
  return result;
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	fab2 f282 	clz	r2, r2
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	f042 0220 	orr.w	r2, r2, #32
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	f002 021f 	and.w	r2, r2, #31
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e079      	b.n	8006e6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d7a:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f023 0203 	bic.w	r2, r3, #3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	491a      	ldr	r1, [pc, #104]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d8c:	f7fc fa94 	bl	80032b8 <HAL_GetTick>
 8006d90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d92:	e00a      	b.n	8006daa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d94:	f7fc fa90 	bl	80032b8 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e061      	b.n	8006e6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006daa:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <HAL_RCC_ClockConfig+0x260>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f003 020c 	and.w	r2, r3, #12
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d1eb      	bne.n	8006d94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <HAL_RCC_ClockConfig+0x25c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d214      	bcs.n	8006df4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dca:	4b08      	ldr	r3, [pc, #32]	; (8006dec <HAL_RCC_ClockConfig+0x25c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f023 0207 	bic.w	r2, r3, #7
 8006dd2:	4906      	ldr	r1, [pc, #24]	; (8006dec <HAL_RCC_ClockConfig+0x25c>)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dda:	4b04      	ldr	r3, [pc, #16]	; (8006dec <HAL_RCC_ClockConfig+0x25c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d005      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e040      	b.n	8006e6e <HAL_RCC_ClockConfig+0x2de>
 8006dec:	40022000 	.word	0x40022000
 8006df0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e00:	4b1d      	ldr	r3, [pc, #116]	; (8006e78 <HAL_RCC_ClockConfig+0x2e8>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	491a      	ldr	r1, [pc, #104]	; (8006e78 <HAL_RCC_ClockConfig+0x2e8>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e1e:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <HAL_RCC_ClockConfig+0x2e8>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	4912      	ldr	r1, [pc, #72]	; (8006e78 <HAL_RCC_ClockConfig+0x2e8>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006e32:	f000 f829 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 8006e36:	4601      	mov	r1, r0
 8006e38:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <HAL_RCC_ClockConfig+0x2e8>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e40:	22f0      	movs	r2, #240	; 0xf0
 8006e42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	fa92 f2a2 	rbit	r2, r2
 8006e4a:	60fa      	str	r2, [r7, #12]
  return result;
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	fab2 f282 	clz	r2, r2
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	40d3      	lsrs	r3, r2
 8006e56:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <HAL_RCC_ClockConfig+0x2ec>)
 8006e58:	5cd3      	ldrb	r3, [r2, r3]
 8006e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8006e5e:	4a08      	ldr	r2, [pc, #32]	; (8006e80 <HAL_RCC_ClockConfig+0x2f0>)
 8006e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006e62:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <HAL_RCC_ClockConfig+0x2f4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fc f81a 	bl	8002ea0 <HAL_InitTick>
  
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3778      	adds	r7, #120	; 0x78
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	08010b48 	.word	0x08010b48
 8006e80:	20000008 	.word	0x20000008
 8006e84:	2000000c 	.word	0x2000000c

08006e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b08b      	sub	sp, #44	; 0x2c
 8006e8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
 8006e92:	2300      	movs	r3, #0
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	2300      	movs	r3, #0
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006ea2:	4b2a      	ldr	r3, [pc, #168]	; (8006f4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d002      	beq.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x30>
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d003      	beq.n	8006ebe <HAL_RCC_GetSysClockFreq+0x36>
 8006eb6:	e03f      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006eb8:	4b25      	ldr	r3, [pc, #148]	; (8006f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006eba:	623b      	str	r3, [r7, #32]
      break;
 8006ebc:	e03f      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006ec4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006ec8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	fa92 f2a2 	rbit	r2, r2
 8006ed0:	607a      	str	r2, [r7, #4]
  return result;
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	fab2 f282 	clz	r2, r2
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	40d3      	lsrs	r3, r2
 8006edc:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ede:	5cd3      	ldrb	r3, [r2, r3]
 8006ee0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006ee2:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	220f      	movs	r2, #15
 8006eec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	fa92 f2a2 	rbit	r2, r2
 8006ef4:	60fa      	str	r2, [r7, #12]
  return result;
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	fab2 f282 	clz	r2, r2
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	40d3      	lsrs	r3, r2
 8006f00:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f02:	5cd3      	ldrb	r3, [r2, r3]
 8006f04:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	fb02 f303 	mul.w	r3, r2, r3
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f20:	e007      	b.n	8006f32 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006f22:	4a0b      	ldr	r2, [pc, #44]	; (8006f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	fb02 f303 	mul.w	r3, r2, r3
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	623b      	str	r3, [r7, #32]
      break;
 8006f36:	e002      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006f3a:	623b      	str	r3, [r7, #32]
      break;
 8006f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	372c      	adds	r7, #44	; 0x2c
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	007a1200 	.word	0x007a1200
 8006f54:	08010b60 	.word	0x08010b60
 8006f58:	08010b70 	.word	0x08010b70

08006f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f60:	4b03      	ldr	r3, [pc, #12]	; (8006f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f62:	681b      	ldr	r3, [r3, #0]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20000008 	.word	0x20000008

08006f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006f7a:	f7ff ffef 	bl	8006f5c <HAL_RCC_GetHCLKFreq>
 8006f7e:	4601      	mov	r1, r0
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006f8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	fa92 f2a2 	rbit	r2, r2
 8006f94:	603a      	str	r2, [r7, #0]
  return result;
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	fab2 f282 	clz	r2, r2
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	40d3      	lsrs	r3, r2
 8006fa0:	4a04      	ldr	r2, [pc, #16]	; (8006fb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006fa2:	5cd3      	ldrb	r3, [r2, r3]
 8006fa4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	08010b58 	.word	0x08010b58

08006fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006fbe:	f7ff ffcd 	bl	8006f5c <HAL_RCC_GetHCLKFreq>
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006fcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	fa92 f2a2 	rbit	r2, r2
 8006fd8:	603a      	str	r2, [r7, #0]
  return result;
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	fab2 f282 	clz	r2, r2
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	40d3      	lsrs	r3, r2
 8006fe4:	4a04      	ldr	r2, [pc, #16]	; (8006ff8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006fe6:	5cd3      	ldrb	r3, [r2, r3]
 8006fe8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	08010b58 	.word	0x08010b58

08006ffc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	220f      	movs	r2, #15
 800700a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800700c:	4b12      	ldr	r3, [pc, #72]	; (8007058 <HAL_RCC_GetClockConfig+0x5c>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f003 0203 	and.w	r2, r3, #3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8007018:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <HAL_RCC_GetClockConfig+0x5c>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8007024:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <HAL_RCC_GetClockConfig+0x5c>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007030:	4b09      	ldr	r3, [pc, #36]	; (8007058 <HAL_RCC_GetClockConfig+0x5c>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	08db      	lsrs	r3, r3, #3
 8007036:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800703e:	4b07      	ldr	r3, [pc, #28]	; (800705c <HAL_RCC_GetClockConfig+0x60>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0207 	and.w	r2, r3, #7
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	601a      	str	r2, [r3, #0]
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40021000 	.word	0x40021000
 800705c:	40022000 	.word	0x40022000

08007060 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b092      	sub	sp, #72	; 0x48
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80d7 	beq.w	800722c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800707e:	2300      	movs	r3, #0
 8007080:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007084:	4b4e      	ldr	r3, [pc, #312]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10e      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007090:	4b4b      	ldr	r3, [pc, #300]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	4a4a      	ldr	r2, [pc, #296]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800709a:	61d3      	str	r3, [r2, #28]
 800709c:	4b48      	ldr	r3, [pc, #288]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ae:	4b45      	ldr	r3, [pc, #276]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d118      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070ba:	4b42      	ldr	r3, [pc, #264]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a41      	ldr	r2, [pc, #260]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070c6:	f7fc f8f7 	bl	80032b8 <HAL_GetTick>
 80070ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070cc:	e008      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ce:	f7fc f8f3 	bl	80032b8 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b64      	cmp	r3, #100	; 0x64
 80070da:	d901      	bls.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e1d6      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e0:	4b38      	ldr	r3, [pc, #224]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070ec:	4b34      	ldr	r3, [pc, #208]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8084 	beq.w	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007108:	429a      	cmp	r2, r3
 800710a:	d07c      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800710c:	4b2c      	ldr	r3, [pc, #176]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800711a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	fa93 f3a3 	rbit	r3, r3
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007126:	fab3 f383 	clz	r3, r3
 800712a:	b2db      	uxtb	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	4b26      	ldr	r3, [pc, #152]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	461a      	mov	r2, r3
 8007136:	2301      	movs	r3, #1
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800713e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	fa93 f3a3 	rbit	r3, r3
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800714a:	fab3 f383 	clz	r3, r3
 800714e:	b2db      	uxtb	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	461a      	mov	r2, r3
 800715a:	2300      	movs	r3, #0
 800715c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800715e:	4a18      	ldr	r2, [pc, #96]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007162:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d04b      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800716e:	f7fc f8a3 	bl	80032b8 <HAL_GetTick>
 8007172:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007174:	e00a      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007176:	f7fc f89f 	bl	80032b8 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	f241 3288 	movw	r2, #5000	; 0x1388
 8007184:	4293      	cmp	r3, r2
 8007186:	d901      	bls.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e180      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800718c:	2302      	movs	r3, #2
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	fa93 f3a3 	rbit	r3, r3
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
 8007198:	2302      	movs	r3, #2
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	fa93 f3a3 	rbit	r3, r3
 80071a2:	61fb      	str	r3, [r7, #28]
  return result;
 80071a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a6:	fab3 f383 	clz	r3, r3
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d108      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80071ba:	4b01      	ldr	r3, [pc, #4]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	e00d      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80071c0:	40021000 	.word	0x40021000
 80071c4:	40007000 	.word	0x40007000
 80071c8:	10908100 	.word	0x10908100
 80071cc:	2302      	movs	r3, #2
 80071ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	fa93 f3a3 	rbit	r3, r3
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	4ba0      	ldr	r3, [pc, #640]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	2202      	movs	r2, #2
 80071de:	613a      	str	r2, [r7, #16]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	fa92 f2a2 	rbit	r2, r2
 80071e6:	60fa      	str	r2, [r7, #12]
  return result;
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	fab2 f282 	clz	r2, r2
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	f002 021f 	and.w	r2, r2, #31
 80071fa:	2101      	movs	r1, #1
 80071fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007200:	4013      	ands	r3, r2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0b7      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007206:	4b95      	ldr	r3, [pc, #596]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4992      	ldr	r1, [pc, #584]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007214:	4313      	orrs	r3, r2
 8007216:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007218:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800721c:	2b01      	cmp	r3, #1
 800721e:	d105      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007220:	4b8e      	ldr	r3, [pc, #568]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	4a8d      	ldr	r2, [pc, #564]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d008      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007238:	4b88      	ldr	r3, [pc, #544]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	f023 0203 	bic.w	r2, r3, #3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	4985      	ldr	r1, [pc, #532]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007246:	4313      	orrs	r3, r2
 8007248:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d008      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007256:	4b81      	ldr	r3, [pc, #516]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	497e      	ldr	r1, [pc, #504]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007264:	4313      	orrs	r3, r2
 8007266:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d008      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007274:	4b79      	ldr	r3, [pc, #484]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	4976      	ldr	r1, [pc, #472]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007282:	4313      	orrs	r3, r2
 8007284:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d008      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007292:	4b72      	ldr	r3, [pc, #456]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	f023 0210 	bic.w	r2, r3, #16
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	496f      	ldr	r1, [pc, #444]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80072b0:	4b6a      	ldr	r3, [pc, #424]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072bc:	4967      	ldr	r1, [pc, #412]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d008      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072ce:	4b63      	ldr	r3, [pc, #396]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	f023 0220 	bic.w	r2, r3, #32
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	4960      	ldr	r1, [pc, #384]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072ec:	4b5b      	ldr	r3, [pc, #364]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80072ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	4958      	ldr	r1, [pc, #352]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d008      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800730a:	4b54      	ldr	r3, [pc, #336]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	4951      	ldr	r1, [pc, #324]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007318:	4313      	orrs	r3, r2
 800731a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	d008      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007328:	4b4c      	ldr	r3, [pc, #304]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	4949      	ldr	r1, [pc, #292]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007336:	4313      	orrs	r3, r2
 8007338:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007342:	2b00      	cmp	r3, #0
 8007344:	d008      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007346:	4b45      	ldr	r3, [pc, #276]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	4942      	ldr	r1, [pc, #264]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007354:	4313      	orrs	r3, r2
 8007356:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007364:	4b3d      	ldr	r3, [pc, #244]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	493a      	ldr	r1, [pc, #232]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007372:	4313      	orrs	r3, r2
 8007374:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737e:	2b00      	cmp	r3, #0
 8007380:	d008      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007382:	4b36      	ldr	r3, [pc, #216]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	4933      	ldr	r1, [pc, #204]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007390:	4313      	orrs	r3, r2
 8007392:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80073a0:	4b2e      	ldr	r3, [pc, #184]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ac:	492b      	ldr	r1, [pc, #172]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80073be:	4b27      	ldr	r3, [pc, #156]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	4924      	ldr	r1, [pc, #144]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80073dc:	4b1f      	ldr	r3, [pc, #124]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	491c      	ldr	r1, [pc, #112]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80073fa:	4b18      	ldr	r3, [pc, #96]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	4915      	ldr	r1, [pc, #84]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007408:	4313      	orrs	r3, r2
 800740a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	490d      	ldr	r1, [pc, #52]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007426:	4313      	orrs	r3, r2
 8007428:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007442:	4906      	ldr	r1, [pc, #24]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007444:	4313      	orrs	r3, r2
 8007446:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00c      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007454:	4b01      	ldr	r3, [pc, #4]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	e002      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800745a:	bf00      	nop
 800745c:	40021000 	.word	0x40021000
 8007460:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007468:	490b      	ldr	r1, [pc, #44]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800746a:	4313      	orrs	r3, r2
 800746c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800747a:	4b07      	ldr	r3, [pc, #28]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007486:	4904      	ldr	r1, [pc, #16]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007488:	4313      	orrs	r3, r2
 800748a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3748      	adds	r7, #72	; 0x48
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40021000 	.word	0x40021000

0800749c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e01d      	b.n	80074ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fb fc3a 	bl	8002d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f000 fac6 	bl	8007a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0201 	orr.w	r2, r2, #1
 800750a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <HAL_TIM_Base_Start_IT+0x50>)
 8007514:	4013      	ands	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b06      	cmp	r3, #6
 800751c:	d00b      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x42>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007524:	d007      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0201 	orr.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	00010007 	.word	0x00010007

08007548 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e083      	b.n	8007664 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7fb fc07 	bl	8002d84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6812      	ldr	r2, [r2, #0]
 8007588:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800758c:	f023 0307 	bic.w	r3, r3, #7
 8007590:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3304      	adds	r3, #4
 800759a:	4619      	mov	r1, r3
 800759c:	4610      	mov	r0, r2
 800759e:	f000 fa65 	bl	8007a6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ca:	f023 0303 	bic.w	r3, r3, #3
 80075ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	4313      	orrs	r3, r2
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80075e8:	f023 030c 	bic.w	r3, r3, #12
 80075ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	4313      	orrs	r3, r2
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	011a      	lsls	r2, r3, #4
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	031b      	lsls	r3, r3, #12
 8007618:	4313      	orrs	r3, r2
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007626:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	4313      	orrs	r3, r2
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d122      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b02      	cmp	r3, #2
 800768e:	d11b      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0202 	mvn.w	r2, #2
 8007698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f9be 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 80076b4:	e005      	b.n	80076c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9b0 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9c1 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d122      	bne.n	800771c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d11b      	bne.n	800771c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0204 	mvn.w	r2, #4
 80076ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2202      	movs	r2, #2
 80076f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f994 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 8007708:	e005      	b.n	8007716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f986 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f997 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b08      	cmp	r3, #8
 8007728:	d122      	bne.n	8007770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b08      	cmp	r3, #8
 8007736:	d11b      	bne.n	8007770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0208 	mvn.w	r2, #8
 8007740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2204      	movs	r2, #4
 8007746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f96a 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 800775c:	e005      	b.n	800776a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f95c 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f96d 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0310 	and.w	r3, r3, #16
 800777a:	2b10      	cmp	r3, #16
 800777c:	d122      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b10      	cmp	r3, #16
 800778a:	d11b      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f06f 0210 	mvn.w	r2, #16
 8007794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2208      	movs	r2, #8
 800779a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f940 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 80077b0:	e005      	b.n	80077be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f932 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f943 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d10e      	bne.n	80077f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d107      	bne.n	80077f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0201 	mvn.w	r2, #1
 80077e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fb f9be 	bl	8002b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fa:	2b80      	cmp	r3, #128	; 0x80
 80077fc:	d10e      	bne.n	800781c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d107      	bne.n	800781c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 faf6 	bl	8007e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782a:	d10e      	bne.n	800784a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007836:	2b80      	cmp	r3, #128	; 0x80
 8007838:	d107      	bne.n	800784a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fae9 	bl	8007e1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	d10e      	bne.n	8007876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d107      	bne.n	8007876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800786e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8f1 	bl	8007a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b20      	cmp	r3, #32
 8007882:	d10e      	bne.n	80078a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b20      	cmp	r3, #32
 8007890:	d107      	bne.n	80078a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f06f 0220 	mvn.w	r2, #32
 800789a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 faa9 	bl	8007df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_TIM_ConfigClockSource+0x18>
 80078be:	2302      	movs	r3, #2
 80078c0:	e0a8      	b.n	8007a14 <HAL_TIM_ConfigClockSource+0x16a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d067      	beq.n	80079ce <HAL_TIM_ConfigClockSource+0x124>
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d80b      	bhi.n	800791a <HAL_TIM_ConfigClockSource+0x70>
 8007902:	2b10      	cmp	r3, #16
 8007904:	d073      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x144>
 8007906:	2b10      	cmp	r3, #16
 8007908:	d802      	bhi.n	8007910 <HAL_TIM_ConfigClockSource+0x66>
 800790a:	2b00      	cmp	r3, #0
 800790c:	d06f      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800790e:	e078      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007910:	2b20      	cmp	r3, #32
 8007912:	d06c      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x144>
 8007914:	2b30      	cmp	r3, #48	; 0x30
 8007916:	d06a      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007918:	e073      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800791a:	2b70      	cmp	r3, #112	; 0x70
 800791c:	d00d      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x90>
 800791e:	2b70      	cmp	r3, #112	; 0x70
 8007920:	d804      	bhi.n	800792c <HAL_TIM_ConfigClockSource+0x82>
 8007922:	2b50      	cmp	r3, #80	; 0x50
 8007924:	d033      	beq.n	800798e <HAL_TIM_ConfigClockSource+0xe4>
 8007926:	2b60      	cmp	r3, #96	; 0x60
 8007928:	d041      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x104>
      break;
 800792a:	e06a      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800792c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007930:	d066      	beq.n	8007a00 <HAL_TIM_ConfigClockSource+0x156>
 8007932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007936:	d017      	beq.n	8007968 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007938:	e063      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6899      	ldr	r1, [r3, #8]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f000 f9a7 	bl	8007c9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800795c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	609a      	str	r2, [r3, #8]
      break;
 8007966:	e04c      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	6899      	ldr	r1, [r3, #8]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f000 f990 	bl	8007c9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800798a:	609a      	str	r2, [r3, #8]
      break;
 800798c:	e039      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	6859      	ldr	r1, [r3, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	461a      	mov	r2, r3
 800799c:	f000 f904 	bl	8007ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2150      	movs	r1, #80	; 0x50
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f95d 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80079ac:	e029      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6859      	ldr	r1, [r3, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f000 f923 	bl	8007c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2160      	movs	r1, #96	; 0x60
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f94d 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80079cc:	e019      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	461a      	mov	r2, r3
 80079dc:	f000 f8e4 	bl	8007ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2140      	movs	r1, #64	; 0x40
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f93d 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80079ec:	e009      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4619      	mov	r1, r3
 80079f8:	4610      	mov	r0, r2
 80079fa:	f000 f934 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80079fe:	e000      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007a00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a42      	ldr	r2, [pc, #264]	; (8007b88 <TIM_Base_SetConfig+0x11c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8a:	d00f      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a3f      	ldr	r2, [pc, #252]	; (8007b8c <TIM_Base_SetConfig+0x120>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a3e      	ldr	r2, [pc, #248]	; (8007b90 <TIM_Base_SetConfig+0x124>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a3d      	ldr	r2, [pc, #244]	; (8007b94 <TIM_Base_SetConfig+0x128>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a3c      	ldr	r2, [pc, #240]	; (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d108      	bne.n	8007abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a31      	ldr	r2, [pc, #196]	; (8007b88 <TIM_Base_SetConfig+0x11c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01f      	beq.n	8007b06 <TIM_Base_SetConfig+0x9a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007acc:	d01b      	beq.n	8007b06 <TIM_Base_SetConfig+0x9a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2e      	ldr	r2, [pc, #184]	; (8007b8c <TIM_Base_SetConfig+0x120>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d017      	beq.n	8007b06 <TIM_Base_SetConfig+0x9a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a2d      	ldr	r2, [pc, #180]	; (8007b90 <TIM_Base_SetConfig+0x124>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <TIM_Base_SetConfig+0x9a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a2c      	ldr	r2, [pc, #176]	; (8007b94 <TIM_Base_SetConfig+0x128>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00f      	beq.n	8007b06 <TIM_Base_SetConfig+0x9a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2c      	ldr	r2, [pc, #176]	; (8007b9c <TIM_Base_SetConfig+0x130>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00b      	beq.n	8007b06 <TIM_Base_SetConfig+0x9a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2b      	ldr	r2, [pc, #172]	; (8007ba0 <TIM_Base_SetConfig+0x134>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d007      	beq.n	8007b06 <TIM_Base_SetConfig+0x9a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a2a      	ldr	r2, [pc, #168]	; (8007ba4 <TIM_Base_SetConfig+0x138>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d003      	beq.n	8007b06 <TIM_Base_SetConfig+0x9a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a25      	ldr	r2, [pc, #148]	; (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d108      	bne.n	8007b18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a12      	ldr	r2, [pc, #72]	; (8007b88 <TIM_Base_SetConfig+0x11c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d013      	beq.n	8007b6c <TIM_Base_SetConfig+0x100>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <TIM_Base_SetConfig+0x128>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00f      	beq.n	8007b6c <TIM_Base_SetConfig+0x100>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a13      	ldr	r2, [pc, #76]	; (8007b9c <TIM_Base_SetConfig+0x130>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00b      	beq.n	8007b6c <TIM_Base_SetConfig+0x100>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a12      	ldr	r2, [pc, #72]	; (8007ba0 <TIM_Base_SetConfig+0x134>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d007      	beq.n	8007b6c <TIM_Base_SetConfig+0x100>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a11      	ldr	r2, [pc, #68]	; (8007ba4 <TIM_Base_SetConfig+0x138>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d003      	beq.n	8007b6c <TIM_Base_SetConfig+0x100>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a0c      	ldr	r2, [pc, #48]	; (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d103      	bne.n	8007b74 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	615a      	str	r2, [r3, #20]
}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40012c00 	.word	0x40012c00
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40013400 	.word	0x40013400
 8007b98:	40015000 	.word	0x40015000
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800

08007ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f023 0201 	bic.w	r2, r3, #1
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f023 030a 	bic.w	r3, r3, #10
 8007be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	621a      	str	r2, [r3, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b087      	sub	sp, #28
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f023 0210 	bic.w	r2, r3, #16
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	031b      	lsls	r3, r3, #12
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f043 0307 	orr.w	r3, r3, #7
 8007c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	609a      	str	r2, [r3, #8]
}
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	021a      	lsls	r2, r3, #8
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	609a      	str	r2, [r3, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e06d      	b.n	8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a30      	ldr	r2, [pc, #192]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d009      	beq.n	8007d32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a2f      	ldr	r2, [pc, #188]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d004      	beq.n	8007d32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a2d      	ldr	r2, [pc, #180]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d108      	bne.n	8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1e      	ldr	r2, [pc, #120]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d01d      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d70:	d018      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d013      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1a      	ldr	r2, [pc, #104]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00e      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a15      	ldr	r2, [pc, #84]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d009      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a16      	ldr	r2, [pc, #88]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d004      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d10c      	bne.n	8007dbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	40012c00 	.word	0x40012c00
 8007de0:	40013400 	.word	0x40013400
 8007de4:	40015000 	.word	0x40015000
 8007de8:	40000400 	.word	0x40000400
 8007dec:	40000800 	.word	0x40000800
 8007df0:	40014000 	.word	0x40014000

08007df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e040      	b.n	8007ec4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fa ffe2 	bl	8002e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2224      	movs	r2, #36	; 0x24
 8007e5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0201 	bic.w	r2, r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f98c 	bl	800818c <UART_SetConfig>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e022      	b.n	8007ec4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fb9a 	bl	80085c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007eaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fc21 	bl	8008704 <UART_CheckIdleState>
 8007ec2:	4603      	mov	r3, r0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08a      	sub	sp, #40	; 0x28
 8007ed0:	af02      	add	r7, sp, #8
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	f040 8081 	bne.w	8007fe8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <HAL_UART_Transmit+0x26>
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e079      	b.n	8007fea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_UART_Transmit+0x38>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e072      	b.n	8007fea <HAL_UART_Transmit+0x11e>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2221      	movs	r2, #33	; 0x21
 8007f16:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007f18:	f7fb f9ce 	bl	80032b8 <HAL_GetTick>
 8007f1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	88fa      	ldrh	r2, [r7, #6]
 8007f22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	88fa      	ldrh	r2, [r7, #6]
 8007f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f36:	d108      	bne.n	8007f4a <HAL_UART_Transmit+0x7e>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	61bb      	str	r3, [r7, #24]
 8007f48:	e003      	b.n	8007f52 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f52:	e02d      	b.n	8007fb0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fc15 	bl	800878e <UART_WaitOnFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e03d      	b.n	8007fea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10b      	bne.n	8007f8c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	881a      	ldrh	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f80:	b292      	uxth	r2, r2
 8007f82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	3302      	adds	r3, #2
 8007f88:	61bb      	str	r3, [r7, #24]
 8007f8a:	e008      	b.n	8007f9e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	781a      	ldrb	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	b292      	uxth	r2, r2
 8007f96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1cb      	bne.n	8007f54 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2140      	movs	r1, #64	; 0x40
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 fbe1 	bl	800878e <UART_WaitOnFlagUntilTimeout>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e009      	b.n	8007fea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e000      	b.n	8007fea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007fe8:	2302      	movs	r3, #2
  }
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b08a      	sub	sp, #40	; 0x28
 8007ff6:	af02      	add	r7, sp, #8
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	603b      	str	r3, [r7, #0]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008006:	2b20      	cmp	r3, #32
 8008008:	f040 80bb 	bne.w	8008182 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_UART_Receive+0x26>
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e0b3      	b.n	8008184 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008022:	2b01      	cmp	r3, #1
 8008024:	d101      	bne.n	800802a <HAL_UART_Receive+0x38>
 8008026:	2302      	movs	r3, #2
 8008028:	e0ac      	b.n	8008184 <HAL_UART_Receive+0x192>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2222      	movs	r2, #34	; 0x22
 800803c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800803e:	f7fb f93b 	bl	80032b8 <HAL_GetTick>
 8008042:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	88fa      	ldrh	r2, [r7, #6]
 8008050:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805c:	d10e      	bne.n	800807c <HAL_UART_Receive+0x8a>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <HAL_UART_Receive+0x80>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f240 12ff 	movw	r2, #511	; 0x1ff
 800806c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008070:	e02d      	b.n	80080ce <HAL_UART_Receive+0xdc>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800807a:	e028      	b.n	80080ce <HAL_UART_Receive+0xdc>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10d      	bne.n	80080a0 <HAL_UART_Receive+0xae>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <HAL_UART_Receive+0xa4>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	22ff      	movs	r2, #255	; 0xff
 8008090:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008094:	e01b      	b.n	80080ce <HAL_UART_Receive+0xdc>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	227f      	movs	r2, #127	; 0x7f
 800809a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800809e:	e016      	b.n	80080ce <HAL_UART_Receive+0xdc>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080a8:	d10d      	bne.n	80080c6 <HAL_UART_Receive+0xd4>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d104      	bne.n	80080bc <HAL_UART_Receive+0xca>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	227f      	movs	r2, #127	; 0x7f
 80080b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080ba:	e008      	b.n	80080ce <HAL_UART_Receive+0xdc>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	223f      	movs	r2, #63	; 0x3f
 80080c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080c4:	e003      	b.n	80080ce <HAL_UART_Receive+0xdc>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080d4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080de:	d108      	bne.n	80080f2 <HAL_UART_Receive+0x100>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	61bb      	str	r3, [r7, #24]
 80080f0:	e003      	b.n	80080fa <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80080fa:	e033      	b.n	8008164 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2200      	movs	r2, #0
 8008104:	2120      	movs	r1, #32
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fb41 	bl	800878e <UART_WaitOnFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e036      	b.n	8008184 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10c      	bne.n	8008136 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008122:	b29a      	uxth	r2, r3
 8008124:	8a7b      	ldrh	r3, [r7, #18]
 8008126:	4013      	ands	r3, r2
 8008128:	b29a      	uxth	r2, r3
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	3302      	adds	r3, #2
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	e00d      	b.n	8008152 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800813c:	b29b      	uxth	r3, r3
 800813e:	b2da      	uxtb	r2, r3
 8008140:	8a7b      	ldrh	r3, [r7, #18]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	4013      	ands	r3, r2
 8008146:	b2da      	uxtb	r2, r3
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	3301      	adds	r3, #1
 8008150:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	b29a      	uxth	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1c5      	bne.n	80080fc <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2220      	movs	r2, #32
 8008174:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e000      	b.n	8008184 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8008182:	2302      	movs	r3, #2
  }
}
 8008184:	4618      	mov	r0, r3
 8008186:	3720      	adds	r7, #32
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008194:	2300      	movs	r3, #0
 8008196:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	431a      	orrs	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	4bac      	ldr	r3, [pc, #688]	; (800846c <UART_SetConfig+0x2e0>)
 80081bc:	4013      	ands	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	6939      	ldr	r1, [r7, #16]
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	430a      	orrs	r2, r1
 8008200:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a9a      	ldr	r2, [pc, #616]	; (8008470 <UART_SetConfig+0x2e4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d121      	bne.n	8008250 <UART_SetConfig+0xc4>
 800820c:	4b99      	ldr	r3, [pc, #612]	; (8008474 <UART_SetConfig+0x2e8>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	2b03      	cmp	r3, #3
 8008216:	d817      	bhi.n	8008248 <UART_SetConfig+0xbc>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <UART_SetConfig+0x94>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008231 	.word	0x08008231
 8008224:	0800823d 	.word	0x0800823d
 8008228:	08008243 	.word	0x08008243
 800822c:	08008237 	.word	0x08008237
 8008230:	2301      	movs	r3, #1
 8008232:	77fb      	strb	r3, [r7, #31]
 8008234:	e0b2      	b.n	800839c <UART_SetConfig+0x210>
 8008236:	2302      	movs	r3, #2
 8008238:	77fb      	strb	r3, [r7, #31]
 800823a:	e0af      	b.n	800839c <UART_SetConfig+0x210>
 800823c:	2304      	movs	r3, #4
 800823e:	77fb      	strb	r3, [r7, #31]
 8008240:	e0ac      	b.n	800839c <UART_SetConfig+0x210>
 8008242:	2308      	movs	r3, #8
 8008244:	77fb      	strb	r3, [r7, #31]
 8008246:	e0a9      	b.n	800839c <UART_SetConfig+0x210>
 8008248:	2310      	movs	r3, #16
 800824a:	77fb      	strb	r3, [r7, #31]
 800824c:	bf00      	nop
 800824e:	e0a5      	b.n	800839c <UART_SetConfig+0x210>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a88      	ldr	r2, [pc, #544]	; (8008478 <UART_SetConfig+0x2ec>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d123      	bne.n	80082a2 <UART_SetConfig+0x116>
 800825a:	4b86      	ldr	r3, [pc, #536]	; (8008474 <UART_SetConfig+0x2e8>)
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008266:	d012      	beq.n	800828e <UART_SetConfig+0x102>
 8008268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800826c:	d802      	bhi.n	8008274 <UART_SetConfig+0xe8>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <UART_SetConfig+0xf6>
 8008272:	e012      	b.n	800829a <UART_SetConfig+0x10e>
 8008274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008278:	d00c      	beq.n	8008294 <UART_SetConfig+0x108>
 800827a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800827e:	d003      	beq.n	8008288 <UART_SetConfig+0xfc>
 8008280:	e00b      	b.n	800829a <UART_SetConfig+0x10e>
 8008282:	2300      	movs	r3, #0
 8008284:	77fb      	strb	r3, [r7, #31]
 8008286:	e089      	b.n	800839c <UART_SetConfig+0x210>
 8008288:	2302      	movs	r3, #2
 800828a:	77fb      	strb	r3, [r7, #31]
 800828c:	e086      	b.n	800839c <UART_SetConfig+0x210>
 800828e:	2304      	movs	r3, #4
 8008290:	77fb      	strb	r3, [r7, #31]
 8008292:	e083      	b.n	800839c <UART_SetConfig+0x210>
 8008294:	2308      	movs	r3, #8
 8008296:	77fb      	strb	r3, [r7, #31]
 8008298:	e080      	b.n	800839c <UART_SetConfig+0x210>
 800829a:	2310      	movs	r3, #16
 800829c:	77fb      	strb	r3, [r7, #31]
 800829e:	bf00      	nop
 80082a0:	e07c      	b.n	800839c <UART_SetConfig+0x210>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a75      	ldr	r2, [pc, #468]	; (800847c <UART_SetConfig+0x2f0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d123      	bne.n	80082f4 <UART_SetConfig+0x168>
 80082ac:	4b71      	ldr	r3, [pc, #452]	; (8008474 <UART_SetConfig+0x2e8>)
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80082b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082b8:	d012      	beq.n	80082e0 <UART_SetConfig+0x154>
 80082ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082be:	d802      	bhi.n	80082c6 <UART_SetConfig+0x13a>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <UART_SetConfig+0x148>
 80082c4:	e012      	b.n	80082ec <UART_SetConfig+0x160>
 80082c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082ca:	d00c      	beq.n	80082e6 <UART_SetConfig+0x15a>
 80082cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80082d0:	d003      	beq.n	80082da <UART_SetConfig+0x14e>
 80082d2:	e00b      	b.n	80082ec <UART_SetConfig+0x160>
 80082d4:	2300      	movs	r3, #0
 80082d6:	77fb      	strb	r3, [r7, #31]
 80082d8:	e060      	b.n	800839c <UART_SetConfig+0x210>
 80082da:	2302      	movs	r3, #2
 80082dc:	77fb      	strb	r3, [r7, #31]
 80082de:	e05d      	b.n	800839c <UART_SetConfig+0x210>
 80082e0:	2304      	movs	r3, #4
 80082e2:	77fb      	strb	r3, [r7, #31]
 80082e4:	e05a      	b.n	800839c <UART_SetConfig+0x210>
 80082e6:	2308      	movs	r3, #8
 80082e8:	77fb      	strb	r3, [r7, #31]
 80082ea:	e057      	b.n	800839c <UART_SetConfig+0x210>
 80082ec:	2310      	movs	r3, #16
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	bf00      	nop
 80082f2:	e053      	b.n	800839c <UART_SetConfig+0x210>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a61      	ldr	r2, [pc, #388]	; (8008480 <UART_SetConfig+0x2f4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d123      	bne.n	8008346 <UART_SetConfig+0x1ba>
 80082fe:	4b5d      	ldr	r3, [pc, #372]	; (8008474 <UART_SetConfig+0x2e8>)
 8008300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008302:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830a:	d012      	beq.n	8008332 <UART_SetConfig+0x1a6>
 800830c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008310:	d802      	bhi.n	8008318 <UART_SetConfig+0x18c>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <UART_SetConfig+0x19a>
 8008316:	e012      	b.n	800833e <UART_SetConfig+0x1b2>
 8008318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800831c:	d00c      	beq.n	8008338 <UART_SetConfig+0x1ac>
 800831e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008322:	d003      	beq.n	800832c <UART_SetConfig+0x1a0>
 8008324:	e00b      	b.n	800833e <UART_SetConfig+0x1b2>
 8008326:	2300      	movs	r3, #0
 8008328:	77fb      	strb	r3, [r7, #31]
 800832a:	e037      	b.n	800839c <UART_SetConfig+0x210>
 800832c:	2302      	movs	r3, #2
 800832e:	77fb      	strb	r3, [r7, #31]
 8008330:	e034      	b.n	800839c <UART_SetConfig+0x210>
 8008332:	2304      	movs	r3, #4
 8008334:	77fb      	strb	r3, [r7, #31]
 8008336:	e031      	b.n	800839c <UART_SetConfig+0x210>
 8008338:	2308      	movs	r3, #8
 800833a:	77fb      	strb	r3, [r7, #31]
 800833c:	e02e      	b.n	800839c <UART_SetConfig+0x210>
 800833e:	2310      	movs	r3, #16
 8008340:	77fb      	strb	r3, [r7, #31]
 8008342:	bf00      	nop
 8008344:	e02a      	b.n	800839c <UART_SetConfig+0x210>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a4e      	ldr	r2, [pc, #312]	; (8008484 <UART_SetConfig+0x2f8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d123      	bne.n	8008398 <UART_SetConfig+0x20c>
 8008350:	4b48      	ldr	r3, [pc, #288]	; (8008474 <UART_SetConfig+0x2e8>)
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800835c:	d012      	beq.n	8008384 <UART_SetConfig+0x1f8>
 800835e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008362:	d802      	bhi.n	800836a <UART_SetConfig+0x1de>
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <UART_SetConfig+0x1ec>
 8008368:	e012      	b.n	8008390 <UART_SetConfig+0x204>
 800836a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800836e:	d00c      	beq.n	800838a <UART_SetConfig+0x1fe>
 8008370:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008374:	d003      	beq.n	800837e <UART_SetConfig+0x1f2>
 8008376:	e00b      	b.n	8008390 <UART_SetConfig+0x204>
 8008378:	2300      	movs	r3, #0
 800837a:	77fb      	strb	r3, [r7, #31]
 800837c:	e00e      	b.n	800839c <UART_SetConfig+0x210>
 800837e:	2302      	movs	r3, #2
 8008380:	77fb      	strb	r3, [r7, #31]
 8008382:	e00b      	b.n	800839c <UART_SetConfig+0x210>
 8008384:	2304      	movs	r3, #4
 8008386:	77fb      	strb	r3, [r7, #31]
 8008388:	e008      	b.n	800839c <UART_SetConfig+0x210>
 800838a:	2308      	movs	r3, #8
 800838c:	77fb      	strb	r3, [r7, #31]
 800838e:	e005      	b.n	800839c <UART_SetConfig+0x210>
 8008390:	2310      	movs	r3, #16
 8008392:	77fb      	strb	r3, [r7, #31]
 8008394:	bf00      	nop
 8008396:	e001      	b.n	800839c <UART_SetConfig+0x210>
 8008398:	2310      	movs	r3, #16
 800839a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083a4:	f040 8090 	bne.w	80084c8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80083a8:	7ffb      	ldrb	r3, [r7, #31]
 80083aa:	2b08      	cmp	r3, #8
 80083ac:	d86c      	bhi.n	8008488 <UART_SetConfig+0x2fc>
 80083ae:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <UART_SetConfig+0x228>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083d9 	.word	0x080083d9
 80083b8:	080083f9 	.word	0x080083f9
 80083bc:	08008419 	.word	0x08008419
 80083c0:	08008489 	.word	0x08008489
 80083c4:	08008435 	.word	0x08008435
 80083c8:	08008489 	.word	0x08008489
 80083cc:	08008489 	.word	0x08008489
 80083d0:	08008489 	.word	0x08008489
 80083d4:	08008455 	.word	0x08008455
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083d8:	f7fe fdcc 	bl	8006f74 <HAL_RCC_GetPCLK1Freq>
 80083dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	005a      	lsls	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	085b      	lsrs	r3, r3, #1
 80083e8:	441a      	add	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	61bb      	str	r3, [r7, #24]
        break;
 80083f6:	e04a      	b.n	800848e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f8:	f7fe fdde 	bl	8006fb8 <HAL_RCC_GetPCLK2Freq>
 80083fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	005a      	lsls	r2, r3, #1
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	441a      	add	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008412:	b29b      	uxth	r3, r3
 8008414:	61bb      	str	r3, [r7, #24]
        break;
 8008416:	e03a      	b.n	800848e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	085b      	lsrs	r3, r3, #1
 800841e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008422:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6852      	ldr	r2, [r2, #4]
 800842a:	fbb3 f3f2 	udiv	r3, r3, r2
 800842e:	b29b      	uxth	r3, r3
 8008430:	61bb      	str	r3, [r7, #24]
        break;
 8008432:	e02c      	b.n	800848e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008434:	f7fe fd28 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 8008438:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	005a      	lsls	r2, r3, #1
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	085b      	lsrs	r3, r3, #1
 8008444:	441a      	add	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	fbb2 f3f3 	udiv	r3, r2, r3
 800844e:	b29b      	uxth	r3, r3
 8008450:	61bb      	str	r3, [r7, #24]
        break;
 8008452:	e01c      	b.n	800848e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	b29b      	uxth	r3, r3
 8008468:	61bb      	str	r3, [r7, #24]
        break;
 800846a:	e010      	b.n	800848e <UART_SetConfig+0x302>
 800846c:	efff69f3 	.word	0xefff69f3
 8008470:	40013800 	.word	0x40013800
 8008474:	40021000 	.word	0x40021000
 8008478:	40004400 	.word	0x40004400
 800847c:	40004800 	.word	0x40004800
 8008480:	40004c00 	.word	0x40004c00
 8008484:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	75fb      	strb	r3, [r7, #23]
        break;
 800848c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	2b0f      	cmp	r3, #15
 8008492:	d916      	bls.n	80084c2 <UART_SetConfig+0x336>
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849a:	d212      	bcs.n	80084c2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f023 030f 	bic.w	r3, r3, #15
 80084a4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	085b      	lsrs	r3, r3, #1
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	897b      	ldrh	r3, [r7, #10]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	897a      	ldrh	r2, [r7, #10]
 80084be:	60da      	str	r2, [r3, #12]
 80084c0:	e072      	b.n	80085a8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	75fb      	strb	r3, [r7, #23]
 80084c6:	e06f      	b.n	80085a8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80084c8:	7ffb      	ldrb	r3, [r7, #31]
 80084ca:	2b08      	cmp	r3, #8
 80084cc:	d85b      	bhi.n	8008586 <UART_SetConfig+0x3fa>
 80084ce:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <UART_SetConfig+0x348>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	080084f9 	.word	0x080084f9
 80084d8:	08008517 	.word	0x08008517
 80084dc:	08008535 	.word	0x08008535
 80084e0:	08008587 	.word	0x08008587
 80084e4:	08008551 	.word	0x08008551
 80084e8:	08008587 	.word	0x08008587
 80084ec:	08008587 	.word	0x08008587
 80084f0:	08008587 	.word	0x08008587
 80084f4:	0800856f 	.word	0x0800856f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084f8:	f7fe fd3c 	bl	8006f74 <HAL_RCC_GetPCLK1Freq>
 80084fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	085a      	lsrs	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	441a      	add	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	b29b      	uxth	r3, r3
 8008512:	61bb      	str	r3, [r7, #24]
        break;
 8008514:	e03a      	b.n	800858c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008516:	f7fe fd4f 	bl	8006fb8 <HAL_RCC_GetPCLK2Freq>
 800851a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	085a      	lsrs	r2, r3, #1
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	441a      	add	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	fbb2 f3f3 	udiv	r3, r2, r3
 800852e:	b29b      	uxth	r3, r3
 8008530:	61bb      	str	r3, [r7, #24]
        break;
 8008532:	e02b      	b.n	800858c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	085b      	lsrs	r3, r3, #1
 800853a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800853e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6852      	ldr	r2, [r2, #4]
 8008546:	fbb3 f3f2 	udiv	r3, r3, r2
 800854a:	b29b      	uxth	r3, r3
 800854c:	61bb      	str	r3, [r7, #24]
        break;
 800854e:	e01d      	b.n	800858c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008550:	f7fe fc9a 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 8008554:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	085a      	lsrs	r2, r3, #1
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	441a      	add	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	fbb2 f3f3 	udiv	r3, r2, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	61bb      	str	r3, [r7, #24]
        break;
 800856c:	e00e      	b.n	800858c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008580:	b29b      	uxth	r3, r3
 8008582:	61bb      	str	r3, [r7, #24]
        break;
 8008584:	e002      	b.n	800858c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	75fb      	strb	r3, [r7, #23]
        break;
 800858a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2b0f      	cmp	r3, #15
 8008590:	d908      	bls.n	80085a4 <UART_SetConfig+0x418>
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008598:	d204      	bcs.n	80085a4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	e001      	b.n	80085a8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop

080085c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01a      	beq.n	80086d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086be:	d10a      	bne.n	80086d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	605a      	str	r2, [r3, #4]
  }
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af02      	add	r7, sp, #8
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008712:	f7fa fdd1 	bl	80032b8 <HAL_GetTick>
 8008716:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b08      	cmp	r3, #8
 8008724:	d10e      	bne.n	8008744 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008726:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f82a 	bl	800878e <UART_WaitOnFlagUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e020      	b.n	8008786 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b04      	cmp	r3, #4
 8008750:	d10e      	bne.n	8008770 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008752:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f814 	bl	800878e <UART_WaitOnFlagUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e00a      	b.n	8008786 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2220      	movs	r2, #32
 800877a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	4613      	mov	r3, r2
 800879c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879e:	e05d      	b.n	800885c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a6:	d059      	beq.n	800885c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a8:	f7fa fd86 	bl	80032b8 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d302      	bcc.n	80087be <UART_WaitOnFlagUntilTimeout+0x30>
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d11b      	bne.n	80087f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0201 	bic.w	r2, r2, #1
 80087dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2220      	movs	r2, #32
 80087e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e042      	b.n	800887c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02b      	beq.n	800885c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800880e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008812:	d123      	bne.n	800885c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800881c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800882c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0201 	bic.w	r2, r2, #1
 800883c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2220      	movs	r2, #32
 8008848:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2220      	movs	r2, #32
 800884e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e00f      	b.n	800887c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	69da      	ldr	r2, [r3, #28]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4013      	ands	r3, r2
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	429a      	cmp	r2, r3
 800886a:	bf0c      	ite	eq
 800886c:	2301      	moveq	r3, #1
 800886e:	2300      	movne	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	461a      	mov	r2, r3
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	429a      	cmp	r2, r3
 8008878:	d092      	beq.n	80087a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008894:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4a06      	ldr	r2, [pc, #24]	; (80088b4 <vApplicationGetIdleTaskMemory+0x30>)
 800889a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2280      	movs	r2, #128	; 0x80
 80088a0:	601a      	str	r2, [r3, #0]
}
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	200011ec 	.word	0x200011ec
 80088b4:	20001248 	.word	0x20001248

080088b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4a07      	ldr	r2, [pc, #28]	; (80088e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80088c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	4a06      	ldr	r2, [pc, #24]	; (80088e8 <vApplicationGetTimerTaskMemory+0x30>)
 80088ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088d6:	601a      	str	r2, [r3, #0]
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	20001448 	.word	0x20001448
 80088e8:	200014a4 	.word	0x200014a4

080088ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f103 0208 	add.w	r2, r3, #8
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f04f 32ff 	mov.w	r2, #4294967295
 8008904:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f103 0208 	add.w	r2, r3, #8
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f103 0208 	add.w	r2, r3, #8
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	601a      	str	r2, [r3, #0]
}
 8008982:	bf00      	nop
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800898e:	b480      	push	{r7}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a4:	d103      	bne.n	80089ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e00c      	b.n	80089c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3308      	adds	r3, #8
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e002      	b.n	80089bc <vListInsert+0x2e>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d2f6      	bcs.n	80089b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
}
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6892      	ldr	r2, [r2, #8]
 8008a16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6852      	ldr	r2, [r2, #4]
 8008a20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d103      	bne.n	8008a34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	1e5a      	subs	r2, r3, #1
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d109      	bne.n	8008a7c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	60bb      	str	r3, [r7, #8]
 8008a7a:	e7fe      	b.n	8008a7a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008a7c:	f002 f9f6 	bl	800ae6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a88:	68f9      	ldr	r1, [r7, #12]
 8008a8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a8c:	fb01 f303 	mul.w	r3, r1, r3
 8008a90:	441a      	add	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aac:	3b01      	subs	r3, #1
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	441a      	add	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	22ff      	movs	r2, #255	; 0xff
 8008ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	22ff      	movs	r2, #255	; 0xff
 8008ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d114      	bne.n	8008afc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d01a      	beq.n	8008b10 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3310      	adds	r3, #16
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f001 f9f2 	bl	8009ec8 <xTaskRemoveFromEventList>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d012      	beq.n	8008b10 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <xQueueGenericReset+0xcc>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	e009      	b.n	8008b10 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3310      	adds	r3, #16
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff fef3 	bl	80088ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3324      	adds	r3, #36	; 0x24
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff feee 	bl	80088ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b10:	f002 f9da 	bl	800aec8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b14:	2301      	movs	r3, #1
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08e      	sub	sp, #56	; 0x38
 8008b28:	af02      	add	r7, sp, #8
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d109      	bne.n	8008b4c <xQueueGenericCreateStatic+0x28>
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b4a:	e7fe      	b.n	8008b4a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d109      	bne.n	8008b66 <xQueueGenericCreateStatic+0x42>
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
 8008b64:	e7fe      	b.n	8008b64 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <xQueueGenericCreateStatic+0x4e>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <xQueueGenericCreateStatic+0x52>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <xQueueGenericCreateStatic+0x54>
 8008b76:	2300      	movs	r3, #0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d109      	bne.n	8008b90 <xQueueGenericCreateStatic+0x6c>
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	623b      	str	r3, [r7, #32]
 8008b8e:	e7fe      	b.n	8008b8e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <xQueueGenericCreateStatic+0x78>
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <xQueueGenericCreateStatic+0x7c>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <xQueueGenericCreateStatic+0x7e>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <xQueueGenericCreateStatic+0x96>
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	e7fe      	b.n	8008bb8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008bba:	2350      	movs	r3, #80	; 0x50
 8008bbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b50      	cmp	r3, #80	; 0x50
 8008bc2:	d009      	beq.n	8008bd8 <xQueueGenericCreateStatic+0xb4>
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	61bb      	str	r3, [r7, #24]
 8008bd6:	e7fe      	b.n	8008bd6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00d      	beq.n	8008bfe <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	68b9      	ldr	r1, [r7, #8]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 f842 	bl	8008c82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3730      	adds	r7, #48	; 0x30
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08a      	sub	sp, #40	; 0x28
 8008c0c:	af02      	add	r7, sp, #8
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d109      	bne.n	8008c30 <xQueueGenericCreate+0x28>
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	e7fe      	b.n	8008c2e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	e004      	b.n	8008c46 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	fb02 f303 	mul.w	r3, r2, r3
 8008c44:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	3350      	adds	r3, #80	; 0x50
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f002 fa28 	bl	800b0a0 <pvPortMalloc>
 8008c50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00f      	beq.n	8008c78 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	3350      	adds	r3, #80	; 0x50
 8008c5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c66:	79fa      	ldrb	r2, [r7, #7]
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f805 	bl	8008c82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008c78:	69bb      	ldr	r3, [r7, #24]
	}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	607a      	str	r2, [r7, #4]
 8008c8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	e002      	b.n	8008ca4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	69b8      	ldr	r0, [r7, #24]
 8008cb4:	f7ff fece 	bl	8008a54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cc0:	bf00      	nop
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08e      	sub	sp, #56	; 0x38
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d109      	bne.n	8008cf8 <xQueueGenericSend+0x30>
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cf6:	e7fe      	b.n	8008cf6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d103      	bne.n	8008d06 <xQueueGenericSend+0x3e>
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <xQueueGenericSend+0x42>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xQueueGenericSend+0x44>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <xQueueGenericSend+0x5c>
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
 8008d22:	e7fe      	b.n	8008d22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d103      	bne.n	8008d32 <xQueueGenericSend+0x6a>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <xQueueGenericSend+0x6e>
 8008d32:	2301      	movs	r3, #1
 8008d34:	e000      	b.n	8008d38 <xQueueGenericSend+0x70>
 8008d36:	2300      	movs	r3, #0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <xQueueGenericSend+0x88>
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	623b      	str	r3, [r7, #32]
 8008d4e:	e7fe      	b.n	8008d4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d50:	f001 fa76 	bl	800a240 <xTaskGetSchedulerState>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <xQueueGenericSend+0x98>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <xQueueGenericSend+0x9c>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e000      	b.n	8008d66 <xQueueGenericSend+0x9e>
 8008d64:	2300      	movs	r3, #0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <xQueueGenericSend+0xb6>
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	e7fe      	b.n	8008d7c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d7e:	f002 f875 	bl	800ae6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d302      	bcc.n	8008d94 <xQueueGenericSend+0xcc>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d129      	bne.n	8008de8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d9a:	f000 fb1f 	bl	80093dc <prvCopyDataToQueue>
 8008d9e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d010      	beq.n	8008dca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008daa:	3324      	adds	r3, #36	; 0x24
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 f88b 	bl	8009ec8 <xTaskRemoveFromEventList>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d013      	beq.n	8008de0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008db8:	4b3f      	ldr	r3, [pc, #252]	; (8008eb8 <xQueueGenericSend+0x1f0>)
 8008dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	e00a      	b.n	8008de0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d007      	beq.n	8008de0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008dd0:	4b39      	ldr	r3, [pc, #228]	; (8008eb8 <xQueueGenericSend+0x1f0>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008de0:	f002 f872 	bl	800aec8 <vPortExitCritical>
				return pdPASS;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e063      	b.n	8008eb0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d103      	bne.n	8008df6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dee:	f002 f86b 	bl	800aec8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	e05c      	b.n	8008eb0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d106      	bne.n	8008e0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dfc:	f107 0314 	add.w	r3, r7, #20
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 f8c3 	bl	8009f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e0a:	f002 f85d 	bl	800aec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e0e:	f000 fe39 	bl	8009a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e12:	f002 f82b 	bl	800ae6c <vPortEnterCritical>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e1c:	b25b      	sxtb	r3, r3
 8008e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e22:	d103      	bne.n	8008e2c <xQueueGenericSend+0x164>
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e32:	b25b      	sxtb	r3, r3
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e38:	d103      	bne.n	8008e42 <xQueueGenericSend+0x17a>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e42:	f002 f841 	bl	800aec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e46:	1d3a      	adds	r2, r7, #4
 8008e48:	f107 0314 	add.w	r3, r7, #20
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f001 f8b2 	bl	8009fb8 <xTaskCheckForTimeOut>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d124      	bne.n	8008ea4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e5c:	f000 fbb6 	bl	80095cc <prvIsQueueFull>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d018      	beq.n	8008e98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	3310      	adds	r3, #16
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 ffdc 	bl	8009e2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e76:	f000 fb41 	bl	80094fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e7a:	f000 fe11 	bl	8009aa0 <xTaskResumeAll>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f47f af7c 	bne.w	8008d7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008e86:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <xQueueGenericSend+0x1f0>)
 8008e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	e772      	b.n	8008d7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e9a:	f000 fb2f 	bl	80094fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e9e:	f000 fdff 	bl	8009aa0 <xTaskResumeAll>
 8008ea2:	e76c      	b.n	8008d7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea6:	f000 fb29 	bl	80094fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eaa:	f000 fdf9 	bl	8009aa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008eae:	2300      	movs	r3, #0
		}
	}
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3738      	adds	r7, #56	; 0x38
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08e      	sub	sp, #56	; 0x38
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d109      	bne.n	8008ee8 <xQueueGenericSendFromISR+0x2c>
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee6:	e7fe      	b.n	8008ee6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d103      	bne.n	8008ef6 <xQueueGenericSendFromISR+0x3a>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <xQueueGenericSendFromISR+0x3e>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <xQueueGenericSendFromISR+0x40>
 8008efa:	2300      	movs	r3, #0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <xQueueGenericSendFromISR+0x58>
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	623b      	str	r3, [r7, #32]
 8008f12:	e7fe      	b.n	8008f12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d103      	bne.n	8008f22 <xQueueGenericSendFromISR+0x66>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d101      	bne.n	8008f26 <xQueueGenericSendFromISR+0x6a>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <xQueueGenericSendFromISR+0x6c>
 8008f26:	2300      	movs	r3, #0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <xQueueGenericSendFromISR+0x84>
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	61fb      	str	r3, [r7, #28]
 8008f3e:	e7fe      	b.n	8008f3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f40:	f002 f870 	bl	800b024 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f44:	f3ef 8211 	mrs	r2, BASEPRI
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	61ba      	str	r2, [r7, #24]
 8008f5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d302      	bcc.n	8008f72 <xQueueGenericSendFromISR+0xb6>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d12c      	bne.n	8008fcc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f82:	f000 fa2b 	bl	80093dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f86:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8e:	d112      	bne.n	8008fb6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d016      	beq.n	8008fc6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9a:	3324      	adds	r3, #36	; 0x24
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 ff93 	bl	8009ec8 <xTaskRemoveFromEventList>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00e      	beq.n	8008fc6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00b      	beq.n	8008fc6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e007      	b.n	8008fc6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fba:	3301      	adds	r3, #1
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	b25a      	sxtb	r2, r3
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008fca:	e001      	b.n	8008fd0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3738      	adds	r7, #56	; 0x38
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08c      	sub	sp, #48	; 0x30
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d109      	bne.n	8009012 <xQueueReceive+0x2e>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	623b      	str	r3, [r7, #32]
 8009010:	e7fe      	b.n	8009010 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d103      	bne.n	8009020 <xQueueReceive+0x3c>
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <xQueueReceive+0x40>
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <xQueueReceive+0x42>
 8009024:	2300      	movs	r3, #0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <xQueueReceive+0x5a>
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	61fb      	str	r3, [r7, #28]
 800903c:	e7fe      	b.n	800903c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800903e:	f001 f8ff 	bl	800a240 <xTaskGetSchedulerState>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <xQueueReceive+0x6a>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <xQueueReceive+0x6e>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <xQueueReceive+0x70>
 8009052:	2300      	movs	r3, #0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d109      	bne.n	800906c <xQueueReceive+0x88>
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	61bb      	str	r3, [r7, #24]
 800906a:	e7fe      	b.n	800906a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800906c:	f001 fefe 	bl	800ae6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01f      	beq.n	80090bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800907c:	68b9      	ldr	r1, [r7, #8]
 800907e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009080:	f000 fa16 	bl	80094b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	1e5a      	subs	r2, r3, #1
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00f      	beq.n	80090b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	3310      	adds	r3, #16
 8009098:	4618      	mov	r0, r3
 800909a:	f000 ff15 	bl	8009ec8 <xTaskRemoveFromEventList>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d007      	beq.n	80090b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090a4:	4b3c      	ldr	r3, [pc, #240]	; (8009198 <xQueueReceive+0x1b4>)
 80090a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090b4:	f001 ff08 	bl	800aec8 <vPortExitCritical>
				return pdPASS;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e069      	b.n	8009190 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d103      	bne.n	80090ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090c2:	f001 ff01 	bl	800aec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e062      	b.n	8009190 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d106      	bne.n	80090de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090d0:	f107 0310 	add.w	r3, r7, #16
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 ff59 	bl	8009f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090da:	2301      	movs	r3, #1
 80090dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090de:	f001 fef3 	bl	800aec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090e2:	f000 fccf 	bl	8009a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090e6:	f001 fec1 	bl	800ae6c <vPortEnterCritical>
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090f0:	b25b      	sxtb	r3, r3
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d103      	bne.n	8009100 <xQueueReceive+0x11c>
 80090f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009106:	b25b      	sxtb	r3, r3
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910c:	d103      	bne.n	8009116 <xQueueReceive+0x132>
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009116:	f001 fed7 	bl	800aec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800911a:	1d3a      	adds	r2, r7, #4
 800911c:	f107 0310 	add.w	r3, r7, #16
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f000 ff48 	bl	8009fb8 <xTaskCheckForTimeOut>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d123      	bne.n	8009176 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800912e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009130:	f000 fa36 	bl	80095a0 <prvIsQueueEmpty>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d017      	beq.n	800916a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	3324      	adds	r3, #36	; 0x24
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	4611      	mov	r1, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fe72 	bl	8009e2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800914a:	f000 f9d7 	bl	80094fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800914e:	f000 fca7 	bl	8009aa0 <xTaskResumeAll>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d189      	bne.n	800906c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009158:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <xQueueReceive+0x1b4>)
 800915a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	e780      	b.n	800906c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800916a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800916c:	f000 f9c6 	bl	80094fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009170:	f000 fc96 	bl	8009aa0 <xTaskResumeAll>
 8009174:	e77a      	b.n	800906c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009178:	f000 f9c0 	bl	80094fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800917c:	f000 fc90 	bl	8009aa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009182:	f000 fa0d 	bl	80095a0 <prvIsQueueEmpty>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	f43f af6f 	beq.w	800906c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800918e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009190:	4618      	mov	r0, r3
 8009192:	3730      	adds	r7, #48	; 0x30
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08e      	sub	sp, #56	; 0x38
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d109      	bne.n	80091cc <xQueueSemaphoreTake+0x30>
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	623b      	str	r3, [r7, #32]
 80091ca:	e7fe      	b.n	80091ca <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d009      	beq.n	80091e8 <xQueueSemaphoreTake+0x4c>
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	61fb      	str	r3, [r7, #28]
 80091e6:	e7fe      	b.n	80091e6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091e8:	f001 f82a 	bl	800a240 <xTaskGetSchedulerState>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d102      	bne.n	80091f8 <xQueueSemaphoreTake+0x5c>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <xQueueSemaphoreTake+0x60>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e000      	b.n	80091fe <xQueueSemaphoreTake+0x62>
 80091fc:	2300      	movs	r3, #0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d109      	bne.n	8009216 <xQueueSemaphoreTake+0x7a>
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	61bb      	str	r3, [r7, #24]
 8009214:	e7fe      	b.n	8009214 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009216:	f001 fe29 	bl	800ae6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	2b00      	cmp	r3, #0
 8009224:	d024      	beq.n	8009270 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	1e5a      	subs	r2, r3, #1
 800922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d104      	bne.n	8009240 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009236:	f001 f97f 	bl	800a538 <pvTaskIncrementMutexHeldCount>
 800923a:	4602      	mov	r2, r0
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00f      	beq.n	8009268 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	3310      	adds	r3, #16
 800924c:	4618      	mov	r0, r3
 800924e:	f000 fe3b 	bl	8009ec8 <xTaskRemoveFromEventList>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d007      	beq.n	8009268 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009258:	4b53      	ldr	r3, [pc, #332]	; (80093a8 <xQueueSemaphoreTake+0x20c>)
 800925a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009268:	f001 fe2e 	bl	800aec8 <vPortExitCritical>
				return pdPASS;
 800926c:	2301      	movs	r3, #1
 800926e:	e096      	b.n	800939e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d110      	bne.n	8009298 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <xQueueSemaphoreTake+0xf4>
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	e7fe      	b.n	800928e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009290:	f001 fe1a 	bl	800aec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009294:	2300      	movs	r3, #0
 8009296:	e082      	b.n	800939e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800929e:	f107 030c 	add.w	r3, r7, #12
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fe72 	bl	8009f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092a8:	2301      	movs	r3, #1
 80092aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092ac:	f001 fe0c 	bl	800aec8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092b0:	f000 fbe8 	bl	8009a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092b4:	f001 fdda 	bl	800ae6c <vPortEnterCritical>
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092be:	b25b      	sxtb	r3, r3
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d103      	bne.n	80092ce <xQueueSemaphoreTake+0x132>
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092d4:	b25b      	sxtb	r3, r3
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092da:	d103      	bne.n	80092e4 <xQueueSemaphoreTake+0x148>
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092e4:	f001 fdf0 	bl	800aec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092e8:	463a      	mov	r2, r7
 80092ea:	f107 030c 	add.w	r3, r7, #12
 80092ee:	4611      	mov	r1, r2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fe61 	bl	8009fb8 <xTaskCheckForTimeOut>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d132      	bne.n	8009362 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092fe:	f000 f94f 	bl	80095a0 <prvIsQueueEmpty>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d026      	beq.n	8009356 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d109      	bne.n	8009324 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009310:	f001 fdac 	bl	800ae6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	4618      	mov	r0, r3
 800931a:	f000 ffaf 	bl	800a27c <xTaskPriorityInherit>
 800931e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009320:	f001 fdd2 	bl	800aec8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	3324      	adds	r3, #36	; 0x24
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	4611      	mov	r1, r2
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fd7d 	bl	8009e2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009334:	f000 f8e2 	bl	80094fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009338:	f000 fbb2 	bl	8009aa0 <xTaskResumeAll>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	f47f af69 	bne.w	8009216 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009344:	4b18      	ldr	r3, [pc, #96]	; (80093a8 <xQueueSemaphoreTake+0x20c>)
 8009346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	e75f      	b.n	8009216 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009358:	f000 f8d0 	bl	80094fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800935c:	f000 fba0 	bl	8009aa0 <xTaskResumeAll>
 8009360:	e759      	b.n	8009216 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009364:	f000 f8ca 	bl	80094fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009368:	f000 fb9a 	bl	8009aa0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800936c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800936e:	f000 f917 	bl	80095a0 <prvIsQueueEmpty>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	f43f af4e 	beq.w	8009216 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00d      	beq.n	800939c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009380:	f001 fd74 	bl	800ae6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009386:	f000 f811 	bl	80093ac <prvGetDisinheritPriorityAfterTimeout>
 800938a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009392:	4618      	mov	r0, r3
 8009394:	f001 f84c 	bl	800a430 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009398:	f001 fd96 	bl	800aec8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800939c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3738      	adds	r7, #56	; 0x38
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	e000ed04 	.word	0xe000ed04

080093ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d006      	beq.n	80093ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e001      	b.n	80093ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80093ce:	68fb      	ldr	r3, [r7, #12]
	}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093e8:	2300      	movs	r3, #0
 80093ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10d      	bne.n	8009416 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d14d      	bne.n	800949e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 ffa6 	bl	800a358 <xTaskPriorityDisinherit>
 800940c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	605a      	str	r2, [r3, #4]
 8009414:	e043      	b.n	800949e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d119      	bne.n	8009450 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6898      	ldr	r0, [r3, #8]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009424:	461a      	mov	r2, r3
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	f003 f8d0 	bl	800c5cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009434:	441a      	add	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d32b      	bcc.n	800949e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	609a      	str	r2, [r3, #8]
 800944e:	e026      	b.n	800949e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68d8      	ldr	r0, [r3, #12]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	461a      	mov	r2, r3
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	f003 f8b6 	bl	800c5cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009468:	425b      	negs	r3, r3
 800946a:	441a      	add	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d207      	bcs.n	800948c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009484:	425b      	negs	r3, r3
 8009486:	441a      	add	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d105      	bne.n	800949e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	3b01      	subs	r3, #1
 800949c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094a6:	697b      	ldr	r3, [r7, #20]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d018      	beq.n	80094f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	441a      	add	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68da      	ldr	r2, [r3, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d303      	bcc.n	80094e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68d9      	ldr	r1, [r3, #12]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	461a      	mov	r2, r3
 80094ee:	6838      	ldr	r0, [r7, #0]
 80094f0:	f003 f86c 	bl	800c5cc <memcpy>
	}
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009504:	f001 fcb2 	bl	800ae6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800950e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009510:	e011      	b.n	8009536 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	2b00      	cmp	r3, #0
 8009518:	d012      	beq.n	8009540 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	4618      	mov	r0, r3
 8009520:	f000 fcd2 	bl	8009ec8 <xTaskRemoveFromEventList>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800952a:	f000 fda5 	bl	800a078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	3b01      	subs	r3, #1
 8009532:	b2db      	uxtb	r3, r3
 8009534:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800953a:	2b00      	cmp	r3, #0
 800953c:	dce9      	bgt.n	8009512 <prvUnlockQueue+0x16>
 800953e:	e000      	b.n	8009542 <prvUnlockQueue+0x46>
					break;
 8009540:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	22ff      	movs	r2, #255	; 0xff
 8009546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800954a:	f001 fcbd 	bl	800aec8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800954e:	f001 fc8d 	bl	800ae6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009558:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800955a:	e011      	b.n	8009580 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d012      	beq.n	800958a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3310      	adds	r3, #16
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fcad 	bl	8009ec8 <xTaskRemoveFromEventList>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009574:	f000 fd80 	bl	800a078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	3b01      	subs	r3, #1
 800957c:	b2db      	uxtb	r3, r3
 800957e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009584:	2b00      	cmp	r3, #0
 8009586:	dce9      	bgt.n	800955c <prvUnlockQueue+0x60>
 8009588:	e000      	b.n	800958c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800958a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	22ff      	movs	r2, #255	; 0xff
 8009590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009594:	f001 fc98 	bl	800aec8 <vPortExitCritical>
}
 8009598:	bf00      	nop
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095a8:	f001 fc60 	bl	800ae6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095b4:	2301      	movs	r3, #1
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	e001      	b.n	80095be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095be:	f001 fc83 	bl	800aec8 <vPortExitCritical>

	return xReturn;
 80095c2:	68fb      	ldr	r3, [r7, #12]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095d4:	f001 fc4a 	bl	800ae6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d102      	bne.n	80095ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	e001      	b.n	80095ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095ee:	f001 fc6b 	bl	800aec8 <vPortExitCritical>

	return xReturn;
 80095f2:	68fb      	ldr	r3, [r7, #12]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	e014      	b.n	8009636 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800960c:	4a0e      	ldr	r2, [pc, #56]	; (8009648 <vQueueAddToRegistry+0x4c>)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10b      	bne.n	8009630 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009618:	490b      	ldr	r1, [pc, #44]	; (8009648 <vQueueAddToRegistry+0x4c>)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009622:	4a09      	ldr	r2, [pc, #36]	; (8009648 <vQueueAddToRegistry+0x4c>)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	4413      	add	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800962e:	e005      	b.n	800963c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b07      	cmp	r3, #7
 800963a:	d9e7      	bls.n	800960c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800963c:	bf00      	nop
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	20003edc 	.word	0x20003edc

0800964c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800965c:	f001 fc06 	bl	800ae6c <vPortEnterCritical>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009666:	b25b      	sxtb	r3, r3
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d103      	bne.n	8009676 <vQueueWaitForMessageRestricted+0x2a>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800967c:	b25b      	sxtb	r3, r3
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d103      	bne.n	800968c <vQueueWaitForMessageRestricted+0x40>
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800968c:	f001 fc1c 	bl	800aec8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	3324      	adds	r3, #36	; 0x24
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fbe7 	bl	8009e74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096a6:	6978      	ldr	r0, [r7, #20]
 80096a8:	f7ff ff28 	bl	80094fc <prvUnlockQueue>
	}
 80096ac:	bf00      	nop
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08e      	sub	sp, #56	; 0x38
 80096b8:	af04      	add	r7, sp, #16
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80096c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d109      	bne.n	80096dc <xTaskCreateStatic+0x28>
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	623b      	str	r3, [r7, #32]
 80096da:	e7fe      	b.n	80096da <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <xTaskCreateStatic+0x42>
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	e7fe      	b.n	80096f4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096f6:	235c      	movs	r3, #92	; 0x5c
 80096f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b5c      	cmp	r3, #92	; 0x5c
 80096fe:	d009      	beq.n	8009714 <xTaskCreateStatic+0x60>
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	e7fe      	b.n	8009712 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01e      	beq.n	8009758 <xTaskCreateStatic+0xa4>
 800971a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01b      	beq.n	8009758 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009728:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	2202      	movs	r2, #2
 800972e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009732:	2300      	movs	r3, #0
 8009734:	9303      	str	r3, [sp, #12]
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	9302      	str	r3, [sp, #8]
 800973a:	f107 0314 	add.w	r3, r7, #20
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	68b9      	ldr	r1, [r7, #8]
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 f80b 	bl	8009766 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009752:	f000 f88f 	bl	8009874 <prvAddNewTaskToReadyList>
 8009756:	e001      	b.n	800975c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009758:	2300      	movs	r3, #0
 800975a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800975c:	697b      	ldr	r3, [r7, #20]
	}
 800975e:	4618      	mov	r0, r3
 8009760:	3728      	adds	r7, #40	; 0x28
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b088      	sub	sp, #32
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	461a      	mov	r2, r3
 800977e:	21a5      	movs	r1, #165	; 0xa5
 8009780:	f002 ff48 	bl	800c614 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800978e:	3b01      	subs	r3, #1
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f023 0307 	bic.w	r3, r3, #7
 800979c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d009      	beq.n	80097bc <prvInitialiseNewTask+0x56>
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	617b      	str	r3, [r7, #20]
 80097ba:	e7fe      	b.n	80097ba <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097bc:	2300      	movs	r3, #0
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	e012      	b.n	80097e8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	4413      	add	r3, r2
 80097c8:	7819      	ldrb	r1, [r3, #0]
 80097ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	3334      	adds	r3, #52	; 0x34
 80097d2:	460a      	mov	r2, r1
 80097d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	4413      	add	r3, r2
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d006      	beq.n	80097f0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	3301      	adds	r3, #1
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	2b0f      	cmp	r3, #15
 80097ec:	d9e9      	bls.n	80097c2 <prvInitialiseNewTask+0x5c>
 80097ee:	e000      	b.n	80097f2 <prvInitialiseNewTask+0x8c>
		{
			break;
 80097f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	2b37      	cmp	r3, #55	; 0x37
 80097fe:	d901      	bls.n	8009804 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009800:	2337      	movs	r3, #55	; 0x37
 8009802:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009808:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800980e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	2200      	movs	r2, #0
 8009814:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	3304      	adds	r3, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff f886 	bl	800892c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	3318      	adds	r3, #24
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff f881 	bl	800892c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800983e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	2200      	movs	r2, #0
 8009844:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	68f9      	ldr	r1, [r7, #12]
 8009852:	69b8      	ldr	r0, [r7, #24]
 8009854:	f001 f9e2 	bl	800ac1c <pxPortInitialiseStack>
 8009858:	4602      	mov	r2, r0
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800986a:	bf00      	nop
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800987c:	f001 faf6 	bl	800ae6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009880:	4b2d      	ldr	r3, [pc, #180]	; (8009938 <prvAddNewTaskToReadyList+0xc4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3301      	adds	r3, #1
 8009886:	4a2c      	ldr	r2, [pc, #176]	; (8009938 <prvAddNewTaskToReadyList+0xc4>)
 8009888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800988a:	4b2c      	ldr	r3, [pc, #176]	; (800993c <prvAddNewTaskToReadyList+0xc8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d109      	bne.n	80098a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009892:	4a2a      	ldr	r2, [pc, #168]	; (800993c <prvAddNewTaskToReadyList+0xc8>)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009898:	4b27      	ldr	r3, [pc, #156]	; (8009938 <prvAddNewTaskToReadyList+0xc4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d110      	bne.n	80098c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098a0:	f000 fc0e 	bl	800a0c0 <prvInitialiseTaskLists>
 80098a4:	e00d      	b.n	80098c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098a6:	4b26      	ldr	r3, [pc, #152]	; (8009940 <prvAddNewTaskToReadyList+0xcc>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d109      	bne.n	80098c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098ae:	4b23      	ldr	r3, [pc, #140]	; (800993c <prvAddNewTaskToReadyList+0xc8>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d802      	bhi.n	80098c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098bc:	4a1f      	ldr	r2, [pc, #124]	; (800993c <prvAddNewTaskToReadyList+0xc8>)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098c2:	4b20      	ldr	r3, [pc, #128]	; (8009944 <prvAddNewTaskToReadyList+0xd0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3301      	adds	r3, #1
 80098c8:	4a1e      	ldr	r2, [pc, #120]	; (8009944 <prvAddNewTaskToReadyList+0xd0>)
 80098ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80098cc:	4b1d      	ldr	r3, [pc, #116]	; (8009944 <prvAddNewTaskToReadyList+0xd0>)
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <prvAddNewTaskToReadyList+0xd4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d903      	bls.n	80098e8 <prvAddNewTaskToReadyList+0x74>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e4:	4a18      	ldr	r2, [pc, #96]	; (8009948 <prvAddNewTaskToReadyList+0xd4>)
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ec:	4613      	mov	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4a15      	ldr	r2, [pc, #84]	; (800994c <prvAddNewTaskToReadyList+0xd8>)
 80098f6:	441a      	add	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3304      	adds	r3, #4
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f7ff f821 	bl	8008946 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009904:	f001 fae0 	bl	800aec8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009908:	4b0d      	ldr	r3, [pc, #52]	; (8009940 <prvAddNewTaskToReadyList+0xcc>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00e      	beq.n	800992e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009910:	4b0a      	ldr	r3, [pc, #40]	; (800993c <prvAddNewTaskToReadyList+0xc8>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991a:	429a      	cmp	r2, r3
 800991c:	d207      	bcs.n	800992e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800991e:	4b0c      	ldr	r3, [pc, #48]	; (8009950 <prvAddNewTaskToReadyList+0xdc>)
 8009920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20001d78 	.word	0x20001d78
 800993c:	200018a4 	.word	0x200018a4
 8009940:	20001d84 	.word	0x20001d84
 8009944:	20001d94 	.word	0x20001d94
 8009948:	20001d80 	.word	0x20001d80
 800994c:	200018a8 	.word	0x200018a8
 8009950:	e000ed04 	.word	0xe000ed04

08009954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d016      	beq.n	8009994 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009966:	4b13      	ldr	r3, [pc, #76]	; (80099b4 <vTaskDelay+0x60>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d009      	beq.n	8009982 <vTaskDelay+0x2e>
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	60bb      	str	r3, [r7, #8]
 8009980:	e7fe      	b.n	8009980 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009982:	f000 f87f 	bl	8009a84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009986:	2100      	movs	r1, #0
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fde9 	bl	800a560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800998e:	f000 f887 	bl	8009aa0 <xTaskResumeAll>
 8009992:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d107      	bne.n	80099aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800999a:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <vTaskDelay+0x64>)
 800999c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20001da0 	.word	0x20001da0
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	; 0x28
 80099c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099ca:	463a      	mov	r2, r7
 80099cc:	1d39      	adds	r1, r7, #4
 80099ce:	f107 0308 	add.w	r3, r7, #8
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe ff56 	bl	8008884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	9202      	str	r2, [sp, #8]
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	2300      	movs	r3, #0
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	2300      	movs	r3, #0
 80099e8:	460a      	mov	r2, r1
 80099ea:	4920      	ldr	r1, [pc, #128]	; (8009a6c <vTaskStartScheduler+0xb0>)
 80099ec:	4820      	ldr	r0, [pc, #128]	; (8009a70 <vTaskStartScheduler+0xb4>)
 80099ee:	f7ff fe61 	bl	80096b4 <xTaskCreateStatic>
 80099f2:	4602      	mov	r2, r0
 80099f4:	4b1f      	ldr	r3, [pc, #124]	; (8009a74 <vTaskStartScheduler+0xb8>)
 80099f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099f8:	4b1e      	ldr	r3, [pc, #120]	; (8009a74 <vTaskStartScheduler+0xb8>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a00:	2301      	movs	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	e001      	b.n	8009a0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d102      	bne.n	8009a16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a10:	f000 fdfa 	bl	800a608 <xTimerCreateTimerTask>
 8009a14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d115      	bne.n	8009a48 <vTaskStartScheduler+0x8c>
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a2e:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <vTaskStartScheduler+0xbc>)
 8009a30:	f04f 32ff 	mov.w	r2, #4294967295
 8009a34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <vTaskStartScheduler+0xc0>)
 8009a38:	2201      	movs	r2, #1
 8009a3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009a3c:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <vTaskStartScheduler+0xc4>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a42:	f001 f975 	bl	800ad30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a46:	e00d      	b.n	8009a64 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4e:	d109      	bne.n	8009a64 <vTaskStartScheduler+0xa8>
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	e7fe      	b.n	8009a62 <vTaskStartScheduler+0xa6>
}
 8009a64:	bf00      	nop
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	08010ac0 	.word	0x08010ac0
 8009a70:	0800a091 	.word	0x0800a091
 8009a74:	20001d9c 	.word	0x20001d9c
 8009a78:	20001d98 	.word	0x20001d98
 8009a7c:	20001d84 	.word	0x20001d84
 8009a80:	20001d7c 	.word	0x20001d7c

08009a84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009a88:	4b04      	ldr	r3, [pc, #16]	; (8009a9c <vTaskSuspendAll+0x18>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	4a03      	ldr	r2, [pc, #12]	; (8009a9c <vTaskSuspendAll+0x18>)
 8009a90:	6013      	str	r3, [r2, #0]
}
 8009a92:	bf00      	nop
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20001da0 	.word	0x20001da0

08009aa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009aae:	4b41      	ldr	r3, [pc, #260]	; (8009bb4 <xTaskResumeAll+0x114>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d109      	bne.n	8009aca <xTaskResumeAll+0x2a>
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	e7fe      	b.n	8009ac8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009aca:	f001 f9cf 	bl	800ae6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ace:	4b39      	ldr	r3, [pc, #228]	; (8009bb4 <xTaskResumeAll+0x114>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	4a37      	ldr	r2, [pc, #220]	; (8009bb4 <xTaskResumeAll+0x114>)
 8009ad6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ad8:	4b36      	ldr	r3, [pc, #216]	; (8009bb4 <xTaskResumeAll+0x114>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d162      	bne.n	8009ba6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ae0:	4b35      	ldr	r3, [pc, #212]	; (8009bb8 <xTaskResumeAll+0x118>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d05e      	beq.n	8009ba6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ae8:	e02f      	b.n	8009b4a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009aea:	4b34      	ldr	r3, [pc, #208]	; (8009bbc <xTaskResumeAll+0x11c>)
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3318      	adds	r3, #24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe ff82 	bl	8008a00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3304      	adds	r3, #4
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fe ff7d 	bl	8008a00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0a:	4b2d      	ldr	r3, [pc, #180]	; (8009bc0 <xTaskResumeAll+0x120>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d903      	bls.n	8009b1a <xTaskResumeAll+0x7a>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	4a2a      	ldr	r2, [pc, #168]	; (8009bc0 <xTaskResumeAll+0x120>)
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1e:	4613      	mov	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4a27      	ldr	r2, [pc, #156]	; (8009bc4 <xTaskResumeAll+0x124>)
 8009b28:	441a      	add	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4610      	mov	r0, r2
 8009b32:	f7fe ff08 	bl	8008946 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3a:	4b23      	ldr	r3, [pc, #140]	; (8009bc8 <xTaskResumeAll+0x128>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d302      	bcc.n	8009b4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009b44:	4b21      	ldr	r3, [pc, #132]	; (8009bcc <xTaskResumeAll+0x12c>)
 8009b46:	2201      	movs	r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b4a:	4b1c      	ldr	r3, [pc, #112]	; (8009bbc <xTaskResumeAll+0x11c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1cb      	bne.n	8009aea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b58:	f000 fb4c 	bl	800a1f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b5c:	4b1c      	ldr	r3, [pc, #112]	; (8009bd0 <xTaskResumeAll+0x130>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d010      	beq.n	8009b8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b68:	f000 f846 	bl	8009bf8 <xTaskIncrementTick>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009b72:	4b16      	ldr	r3, [pc, #88]	; (8009bcc <xTaskResumeAll+0x12c>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1f1      	bne.n	8009b68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009b84:	4b12      	ldr	r3, [pc, #72]	; (8009bd0 <xTaskResumeAll+0x130>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <xTaskResumeAll+0x12c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b92:	2301      	movs	r3, #1
 8009b94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b96:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <xTaskResumeAll+0x134>)
 8009b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ba6:	f001 f98f 	bl	800aec8 <vPortExitCritical>

	return xAlreadyYielded;
 8009baa:	68bb      	ldr	r3, [r7, #8]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20001da0 	.word	0x20001da0
 8009bb8:	20001d78 	.word	0x20001d78
 8009bbc:	20001d38 	.word	0x20001d38
 8009bc0:	20001d80 	.word	0x20001d80
 8009bc4:	200018a8 	.word	0x200018a8
 8009bc8:	200018a4 	.word	0x200018a4
 8009bcc:	20001d8c 	.word	0x20001d8c
 8009bd0:	20001d88 	.word	0x20001d88
 8009bd4:	e000ed04 	.word	0xe000ed04

08009bd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <xTaskGetTickCount+0x1c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009be4:	687b      	ldr	r3, [r7, #4]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20001d7c 	.word	0x20001d7c

08009bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c02:	4b51      	ldr	r3, [pc, #324]	; (8009d48 <xTaskIncrementTick+0x150>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f040 808d 	bne.w	8009d26 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c0c:	4b4f      	ldr	r3, [pc, #316]	; (8009d4c <xTaskIncrementTick+0x154>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3301      	adds	r3, #1
 8009c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c14:	4a4d      	ldr	r2, [pc, #308]	; (8009d4c <xTaskIncrementTick+0x154>)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d11f      	bne.n	8009c60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c20:	4b4b      	ldr	r3, [pc, #300]	; (8009d50 <xTaskIncrementTick+0x158>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d009      	beq.n	8009c3e <xTaskIncrementTick+0x46>
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	e7fe      	b.n	8009c3c <xTaskIncrementTick+0x44>
 8009c3e:	4b44      	ldr	r3, [pc, #272]	; (8009d50 <xTaskIncrementTick+0x158>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	4b43      	ldr	r3, [pc, #268]	; (8009d54 <xTaskIncrementTick+0x15c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a41      	ldr	r2, [pc, #260]	; (8009d50 <xTaskIncrementTick+0x158>)
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	4a41      	ldr	r2, [pc, #260]	; (8009d54 <xTaskIncrementTick+0x15c>)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	4b41      	ldr	r3, [pc, #260]	; (8009d58 <xTaskIncrementTick+0x160>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3301      	adds	r3, #1
 8009c58:	4a3f      	ldr	r2, [pc, #252]	; (8009d58 <xTaskIncrementTick+0x160>)
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	f000 faca 	bl	800a1f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c60:	4b3e      	ldr	r3, [pc, #248]	; (8009d5c <xTaskIncrementTick+0x164>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d34e      	bcc.n	8009d08 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c6a:	4b39      	ldr	r3, [pc, #228]	; (8009d50 <xTaskIncrementTick+0x158>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <xTaskIncrementTick+0x80>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <xTaskIncrementTick+0x82>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d004      	beq.n	8009c88 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c7e:	4b37      	ldr	r3, [pc, #220]	; (8009d5c <xTaskIncrementTick+0x164>)
 8009c80:	f04f 32ff 	mov.w	r2, #4294967295
 8009c84:	601a      	str	r2, [r3, #0]
					break;
 8009c86:	e03f      	b.n	8009d08 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c88:	4b31      	ldr	r3, [pc, #196]	; (8009d50 <xTaskIncrementTick+0x158>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d203      	bcs.n	8009ca8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ca0:	4a2e      	ldr	r2, [pc, #184]	; (8009d5c <xTaskIncrementTick+0x164>)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6013      	str	r3, [r2, #0]
						break;
 8009ca6:	e02f      	b.n	8009d08 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fea7 	bl	8008a00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d004      	beq.n	8009cc4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	3318      	adds	r3, #24
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe fe9e 	bl	8008a00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc8:	4b25      	ldr	r3, [pc, #148]	; (8009d60 <xTaskIncrementTick+0x168>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d903      	bls.n	8009cd8 <xTaskIncrementTick+0xe0>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	4a22      	ldr	r2, [pc, #136]	; (8009d60 <xTaskIncrementTick+0x168>)
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cdc:	4613      	mov	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4a1f      	ldr	r2, [pc, #124]	; (8009d64 <xTaskIncrementTick+0x16c>)
 8009ce6:	441a      	add	r2, r3
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	3304      	adds	r3, #4
 8009cec:	4619      	mov	r1, r3
 8009cee:	4610      	mov	r0, r2
 8009cf0:	f7fe fe29 	bl	8008946 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf8:	4b1b      	ldr	r3, [pc, #108]	; (8009d68 <xTaskIncrementTick+0x170>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d3b3      	bcc.n	8009c6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009d02:	2301      	movs	r3, #1
 8009d04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d06:	e7b0      	b.n	8009c6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d08:	4b17      	ldr	r3, [pc, #92]	; (8009d68 <xTaskIncrementTick+0x170>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0e:	4915      	ldr	r1, [pc, #84]	; (8009d64 <xTaskIncrementTick+0x16c>)
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	440b      	add	r3, r1
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d907      	bls.n	8009d30 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009d20:	2301      	movs	r3, #1
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	e004      	b.n	8009d30 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d26:	4b11      	ldr	r3, [pc, #68]	; (8009d6c <xTaskIncrementTick+0x174>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	4a0f      	ldr	r2, [pc, #60]	; (8009d6c <xTaskIncrementTick+0x174>)
 8009d2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d30:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <xTaskIncrementTick+0x178>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d3c:	697b      	ldr	r3, [r7, #20]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20001da0 	.word	0x20001da0
 8009d4c:	20001d7c 	.word	0x20001d7c
 8009d50:	20001d30 	.word	0x20001d30
 8009d54:	20001d34 	.word	0x20001d34
 8009d58:	20001d90 	.word	0x20001d90
 8009d5c:	20001d98 	.word	0x20001d98
 8009d60:	20001d80 	.word	0x20001d80
 8009d64:	200018a8 	.word	0x200018a8
 8009d68:	200018a4 	.word	0x200018a4
 8009d6c:	20001d88 	.word	0x20001d88
 8009d70:	20001d8c 	.word	0x20001d8c

08009d74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d7a:	4b27      	ldr	r3, [pc, #156]	; (8009e18 <vTaskSwitchContext+0xa4>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d82:	4b26      	ldr	r3, [pc, #152]	; (8009e1c <vTaskSwitchContext+0xa8>)
 8009d84:	2201      	movs	r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d88:	e040      	b.n	8009e0c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009d8a:	4b24      	ldr	r3, [pc, #144]	; (8009e1c <vTaskSwitchContext+0xa8>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009d90:	4b23      	ldr	r3, [pc, #140]	; (8009e20 <vTaskSwitchContext+0xac>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	e00f      	b.n	8009db8 <vTaskSwitchContext+0x44>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d109      	bne.n	8009db2 <vTaskSwitchContext+0x3e>
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	607b      	str	r3, [r7, #4]
 8009db0:	e7fe      	b.n	8009db0 <vTaskSwitchContext+0x3c>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	491a      	ldr	r1, [pc, #104]	; (8009e24 <vTaskSwitchContext+0xb0>)
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	440b      	add	r3, r1
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0e5      	beq.n	8009d98 <vTaskSwitchContext+0x24>
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4a13      	ldr	r2, [pc, #76]	; (8009e24 <vTaskSwitchContext+0xb0>)
 8009dd8:	4413      	add	r3, r2
 8009dda:	60bb      	str	r3, [r7, #8]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	3308      	adds	r3, #8
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d104      	bne.n	8009dfc <vTaskSwitchContext+0x88>
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	605a      	str	r2, [r3, #4]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	4a09      	ldr	r2, [pc, #36]	; (8009e28 <vTaskSwitchContext+0xb4>)
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	4a06      	ldr	r2, [pc, #24]	; (8009e20 <vTaskSwitchContext+0xac>)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6013      	str	r3, [r2, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	20001da0 	.word	0x20001da0
 8009e1c:	20001d8c 	.word	0x20001d8c
 8009e20:	20001d80 	.word	0x20001d80
 8009e24:	200018a8 	.word	0x200018a8
 8009e28:	200018a4 	.word	0x200018a4

08009e2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d109      	bne.n	8009e50 <vTaskPlaceOnEventList+0x24>
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	e7fe      	b.n	8009e4e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <vTaskPlaceOnEventList+0x44>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3318      	adds	r3, #24
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7fe fd98 	bl	800898e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e5e:	2101      	movs	r1, #1
 8009e60:	6838      	ldr	r0, [r7, #0]
 8009e62:	f000 fb7d 	bl	800a560 <prvAddCurrentTaskToDelayedList>
}
 8009e66:	bf00      	nop
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	200018a4 	.word	0x200018a4

08009e74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d109      	bne.n	8009e9a <vTaskPlaceOnEventListRestricted+0x26>
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	e7fe      	b.n	8009e98 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <vTaskPlaceOnEventListRestricted+0x50>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3318      	adds	r3, #24
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7fe fd4f 	bl	8008946 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009eae:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	68b8      	ldr	r0, [r7, #8]
 8009eb8:	f000 fb52 	bl	800a560 <prvAddCurrentTaskToDelayedList>
	}
 8009ebc:	bf00      	nop
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	200018a4 	.word	0x200018a4

08009ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d109      	bne.n	8009ef2 <xTaskRemoveFromEventList+0x2a>
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	e7fe      	b.n	8009ef0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	3318      	adds	r3, #24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fd82 	bl	8008a00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009efc:	4b1d      	ldr	r3, [pc, #116]	; (8009f74 <xTaskRemoveFromEventList+0xac>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d11d      	bne.n	8009f40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fd79 	bl	8008a00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f12:	4b19      	ldr	r3, [pc, #100]	; (8009f78 <xTaskRemoveFromEventList+0xb0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d903      	bls.n	8009f22 <xTaskRemoveFromEventList+0x5a>
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	4a16      	ldr	r2, [pc, #88]	; (8009f78 <xTaskRemoveFromEventList+0xb0>)
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f26:	4613      	mov	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4a13      	ldr	r2, [pc, #76]	; (8009f7c <xTaskRemoveFromEventList+0xb4>)
 8009f30:	441a      	add	r2, r3
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	3304      	adds	r3, #4
 8009f36:	4619      	mov	r1, r3
 8009f38:	4610      	mov	r0, r2
 8009f3a:	f7fe fd04 	bl	8008946 <vListInsertEnd>
 8009f3e:	e005      	b.n	8009f4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	3318      	adds	r3, #24
 8009f44:	4619      	mov	r1, r3
 8009f46:	480e      	ldr	r0, [pc, #56]	; (8009f80 <xTaskRemoveFromEventList+0xb8>)
 8009f48:	f7fe fcfd 	bl	8008946 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	4b0c      	ldr	r3, [pc, #48]	; (8009f84 <xTaskRemoveFromEventList+0xbc>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d905      	bls.n	8009f66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f5e:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <xTaskRemoveFromEventList+0xc0>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	e001      	b.n	8009f6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009f6a:	697b      	ldr	r3, [r7, #20]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20001da0 	.word	0x20001da0
 8009f78:	20001d80 	.word	0x20001d80
 8009f7c:	200018a8 	.word	0x200018a8
 8009f80:	20001d38 	.word	0x20001d38
 8009f84:	200018a4 	.word	0x200018a4
 8009f88:	20001d8c 	.word	0x20001d8c

08009f8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <vTaskInternalSetTimeOutState+0x24>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f9c:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <vTaskInternalSetTimeOutState+0x28>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	605a      	str	r2, [r3, #4]
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	20001d90 	.word	0x20001d90
 8009fb4:	20001d7c 	.word	0x20001d7c

08009fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d109      	bne.n	8009fdc <xTaskCheckForTimeOut+0x24>
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	613b      	str	r3, [r7, #16]
 8009fda:	e7fe      	b.n	8009fda <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d109      	bne.n	8009ff6 <xTaskCheckForTimeOut+0x3e>
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e7fe      	b.n	8009ff4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009ff6:	f000 ff39 	bl	800ae6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ffa:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <xTaskCheckForTimeOut+0xb8>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d102      	bne.n	800a01a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a014:	2300      	movs	r3, #0
 800a016:	61fb      	str	r3, [r7, #28]
 800a018:	e023      	b.n	800a062 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	4b15      	ldr	r3, [pc, #84]	; (800a074 <xTaskCheckForTimeOut+0xbc>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d007      	beq.n	800a036 <xTaskCheckForTimeOut+0x7e>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d302      	bcc.n	800a036 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a030:	2301      	movs	r3, #1
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	e015      	b.n	800a062 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d20b      	bcs.n	800a058 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	1ad2      	subs	r2, r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff ff9d 	bl	8009f8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a052:	2300      	movs	r3, #0
 800a054:	61fb      	str	r3, [r7, #28]
 800a056:	e004      	b.n	800a062 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a05e:	2301      	movs	r3, #1
 800a060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a062:	f000 ff31 	bl	800aec8 <vPortExitCritical>

	return xReturn;
 800a066:	69fb      	ldr	r3, [r7, #28]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3720      	adds	r7, #32
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20001d7c 	.word	0x20001d7c
 800a074:	20001d90 	.word	0x20001d90

0800a078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a07c:	4b03      	ldr	r3, [pc, #12]	; (800a08c <vTaskMissedYield+0x14>)
 800a07e:	2201      	movs	r2, #1
 800a080:	601a      	str	r2, [r3, #0]
}
 800a082:	bf00      	nop
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	20001d8c 	.word	0x20001d8c

0800a090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a098:	f000 f852 	bl	800a140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a09c:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <prvIdleTask+0x28>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d9f9      	bls.n	800a098 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <prvIdleTask+0x2c>)
 800a0a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0b4:	e7f0      	b.n	800a098 <prvIdleTask+0x8>
 800a0b6:	bf00      	nop
 800a0b8:	200018a8 	.word	0x200018a8
 800a0bc:	e000ed04 	.word	0xe000ed04

0800a0c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	e00c      	b.n	800a0e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4a12      	ldr	r2, [pc, #72]	; (800a120 <prvInitialiseTaskLists+0x60>)
 800a0d8:	4413      	add	r3, r2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe fc06 	bl	80088ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	607b      	str	r3, [r7, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b37      	cmp	r3, #55	; 0x37
 800a0ea:	d9ef      	bls.n	800a0cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0ec:	480d      	ldr	r0, [pc, #52]	; (800a124 <prvInitialiseTaskLists+0x64>)
 800a0ee:	f7fe fbfd 	bl	80088ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0f2:	480d      	ldr	r0, [pc, #52]	; (800a128 <prvInitialiseTaskLists+0x68>)
 800a0f4:	f7fe fbfa 	bl	80088ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0f8:	480c      	ldr	r0, [pc, #48]	; (800a12c <prvInitialiseTaskLists+0x6c>)
 800a0fa:	f7fe fbf7 	bl	80088ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0fe:	480c      	ldr	r0, [pc, #48]	; (800a130 <prvInitialiseTaskLists+0x70>)
 800a100:	f7fe fbf4 	bl	80088ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a104:	480b      	ldr	r0, [pc, #44]	; (800a134 <prvInitialiseTaskLists+0x74>)
 800a106:	f7fe fbf1 	bl	80088ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <prvInitialiseTaskLists+0x78>)
 800a10c:	4a05      	ldr	r2, [pc, #20]	; (800a124 <prvInitialiseTaskLists+0x64>)
 800a10e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a110:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <prvInitialiseTaskLists+0x7c>)
 800a112:	4a05      	ldr	r2, [pc, #20]	; (800a128 <prvInitialiseTaskLists+0x68>)
 800a114:	601a      	str	r2, [r3, #0]
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200018a8 	.word	0x200018a8
 800a124:	20001d08 	.word	0x20001d08
 800a128:	20001d1c 	.word	0x20001d1c
 800a12c:	20001d38 	.word	0x20001d38
 800a130:	20001d4c 	.word	0x20001d4c
 800a134:	20001d64 	.word	0x20001d64
 800a138:	20001d30 	.word	0x20001d30
 800a13c:	20001d34 	.word	0x20001d34

0800a140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a146:	e019      	b.n	800a17c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a148:	f000 fe90 	bl	800ae6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a14c:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <prvCheckTasksWaitingTermination+0x4c>)
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3304      	adds	r3, #4
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe fc51 	bl	8008a00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <prvCheckTasksWaitingTermination+0x50>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3b01      	subs	r3, #1
 800a164:	4a0a      	ldr	r2, [pc, #40]	; (800a190 <prvCheckTasksWaitingTermination+0x50>)
 800a166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a168:	4b0a      	ldr	r3, [pc, #40]	; (800a194 <prvCheckTasksWaitingTermination+0x54>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	4a09      	ldr	r2, [pc, #36]	; (800a194 <prvCheckTasksWaitingTermination+0x54>)
 800a170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a172:	f000 fea9 	bl	800aec8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f80e 	bl	800a198 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a17c:	4b05      	ldr	r3, [pc, #20]	; (800a194 <prvCheckTasksWaitingTermination+0x54>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e1      	bne.n	800a148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20001d4c 	.word	0x20001d4c
 800a190:	20001d78 	.word	0x20001d78
 800a194:	20001d60 	.word	0x20001d60

0800a198 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d108      	bne.n	800a1bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 f838 	bl	800b224 <vPortFree>
				vPortFree( pxTCB );
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 f835 	bl	800b224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1ba:	e017      	b.n	800a1ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d103      	bne.n	800a1ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f001 f82c 	bl	800b224 <vPortFree>
	}
 800a1cc:	e00e      	b.n	800a1ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d009      	beq.n	800a1ec <prvDeleteTCB+0x54>
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	60fb      	str	r3, [r7, #12]
 800a1ea:	e7fe      	b.n	800a1ea <prvDeleteTCB+0x52>
	}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <prvResetNextTaskUnblockTime+0x44>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <prvResetNextTaskUnblockTime+0x14>
 800a204:	2301      	movs	r3, #1
 800a206:	e000      	b.n	800a20a <prvResetNextTaskUnblockTime+0x16>
 800a208:	2300      	movs	r3, #0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a20e:	4b0b      	ldr	r3, [pc, #44]	; (800a23c <prvResetNextTaskUnblockTime+0x48>)
 800a210:	f04f 32ff 	mov.w	r2, #4294967295
 800a214:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a216:	e008      	b.n	800a22a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a218:	4b07      	ldr	r3, [pc, #28]	; (800a238 <prvResetNextTaskUnblockTime+0x44>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	4a05      	ldr	r2, [pc, #20]	; (800a23c <prvResetNextTaskUnblockTime+0x48>)
 800a228:	6013      	str	r3, [r2, #0]
}
 800a22a:	bf00      	nop
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	20001d30 	.word	0x20001d30
 800a23c:	20001d98 	.word	0x20001d98

0800a240 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a246:	4b0b      	ldr	r3, [pc, #44]	; (800a274 <xTaskGetSchedulerState+0x34>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d102      	bne.n	800a254 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a24e:	2301      	movs	r3, #1
 800a250:	607b      	str	r3, [r7, #4]
 800a252:	e008      	b.n	800a266 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a254:	4b08      	ldr	r3, [pc, #32]	; (800a278 <xTaskGetSchedulerState+0x38>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d102      	bne.n	800a262 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a25c:	2302      	movs	r3, #2
 800a25e:	607b      	str	r3, [r7, #4]
 800a260:	e001      	b.n	800a266 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a262:	2300      	movs	r3, #0
 800a264:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a266:	687b      	ldr	r3, [r7, #4]
	}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	20001d84 	.word	0x20001d84
 800a278:	20001da0 	.word	0x20001da0

0800a27c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a288:	2300      	movs	r3, #0
 800a28a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d056      	beq.n	800a340 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a296:	4b2d      	ldr	r3, [pc, #180]	; (800a34c <xTaskPriorityInherit+0xd0>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d246      	bcs.n	800a32e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	db06      	blt.n	800a2b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a8:	4b28      	ldr	r3, [pc, #160]	; (800a34c <xTaskPriorityInherit+0xd0>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6959      	ldr	r1, [r3, #20]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4a22      	ldr	r2, [pc, #136]	; (800a350 <xTaskPriorityInherit+0xd4>)
 800a2c8:	4413      	add	r3, r2
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d101      	bne.n	800a2d2 <xTaskPriorityInherit+0x56>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <xTaskPriorityInherit+0x58>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d022      	beq.n	800a31e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fe fb8f 	bl	8008a00 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2e2:	4b1a      	ldr	r3, [pc, #104]	; (800a34c <xTaskPriorityInherit+0xd0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f0:	4b18      	ldr	r3, [pc, #96]	; (800a354 <xTaskPriorityInherit+0xd8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d903      	bls.n	800a300 <xTaskPriorityInherit+0x84>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	4a15      	ldr	r2, [pc, #84]	; (800a354 <xTaskPriorityInherit+0xd8>)
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4a10      	ldr	r2, [pc, #64]	; (800a350 <xTaskPriorityInherit+0xd4>)
 800a30e:	441a      	add	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	3304      	adds	r3, #4
 800a314:	4619      	mov	r1, r3
 800a316:	4610      	mov	r0, r2
 800a318:	f7fe fb15 	bl	8008946 <vListInsertEnd>
 800a31c:	e004      	b.n	800a328 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a31e:	4b0b      	ldr	r3, [pc, #44]	; (800a34c <xTaskPriorityInherit+0xd0>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a328:	2301      	movs	r3, #1
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	e008      	b.n	800a340 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a332:	4b06      	ldr	r3, [pc, #24]	; (800a34c <xTaskPriorityInherit+0xd0>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	429a      	cmp	r2, r3
 800a33a:	d201      	bcs.n	800a340 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a340:	68fb      	ldr	r3, [r7, #12]
	}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	200018a4 	.word	0x200018a4
 800a350:	200018a8 	.word	0x200018a8
 800a354:	20001d80 	.word	0x20001d80

0800a358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a364:	2300      	movs	r3, #0
 800a366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d054      	beq.n	800a418 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a36e:	4b2d      	ldr	r3, [pc, #180]	; (800a424 <xTaskPriorityDisinherit+0xcc>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	429a      	cmp	r2, r3
 800a376:	d009      	beq.n	800a38c <xTaskPriorityDisinherit+0x34>
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	e7fe      	b.n	800a38a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a390:	2b00      	cmp	r3, #0
 800a392:	d109      	bne.n	800a3a8 <xTaskPriorityDisinherit+0x50>
 800a394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	60bb      	str	r3, [r7, #8]
 800a3a6:	e7fe      	b.n	800a3a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ac:	1e5a      	subs	r2, r3, #1
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d02c      	beq.n	800a418 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d128      	bne.n	800a418 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fb18 	bl	8008a00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	; (800a428 <xTaskPriorityDisinherit+0xd0>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d903      	bls.n	800a3f8 <xTaskPriorityDisinherit+0xa0>
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	4a0c      	ldr	r2, [pc, #48]	; (800a428 <xTaskPriorityDisinherit+0xd0>)
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4a09      	ldr	r2, [pc, #36]	; (800a42c <xTaskPriorityDisinherit+0xd4>)
 800a406:	441a      	add	r2, r3
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	3304      	adds	r3, #4
 800a40c:	4619      	mov	r1, r3
 800a40e:	4610      	mov	r0, r2
 800a410:	f7fe fa99 	bl	8008946 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a418:	697b      	ldr	r3, [r7, #20]
	}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	200018a4 	.word	0x200018a4
 800a428:	20001d80 	.word	0x20001d80
 800a42c:	200018a8 	.word	0x200018a8

0800a430 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a43e:	2301      	movs	r3, #1
 800a440:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d06d      	beq.n	800a524 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d109      	bne.n	800a464 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	60fb      	str	r3, [r7, #12]
 800a462:	e7fe      	b.n	800a462 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d902      	bls.n	800a474 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	61fb      	str	r3, [r7, #28]
 800a472:	e002      	b.n	800a47a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a478:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	69fa      	ldr	r2, [r7, #28]
 800a480:	429a      	cmp	r2, r3
 800a482:	d04f      	beq.n	800a524 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d14a      	bne.n	800a524 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a48e:	4b27      	ldr	r3, [pc, #156]	; (800a52c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	429a      	cmp	r2, r3
 800a496:	d109      	bne.n	800a4ac <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	60bb      	str	r3, [r7, #8]
 800a4aa:	e7fe      	b.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	db04      	blt.n	800a4ca <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	6959      	ldr	r1, [r3, #20]
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4a15      	ldr	r2, [pc, #84]	; (800a530 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4da:	4413      	add	r3, r2
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	d101      	bne.n	800a4e4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e000      	b.n	800a4e6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d01c      	beq.n	800a524 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fe fa86 	bl	8008a00 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	; (800a534 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d903      	bls.n	800a508 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	4a0b      	ldr	r2, [pc, #44]	; (800a534 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50c:	4613      	mov	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4a06      	ldr	r2, [pc, #24]	; (800a530 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a516:	441a      	add	r2, r3
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	3304      	adds	r3, #4
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f7fe fa11 	bl	8008946 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a524:	bf00      	nop
 800a526:	3720      	adds	r7, #32
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	200018a4 	.word	0x200018a4
 800a530:	200018a8 	.word	0x200018a8
 800a534:	20001d80 	.word	0x20001d80

0800a538 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a538:	b480      	push	{r7}
 800a53a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a53c:	4b07      	ldr	r3, [pc, #28]	; (800a55c <pvTaskIncrementMutexHeldCount+0x24>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d004      	beq.n	800a54e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a544:	4b05      	ldr	r3, [pc, #20]	; (800a55c <pvTaskIncrementMutexHeldCount+0x24>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a54a:	3201      	adds	r2, #1
 800a54c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a54e:	4b03      	ldr	r3, [pc, #12]	; (800a55c <pvTaskIncrementMutexHeldCount+0x24>)
 800a550:	681b      	ldr	r3, [r3, #0]
	}
 800a552:	4618      	mov	r0, r3
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	200018a4 	.word	0x200018a4

0800a560 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a56a:	4b21      	ldr	r3, [pc, #132]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a570:	4b20      	ldr	r3, [pc, #128]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3304      	adds	r3, #4
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fa42 	bl	8008a00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a582:	d10a      	bne.n	800a59a <prvAddCurrentTaskToDelayedList+0x3a>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d007      	beq.n	800a59a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a58a:	4b1a      	ldr	r3, [pc, #104]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3304      	adds	r3, #4
 800a590:	4619      	mov	r1, r3
 800a592:	4819      	ldr	r0, [pc, #100]	; (800a5f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a594:	f7fe f9d7 	bl	8008946 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a598:	e026      	b.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4413      	add	r3, r2
 800a5a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5a2:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d209      	bcs.n	800a5c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5b2:	4b12      	ldr	r3, [pc, #72]	; (800a5fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7fe f9e5 	bl	800898e <vListInsert>
}
 800a5c4:	e010      	b.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5c6:	4b0e      	ldr	r3, [pc, #56]	; (800a600 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	f7fe f9db 	bl	800898e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5d8:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d202      	bcs.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5e2:	4a08      	ldr	r2, [pc, #32]	; (800a604 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6013      	str	r3, [r2, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	20001d7c 	.word	0x20001d7c
 800a5f4:	200018a4 	.word	0x200018a4
 800a5f8:	20001d64 	.word	0x20001d64
 800a5fc:	20001d34 	.word	0x20001d34
 800a600:	20001d30 	.word	0x20001d30
 800a604:	20001d98 	.word	0x20001d98

0800a608 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08a      	sub	sp, #40	; 0x28
 800a60c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a612:	f000 fac3 	bl	800ab9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a616:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <xTimerCreateTimerTask+0x80>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d021      	beq.n	800a662 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a626:	1d3a      	adds	r2, r7, #4
 800a628:	f107 0108 	add.w	r1, r7, #8
 800a62c:	f107 030c 	add.w	r3, r7, #12
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe f941 	bl	80088b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	9202      	str	r2, [sp, #8]
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	2302      	movs	r3, #2
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	2300      	movs	r3, #0
 800a646:	460a      	mov	r2, r1
 800a648:	4910      	ldr	r1, [pc, #64]	; (800a68c <xTimerCreateTimerTask+0x84>)
 800a64a:	4811      	ldr	r0, [pc, #68]	; (800a690 <xTimerCreateTimerTask+0x88>)
 800a64c:	f7ff f832 	bl	80096b4 <xTaskCreateStatic>
 800a650:	4602      	mov	r2, r0
 800a652:	4b10      	ldr	r3, [pc, #64]	; (800a694 <xTimerCreateTimerTask+0x8c>)
 800a654:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a656:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <xTimerCreateTimerTask+0x8c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a65e:	2301      	movs	r3, #1
 800a660:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d109      	bne.n	800a67c <xTimerCreateTimerTask+0x74>
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	613b      	str	r3, [r7, #16]
 800a67a:	e7fe      	b.n	800a67a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a67c:	697b      	ldr	r3, [r7, #20]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20001dd4 	.word	0x20001dd4
 800a68c:	08010ac8 	.word	0x08010ac8
 800a690:	0800a7b1 	.word	0x0800a7b1
 800a694:	20001dd8 	.word	0x20001dd8

0800a698 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08a      	sub	sp, #40	; 0x28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d109      	bne.n	800a6c4 <xTimerGenericCommand+0x2c>
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	623b      	str	r3, [r7, #32]
 800a6c2:	e7fe      	b.n	800a6c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6c4:	4b19      	ldr	r3, [pc, #100]	; (800a72c <xTimerGenericCommand+0x94>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d02a      	beq.n	800a722 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	dc18      	bgt.n	800a710 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6de:	f7ff fdaf 	bl	800a240 <xTaskGetSchedulerState>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d109      	bne.n	800a6fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6e8:	4b10      	ldr	r3, [pc, #64]	; (800a72c <xTimerGenericCommand+0x94>)
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	f107 0110 	add.w	r1, r7, #16
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f4:	f7fe fae8 	bl	8008cc8 <xQueueGenericSend>
 800a6f8:	6278      	str	r0, [r7, #36]	; 0x24
 800a6fa:	e012      	b.n	800a722 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6fc:	4b0b      	ldr	r3, [pc, #44]	; (800a72c <xTimerGenericCommand+0x94>)
 800a6fe:	6818      	ldr	r0, [r3, #0]
 800a700:	f107 0110 	add.w	r1, r7, #16
 800a704:	2300      	movs	r3, #0
 800a706:	2200      	movs	r2, #0
 800a708:	f7fe fade 	bl	8008cc8 <xQueueGenericSend>
 800a70c:	6278      	str	r0, [r7, #36]	; 0x24
 800a70e:	e008      	b.n	800a722 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a710:	4b06      	ldr	r3, [pc, #24]	; (800a72c <xTimerGenericCommand+0x94>)
 800a712:	6818      	ldr	r0, [r3, #0]
 800a714:	f107 0110 	add.w	r1, r7, #16
 800a718:	2300      	movs	r3, #0
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	f7fe fbce 	bl	8008ebc <xQueueGenericSendFromISR>
 800a720:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a724:	4618      	mov	r0, r3
 800a726:	3728      	adds	r7, #40	; 0x28
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	20001dd4 	.word	0x20001dd4

0800a730 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af02      	add	r7, sp, #8
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a73a:	4b1c      	ldr	r3, [pc, #112]	; (800a7ac <prvProcessExpiredTimer+0x7c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	3304      	adds	r3, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe f959 	bl	8008a00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d121      	bne.n	800a79a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	18d1      	adds	r1, r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	6978      	ldr	r0, [r7, #20]
 800a764:	f000 f8c8 	bl	800a8f8 <prvInsertTimerInActiveList>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d015      	beq.n	800a79a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a76e:	2300      	movs	r3, #0
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	2100      	movs	r1, #0
 800a778:	6978      	ldr	r0, [r7, #20]
 800a77a:	f7ff ff8d 	bl	800a698 <xTimerGenericCommand>
 800a77e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <prvProcessExpiredTimer+0x6a>
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	e7fe      	b.n	800a798 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	6978      	ldr	r0, [r7, #20]
 800a7a0:	4798      	blx	r3
}
 800a7a2:	bf00      	nop
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20001dcc 	.word	0x20001dcc

0800a7b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7b8:	f107 0308 	add.w	r3, r7, #8
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 f857 	bl	800a870 <prvGetNextExpireTime>
 800a7c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 f803 	bl	800a7d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7ce:	f000 f8d5 	bl	800a97c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7d2:	e7f1      	b.n	800a7b8 <prvTimerTask+0x8>

0800a7d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7de:	f7ff f951 	bl	8009a84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7e2:	f107 0308 	add.w	r3, r7, #8
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 f866 	bl	800a8b8 <prvSampleTimeNow>
 800a7ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d130      	bne.n	800a856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10a      	bne.n	800a810 <prvProcessTimerOrBlockTask+0x3c>
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d806      	bhi.n	800a810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a802:	f7ff f94d 	bl	8009aa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a806:	68f9      	ldr	r1, [r7, #12]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff ff91 	bl	800a730 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a80e:	e024      	b.n	800a85a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d008      	beq.n	800a828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a816:	4b13      	ldr	r3, [pc, #76]	; (800a864 <prvProcessTimerOrBlockTask+0x90>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bf0c      	ite	eq
 800a820:	2301      	moveq	r3, #1
 800a822:	2300      	movne	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a828:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <prvProcessTimerOrBlockTask+0x94>)
 800a82a:	6818      	ldr	r0, [r3, #0]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	4619      	mov	r1, r3
 800a836:	f7fe ff09 	bl	800964c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a83a:	f7ff f931 	bl	8009aa0 <xTaskResumeAll>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10a      	bne.n	800a85a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a844:	4b09      	ldr	r3, [pc, #36]	; (800a86c <prvProcessTimerOrBlockTask+0x98>)
 800a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	f3bf 8f6f 	isb	sy
}
 800a854:	e001      	b.n	800a85a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a856:	f7ff f923 	bl	8009aa0 <xTaskResumeAll>
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20001dd0 	.word	0x20001dd0
 800a868:	20001dd4 	.word	0x20001dd4
 800a86c:	e000ed04 	.word	0xe000ed04

0800a870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a878:	4b0e      	ldr	r3, [pc, #56]	; (800a8b4 <prvGetNextExpireTime+0x44>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bf0c      	ite	eq
 800a882:	2301      	moveq	r3, #1
 800a884:	2300      	movne	r3, #0
 800a886:	b2db      	uxtb	r3, r3
 800a888:	461a      	mov	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d105      	bne.n	800a8a2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a896:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <prvGetNextExpireTime+0x44>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	e001      	b.n	800a8a6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	20001dcc 	.word	0x20001dcc

0800a8b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8c0:	f7ff f98a 	bl	8009bd8 <xTaskGetTickCount>
 800a8c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <prvSampleTimeNow+0x3c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d205      	bcs.n	800a8dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8d0:	f000 f904 	bl	800aadc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	e002      	b.n	800a8e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8e2:	4a04      	ldr	r2, [pc, #16]	; (800a8f4 <prvSampleTimeNow+0x3c>)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20001ddc 	.word	0x20001ddc

0800a8f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d812      	bhi.n	800a944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	1ad2      	subs	r2, r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d302      	bcc.n	800a932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a92c:	2301      	movs	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	e01b      	b.n	800a96a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a932:	4b10      	ldr	r3, [pc, #64]	; (800a974 <prvInsertTimerInActiveList+0x7c>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3304      	adds	r3, #4
 800a93a:	4619      	mov	r1, r3
 800a93c:	4610      	mov	r0, r2
 800a93e:	f7fe f826 	bl	800898e <vListInsert>
 800a942:	e012      	b.n	800a96a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d206      	bcs.n	800a95a <prvInsertTimerInActiveList+0x62>
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d302      	bcc.n	800a95a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a954:	2301      	movs	r3, #1
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	e007      	b.n	800a96a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a95a:	4b07      	ldr	r3, [pc, #28]	; (800a978 <prvInsertTimerInActiveList+0x80>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3304      	adds	r3, #4
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f7fe f812 	bl	800898e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a96a:	697b      	ldr	r3, [r7, #20]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20001dd0 	.word	0x20001dd0
 800a978:	20001dcc 	.word	0x20001dcc

0800a97c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08e      	sub	sp, #56	; 0x38
 800a980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a982:	e099      	b.n	800aab8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	da17      	bge.n	800a9ba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a98a:	1d3b      	adds	r3, r7, #4
 800a98c:	3304      	adds	r3, #4
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d109      	bne.n	800a9aa <prvProcessReceivedCommands+0x2e>
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	61fb      	str	r3, [r7, #28]
 800a9a8:	e7fe      	b.n	800a9a8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9b0:	6850      	ldr	r0, [r2, #4]
 800a9b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9b4:	6892      	ldr	r2, [r2, #8]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	db7a      	blt.n	800aab6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d004      	beq.n	800a9d6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe f815 	bl	8008a00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9d6:	463b      	mov	r3, r7
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff ff6d 	bl	800a8b8 <prvSampleTimeNow>
 800a9de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b09      	cmp	r3, #9
 800a9e4:	d868      	bhi.n	800aab8 <prvProcessReceivedCommands+0x13c>
 800a9e6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <prvProcessReceivedCommands+0x70>)
 800a9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ec:	0800aa15 	.word	0x0800aa15
 800a9f0:	0800aa15 	.word	0x0800aa15
 800a9f4:	0800aa15 	.word	0x0800aa15
 800a9f8:	0800aab9 	.word	0x0800aab9
 800a9fc:	0800aa6f 	.word	0x0800aa6f
 800aa00:	0800aaa5 	.word	0x0800aaa5
 800aa04:	0800aa15 	.word	0x0800aa15
 800aa08:	0800aa15 	.word	0x0800aa15
 800aa0c:	0800aab9 	.word	0x0800aab9
 800aa10:	0800aa6f 	.word	0x0800aa6f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	18d1      	adds	r1, r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa22:	f7ff ff69 	bl	800a8f8 <prvInsertTimerInActiveList>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d045      	beq.n	800aab8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa32:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	69db      	ldr	r3, [r3, #28]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d13d      	bne.n	800aab8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	441a      	add	r2, r3
 800aa44:	2300      	movs	r3, #0
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4e:	f7ff fe23 	bl	800a698 <xTimerGenericCommand>
 800aa52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d12e      	bne.n	800aab8 <prvProcessReceivedCommands+0x13c>
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	61bb      	str	r3, [r7, #24]
 800aa6c:	e7fe      	b.n	800aa6c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <prvProcessReceivedCommands+0x114>
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	e7fe      	b.n	800aa8e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	699a      	ldr	r2, [r3, #24]
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	18d1      	adds	r1, r2, r3
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa9e:	f7ff ff2b 	bl	800a8f8 <prvInsertTimerInActiveList>
					break;
 800aaa2:	e009      	b.n	800aab8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d104      	bne.n	800aab8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800aaae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab0:	f000 fbb8 	bl	800b224 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aab4:	e000      	b.n	800aab8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aab6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aab8:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <prvProcessReceivedCommands+0x15c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	1d39      	adds	r1, r7, #4
 800aabe:	2200      	movs	r2, #0
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe fa8f 	bl	8008fe4 <xQueueReceive>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f47f af5b 	bne.w	800a984 <prvProcessReceivedCommands+0x8>
	}
}
 800aace:	bf00      	nop
 800aad0:	3730      	adds	r7, #48	; 0x30
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20001dd4 	.word	0x20001dd4

0800aadc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aae2:	e044      	b.n	800ab6e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aae4:	4b2b      	ldr	r3, [pc, #172]	; (800ab94 <prvSwitchTimerLists+0xb8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaee:	4b29      	ldr	r3, [pc, #164]	; (800ab94 <prvSwitchTimerLists+0xb8>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3304      	adds	r3, #4
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fd ff7f 	bl	8008a00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d12d      	bne.n	800ab6e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	4413      	add	r3, r2
 800ab1a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d90e      	bls.n	800ab42 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab30:	4b18      	ldr	r3, [pc, #96]	; (800ab94 <prvSwitchTimerLists+0xb8>)
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3304      	adds	r3, #4
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	f7fd ff27 	bl	800898e <vListInsert>
 800ab40:	e015      	b.n	800ab6e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab42:	2300      	movs	r3, #0
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	2300      	movs	r3, #0
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7ff fda3 	bl	800a698 <xTimerGenericCommand>
 800ab52:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d109      	bne.n	800ab6e <prvSwitchTimerLists+0x92>
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	603b      	str	r3, [r7, #0]
 800ab6c:	e7fe      	b.n	800ab6c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab6e:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <prvSwitchTimerLists+0xb8>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1b5      	bne.n	800aae4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab78:	4b06      	ldr	r3, [pc, #24]	; (800ab94 <prvSwitchTimerLists+0xb8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab7e:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <prvSwitchTimerLists+0xbc>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a04      	ldr	r2, [pc, #16]	; (800ab94 <prvSwitchTimerLists+0xb8>)
 800ab84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab86:	4a04      	ldr	r2, [pc, #16]	; (800ab98 <prvSwitchTimerLists+0xbc>)
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	6013      	str	r3, [r2, #0]
}
 800ab8c:	bf00      	nop
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	20001dcc 	.word	0x20001dcc
 800ab98:	20001dd0 	.word	0x20001dd0

0800ab9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aba2:	f000 f963 	bl	800ae6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aba6:	4b15      	ldr	r3, [pc, #84]	; (800abfc <prvCheckForValidListAndQueue+0x60>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d120      	bne.n	800abf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abae:	4814      	ldr	r0, [pc, #80]	; (800ac00 <prvCheckForValidListAndQueue+0x64>)
 800abb0:	f7fd fe9c 	bl	80088ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abb4:	4813      	ldr	r0, [pc, #76]	; (800ac04 <prvCheckForValidListAndQueue+0x68>)
 800abb6:	f7fd fe99 	bl	80088ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abba:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <prvCheckForValidListAndQueue+0x6c>)
 800abbc:	4a10      	ldr	r2, [pc, #64]	; (800ac00 <prvCheckForValidListAndQueue+0x64>)
 800abbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abc0:	4b12      	ldr	r3, [pc, #72]	; (800ac0c <prvCheckForValidListAndQueue+0x70>)
 800abc2:	4a10      	ldr	r2, [pc, #64]	; (800ac04 <prvCheckForValidListAndQueue+0x68>)
 800abc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abc6:	2300      	movs	r3, #0
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	4b11      	ldr	r3, [pc, #68]	; (800ac10 <prvCheckForValidListAndQueue+0x74>)
 800abcc:	4a11      	ldr	r2, [pc, #68]	; (800ac14 <prvCheckForValidListAndQueue+0x78>)
 800abce:	2110      	movs	r1, #16
 800abd0:	200a      	movs	r0, #10
 800abd2:	f7fd ffa7 	bl	8008b24 <xQueueGenericCreateStatic>
 800abd6:	4602      	mov	r2, r0
 800abd8:	4b08      	ldr	r3, [pc, #32]	; (800abfc <prvCheckForValidListAndQueue+0x60>)
 800abda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800abdc:	4b07      	ldr	r3, [pc, #28]	; (800abfc <prvCheckForValidListAndQueue+0x60>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d005      	beq.n	800abf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800abe4:	4b05      	ldr	r3, [pc, #20]	; (800abfc <prvCheckForValidListAndQueue+0x60>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	490b      	ldr	r1, [pc, #44]	; (800ac18 <prvCheckForValidListAndQueue+0x7c>)
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fd06 	bl	80095fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abf0:	f000 f96a 	bl	800aec8 <vPortExitCritical>
}
 800abf4:	bf00      	nop
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20001dd4 	.word	0x20001dd4
 800ac00:	20001da4 	.word	0x20001da4
 800ac04:	20001db8 	.word	0x20001db8
 800ac08:	20001dcc 	.word	0x20001dcc
 800ac0c:	20001dd0 	.word	0x20001dd0
 800ac10:	20001e80 	.word	0x20001e80
 800ac14:	20001de0 	.word	0x20001de0
 800ac18:	08010ad0 	.word	0x08010ad0

0800ac1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3b04      	subs	r3, #4
 800ac2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3b04      	subs	r3, #4
 800ac3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f023 0201 	bic.w	r2, r3, #1
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3b04      	subs	r3, #4
 800ac4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac4c:	4a0c      	ldr	r2, [pc, #48]	; (800ac80 <pxPortInitialiseStack+0x64>)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3b14      	subs	r3, #20
 800ac56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3b04      	subs	r3, #4
 800ac62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f06f 0202 	mvn.w	r2, #2
 800ac6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3b20      	subs	r3, #32
 800ac70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac72:	68fb      	ldr	r3, [r7, #12]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	0800ac85 	.word	0x0800ac85

0800ac84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac8e:	4b11      	ldr	r3, [pc, #68]	; (800acd4 <prvTaskExitError+0x50>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac96:	d009      	beq.n	800acac <prvTaskExitError+0x28>
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	60fb      	str	r3, [r7, #12]
 800acaa:	e7fe      	b.n	800acaa <prvTaskExitError+0x26>
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acbe:	bf00      	nop
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d0fc      	beq.n	800acc0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acc6:	bf00      	nop
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20000014 	.word	0x20000014
	...

0800ace0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ace0:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <pxCurrentTCBConst2>)
 800ace2:	6819      	ldr	r1, [r3, #0]
 800ace4:	6808      	ldr	r0, [r1, #0]
 800ace6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acea:	f380 8809 	msr	PSP, r0
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f04f 0000 	mov.w	r0, #0
 800acf6:	f380 8811 	msr	BASEPRI, r0
 800acfa:	4770      	bx	lr
 800acfc:	f3af 8000 	nop.w

0800ad00 <pxCurrentTCBConst2>:
 800ad00:	200018a4 	.word	0x200018a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop

0800ad08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad08:	4808      	ldr	r0, [pc, #32]	; (800ad2c <prvPortStartFirstTask+0x24>)
 800ad0a:	6800      	ldr	r0, [r0, #0]
 800ad0c:	6800      	ldr	r0, [r0, #0]
 800ad0e:	f380 8808 	msr	MSP, r0
 800ad12:	f04f 0000 	mov.w	r0, #0
 800ad16:	f380 8814 	msr	CONTROL, r0
 800ad1a:	b662      	cpsie	i
 800ad1c:	b661      	cpsie	f
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	df00      	svc	0
 800ad28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad2a:	bf00      	nop
 800ad2c:	e000ed08 	.word	0xe000ed08

0800ad30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad36:	4b44      	ldr	r3, [pc, #272]	; (800ae48 <xPortStartScheduler+0x118>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a44      	ldr	r2, [pc, #272]	; (800ae4c <xPortStartScheduler+0x11c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d109      	bne.n	800ad54 <xPortStartScheduler+0x24>
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	613b      	str	r3, [r7, #16]
 800ad52:	e7fe      	b.n	800ad52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad54:	4b3c      	ldr	r3, [pc, #240]	; (800ae48 <xPortStartScheduler+0x118>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a3d      	ldr	r2, [pc, #244]	; (800ae50 <xPortStartScheduler+0x120>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d109      	bne.n	800ad72 <xPortStartScheduler+0x42>
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e7fe      	b.n	800ad70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad72:	4b38      	ldr	r3, [pc, #224]	; (800ae54 <xPortStartScheduler+0x124>)
 800ad74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	22ff      	movs	r2, #255	; 0xff
 800ad82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad8c:	78fb      	ldrb	r3, [r7, #3]
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	4b30      	ldr	r3, [pc, #192]	; (800ae58 <xPortStartScheduler+0x128>)
 800ad98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad9a:	4b30      	ldr	r3, [pc, #192]	; (800ae5c <xPortStartScheduler+0x12c>)
 800ad9c:	2207      	movs	r2, #7
 800ad9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ada0:	e009      	b.n	800adb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ada2:	4b2e      	ldr	r3, [pc, #184]	; (800ae5c <xPortStartScheduler+0x12c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3b01      	subs	r3, #1
 800ada8:	4a2c      	ldr	r2, [pc, #176]	; (800ae5c <xPortStartScheduler+0x12c>)
 800adaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adb6:	78fb      	ldrb	r3, [r7, #3]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adbe:	2b80      	cmp	r3, #128	; 0x80
 800adc0:	d0ef      	beq.n	800ada2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adc2:	4b26      	ldr	r3, [pc, #152]	; (800ae5c <xPortStartScheduler+0x12c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f1c3 0307 	rsb	r3, r3, #7
 800adca:	2b04      	cmp	r3, #4
 800adcc:	d009      	beq.n	800ade2 <xPortStartScheduler+0xb2>
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	60bb      	str	r3, [r7, #8]
 800ade0:	e7fe      	b.n	800ade0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ade2:	4b1e      	ldr	r3, [pc, #120]	; (800ae5c <xPortStartScheduler+0x12c>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	021b      	lsls	r3, r3, #8
 800ade8:	4a1c      	ldr	r2, [pc, #112]	; (800ae5c <xPortStartScheduler+0x12c>)
 800adea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800adec:	4b1b      	ldr	r3, [pc, #108]	; (800ae5c <xPortStartScheduler+0x12c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adf4:	4a19      	ldr	r2, [pc, #100]	; (800ae5c <xPortStartScheduler+0x12c>)
 800adf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae00:	4b17      	ldr	r3, [pc, #92]	; (800ae60 <xPortStartScheduler+0x130>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a16      	ldr	r2, [pc, #88]	; (800ae60 <xPortStartScheduler+0x130>)
 800ae06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae0c:	4b14      	ldr	r3, [pc, #80]	; (800ae60 <xPortStartScheduler+0x130>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a13      	ldr	r2, [pc, #76]	; (800ae60 <xPortStartScheduler+0x130>)
 800ae12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae18:	f000 f8d6 	bl	800afc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae1c:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <xPortStartScheduler+0x134>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae22:	f000 f8f5 	bl	800b010 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae26:	4b10      	ldr	r3, [pc, #64]	; (800ae68 <xPortStartScheduler+0x138>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a0f      	ldr	r2, [pc, #60]	; (800ae68 <xPortStartScheduler+0x138>)
 800ae2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae32:	f7ff ff69 	bl	800ad08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae36:	f7fe ff9d 	bl	8009d74 <vTaskSwitchContext>
	prvTaskExitError();
 800ae3a:	f7ff ff23 	bl	800ac84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	e000ed00 	.word	0xe000ed00
 800ae4c:	410fc271 	.word	0x410fc271
 800ae50:	410fc270 	.word	0x410fc270
 800ae54:	e000e400 	.word	0xe000e400
 800ae58:	20001ed0 	.word	0x20001ed0
 800ae5c:	20001ed4 	.word	0x20001ed4
 800ae60:	e000ed20 	.word	0xe000ed20
 800ae64:	20000014 	.word	0x20000014
 800ae68:	e000ef34 	.word	0xe000ef34

0800ae6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae84:	4b0e      	ldr	r3, [pc, #56]	; (800aec0 <vPortEnterCritical+0x54>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	4a0d      	ldr	r2, [pc, #52]	; (800aec0 <vPortEnterCritical+0x54>)
 800ae8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae8e:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <vPortEnterCritical+0x54>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d10e      	bne.n	800aeb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae96:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <vPortEnterCritical+0x58>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <vPortEnterCritical+0x48>
 800aea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	603b      	str	r3, [r7, #0]
 800aeb2:	e7fe      	b.n	800aeb2 <vPortEnterCritical+0x46>
	}
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	20000014 	.word	0x20000014
 800aec4:	e000ed04 	.word	0xe000ed04

0800aec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aece:	4b11      	ldr	r3, [pc, #68]	; (800af14 <vPortExitCritical+0x4c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <vPortExitCritical+0x22>
 800aed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	607b      	str	r3, [r7, #4]
 800aee8:	e7fe      	b.n	800aee8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800aeea:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <vPortExitCritical+0x4c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	4a08      	ldr	r2, [pc, #32]	; (800af14 <vPortExitCritical+0x4c>)
 800aef2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aef4:	4b07      	ldr	r3, [pc, #28]	; (800af14 <vPortExitCritical+0x4c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d104      	bne.n	800af06 <vPortExitCritical+0x3e>
 800aefc:	2300      	movs	r3, #0
 800aefe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20000014 	.word	0x20000014
	...

0800af20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af20:	f3ef 8009 	mrs	r0, PSP
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	4b15      	ldr	r3, [pc, #84]	; (800af80 <pxCurrentTCBConst>)
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	f01e 0f10 	tst.w	lr, #16
 800af30:	bf08      	it	eq
 800af32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3a:	6010      	str	r0, [r2, #0]
 800af3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af44:	f380 8811 	msr	BASEPRI, r0
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f7fe ff10 	bl	8009d74 <vTaskSwitchContext>
 800af54:	f04f 0000 	mov.w	r0, #0
 800af58:	f380 8811 	msr	BASEPRI, r0
 800af5c:	bc09      	pop	{r0, r3}
 800af5e:	6819      	ldr	r1, [r3, #0]
 800af60:	6808      	ldr	r0, [r1, #0]
 800af62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af66:	f01e 0f10 	tst.w	lr, #16
 800af6a:	bf08      	it	eq
 800af6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af70:	f380 8809 	msr	PSP, r0
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	f3af 8000 	nop.w

0800af80 <pxCurrentTCBConst>:
 800af80:	200018a4 	.word	0x200018a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af84:	bf00      	nop
 800af86:	bf00      	nop

0800af88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afa0:	f7fe fe2a 	bl	8009bf8 <xTaskIncrementTick>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afaa:	4b06      	ldr	r3, [pc, #24]	; (800afc4 <SysTick_Handler+0x3c>)
 800afac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	2300      	movs	r3, #0
 800afb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	e000ed04 	.word	0xe000ed04

0800afc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800afc8:	b480      	push	{r7}
 800afca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <vPortSetupTimerInterrupt+0x34>)
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800afd2:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <vPortSetupTimerInterrupt+0x38>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800afd8:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <vPortSetupTimerInterrupt+0x3c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a0a      	ldr	r2, [pc, #40]	; (800b008 <vPortSetupTimerInterrupt+0x40>)
 800afde:	fba2 2303 	umull	r2, r3, r2, r3
 800afe2:	099b      	lsrs	r3, r3, #6
 800afe4:	4a09      	ldr	r2, [pc, #36]	; (800b00c <vPortSetupTimerInterrupt+0x44>)
 800afe6:	3b01      	subs	r3, #1
 800afe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afea:	4b04      	ldr	r3, [pc, #16]	; (800affc <vPortSetupTimerInterrupt+0x34>)
 800afec:	2207      	movs	r2, #7
 800afee:	601a      	str	r2, [r3, #0]
}
 800aff0:	bf00      	nop
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	e000e010 	.word	0xe000e010
 800b000:	e000e018 	.word	0xe000e018
 800b004:	20000008 	.word	0x20000008
 800b008:	10624dd3 	.word	0x10624dd3
 800b00c:	e000e014 	.word	0xe000e014

0800b010 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b010:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b020 <vPortEnableVFP+0x10>
 800b014:	6801      	ldr	r1, [r0, #0]
 800b016:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b01a:	6001      	str	r1, [r0, #0]
 800b01c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b01e:	bf00      	nop
 800b020:	e000ed88 	.word	0xe000ed88

0800b024 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b02a:	f3ef 8305 	mrs	r3, IPSR
 800b02e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b0f      	cmp	r3, #15
 800b034:	d913      	bls.n	800b05e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b036:	4a16      	ldr	r2, [pc, #88]	; (800b090 <vPortValidateInterruptPriority+0x6c>)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4413      	add	r3, r2
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b040:	4b14      	ldr	r3, [pc, #80]	; (800b094 <vPortValidateInterruptPriority+0x70>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	7afa      	ldrb	r2, [r7, #11]
 800b046:	429a      	cmp	r2, r3
 800b048:	d209      	bcs.n	800b05e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	607b      	str	r3, [r7, #4]
 800b05c:	e7fe      	b.n	800b05c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b05e:	4b0e      	ldr	r3, [pc, #56]	; (800b098 <vPortValidateInterruptPriority+0x74>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b066:	4b0d      	ldr	r3, [pc, #52]	; (800b09c <vPortValidateInterruptPriority+0x78>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d909      	bls.n	800b082 <vPortValidateInterruptPriority+0x5e>
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	e7fe      	b.n	800b080 <vPortValidateInterruptPriority+0x5c>
	}
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	e000e3f0 	.word	0xe000e3f0
 800b094:	20001ed0 	.word	0x20001ed0
 800b098:	e000ed0c 	.word	0xe000ed0c
 800b09c:	20001ed4 	.word	0x20001ed4

0800b0a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08a      	sub	sp, #40	; 0x28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0ac:	f7fe fcea 	bl	8009a84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0b0:	4b57      	ldr	r3, [pc, #348]	; (800b210 <pvPortMalloc+0x170>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0b8:	f000 f90c 	bl	800b2d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0bc:	4b55      	ldr	r3, [pc, #340]	; (800b214 <pvPortMalloc+0x174>)
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f040 808c 	bne.w	800b1e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01c      	beq.n	800b10a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f003 0307 	and.w	r3, r3, #7
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d013      	beq.n	800b10a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f023 0307 	bic.w	r3, r3, #7
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d009      	beq.n	800b10a <pvPortMalloc+0x6a>
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	617b      	str	r3, [r7, #20]
 800b108:	e7fe      	b.n	800b108 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d068      	beq.n	800b1e2 <pvPortMalloc+0x142>
 800b110:	4b41      	ldr	r3, [pc, #260]	; (800b218 <pvPortMalloc+0x178>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	429a      	cmp	r2, r3
 800b118:	d863      	bhi.n	800b1e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b11a:	4b40      	ldr	r3, [pc, #256]	; (800b21c <pvPortMalloc+0x17c>)
 800b11c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b11e:	4b3f      	ldr	r3, [pc, #252]	; (800b21c <pvPortMalloc+0x17c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b124:	e004      	b.n	800b130 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	429a      	cmp	r2, r3
 800b138:	d903      	bls.n	800b142 <pvPortMalloc+0xa2>
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1f1      	bne.n	800b126 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b142:	4b33      	ldr	r3, [pc, #204]	; (800b210 <pvPortMalloc+0x170>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b148:	429a      	cmp	r2, r3
 800b14a:	d04a      	beq.n	800b1e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2208      	movs	r2, #8
 800b152:	4413      	add	r3, r2
 800b154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	685a      	ldr	r2, [r3, #4]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	1ad2      	subs	r2, r2, r3
 800b166:	2308      	movs	r3, #8
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d91e      	bls.n	800b1ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4413      	add	r3, r2
 800b174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d009      	beq.n	800b194 <pvPortMalloc+0xf4>
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	613b      	str	r3, [r7, #16]
 800b192:	e7fe      	b.n	800b192 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	1ad2      	subs	r2, r2, r3
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1a6:	69b8      	ldr	r0, [r7, #24]
 800b1a8:	f000 f8f6 	bl	800b398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1ac:	4b1a      	ldr	r3, [pc, #104]	; (800b218 <pvPortMalloc+0x178>)
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	4a18      	ldr	r2, [pc, #96]	; (800b218 <pvPortMalloc+0x178>)
 800b1b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1ba:	4b17      	ldr	r3, [pc, #92]	; (800b218 <pvPortMalloc+0x178>)
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	4b18      	ldr	r3, [pc, #96]	; (800b220 <pvPortMalloc+0x180>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d203      	bcs.n	800b1ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1c6:	4b14      	ldr	r3, [pc, #80]	; (800b218 <pvPortMalloc+0x178>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a15      	ldr	r2, [pc, #84]	; (800b220 <pvPortMalloc+0x180>)
 800b1cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	4b10      	ldr	r3, [pc, #64]	; (800b214 <pvPortMalloc+0x174>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1e2:	f7fe fc5d 	bl	8009aa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <pvPortMalloc+0x164>
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	e7fe      	b.n	800b202 <pvPortMalloc+0x162>
	return pvReturn;
 800b204:	69fb      	ldr	r3, [r7, #28]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3728      	adds	r7, #40	; 0x28
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	20003e80 	.word	0x20003e80
 800b214:	20003e8c 	.word	0x20003e8c
 800b218:	20003e84 	.word	0x20003e84
 800b21c:	20003e78 	.word	0x20003e78
 800b220:	20003e88 	.word	0x20003e88

0800b224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d046      	beq.n	800b2c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b236:	2308      	movs	r3, #8
 800b238:	425b      	negs	r3, r3
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4413      	add	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	4b20      	ldr	r3, [pc, #128]	; (800b2cc <vPortFree+0xa8>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4013      	ands	r3, r2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d109      	bne.n	800b266 <vPortFree+0x42>
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	e7fe      	b.n	800b264 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d009      	beq.n	800b282 <vPortFree+0x5e>
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	60bb      	str	r3, [r7, #8]
 800b280:	e7fe      	b.n	800b280 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	4b11      	ldr	r3, [pc, #68]	; (800b2cc <vPortFree+0xa8>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4013      	ands	r3, r2
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d019      	beq.n	800b2c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d115      	bne.n	800b2c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <vPortFree+0xa8>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	43db      	mvns	r3, r3
 800b2a2:	401a      	ands	r2, r3
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2a8:	f7fe fbec 	bl	8009a84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <vPortFree+0xac>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	4a06      	ldr	r2, [pc, #24]	; (800b2d0 <vPortFree+0xac>)
 800b2b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2ba:	6938      	ldr	r0, [r7, #16]
 800b2bc:	f000 f86c 	bl	800b398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b2c0:	f7fe fbee 	bl	8009aa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2c4:	bf00      	nop
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	20003e8c 	.word	0x20003e8c
 800b2d0:	20003e84 	.word	0x20003e84

0800b2d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2da:	f44f 53fd 	mov.w	r3, #8096	; 0x1fa0
 800b2de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2e0:	4b27      	ldr	r3, [pc, #156]	; (800b380 <prvHeapInit+0xac>)
 800b2e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f003 0307 	and.w	r3, r3, #7
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00c      	beq.n	800b308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3307      	adds	r3, #7
 800b2f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f023 0307 	bic.w	r3, r3, #7
 800b2fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	4a1f      	ldr	r2, [pc, #124]	; (800b380 <prvHeapInit+0xac>)
 800b304:	4413      	add	r3, r2
 800b306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b30c:	4a1d      	ldr	r2, [pc, #116]	; (800b384 <prvHeapInit+0xb0>)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b312:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <prvHeapInit+0xb0>)
 800b314:	2200      	movs	r2, #0
 800b316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	4413      	add	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b320:	2208      	movs	r2, #8
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	1a9b      	subs	r3, r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 0307 	bic.w	r3, r3, #7
 800b32e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4a15      	ldr	r2, [pc, #84]	; (800b388 <prvHeapInit+0xb4>)
 800b334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <prvHeapInit+0xb4>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2200      	movs	r2, #0
 800b33c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b33e:	4b12      	ldr	r3, [pc, #72]	; (800b388 <prvHeapInit+0xb4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	1ad2      	subs	r2, r2, r3
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b354:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <prvHeapInit+0xb4>)
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	4a0a      	ldr	r2, [pc, #40]	; (800b38c <prvHeapInit+0xb8>)
 800b362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	4a09      	ldr	r2, [pc, #36]	; (800b390 <prvHeapInit+0xbc>)
 800b36a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b36c:	4b09      	ldr	r3, [pc, #36]	; (800b394 <prvHeapInit+0xc0>)
 800b36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b372:	601a      	str	r2, [r3, #0]
}
 800b374:	bf00      	nop
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	20001ed8 	.word	0x20001ed8
 800b384:	20003e78 	.word	0x20003e78
 800b388:	20003e80 	.word	0x20003e80
 800b38c:	20003e88 	.word	0x20003e88
 800b390:	20003e84 	.word	0x20003e84
 800b394:	20003e8c 	.word	0x20003e8c

0800b398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3a0:	4b28      	ldr	r3, [pc, #160]	; (800b444 <prvInsertBlockIntoFreeList+0xac>)
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	e002      	b.n	800b3ac <prvInsertBlockIntoFreeList+0x14>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d8f7      	bhi.n	800b3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d108      	bne.n	800b3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	441a      	add	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	441a      	add	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d118      	bne.n	800b420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	4b15      	ldr	r3, [pc, #84]	; (800b448 <prvInsertBlockIntoFreeList+0xb0>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d00d      	beq.n	800b416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	441a      	add	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	e008      	b.n	800b428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <prvInsertBlockIntoFreeList+0xb0>)
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	e003      	b.n	800b428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d002      	beq.n	800b436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	20003e78 	.word	0x20003e78
 800b448:	20003e80 	.word	0x20003e80

0800b44c <_ZdlPvj>:
 800b44c:	f7f6 bda0 	b.w	8001f90 <_ZdlPv>

0800b450 <_ZSt17__throw_bad_allocv>:
 800b450:	b508      	push	{r3, lr}
 800b452:	f001 f85a 	bl	800c50a <abort>

0800b456 <_ZSt20__throw_length_errorPKc>:
 800b456:	b508      	push	{r3, lr}
 800b458:	f001 f857 	bl	800c50a <abort>

0800b45c <pow>:
 800b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	ed2d 8b04 	vpush	{d8-d9}
 800b464:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b738 <pow+0x2dc>
 800b468:	b08d      	sub	sp, #52	; 0x34
 800b46a:	ec57 6b10 	vmov	r6, r7, d0
 800b46e:	ec55 4b11 	vmov	r4, r5, d1
 800b472:	f000 f965 	bl	800b740 <__ieee754_pow>
 800b476:	f999 3000 	ldrsb.w	r3, [r9]
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	3301      	adds	r3, #1
 800b47e:	eeb0 8a40 	vmov.f32	s16, s0
 800b482:	eef0 8a60 	vmov.f32	s17, s1
 800b486:	46c8      	mov	r8, r9
 800b488:	d05f      	beq.n	800b54a <pow+0xee>
 800b48a:	4622      	mov	r2, r4
 800b48c:	462b      	mov	r3, r5
 800b48e:	4620      	mov	r0, r4
 800b490:	4629      	mov	r1, r5
 800b492:	f7f5 fb53 	bl	8000b3c <__aeabi_dcmpun>
 800b496:	4683      	mov	fp, r0
 800b498:	2800      	cmp	r0, #0
 800b49a:	d156      	bne.n	800b54a <pow+0xee>
 800b49c:	4632      	mov	r2, r6
 800b49e:	463b      	mov	r3, r7
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f5 fb4a 	bl	8000b3c <__aeabi_dcmpun>
 800b4a8:	9001      	str	r0, [sp, #4]
 800b4aa:	b1e8      	cbz	r0, 800b4e8 <pow+0x8c>
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f5 fb10 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d046      	beq.n	800b54a <pow+0xee>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	9302      	str	r3, [sp, #8]
 800b4c0:	4b96      	ldr	r3, [pc, #600]	; (800b71c <pow+0x2c0>)
 800b4c2:	9303      	str	r3, [sp, #12]
 800b4c4:	4b96      	ldr	r3, [pc, #600]	; (800b720 <pow+0x2c4>)
 800b4c6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b4d0:	9b00      	ldr	r3, [sp, #0]
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b4d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b4dc:	d033      	beq.n	800b546 <pow+0xea>
 800b4de:	a802      	add	r0, sp, #8
 800b4e0:	f000 fefd 	bl	800c2de <matherr>
 800b4e4:	bb48      	cbnz	r0, 800b53a <pow+0xde>
 800b4e6:	e05d      	b.n	800b5a4 <pow+0x148>
 800b4e8:	f04f 0a00 	mov.w	sl, #0
 800b4ec:	f04f 0b00 	mov.w	fp, #0
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	465b      	mov	r3, fp
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	f7f5 faee 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4fc:	ec4b ab19 	vmov	d9, sl, fp
 800b500:	2800      	cmp	r0, #0
 800b502:	d054      	beq.n	800b5ae <pow+0x152>
 800b504:	4652      	mov	r2, sl
 800b506:	465b      	mov	r3, fp
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	f7f5 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b510:	4680      	mov	r8, r0
 800b512:	b318      	cbz	r0, 800b55c <pow+0x100>
 800b514:	2301      	movs	r3, #1
 800b516:	9302      	str	r3, [sp, #8]
 800b518:	4b80      	ldr	r3, [pc, #512]	; (800b71c <pow+0x2c0>)
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	9b01      	ldr	r3, [sp, #4]
 800b51e:	930a      	str	r3, [sp, #40]	; 0x28
 800b520:	9b00      	ldr	r3, [sp, #0]
 800b522:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b526:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b52a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0d5      	beq.n	800b4de <pow+0x82>
 800b532:	4b7b      	ldr	r3, [pc, #492]	; (800b720 <pow+0x2c4>)
 800b534:	2200      	movs	r2, #0
 800b536:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b53c:	b11b      	cbz	r3, 800b546 <pow+0xea>
 800b53e:	f001 f809 	bl	800c554 <__errno>
 800b542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b544:	6003      	str	r3, [r0, #0]
 800b546:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b54a:	eeb0 0a48 	vmov.f32	s0, s16
 800b54e:	eef0 0a68 	vmov.f32	s1, s17
 800b552:	b00d      	add	sp, #52	; 0x34
 800b554:	ecbd 8b04 	vpop	{d8-d9}
 800b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55c:	ec45 4b10 	vmov	d0, r4, r5
 800b560:	f000 feb5 	bl	800c2ce <finite>
 800b564:	2800      	cmp	r0, #0
 800b566:	d0f0      	beq.n	800b54a <pow+0xee>
 800b568:	4652      	mov	r2, sl
 800b56a:	465b      	mov	r3, fp
 800b56c:	4620      	mov	r0, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	f7f5 fabc 	bl	8000aec <__aeabi_dcmplt>
 800b574:	2800      	cmp	r0, #0
 800b576:	d0e8      	beq.n	800b54a <pow+0xee>
 800b578:	2301      	movs	r3, #1
 800b57a:	9302      	str	r3, [sp, #8]
 800b57c:	4b67      	ldr	r3, [pc, #412]	; (800b71c <pow+0x2c0>)
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	f999 3000 	ldrsb.w	r3, [r9]
 800b584:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b588:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b58c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b590:	b913      	cbnz	r3, 800b598 <pow+0x13c>
 800b592:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b596:	e7a2      	b.n	800b4de <pow+0x82>
 800b598:	4962      	ldr	r1, [pc, #392]	; (800b724 <pow+0x2c8>)
 800b59a:	2000      	movs	r0, #0
 800b59c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d19c      	bne.n	800b4de <pow+0x82>
 800b5a4:	f000 ffd6 	bl	800c554 <__errno>
 800b5a8:	2321      	movs	r3, #33	; 0x21
 800b5aa:	6003      	str	r3, [r0, #0]
 800b5ac:	e7c5      	b.n	800b53a <pow+0xde>
 800b5ae:	eeb0 0a48 	vmov.f32	s0, s16
 800b5b2:	eef0 0a68 	vmov.f32	s1, s17
 800b5b6:	f000 fe8a 	bl	800c2ce <finite>
 800b5ba:	9000      	str	r0, [sp, #0]
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f040 8081 	bne.w	800b6c4 <pow+0x268>
 800b5c2:	ec47 6b10 	vmov	d0, r6, r7
 800b5c6:	f000 fe82 	bl	800c2ce <finite>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d07a      	beq.n	800b6c4 <pow+0x268>
 800b5ce:	ec45 4b10 	vmov	d0, r4, r5
 800b5d2:	f000 fe7c 	bl	800c2ce <finite>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d074      	beq.n	800b6c4 <pow+0x268>
 800b5da:	ec53 2b18 	vmov	r2, r3, d8
 800b5de:	ee18 0a10 	vmov	r0, s16
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	f7f5 faaa 	bl	8000b3c <__aeabi_dcmpun>
 800b5e8:	f999 9000 	ldrsb.w	r9, [r9]
 800b5ec:	4b4b      	ldr	r3, [pc, #300]	; (800b71c <pow+0x2c0>)
 800b5ee:	b1b0      	cbz	r0, 800b61e <pow+0x1c2>
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	930a      	str	r3, [sp, #40]	; 0x28
 800b5fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b5fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b602:	f1b9 0f00 	cmp.w	r9, #0
 800b606:	d0c4      	beq.n	800b592 <pow+0x136>
 800b608:	4652      	mov	r2, sl
 800b60a:	465b      	mov	r3, fp
 800b60c:	4650      	mov	r0, sl
 800b60e:	4659      	mov	r1, fp
 800b610:	f7f5 f924 	bl	800085c <__aeabi_ddiv>
 800b614:	f1b9 0f02 	cmp.w	r9, #2
 800b618:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b61c:	e7c1      	b.n	800b5a2 <pow+0x146>
 800b61e:	2203      	movs	r2, #3
 800b620:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b624:	900a      	str	r0, [sp, #40]	; 0x28
 800b626:	4629      	mov	r1, r5
 800b628:	4620      	mov	r0, r4
 800b62a:	2200      	movs	r2, #0
 800b62c:	4b3e      	ldr	r3, [pc, #248]	; (800b728 <pow+0x2cc>)
 800b62e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b632:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b636:	f7f4 ffe7 	bl	8000608 <__aeabi_dmul>
 800b63a:	4604      	mov	r4, r0
 800b63c:	460d      	mov	r5, r1
 800b63e:	f1b9 0f00 	cmp.w	r9, #0
 800b642:	d124      	bne.n	800b68e <pow+0x232>
 800b644:	4b39      	ldr	r3, [pc, #228]	; (800b72c <pow+0x2d0>)
 800b646:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b64a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b64e:	4630      	mov	r0, r6
 800b650:	4652      	mov	r2, sl
 800b652:	465b      	mov	r3, fp
 800b654:	4639      	mov	r1, r7
 800b656:	f7f5 fa49 	bl	8000aec <__aeabi_dcmplt>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d056      	beq.n	800b70c <pow+0x2b0>
 800b65e:	ec45 4b10 	vmov	d0, r4, r5
 800b662:	f000 fe49 	bl	800c2f8 <rint>
 800b666:	4622      	mov	r2, r4
 800b668:	462b      	mov	r3, r5
 800b66a:	ec51 0b10 	vmov	r0, r1, d0
 800b66e:	f7f5 fa33 	bl	8000ad8 <__aeabi_dcmpeq>
 800b672:	b920      	cbnz	r0, 800b67e <pow+0x222>
 800b674:	4b2e      	ldr	r3, [pc, #184]	; (800b730 <pow+0x2d4>)
 800b676:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b67a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b67e:	f998 3000 	ldrsb.w	r3, [r8]
 800b682:	2b02      	cmp	r3, #2
 800b684:	d142      	bne.n	800b70c <pow+0x2b0>
 800b686:	f000 ff65 	bl	800c554 <__errno>
 800b68a:	2322      	movs	r3, #34	; 0x22
 800b68c:	e78d      	b.n	800b5aa <pow+0x14e>
 800b68e:	4b29      	ldr	r3, [pc, #164]	; (800b734 <pow+0x2d8>)
 800b690:	2200      	movs	r2, #0
 800b692:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b696:	4630      	mov	r0, r6
 800b698:	4652      	mov	r2, sl
 800b69a:	465b      	mov	r3, fp
 800b69c:	4639      	mov	r1, r7
 800b69e:	f7f5 fa25 	bl	8000aec <__aeabi_dcmplt>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d0eb      	beq.n	800b67e <pow+0x222>
 800b6a6:	ec45 4b10 	vmov	d0, r4, r5
 800b6aa:	f000 fe25 	bl	800c2f8 <rint>
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	ec51 0b10 	vmov	r0, r1, d0
 800b6b6:	f7f5 fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d1df      	bne.n	800b67e <pow+0x222>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	4b18      	ldr	r3, [pc, #96]	; (800b724 <pow+0x2c8>)
 800b6c2:	e7da      	b.n	800b67a <pow+0x21e>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	ec51 0b18 	vmov	r0, r1, d8
 800b6cc:	f7f5 fa04 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	f43f af3a 	beq.w	800b54a <pow+0xee>
 800b6d6:	ec47 6b10 	vmov	d0, r6, r7
 800b6da:	f000 fdf8 	bl	800c2ce <finite>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	f43f af33 	beq.w	800b54a <pow+0xee>
 800b6e4:	ec45 4b10 	vmov	d0, r4, r5
 800b6e8:	f000 fdf1 	bl	800c2ce <finite>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	f43f af2c 	beq.w	800b54a <pow+0xee>
 800b6f2:	2304      	movs	r3, #4
 800b6f4:	9302      	str	r3, [sp, #8]
 800b6f6:	4b09      	ldr	r3, [pc, #36]	; (800b71c <pow+0x2c0>)
 800b6f8:	9303      	str	r3, [sp, #12]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	930a      	str	r3, [sp, #40]	; 0x28
 800b6fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b702:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b706:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b70a:	e7b8      	b.n	800b67e <pow+0x222>
 800b70c:	a802      	add	r0, sp, #8
 800b70e:	f000 fde6 	bl	800c2de <matherr>
 800b712:	2800      	cmp	r0, #0
 800b714:	f47f af11 	bne.w	800b53a <pow+0xde>
 800b718:	e7b5      	b.n	800b686 <pow+0x22a>
 800b71a:	bf00      	nop
 800b71c:	08010b80 	.word	0x08010b80
 800b720:	3ff00000 	.word	0x3ff00000
 800b724:	fff00000 	.word	0xfff00000
 800b728:	3fe00000 	.word	0x3fe00000
 800b72c:	47efffff 	.word	0x47efffff
 800b730:	c7efffff 	.word	0xc7efffff
 800b734:	7ff00000 	.word	0x7ff00000
 800b738:	20000018 	.word	0x20000018
 800b73c:	00000000 	.word	0x00000000

0800b740 <__ieee754_pow>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	b091      	sub	sp, #68	; 0x44
 800b746:	ed8d 1b00 	vstr	d1, [sp]
 800b74a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b74e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b752:	ea58 0302 	orrs.w	r3, r8, r2
 800b756:	ec57 6b10 	vmov	r6, r7, d0
 800b75a:	f000 84be 	beq.w	800c0da <__ieee754_pow+0x99a>
 800b75e:	4b7a      	ldr	r3, [pc, #488]	; (800b948 <__ieee754_pow+0x208>)
 800b760:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b764:	429c      	cmp	r4, r3
 800b766:	463d      	mov	r5, r7
 800b768:	ee10 aa10 	vmov	sl, s0
 800b76c:	dc09      	bgt.n	800b782 <__ieee754_pow+0x42>
 800b76e:	d103      	bne.n	800b778 <__ieee754_pow+0x38>
 800b770:	b93e      	cbnz	r6, 800b782 <__ieee754_pow+0x42>
 800b772:	45a0      	cmp	r8, r4
 800b774:	dc0d      	bgt.n	800b792 <__ieee754_pow+0x52>
 800b776:	e001      	b.n	800b77c <__ieee754_pow+0x3c>
 800b778:	4598      	cmp	r8, r3
 800b77a:	dc02      	bgt.n	800b782 <__ieee754_pow+0x42>
 800b77c:	4598      	cmp	r8, r3
 800b77e:	d10e      	bne.n	800b79e <__ieee754_pow+0x5e>
 800b780:	b16a      	cbz	r2, 800b79e <__ieee754_pow+0x5e>
 800b782:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b786:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b78a:	ea54 030a 	orrs.w	r3, r4, sl
 800b78e:	f000 84a4 	beq.w	800c0da <__ieee754_pow+0x99a>
 800b792:	486e      	ldr	r0, [pc, #440]	; (800b94c <__ieee754_pow+0x20c>)
 800b794:	b011      	add	sp, #68	; 0x44
 800b796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79a:	f000 bda5 	b.w	800c2e8 <nan>
 800b79e:	2d00      	cmp	r5, #0
 800b7a0:	da53      	bge.n	800b84a <__ieee754_pow+0x10a>
 800b7a2:	4b6b      	ldr	r3, [pc, #428]	; (800b950 <__ieee754_pow+0x210>)
 800b7a4:	4598      	cmp	r8, r3
 800b7a6:	dc4d      	bgt.n	800b844 <__ieee754_pow+0x104>
 800b7a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b7ac:	4598      	cmp	r8, r3
 800b7ae:	dd4c      	ble.n	800b84a <__ieee754_pow+0x10a>
 800b7b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b7b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b7b8:	2b14      	cmp	r3, #20
 800b7ba:	dd26      	ble.n	800b80a <__ieee754_pow+0xca>
 800b7bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b7c0:	fa22 f103 	lsr.w	r1, r2, r3
 800b7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d13e      	bne.n	800b84a <__ieee754_pow+0x10a>
 800b7cc:	f001 0101 	and.w	r1, r1, #1
 800b7d0:	f1c1 0b02 	rsb	fp, r1, #2
 800b7d4:	2a00      	cmp	r2, #0
 800b7d6:	d15b      	bne.n	800b890 <__ieee754_pow+0x150>
 800b7d8:	4b5b      	ldr	r3, [pc, #364]	; (800b948 <__ieee754_pow+0x208>)
 800b7da:	4598      	cmp	r8, r3
 800b7dc:	d124      	bne.n	800b828 <__ieee754_pow+0xe8>
 800b7de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b7e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b7e6:	ea53 030a 	orrs.w	r3, r3, sl
 800b7ea:	f000 8476 	beq.w	800c0da <__ieee754_pow+0x99a>
 800b7ee:	4b59      	ldr	r3, [pc, #356]	; (800b954 <__ieee754_pow+0x214>)
 800b7f0:	429c      	cmp	r4, r3
 800b7f2:	dd2d      	ble.n	800b850 <__ieee754_pow+0x110>
 800b7f4:	f1b9 0f00 	cmp.w	r9, #0
 800b7f8:	f280 8473 	bge.w	800c0e2 <__ieee754_pow+0x9a2>
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	2100      	movs	r1, #0
 800b800:	ec41 0b10 	vmov	d0, r0, r1
 800b804:	b011      	add	sp, #68	; 0x44
 800b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	d13e      	bne.n	800b88c <__ieee754_pow+0x14c>
 800b80e:	f1c3 0314 	rsb	r3, r3, #20
 800b812:	fa48 f103 	asr.w	r1, r8, r3
 800b816:	fa01 f303 	lsl.w	r3, r1, r3
 800b81a:	4543      	cmp	r3, r8
 800b81c:	f040 8469 	bne.w	800c0f2 <__ieee754_pow+0x9b2>
 800b820:	f001 0101 	and.w	r1, r1, #1
 800b824:	f1c1 0b02 	rsb	fp, r1, #2
 800b828:	4b4b      	ldr	r3, [pc, #300]	; (800b958 <__ieee754_pow+0x218>)
 800b82a:	4598      	cmp	r8, r3
 800b82c:	d118      	bne.n	800b860 <__ieee754_pow+0x120>
 800b82e:	f1b9 0f00 	cmp.w	r9, #0
 800b832:	f280 845a 	bge.w	800c0ea <__ieee754_pow+0x9aa>
 800b836:	4948      	ldr	r1, [pc, #288]	; (800b958 <__ieee754_pow+0x218>)
 800b838:	4632      	mov	r2, r6
 800b83a:	463b      	mov	r3, r7
 800b83c:	2000      	movs	r0, #0
 800b83e:	f7f5 f80d 	bl	800085c <__aeabi_ddiv>
 800b842:	e7dd      	b.n	800b800 <__ieee754_pow+0xc0>
 800b844:	f04f 0b02 	mov.w	fp, #2
 800b848:	e7c4      	b.n	800b7d4 <__ieee754_pow+0x94>
 800b84a:	f04f 0b00 	mov.w	fp, #0
 800b84e:	e7c1      	b.n	800b7d4 <__ieee754_pow+0x94>
 800b850:	f1b9 0f00 	cmp.w	r9, #0
 800b854:	dad2      	bge.n	800b7fc <__ieee754_pow+0xbc>
 800b856:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b85a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b85e:	e7cf      	b.n	800b800 <__ieee754_pow+0xc0>
 800b860:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b864:	d106      	bne.n	800b874 <__ieee754_pow+0x134>
 800b866:	4632      	mov	r2, r6
 800b868:	463b      	mov	r3, r7
 800b86a:	4610      	mov	r0, r2
 800b86c:	4619      	mov	r1, r3
 800b86e:	f7f4 fecb 	bl	8000608 <__aeabi_dmul>
 800b872:	e7c5      	b.n	800b800 <__ieee754_pow+0xc0>
 800b874:	4b39      	ldr	r3, [pc, #228]	; (800b95c <__ieee754_pow+0x21c>)
 800b876:	4599      	cmp	r9, r3
 800b878:	d10a      	bne.n	800b890 <__ieee754_pow+0x150>
 800b87a:	2d00      	cmp	r5, #0
 800b87c:	db08      	blt.n	800b890 <__ieee754_pow+0x150>
 800b87e:	ec47 6b10 	vmov	d0, r6, r7
 800b882:	b011      	add	sp, #68	; 0x44
 800b884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	f000 bc68 	b.w	800c15c <__ieee754_sqrt>
 800b88c:	f04f 0b00 	mov.w	fp, #0
 800b890:	ec47 6b10 	vmov	d0, r6, r7
 800b894:	f000 fd12 	bl	800c2bc <fabs>
 800b898:	ec51 0b10 	vmov	r0, r1, d0
 800b89c:	f1ba 0f00 	cmp.w	sl, #0
 800b8a0:	d127      	bne.n	800b8f2 <__ieee754_pow+0x1b2>
 800b8a2:	b124      	cbz	r4, 800b8ae <__ieee754_pow+0x16e>
 800b8a4:	4b2c      	ldr	r3, [pc, #176]	; (800b958 <__ieee754_pow+0x218>)
 800b8a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d121      	bne.n	800b8f2 <__ieee754_pow+0x1b2>
 800b8ae:	f1b9 0f00 	cmp.w	r9, #0
 800b8b2:	da05      	bge.n	800b8c0 <__ieee754_pow+0x180>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	4927      	ldr	r1, [pc, #156]	; (800b958 <__ieee754_pow+0x218>)
 800b8bc:	f7f4 ffce 	bl	800085c <__aeabi_ddiv>
 800b8c0:	2d00      	cmp	r5, #0
 800b8c2:	da9d      	bge.n	800b800 <__ieee754_pow+0xc0>
 800b8c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b8c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b8cc:	ea54 030b 	orrs.w	r3, r4, fp
 800b8d0:	d108      	bne.n	800b8e4 <__ieee754_pow+0x1a4>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	4619      	mov	r1, r3
 800b8da:	f7f4 fcdd 	bl	8000298 <__aeabi_dsub>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	e7ac      	b.n	800b83e <__ieee754_pow+0xfe>
 800b8e4:	f1bb 0f01 	cmp.w	fp, #1
 800b8e8:	d18a      	bne.n	800b800 <__ieee754_pow+0xc0>
 800b8ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	e786      	b.n	800b800 <__ieee754_pow+0xc0>
 800b8f2:	0fed      	lsrs	r5, r5, #31
 800b8f4:	1e6b      	subs	r3, r5, #1
 800b8f6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8f8:	ea5b 0303 	orrs.w	r3, fp, r3
 800b8fc:	d102      	bne.n	800b904 <__ieee754_pow+0x1c4>
 800b8fe:	4632      	mov	r2, r6
 800b900:	463b      	mov	r3, r7
 800b902:	e7e8      	b.n	800b8d6 <__ieee754_pow+0x196>
 800b904:	4b16      	ldr	r3, [pc, #88]	; (800b960 <__ieee754_pow+0x220>)
 800b906:	4598      	cmp	r8, r3
 800b908:	f340 80fe 	ble.w	800bb08 <__ieee754_pow+0x3c8>
 800b90c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b910:	4598      	cmp	r8, r3
 800b912:	dd0a      	ble.n	800b92a <__ieee754_pow+0x1ea>
 800b914:	4b0f      	ldr	r3, [pc, #60]	; (800b954 <__ieee754_pow+0x214>)
 800b916:	429c      	cmp	r4, r3
 800b918:	dc0d      	bgt.n	800b936 <__ieee754_pow+0x1f6>
 800b91a:	f1b9 0f00 	cmp.w	r9, #0
 800b91e:	f6bf af6d 	bge.w	800b7fc <__ieee754_pow+0xbc>
 800b922:	a307      	add	r3, pc, #28	; (adr r3, 800b940 <__ieee754_pow+0x200>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	e79f      	b.n	800b86a <__ieee754_pow+0x12a>
 800b92a:	4b0e      	ldr	r3, [pc, #56]	; (800b964 <__ieee754_pow+0x224>)
 800b92c:	429c      	cmp	r4, r3
 800b92e:	ddf4      	ble.n	800b91a <__ieee754_pow+0x1da>
 800b930:	4b09      	ldr	r3, [pc, #36]	; (800b958 <__ieee754_pow+0x218>)
 800b932:	429c      	cmp	r4, r3
 800b934:	dd18      	ble.n	800b968 <__ieee754_pow+0x228>
 800b936:	f1b9 0f00 	cmp.w	r9, #0
 800b93a:	dcf2      	bgt.n	800b922 <__ieee754_pow+0x1e2>
 800b93c:	e75e      	b.n	800b7fc <__ieee754_pow+0xbc>
 800b93e:	bf00      	nop
 800b940:	8800759c 	.word	0x8800759c
 800b944:	7e37e43c 	.word	0x7e37e43c
 800b948:	7ff00000 	.word	0x7ff00000
 800b94c:	08010c03 	.word	0x08010c03
 800b950:	433fffff 	.word	0x433fffff
 800b954:	3fefffff 	.word	0x3fefffff
 800b958:	3ff00000 	.word	0x3ff00000
 800b95c:	3fe00000 	.word	0x3fe00000
 800b960:	41e00000 	.word	0x41e00000
 800b964:	3feffffe 	.word	0x3feffffe
 800b968:	2200      	movs	r2, #0
 800b96a:	4b63      	ldr	r3, [pc, #396]	; (800baf8 <__ieee754_pow+0x3b8>)
 800b96c:	f7f4 fc94 	bl	8000298 <__aeabi_dsub>
 800b970:	a355      	add	r3, pc, #340	; (adr r3, 800bac8 <__ieee754_pow+0x388>)
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	4604      	mov	r4, r0
 800b978:	460d      	mov	r5, r1
 800b97a:	f7f4 fe45 	bl	8000608 <__aeabi_dmul>
 800b97e:	a354      	add	r3, pc, #336	; (adr r3, 800bad0 <__ieee754_pow+0x390>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	4606      	mov	r6, r0
 800b986:	460f      	mov	r7, r1
 800b988:	4620      	mov	r0, r4
 800b98a:	4629      	mov	r1, r5
 800b98c:	f7f4 fe3c 	bl	8000608 <__aeabi_dmul>
 800b990:	2200      	movs	r2, #0
 800b992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b996:	4b59      	ldr	r3, [pc, #356]	; (800bafc <__ieee754_pow+0x3bc>)
 800b998:	4620      	mov	r0, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	f7f4 fe34 	bl	8000608 <__aeabi_dmul>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	a14c      	add	r1, pc, #304	; (adr r1, 800bad8 <__ieee754_pow+0x398>)
 800b9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9aa:	f7f4 fc75 	bl	8000298 <__aeabi_dsub>
 800b9ae:	4622      	mov	r2, r4
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	f7f4 fe29 	bl	8000608 <__aeabi_dmul>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	4950      	ldr	r1, [pc, #320]	; (800bb00 <__ieee754_pow+0x3c0>)
 800b9be:	f7f4 fc6b 	bl	8000298 <__aeabi_dsub>
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	4680      	mov	r8, r0
 800b9c8:	4689      	mov	r9, r1
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	f7f4 fe1b 	bl	8000608 <__aeabi_dmul>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	4649      	mov	r1, r9
 800b9da:	f7f4 fe15 	bl	8000608 <__aeabi_dmul>
 800b9de:	a340      	add	r3, pc, #256	; (adr r3, 800bae0 <__ieee754_pow+0x3a0>)
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f7f4 fe10 	bl	8000608 <__aeabi_dmul>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f0:	f7f4 fc52 	bl	8000298 <__aeabi_dsub>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	460d      	mov	r5, r1
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f4 fc4c 	bl	800029c <__adddf3>
 800ba04:	2000      	movs	r0, #0
 800ba06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba0a:	4632      	mov	r2, r6
 800ba0c:	463b      	mov	r3, r7
 800ba0e:	f7f4 fc43 	bl	8000298 <__aeabi_dsub>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	4620      	mov	r0, r4
 800ba18:	4629      	mov	r1, r5
 800ba1a:	f7f4 fc3d 	bl	8000298 <__aeabi_dsub>
 800ba1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba20:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ba24:	4313      	orrs	r3, r2
 800ba26:	4606      	mov	r6, r0
 800ba28:	460f      	mov	r7, r1
 800ba2a:	f040 81eb 	bne.w	800be04 <__ieee754_pow+0x6c4>
 800ba2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bae8 <__ieee754_pow+0x3a8>
 800ba32:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ba36:	2400      	movs	r4, #0
 800ba38:	4622      	mov	r2, r4
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba44:	f7f4 fc28 	bl	8000298 <__aeabi_dsub>
 800ba48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba4c:	f7f4 fddc 	bl	8000608 <__aeabi_dmul>
 800ba50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba54:	4680      	mov	r8, r0
 800ba56:	4689      	mov	r9, r1
 800ba58:	4630      	mov	r0, r6
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	f7f4 fdd4 	bl	8000608 <__aeabi_dmul>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	4640      	mov	r0, r8
 800ba66:	4649      	mov	r1, r9
 800ba68:	f7f4 fc18 	bl	800029c <__adddf3>
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	462b      	mov	r3, r5
 800ba70:	4680      	mov	r8, r0
 800ba72:	4689      	mov	r9, r1
 800ba74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba78:	f7f4 fdc6 	bl	8000608 <__aeabi_dmul>
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4604      	mov	r4, r0
 800ba80:	460d      	mov	r5, r1
 800ba82:	4602      	mov	r2, r0
 800ba84:	4649      	mov	r1, r9
 800ba86:	4640      	mov	r0, r8
 800ba88:	e9cd 4500 	strd	r4, r5, [sp]
 800ba8c:	f7f4 fc06 	bl	800029c <__adddf3>
 800ba90:	4b1c      	ldr	r3, [pc, #112]	; (800bb04 <__ieee754_pow+0x3c4>)
 800ba92:	4299      	cmp	r1, r3
 800ba94:	4606      	mov	r6, r0
 800ba96:	460f      	mov	r7, r1
 800ba98:	468b      	mov	fp, r1
 800ba9a:	f340 82f7 	ble.w	800c08c <__ieee754_pow+0x94c>
 800ba9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800baa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800baa6:	4303      	orrs	r3, r0
 800baa8:	f000 81ea 	beq.w	800be80 <__ieee754_pow+0x740>
 800baac:	a310      	add	r3, pc, #64	; (adr r3, 800baf0 <__ieee754_pow+0x3b0>)
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bab6:	f7f4 fda7 	bl	8000608 <__aeabi_dmul>
 800baba:	a30d      	add	r3, pc, #52	; (adr r3, 800baf0 <__ieee754_pow+0x3b0>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	e6d5      	b.n	800b86e <__ieee754_pow+0x12e>
 800bac2:	bf00      	nop
 800bac4:	f3af 8000 	nop.w
 800bac8:	60000000 	.word	0x60000000
 800bacc:	3ff71547 	.word	0x3ff71547
 800bad0:	f85ddf44 	.word	0xf85ddf44
 800bad4:	3e54ae0b 	.word	0x3e54ae0b
 800bad8:	55555555 	.word	0x55555555
 800badc:	3fd55555 	.word	0x3fd55555
 800bae0:	652b82fe 	.word	0x652b82fe
 800bae4:	3ff71547 	.word	0x3ff71547
 800bae8:	00000000 	.word	0x00000000
 800baec:	bff00000 	.word	0xbff00000
 800baf0:	8800759c 	.word	0x8800759c
 800baf4:	7e37e43c 	.word	0x7e37e43c
 800baf8:	3ff00000 	.word	0x3ff00000
 800bafc:	3fd00000 	.word	0x3fd00000
 800bb00:	3fe00000 	.word	0x3fe00000
 800bb04:	408fffff 	.word	0x408fffff
 800bb08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bb0c:	f04f 0200 	mov.w	r2, #0
 800bb10:	da05      	bge.n	800bb1e <__ieee754_pow+0x3de>
 800bb12:	4bd3      	ldr	r3, [pc, #844]	; (800be60 <__ieee754_pow+0x720>)
 800bb14:	f7f4 fd78 	bl	8000608 <__aeabi_dmul>
 800bb18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	1523      	asrs	r3, r4, #20
 800bb20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb24:	4413      	add	r3, r2
 800bb26:	9309      	str	r3, [sp, #36]	; 0x24
 800bb28:	4bce      	ldr	r3, [pc, #824]	; (800be64 <__ieee754_pow+0x724>)
 800bb2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bb2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bb32:	429c      	cmp	r4, r3
 800bb34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb38:	dd08      	ble.n	800bb4c <__ieee754_pow+0x40c>
 800bb3a:	4bcb      	ldr	r3, [pc, #812]	; (800be68 <__ieee754_pow+0x728>)
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	f340 815e 	ble.w	800bdfe <__ieee754_pow+0x6be>
 800bb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb44:	3301      	adds	r3, #1
 800bb46:	9309      	str	r3, [sp, #36]	; 0x24
 800bb48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bb4c:	f04f 0a00 	mov.w	sl, #0
 800bb50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bb54:	930c      	str	r3, [sp, #48]	; 0x30
 800bb56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb58:	4bc4      	ldr	r3, [pc, #784]	; (800be6c <__ieee754_pow+0x72c>)
 800bb5a:	4413      	add	r3, r2
 800bb5c:	ed93 7b00 	vldr	d7, [r3]
 800bb60:	4629      	mov	r1, r5
 800bb62:	ec53 2b17 	vmov	r2, r3, d7
 800bb66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bb6e:	f7f4 fb93 	bl	8000298 <__aeabi_dsub>
 800bb72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb76:	4606      	mov	r6, r0
 800bb78:	460f      	mov	r7, r1
 800bb7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb7e:	f7f4 fb8d 	bl	800029c <__adddf3>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	2000      	movs	r0, #0
 800bb88:	49b9      	ldr	r1, [pc, #740]	; (800be70 <__ieee754_pow+0x730>)
 800bb8a:	f7f4 fe67 	bl	800085c <__aeabi_ddiv>
 800bb8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4630      	mov	r0, r6
 800bb98:	4639      	mov	r1, r7
 800bb9a:	f7f4 fd35 	bl	8000608 <__aeabi_dmul>
 800bb9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bba2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	9302      	str	r3, [sp, #8]
 800bbae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbb2:	106d      	asrs	r5, r5, #1
 800bbb4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bbb8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	4614      	mov	r4, r2
 800bbc8:	461d      	mov	r5, r3
 800bbca:	f7f4 fd1d 	bl	8000608 <__aeabi_dmul>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 fb5f 	bl	8000298 <__aeabi_dsub>
 800bbda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbde:	4606      	mov	r6, r0
 800bbe0:	460f      	mov	r7, r1
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f7f4 fb57 	bl	8000298 <__aeabi_dsub>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bbf2:	f7f4 fb51 	bl	8000298 <__aeabi_dsub>
 800bbf6:	4642      	mov	r2, r8
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	f7f4 fd05 	bl	8000608 <__aeabi_dmul>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4630      	mov	r0, r6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f7f4 fb47 	bl	8000298 <__aeabi_dsub>
 800bc0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bc0e:	f7f4 fcfb 	bl	8000608 <__aeabi_dmul>
 800bc12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f7f4 fcf3 	bl	8000608 <__aeabi_dmul>
 800bc22:	a37b      	add	r3, pc, #492	; (adr r3, 800be10 <__ieee754_pow+0x6d0>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	4604      	mov	r4, r0
 800bc2a:	460d      	mov	r5, r1
 800bc2c:	f7f4 fcec 	bl	8000608 <__aeabi_dmul>
 800bc30:	a379      	add	r3, pc, #484	; (adr r3, 800be18 <__ieee754_pow+0x6d8>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f7f4 fb31 	bl	800029c <__adddf3>
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	f7f4 fce3 	bl	8000608 <__aeabi_dmul>
 800bc42:	a377      	add	r3, pc, #476	; (adr r3, 800be20 <__ieee754_pow+0x6e0>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f7f4 fb28 	bl	800029c <__adddf3>
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	462b      	mov	r3, r5
 800bc50:	f7f4 fcda 	bl	8000608 <__aeabi_dmul>
 800bc54:	a374      	add	r3, pc, #464	; (adr r3, 800be28 <__ieee754_pow+0x6e8>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f7f4 fb1f 	bl	800029c <__adddf3>
 800bc5e:	4622      	mov	r2, r4
 800bc60:	462b      	mov	r3, r5
 800bc62:	f7f4 fcd1 	bl	8000608 <__aeabi_dmul>
 800bc66:	a372      	add	r3, pc, #456	; (adr r3, 800be30 <__ieee754_pow+0x6f0>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	f7f4 fb16 	bl	800029c <__adddf3>
 800bc70:	4622      	mov	r2, r4
 800bc72:	462b      	mov	r3, r5
 800bc74:	f7f4 fcc8 	bl	8000608 <__aeabi_dmul>
 800bc78:	a36f      	add	r3, pc, #444	; (adr r3, 800be38 <__ieee754_pow+0x6f8>)
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	f7f4 fb0d 	bl	800029c <__adddf3>
 800bc82:	4622      	mov	r2, r4
 800bc84:	4606      	mov	r6, r0
 800bc86:	460f      	mov	r7, r1
 800bc88:	462b      	mov	r3, r5
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	f7f4 fcbb 	bl	8000608 <__aeabi_dmul>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4630      	mov	r0, r6
 800bc98:	4639      	mov	r1, r7
 800bc9a:	f7f4 fcb5 	bl	8000608 <__aeabi_dmul>
 800bc9e:	4642      	mov	r2, r8
 800bca0:	4604      	mov	r4, r0
 800bca2:	460d      	mov	r5, r1
 800bca4:	464b      	mov	r3, r9
 800bca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcaa:	f7f4 faf7 	bl	800029c <__adddf3>
 800bcae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcb2:	f7f4 fca9 	bl	8000608 <__aeabi_dmul>
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	462b      	mov	r3, r5
 800bcba:	f7f4 faef 	bl	800029c <__adddf3>
 800bcbe:	4642      	mov	r2, r8
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	460f      	mov	r7, r1
 800bcc4:	464b      	mov	r3, r9
 800bcc6:	4640      	mov	r0, r8
 800bcc8:	4649      	mov	r1, r9
 800bcca:	f7f4 fc9d 	bl	8000608 <__aeabi_dmul>
 800bcce:	2200      	movs	r2, #0
 800bcd0:	4b68      	ldr	r3, [pc, #416]	; (800be74 <__ieee754_pow+0x734>)
 800bcd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bcd6:	f7f4 fae1 	bl	800029c <__adddf3>
 800bcda:	4632      	mov	r2, r6
 800bcdc:	463b      	mov	r3, r7
 800bcde:	f7f4 fadd 	bl	800029c <__adddf3>
 800bce2:	9802      	ldr	r0, [sp, #8]
 800bce4:	460d      	mov	r5, r1
 800bce6:	4604      	mov	r4, r0
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4640      	mov	r0, r8
 800bcee:	4649      	mov	r1, r9
 800bcf0:	f7f4 fc8a 	bl	8000608 <__aeabi_dmul>
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	4689      	mov	r9, r1
 800bcfa:	4b5e      	ldr	r3, [pc, #376]	; (800be74 <__ieee754_pow+0x734>)
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	4629      	mov	r1, r5
 800bd00:	f7f4 faca 	bl	8000298 <__aeabi_dsub>
 800bd04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd08:	f7f4 fac6 	bl	8000298 <__aeabi_dsub>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4630      	mov	r0, r6
 800bd12:	4639      	mov	r1, r7
 800bd14:	f7f4 fac0 	bl	8000298 <__aeabi_dsub>
 800bd18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd1c:	f7f4 fc74 	bl	8000608 <__aeabi_dmul>
 800bd20:	4622      	mov	r2, r4
 800bd22:	4606      	mov	r6, r0
 800bd24:	460f      	mov	r7, r1
 800bd26:	462b      	mov	r3, r5
 800bd28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd2c:	f7f4 fc6c 	bl	8000608 <__aeabi_dmul>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4630      	mov	r0, r6
 800bd36:	4639      	mov	r1, r7
 800bd38:	f7f4 fab0 	bl	800029c <__adddf3>
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	460f      	mov	r7, r1
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4640      	mov	r0, r8
 800bd46:	4649      	mov	r1, r9
 800bd48:	f7f4 faa8 	bl	800029c <__adddf3>
 800bd4c:	9802      	ldr	r0, [sp, #8]
 800bd4e:	a33c      	add	r3, pc, #240	; (adr r3, 800be40 <__ieee754_pow+0x700>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	4604      	mov	r4, r0
 800bd56:	460d      	mov	r5, r1
 800bd58:	f7f4 fc56 	bl	8000608 <__aeabi_dmul>
 800bd5c:	4642      	mov	r2, r8
 800bd5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd62:	464b      	mov	r3, r9
 800bd64:	4620      	mov	r0, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	f7f4 fa96 	bl	8000298 <__aeabi_dsub>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4630      	mov	r0, r6
 800bd72:	4639      	mov	r1, r7
 800bd74:	f7f4 fa90 	bl	8000298 <__aeabi_dsub>
 800bd78:	a333      	add	r3, pc, #204	; (adr r3, 800be48 <__ieee754_pow+0x708>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	f7f4 fc43 	bl	8000608 <__aeabi_dmul>
 800bd82:	a333      	add	r3, pc, #204	; (adr r3, 800be50 <__ieee754_pow+0x710>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	4606      	mov	r6, r0
 800bd8a:	460f      	mov	r7, r1
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	4629      	mov	r1, r5
 800bd90:	f7f4 fc3a 	bl	8000608 <__aeabi_dmul>
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	4630      	mov	r0, r6
 800bd9a:	4639      	mov	r1, r7
 800bd9c:	f7f4 fa7e 	bl	800029c <__adddf3>
 800bda0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bda2:	4b35      	ldr	r3, [pc, #212]	; (800be78 <__ieee754_pow+0x738>)
 800bda4:	4413      	add	r3, r2
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	f7f4 fa77 	bl	800029c <__adddf3>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb2:	460d      	mov	r5, r1
 800bdb4:	f7f4 fbbe 	bl	8000534 <__aeabi_i2d>
 800bdb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdba:	4b30      	ldr	r3, [pc, #192]	; (800be7c <__ieee754_pow+0x73c>)
 800bdbc:	4413      	add	r3, r2
 800bdbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	462b      	mov	r3, r5
 800bdca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdce:	f7f4 fa65 	bl	800029c <__adddf3>
 800bdd2:	4642      	mov	r2, r8
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	f7f4 fa61 	bl	800029c <__adddf3>
 800bdda:	4632      	mov	r2, r6
 800bddc:	463b      	mov	r3, r7
 800bdde:	f7f4 fa5d 	bl	800029c <__adddf3>
 800bde2:	9802      	ldr	r0, [sp, #8]
 800bde4:	4632      	mov	r2, r6
 800bde6:	463b      	mov	r3, r7
 800bde8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdec:	f7f4 fa54 	bl	8000298 <__aeabi_dsub>
 800bdf0:	4642      	mov	r2, r8
 800bdf2:	464b      	mov	r3, r9
 800bdf4:	f7f4 fa50 	bl	8000298 <__aeabi_dsub>
 800bdf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdfc:	e607      	b.n	800ba0e <__ieee754_pow+0x2ce>
 800bdfe:	f04f 0a01 	mov.w	sl, #1
 800be02:	e6a5      	b.n	800bb50 <__ieee754_pow+0x410>
 800be04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800be58 <__ieee754_pow+0x718>
 800be08:	e613      	b.n	800ba32 <__ieee754_pow+0x2f2>
 800be0a:	bf00      	nop
 800be0c:	f3af 8000 	nop.w
 800be10:	4a454eef 	.word	0x4a454eef
 800be14:	3fca7e28 	.word	0x3fca7e28
 800be18:	93c9db65 	.word	0x93c9db65
 800be1c:	3fcd864a 	.word	0x3fcd864a
 800be20:	a91d4101 	.word	0xa91d4101
 800be24:	3fd17460 	.word	0x3fd17460
 800be28:	518f264d 	.word	0x518f264d
 800be2c:	3fd55555 	.word	0x3fd55555
 800be30:	db6fabff 	.word	0xdb6fabff
 800be34:	3fdb6db6 	.word	0x3fdb6db6
 800be38:	33333303 	.word	0x33333303
 800be3c:	3fe33333 	.word	0x3fe33333
 800be40:	e0000000 	.word	0xe0000000
 800be44:	3feec709 	.word	0x3feec709
 800be48:	dc3a03fd 	.word	0xdc3a03fd
 800be4c:	3feec709 	.word	0x3feec709
 800be50:	145b01f5 	.word	0x145b01f5
 800be54:	be3e2fe0 	.word	0xbe3e2fe0
 800be58:	00000000 	.word	0x00000000
 800be5c:	3ff00000 	.word	0x3ff00000
 800be60:	43400000 	.word	0x43400000
 800be64:	0003988e 	.word	0x0003988e
 800be68:	000bb679 	.word	0x000bb679
 800be6c:	08010b88 	.word	0x08010b88
 800be70:	3ff00000 	.word	0x3ff00000
 800be74:	40080000 	.word	0x40080000
 800be78:	08010ba8 	.word	0x08010ba8
 800be7c:	08010b98 	.word	0x08010b98
 800be80:	a3b4      	add	r3, pc, #720	; (adr r3, 800c154 <__ieee754_pow+0xa14>)
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	4640      	mov	r0, r8
 800be88:	4649      	mov	r1, r9
 800be8a:	f7f4 fa07 	bl	800029c <__adddf3>
 800be8e:	4622      	mov	r2, r4
 800be90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be94:	462b      	mov	r3, r5
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 f9fd 	bl	8000298 <__aeabi_dsub>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bea6:	f7f4 fe3f 	bl	8000b28 <__aeabi_dcmpgt>
 800beaa:	2800      	cmp	r0, #0
 800beac:	f47f adfe 	bne.w	800baac <__ieee754_pow+0x36c>
 800beb0:	4aa3      	ldr	r2, [pc, #652]	; (800c140 <__ieee754_pow+0xa00>)
 800beb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800beb6:	4293      	cmp	r3, r2
 800beb8:	f340 810a 	ble.w	800c0d0 <__ieee754_pow+0x990>
 800bebc:	151b      	asrs	r3, r3, #20
 800bebe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bec2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bec6:	fa4a f303 	asr.w	r3, sl, r3
 800beca:	445b      	add	r3, fp
 800becc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bed0:	4e9c      	ldr	r6, [pc, #624]	; (800c144 <__ieee754_pow+0xa04>)
 800bed2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bed6:	4116      	asrs	r6, r2
 800bed8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bedc:	2000      	movs	r0, #0
 800bede:	ea23 0106 	bic.w	r1, r3, r6
 800bee2:	f1c2 0214 	rsb	r2, r2, #20
 800bee6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800beea:	fa4a fa02 	asr.w	sl, sl, r2
 800beee:	f1bb 0f00 	cmp.w	fp, #0
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4620      	mov	r0, r4
 800bef8:	4629      	mov	r1, r5
 800befa:	bfb8      	it	lt
 800befc:	f1ca 0a00 	rsblt	sl, sl, #0
 800bf00:	f7f4 f9ca 	bl	8000298 <__aeabi_dsub>
 800bf04:	e9cd 0100 	strd	r0, r1, [sp]
 800bf08:	4642      	mov	r2, r8
 800bf0a:	464b      	mov	r3, r9
 800bf0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf10:	f7f4 f9c4 	bl	800029c <__adddf3>
 800bf14:	2000      	movs	r0, #0
 800bf16:	a378      	add	r3, pc, #480	; (adr r3, 800c0f8 <__ieee754_pow+0x9b8>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	460d      	mov	r5, r1
 800bf20:	f7f4 fb72 	bl	8000608 <__aeabi_dmul>
 800bf24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf28:	4606      	mov	r6, r0
 800bf2a:	460f      	mov	r7, r1
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	4629      	mov	r1, r5
 800bf30:	f7f4 f9b2 	bl	8000298 <__aeabi_dsub>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4640      	mov	r0, r8
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	f7f4 f9ac 	bl	8000298 <__aeabi_dsub>
 800bf40:	a36f      	add	r3, pc, #444	; (adr r3, 800c100 <__ieee754_pow+0x9c0>)
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	f7f4 fb5f 	bl	8000608 <__aeabi_dmul>
 800bf4a:	a36f      	add	r3, pc, #444	; (adr r3, 800c108 <__ieee754_pow+0x9c8>)
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	4680      	mov	r8, r0
 800bf52:	4689      	mov	r9, r1
 800bf54:	4620      	mov	r0, r4
 800bf56:	4629      	mov	r1, r5
 800bf58:	f7f4 fb56 	bl	8000608 <__aeabi_dmul>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4640      	mov	r0, r8
 800bf62:	4649      	mov	r1, r9
 800bf64:	f7f4 f99a 	bl	800029c <__adddf3>
 800bf68:	4604      	mov	r4, r0
 800bf6a:	460d      	mov	r5, r1
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 f992 	bl	800029c <__adddf3>
 800bf78:	4632      	mov	r2, r6
 800bf7a:	463b      	mov	r3, r7
 800bf7c:	4680      	mov	r8, r0
 800bf7e:	4689      	mov	r9, r1
 800bf80:	f7f4 f98a 	bl	8000298 <__aeabi_dsub>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4620      	mov	r0, r4
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	f7f4 f984 	bl	8000298 <__aeabi_dsub>
 800bf90:	4642      	mov	r2, r8
 800bf92:	4606      	mov	r6, r0
 800bf94:	460f      	mov	r7, r1
 800bf96:	464b      	mov	r3, r9
 800bf98:	4640      	mov	r0, r8
 800bf9a:	4649      	mov	r1, r9
 800bf9c:	f7f4 fb34 	bl	8000608 <__aeabi_dmul>
 800bfa0:	a35b      	add	r3, pc, #364	; (adr r3, 800c110 <__ieee754_pow+0x9d0>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	460d      	mov	r5, r1
 800bfaa:	f7f4 fb2d 	bl	8000608 <__aeabi_dmul>
 800bfae:	a35a      	add	r3, pc, #360	; (adr r3, 800c118 <__ieee754_pow+0x9d8>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f970 	bl	8000298 <__aeabi_dsub>
 800bfb8:	4622      	mov	r2, r4
 800bfba:	462b      	mov	r3, r5
 800bfbc:	f7f4 fb24 	bl	8000608 <__aeabi_dmul>
 800bfc0:	a357      	add	r3, pc, #348	; (adr r3, 800c120 <__ieee754_pow+0x9e0>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f7f4 f969 	bl	800029c <__adddf3>
 800bfca:	4622      	mov	r2, r4
 800bfcc:	462b      	mov	r3, r5
 800bfce:	f7f4 fb1b 	bl	8000608 <__aeabi_dmul>
 800bfd2:	a355      	add	r3, pc, #340	; (adr r3, 800c128 <__ieee754_pow+0x9e8>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 f95e 	bl	8000298 <__aeabi_dsub>
 800bfdc:	4622      	mov	r2, r4
 800bfde:	462b      	mov	r3, r5
 800bfe0:	f7f4 fb12 	bl	8000608 <__aeabi_dmul>
 800bfe4:	a352      	add	r3, pc, #328	; (adr r3, 800c130 <__ieee754_pow+0x9f0>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	f7f4 f957 	bl	800029c <__adddf3>
 800bfee:	4622      	mov	r2, r4
 800bff0:	462b      	mov	r3, r5
 800bff2:	f7f4 fb09 	bl	8000608 <__aeabi_dmul>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	4640      	mov	r0, r8
 800bffc:	4649      	mov	r1, r9
 800bffe:	f7f4 f94b 	bl	8000298 <__aeabi_dsub>
 800c002:	4604      	mov	r4, r0
 800c004:	460d      	mov	r5, r1
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	4640      	mov	r0, r8
 800c00c:	4649      	mov	r1, r9
 800c00e:	f7f4 fafb 	bl	8000608 <__aeabi_dmul>
 800c012:	2200      	movs	r2, #0
 800c014:	e9cd 0100 	strd	r0, r1, [sp]
 800c018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	f7f4 f93a 	bl	8000298 <__aeabi_dsub>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c02c:	f7f4 fc16 	bl	800085c <__aeabi_ddiv>
 800c030:	4632      	mov	r2, r6
 800c032:	4604      	mov	r4, r0
 800c034:	460d      	mov	r5, r1
 800c036:	463b      	mov	r3, r7
 800c038:	4640      	mov	r0, r8
 800c03a:	4649      	mov	r1, r9
 800c03c:	f7f4 fae4 	bl	8000608 <__aeabi_dmul>
 800c040:	4632      	mov	r2, r6
 800c042:	463b      	mov	r3, r7
 800c044:	f7f4 f92a 	bl	800029c <__adddf3>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	4620      	mov	r0, r4
 800c04e:	4629      	mov	r1, r5
 800c050:	f7f4 f922 	bl	8000298 <__aeabi_dsub>
 800c054:	4642      	mov	r2, r8
 800c056:	464b      	mov	r3, r9
 800c058:	f7f4 f91e 	bl	8000298 <__aeabi_dsub>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	2000      	movs	r0, #0
 800c062:	4939      	ldr	r1, [pc, #228]	; (800c148 <__ieee754_pow+0xa08>)
 800c064:	f7f4 f918 	bl	8000298 <__aeabi_dsub>
 800c068:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c06c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	da2f      	bge.n	800c0d6 <__ieee754_pow+0x996>
 800c076:	4650      	mov	r0, sl
 800c078:	ec43 2b10 	vmov	d0, r2, r3
 800c07c:	f000 f9c0 	bl	800c400 <scalbn>
 800c080:	ec51 0b10 	vmov	r0, r1, d0
 800c084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c088:	f7ff bbf1 	b.w	800b86e <__ieee754_pow+0x12e>
 800c08c:	4b2f      	ldr	r3, [pc, #188]	; (800c14c <__ieee754_pow+0xa0c>)
 800c08e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c092:	429e      	cmp	r6, r3
 800c094:	f77f af0c 	ble.w	800beb0 <__ieee754_pow+0x770>
 800c098:	4b2d      	ldr	r3, [pc, #180]	; (800c150 <__ieee754_pow+0xa10>)
 800c09a:	440b      	add	r3, r1
 800c09c:	4303      	orrs	r3, r0
 800c09e:	d00b      	beq.n	800c0b8 <__ieee754_pow+0x978>
 800c0a0:	a325      	add	r3, pc, #148	; (adr r3, 800c138 <__ieee754_pow+0x9f8>)
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0aa:	f7f4 faad 	bl	8000608 <__aeabi_dmul>
 800c0ae:	a322      	add	r3, pc, #136	; (adr r3, 800c138 <__ieee754_pow+0x9f8>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	f7ff bbdb 	b.w	800b86e <__ieee754_pow+0x12e>
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	462b      	mov	r3, r5
 800c0bc:	f7f4 f8ec 	bl	8000298 <__aeabi_dsub>
 800c0c0:	4642      	mov	r2, r8
 800c0c2:	464b      	mov	r3, r9
 800c0c4:	f7f4 fd26 	bl	8000b14 <__aeabi_dcmpge>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	f43f aef1 	beq.w	800beb0 <__ieee754_pow+0x770>
 800c0ce:	e7e7      	b.n	800c0a0 <__ieee754_pow+0x960>
 800c0d0:	f04f 0a00 	mov.w	sl, #0
 800c0d4:	e718      	b.n	800bf08 <__ieee754_pow+0x7c8>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	e7d4      	b.n	800c084 <__ieee754_pow+0x944>
 800c0da:	2000      	movs	r0, #0
 800c0dc:	491a      	ldr	r1, [pc, #104]	; (800c148 <__ieee754_pow+0xa08>)
 800c0de:	f7ff bb8f 	b.w	800b800 <__ieee754_pow+0xc0>
 800c0e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0e6:	f7ff bb8b 	b.w	800b800 <__ieee754_pow+0xc0>
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	4639      	mov	r1, r7
 800c0ee:	f7ff bb87 	b.w	800b800 <__ieee754_pow+0xc0>
 800c0f2:	4693      	mov	fp, r2
 800c0f4:	f7ff bb98 	b.w	800b828 <__ieee754_pow+0xe8>
 800c0f8:	00000000 	.word	0x00000000
 800c0fc:	3fe62e43 	.word	0x3fe62e43
 800c100:	fefa39ef 	.word	0xfefa39ef
 800c104:	3fe62e42 	.word	0x3fe62e42
 800c108:	0ca86c39 	.word	0x0ca86c39
 800c10c:	be205c61 	.word	0xbe205c61
 800c110:	72bea4d0 	.word	0x72bea4d0
 800c114:	3e663769 	.word	0x3e663769
 800c118:	c5d26bf1 	.word	0xc5d26bf1
 800c11c:	3ebbbd41 	.word	0x3ebbbd41
 800c120:	af25de2c 	.word	0xaf25de2c
 800c124:	3f11566a 	.word	0x3f11566a
 800c128:	16bebd93 	.word	0x16bebd93
 800c12c:	3f66c16c 	.word	0x3f66c16c
 800c130:	5555553e 	.word	0x5555553e
 800c134:	3fc55555 	.word	0x3fc55555
 800c138:	c2f8f359 	.word	0xc2f8f359
 800c13c:	01a56e1f 	.word	0x01a56e1f
 800c140:	3fe00000 	.word	0x3fe00000
 800c144:	000fffff 	.word	0x000fffff
 800c148:	3ff00000 	.word	0x3ff00000
 800c14c:	4090cbff 	.word	0x4090cbff
 800c150:	3f6f3400 	.word	0x3f6f3400
 800c154:	652b82fe 	.word	0x652b82fe
 800c158:	3c971547 	.word	0x3c971547

0800c15c <__ieee754_sqrt>:
 800c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c160:	4955      	ldr	r1, [pc, #340]	; (800c2b8 <__ieee754_sqrt+0x15c>)
 800c162:	ec55 4b10 	vmov	r4, r5, d0
 800c166:	43a9      	bics	r1, r5
 800c168:	462b      	mov	r3, r5
 800c16a:	462a      	mov	r2, r5
 800c16c:	d112      	bne.n	800c194 <__ieee754_sqrt+0x38>
 800c16e:	ee10 2a10 	vmov	r2, s0
 800c172:	ee10 0a10 	vmov	r0, s0
 800c176:	4629      	mov	r1, r5
 800c178:	f7f4 fa46 	bl	8000608 <__aeabi_dmul>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4620      	mov	r0, r4
 800c182:	4629      	mov	r1, r5
 800c184:	f7f4 f88a 	bl	800029c <__adddf3>
 800c188:	4604      	mov	r4, r0
 800c18a:	460d      	mov	r5, r1
 800c18c:	ec45 4b10 	vmov	d0, r4, r5
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	2d00      	cmp	r5, #0
 800c196:	ee10 0a10 	vmov	r0, s0
 800c19a:	4621      	mov	r1, r4
 800c19c:	dc0f      	bgt.n	800c1be <__ieee754_sqrt+0x62>
 800c19e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c1a2:	4330      	orrs	r0, r6
 800c1a4:	d0f2      	beq.n	800c18c <__ieee754_sqrt+0x30>
 800c1a6:	b155      	cbz	r5, 800c1be <__ieee754_sqrt+0x62>
 800c1a8:	ee10 2a10 	vmov	r2, s0
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f4 f872 	bl	8000298 <__aeabi_dsub>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	f7f4 fb50 	bl	800085c <__aeabi_ddiv>
 800c1bc:	e7e4      	b.n	800c188 <__ieee754_sqrt+0x2c>
 800c1be:	151b      	asrs	r3, r3, #20
 800c1c0:	d073      	beq.n	800c2aa <__ieee754_sqrt+0x14e>
 800c1c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1c6:	07dd      	lsls	r5, r3, #31
 800c1c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c1cc:	bf48      	it	mi
 800c1ce:	0fc8      	lsrmi	r0, r1, #31
 800c1d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c1d4:	bf44      	itt	mi
 800c1d6:	0049      	lslmi	r1, r1, #1
 800c1d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c1dc:	2500      	movs	r5, #0
 800c1de:	1058      	asrs	r0, r3, #1
 800c1e0:	0fcb      	lsrs	r3, r1, #31
 800c1e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c1e6:	0049      	lsls	r1, r1, #1
 800c1e8:	2316      	movs	r3, #22
 800c1ea:	462c      	mov	r4, r5
 800c1ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c1f0:	19a7      	adds	r7, r4, r6
 800c1f2:	4297      	cmp	r7, r2
 800c1f4:	bfde      	ittt	le
 800c1f6:	19bc      	addle	r4, r7, r6
 800c1f8:	1bd2      	suble	r2, r2, r7
 800c1fa:	19ad      	addle	r5, r5, r6
 800c1fc:	0fcf      	lsrs	r7, r1, #31
 800c1fe:	3b01      	subs	r3, #1
 800c200:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c204:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c208:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c20c:	d1f0      	bne.n	800c1f0 <__ieee754_sqrt+0x94>
 800c20e:	f04f 0c20 	mov.w	ip, #32
 800c212:	469e      	mov	lr, r3
 800c214:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c218:	42a2      	cmp	r2, r4
 800c21a:	eb06 070e 	add.w	r7, r6, lr
 800c21e:	dc02      	bgt.n	800c226 <__ieee754_sqrt+0xca>
 800c220:	d112      	bne.n	800c248 <__ieee754_sqrt+0xec>
 800c222:	428f      	cmp	r7, r1
 800c224:	d810      	bhi.n	800c248 <__ieee754_sqrt+0xec>
 800c226:	2f00      	cmp	r7, #0
 800c228:	eb07 0e06 	add.w	lr, r7, r6
 800c22c:	da42      	bge.n	800c2b4 <__ieee754_sqrt+0x158>
 800c22e:	f1be 0f00 	cmp.w	lr, #0
 800c232:	db3f      	blt.n	800c2b4 <__ieee754_sqrt+0x158>
 800c234:	f104 0801 	add.w	r8, r4, #1
 800c238:	1b12      	subs	r2, r2, r4
 800c23a:	428f      	cmp	r7, r1
 800c23c:	bf88      	it	hi
 800c23e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c242:	1bc9      	subs	r1, r1, r7
 800c244:	4433      	add	r3, r6
 800c246:	4644      	mov	r4, r8
 800c248:	0052      	lsls	r2, r2, #1
 800c24a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c24e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c252:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c256:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c25a:	d1dd      	bne.n	800c218 <__ieee754_sqrt+0xbc>
 800c25c:	430a      	orrs	r2, r1
 800c25e:	d006      	beq.n	800c26e <__ieee754_sqrt+0x112>
 800c260:	1c5c      	adds	r4, r3, #1
 800c262:	bf13      	iteet	ne
 800c264:	3301      	addne	r3, #1
 800c266:	3501      	addeq	r5, #1
 800c268:	4663      	moveq	r3, ip
 800c26a:	f023 0301 	bicne.w	r3, r3, #1
 800c26e:	106a      	asrs	r2, r5, #1
 800c270:	085b      	lsrs	r3, r3, #1
 800c272:	07e9      	lsls	r1, r5, #31
 800c274:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c278:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c27c:	bf48      	it	mi
 800c27e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c282:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c286:	461c      	mov	r4, r3
 800c288:	e780      	b.n	800c18c <__ieee754_sqrt+0x30>
 800c28a:	0aca      	lsrs	r2, r1, #11
 800c28c:	3815      	subs	r0, #21
 800c28e:	0549      	lsls	r1, r1, #21
 800c290:	2a00      	cmp	r2, #0
 800c292:	d0fa      	beq.n	800c28a <__ieee754_sqrt+0x12e>
 800c294:	02d6      	lsls	r6, r2, #11
 800c296:	d50a      	bpl.n	800c2ae <__ieee754_sqrt+0x152>
 800c298:	f1c3 0420 	rsb	r4, r3, #32
 800c29c:	fa21 f404 	lsr.w	r4, r1, r4
 800c2a0:	1e5d      	subs	r5, r3, #1
 800c2a2:	4099      	lsls	r1, r3
 800c2a4:	4322      	orrs	r2, r4
 800c2a6:	1b43      	subs	r3, r0, r5
 800c2a8:	e78b      	b.n	800c1c2 <__ieee754_sqrt+0x66>
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	e7f0      	b.n	800c290 <__ieee754_sqrt+0x134>
 800c2ae:	0052      	lsls	r2, r2, #1
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	e7ef      	b.n	800c294 <__ieee754_sqrt+0x138>
 800c2b4:	46a0      	mov	r8, r4
 800c2b6:	e7bf      	b.n	800c238 <__ieee754_sqrt+0xdc>
 800c2b8:	7ff00000 	.word	0x7ff00000

0800c2bc <fabs>:
 800c2bc:	ec51 0b10 	vmov	r0, r1, d0
 800c2c0:	ee10 2a10 	vmov	r2, s0
 800c2c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2c8:	ec43 2b10 	vmov	d0, r2, r3
 800c2cc:	4770      	bx	lr

0800c2ce <finite>:
 800c2ce:	ee10 3a90 	vmov	r3, s1
 800c2d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c2d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c2da:	0fc0      	lsrs	r0, r0, #31
 800c2dc:	4770      	bx	lr

0800c2de <matherr>:
 800c2de:	2000      	movs	r0, #0
 800c2e0:	4770      	bx	lr
 800c2e2:	0000      	movs	r0, r0
 800c2e4:	0000      	movs	r0, r0
	...

0800c2e8 <nan>:
 800c2e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2f0 <nan+0x8>
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	00000000 	.word	0x00000000
 800c2f4:	7ff80000 	.word	0x7ff80000

0800c2f8 <rint>:
 800c2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2fa:	ec51 0b10 	vmov	r0, r1, d0
 800c2fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c302:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c306:	2e13      	cmp	r6, #19
 800c308:	460b      	mov	r3, r1
 800c30a:	ee10 4a10 	vmov	r4, s0
 800c30e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c312:	dc56      	bgt.n	800c3c2 <rint+0xca>
 800c314:	2e00      	cmp	r6, #0
 800c316:	da2b      	bge.n	800c370 <rint+0x78>
 800c318:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c31c:	4302      	orrs	r2, r0
 800c31e:	d023      	beq.n	800c368 <rint+0x70>
 800c320:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c324:	4302      	orrs	r2, r0
 800c326:	4254      	negs	r4, r2
 800c328:	4314      	orrs	r4, r2
 800c32a:	0c4b      	lsrs	r3, r1, #17
 800c32c:	0b24      	lsrs	r4, r4, #12
 800c32e:	045b      	lsls	r3, r3, #17
 800c330:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c334:	ea44 0103 	orr.w	r1, r4, r3
 800c338:	460b      	mov	r3, r1
 800c33a:	492f      	ldr	r1, [pc, #188]	; (800c3f8 <rint+0x100>)
 800c33c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c340:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c344:	4602      	mov	r2, r0
 800c346:	4639      	mov	r1, r7
 800c348:	4630      	mov	r0, r6
 800c34a:	f7f3 ffa7 	bl	800029c <__adddf3>
 800c34e:	e9cd 0100 	strd	r0, r1, [sp]
 800c352:	463b      	mov	r3, r7
 800c354:	4632      	mov	r2, r6
 800c356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c35a:	f7f3 ff9d 	bl	8000298 <__aeabi_dsub>
 800c35e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c362:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c366:	4639      	mov	r1, r7
 800c368:	ec41 0b10 	vmov	d0, r0, r1
 800c36c:	b003      	add	sp, #12
 800c36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c370:	4a22      	ldr	r2, [pc, #136]	; (800c3fc <rint+0x104>)
 800c372:	4132      	asrs	r2, r6
 800c374:	ea01 0702 	and.w	r7, r1, r2
 800c378:	4307      	orrs	r7, r0
 800c37a:	d0f5      	beq.n	800c368 <rint+0x70>
 800c37c:	0852      	lsrs	r2, r2, #1
 800c37e:	4011      	ands	r1, r2
 800c380:	430c      	orrs	r4, r1
 800c382:	d00b      	beq.n	800c39c <rint+0xa4>
 800c384:	ea23 0202 	bic.w	r2, r3, r2
 800c388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c38c:	2e13      	cmp	r6, #19
 800c38e:	fa43 f306 	asr.w	r3, r3, r6
 800c392:	bf0c      	ite	eq
 800c394:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c398:	2400      	movne	r4, #0
 800c39a:	4313      	orrs	r3, r2
 800c39c:	4916      	ldr	r1, [pc, #88]	; (800c3f8 <rint+0x100>)
 800c39e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	f7f3 ff76 	bl	800029c <__adddf3>
 800c3b0:	e9cd 0100 	strd	r0, r1, [sp]
 800c3b4:	4622      	mov	r2, r4
 800c3b6:	462b      	mov	r3, r5
 800c3b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3bc:	f7f3 ff6c 	bl	8000298 <__aeabi_dsub>
 800c3c0:	e7d2      	b.n	800c368 <rint+0x70>
 800c3c2:	2e33      	cmp	r6, #51	; 0x33
 800c3c4:	dd07      	ble.n	800c3d6 <rint+0xde>
 800c3c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c3ca:	d1cd      	bne.n	800c368 <rint+0x70>
 800c3cc:	ee10 2a10 	vmov	r2, s0
 800c3d0:	f7f3 ff64 	bl	800029c <__adddf3>
 800c3d4:	e7c8      	b.n	800c368 <rint+0x70>
 800c3d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c3da:	f04f 32ff 	mov.w	r2, #4294967295
 800c3de:	40f2      	lsrs	r2, r6
 800c3e0:	4210      	tst	r0, r2
 800c3e2:	d0c1      	beq.n	800c368 <rint+0x70>
 800c3e4:	0852      	lsrs	r2, r2, #1
 800c3e6:	4210      	tst	r0, r2
 800c3e8:	bf1f      	itttt	ne
 800c3ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c3ee:	ea20 0202 	bicne.w	r2, r0, r2
 800c3f2:	4134      	asrne	r4, r6
 800c3f4:	4314      	orrne	r4, r2
 800c3f6:	e7d1      	b.n	800c39c <rint+0xa4>
 800c3f8:	08010bb8 	.word	0x08010bb8
 800c3fc:	000fffff 	.word	0x000fffff

0800c400 <scalbn>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	ec55 4b10 	vmov	r4, r5, d0
 800c406:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c40a:	4606      	mov	r6, r0
 800c40c:	462b      	mov	r3, r5
 800c40e:	b9aa      	cbnz	r2, 800c43c <scalbn+0x3c>
 800c410:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c414:	4323      	orrs	r3, r4
 800c416:	d03b      	beq.n	800c490 <scalbn+0x90>
 800c418:	4b31      	ldr	r3, [pc, #196]	; (800c4e0 <scalbn+0xe0>)
 800c41a:	4629      	mov	r1, r5
 800c41c:	2200      	movs	r2, #0
 800c41e:	ee10 0a10 	vmov	r0, s0
 800c422:	f7f4 f8f1 	bl	8000608 <__aeabi_dmul>
 800c426:	4b2f      	ldr	r3, [pc, #188]	; (800c4e4 <scalbn+0xe4>)
 800c428:	429e      	cmp	r6, r3
 800c42a:	4604      	mov	r4, r0
 800c42c:	460d      	mov	r5, r1
 800c42e:	da12      	bge.n	800c456 <scalbn+0x56>
 800c430:	a327      	add	r3, pc, #156	; (adr r3, 800c4d0 <scalbn+0xd0>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f7f4 f8e7 	bl	8000608 <__aeabi_dmul>
 800c43a:	e009      	b.n	800c450 <scalbn+0x50>
 800c43c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c440:	428a      	cmp	r2, r1
 800c442:	d10c      	bne.n	800c45e <scalbn+0x5e>
 800c444:	ee10 2a10 	vmov	r2, s0
 800c448:	4620      	mov	r0, r4
 800c44a:	4629      	mov	r1, r5
 800c44c:	f7f3 ff26 	bl	800029c <__adddf3>
 800c450:	4604      	mov	r4, r0
 800c452:	460d      	mov	r5, r1
 800c454:	e01c      	b.n	800c490 <scalbn+0x90>
 800c456:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c45a:	460b      	mov	r3, r1
 800c45c:	3a36      	subs	r2, #54	; 0x36
 800c45e:	4432      	add	r2, r6
 800c460:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c464:	428a      	cmp	r2, r1
 800c466:	dd0b      	ble.n	800c480 <scalbn+0x80>
 800c468:	ec45 4b11 	vmov	d1, r4, r5
 800c46c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c4d8 <scalbn+0xd8>
 800c470:	f000 f83c 	bl	800c4ec <copysign>
 800c474:	a318      	add	r3, pc, #96	; (adr r3, 800c4d8 <scalbn+0xd8>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	ec51 0b10 	vmov	r0, r1, d0
 800c47e:	e7da      	b.n	800c436 <scalbn+0x36>
 800c480:	2a00      	cmp	r2, #0
 800c482:	dd08      	ble.n	800c496 <scalbn+0x96>
 800c484:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c488:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c48c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c490:	ec45 4b10 	vmov	d0, r4, r5
 800c494:	bd70      	pop	{r4, r5, r6, pc}
 800c496:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c49a:	da0d      	bge.n	800c4b8 <scalbn+0xb8>
 800c49c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c4a0:	429e      	cmp	r6, r3
 800c4a2:	ec45 4b11 	vmov	d1, r4, r5
 800c4a6:	dce1      	bgt.n	800c46c <scalbn+0x6c>
 800c4a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c4d0 <scalbn+0xd0>
 800c4ac:	f000 f81e 	bl	800c4ec <copysign>
 800c4b0:	a307      	add	r3, pc, #28	; (adr r3, 800c4d0 <scalbn+0xd0>)
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	e7e0      	b.n	800c47a <scalbn+0x7a>
 800c4b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c4bc:	3236      	adds	r2, #54	; 0x36
 800c4be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c4c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	4b06      	ldr	r3, [pc, #24]	; (800c4e8 <scalbn+0xe8>)
 800c4ce:	e7b2      	b.n	800c436 <scalbn+0x36>
 800c4d0:	c2f8f359 	.word	0xc2f8f359
 800c4d4:	01a56e1f 	.word	0x01a56e1f
 800c4d8:	8800759c 	.word	0x8800759c
 800c4dc:	7e37e43c 	.word	0x7e37e43c
 800c4e0:	43500000 	.word	0x43500000
 800c4e4:	ffff3cb0 	.word	0xffff3cb0
 800c4e8:	3c900000 	.word	0x3c900000

0800c4ec <copysign>:
 800c4ec:	ec51 0b10 	vmov	r0, r1, d0
 800c4f0:	ee11 0a90 	vmov	r0, s3
 800c4f4:	ee10 2a10 	vmov	r2, s0
 800c4f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c4fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c500:	ea41 0300 	orr.w	r3, r1, r0
 800c504:	ec43 2b10 	vmov	d0, r2, r3
 800c508:	4770      	bx	lr

0800c50a <abort>:
 800c50a:	b508      	push	{r3, lr}
 800c50c:	2006      	movs	r0, #6
 800c50e:	f001 f835 	bl	800d57c <raise>
 800c512:	2001      	movs	r0, #1
 800c514:	f7f6 fd7e 	bl	8003014 <_exit>

0800c518 <__assert_func>:
 800c518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c51a:	461c      	mov	r4, r3
 800c51c:	4b09      	ldr	r3, [pc, #36]	; (800c544 <__assert_func+0x2c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4605      	mov	r5, r0
 800c522:	68d8      	ldr	r0, [r3, #12]
 800c524:	b152      	cbz	r2, 800c53c <__assert_func+0x24>
 800c526:	4b08      	ldr	r3, [pc, #32]	; (800c548 <__assert_func+0x30>)
 800c528:	9100      	str	r1, [sp, #0]
 800c52a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c52e:	4907      	ldr	r1, [pc, #28]	; (800c54c <__assert_func+0x34>)
 800c530:	462b      	mov	r3, r5
 800c532:	4622      	mov	r2, r4
 800c534:	f000 f814 	bl	800c560 <fiprintf>
 800c538:	f7ff ffe7 	bl	800c50a <abort>
 800c53c:	4b04      	ldr	r3, [pc, #16]	; (800c550 <__assert_func+0x38>)
 800c53e:	461a      	mov	r2, r3
 800c540:	e7f2      	b.n	800c528 <__assert_func+0x10>
 800c542:	bf00      	nop
 800c544:	2000001c 	.word	0x2000001c
 800c548:	08010bc8 	.word	0x08010bc8
 800c54c:	08010bd5 	.word	0x08010bd5
 800c550:	08010c03 	.word	0x08010c03

0800c554 <__errno>:
 800c554:	4b01      	ldr	r3, [pc, #4]	; (800c55c <__errno+0x8>)
 800c556:	6818      	ldr	r0, [r3, #0]
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	2000001c 	.word	0x2000001c

0800c560 <fiprintf>:
 800c560:	b40e      	push	{r1, r2, r3}
 800c562:	b503      	push	{r0, r1, lr}
 800c564:	4601      	mov	r1, r0
 800c566:	ab03      	add	r3, sp, #12
 800c568:	4805      	ldr	r0, [pc, #20]	; (800c580 <fiprintf+0x20>)
 800c56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c56e:	6800      	ldr	r0, [r0, #0]
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	f000 f881 	bl	800c678 <_vfiprintf_r>
 800c576:	b002      	add	sp, #8
 800c578:	f85d eb04 	ldr.w	lr, [sp], #4
 800c57c:	b003      	add	sp, #12
 800c57e:	4770      	bx	lr
 800c580:	2000001c 	.word	0x2000001c

0800c584 <__libc_init_array>:
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	4e0d      	ldr	r6, [pc, #52]	; (800c5bc <__libc_init_array+0x38>)
 800c588:	4c0d      	ldr	r4, [pc, #52]	; (800c5c0 <__libc_init_array+0x3c>)
 800c58a:	1ba4      	subs	r4, r4, r6
 800c58c:	10a4      	asrs	r4, r4, #2
 800c58e:	2500      	movs	r5, #0
 800c590:	42a5      	cmp	r5, r4
 800c592:	d109      	bne.n	800c5a8 <__libc_init_array+0x24>
 800c594:	4e0b      	ldr	r6, [pc, #44]	; (800c5c4 <__libc_init_array+0x40>)
 800c596:	4c0c      	ldr	r4, [pc, #48]	; (800c5c8 <__libc_init_array+0x44>)
 800c598:	f004 fa26 	bl	80109e8 <_init>
 800c59c:	1ba4      	subs	r4, r4, r6
 800c59e:	10a4      	asrs	r4, r4, #2
 800c5a0:	2500      	movs	r5, #0
 800c5a2:	42a5      	cmp	r5, r4
 800c5a4:	d105      	bne.n	800c5b2 <__libc_init_array+0x2e>
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c5ac:	4798      	blx	r3
 800c5ae:	3501      	adds	r5, #1
 800c5b0:	e7ee      	b.n	800c590 <__libc_init_array+0xc>
 800c5b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c5b6:	4798      	blx	r3
 800c5b8:	3501      	adds	r5, #1
 800c5ba:	e7f2      	b.n	800c5a2 <__libc_init_array+0x1e>
 800c5bc:	08010f28 	.word	0x08010f28
 800c5c0:	08010f28 	.word	0x08010f28
 800c5c4:	08010f28 	.word	0x08010f28
 800c5c8:	08010f30 	.word	0x08010f30

0800c5cc <memcpy>:
 800c5cc:	b510      	push	{r4, lr}
 800c5ce:	1e43      	subs	r3, r0, #1
 800c5d0:	440a      	add	r2, r1
 800c5d2:	4291      	cmp	r1, r2
 800c5d4:	d100      	bne.n	800c5d8 <memcpy+0xc>
 800c5d6:	bd10      	pop	{r4, pc}
 800c5d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5e0:	e7f7      	b.n	800c5d2 <memcpy+0x6>

0800c5e2 <memmove>:
 800c5e2:	4288      	cmp	r0, r1
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	eb01 0302 	add.w	r3, r1, r2
 800c5ea:	d807      	bhi.n	800c5fc <memmove+0x1a>
 800c5ec:	1e42      	subs	r2, r0, #1
 800c5ee:	4299      	cmp	r1, r3
 800c5f0:	d00a      	beq.n	800c608 <memmove+0x26>
 800c5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c5fa:	e7f8      	b.n	800c5ee <memmove+0xc>
 800c5fc:	4283      	cmp	r3, r0
 800c5fe:	d9f5      	bls.n	800c5ec <memmove+0xa>
 800c600:	1881      	adds	r1, r0, r2
 800c602:	1ad2      	subs	r2, r2, r3
 800c604:	42d3      	cmn	r3, r2
 800c606:	d100      	bne.n	800c60a <memmove+0x28>
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c60e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c612:	e7f7      	b.n	800c604 <memmove+0x22>

0800c614 <memset>:
 800c614:	4402      	add	r2, r0
 800c616:	4603      	mov	r3, r0
 800c618:	4293      	cmp	r3, r2
 800c61a:	d100      	bne.n	800c61e <memset+0xa>
 800c61c:	4770      	bx	lr
 800c61e:	f803 1b01 	strb.w	r1, [r3], #1
 800c622:	e7f9      	b.n	800c618 <memset+0x4>

0800c624 <__sfputc_r>:
 800c624:	6893      	ldr	r3, [r2, #8]
 800c626:	3b01      	subs	r3, #1
 800c628:	2b00      	cmp	r3, #0
 800c62a:	b410      	push	{r4}
 800c62c:	6093      	str	r3, [r2, #8]
 800c62e:	da08      	bge.n	800c642 <__sfputc_r+0x1e>
 800c630:	6994      	ldr	r4, [r2, #24]
 800c632:	42a3      	cmp	r3, r4
 800c634:	db01      	blt.n	800c63a <__sfputc_r+0x16>
 800c636:	290a      	cmp	r1, #10
 800c638:	d103      	bne.n	800c642 <__sfputc_r+0x1e>
 800c63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c63e:	f001 be89 	b.w	800e354 <__swbuf_r>
 800c642:	6813      	ldr	r3, [r2, #0]
 800c644:	1c58      	adds	r0, r3, #1
 800c646:	6010      	str	r0, [r2, #0]
 800c648:	7019      	strb	r1, [r3, #0]
 800c64a:	4608      	mov	r0, r1
 800c64c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <__sfputs_r>:
 800c652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c654:	4606      	mov	r6, r0
 800c656:	460f      	mov	r7, r1
 800c658:	4614      	mov	r4, r2
 800c65a:	18d5      	adds	r5, r2, r3
 800c65c:	42ac      	cmp	r4, r5
 800c65e:	d101      	bne.n	800c664 <__sfputs_r+0x12>
 800c660:	2000      	movs	r0, #0
 800c662:	e007      	b.n	800c674 <__sfputs_r+0x22>
 800c664:	463a      	mov	r2, r7
 800c666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66a:	4630      	mov	r0, r6
 800c66c:	f7ff ffda 	bl	800c624 <__sfputc_r>
 800c670:	1c43      	adds	r3, r0, #1
 800c672:	d1f3      	bne.n	800c65c <__sfputs_r+0xa>
 800c674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c678 <_vfiprintf_r>:
 800c678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67c:	460c      	mov	r4, r1
 800c67e:	b09d      	sub	sp, #116	; 0x74
 800c680:	4617      	mov	r7, r2
 800c682:	461d      	mov	r5, r3
 800c684:	4606      	mov	r6, r0
 800c686:	b118      	cbz	r0, 800c690 <_vfiprintf_r+0x18>
 800c688:	6983      	ldr	r3, [r0, #24]
 800c68a:	b90b      	cbnz	r3, 800c690 <_vfiprintf_r+0x18>
 800c68c:	f002 fe58 	bl	800f340 <__sinit>
 800c690:	4b7c      	ldr	r3, [pc, #496]	; (800c884 <_vfiprintf_r+0x20c>)
 800c692:	429c      	cmp	r4, r3
 800c694:	d158      	bne.n	800c748 <_vfiprintf_r+0xd0>
 800c696:	6874      	ldr	r4, [r6, #4]
 800c698:	89a3      	ldrh	r3, [r4, #12]
 800c69a:	0718      	lsls	r0, r3, #28
 800c69c:	d55e      	bpl.n	800c75c <_vfiprintf_r+0xe4>
 800c69e:	6923      	ldr	r3, [r4, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d05b      	beq.n	800c75c <_vfiprintf_r+0xe4>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a8:	2320      	movs	r3, #32
 800c6aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ae:	2330      	movs	r3, #48	; 0x30
 800c6b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6b4:	9503      	str	r5, [sp, #12]
 800c6b6:	f04f 0b01 	mov.w	fp, #1
 800c6ba:	46b8      	mov	r8, r7
 800c6bc:	4645      	mov	r5, r8
 800c6be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c6c2:	b10b      	cbz	r3, 800c6c8 <_vfiprintf_r+0x50>
 800c6c4:	2b25      	cmp	r3, #37	; 0x25
 800c6c6:	d154      	bne.n	800c772 <_vfiprintf_r+0xfa>
 800c6c8:	ebb8 0a07 	subs.w	sl, r8, r7
 800c6cc:	d00b      	beq.n	800c6e6 <_vfiprintf_r+0x6e>
 800c6ce:	4653      	mov	r3, sl
 800c6d0:	463a      	mov	r2, r7
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f7ff ffbc 	bl	800c652 <__sfputs_r>
 800c6da:	3001      	adds	r0, #1
 800c6dc:	f000 80c2 	beq.w	800c864 <_vfiprintf_r+0x1ec>
 800c6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e2:	4453      	add	r3, sl
 800c6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e6:	f898 3000 	ldrb.w	r3, [r8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 80ba 	beq.w	800c864 <_vfiprintf_r+0x1ec>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6fa:	9304      	str	r3, [sp, #16]
 800c6fc:	9307      	str	r3, [sp, #28]
 800c6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c702:	931a      	str	r3, [sp, #104]	; 0x68
 800c704:	46a8      	mov	r8, r5
 800c706:	2205      	movs	r2, #5
 800c708:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c70c:	485e      	ldr	r0, [pc, #376]	; (800c888 <_vfiprintf_r+0x210>)
 800c70e:	f7f3 fd6f 	bl	80001f0 <memchr>
 800c712:	9b04      	ldr	r3, [sp, #16]
 800c714:	bb78      	cbnz	r0, 800c776 <_vfiprintf_r+0xfe>
 800c716:	06d9      	lsls	r1, r3, #27
 800c718:	bf44      	itt	mi
 800c71a:	2220      	movmi	r2, #32
 800c71c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c720:	071a      	lsls	r2, r3, #28
 800c722:	bf44      	itt	mi
 800c724:	222b      	movmi	r2, #43	; 0x2b
 800c726:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c72a:	782a      	ldrb	r2, [r5, #0]
 800c72c:	2a2a      	cmp	r2, #42	; 0x2a
 800c72e:	d02a      	beq.n	800c786 <_vfiprintf_r+0x10e>
 800c730:	9a07      	ldr	r2, [sp, #28]
 800c732:	46a8      	mov	r8, r5
 800c734:	2000      	movs	r0, #0
 800c736:	250a      	movs	r5, #10
 800c738:	4641      	mov	r1, r8
 800c73a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c73e:	3b30      	subs	r3, #48	; 0x30
 800c740:	2b09      	cmp	r3, #9
 800c742:	d969      	bls.n	800c818 <_vfiprintf_r+0x1a0>
 800c744:	b360      	cbz	r0, 800c7a0 <_vfiprintf_r+0x128>
 800c746:	e024      	b.n	800c792 <_vfiprintf_r+0x11a>
 800c748:	4b50      	ldr	r3, [pc, #320]	; (800c88c <_vfiprintf_r+0x214>)
 800c74a:	429c      	cmp	r4, r3
 800c74c:	d101      	bne.n	800c752 <_vfiprintf_r+0xda>
 800c74e:	68b4      	ldr	r4, [r6, #8]
 800c750:	e7a2      	b.n	800c698 <_vfiprintf_r+0x20>
 800c752:	4b4f      	ldr	r3, [pc, #316]	; (800c890 <_vfiprintf_r+0x218>)
 800c754:	429c      	cmp	r4, r3
 800c756:	bf08      	it	eq
 800c758:	68f4      	ldreq	r4, [r6, #12]
 800c75a:	e79d      	b.n	800c698 <_vfiprintf_r+0x20>
 800c75c:	4621      	mov	r1, r4
 800c75e:	4630      	mov	r0, r6
 800c760:	f001 fe4a 	bl	800e3f8 <__swsetup_r>
 800c764:	2800      	cmp	r0, #0
 800c766:	d09d      	beq.n	800c6a4 <_vfiprintf_r+0x2c>
 800c768:	f04f 30ff 	mov.w	r0, #4294967295
 800c76c:	b01d      	add	sp, #116	; 0x74
 800c76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c772:	46a8      	mov	r8, r5
 800c774:	e7a2      	b.n	800c6bc <_vfiprintf_r+0x44>
 800c776:	4a44      	ldr	r2, [pc, #272]	; (800c888 <_vfiprintf_r+0x210>)
 800c778:	1a80      	subs	r0, r0, r2
 800c77a:	fa0b f000 	lsl.w	r0, fp, r0
 800c77e:	4318      	orrs	r0, r3
 800c780:	9004      	str	r0, [sp, #16]
 800c782:	4645      	mov	r5, r8
 800c784:	e7be      	b.n	800c704 <_vfiprintf_r+0x8c>
 800c786:	9a03      	ldr	r2, [sp, #12]
 800c788:	1d11      	adds	r1, r2, #4
 800c78a:	6812      	ldr	r2, [r2, #0]
 800c78c:	9103      	str	r1, [sp, #12]
 800c78e:	2a00      	cmp	r2, #0
 800c790:	db01      	blt.n	800c796 <_vfiprintf_r+0x11e>
 800c792:	9207      	str	r2, [sp, #28]
 800c794:	e004      	b.n	800c7a0 <_vfiprintf_r+0x128>
 800c796:	4252      	negs	r2, r2
 800c798:	f043 0302 	orr.w	r3, r3, #2
 800c79c:	9207      	str	r2, [sp, #28]
 800c79e:	9304      	str	r3, [sp, #16]
 800c7a0:	f898 3000 	ldrb.w	r3, [r8]
 800c7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7a6:	d10e      	bne.n	800c7c6 <_vfiprintf_r+0x14e>
 800c7a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c7ac:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ae:	d138      	bne.n	800c822 <_vfiprintf_r+0x1aa>
 800c7b0:	9b03      	ldr	r3, [sp, #12]
 800c7b2:	1d1a      	adds	r2, r3, #4
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	9203      	str	r2, [sp, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bfb8      	it	lt
 800c7bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7c0:	f108 0802 	add.w	r8, r8, #2
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	4d33      	ldr	r5, [pc, #204]	; (800c894 <_vfiprintf_r+0x21c>)
 800c7c8:	f898 1000 	ldrb.w	r1, [r8]
 800c7cc:	2203      	movs	r2, #3
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f7f3 fd0e 	bl	80001f0 <memchr>
 800c7d4:	b140      	cbz	r0, 800c7e8 <_vfiprintf_r+0x170>
 800c7d6:	2340      	movs	r3, #64	; 0x40
 800c7d8:	1b40      	subs	r0, r0, r5
 800c7da:	fa03 f000 	lsl.w	r0, r3, r0
 800c7de:	9b04      	ldr	r3, [sp, #16]
 800c7e0:	4303      	orrs	r3, r0
 800c7e2:	f108 0801 	add.w	r8, r8, #1
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	f898 1000 	ldrb.w	r1, [r8]
 800c7ec:	482a      	ldr	r0, [pc, #168]	; (800c898 <_vfiprintf_r+0x220>)
 800c7ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7f2:	2206      	movs	r2, #6
 800c7f4:	f108 0701 	add.w	r7, r8, #1
 800c7f8:	f7f3 fcfa 	bl	80001f0 <memchr>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d037      	beq.n	800c870 <_vfiprintf_r+0x1f8>
 800c800:	4b26      	ldr	r3, [pc, #152]	; (800c89c <_vfiprintf_r+0x224>)
 800c802:	bb1b      	cbnz	r3, 800c84c <_vfiprintf_r+0x1d4>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	3307      	adds	r3, #7
 800c808:	f023 0307 	bic.w	r3, r3, #7
 800c80c:	3308      	adds	r3, #8
 800c80e:	9303      	str	r3, [sp, #12]
 800c810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c812:	444b      	add	r3, r9
 800c814:	9309      	str	r3, [sp, #36]	; 0x24
 800c816:	e750      	b.n	800c6ba <_vfiprintf_r+0x42>
 800c818:	fb05 3202 	mla	r2, r5, r2, r3
 800c81c:	2001      	movs	r0, #1
 800c81e:	4688      	mov	r8, r1
 800c820:	e78a      	b.n	800c738 <_vfiprintf_r+0xc0>
 800c822:	2300      	movs	r3, #0
 800c824:	f108 0801 	add.w	r8, r8, #1
 800c828:	9305      	str	r3, [sp, #20]
 800c82a:	4619      	mov	r1, r3
 800c82c:	250a      	movs	r5, #10
 800c82e:	4640      	mov	r0, r8
 800c830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c834:	3a30      	subs	r2, #48	; 0x30
 800c836:	2a09      	cmp	r2, #9
 800c838:	d903      	bls.n	800c842 <_vfiprintf_r+0x1ca>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0c3      	beq.n	800c7c6 <_vfiprintf_r+0x14e>
 800c83e:	9105      	str	r1, [sp, #20]
 800c840:	e7c1      	b.n	800c7c6 <_vfiprintf_r+0x14e>
 800c842:	fb05 2101 	mla	r1, r5, r1, r2
 800c846:	2301      	movs	r3, #1
 800c848:	4680      	mov	r8, r0
 800c84a:	e7f0      	b.n	800c82e <_vfiprintf_r+0x1b6>
 800c84c:	ab03      	add	r3, sp, #12
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	4622      	mov	r2, r4
 800c852:	4b13      	ldr	r3, [pc, #76]	; (800c8a0 <_vfiprintf_r+0x228>)
 800c854:	a904      	add	r1, sp, #16
 800c856:	4630      	mov	r0, r6
 800c858:	f000 f8b8 	bl	800c9cc <_printf_float>
 800c85c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c860:	4681      	mov	r9, r0
 800c862:	d1d5      	bne.n	800c810 <_vfiprintf_r+0x198>
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	065b      	lsls	r3, r3, #25
 800c868:	f53f af7e 	bmi.w	800c768 <_vfiprintf_r+0xf0>
 800c86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c86e:	e77d      	b.n	800c76c <_vfiprintf_r+0xf4>
 800c870:	ab03      	add	r3, sp, #12
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	4622      	mov	r2, r4
 800c876:	4b0a      	ldr	r3, [pc, #40]	; (800c8a0 <_vfiprintf_r+0x228>)
 800c878:	a904      	add	r1, sp, #16
 800c87a:	4630      	mov	r0, r6
 800c87c:	f000 fb5c 	bl	800cf38 <_printf_i>
 800c880:	e7ec      	b.n	800c85c <_vfiprintf_r+0x1e4>
 800c882:	bf00      	nop
 800c884:	08010cd8 	.word	0x08010cd8
 800c888:	08010c08 	.word	0x08010c08
 800c88c:	08010cf8 	.word	0x08010cf8
 800c890:	08010cb8 	.word	0x08010cb8
 800c894:	08010c0e 	.word	0x08010c0e
 800c898:	08010c12 	.word	0x08010c12
 800c89c:	0800c9cd 	.word	0x0800c9cd
 800c8a0:	0800c653 	.word	0x0800c653

0800c8a4 <__cvt>:
 800c8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a8:	ec55 4b10 	vmov	r4, r5, d0
 800c8ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c8ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c8b2:	2d00      	cmp	r5, #0
 800c8b4:	460e      	mov	r6, r1
 800c8b6:	4691      	mov	r9, r2
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	bfb8      	it	lt
 800c8bc:	4622      	movlt	r2, r4
 800c8be:	462b      	mov	r3, r5
 800c8c0:	f027 0720 	bic.w	r7, r7, #32
 800c8c4:	bfbb      	ittet	lt
 800c8c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c8ca:	461d      	movlt	r5, r3
 800c8cc:	2300      	movge	r3, #0
 800c8ce:	232d      	movlt	r3, #45	; 0x2d
 800c8d0:	bfb8      	it	lt
 800c8d2:	4614      	movlt	r4, r2
 800c8d4:	2f46      	cmp	r7, #70	; 0x46
 800c8d6:	700b      	strb	r3, [r1, #0]
 800c8d8:	d004      	beq.n	800c8e4 <__cvt+0x40>
 800c8da:	2f45      	cmp	r7, #69	; 0x45
 800c8dc:	d100      	bne.n	800c8e0 <__cvt+0x3c>
 800c8de:	3601      	adds	r6, #1
 800c8e0:	2102      	movs	r1, #2
 800c8e2:	e000      	b.n	800c8e6 <__cvt+0x42>
 800c8e4:	2103      	movs	r1, #3
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	9301      	str	r3, [sp, #4]
 800c8ea:	ab02      	add	r3, sp, #8
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	4632      	mov	r2, r6
 800c8f0:	4653      	mov	r3, sl
 800c8f2:	ec45 4b10 	vmov	d0, r4, r5
 800c8f6:	f001 fe7b 	bl	800e5f0 <_dtoa_r>
 800c8fa:	2f47      	cmp	r7, #71	; 0x47
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	d102      	bne.n	800c906 <__cvt+0x62>
 800c900:	f019 0f01 	tst.w	r9, #1
 800c904:	d026      	beq.n	800c954 <__cvt+0xb0>
 800c906:	2f46      	cmp	r7, #70	; 0x46
 800c908:	eb08 0906 	add.w	r9, r8, r6
 800c90c:	d111      	bne.n	800c932 <__cvt+0x8e>
 800c90e:	f898 3000 	ldrb.w	r3, [r8]
 800c912:	2b30      	cmp	r3, #48	; 0x30
 800c914:	d10a      	bne.n	800c92c <__cvt+0x88>
 800c916:	2200      	movs	r2, #0
 800c918:	2300      	movs	r3, #0
 800c91a:	4620      	mov	r0, r4
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7f4 f8db 	bl	8000ad8 <__aeabi_dcmpeq>
 800c922:	b918      	cbnz	r0, 800c92c <__cvt+0x88>
 800c924:	f1c6 0601 	rsb	r6, r6, #1
 800c928:	f8ca 6000 	str.w	r6, [sl]
 800c92c:	f8da 3000 	ldr.w	r3, [sl]
 800c930:	4499      	add	r9, r3
 800c932:	2200      	movs	r2, #0
 800c934:	2300      	movs	r3, #0
 800c936:	4620      	mov	r0, r4
 800c938:	4629      	mov	r1, r5
 800c93a:	f7f4 f8cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800c93e:	b938      	cbnz	r0, 800c950 <__cvt+0xac>
 800c940:	2230      	movs	r2, #48	; 0x30
 800c942:	9b03      	ldr	r3, [sp, #12]
 800c944:	454b      	cmp	r3, r9
 800c946:	d205      	bcs.n	800c954 <__cvt+0xb0>
 800c948:	1c59      	adds	r1, r3, #1
 800c94a:	9103      	str	r1, [sp, #12]
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	e7f8      	b.n	800c942 <__cvt+0x9e>
 800c950:	f8cd 900c 	str.w	r9, [sp, #12]
 800c954:	9b03      	ldr	r3, [sp, #12]
 800c956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c958:	eba3 0308 	sub.w	r3, r3, r8
 800c95c:	4640      	mov	r0, r8
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	b004      	add	sp, #16
 800c962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c966 <__exponent>:
 800c966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c968:	2900      	cmp	r1, #0
 800c96a:	4604      	mov	r4, r0
 800c96c:	bfba      	itte	lt
 800c96e:	4249      	neglt	r1, r1
 800c970:	232d      	movlt	r3, #45	; 0x2d
 800c972:	232b      	movge	r3, #43	; 0x2b
 800c974:	2909      	cmp	r1, #9
 800c976:	f804 2b02 	strb.w	r2, [r4], #2
 800c97a:	7043      	strb	r3, [r0, #1]
 800c97c:	dd20      	ble.n	800c9c0 <__exponent+0x5a>
 800c97e:	f10d 0307 	add.w	r3, sp, #7
 800c982:	461f      	mov	r7, r3
 800c984:	260a      	movs	r6, #10
 800c986:	fb91 f5f6 	sdiv	r5, r1, r6
 800c98a:	fb06 1115 	mls	r1, r6, r5, r1
 800c98e:	3130      	adds	r1, #48	; 0x30
 800c990:	2d09      	cmp	r5, #9
 800c992:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c996:	f103 32ff 	add.w	r2, r3, #4294967295
 800c99a:	4629      	mov	r1, r5
 800c99c:	dc09      	bgt.n	800c9b2 <__exponent+0x4c>
 800c99e:	3130      	adds	r1, #48	; 0x30
 800c9a0:	3b02      	subs	r3, #2
 800c9a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c9a6:	42bb      	cmp	r3, r7
 800c9a8:	4622      	mov	r2, r4
 800c9aa:	d304      	bcc.n	800c9b6 <__exponent+0x50>
 800c9ac:	1a10      	subs	r0, r2, r0
 800c9ae:	b003      	add	sp, #12
 800c9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	e7e7      	b.n	800c986 <__exponent+0x20>
 800c9b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ba:	f804 2b01 	strb.w	r2, [r4], #1
 800c9be:	e7f2      	b.n	800c9a6 <__exponent+0x40>
 800c9c0:	2330      	movs	r3, #48	; 0x30
 800c9c2:	4419      	add	r1, r3
 800c9c4:	7083      	strb	r3, [r0, #2]
 800c9c6:	1d02      	adds	r2, r0, #4
 800c9c8:	70c1      	strb	r1, [r0, #3]
 800c9ca:	e7ef      	b.n	800c9ac <__exponent+0x46>

0800c9cc <_printf_float>:
 800c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	b08d      	sub	sp, #52	; 0x34
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c9d8:	4616      	mov	r6, r2
 800c9da:	461f      	mov	r7, r3
 800c9dc:	4605      	mov	r5, r0
 800c9de:	f003 f865 	bl	800faac <_localeconv_r>
 800c9e2:	6803      	ldr	r3, [r0, #0]
 800c9e4:	9304      	str	r3, [sp, #16]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f3 fbfa 	bl	80001e0 <strlen>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c9f0:	f8d8 3000 	ldr.w	r3, [r8]
 800c9f4:	9005      	str	r0, [sp, #20]
 800c9f6:	3307      	adds	r3, #7
 800c9f8:	f023 0307 	bic.w	r3, r3, #7
 800c9fc:	f103 0208 	add.w	r2, r3, #8
 800ca00:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ca04:	f8d4 b000 	ldr.w	fp, [r4]
 800ca08:	f8c8 2000 	str.w	r2, [r8]
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca14:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca1c:	9307      	str	r3, [sp, #28]
 800ca1e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca22:	f04f 32ff 	mov.w	r2, #4294967295
 800ca26:	4ba7      	ldr	r3, [pc, #668]	; (800ccc4 <_printf_float+0x2f8>)
 800ca28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca2c:	f7f4 f886 	bl	8000b3c <__aeabi_dcmpun>
 800ca30:	bb70      	cbnz	r0, 800ca90 <_printf_float+0xc4>
 800ca32:	f04f 32ff 	mov.w	r2, #4294967295
 800ca36:	4ba3      	ldr	r3, [pc, #652]	; (800ccc4 <_printf_float+0x2f8>)
 800ca38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca3c:	f7f4 f860 	bl	8000b00 <__aeabi_dcmple>
 800ca40:	bb30      	cbnz	r0, 800ca90 <_printf_float+0xc4>
 800ca42:	2200      	movs	r2, #0
 800ca44:	2300      	movs	r3, #0
 800ca46:	4640      	mov	r0, r8
 800ca48:	4649      	mov	r1, r9
 800ca4a:	f7f4 f84f 	bl	8000aec <__aeabi_dcmplt>
 800ca4e:	b110      	cbz	r0, 800ca56 <_printf_float+0x8a>
 800ca50:	232d      	movs	r3, #45	; 0x2d
 800ca52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca56:	4a9c      	ldr	r2, [pc, #624]	; (800ccc8 <_printf_float+0x2fc>)
 800ca58:	4b9c      	ldr	r3, [pc, #624]	; (800cccc <_printf_float+0x300>)
 800ca5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ca5e:	bf8c      	ite	hi
 800ca60:	4690      	movhi	r8, r2
 800ca62:	4698      	movls	r8, r3
 800ca64:	2303      	movs	r3, #3
 800ca66:	f02b 0204 	bic.w	r2, fp, #4
 800ca6a:	6123      	str	r3, [r4, #16]
 800ca6c:	6022      	str	r2, [r4, #0]
 800ca6e:	f04f 0900 	mov.w	r9, #0
 800ca72:	9700      	str	r7, [sp, #0]
 800ca74:	4633      	mov	r3, r6
 800ca76:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f000 f9e6 	bl	800ce4c <_printf_common>
 800ca80:	3001      	adds	r0, #1
 800ca82:	f040 808d 	bne.w	800cba0 <_printf_float+0x1d4>
 800ca86:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8a:	b00d      	add	sp, #52	; 0x34
 800ca8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca90:	4642      	mov	r2, r8
 800ca92:	464b      	mov	r3, r9
 800ca94:	4640      	mov	r0, r8
 800ca96:	4649      	mov	r1, r9
 800ca98:	f7f4 f850 	bl	8000b3c <__aeabi_dcmpun>
 800ca9c:	b110      	cbz	r0, 800caa4 <_printf_float+0xd8>
 800ca9e:	4a8c      	ldr	r2, [pc, #560]	; (800ccd0 <_printf_float+0x304>)
 800caa0:	4b8c      	ldr	r3, [pc, #560]	; (800ccd4 <_printf_float+0x308>)
 800caa2:	e7da      	b.n	800ca5a <_printf_float+0x8e>
 800caa4:	6861      	ldr	r1, [r4, #4]
 800caa6:	1c4b      	adds	r3, r1, #1
 800caa8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800caac:	a80a      	add	r0, sp, #40	; 0x28
 800caae:	d13e      	bne.n	800cb2e <_printf_float+0x162>
 800cab0:	2306      	movs	r3, #6
 800cab2:	6063      	str	r3, [r4, #4]
 800cab4:	2300      	movs	r3, #0
 800cab6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800caba:	ab09      	add	r3, sp, #36	; 0x24
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	ec49 8b10 	vmov	d0, r8, r9
 800cac2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cac6:	6022      	str	r2, [r4, #0]
 800cac8:	f8cd a004 	str.w	sl, [sp, #4]
 800cacc:	6861      	ldr	r1, [r4, #4]
 800cace:	4628      	mov	r0, r5
 800cad0:	f7ff fee8 	bl	800c8a4 <__cvt>
 800cad4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cad8:	2b47      	cmp	r3, #71	; 0x47
 800cada:	4680      	mov	r8, r0
 800cadc:	d109      	bne.n	800caf2 <_printf_float+0x126>
 800cade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cae0:	1cd8      	adds	r0, r3, #3
 800cae2:	db02      	blt.n	800caea <_printf_float+0x11e>
 800cae4:	6862      	ldr	r2, [r4, #4]
 800cae6:	4293      	cmp	r3, r2
 800cae8:	dd47      	ble.n	800cb7a <_printf_float+0x1ae>
 800caea:	f1aa 0a02 	sub.w	sl, sl, #2
 800caee:	fa5f fa8a 	uxtb.w	sl, sl
 800caf2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800caf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800caf8:	d824      	bhi.n	800cb44 <_printf_float+0x178>
 800cafa:	3901      	subs	r1, #1
 800cafc:	4652      	mov	r2, sl
 800cafe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb02:	9109      	str	r1, [sp, #36]	; 0x24
 800cb04:	f7ff ff2f 	bl	800c966 <__exponent>
 800cb08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb0a:	1813      	adds	r3, r2, r0
 800cb0c:	2a01      	cmp	r2, #1
 800cb0e:	4681      	mov	r9, r0
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	dc02      	bgt.n	800cb1a <_printf_float+0x14e>
 800cb14:	6822      	ldr	r2, [r4, #0]
 800cb16:	07d1      	lsls	r1, r2, #31
 800cb18:	d501      	bpl.n	800cb1e <_printf_float+0x152>
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	6123      	str	r3, [r4, #16]
 800cb1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d0a5      	beq.n	800ca72 <_printf_float+0xa6>
 800cb26:	232d      	movs	r3, #45	; 0x2d
 800cb28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb2c:	e7a1      	b.n	800ca72 <_printf_float+0xa6>
 800cb2e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800cb32:	f000 8177 	beq.w	800ce24 <_printf_float+0x458>
 800cb36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cb3a:	d1bb      	bne.n	800cab4 <_printf_float+0xe8>
 800cb3c:	2900      	cmp	r1, #0
 800cb3e:	d1b9      	bne.n	800cab4 <_printf_float+0xe8>
 800cb40:	2301      	movs	r3, #1
 800cb42:	e7b6      	b.n	800cab2 <_printf_float+0xe6>
 800cb44:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cb48:	d119      	bne.n	800cb7e <_printf_float+0x1b2>
 800cb4a:	2900      	cmp	r1, #0
 800cb4c:	6863      	ldr	r3, [r4, #4]
 800cb4e:	dd0c      	ble.n	800cb6a <_printf_float+0x19e>
 800cb50:	6121      	str	r1, [r4, #16]
 800cb52:	b913      	cbnz	r3, 800cb5a <_printf_float+0x18e>
 800cb54:	6822      	ldr	r2, [r4, #0]
 800cb56:	07d2      	lsls	r2, r2, #31
 800cb58:	d502      	bpl.n	800cb60 <_printf_float+0x194>
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	440b      	add	r3, r1
 800cb5e:	6123      	str	r3, [r4, #16]
 800cb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb62:	65a3      	str	r3, [r4, #88]	; 0x58
 800cb64:	f04f 0900 	mov.w	r9, #0
 800cb68:	e7d9      	b.n	800cb1e <_printf_float+0x152>
 800cb6a:	b913      	cbnz	r3, 800cb72 <_printf_float+0x1a6>
 800cb6c:	6822      	ldr	r2, [r4, #0]
 800cb6e:	07d0      	lsls	r0, r2, #31
 800cb70:	d501      	bpl.n	800cb76 <_printf_float+0x1aa>
 800cb72:	3302      	adds	r3, #2
 800cb74:	e7f3      	b.n	800cb5e <_printf_float+0x192>
 800cb76:	2301      	movs	r3, #1
 800cb78:	e7f1      	b.n	800cb5e <_printf_float+0x192>
 800cb7a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cb7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb82:	4293      	cmp	r3, r2
 800cb84:	db05      	blt.n	800cb92 <_printf_float+0x1c6>
 800cb86:	6822      	ldr	r2, [r4, #0]
 800cb88:	6123      	str	r3, [r4, #16]
 800cb8a:	07d1      	lsls	r1, r2, #31
 800cb8c:	d5e8      	bpl.n	800cb60 <_printf_float+0x194>
 800cb8e:	3301      	adds	r3, #1
 800cb90:	e7e5      	b.n	800cb5e <_printf_float+0x192>
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	bfd4      	ite	le
 800cb96:	f1c3 0302 	rsble	r3, r3, #2
 800cb9a:	2301      	movgt	r3, #1
 800cb9c:	4413      	add	r3, r2
 800cb9e:	e7de      	b.n	800cb5e <_printf_float+0x192>
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	055a      	lsls	r2, r3, #21
 800cba4:	d407      	bmi.n	800cbb6 <_printf_float+0x1ea>
 800cba6:	6923      	ldr	r3, [r4, #16]
 800cba8:	4642      	mov	r2, r8
 800cbaa:	4631      	mov	r1, r6
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b8      	blx	r7
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	d12b      	bne.n	800cc0c <_printf_float+0x240>
 800cbb4:	e767      	b.n	800ca86 <_printf_float+0xba>
 800cbb6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cbba:	f240 80dc 	bls.w	800cd76 <_printf_float+0x3aa>
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbc6:	f7f3 ff87 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d033      	beq.n	800cc36 <_printf_float+0x26a>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	4a41      	ldr	r2, [pc, #260]	; (800ccd8 <_printf_float+0x30c>)
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	47b8      	blx	r7
 800cbd8:	3001      	adds	r0, #1
 800cbda:	f43f af54 	beq.w	800ca86 <_printf_float+0xba>
 800cbde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	db02      	blt.n	800cbec <_printf_float+0x220>
 800cbe6:	6823      	ldr	r3, [r4, #0]
 800cbe8:	07d8      	lsls	r0, r3, #31
 800cbea:	d50f      	bpl.n	800cc0c <_printf_float+0x240>
 800cbec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbf0:	4631      	mov	r1, r6
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	47b8      	blx	r7
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	f43f af45 	beq.w	800ca86 <_printf_float+0xba>
 800cbfc:	f04f 0800 	mov.w	r8, #0
 800cc00:	f104 091a 	add.w	r9, r4, #26
 800cc04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc06:	3b01      	subs	r3, #1
 800cc08:	4543      	cmp	r3, r8
 800cc0a:	dc09      	bgt.n	800cc20 <_printf_float+0x254>
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	079b      	lsls	r3, r3, #30
 800cc10:	f100 8103 	bmi.w	800ce1a <_printf_float+0x44e>
 800cc14:	68e0      	ldr	r0, [r4, #12]
 800cc16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc18:	4298      	cmp	r0, r3
 800cc1a:	bfb8      	it	lt
 800cc1c:	4618      	movlt	r0, r3
 800cc1e:	e734      	b.n	800ca8a <_printf_float+0xbe>
 800cc20:	2301      	movs	r3, #1
 800cc22:	464a      	mov	r2, r9
 800cc24:	4631      	mov	r1, r6
 800cc26:	4628      	mov	r0, r5
 800cc28:	47b8      	blx	r7
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	f43f af2b 	beq.w	800ca86 <_printf_float+0xba>
 800cc30:	f108 0801 	add.w	r8, r8, #1
 800cc34:	e7e6      	b.n	800cc04 <_printf_float+0x238>
 800cc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dc2b      	bgt.n	800cc94 <_printf_float+0x2c8>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	4a26      	ldr	r2, [pc, #152]	; (800ccd8 <_printf_float+0x30c>)
 800cc40:	4631      	mov	r1, r6
 800cc42:	4628      	mov	r0, r5
 800cc44:	47b8      	blx	r7
 800cc46:	3001      	adds	r0, #1
 800cc48:	f43f af1d 	beq.w	800ca86 <_printf_float+0xba>
 800cc4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc4e:	b923      	cbnz	r3, 800cc5a <_printf_float+0x28e>
 800cc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc52:	b913      	cbnz	r3, 800cc5a <_printf_float+0x28e>
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	07d9      	lsls	r1, r3, #31
 800cc58:	d5d8      	bpl.n	800cc0c <_printf_float+0x240>
 800cc5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc5e:	4631      	mov	r1, r6
 800cc60:	4628      	mov	r0, r5
 800cc62:	47b8      	blx	r7
 800cc64:	3001      	adds	r0, #1
 800cc66:	f43f af0e 	beq.w	800ca86 <_printf_float+0xba>
 800cc6a:	f04f 0900 	mov.w	r9, #0
 800cc6e:	f104 0a1a 	add.w	sl, r4, #26
 800cc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc74:	425b      	negs	r3, r3
 800cc76:	454b      	cmp	r3, r9
 800cc78:	dc01      	bgt.n	800cc7e <_printf_float+0x2b2>
 800cc7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc7c:	e794      	b.n	800cba8 <_printf_float+0x1dc>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	4652      	mov	r2, sl
 800cc82:	4631      	mov	r1, r6
 800cc84:	4628      	mov	r0, r5
 800cc86:	47b8      	blx	r7
 800cc88:	3001      	adds	r0, #1
 800cc8a:	f43f aefc 	beq.w	800ca86 <_printf_float+0xba>
 800cc8e:	f109 0901 	add.w	r9, r9, #1
 800cc92:	e7ee      	b.n	800cc72 <_printf_float+0x2a6>
 800cc94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	bfa8      	it	ge
 800cc9c:	461a      	movge	r2, r3
 800cc9e:	2a00      	cmp	r2, #0
 800cca0:	4691      	mov	r9, r2
 800cca2:	dd07      	ble.n	800ccb4 <_printf_float+0x2e8>
 800cca4:	4613      	mov	r3, r2
 800cca6:	4631      	mov	r1, r6
 800cca8:	4642      	mov	r2, r8
 800ccaa:	4628      	mov	r0, r5
 800ccac:	47b8      	blx	r7
 800ccae:	3001      	adds	r0, #1
 800ccb0:	f43f aee9 	beq.w	800ca86 <_printf_float+0xba>
 800ccb4:	f104 031a 	add.w	r3, r4, #26
 800ccb8:	f04f 0b00 	mov.w	fp, #0
 800ccbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ccc0:	9306      	str	r3, [sp, #24]
 800ccc2:	e015      	b.n	800ccf0 <_printf_float+0x324>
 800ccc4:	7fefffff 	.word	0x7fefffff
 800ccc8:	08010c1d 	.word	0x08010c1d
 800cccc:	08010c19 	.word	0x08010c19
 800ccd0:	08010c25 	.word	0x08010c25
 800ccd4:	08010c21 	.word	0x08010c21
 800ccd8:	08010c29 	.word	0x08010c29
 800ccdc:	2301      	movs	r3, #1
 800ccde:	9a06      	ldr	r2, [sp, #24]
 800cce0:	4631      	mov	r1, r6
 800cce2:	4628      	mov	r0, r5
 800cce4:	47b8      	blx	r7
 800cce6:	3001      	adds	r0, #1
 800cce8:	f43f aecd 	beq.w	800ca86 <_printf_float+0xba>
 800ccec:	f10b 0b01 	add.w	fp, fp, #1
 800ccf0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ccf4:	ebaa 0309 	sub.w	r3, sl, r9
 800ccf8:	455b      	cmp	r3, fp
 800ccfa:	dcef      	bgt.n	800ccdc <_printf_float+0x310>
 800ccfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd00:	429a      	cmp	r2, r3
 800cd02:	44d0      	add	r8, sl
 800cd04:	db15      	blt.n	800cd32 <_printf_float+0x366>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	07da      	lsls	r2, r3, #31
 800cd0a:	d412      	bmi.n	800cd32 <_printf_float+0x366>
 800cd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd10:	eba3 020a 	sub.w	r2, r3, sl
 800cd14:	eba3 0a01 	sub.w	sl, r3, r1
 800cd18:	4592      	cmp	sl, r2
 800cd1a:	bfa8      	it	ge
 800cd1c:	4692      	movge	sl, r2
 800cd1e:	f1ba 0f00 	cmp.w	sl, #0
 800cd22:	dc0e      	bgt.n	800cd42 <_printf_float+0x376>
 800cd24:	f04f 0800 	mov.w	r8, #0
 800cd28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd2c:	f104 091a 	add.w	r9, r4, #26
 800cd30:	e019      	b.n	800cd66 <_printf_float+0x39a>
 800cd32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd36:	4631      	mov	r1, r6
 800cd38:	4628      	mov	r0, r5
 800cd3a:	47b8      	blx	r7
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d1e5      	bne.n	800cd0c <_printf_float+0x340>
 800cd40:	e6a1      	b.n	800ca86 <_printf_float+0xba>
 800cd42:	4653      	mov	r3, sl
 800cd44:	4642      	mov	r2, r8
 800cd46:	4631      	mov	r1, r6
 800cd48:	4628      	mov	r0, r5
 800cd4a:	47b8      	blx	r7
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d1e9      	bne.n	800cd24 <_printf_float+0x358>
 800cd50:	e699      	b.n	800ca86 <_printf_float+0xba>
 800cd52:	2301      	movs	r3, #1
 800cd54:	464a      	mov	r2, r9
 800cd56:	4631      	mov	r1, r6
 800cd58:	4628      	mov	r0, r5
 800cd5a:	47b8      	blx	r7
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	f43f ae92 	beq.w	800ca86 <_printf_float+0xba>
 800cd62:	f108 0801 	add.w	r8, r8, #1
 800cd66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd6a:	1a9b      	subs	r3, r3, r2
 800cd6c:	eba3 030a 	sub.w	r3, r3, sl
 800cd70:	4543      	cmp	r3, r8
 800cd72:	dcee      	bgt.n	800cd52 <_printf_float+0x386>
 800cd74:	e74a      	b.n	800cc0c <_printf_float+0x240>
 800cd76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd78:	2a01      	cmp	r2, #1
 800cd7a:	dc01      	bgt.n	800cd80 <_printf_float+0x3b4>
 800cd7c:	07db      	lsls	r3, r3, #31
 800cd7e:	d53a      	bpl.n	800cdf6 <_printf_float+0x42a>
 800cd80:	2301      	movs	r3, #1
 800cd82:	4642      	mov	r2, r8
 800cd84:	4631      	mov	r1, r6
 800cd86:	4628      	mov	r0, r5
 800cd88:	47b8      	blx	r7
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	f43f ae7b 	beq.w	800ca86 <_printf_float+0xba>
 800cd90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd94:	4631      	mov	r1, r6
 800cd96:	4628      	mov	r0, r5
 800cd98:	47b8      	blx	r7
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	f108 0801 	add.w	r8, r8, #1
 800cda0:	f43f ae71 	beq.w	800ca86 <_printf_float+0xba>
 800cda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda6:	2200      	movs	r2, #0
 800cda8:	f103 3aff 	add.w	sl, r3, #4294967295
 800cdac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f7f3 fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdb6:	b9c8      	cbnz	r0, 800cdec <_printf_float+0x420>
 800cdb8:	4653      	mov	r3, sl
 800cdba:	4642      	mov	r2, r8
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	47b8      	blx	r7
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	d10e      	bne.n	800cde4 <_printf_float+0x418>
 800cdc6:	e65e      	b.n	800ca86 <_printf_float+0xba>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	4652      	mov	r2, sl
 800cdcc:	4631      	mov	r1, r6
 800cdce:	4628      	mov	r0, r5
 800cdd0:	47b8      	blx	r7
 800cdd2:	3001      	adds	r0, #1
 800cdd4:	f43f ae57 	beq.w	800ca86 <_printf_float+0xba>
 800cdd8:	f108 0801 	add.w	r8, r8, #1
 800cddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdde:	3b01      	subs	r3, #1
 800cde0:	4543      	cmp	r3, r8
 800cde2:	dcf1      	bgt.n	800cdc8 <_printf_float+0x3fc>
 800cde4:	464b      	mov	r3, r9
 800cde6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cdea:	e6de      	b.n	800cbaa <_printf_float+0x1de>
 800cdec:	f04f 0800 	mov.w	r8, #0
 800cdf0:	f104 0a1a 	add.w	sl, r4, #26
 800cdf4:	e7f2      	b.n	800cddc <_printf_float+0x410>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e7df      	b.n	800cdba <_printf_float+0x3ee>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	464a      	mov	r2, r9
 800cdfe:	4631      	mov	r1, r6
 800ce00:	4628      	mov	r0, r5
 800ce02:	47b8      	blx	r7
 800ce04:	3001      	adds	r0, #1
 800ce06:	f43f ae3e 	beq.w	800ca86 <_printf_float+0xba>
 800ce0a:	f108 0801 	add.w	r8, r8, #1
 800ce0e:	68e3      	ldr	r3, [r4, #12]
 800ce10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce12:	1a9b      	subs	r3, r3, r2
 800ce14:	4543      	cmp	r3, r8
 800ce16:	dcf0      	bgt.n	800cdfa <_printf_float+0x42e>
 800ce18:	e6fc      	b.n	800cc14 <_printf_float+0x248>
 800ce1a:	f04f 0800 	mov.w	r8, #0
 800ce1e:	f104 0919 	add.w	r9, r4, #25
 800ce22:	e7f4      	b.n	800ce0e <_printf_float+0x442>
 800ce24:	2900      	cmp	r1, #0
 800ce26:	f43f ae8b 	beq.w	800cb40 <_printf_float+0x174>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ce30:	ab09      	add	r3, sp, #36	; 0x24
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	ec49 8b10 	vmov	d0, r8, r9
 800ce38:	6022      	str	r2, [r4, #0]
 800ce3a:	f8cd a004 	str.w	sl, [sp, #4]
 800ce3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce42:	4628      	mov	r0, r5
 800ce44:	f7ff fd2e 	bl	800c8a4 <__cvt>
 800ce48:	4680      	mov	r8, r0
 800ce4a:	e648      	b.n	800cade <_printf_float+0x112>

0800ce4c <_printf_common>:
 800ce4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce50:	4691      	mov	r9, r2
 800ce52:	461f      	mov	r7, r3
 800ce54:	688a      	ldr	r2, [r1, #8]
 800ce56:	690b      	ldr	r3, [r1, #16]
 800ce58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	bfb8      	it	lt
 800ce60:	4613      	movlt	r3, r2
 800ce62:	f8c9 3000 	str.w	r3, [r9]
 800ce66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	b112      	cbz	r2, 800ce76 <_printf_common+0x2a>
 800ce70:	3301      	adds	r3, #1
 800ce72:	f8c9 3000 	str.w	r3, [r9]
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	0699      	lsls	r1, r3, #26
 800ce7a:	bf42      	ittt	mi
 800ce7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ce80:	3302      	addmi	r3, #2
 800ce82:	f8c9 3000 	strmi.w	r3, [r9]
 800ce86:	6825      	ldr	r5, [r4, #0]
 800ce88:	f015 0506 	ands.w	r5, r5, #6
 800ce8c:	d107      	bne.n	800ce9e <_printf_common+0x52>
 800ce8e:	f104 0a19 	add.w	sl, r4, #25
 800ce92:	68e3      	ldr	r3, [r4, #12]
 800ce94:	f8d9 2000 	ldr.w	r2, [r9]
 800ce98:	1a9b      	subs	r3, r3, r2
 800ce9a:	42ab      	cmp	r3, r5
 800ce9c:	dc28      	bgt.n	800cef0 <_printf_common+0xa4>
 800ce9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cea2:	6822      	ldr	r2, [r4, #0]
 800cea4:	3300      	adds	r3, #0
 800cea6:	bf18      	it	ne
 800cea8:	2301      	movne	r3, #1
 800ceaa:	0692      	lsls	r2, r2, #26
 800ceac:	d42d      	bmi.n	800cf0a <_printf_common+0xbe>
 800ceae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	47c0      	blx	r8
 800ceb8:	3001      	adds	r0, #1
 800ceba:	d020      	beq.n	800cefe <_printf_common+0xb2>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	68e5      	ldr	r5, [r4, #12]
 800cec0:	f8d9 2000 	ldr.w	r2, [r9]
 800cec4:	f003 0306 	and.w	r3, r3, #6
 800cec8:	2b04      	cmp	r3, #4
 800ceca:	bf08      	it	eq
 800cecc:	1aad      	subeq	r5, r5, r2
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	6922      	ldr	r2, [r4, #16]
 800ced2:	bf0c      	ite	eq
 800ced4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ced8:	2500      	movne	r5, #0
 800ceda:	4293      	cmp	r3, r2
 800cedc:	bfc4      	itt	gt
 800cede:	1a9b      	subgt	r3, r3, r2
 800cee0:	18ed      	addgt	r5, r5, r3
 800cee2:	f04f 0900 	mov.w	r9, #0
 800cee6:	341a      	adds	r4, #26
 800cee8:	454d      	cmp	r5, r9
 800ceea:	d11a      	bne.n	800cf22 <_printf_common+0xd6>
 800ceec:	2000      	movs	r0, #0
 800ceee:	e008      	b.n	800cf02 <_printf_common+0xb6>
 800cef0:	2301      	movs	r3, #1
 800cef2:	4652      	mov	r2, sl
 800cef4:	4639      	mov	r1, r7
 800cef6:	4630      	mov	r0, r6
 800cef8:	47c0      	blx	r8
 800cefa:	3001      	adds	r0, #1
 800cefc:	d103      	bne.n	800cf06 <_printf_common+0xba>
 800cefe:	f04f 30ff 	mov.w	r0, #4294967295
 800cf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf06:	3501      	adds	r5, #1
 800cf08:	e7c3      	b.n	800ce92 <_printf_common+0x46>
 800cf0a:	18e1      	adds	r1, r4, r3
 800cf0c:	1c5a      	adds	r2, r3, #1
 800cf0e:	2030      	movs	r0, #48	; 0x30
 800cf10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf14:	4422      	add	r2, r4
 800cf16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf1e:	3302      	adds	r3, #2
 800cf20:	e7c5      	b.n	800ceae <_printf_common+0x62>
 800cf22:	2301      	movs	r3, #1
 800cf24:	4622      	mov	r2, r4
 800cf26:	4639      	mov	r1, r7
 800cf28:	4630      	mov	r0, r6
 800cf2a:	47c0      	blx	r8
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d0e6      	beq.n	800cefe <_printf_common+0xb2>
 800cf30:	f109 0901 	add.w	r9, r9, #1
 800cf34:	e7d8      	b.n	800cee8 <_printf_common+0x9c>
	...

0800cf38 <_printf_i>:
 800cf38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cf40:	460c      	mov	r4, r1
 800cf42:	7e09      	ldrb	r1, [r1, #24]
 800cf44:	b085      	sub	sp, #20
 800cf46:	296e      	cmp	r1, #110	; 0x6e
 800cf48:	4617      	mov	r7, r2
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	4698      	mov	r8, r3
 800cf4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf50:	f000 80b3 	beq.w	800d0ba <_printf_i+0x182>
 800cf54:	d822      	bhi.n	800cf9c <_printf_i+0x64>
 800cf56:	2963      	cmp	r1, #99	; 0x63
 800cf58:	d036      	beq.n	800cfc8 <_printf_i+0x90>
 800cf5a:	d80a      	bhi.n	800cf72 <_printf_i+0x3a>
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	f000 80b9 	beq.w	800d0d4 <_printf_i+0x19c>
 800cf62:	2958      	cmp	r1, #88	; 0x58
 800cf64:	f000 8083 	beq.w	800d06e <_printf_i+0x136>
 800cf68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cf70:	e032      	b.n	800cfd8 <_printf_i+0xa0>
 800cf72:	2964      	cmp	r1, #100	; 0x64
 800cf74:	d001      	beq.n	800cf7a <_printf_i+0x42>
 800cf76:	2969      	cmp	r1, #105	; 0x69
 800cf78:	d1f6      	bne.n	800cf68 <_printf_i+0x30>
 800cf7a:	6820      	ldr	r0, [r4, #0]
 800cf7c:	6813      	ldr	r3, [r2, #0]
 800cf7e:	0605      	lsls	r5, r0, #24
 800cf80:	f103 0104 	add.w	r1, r3, #4
 800cf84:	d52a      	bpl.n	800cfdc <_printf_i+0xa4>
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6011      	str	r1, [r2, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	da03      	bge.n	800cf96 <_printf_i+0x5e>
 800cf8e:	222d      	movs	r2, #45	; 0x2d
 800cf90:	425b      	negs	r3, r3
 800cf92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cf96:	486f      	ldr	r0, [pc, #444]	; (800d154 <_printf_i+0x21c>)
 800cf98:	220a      	movs	r2, #10
 800cf9a:	e039      	b.n	800d010 <_printf_i+0xd8>
 800cf9c:	2973      	cmp	r1, #115	; 0x73
 800cf9e:	f000 809d 	beq.w	800d0dc <_printf_i+0x1a4>
 800cfa2:	d808      	bhi.n	800cfb6 <_printf_i+0x7e>
 800cfa4:	296f      	cmp	r1, #111	; 0x6f
 800cfa6:	d020      	beq.n	800cfea <_printf_i+0xb2>
 800cfa8:	2970      	cmp	r1, #112	; 0x70
 800cfaa:	d1dd      	bne.n	800cf68 <_printf_i+0x30>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	f043 0320 	orr.w	r3, r3, #32
 800cfb2:	6023      	str	r3, [r4, #0]
 800cfb4:	e003      	b.n	800cfbe <_printf_i+0x86>
 800cfb6:	2975      	cmp	r1, #117	; 0x75
 800cfb8:	d017      	beq.n	800cfea <_printf_i+0xb2>
 800cfba:	2978      	cmp	r1, #120	; 0x78
 800cfbc:	d1d4      	bne.n	800cf68 <_printf_i+0x30>
 800cfbe:	2378      	movs	r3, #120	; 0x78
 800cfc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfc4:	4864      	ldr	r0, [pc, #400]	; (800d158 <_printf_i+0x220>)
 800cfc6:	e055      	b.n	800d074 <_printf_i+0x13c>
 800cfc8:	6813      	ldr	r3, [r2, #0]
 800cfca:	1d19      	adds	r1, r3, #4
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	6011      	str	r1, [r2, #0]
 800cfd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e08c      	b.n	800d0f6 <_printf_i+0x1be>
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	6011      	str	r1, [r2, #0]
 800cfe0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cfe4:	bf18      	it	ne
 800cfe6:	b21b      	sxthne	r3, r3
 800cfe8:	e7cf      	b.n	800cf8a <_printf_i+0x52>
 800cfea:	6813      	ldr	r3, [r2, #0]
 800cfec:	6825      	ldr	r5, [r4, #0]
 800cfee:	1d18      	adds	r0, r3, #4
 800cff0:	6010      	str	r0, [r2, #0]
 800cff2:	0628      	lsls	r0, r5, #24
 800cff4:	d501      	bpl.n	800cffa <_printf_i+0xc2>
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	e002      	b.n	800d000 <_printf_i+0xc8>
 800cffa:	0668      	lsls	r0, r5, #25
 800cffc:	d5fb      	bpl.n	800cff6 <_printf_i+0xbe>
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	4854      	ldr	r0, [pc, #336]	; (800d154 <_printf_i+0x21c>)
 800d002:	296f      	cmp	r1, #111	; 0x6f
 800d004:	bf14      	ite	ne
 800d006:	220a      	movne	r2, #10
 800d008:	2208      	moveq	r2, #8
 800d00a:	2100      	movs	r1, #0
 800d00c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d010:	6865      	ldr	r5, [r4, #4]
 800d012:	60a5      	str	r5, [r4, #8]
 800d014:	2d00      	cmp	r5, #0
 800d016:	f2c0 8095 	blt.w	800d144 <_printf_i+0x20c>
 800d01a:	6821      	ldr	r1, [r4, #0]
 800d01c:	f021 0104 	bic.w	r1, r1, #4
 800d020:	6021      	str	r1, [r4, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d13d      	bne.n	800d0a2 <_printf_i+0x16a>
 800d026:	2d00      	cmp	r5, #0
 800d028:	f040 808e 	bne.w	800d148 <_printf_i+0x210>
 800d02c:	4665      	mov	r5, ip
 800d02e:	2a08      	cmp	r2, #8
 800d030:	d10b      	bne.n	800d04a <_printf_i+0x112>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	07db      	lsls	r3, r3, #31
 800d036:	d508      	bpl.n	800d04a <_printf_i+0x112>
 800d038:	6923      	ldr	r3, [r4, #16]
 800d03a:	6862      	ldr	r2, [r4, #4]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	bfde      	ittt	le
 800d040:	2330      	movle	r3, #48	; 0x30
 800d042:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d046:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d04a:	ebac 0305 	sub.w	r3, ip, r5
 800d04e:	6123      	str	r3, [r4, #16]
 800d050:	f8cd 8000 	str.w	r8, [sp]
 800d054:	463b      	mov	r3, r7
 800d056:	aa03      	add	r2, sp, #12
 800d058:	4621      	mov	r1, r4
 800d05a:	4630      	mov	r0, r6
 800d05c:	f7ff fef6 	bl	800ce4c <_printf_common>
 800d060:	3001      	adds	r0, #1
 800d062:	d14d      	bne.n	800d100 <_printf_i+0x1c8>
 800d064:	f04f 30ff 	mov.w	r0, #4294967295
 800d068:	b005      	add	sp, #20
 800d06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d06e:	4839      	ldr	r0, [pc, #228]	; (800d154 <_printf_i+0x21c>)
 800d070:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d074:	6813      	ldr	r3, [r2, #0]
 800d076:	6821      	ldr	r1, [r4, #0]
 800d078:	1d1d      	adds	r5, r3, #4
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6015      	str	r5, [r2, #0]
 800d07e:	060a      	lsls	r2, r1, #24
 800d080:	d50b      	bpl.n	800d09a <_printf_i+0x162>
 800d082:	07ca      	lsls	r2, r1, #31
 800d084:	bf44      	itt	mi
 800d086:	f041 0120 	orrmi.w	r1, r1, #32
 800d08a:	6021      	strmi	r1, [r4, #0]
 800d08c:	b91b      	cbnz	r3, 800d096 <_printf_i+0x15e>
 800d08e:	6822      	ldr	r2, [r4, #0]
 800d090:	f022 0220 	bic.w	r2, r2, #32
 800d094:	6022      	str	r2, [r4, #0]
 800d096:	2210      	movs	r2, #16
 800d098:	e7b7      	b.n	800d00a <_printf_i+0xd2>
 800d09a:	064d      	lsls	r5, r1, #25
 800d09c:	bf48      	it	mi
 800d09e:	b29b      	uxthmi	r3, r3
 800d0a0:	e7ef      	b.n	800d082 <_printf_i+0x14a>
 800d0a2:	4665      	mov	r5, ip
 800d0a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0a8:	fb02 3311 	mls	r3, r2, r1, r3
 800d0ac:	5cc3      	ldrb	r3, [r0, r3]
 800d0ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	2900      	cmp	r1, #0
 800d0b6:	d1f5      	bne.n	800d0a4 <_printf_i+0x16c>
 800d0b8:	e7b9      	b.n	800d02e <_printf_i+0xf6>
 800d0ba:	6813      	ldr	r3, [r2, #0]
 800d0bc:	6825      	ldr	r5, [r4, #0]
 800d0be:	6961      	ldr	r1, [r4, #20]
 800d0c0:	1d18      	adds	r0, r3, #4
 800d0c2:	6010      	str	r0, [r2, #0]
 800d0c4:	0628      	lsls	r0, r5, #24
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	d501      	bpl.n	800d0ce <_printf_i+0x196>
 800d0ca:	6019      	str	r1, [r3, #0]
 800d0cc:	e002      	b.n	800d0d4 <_printf_i+0x19c>
 800d0ce:	066a      	lsls	r2, r5, #25
 800d0d0:	d5fb      	bpl.n	800d0ca <_printf_i+0x192>
 800d0d2:	8019      	strh	r1, [r3, #0]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	4665      	mov	r5, ip
 800d0da:	e7b9      	b.n	800d050 <_printf_i+0x118>
 800d0dc:	6813      	ldr	r3, [r2, #0]
 800d0de:	1d19      	adds	r1, r3, #4
 800d0e0:	6011      	str	r1, [r2, #0]
 800d0e2:	681d      	ldr	r5, [r3, #0]
 800d0e4:	6862      	ldr	r2, [r4, #4]
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	f7f3 f881 	bl	80001f0 <memchr>
 800d0ee:	b108      	cbz	r0, 800d0f4 <_printf_i+0x1bc>
 800d0f0:	1b40      	subs	r0, r0, r5
 800d0f2:	6060      	str	r0, [r4, #4]
 800d0f4:	6863      	ldr	r3, [r4, #4]
 800d0f6:	6123      	str	r3, [r4, #16]
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0fe:	e7a7      	b.n	800d050 <_printf_i+0x118>
 800d100:	6923      	ldr	r3, [r4, #16]
 800d102:	462a      	mov	r2, r5
 800d104:	4639      	mov	r1, r7
 800d106:	4630      	mov	r0, r6
 800d108:	47c0      	blx	r8
 800d10a:	3001      	adds	r0, #1
 800d10c:	d0aa      	beq.n	800d064 <_printf_i+0x12c>
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	079b      	lsls	r3, r3, #30
 800d112:	d413      	bmi.n	800d13c <_printf_i+0x204>
 800d114:	68e0      	ldr	r0, [r4, #12]
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	4298      	cmp	r0, r3
 800d11a:	bfb8      	it	lt
 800d11c:	4618      	movlt	r0, r3
 800d11e:	e7a3      	b.n	800d068 <_printf_i+0x130>
 800d120:	2301      	movs	r3, #1
 800d122:	464a      	mov	r2, r9
 800d124:	4639      	mov	r1, r7
 800d126:	4630      	mov	r0, r6
 800d128:	47c0      	blx	r8
 800d12a:	3001      	adds	r0, #1
 800d12c:	d09a      	beq.n	800d064 <_printf_i+0x12c>
 800d12e:	3501      	adds	r5, #1
 800d130:	68e3      	ldr	r3, [r4, #12]
 800d132:	9a03      	ldr	r2, [sp, #12]
 800d134:	1a9b      	subs	r3, r3, r2
 800d136:	42ab      	cmp	r3, r5
 800d138:	dcf2      	bgt.n	800d120 <_printf_i+0x1e8>
 800d13a:	e7eb      	b.n	800d114 <_printf_i+0x1dc>
 800d13c:	2500      	movs	r5, #0
 800d13e:	f104 0919 	add.w	r9, r4, #25
 800d142:	e7f5      	b.n	800d130 <_printf_i+0x1f8>
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1ac      	bne.n	800d0a2 <_printf_i+0x16a>
 800d148:	7803      	ldrb	r3, [r0, #0]
 800d14a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d14e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d152:	e76c      	b.n	800d02e <_printf_i+0xf6>
 800d154:	08010c2b 	.word	0x08010c2b
 800d158:	08010c3c 	.word	0x08010c3c

0800d15c <_scanf_float>:
 800d15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d160:	469a      	mov	sl, r3
 800d162:	688b      	ldr	r3, [r1, #8]
 800d164:	4616      	mov	r6, r2
 800d166:	1e5a      	subs	r2, r3, #1
 800d168:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d16c:	b087      	sub	sp, #28
 800d16e:	bf83      	ittte	hi
 800d170:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d174:	189b      	addhi	r3, r3, r2
 800d176:	9301      	strhi	r3, [sp, #4]
 800d178:	2300      	movls	r3, #0
 800d17a:	bf86      	itte	hi
 800d17c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d180:	608b      	strhi	r3, [r1, #8]
 800d182:	9301      	strls	r3, [sp, #4]
 800d184:	680b      	ldr	r3, [r1, #0]
 800d186:	4688      	mov	r8, r1
 800d188:	f04f 0b00 	mov.w	fp, #0
 800d18c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d190:	f848 3b1c 	str.w	r3, [r8], #28
 800d194:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d198:	4607      	mov	r7, r0
 800d19a:	460c      	mov	r4, r1
 800d19c:	4645      	mov	r5, r8
 800d19e:	465a      	mov	r2, fp
 800d1a0:	46d9      	mov	r9, fp
 800d1a2:	f8cd b008 	str.w	fp, [sp, #8]
 800d1a6:	68a1      	ldr	r1, [r4, #8]
 800d1a8:	b181      	cbz	r1, 800d1cc <_scanf_float+0x70>
 800d1aa:	6833      	ldr	r3, [r6, #0]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	2b49      	cmp	r3, #73	; 0x49
 800d1b0:	d071      	beq.n	800d296 <_scanf_float+0x13a>
 800d1b2:	d84d      	bhi.n	800d250 <_scanf_float+0xf4>
 800d1b4:	2b39      	cmp	r3, #57	; 0x39
 800d1b6:	d840      	bhi.n	800d23a <_scanf_float+0xde>
 800d1b8:	2b31      	cmp	r3, #49	; 0x31
 800d1ba:	f080 8088 	bcs.w	800d2ce <_scanf_float+0x172>
 800d1be:	2b2d      	cmp	r3, #45	; 0x2d
 800d1c0:	f000 8090 	beq.w	800d2e4 <_scanf_float+0x188>
 800d1c4:	d815      	bhi.n	800d1f2 <_scanf_float+0x96>
 800d1c6:	2b2b      	cmp	r3, #43	; 0x2b
 800d1c8:	f000 808c 	beq.w	800d2e4 <_scanf_float+0x188>
 800d1cc:	f1b9 0f00 	cmp.w	r9, #0
 800d1d0:	d003      	beq.n	800d1da <_scanf_float+0x7e>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	3a01      	subs	r2, #1
 800d1dc:	2a01      	cmp	r2, #1
 800d1de:	f200 80ea 	bhi.w	800d3b6 <_scanf_float+0x25a>
 800d1e2:	4545      	cmp	r5, r8
 800d1e4:	f200 80dc 	bhi.w	800d3a0 <_scanf_float+0x244>
 800d1e8:	2601      	movs	r6, #1
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	b007      	add	sp, #28
 800d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f2:	2b2e      	cmp	r3, #46	; 0x2e
 800d1f4:	f000 809f 	beq.w	800d336 <_scanf_float+0x1da>
 800d1f8:	2b30      	cmp	r3, #48	; 0x30
 800d1fa:	d1e7      	bne.n	800d1cc <_scanf_float+0x70>
 800d1fc:	6820      	ldr	r0, [r4, #0]
 800d1fe:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d202:	d064      	beq.n	800d2ce <_scanf_float+0x172>
 800d204:	9b01      	ldr	r3, [sp, #4]
 800d206:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d20a:	6020      	str	r0, [r4, #0]
 800d20c:	f109 0901 	add.w	r9, r9, #1
 800d210:	b11b      	cbz	r3, 800d21a <_scanf_float+0xbe>
 800d212:	3b01      	subs	r3, #1
 800d214:	3101      	adds	r1, #1
 800d216:	9301      	str	r3, [sp, #4]
 800d218:	60a1      	str	r1, [r4, #8]
 800d21a:	68a3      	ldr	r3, [r4, #8]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	60a3      	str	r3, [r4, #8]
 800d220:	6923      	ldr	r3, [r4, #16]
 800d222:	3301      	adds	r3, #1
 800d224:	6123      	str	r3, [r4, #16]
 800d226:	6873      	ldr	r3, [r6, #4]
 800d228:	3b01      	subs	r3, #1
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	6073      	str	r3, [r6, #4]
 800d22e:	f340 80ac 	ble.w	800d38a <_scanf_float+0x22e>
 800d232:	6833      	ldr	r3, [r6, #0]
 800d234:	3301      	adds	r3, #1
 800d236:	6033      	str	r3, [r6, #0]
 800d238:	e7b5      	b.n	800d1a6 <_scanf_float+0x4a>
 800d23a:	2b45      	cmp	r3, #69	; 0x45
 800d23c:	f000 8085 	beq.w	800d34a <_scanf_float+0x1ee>
 800d240:	2b46      	cmp	r3, #70	; 0x46
 800d242:	d06a      	beq.n	800d31a <_scanf_float+0x1be>
 800d244:	2b41      	cmp	r3, #65	; 0x41
 800d246:	d1c1      	bne.n	800d1cc <_scanf_float+0x70>
 800d248:	2a01      	cmp	r2, #1
 800d24a:	d1bf      	bne.n	800d1cc <_scanf_float+0x70>
 800d24c:	2202      	movs	r2, #2
 800d24e:	e046      	b.n	800d2de <_scanf_float+0x182>
 800d250:	2b65      	cmp	r3, #101	; 0x65
 800d252:	d07a      	beq.n	800d34a <_scanf_float+0x1ee>
 800d254:	d818      	bhi.n	800d288 <_scanf_float+0x12c>
 800d256:	2b54      	cmp	r3, #84	; 0x54
 800d258:	d066      	beq.n	800d328 <_scanf_float+0x1cc>
 800d25a:	d811      	bhi.n	800d280 <_scanf_float+0x124>
 800d25c:	2b4e      	cmp	r3, #78	; 0x4e
 800d25e:	d1b5      	bne.n	800d1cc <_scanf_float+0x70>
 800d260:	2a00      	cmp	r2, #0
 800d262:	d146      	bne.n	800d2f2 <_scanf_float+0x196>
 800d264:	f1b9 0f00 	cmp.w	r9, #0
 800d268:	d145      	bne.n	800d2f6 <_scanf_float+0x19a>
 800d26a:	6821      	ldr	r1, [r4, #0]
 800d26c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d270:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d274:	d13f      	bne.n	800d2f6 <_scanf_float+0x19a>
 800d276:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d27a:	6021      	str	r1, [r4, #0]
 800d27c:	2201      	movs	r2, #1
 800d27e:	e02e      	b.n	800d2de <_scanf_float+0x182>
 800d280:	2b59      	cmp	r3, #89	; 0x59
 800d282:	d01e      	beq.n	800d2c2 <_scanf_float+0x166>
 800d284:	2b61      	cmp	r3, #97	; 0x61
 800d286:	e7de      	b.n	800d246 <_scanf_float+0xea>
 800d288:	2b6e      	cmp	r3, #110	; 0x6e
 800d28a:	d0e9      	beq.n	800d260 <_scanf_float+0x104>
 800d28c:	d815      	bhi.n	800d2ba <_scanf_float+0x15e>
 800d28e:	2b66      	cmp	r3, #102	; 0x66
 800d290:	d043      	beq.n	800d31a <_scanf_float+0x1be>
 800d292:	2b69      	cmp	r3, #105	; 0x69
 800d294:	d19a      	bne.n	800d1cc <_scanf_float+0x70>
 800d296:	f1bb 0f00 	cmp.w	fp, #0
 800d29a:	d138      	bne.n	800d30e <_scanf_float+0x1b2>
 800d29c:	f1b9 0f00 	cmp.w	r9, #0
 800d2a0:	d197      	bne.n	800d1d2 <_scanf_float+0x76>
 800d2a2:	6821      	ldr	r1, [r4, #0]
 800d2a4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d2a8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d2ac:	d195      	bne.n	800d1da <_scanf_float+0x7e>
 800d2ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d2b2:	6021      	str	r1, [r4, #0]
 800d2b4:	f04f 0b01 	mov.w	fp, #1
 800d2b8:	e011      	b.n	800d2de <_scanf_float+0x182>
 800d2ba:	2b74      	cmp	r3, #116	; 0x74
 800d2bc:	d034      	beq.n	800d328 <_scanf_float+0x1cc>
 800d2be:	2b79      	cmp	r3, #121	; 0x79
 800d2c0:	d184      	bne.n	800d1cc <_scanf_float+0x70>
 800d2c2:	f1bb 0f07 	cmp.w	fp, #7
 800d2c6:	d181      	bne.n	800d1cc <_scanf_float+0x70>
 800d2c8:	f04f 0b08 	mov.w	fp, #8
 800d2cc:	e007      	b.n	800d2de <_scanf_float+0x182>
 800d2ce:	eb12 0f0b 	cmn.w	r2, fp
 800d2d2:	f47f af7b 	bne.w	800d1cc <_scanf_float+0x70>
 800d2d6:	6821      	ldr	r1, [r4, #0]
 800d2d8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d2dc:	6021      	str	r1, [r4, #0]
 800d2de:	702b      	strb	r3, [r5, #0]
 800d2e0:	3501      	adds	r5, #1
 800d2e2:	e79a      	b.n	800d21a <_scanf_float+0xbe>
 800d2e4:	6821      	ldr	r1, [r4, #0]
 800d2e6:	0608      	lsls	r0, r1, #24
 800d2e8:	f57f af70 	bpl.w	800d1cc <_scanf_float+0x70>
 800d2ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d2f0:	e7f4      	b.n	800d2dc <_scanf_float+0x180>
 800d2f2:	2a02      	cmp	r2, #2
 800d2f4:	d047      	beq.n	800d386 <_scanf_float+0x22a>
 800d2f6:	f1bb 0f01 	cmp.w	fp, #1
 800d2fa:	d003      	beq.n	800d304 <_scanf_float+0x1a8>
 800d2fc:	f1bb 0f04 	cmp.w	fp, #4
 800d300:	f47f af64 	bne.w	800d1cc <_scanf_float+0x70>
 800d304:	f10b 0b01 	add.w	fp, fp, #1
 800d308:	fa5f fb8b 	uxtb.w	fp, fp
 800d30c:	e7e7      	b.n	800d2de <_scanf_float+0x182>
 800d30e:	f1bb 0f03 	cmp.w	fp, #3
 800d312:	d0f7      	beq.n	800d304 <_scanf_float+0x1a8>
 800d314:	f1bb 0f05 	cmp.w	fp, #5
 800d318:	e7f2      	b.n	800d300 <_scanf_float+0x1a4>
 800d31a:	f1bb 0f02 	cmp.w	fp, #2
 800d31e:	f47f af55 	bne.w	800d1cc <_scanf_float+0x70>
 800d322:	f04f 0b03 	mov.w	fp, #3
 800d326:	e7da      	b.n	800d2de <_scanf_float+0x182>
 800d328:	f1bb 0f06 	cmp.w	fp, #6
 800d32c:	f47f af4e 	bne.w	800d1cc <_scanf_float+0x70>
 800d330:	f04f 0b07 	mov.w	fp, #7
 800d334:	e7d3      	b.n	800d2de <_scanf_float+0x182>
 800d336:	6821      	ldr	r1, [r4, #0]
 800d338:	0588      	lsls	r0, r1, #22
 800d33a:	f57f af47 	bpl.w	800d1cc <_scanf_float+0x70>
 800d33e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d342:	6021      	str	r1, [r4, #0]
 800d344:	f8cd 9008 	str.w	r9, [sp, #8]
 800d348:	e7c9      	b.n	800d2de <_scanf_float+0x182>
 800d34a:	6821      	ldr	r1, [r4, #0]
 800d34c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d350:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d354:	d006      	beq.n	800d364 <_scanf_float+0x208>
 800d356:	0548      	lsls	r0, r1, #21
 800d358:	f57f af38 	bpl.w	800d1cc <_scanf_float+0x70>
 800d35c:	f1b9 0f00 	cmp.w	r9, #0
 800d360:	f43f af3b 	beq.w	800d1da <_scanf_float+0x7e>
 800d364:	0588      	lsls	r0, r1, #22
 800d366:	bf58      	it	pl
 800d368:	9802      	ldrpl	r0, [sp, #8]
 800d36a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d36e:	bf58      	it	pl
 800d370:	eba9 0000 	subpl.w	r0, r9, r0
 800d374:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d378:	bf58      	it	pl
 800d37a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d37e:	6021      	str	r1, [r4, #0]
 800d380:	f04f 0900 	mov.w	r9, #0
 800d384:	e7ab      	b.n	800d2de <_scanf_float+0x182>
 800d386:	2203      	movs	r2, #3
 800d388:	e7a9      	b.n	800d2de <_scanf_float+0x182>
 800d38a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d38e:	9205      	str	r2, [sp, #20]
 800d390:	4631      	mov	r1, r6
 800d392:	4638      	mov	r0, r7
 800d394:	4798      	blx	r3
 800d396:	9a05      	ldr	r2, [sp, #20]
 800d398:	2800      	cmp	r0, #0
 800d39a:	f43f af04 	beq.w	800d1a6 <_scanf_float+0x4a>
 800d39e:	e715      	b.n	800d1cc <_scanf_float+0x70>
 800d3a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d3a8:	4632      	mov	r2, r6
 800d3aa:	4638      	mov	r0, r7
 800d3ac:	4798      	blx	r3
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	6123      	str	r3, [r4, #16]
 800d3b4:	e715      	b.n	800d1e2 <_scanf_float+0x86>
 800d3b6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d3ba:	2b06      	cmp	r3, #6
 800d3bc:	d80a      	bhi.n	800d3d4 <_scanf_float+0x278>
 800d3be:	f1bb 0f02 	cmp.w	fp, #2
 800d3c2:	d968      	bls.n	800d496 <_scanf_float+0x33a>
 800d3c4:	f1ab 0b03 	sub.w	fp, fp, #3
 800d3c8:	fa5f fb8b 	uxtb.w	fp, fp
 800d3cc:	eba5 0b0b 	sub.w	fp, r5, fp
 800d3d0:	455d      	cmp	r5, fp
 800d3d2:	d14b      	bne.n	800d46c <_scanf_float+0x310>
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	05da      	lsls	r2, r3, #23
 800d3d8:	d51f      	bpl.n	800d41a <_scanf_float+0x2be>
 800d3da:	055b      	lsls	r3, r3, #21
 800d3dc:	d468      	bmi.n	800d4b0 <_scanf_float+0x354>
 800d3de:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d3e2:	6923      	ldr	r3, [r4, #16]
 800d3e4:	2965      	cmp	r1, #101	; 0x65
 800d3e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3ea:	f105 3bff 	add.w	fp, r5, #4294967295
 800d3ee:	6123      	str	r3, [r4, #16]
 800d3f0:	d00d      	beq.n	800d40e <_scanf_float+0x2b2>
 800d3f2:	2945      	cmp	r1, #69	; 0x45
 800d3f4:	d00b      	beq.n	800d40e <_scanf_float+0x2b2>
 800d3f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3fa:	4632      	mov	r2, r6
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	4798      	blx	r3
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d406:	3b01      	subs	r3, #1
 800d408:	f1a5 0b02 	sub.w	fp, r5, #2
 800d40c:	6123      	str	r3, [r4, #16]
 800d40e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d412:	4632      	mov	r2, r6
 800d414:	4638      	mov	r0, r7
 800d416:	4798      	blx	r3
 800d418:	465d      	mov	r5, fp
 800d41a:	6826      	ldr	r6, [r4, #0]
 800d41c:	f016 0610 	ands.w	r6, r6, #16
 800d420:	d17a      	bne.n	800d518 <_scanf_float+0x3bc>
 800d422:	702e      	strb	r6, [r5, #0]
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d42a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d42e:	d142      	bne.n	800d4b6 <_scanf_float+0x35a>
 800d430:	9b02      	ldr	r3, [sp, #8]
 800d432:	eba9 0303 	sub.w	r3, r9, r3
 800d436:	425a      	negs	r2, r3
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d149      	bne.n	800d4d0 <_scanf_float+0x374>
 800d43c:	2200      	movs	r2, #0
 800d43e:	4641      	mov	r1, r8
 800d440:	4638      	mov	r0, r7
 800d442:	f000 fee9 	bl	800e218 <_strtod_r>
 800d446:	6825      	ldr	r5, [r4, #0]
 800d448:	f8da 3000 	ldr.w	r3, [sl]
 800d44c:	f015 0f02 	tst.w	r5, #2
 800d450:	f103 0204 	add.w	r2, r3, #4
 800d454:	ec59 8b10 	vmov	r8, r9, d0
 800d458:	f8ca 2000 	str.w	r2, [sl]
 800d45c:	d043      	beq.n	800d4e6 <_scanf_float+0x38a>
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	e9c3 8900 	strd	r8, r9, [r3]
 800d464:	68e3      	ldr	r3, [r4, #12]
 800d466:	3301      	adds	r3, #1
 800d468:	60e3      	str	r3, [r4, #12]
 800d46a:	e6be      	b.n	800d1ea <_scanf_float+0x8e>
 800d46c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d470:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d474:	4632      	mov	r2, r6
 800d476:	4638      	mov	r0, r7
 800d478:	4798      	blx	r3
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	3b01      	subs	r3, #1
 800d47e:	6123      	str	r3, [r4, #16]
 800d480:	e7a6      	b.n	800d3d0 <_scanf_float+0x274>
 800d482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d486:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d48a:	4632      	mov	r2, r6
 800d48c:	4638      	mov	r0, r7
 800d48e:	4798      	blx	r3
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	3b01      	subs	r3, #1
 800d494:	6123      	str	r3, [r4, #16]
 800d496:	4545      	cmp	r5, r8
 800d498:	d8f3      	bhi.n	800d482 <_scanf_float+0x326>
 800d49a:	e6a5      	b.n	800d1e8 <_scanf_float+0x8c>
 800d49c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d4a4:	4632      	mov	r2, r6
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	4798      	blx	r3
 800d4aa:	6923      	ldr	r3, [r4, #16]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	6123      	str	r3, [r4, #16]
 800d4b0:	4545      	cmp	r5, r8
 800d4b2:	d8f3      	bhi.n	800d49c <_scanf_float+0x340>
 800d4b4:	e698      	b.n	800d1e8 <_scanf_float+0x8c>
 800d4b6:	9b03      	ldr	r3, [sp, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d0bf      	beq.n	800d43c <_scanf_float+0x2e0>
 800d4bc:	9904      	ldr	r1, [sp, #16]
 800d4be:	230a      	movs	r3, #10
 800d4c0:	4632      	mov	r2, r6
 800d4c2:	3101      	adds	r1, #1
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	f000 ff33 	bl	800e330 <_strtol_r>
 800d4ca:	9b03      	ldr	r3, [sp, #12]
 800d4cc:	9d04      	ldr	r5, [sp, #16]
 800d4ce:	1ac2      	subs	r2, r0, r3
 800d4d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d4d4:	429d      	cmp	r5, r3
 800d4d6:	bf28      	it	cs
 800d4d8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d4dc:	490f      	ldr	r1, [pc, #60]	; (800d51c <_scanf_float+0x3c0>)
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f000 f868 	bl	800d5b4 <siprintf>
 800d4e4:	e7aa      	b.n	800d43c <_scanf_float+0x2e0>
 800d4e6:	f015 0504 	ands.w	r5, r5, #4
 800d4ea:	d1b8      	bne.n	800d45e <_scanf_float+0x302>
 800d4ec:	681f      	ldr	r7, [r3, #0]
 800d4ee:	ee10 2a10 	vmov	r2, s0
 800d4f2:	464b      	mov	r3, r9
 800d4f4:	ee10 0a10 	vmov	r0, s0
 800d4f8:	4649      	mov	r1, r9
 800d4fa:	f7f3 fb1f 	bl	8000b3c <__aeabi_dcmpun>
 800d4fe:	b128      	cbz	r0, 800d50c <_scanf_float+0x3b0>
 800d500:	4628      	mov	r0, r5
 800d502:	f000 f80d 	bl	800d520 <nanf>
 800d506:	ed87 0a00 	vstr	s0, [r7]
 800d50a:	e7ab      	b.n	800d464 <_scanf_float+0x308>
 800d50c:	4640      	mov	r0, r8
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f3 fb72 	bl	8000bf8 <__aeabi_d2f>
 800d514:	6038      	str	r0, [r7, #0]
 800d516:	e7a5      	b.n	800d464 <_scanf_float+0x308>
 800d518:	2600      	movs	r6, #0
 800d51a:	e666      	b.n	800d1ea <_scanf_float+0x8e>
 800d51c:	08010c4d 	.word	0x08010c4d

0800d520 <nanf>:
 800d520:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d528 <nanf+0x8>
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	7fc00000 	.word	0x7fc00000

0800d52c <_raise_r>:
 800d52c:	291f      	cmp	r1, #31
 800d52e:	b538      	push	{r3, r4, r5, lr}
 800d530:	4604      	mov	r4, r0
 800d532:	460d      	mov	r5, r1
 800d534:	d904      	bls.n	800d540 <_raise_r+0x14>
 800d536:	2316      	movs	r3, #22
 800d538:	6003      	str	r3, [r0, #0]
 800d53a:	f04f 30ff 	mov.w	r0, #4294967295
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d542:	b112      	cbz	r2, 800d54a <_raise_r+0x1e>
 800d544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d548:	b94b      	cbnz	r3, 800d55e <_raise_r+0x32>
 800d54a:	4620      	mov	r0, r4
 800d54c:	f000 f830 	bl	800d5b0 <_getpid_r>
 800d550:	462a      	mov	r2, r5
 800d552:	4601      	mov	r1, r0
 800d554:	4620      	mov	r0, r4
 800d556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d55a:	f000 b817 	b.w	800d58c <_kill_r>
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d00a      	beq.n	800d578 <_raise_r+0x4c>
 800d562:	1c59      	adds	r1, r3, #1
 800d564:	d103      	bne.n	800d56e <_raise_r+0x42>
 800d566:	2316      	movs	r3, #22
 800d568:	6003      	str	r3, [r0, #0]
 800d56a:	2001      	movs	r0, #1
 800d56c:	e7e7      	b.n	800d53e <_raise_r+0x12>
 800d56e:	2400      	movs	r4, #0
 800d570:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d574:	4628      	mov	r0, r5
 800d576:	4798      	blx	r3
 800d578:	2000      	movs	r0, #0
 800d57a:	e7e0      	b.n	800d53e <_raise_r+0x12>

0800d57c <raise>:
 800d57c:	4b02      	ldr	r3, [pc, #8]	; (800d588 <raise+0xc>)
 800d57e:	4601      	mov	r1, r0
 800d580:	6818      	ldr	r0, [r3, #0]
 800d582:	f7ff bfd3 	b.w	800d52c <_raise_r>
 800d586:	bf00      	nop
 800d588:	2000001c 	.word	0x2000001c

0800d58c <_kill_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	4c07      	ldr	r4, [pc, #28]	; (800d5ac <_kill_r+0x20>)
 800d590:	2300      	movs	r3, #0
 800d592:	4605      	mov	r5, r0
 800d594:	4608      	mov	r0, r1
 800d596:	4611      	mov	r1, r2
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	f7f5 fd2b 	bl	8002ff4 <_kill>
 800d59e:	1c43      	adds	r3, r0, #1
 800d5a0:	d102      	bne.n	800d5a8 <_kill_r+0x1c>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	b103      	cbz	r3, 800d5a8 <_kill_r+0x1c>
 800d5a6:	602b      	str	r3, [r5, #0]
 800d5a8:	bd38      	pop	{r3, r4, r5, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20003f1c 	.word	0x20003f1c

0800d5b0 <_getpid_r>:
 800d5b0:	f7f5 bd18 	b.w	8002fe4 <_getpid>

0800d5b4 <siprintf>:
 800d5b4:	b40e      	push	{r1, r2, r3}
 800d5b6:	b500      	push	{lr}
 800d5b8:	b09c      	sub	sp, #112	; 0x70
 800d5ba:	ab1d      	add	r3, sp, #116	; 0x74
 800d5bc:	9002      	str	r0, [sp, #8]
 800d5be:	9006      	str	r0, [sp, #24]
 800d5c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5c4:	4809      	ldr	r0, [pc, #36]	; (800d5ec <siprintf+0x38>)
 800d5c6:	9107      	str	r1, [sp, #28]
 800d5c8:	9104      	str	r1, [sp, #16]
 800d5ca:	4909      	ldr	r1, [pc, #36]	; (800d5f0 <siprintf+0x3c>)
 800d5cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5d0:	9105      	str	r1, [sp, #20]
 800d5d2:	6800      	ldr	r0, [r0, #0]
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	a902      	add	r1, sp, #8
 800d5d8:	f003 f82a 	bl	8010630 <_svfiprintf_r>
 800d5dc:	9b02      	ldr	r3, [sp, #8]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	b01c      	add	sp, #112	; 0x70
 800d5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5e8:	b003      	add	sp, #12
 800d5ea:	4770      	bx	lr
 800d5ec:	2000001c 	.word	0x2000001c
 800d5f0:	ffff0208 	.word	0xffff0208

0800d5f4 <sulp>:
 800d5f4:	b570      	push	{r4, r5, r6, lr}
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	460d      	mov	r5, r1
 800d5fa:	ec45 4b10 	vmov	d0, r4, r5
 800d5fe:	4616      	mov	r6, r2
 800d600:	f002 fdac 	bl	801015c <__ulp>
 800d604:	ec51 0b10 	vmov	r0, r1, d0
 800d608:	b17e      	cbz	r6, 800d62a <sulp+0x36>
 800d60a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d60e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d612:	2b00      	cmp	r3, #0
 800d614:	dd09      	ble.n	800d62a <sulp+0x36>
 800d616:	051b      	lsls	r3, r3, #20
 800d618:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d61c:	2400      	movs	r4, #0
 800d61e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d622:	4622      	mov	r2, r4
 800d624:	462b      	mov	r3, r5
 800d626:	f7f2 ffef 	bl	8000608 <__aeabi_dmul>
 800d62a:	bd70      	pop	{r4, r5, r6, pc}
 800d62c:	0000      	movs	r0, r0
	...

0800d630 <_strtod_l>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	461f      	mov	r7, r3
 800d636:	b0a1      	sub	sp, #132	; 0x84
 800d638:	2300      	movs	r3, #0
 800d63a:	4681      	mov	r9, r0
 800d63c:	4638      	mov	r0, r7
 800d63e:	460e      	mov	r6, r1
 800d640:	9217      	str	r2, [sp, #92]	; 0x5c
 800d642:	931c      	str	r3, [sp, #112]	; 0x70
 800d644:	f002 fa2f 	bl	800faa6 <__localeconv_l>
 800d648:	4680      	mov	r8, r0
 800d64a:	6800      	ldr	r0, [r0, #0]
 800d64c:	f7f2 fdc8 	bl	80001e0 <strlen>
 800d650:	f04f 0a00 	mov.w	sl, #0
 800d654:	4604      	mov	r4, r0
 800d656:	f04f 0b00 	mov.w	fp, #0
 800d65a:	961b      	str	r6, [sp, #108]	; 0x6c
 800d65c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d65e:	781a      	ldrb	r2, [r3, #0]
 800d660:	2a0d      	cmp	r2, #13
 800d662:	d832      	bhi.n	800d6ca <_strtod_l+0x9a>
 800d664:	2a09      	cmp	r2, #9
 800d666:	d236      	bcs.n	800d6d6 <_strtod_l+0xa6>
 800d668:	2a00      	cmp	r2, #0
 800d66a:	d03e      	beq.n	800d6ea <_strtod_l+0xba>
 800d66c:	2300      	movs	r3, #0
 800d66e:	930d      	str	r3, [sp, #52]	; 0x34
 800d670:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d672:	782b      	ldrb	r3, [r5, #0]
 800d674:	2b30      	cmp	r3, #48	; 0x30
 800d676:	f040 80ac 	bne.w	800d7d2 <_strtod_l+0x1a2>
 800d67a:	786b      	ldrb	r3, [r5, #1]
 800d67c:	2b58      	cmp	r3, #88	; 0x58
 800d67e:	d001      	beq.n	800d684 <_strtod_l+0x54>
 800d680:	2b78      	cmp	r3, #120	; 0x78
 800d682:	d167      	bne.n	800d754 <_strtod_l+0x124>
 800d684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	ab1c      	add	r3, sp, #112	; 0x70
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	9702      	str	r7, [sp, #8]
 800d68e:	ab1d      	add	r3, sp, #116	; 0x74
 800d690:	4a88      	ldr	r2, [pc, #544]	; (800d8b4 <_strtod_l+0x284>)
 800d692:	a91b      	add	r1, sp, #108	; 0x6c
 800d694:	4648      	mov	r0, r9
 800d696:	f001 ff2c 	bl	800f4f2 <__gethex>
 800d69a:	f010 0407 	ands.w	r4, r0, #7
 800d69e:	4606      	mov	r6, r0
 800d6a0:	d005      	beq.n	800d6ae <_strtod_l+0x7e>
 800d6a2:	2c06      	cmp	r4, #6
 800d6a4:	d12b      	bne.n	800d6fe <_strtod_l+0xce>
 800d6a6:	3501      	adds	r5, #1
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	951b      	str	r5, [sp, #108]	; 0x6c
 800d6ac:	930d      	str	r3, [sp, #52]	; 0x34
 800d6ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f040 859a 	bne.w	800e1ea <_strtod_l+0xbba>
 800d6b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6b8:	b1e3      	cbz	r3, 800d6f4 <_strtod_l+0xc4>
 800d6ba:	4652      	mov	r2, sl
 800d6bc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6c0:	ec43 2b10 	vmov	d0, r2, r3
 800d6c4:	b021      	add	sp, #132	; 0x84
 800d6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ca:	2a2b      	cmp	r2, #43	; 0x2b
 800d6cc:	d015      	beq.n	800d6fa <_strtod_l+0xca>
 800d6ce:	2a2d      	cmp	r2, #45	; 0x2d
 800d6d0:	d004      	beq.n	800d6dc <_strtod_l+0xac>
 800d6d2:	2a20      	cmp	r2, #32
 800d6d4:	d1ca      	bne.n	800d66c <_strtod_l+0x3c>
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	931b      	str	r3, [sp, #108]	; 0x6c
 800d6da:	e7bf      	b.n	800d65c <_strtod_l+0x2c>
 800d6dc:	2201      	movs	r2, #1
 800d6de:	920d      	str	r2, [sp, #52]	; 0x34
 800d6e0:	1c5a      	adds	r2, r3, #1
 800d6e2:	921b      	str	r2, [sp, #108]	; 0x6c
 800d6e4:	785b      	ldrb	r3, [r3, #1]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1c2      	bne.n	800d670 <_strtod_l+0x40>
 800d6ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6ec:	961b      	str	r6, [sp, #108]	; 0x6c
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f040 8579 	bne.w	800e1e6 <_strtod_l+0xbb6>
 800d6f4:	4652      	mov	r2, sl
 800d6f6:	465b      	mov	r3, fp
 800d6f8:	e7e2      	b.n	800d6c0 <_strtod_l+0x90>
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	e7ef      	b.n	800d6de <_strtod_l+0xae>
 800d6fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d700:	b13a      	cbz	r2, 800d712 <_strtod_l+0xe2>
 800d702:	2135      	movs	r1, #53	; 0x35
 800d704:	a81e      	add	r0, sp, #120	; 0x78
 800d706:	f002 fe21 	bl	801034c <__copybits>
 800d70a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d70c:	4648      	mov	r0, r9
 800d70e:	f002 fa8d 	bl	800fc2c <_Bfree>
 800d712:	3c01      	subs	r4, #1
 800d714:	2c04      	cmp	r4, #4
 800d716:	d806      	bhi.n	800d726 <_strtod_l+0xf6>
 800d718:	e8df f004 	tbb	[pc, r4]
 800d71c:	1714030a 	.word	0x1714030a
 800d720:	0a          	.byte	0x0a
 800d721:	00          	.byte	0x00
 800d722:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d726:	0730      	lsls	r0, r6, #28
 800d728:	d5c1      	bpl.n	800d6ae <_strtod_l+0x7e>
 800d72a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d72e:	e7be      	b.n	800d6ae <_strtod_l+0x7e>
 800d730:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d734:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d736:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d73a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d73e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d742:	e7f0      	b.n	800d726 <_strtod_l+0xf6>
 800d744:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d8b8 <_strtod_l+0x288>
 800d748:	e7ed      	b.n	800d726 <_strtod_l+0xf6>
 800d74a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d74e:	f04f 3aff 	mov.w	sl, #4294967295
 800d752:	e7e8      	b.n	800d726 <_strtod_l+0xf6>
 800d754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	921b      	str	r2, [sp, #108]	; 0x6c
 800d75a:	785b      	ldrb	r3, [r3, #1]
 800d75c:	2b30      	cmp	r3, #48	; 0x30
 800d75e:	d0f9      	beq.n	800d754 <_strtod_l+0x124>
 800d760:	2b00      	cmp	r3, #0
 800d762:	d0a4      	beq.n	800d6ae <_strtod_l+0x7e>
 800d764:	2301      	movs	r3, #1
 800d766:	2500      	movs	r5, #0
 800d768:	9306      	str	r3, [sp, #24]
 800d76a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d76c:	9308      	str	r3, [sp, #32]
 800d76e:	9507      	str	r5, [sp, #28]
 800d770:	9505      	str	r5, [sp, #20]
 800d772:	220a      	movs	r2, #10
 800d774:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d776:	7807      	ldrb	r7, [r0, #0]
 800d778:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d77c:	b2d9      	uxtb	r1, r3
 800d77e:	2909      	cmp	r1, #9
 800d780:	d929      	bls.n	800d7d6 <_strtod_l+0x1a6>
 800d782:	4622      	mov	r2, r4
 800d784:	f8d8 1000 	ldr.w	r1, [r8]
 800d788:	f003 f89d 	bl	80108c6 <strncmp>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	d031      	beq.n	800d7f4 <_strtod_l+0x1c4>
 800d790:	2000      	movs	r0, #0
 800d792:	9c05      	ldr	r4, [sp, #20]
 800d794:	9004      	str	r0, [sp, #16]
 800d796:	463b      	mov	r3, r7
 800d798:	4602      	mov	r2, r0
 800d79a:	2b65      	cmp	r3, #101	; 0x65
 800d79c:	d001      	beq.n	800d7a2 <_strtod_l+0x172>
 800d79e:	2b45      	cmp	r3, #69	; 0x45
 800d7a0:	d114      	bne.n	800d7cc <_strtod_l+0x19c>
 800d7a2:	b924      	cbnz	r4, 800d7ae <_strtod_l+0x17e>
 800d7a4:	b910      	cbnz	r0, 800d7ac <_strtod_l+0x17c>
 800d7a6:	9b06      	ldr	r3, [sp, #24]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d09e      	beq.n	800d6ea <_strtod_l+0xba>
 800d7ac:	2400      	movs	r4, #0
 800d7ae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d7b0:	1c73      	adds	r3, r6, #1
 800d7b2:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7b4:	7873      	ldrb	r3, [r6, #1]
 800d7b6:	2b2b      	cmp	r3, #43	; 0x2b
 800d7b8:	d078      	beq.n	800d8ac <_strtod_l+0x27c>
 800d7ba:	2b2d      	cmp	r3, #45	; 0x2d
 800d7bc:	d070      	beq.n	800d8a0 <_strtod_l+0x270>
 800d7be:	f04f 0c00 	mov.w	ip, #0
 800d7c2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d7c6:	2f09      	cmp	r7, #9
 800d7c8:	d97c      	bls.n	800d8c4 <_strtod_l+0x294>
 800d7ca:	961b      	str	r6, [sp, #108]	; 0x6c
 800d7cc:	f04f 0e00 	mov.w	lr, #0
 800d7d0:	e09a      	b.n	800d908 <_strtod_l+0x2d8>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e7c7      	b.n	800d766 <_strtod_l+0x136>
 800d7d6:	9905      	ldr	r1, [sp, #20]
 800d7d8:	2908      	cmp	r1, #8
 800d7da:	bfdd      	ittte	le
 800d7dc:	9907      	ldrle	r1, [sp, #28]
 800d7de:	fb02 3301 	mlale	r3, r2, r1, r3
 800d7e2:	9307      	strle	r3, [sp, #28]
 800d7e4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d7e8:	9b05      	ldr	r3, [sp, #20]
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	9305      	str	r3, [sp, #20]
 800d7f0:	901b      	str	r0, [sp, #108]	; 0x6c
 800d7f2:	e7bf      	b.n	800d774 <_strtod_l+0x144>
 800d7f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7f6:	191a      	adds	r2, r3, r4
 800d7f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800d7fa:	9a05      	ldr	r2, [sp, #20]
 800d7fc:	5d1b      	ldrb	r3, [r3, r4]
 800d7fe:	2a00      	cmp	r2, #0
 800d800:	d037      	beq.n	800d872 <_strtod_l+0x242>
 800d802:	9c05      	ldr	r4, [sp, #20]
 800d804:	4602      	mov	r2, r0
 800d806:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d80a:	2909      	cmp	r1, #9
 800d80c:	d913      	bls.n	800d836 <_strtod_l+0x206>
 800d80e:	2101      	movs	r1, #1
 800d810:	9104      	str	r1, [sp, #16]
 800d812:	e7c2      	b.n	800d79a <_strtod_l+0x16a>
 800d814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d816:	1c5a      	adds	r2, r3, #1
 800d818:	921b      	str	r2, [sp, #108]	; 0x6c
 800d81a:	785b      	ldrb	r3, [r3, #1]
 800d81c:	3001      	adds	r0, #1
 800d81e:	2b30      	cmp	r3, #48	; 0x30
 800d820:	d0f8      	beq.n	800d814 <_strtod_l+0x1e4>
 800d822:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d826:	2a08      	cmp	r2, #8
 800d828:	f200 84e4 	bhi.w	800e1f4 <_strtod_l+0xbc4>
 800d82c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d82e:	9208      	str	r2, [sp, #32]
 800d830:	4602      	mov	r2, r0
 800d832:	2000      	movs	r0, #0
 800d834:	4604      	mov	r4, r0
 800d836:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d83a:	f100 0101 	add.w	r1, r0, #1
 800d83e:	d012      	beq.n	800d866 <_strtod_l+0x236>
 800d840:	440a      	add	r2, r1
 800d842:	eb00 0c04 	add.w	ip, r0, r4
 800d846:	4621      	mov	r1, r4
 800d848:	270a      	movs	r7, #10
 800d84a:	458c      	cmp	ip, r1
 800d84c:	d113      	bne.n	800d876 <_strtod_l+0x246>
 800d84e:	1821      	adds	r1, r4, r0
 800d850:	2908      	cmp	r1, #8
 800d852:	f104 0401 	add.w	r4, r4, #1
 800d856:	4404      	add	r4, r0
 800d858:	dc19      	bgt.n	800d88e <_strtod_l+0x25e>
 800d85a:	9b07      	ldr	r3, [sp, #28]
 800d85c:	210a      	movs	r1, #10
 800d85e:	fb01 e303 	mla	r3, r1, r3, lr
 800d862:	9307      	str	r3, [sp, #28]
 800d864:	2100      	movs	r1, #0
 800d866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d868:	1c58      	adds	r0, r3, #1
 800d86a:	901b      	str	r0, [sp, #108]	; 0x6c
 800d86c:	785b      	ldrb	r3, [r3, #1]
 800d86e:	4608      	mov	r0, r1
 800d870:	e7c9      	b.n	800d806 <_strtod_l+0x1d6>
 800d872:	9805      	ldr	r0, [sp, #20]
 800d874:	e7d3      	b.n	800d81e <_strtod_l+0x1ee>
 800d876:	2908      	cmp	r1, #8
 800d878:	f101 0101 	add.w	r1, r1, #1
 800d87c:	dc03      	bgt.n	800d886 <_strtod_l+0x256>
 800d87e:	9b07      	ldr	r3, [sp, #28]
 800d880:	437b      	muls	r3, r7
 800d882:	9307      	str	r3, [sp, #28]
 800d884:	e7e1      	b.n	800d84a <_strtod_l+0x21a>
 800d886:	2910      	cmp	r1, #16
 800d888:	bfd8      	it	le
 800d88a:	437d      	mulle	r5, r7
 800d88c:	e7dd      	b.n	800d84a <_strtod_l+0x21a>
 800d88e:	2c10      	cmp	r4, #16
 800d890:	bfdc      	itt	le
 800d892:	210a      	movle	r1, #10
 800d894:	fb01 e505 	mlale	r5, r1, r5, lr
 800d898:	e7e4      	b.n	800d864 <_strtod_l+0x234>
 800d89a:	2301      	movs	r3, #1
 800d89c:	9304      	str	r3, [sp, #16]
 800d89e:	e781      	b.n	800d7a4 <_strtod_l+0x174>
 800d8a0:	f04f 0c01 	mov.w	ip, #1
 800d8a4:	1cb3      	adds	r3, r6, #2
 800d8a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800d8a8:	78b3      	ldrb	r3, [r6, #2]
 800d8aa:	e78a      	b.n	800d7c2 <_strtod_l+0x192>
 800d8ac:	f04f 0c00 	mov.w	ip, #0
 800d8b0:	e7f8      	b.n	800d8a4 <_strtod_l+0x274>
 800d8b2:	bf00      	nop
 800d8b4:	08010c54 	.word	0x08010c54
 800d8b8:	7ff00000 	.word	0x7ff00000
 800d8bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8be:	1c5f      	adds	r7, r3, #1
 800d8c0:	971b      	str	r7, [sp, #108]	; 0x6c
 800d8c2:	785b      	ldrb	r3, [r3, #1]
 800d8c4:	2b30      	cmp	r3, #48	; 0x30
 800d8c6:	d0f9      	beq.n	800d8bc <_strtod_l+0x28c>
 800d8c8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d8cc:	2f08      	cmp	r7, #8
 800d8ce:	f63f af7d 	bhi.w	800d7cc <_strtod_l+0x19c>
 800d8d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d8d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8d8:	930a      	str	r3, [sp, #40]	; 0x28
 800d8da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8dc:	1c5f      	adds	r7, r3, #1
 800d8de:	971b      	str	r7, [sp, #108]	; 0x6c
 800d8e0:	785b      	ldrb	r3, [r3, #1]
 800d8e2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d8e6:	f1b8 0f09 	cmp.w	r8, #9
 800d8ea:	d937      	bls.n	800d95c <_strtod_l+0x32c>
 800d8ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d8ee:	1a7f      	subs	r7, r7, r1
 800d8f0:	2f08      	cmp	r7, #8
 800d8f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d8f6:	dc37      	bgt.n	800d968 <_strtod_l+0x338>
 800d8f8:	45be      	cmp	lr, r7
 800d8fa:	bfa8      	it	ge
 800d8fc:	46be      	movge	lr, r7
 800d8fe:	f1bc 0f00 	cmp.w	ip, #0
 800d902:	d001      	beq.n	800d908 <_strtod_l+0x2d8>
 800d904:	f1ce 0e00 	rsb	lr, lr, #0
 800d908:	2c00      	cmp	r4, #0
 800d90a:	d151      	bne.n	800d9b0 <_strtod_l+0x380>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f47f aece 	bne.w	800d6ae <_strtod_l+0x7e>
 800d912:	9a06      	ldr	r2, [sp, #24]
 800d914:	2a00      	cmp	r2, #0
 800d916:	f47f aeca 	bne.w	800d6ae <_strtod_l+0x7e>
 800d91a:	9a04      	ldr	r2, [sp, #16]
 800d91c:	2a00      	cmp	r2, #0
 800d91e:	f47f aee4 	bne.w	800d6ea <_strtod_l+0xba>
 800d922:	2b4e      	cmp	r3, #78	; 0x4e
 800d924:	d027      	beq.n	800d976 <_strtod_l+0x346>
 800d926:	dc21      	bgt.n	800d96c <_strtod_l+0x33c>
 800d928:	2b49      	cmp	r3, #73	; 0x49
 800d92a:	f47f aede 	bne.w	800d6ea <_strtod_l+0xba>
 800d92e:	49a0      	ldr	r1, [pc, #640]	; (800dbb0 <_strtod_l+0x580>)
 800d930:	a81b      	add	r0, sp, #108	; 0x6c
 800d932:	f002 f811 	bl	800f958 <__match>
 800d936:	2800      	cmp	r0, #0
 800d938:	f43f aed7 	beq.w	800d6ea <_strtod_l+0xba>
 800d93c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d93e:	499d      	ldr	r1, [pc, #628]	; (800dbb4 <_strtod_l+0x584>)
 800d940:	3b01      	subs	r3, #1
 800d942:	a81b      	add	r0, sp, #108	; 0x6c
 800d944:	931b      	str	r3, [sp, #108]	; 0x6c
 800d946:	f002 f807 	bl	800f958 <__match>
 800d94a:	b910      	cbnz	r0, 800d952 <_strtod_l+0x322>
 800d94c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d94e:	3301      	adds	r3, #1
 800d950:	931b      	str	r3, [sp, #108]	; 0x6c
 800d952:	f8df b274 	ldr.w	fp, [pc, #628]	; 800dbc8 <_strtod_l+0x598>
 800d956:	f04f 0a00 	mov.w	sl, #0
 800d95a:	e6a8      	b.n	800d6ae <_strtod_l+0x7e>
 800d95c:	210a      	movs	r1, #10
 800d95e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d962:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d966:	e7b8      	b.n	800d8da <_strtod_l+0x2aa>
 800d968:	46be      	mov	lr, r7
 800d96a:	e7c8      	b.n	800d8fe <_strtod_l+0x2ce>
 800d96c:	2b69      	cmp	r3, #105	; 0x69
 800d96e:	d0de      	beq.n	800d92e <_strtod_l+0x2fe>
 800d970:	2b6e      	cmp	r3, #110	; 0x6e
 800d972:	f47f aeba 	bne.w	800d6ea <_strtod_l+0xba>
 800d976:	4990      	ldr	r1, [pc, #576]	; (800dbb8 <_strtod_l+0x588>)
 800d978:	a81b      	add	r0, sp, #108	; 0x6c
 800d97a:	f001 ffed 	bl	800f958 <__match>
 800d97e:	2800      	cmp	r0, #0
 800d980:	f43f aeb3 	beq.w	800d6ea <_strtod_l+0xba>
 800d984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b28      	cmp	r3, #40	; 0x28
 800d98a:	d10e      	bne.n	800d9aa <_strtod_l+0x37a>
 800d98c:	aa1e      	add	r2, sp, #120	; 0x78
 800d98e:	498b      	ldr	r1, [pc, #556]	; (800dbbc <_strtod_l+0x58c>)
 800d990:	a81b      	add	r0, sp, #108	; 0x6c
 800d992:	f001 fff5 	bl	800f980 <__hexnan>
 800d996:	2805      	cmp	r0, #5
 800d998:	d107      	bne.n	800d9aa <_strtod_l+0x37a>
 800d99a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d99c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d9a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d9a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d9a8:	e681      	b.n	800d6ae <_strtod_l+0x7e>
 800d9aa:	f8df b224 	ldr.w	fp, [pc, #548]	; 800dbd0 <_strtod_l+0x5a0>
 800d9ae:	e7d2      	b.n	800d956 <_strtod_l+0x326>
 800d9b0:	ebae 0302 	sub.w	r3, lr, r2
 800d9b4:	9306      	str	r3, [sp, #24]
 800d9b6:	9b05      	ldr	r3, [sp, #20]
 800d9b8:	9807      	ldr	r0, [sp, #28]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	bf08      	it	eq
 800d9be:	4623      	moveq	r3, r4
 800d9c0:	2c10      	cmp	r4, #16
 800d9c2:	9305      	str	r3, [sp, #20]
 800d9c4:	46a0      	mov	r8, r4
 800d9c6:	bfa8      	it	ge
 800d9c8:	f04f 0810 	movge.w	r8, #16
 800d9cc:	f7f2 fda2 	bl	8000514 <__aeabi_ui2d>
 800d9d0:	2c09      	cmp	r4, #9
 800d9d2:	4682      	mov	sl, r0
 800d9d4:	468b      	mov	fp, r1
 800d9d6:	dc13      	bgt.n	800da00 <_strtod_l+0x3d0>
 800d9d8:	9b06      	ldr	r3, [sp, #24]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f43f ae67 	beq.w	800d6ae <_strtod_l+0x7e>
 800d9e0:	9b06      	ldr	r3, [sp, #24]
 800d9e2:	dd7a      	ble.n	800dada <_strtod_l+0x4aa>
 800d9e4:	2b16      	cmp	r3, #22
 800d9e6:	dc61      	bgt.n	800daac <_strtod_l+0x47c>
 800d9e8:	4a75      	ldr	r2, [pc, #468]	; (800dbc0 <_strtod_l+0x590>)
 800d9ea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d9ee:	e9de 0100 	ldrd	r0, r1, [lr]
 800d9f2:	4652      	mov	r2, sl
 800d9f4:	465b      	mov	r3, fp
 800d9f6:	f7f2 fe07 	bl	8000608 <__aeabi_dmul>
 800d9fa:	4682      	mov	sl, r0
 800d9fc:	468b      	mov	fp, r1
 800d9fe:	e656      	b.n	800d6ae <_strtod_l+0x7e>
 800da00:	4b6f      	ldr	r3, [pc, #444]	; (800dbc0 <_strtod_l+0x590>)
 800da02:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800da06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800da0a:	f7f2 fdfd 	bl	8000608 <__aeabi_dmul>
 800da0e:	4606      	mov	r6, r0
 800da10:	4628      	mov	r0, r5
 800da12:	460f      	mov	r7, r1
 800da14:	f7f2 fd7e 	bl	8000514 <__aeabi_ui2d>
 800da18:	4602      	mov	r2, r0
 800da1a:	460b      	mov	r3, r1
 800da1c:	4630      	mov	r0, r6
 800da1e:	4639      	mov	r1, r7
 800da20:	f7f2 fc3c 	bl	800029c <__adddf3>
 800da24:	2c0f      	cmp	r4, #15
 800da26:	4682      	mov	sl, r0
 800da28:	468b      	mov	fp, r1
 800da2a:	ddd5      	ble.n	800d9d8 <_strtod_l+0x3a8>
 800da2c:	9b06      	ldr	r3, [sp, #24]
 800da2e:	eba4 0808 	sub.w	r8, r4, r8
 800da32:	4498      	add	r8, r3
 800da34:	f1b8 0f00 	cmp.w	r8, #0
 800da38:	f340 8096 	ble.w	800db68 <_strtod_l+0x538>
 800da3c:	f018 030f 	ands.w	r3, r8, #15
 800da40:	d00a      	beq.n	800da58 <_strtod_l+0x428>
 800da42:	495f      	ldr	r1, [pc, #380]	; (800dbc0 <_strtod_l+0x590>)
 800da44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da48:	4652      	mov	r2, sl
 800da4a:	465b      	mov	r3, fp
 800da4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da50:	f7f2 fdda 	bl	8000608 <__aeabi_dmul>
 800da54:	4682      	mov	sl, r0
 800da56:	468b      	mov	fp, r1
 800da58:	f038 080f 	bics.w	r8, r8, #15
 800da5c:	d073      	beq.n	800db46 <_strtod_l+0x516>
 800da5e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800da62:	dd47      	ble.n	800daf4 <_strtod_l+0x4c4>
 800da64:	2400      	movs	r4, #0
 800da66:	46a0      	mov	r8, r4
 800da68:	9407      	str	r4, [sp, #28]
 800da6a:	9405      	str	r4, [sp, #20]
 800da6c:	2322      	movs	r3, #34	; 0x22
 800da6e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800dbc8 <_strtod_l+0x598>
 800da72:	f8c9 3000 	str.w	r3, [r9]
 800da76:	f04f 0a00 	mov.w	sl, #0
 800da7a:	9b07      	ldr	r3, [sp, #28]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f43f ae16 	beq.w	800d6ae <_strtod_l+0x7e>
 800da82:	991c      	ldr	r1, [sp, #112]	; 0x70
 800da84:	4648      	mov	r0, r9
 800da86:	f002 f8d1 	bl	800fc2c <_Bfree>
 800da8a:	9905      	ldr	r1, [sp, #20]
 800da8c:	4648      	mov	r0, r9
 800da8e:	f002 f8cd 	bl	800fc2c <_Bfree>
 800da92:	4641      	mov	r1, r8
 800da94:	4648      	mov	r0, r9
 800da96:	f002 f8c9 	bl	800fc2c <_Bfree>
 800da9a:	9907      	ldr	r1, [sp, #28]
 800da9c:	4648      	mov	r0, r9
 800da9e:	f002 f8c5 	bl	800fc2c <_Bfree>
 800daa2:	4621      	mov	r1, r4
 800daa4:	4648      	mov	r0, r9
 800daa6:	f002 f8c1 	bl	800fc2c <_Bfree>
 800daaa:	e600      	b.n	800d6ae <_strtod_l+0x7e>
 800daac:	9a06      	ldr	r2, [sp, #24]
 800daae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800dab2:	4293      	cmp	r3, r2
 800dab4:	dbba      	blt.n	800da2c <_strtod_l+0x3fc>
 800dab6:	4d42      	ldr	r5, [pc, #264]	; (800dbc0 <_strtod_l+0x590>)
 800dab8:	f1c4 040f 	rsb	r4, r4, #15
 800dabc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800dac0:	4652      	mov	r2, sl
 800dac2:	465b      	mov	r3, fp
 800dac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dac8:	f7f2 fd9e 	bl	8000608 <__aeabi_dmul>
 800dacc:	9b06      	ldr	r3, [sp, #24]
 800dace:	1b1c      	subs	r4, r3, r4
 800dad0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800dad4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dad8:	e78d      	b.n	800d9f6 <_strtod_l+0x3c6>
 800dada:	f113 0f16 	cmn.w	r3, #22
 800dade:	dba5      	blt.n	800da2c <_strtod_l+0x3fc>
 800dae0:	4a37      	ldr	r2, [pc, #220]	; (800dbc0 <_strtod_l+0x590>)
 800dae2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800dae6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800daea:	4650      	mov	r0, sl
 800daec:	4659      	mov	r1, fp
 800daee:	f7f2 feb5 	bl	800085c <__aeabi_ddiv>
 800daf2:	e782      	b.n	800d9fa <_strtod_l+0x3ca>
 800daf4:	2300      	movs	r3, #0
 800daf6:	4e33      	ldr	r6, [pc, #204]	; (800dbc4 <_strtod_l+0x594>)
 800daf8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dafc:	4650      	mov	r0, sl
 800dafe:	4659      	mov	r1, fp
 800db00:	461d      	mov	r5, r3
 800db02:	f1b8 0f01 	cmp.w	r8, #1
 800db06:	dc21      	bgt.n	800db4c <_strtod_l+0x51c>
 800db08:	b10b      	cbz	r3, 800db0e <_strtod_l+0x4de>
 800db0a:	4682      	mov	sl, r0
 800db0c:	468b      	mov	fp, r1
 800db0e:	4b2d      	ldr	r3, [pc, #180]	; (800dbc4 <_strtod_l+0x594>)
 800db10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800db14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800db18:	4652      	mov	r2, sl
 800db1a:	465b      	mov	r3, fp
 800db1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800db20:	f7f2 fd72 	bl	8000608 <__aeabi_dmul>
 800db24:	4b28      	ldr	r3, [pc, #160]	; (800dbc8 <_strtod_l+0x598>)
 800db26:	460a      	mov	r2, r1
 800db28:	400b      	ands	r3, r1
 800db2a:	4928      	ldr	r1, [pc, #160]	; (800dbcc <_strtod_l+0x59c>)
 800db2c:	428b      	cmp	r3, r1
 800db2e:	4682      	mov	sl, r0
 800db30:	d898      	bhi.n	800da64 <_strtod_l+0x434>
 800db32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800db36:	428b      	cmp	r3, r1
 800db38:	bf86      	itte	hi
 800db3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800dbd4 <_strtod_l+0x5a4>
 800db3e:	f04f 3aff 	movhi.w	sl, #4294967295
 800db42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800db46:	2300      	movs	r3, #0
 800db48:	9304      	str	r3, [sp, #16]
 800db4a:	e077      	b.n	800dc3c <_strtod_l+0x60c>
 800db4c:	f018 0f01 	tst.w	r8, #1
 800db50:	d006      	beq.n	800db60 <_strtod_l+0x530>
 800db52:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	f7f2 fd55 	bl	8000608 <__aeabi_dmul>
 800db5e:	2301      	movs	r3, #1
 800db60:	3501      	adds	r5, #1
 800db62:	ea4f 0868 	mov.w	r8, r8, asr #1
 800db66:	e7cc      	b.n	800db02 <_strtod_l+0x4d2>
 800db68:	d0ed      	beq.n	800db46 <_strtod_l+0x516>
 800db6a:	f1c8 0800 	rsb	r8, r8, #0
 800db6e:	f018 020f 	ands.w	r2, r8, #15
 800db72:	d00a      	beq.n	800db8a <_strtod_l+0x55a>
 800db74:	4b12      	ldr	r3, [pc, #72]	; (800dbc0 <_strtod_l+0x590>)
 800db76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db7a:	4650      	mov	r0, sl
 800db7c:	4659      	mov	r1, fp
 800db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db82:	f7f2 fe6b 	bl	800085c <__aeabi_ddiv>
 800db86:	4682      	mov	sl, r0
 800db88:	468b      	mov	fp, r1
 800db8a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800db8e:	d0da      	beq.n	800db46 <_strtod_l+0x516>
 800db90:	f1b8 0f1f 	cmp.w	r8, #31
 800db94:	dd20      	ble.n	800dbd8 <_strtod_l+0x5a8>
 800db96:	2400      	movs	r4, #0
 800db98:	46a0      	mov	r8, r4
 800db9a:	9407      	str	r4, [sp, #28]
 800db9c:	9405      	str	r4, [sp, #20]
 800db9e:	2322      	movs	r3, #34	; 0x22
 800dba0:	f04f 0a00 	mov.w	sl, #0
 800dba4:	f04f 0b00 	mov.w	fp, #0
 800dba8:	f8c9 3000 	str.w	r3, [r9]
 800dbac:	e765      	b.n	800da7a <_strtod_l+0x44a>
 800dbae:	bf00      	nop
 800dbb0:	08010c1e 	.word	0x08010c1e
 800dbb4:	08010cab 	.word	0x08010cab
 800dbb8:	08010c26 	.word	0x08010c26
 800dbbc:	08010c68 	.word	0x08010c68
 800dbc0:	08010d50 	.word	0x08010d50
 800dbc4:	08010d28 	.word	0x08010d28
 800dbc8:	7ff00000 	.word	0x7ff00000
 800dbcc:	7ca00000 	.word	0x7ca00000
 800dbd0:	fff80000 	.word	0xfff80000
 800dbd4:	7fefffff 	.word	0x7fefffff
 800dbd8:	f018 0310 	ands.w	r3, r8, #16
 800dbdc:	bf18      	it	ne
 800dbde:	236a      	movne	r3, #106	; 0x6a
 800dbe0:	4da0      	ldr	r5, [pc, #640]	; (800de64 <_strtod_l+0x834>)
 800dbe2:	9304      	str	r3, [sp, #16]
 800dbe4:	4650      	mov	r0, sl
 800dbe6:	4659      	mov	r1, fp
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f1b8 0f00 	cmp.w	r8, #0
 800dbee:	f300 810a 	bgt.w	800de06 <_strtod_l+0x7d6>
 800dbf2:	b10b      	cbz	r3, 800dbf8 <_strtod_l+0x5c8>
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	468b      	mov	fp, r1
 800dbf8:	9b04      	ldr	r3, [sp, #16]
 800dbfa:	b1bb      	cbz	r3, 800dc2c <_strtod_l+0x5fc>
 800dbfc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800dc00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	4659      	mov	r1, fp
 800dc08:	dd10      	ble.n	800dc2c <_strtod_l+0x5fc>
 800dc0a:	2b1f      	cmp	r3, #31
 800dc0c:	f340 8107 	ble.w	800de1e <_strtod_l+0x7ee>
 800dc10:	2b34      	cmp	r3, #52	; 0x34
 800dc12:	bfde      	ittt	le
 800dc14:	3b20      	suble	r3, #32
 800dc16:	f04f 32ff 	movle.w	r2, #4294967295
 800dc1a:	fa02 f303 	lslle.w	r3, r2, r3
 800dc1e:	f04f 0a00 	mov.w	sl, #0
 800dc22:	bfcc      	ite	gt
 800dc24:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dc28:	ea03 0b01 	andle.w	fp, r3, r1
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2300      	movs	r3, #0
 800dc30:	4650      	mov	r0, sl
 800dc32:	4659      	mov	r1, fp
 800dc34:	f7f2 ff50 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d1ac      	bne.n	800db96 <_strtod_l+0x566>
 800dc3c:	9b07      	ldr	r3, [sp, #28]
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	9a05      	ldr	r2, [sp, #20]
 800dc42:	9908      	ldr	r1, [sp, #32]
 800dc44:	4623      	mov	r3, r4
 800dc46:	4648      	mov	r0, r9
 800dc48:	f002 f842 	bl	800fcd0 <__s2b>
 800dc4c:	9007      	str	r0, [sp, #28]
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	f43f af08 	beq.w	800da64 <_strtod_l+0x434>
 800dc54:	9a06      	ldr	r2, [sp, #24]
 800dc56:	9b06      	ldr	r3, [sp, #24]
 800dc58:	2a00      	cmp	r2, #0
 800dc5a:	f1c3 0300 	rsb	r3, r3, #0
 800dc5e:	bfa8      	it	ge
 800dc60:	2300      	movge	r3, #0
 800dc62:	930e      	str	r3, [sp, #56]	; 0x38
 800dc64:	2400      	movs	r4, #0
 800dc66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dc6a:	9316      	str	r3, [sp, #88]	; 0x58
 800dc6c:	46a0      	mov	r8, r4
 800dc6e:	9b07      	ldr	r3, [sp, #28]
 800dc70:	4648      	mov	r0, r9
 800dc72:	6859      	ldr	r1, [r3, #4]
 800dc74:	f001 ffa6 	bl	800fbc4 <_Balloc>
 800dc78:	9005      	str	r0, [sp, #20]
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f43f aef6 	beq.w	800da6c <_strtod_l+0x43c>
 800dc80:	9b07      	ldr	r3, [sp, #28]
 800dc82:	691a      	ldr	r2, [r3, #16]
 800dc84:	3202      	adds	r2, #2
 800dc86:	f103 010c 	add.w	r1, r3, #12
 800dc8a:	0092      	lsls	r2, r2, #2
 800dc8c:	300c      	adds	r0, #12
 800dc8e:	f7fe fc9d 	bl	800c5cc <memcpy>
 800dc92:	aa1e      	add	r2, sp, #120	; 0x78
 800dc94:	a91d      	add	r1, sp, #116	; 0x74
 800dc96:	ec4b ab10 	vmov	d0, sl, fp
 800dc9a:	4648      	mov	r0, r9
 800dc9c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800dca0:	f002 fad2 	bl	8010248 <__d2b>
 800dca4:	901c      	str	r0, [sp, #112]	; 0x70
 800dca6:	2800      	cmp	r0, #0
 800dca8:	f43f aee0 	beq.w	800da6c <_strtod_l+0x43c>
 800dcac:	2101      	movs	r1, #1
 800dcae:	4648      	mov	r0, r9
 800dcb0:	f002 f89a 	bl	800fde8 <__i2b>
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	f43f aed8 	beq.w	800da6c <_strtod_l+0x43c>
 800dcbc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800dcbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dcc0:	2e00      	cmp	r6, #0
 800dcc2:	bfab      	itete	ge
 800dcc4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800dcc6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800dcc8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800dcca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800dccc:	bfac      	ite	ge
 800dcce:	18f7      	addge	r7, r6, r3
 800dcd0:	1b9d      	sublt	r5, r3, r6
 800dcd2:	9b04      	ldr	r3, [sp, #16]
 800dcd4:	1af6      	subs	r6, r6, r3
 800dcd6:	4416      	add	r6, r2
 800dcd8:	4b63      	ldr	r3, [pc, #396]	; (800de68 <_strtod_l+0x838>)
 800dcda:	3e01      	subs	r6, #1
 800dcdc:	429e      	cmp	r6, r3
 800dcde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dce2:	f280 80af 	bge.w	800de44 <_strtod_l+0x814>
 800dce6:	1b9b      	subs	r3, r3, r6
 800dce8:	2b1f      	cmp	r3, #31
 800dcea:	eba2 0203 	sub.w	r2, r2, r3
 800dcee:	f04f 0101 	mov.w	r1, #1
 800dcf2:	f300 809b 	bgt.w	800de2c <_strtod_l+0x7fc>
 800dcf6:	fa01 f303 	lsl.w	r3, r1, r3
 800dcfa:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	930a      	str	r3, [sp, #40]	; 0x28
 800dd00:	18be      	adds	r6, r7, r2
 800dd02:	9b04      	ldr	r3, [sp, #16]
 800dd04:	42b7      	cmp	r7, r6
 800dd06:	4415      	add	r5, r2
 800dd08:	441d      	add	r5, r3
 800dd0a:	463b      	mov	r3, r7
 800dd0c:	bfa8      	it	ge
 800dd0e:	4633      	movge	r3, r6
 800dd10:	42ab      	cmp	r3, r5
 800dd12:	bfa8      	it	ge
 800dd14:	462b      	movge	r3, r5
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	bfc2      	ittt	gt
 800dd1a:	1af6      	subgt	r6, r6, r3
 800dd1c:	1aed      	subgt	r5, r5, r3
 800dd1e:	1aff      	subgt	r7, r7, r3
 800dd20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd22:	b1bb      	cbz	r3, 800dd54 <_strtod_l+0x724>
 800dd24:	4641      	mov	r1, r8
 800dd26:	461a      	mov	r2, r3
 800dd28:	4648      	mov	r0, r9
 800dd2a:	f002 f8fd 	bl	800ff28 <__pow5mult>
 800dd2e:	4680      	mov	r8, r0
 800dd30:	2800      	cmp	r0, #0
 800dd32:	f43f ae9b 	beq.w	800da6c <_strtod_l+0x43c>
 800dd36:	4601      	mov	r1, r0
 800dd38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dd3a:	4648      	mov	r0, r9
 800dd3c:	f002 f85d 	bl	800fdfa <__multiply>
 800dd40:	900c      	str	r0, [sp, #48]	; 0x30
 800dd42:	2800      	cmp	r0, #0
 800dd44:	f43f ae92 	beq.w	800da6c <_strtod_l+0x43c>
 800dd48:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dd4a:	4648      	mov	r0, r9
 800dd4c:	f001 ff6e 	bl	800fc2c <_Bfree>
 800dd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd52:	931c      	str	r3, [sp, #112]	; 0x70
 800dd54:	2e00      	cmp	r6, #0
 800dd56:	dc7a      	bgt.n	800de4e <_strtod_l+0x81e>
 800dd58:	9b06      	ldr	r3, [sp, #24]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	dd08      	ble.n	800dd70 <_strtod_l+0x740>
 800dd5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dd60:	9905      	ldr	r1, [sp, #20]
 800dd62:	4648      	mov	r0, r9
 800dd64:	f002 f8e0 	bl	800ff28 <__pow5mult>
 800dd68:	9005      	str	r0, [sp, #20]
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	f43f ae7e 	beq.w	800da6c <_strtod_l+0x43c>
 800dd70:	2d00      	cmp	r5, #0
 800dd72:	dd08      	ble.n	800dd86 <_strtod_l+0x756>
 800dd74:	462a      	mov	r2, r5
 800dd76:	9905      	ldr	r1, [sp, #20]
 800dd78:	4648      	mov	r0, r9
 800dd7a:	f002 f923 	bl	800ffc4 <__lshift>
 800dd7e:	9005      	str	r0, [sp, #20]
 800dd80:	2800      	cmp	r0, #0
 800dd82:	f43f ae73 	beq.w	800da6c <_strtod_l+0x43c>
 800dd86:	2f00      	cmp	r7, #0
 800dd88:	dd08      	ble.n	800dd9c <_strtod_l+0x76c>
 800dd8a:	4641      	mov	r1, r8
 800dd8c:	463a      	mov	r2, r7
 800dd8e:	4648      	mov	r0, r9
 800dd90:	f002 f918 	bl	800ffc4 <__lshift>
 800dd94:	4680      	mov	r8, r0
 800dd96:	2800      	cmp	r0, #0
 800dd98:	f43f ae68 	beq.w	800da6c <_strtod_l+0x43c>
 800dd9c:	9a05      	ldr	r2, [sp, #20]
 800dd9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dda0:	4648      	mov	r0, r9
 800dda2:	f002 f97d 	bl	80100a0 <__mdiff>
 800dda6:	4604      	mov	r4, r0
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	f43f ae5f 	beq.w	800da6c <_strtod_l+0x43c>
 800ddae:	68c3      	ldr	r3, [r0, #12]
 800ddb0:	930c      	str	r3, [sp, #48]	; 0x30
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60c3      	str	r3, [r0, #12]
 800ddb6:	4641      	mov	r1, r8
 800ddb8:	f002 f958 	bl	801006c <__mcmp>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	da55      	bge.n	800de6c <_strtod_l+0x83c>
 800ddc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddc2:	b9e3      	cbnz	r3, 800ddfe <_strtod_l+0x7ce>
 800ddc4:	f1ba 0f00 	cmp.w	sl, #0
 800ddc8:	d119      	bne.n	800ddfe <_strtod_l+0x7ce>
 800ddca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddce:	b9b3      	cbnz	r3, 800ddfe <_strtod_l+0x7ce>
 800ddd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ddd4:	0d1b      	lsrs	r3, r3, #20
 800ddd6:	051b      	lsls	r3, r3, #20
 800ddd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dddc:	d90f      	bls.n	800ddfe <_strtod_l+0x7ce>
 800ddde:	6963      	ldr	r3, [r4, #20]
 800dde0:	b913      	cbnz	r3, 800dde8 <_strtod_l+0x7b8>
 800dde2:	6923      	ldr	r3, [r4, #16]
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	dd0a      	ble.n	800ddfe <_strtod_l+0x7ce>
 800dde8:	4621      	mov	r1, r4
 800ddea:	2201      	movs	r2, #1
 800ddec:	4648      	mov	r0, r9
 800ddee:	f002 f8e9 	bl	800ffc4 <__lshift>
 800ddf2:	4641      	mov	r1, r8
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	f002 f939 	bl	801006c <__mcmp>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	dc67      	bgt.n	800dece <_strtod_l+0x89e>
 800ddfe:	9b04      	ldr	r3, [sp, #16]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d171      	bne.n	800dee8 <_strtod_l+0x8b8>
 800de04:	e63d      	b.n	800da82 <_strtod_l+0x452>
 800de06:	f018 0f01 	tst.w	r8, #1
 800de0a:	d004      	beq.n	800de16 <_strtod_l+0x7e6>
 800de0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de10:	f7f2 fbfa 	bl	8000608 <__aeabi_dmul>
 800de14:	2301      	movs	r3, #1
 800de16:	ea4f 0868 	mov.w	r8, r8, asr #1
 800de1a:	3508      	adds	r5, #8
 800de1c:	e6e5      	b.n	800dbea <_strtod_l+0x5ba>
 800de1e:	f04f 32ff 	mov.w	r2, #4294967295
 800de22:	fa02 f303 	lsl.w	r3, r2, r3
 800de26:	ea03 0a0a 	and.w	sl, r3, sl
 800de2a:	e6ff      	b.n	800dc2c <_strtod_l+0x5fc>
 800de2c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800de30:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800de34:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800de38:	36e2      	adds	r6, #226	; 0xe2
 800de3a:	fa01 f306 	lsl.w	r3, r1, r6
 800de3e:	930a      	str	r3, [sp, #40]	; 0x28
 800de40:	910f      	str	r1, [sp, #60]	; 0x3c
 800de42:	e75d      	b.n	800dd00 <_strtod_l+0x6d0>
 800de44:	2300      	movs	r3, #0
 800de46:	930a      	str	r3, [sp, #40]	; 0x28
 800de48:	2301      	movs	r3, #1
 800de4a:	930f      	str	r3, [sp, #60]	; 0x3c
 800de4c:	e758      	b.n	800dd00 <_strtod_l+0x6d0>
 800de4e:	4632      	mov	r2, r6
 800de50:	991c      	ldr	r1, [sp, #112]	; 0x70
 800de52:	4648      	mov	r0, r9
 800de54:	f002 f8b6 	bl	800ffc4 <__lshift>
 800de58:	901c      	str	r0, [sp, #112]	; 0x70
 800de5a:	2800      	cmp	r0, #0
 800de5c:	f47f af7c 	bne.w	800dd58 <_strtod_l+0x728>
 800de60:	e604      	b.n	800da6c <_strtod_l+0x43c>
 800de62:	bf00      	nop
 800de64:	08010c80 	.word	0x08010c80
 800de68:	fffffc02 	.word	0xfffffc02
 800de6c:	465d      	mov	r5, fp
 800de6e:	f040 8086 	bne.w	800df7e <_strtod_l+0x94e>
 800de72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de78:	b32a      	cbz	r2, 800dec6 <_strtod_l+0x896>
 800de7a:	4aaf      	ldr	r2, [pc, #700]	; (800e138 <_strtod_l+0xb08>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d153      	bne.n	800df28 <_strtod_l+0x8f8>
 800de80:	9b04      	ldr	r3, [sp, #16]
 800de82:	4650      	mov	r0, sl
 800de84:	b1d3      	cbz	r3, 800debc <_strtod_l+0x88c>
 800de86:	4aad      	ldr	r2, [pc, #692]	; (800e13c <_strtod_l+0xb0c>)
 800de88:	402a      	ands	r2, r5
 800de8a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800de8e:	f04f 31ff 	mov.w	r1, #4294967295
 800de92:	d816      	bhi.n	800dec2 <_strtod_l+0x892>
 800de94:	0d12      	lsrs	r2, r2, #20
 800de96:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800de9a:	fa01 f303 	lsl.w	r3, r1, r3
 800de9e:	4298      	cmp	r0, r3
 800dea0:	d142      	bne.n	800df28 <_strtod_l+0x8f8>
 800dea2:	4ba7      	ldr	r3, [pc, #668]	; (800e140 <_strtod_l+0xb10>)
 800dea4:	429d      	cmp	r5, r3
 800dea6:	d102      	bne.n	800deae <_strtod_l+0x87e>
 800dea8:	3001      	adds	r0, #1
 800deaa:	f43f addf 	beq.w	800da6c <_strtod_l+0x43c>
 800deae:	4ba3      	ldr	r3, [pc, #652]	; (800e13c <_strtod_l+0xb0c>)
 800deb0:	402b      	ands	r3, r5
 800deb2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800deb6:	f04f 0a00 	mov.w	sl, #0
 800deba:	e7a0      	b.n	800ddfe <_strtod_l+0x7ce>
 800debc:	f04f 33ff 	mov.w	r3, #4294967295
 800dec0:	e7ed      	b.n	800de9e <_strtod_l+0x86e>
 800dec2:	460b      	mov	r3, r1
 800dec4:	e7eb      	b.n	800de9e <_strtod_l+0x86e>
 800dec6:	bb7b      	cbnz	r3, 800df28 <_strtod_l+0x8f8>
 800dec8:	f1ba 0f00 	cmp.w	sl, #0
 800decc:	d12c      	bne.n	800df28 <_strtod_l+0x8f8>
 800dece:	9904      	ldr	r1, [sp, #16]
 800ded0:	4a9a      	ldr	r2, [pc, #616]	; (800e13c <_strtod_l+0xb0c>)
 800ded2:	465b      	mov	r3, fp
 800ded4:	b1f1      	cbz	r1, 800df14 <_strtod_l+0x8e4>
 800ded6:	ea02 010b 	and.w	r1, r2, fp
 800deda:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dede:	dc19      	bgt.n	800df14 <_strtod_l+0x8e4>
 800dee0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dee4:	f77f ae5b 	ble.w	800db9e <_strtod_l+0x56e>
 800dee8:	4a96      	ldr	r2, [pc, #600]	; (800e144 <_strtod_l+0xb14>)
 800deea:	2300      	movs	r3, #0
 800deec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800def0:	4650      	mov	r0, sl
 800def2:	4659      	mov	r1, fp
 800def4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800def8:	f7f2 fb86 	bl	8000608 <__aeabi_dmul>
 800defc:	4682      	mov	sl, r0
 800defe:	468b      	mov	fp, r1
 800df00:	2900      	cmp	r1, #0
 800df02:	f47f adbe 	bne.w	800da82 <_strtod_l+0x452>
 800df06:	2800      	cmp	r0, #0
 800df08:	f47f adbb 	bne.w	800da82 <_strtod_l+0x452>
 800df0c:	2322      	movs	r3, #34	; 0x22
 800df0e:	f8c9 3000 	str.w	r3, [r9]
 800df12:	e5b6      	b.n	800da82 <_strtod_l+0x452>
 800df14:	4013      	ands	r3, r2
 800df16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800df1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800df1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800df22:	f04f 3aff 	mov.w	sl, #4294967295
 800df26:	e76a      	b.n	800ddfe <_strtod_l+0x7ce>
 800df28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df2a:	b193      	cbz	r3, 800df52 <_strtod_l+0x922>
 800df2c:	422b      	tst	r3, r5
 800df2e:	f43f af66 	beq.w	800ddfe <_strtod_l+0x7ce>
 800df32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df34:	9a04      	ldr	r2, [sp, #16]
 800df36:	4650      	mov	r0, sl
 800df38:	4659      	mov	r1, fp
 800df3a:	b173      	cbz	r3, 800df5a <_strtod_l+0x92a>
 800df3c:	f7ff fb5a 	bl	800d5f4 <sulp>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df48:	f7f2 f9a8 	bl	800029c <__adddf3>
 800df4c:	4682      	mov	sl, r0
 800df4e:	468b      	mov	fp, r1
 800df50:	e755      	b.n	800ddfe <_strtod_l+0x7ce>
 800df52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df54:	ea13 0f0a 	tst.w	r3, sl
 800df58:	e7e9      	b.n	800df2e <_strtod_l+0x8fe>
 800df5a:	f7ff fb4b 	bl	800d5f4 <sulp>
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df66:	f7f2 f997 	bl	8000298 <__aeabi_dsub>
 800df6a:	2200      	movs	r2, #0
 800df6c:	2300      	movs	r3, #0
 800df6e:	4682      	mov	sl, r0
 800df70:	468b      	mov	fp, r1
 800df72:	f7f2 fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800df76:	2800      	cmp	r0, #0
 800df78:	f47f ae11 	bne.w	800db9e <_strtod_l+0x56e>
 800df7c:	e73f      	b.n	800ddfe <_strtod_l+0x7ce>
 800df7e:	4641      	mov	r1, r8
 800df80:	4620      	mov	r0, r4
 800df82:	f002 f9b0 	bl	80102e6 <__ratio>
 800df86:	ec57 6b10 	vmov	r6, r7, d0
 800df8a:	2200      	movs	r2, #0
 800df8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df90:	ee10 0a10 	vmov	r0, s0
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 fdb3 	bl	8000b00 <__aeabi_dcmple>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d077      	beq.n	800e08e <_strtod_l+0xa5e>
 800df9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d04a      	beq.n	800e03a <_strtod_l+0xa0a>
 800dfa4:	4b68      	ldr	r3, [pc, #416]	; (800e148 <_strtod_l+0xb18>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dfac:	4f66      	ldr	r7, [pc, #408]	; (800e148 <_strtod_l+0xb18>)
 800dfae:	2600      	movs	r6, #0
 800dfb0:	4b62      	ldr	r3, [pc, #392]	; (800e13c <_strtod_l+0xb0c>)
 800dfb2:	402b      	ands	r3, r5
 800dfb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dfb8:	4b64      	ldr	r3, [pc, #400]	; (800e14c <_strtod_l+0xb1c>)
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	f040 80ce 	bne.w	800e15c <_strtod_l+0xb2c>
 800dfc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dfc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfc8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800dfcc:	ec4b ab10 	vmov	d0, sl, fp
 800dfd0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800dfd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dfd8:	f002 f8c0 	bl	801015c <__ulp>
 800dfdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfe0:	ec53 2b10 	vmov	r2, r3, d0
 800dfe4:	f7f2 fb10 	bl	8000608 <__aeabi_dmul>
 800dfe8:	4652      	mov	r2, sl
 800dfea:	465b      	mov	r3, fp
 800dfec:	f7f2 f956 	bl	800029c <__adddf3>
 800dff0:	460b      	mov	r3, r1
 800dff2:	4952      	ldr	r1, [pc, #328]	; (800e13c <_strtod_l+0xb0c>)
 800dff4:	4a56      	ldr	r2, [pc, #344]	; (800e150 <_strtod_l+0xb20>)
 800dff6:	4019      	ands	r1, r3
 800dff8:	4291      	cmp	r1, r2
 800dffa:	4682      	mov	sl, r0
 800dffc:	d95b      	bls.n	800e0b6 <_strtod_l+0xa86>
 800dffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e000:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e004:	4293      	cmp	r3, r2
 800e006:	d103      	bne.n	800e010 <_strtod_l+0x9e0>
 800e008:	9b08      	ldr	r3, [sp, #32]
 800e00a:	3301      	adds	r3, #1
 800e00c:	f43f ad2e 	beq.w	800da6c <_strtod_l+0x43c>
 800e010:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800e140 <_strtod_l+0xb10>
 800e014:	f04f 3aff 	mov.w	sl, #4294967295
 800e018:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e01a:	4648      	mov	r0, r9
 800e01c:	f001 fe06 	bl	800fc2c <_Bfree>
 800e020:	9905      	ldr	r1, [sp, #20]
 800e022:	4648      	mov	r0, r9
 800e024:	f001 fe02 	bl	800fc2c <_Bfree>
 800e028:	4641      	mov	r1, r8
 800e02a:	4648      	mov	r0, r9
 800e02c:	f001 fdfe 	bl	800fc2c <_Bfree>
 800e030:	4621      	mov	r1, r4
 800e032:	4648      	mov	r0, r9
 800e034:	f001 fdfa 	bl	800fc2c <_Bfree>
 800e038:	e619      	b.n	800dc6e <_strtod_l+0x63e>
 800e03a:	f1ba 0f00 	cmp.w	sl, #0
 800e03e:	d11a      	bne.n	800e076 <_strtod_l+0xa46>
 800e040:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e044:	b9eb      	cbnz	r3, 800e082 <_strtod_l+0xa52>
 800e046:	2200      	movs	r2, #0
 800e048:	4b3f      	ldr	r3, [pc, #252]	; (800e148 <_strtod_l+0xb18>)
 800e04a:	4630      	mov	r0, r6
 800e04c:	4639      	mov	r1, r7
 800e04e:	f7f2 fd4d 	bl	8000aec <__aeabi_dcmplt>
 800e052:	b9c8      	cbnz	r0, 800e088 <_strtod_l+0xa58>
 800e054:	4630      	mov	r0, r6
 800e056:	4639      	mov	r1, r7
 800e058:	2200      	movs	r2, #0
 800e05a:	4b3e      	ldr	r3, [pc, #248]	; (800e154 <_strtod_l+0xb24>)
 800e05c:	f7f2 fad4 	bl	8000608 <__aeabi_dmul>
 800e060:	4606      	mov	r6, r0
 800e062:	460f      	mov	r7, r1
 800e064:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e068:	9618      	str	r6, [sp, #96]	; 0x60
 800e06a:	9319      	str	r3, [sp, #100]	; 0x64
 800e06c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800e070:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e074:	e79c      	b.n	800dfb0 <_strtod_l+0x980>
 800e076:	f1ba 0f01 	cmp.w	sl, #1
 800e07a:	d102      	bne.n	800e082 <_strtod_l+0xa52>
 800e07c:	2d00      	cmp	r5, #0
 800e07e:	f43f ad8e 	beq.w	800db9e <_strtod_l+0x56e>
 800e082:	2200      	movs	r2, #0
 800e084:	4b34      	ldr	r3, [pc, #208]	; (800e158 <_strtod_l+0xb28>)
 800e086:	e78f      	b.n	800dfa8 <_strtod_l+0x978>
 800e088:	2600      	movs	r6, #0
 800e08a:	4f32      	ldr	r7, [pc, #200]	; (800e154 <_strtod_l+0xb24>)
 800e08c:	e7ea      	b.n	800e064 <_strtod_l+0xa34>
 800e08e:	4b31      	ldr	r3, [pc, #196]	; (800e154 <_strtod_l+0xb24>)
 800e090:	4630      	mov	r0, r6
 800e092:	4639      	mov	r1, r7
 800e094:	2200      	movs	r2, #0
 800e096:	f7f2 fab7 	bl	8000608 <__aeabi_dmul>
 800e09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e09c:	4606      	mov	r6, r0
 800e09e:	460f      	mov	r7, r1
 800e0a0:	b933      	cbnz	r3, 800e0b0 <_strtod_l+0xa80>
 800e0a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0a6:	9010      	str	r0, [sp, #64]	; 0x40
 800e0a8:	9311      	str	r3, [sp, #68]	; 0x44
 800e0aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e0ae:	e7df      	b.n	800e070 <_strtod_l+0xa40>
 800e0b0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e0b4:	e7f9      	b.n	800e0aa <_strtod_l+0xa7a>
 800e0b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e0ba:	9b04      	ldr	r3, [sp, #16]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1ab      	bne.n	800e018 <_strtod_l+0x9e8>
 800e0c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e0c4:	0d1b      	lsrs	r3, r3, #20
 800e0c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0c8:	051b      	lsls	r3, r3, #20
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	465d      	mov	r5, fp
 800e0ce:	d1a3      	bne.n	800e018 <_strtod_l+0x9e8>
 800e0d0:	4639      	mov	r1, r7
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f7f2 fd48 	bl	8000b68 <__aeabi_d2iz>
 800e0d8:	f7f2 fa2c 	bl	8000534 <__aeabi_i2d>
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4602      	mov	r2, r0
 800e0e0:	4639      	mov	r1, r7
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	f7f2 f8d8 	bl	8000298 <__aeabi_dsub>
 800e0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	460f      	mov	r7, r1
 800e0ee:	b933      	cbnz	r3, 800e0fe <_strtod_l+0xace>
 800e0f0:	f1ba 0f00 	cmp.w	sl, #0
 800e0f4:	d103      	bne.n	800e0fe <_strtod_l+0xace>
 800e0f6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800e0fa:	2d00      	cmp	r5, #0
 800e0fc:	d06d      	beq.n	800e1da <_strtod_l+0xbaa>
 800e0fe:	a30a      	add	r3, pc, #40	; (adr r3, 800e128 <_strtod_l+0xaf8>)
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	4630      	mov	r0, r6
 800e106:	4639      	mov	r1, r7
 800e108:	f7f2 fcf0 	bl	8000aec <__aeabi_dcmplt>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	f47f acb8 	bne.w	800da82 <_strtod_l+0x452>
 800e112:	a307      	add	r3, pc, #28	; (adr r3, 800e130 <_strtod_l+0xb00>)
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	4630      	mov	r0, r6
 800e11a:	4639      	mov	r1, r7
 800e11c:	f7f2 fd04 	bl	8000b28 <__aeabi_dcmpgt>
 800e120:	2800      	cmp	r0, #0
 800e122:	f43f af79 	beq.w	800e018 <_strtod_l+0x9e8>
 800e126:	e4ac      	b.n	800da82 <_strtod_l+0x452>
 800e128:	94a03595 	.word	0x94a03595
 800e12c:	3fdfffff 	.word	0x3fdfffff
 800e130:	35afe535 	.word	0x35afe535
 800e134:	3fe00000 	.word	0x3fe00000
 800e138:	000fffff 	.word	0x000fffff
 800e13c:	7ff00000 	.word	0x7ff00000
 800e140:	7fefffff 	.word	0x7fefffff
 800e144:	39500000 	.word	0x39500000
 800e148:	3ff00000 	.word	0x3ff00000
 800e14c:	7fe00000 	.word	0x7fe00000
 800e150:	7c9fffff 	.word	0x7c9fffff
 800e154:	3fe00000 	.word	0x3fe00000
 800e158:	bff00000 	.word	0xbff00000
 800e15c:	9b04      	ldr	r3, [sp, #16]
 800e15e:	b333      	cbz	r3, 800e1ae <_strtod_l+0xb7e>
 800e160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e162:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e166:	d822      	bhi.n	800e1ae <_strtod_l+0xb7e>
 800e168:	a327      	add	r3, pc, #156	; (adr r3, 800e208 <_strtod_l+0xbd8>)
 800e16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16e:	4630      	mov	r0, r6
 800e170:	4639      	mov	r1, r7
 800e172:	f7f2 fcc5 	bl	8000b00 <__aeabi_dcmple>
 800e176:	b1a0      	cbz	r0, 800e1a2 <_strtod_l+0xb72>
 800e178:	4639      	mov	r1, r7
 800e17a:	4630      	mov	r0, r6
 800e17c:	f7f2 fd1c 	bl	8000bb8 <__aeabi_d2uiz>
 800e180:	2800      	cmp	r0, #0
 800e182:	bf08      	it	eq
 800e184:	2001      	moveq	r0, #1
 800e186:	f7f2 f9c5 	bl	8000514 <__aeabi_ui2d>
 800e18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e18c:	4606      	mov	r6, r0
 800e18e:	460f      	mov	r7, r1
 800e190:	bb03      	cbnz	r3, 800e1d4 <_strtod_l+0xba4>
 800e192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e196:	9012      	str	r0, [sp, #72]	; 0x48
 800e198:	9313      	str	r3, [sp, #76]	; 0x4c
 800e19a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e19e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e1aa:	1a9b      	subs	r3, r3, r2
 800e1ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e1b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800e1b6:	f001 ffd1 	bl	801015c <__ulp>
 800e1ba:	4650      	mov	r0, sl
 800e1bc:	ec53 2b10 	vmov	r2, r3, d0
 800e1c0:	4659      	mov	r1, fp
 800e1c2:	f7f2 fa21 	bl	8000608 <__aeabi_dmul>
 800e1c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e1ca:	f7f2 f867 	bl	800029c <__adddf3>
 800e1ce:	4682      	mov	sl, r0
 800e1d0:	468b      	mov	fp, r1
 800e1d2:	e772      	b.n	800e0ba <_strtod_l+0xa8a>
 800e1d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800e1d8:	e7df      	b.n	800e19a <_strtod_l+0xb6a>
 800e1da:	a30d      	add	r3, pc, #52	; (adr r3, 800e210 <_strtod_l+0xbe0>)
 800e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e0:	f7f2 fc84 	bl	8000aec <__aeabi_dcmplt>
 800e1e4:	e79c      	b.n	800e120 <_strtod_l+0xaf0>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	930d      	str	r3, [sp, #52]	; 0x34
 800e1ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e1ee:	6013      	str	r3, [r2, #0]
 800e1f0:	f7ff ba61 	b.w	800d6b6 <_strtod_l+0x86>
 800e1f4:	2b65      	cmp	r3, #101	; 0x65
 800e1f6:	f04f 0200 	mov.w	r2, #0
 800e1fa:	f43f ab4e 	beq.w	800d89a <_strtod_l+0x26a>
 800e1fe:	2101      	movs	r1, #1
 800e200:	4614      	mov	r4, r2
 800e202:	9104      	str	r1, [sp, #16]
 800e204:	f7ff bacb 	b.w	800d79e <_strtod_l+0x16e>
 800e208:	ffc00000 	.word	0xffc00000
 800e20c:	41dfffff 	.word	0x41dfffff
 800e210:	94a03595 	.word	0x94a03595
 800e214:	3fcfffff 	.word	0x3fcfffff

0800e218 <_strtod_r>:
 800e218:	4b05      	ldr	r3, [pc, #20]	; (800e230 <_strtod_r+0x18>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	b410      	push	{r4}
 800e21e:	6a1b      	ldr	r3, [r3, #32]
 800e220:	4c04      	ldr	r4, [pc, #16]	; (800e234 <_strtod_r+0x1c>)
 800e222:	2b00      	cmp	r3, #0
 800e224:	bf08      	it	eq
 800e226:	4623      	moveq	r3, r4
 800e228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e22c:	f7ff ba00 	b.w	800d630 <_strtod_l>
 800e230:	2000001c 	.word	0x2000001c
 800e234:	20000080 	.word	0x20000080

0800e238 <_strtol_l.isra.0>:
 800e238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e23c:	4680      	mov	r8, r0
 800e23e:	4689      	mov	r9, r1
 800e240:	4692      	mov	sl, r2
 800e242:	461e      	mov	r6, r3
 800e244:	460f      	mov	r7, r1
 800e246:	463d      	mov	r5, r7
 800e248:	9808      	ldr	r0, [sp, #32]
 800e24a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e24e:	f001 fc27 	bl	800faa0 <__locale_ctype_ptr_l>
 800e252:	4420      	add	r0, r4
 800e254:	7843      	ldrb	r3, [r0, #1]
 800e256:	f013 0308 	ands.w	r3, r3, #8
 800e25a:	d132      	bne.n	800e2c2 <_strtol_l.isra.0+0x8a>
 800e25c:	2c2d      	cmp	r4, #45	; 0x2d
 800e25e:	d132      	bne.n	800e2c6 <_strtol_l.isra.0+0x8e>
 800e260:	787c      	ldrb	r4, [r7, #1]
 800e262:	1cbd      	adds	r5, r7, #2
 800e264:	2201      	movs	r2, #1
 800e266:	2e00      	cmp	r6, #0
 800e268:	d05d      	beq.n	800e326 <_strtol_l.isra.0+0xee>
 800e26a:	2e10      	cmp	r6, #16
 800e26c:	d109      	bne.n	800e282 <_strtol_l.isra.0+0x4a>
 800e26e:	2c30      	cmp	r4, #48	; 0x30
 800e270:	d107      	bne.n	800e282 <_strtol_l.isra.0+0x4a>
 800e272:	782b      	ldrb	r3, [r5, #0]
 800e274:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e278:	2b58      	cmp	r3, #88	; 0x58
 800e27a:	d14f      	bne.n	800e31c <_strtol_l.isra.0+0xe4>
 800e27c:	786c      	ldrb	r4, [r5, #1]
 800e27e:	2610      	movs	r6, #16
 800e280:	3502      	adds	r5, #2
 800e282:	2a00      	cmp	r2, #0
 800e284:	bf14      	ite	ne
 800e286:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e28a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e28e:	2700      	movs	r7, #0
 800e290:	fbb1 fcf6 	udiv	ip, r1, r6
 800e294:	4638      	mov	r0, r7
 800e296:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e29a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e29e:	2b09      	cmp	r3, #9
 800e2a0:	d817      	bhi.n	800e2d2 <_strtol_l.isra.0+0x9a>
 800e2a2:	461c      	mov	r4, r3
 800e2a4:	42a6      	cmp	r6, r4
 800e2a6:	dd23      	ble.n	800e2f0 <_strtol_l.isra.0+0xb8>
 800e2a8:	1c7b      	adds	r3, r7, #1
 800e2aa:	d007      	beq.n	800e2bc <_strtol_l.isra.0+0x84>
 800e2ac:	4584      	cmp	ip, r0
 800e2ae:	d31c      	bcc.n	800e2ea <_strtol_l.isra.0+0xb2>
 800e2b0:	d101      	bne.n	800e2b6 <_strtol_l.isra.0+0x7e>
 800e2b2:	45a6      	cmp	lr, r4
 800e2b4:	db19      	blt.n	800e2ea <_strtol_l.isra.0+0xb2>
 800e2b6:	fb00 4006 	mla	r0, r0, r6, r4
 800e2ba:	2701      	movs	r7, #1
 800e2bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2c0:	e7eb      	b.n	800e29a <_strtol_l.isra.0+0x62>
 800e2c2:	462f      	mov	r7, r5
 800e2c4:	e7bf      	b.n	800e246 <_strtol_l.isra.0+0xe>
 800e2c6:	2c2b      	cmp	r4, #43	; 0x2b
 800e2c8:	bf04      	itt	eq
 800e2ca:	1cbd      	addeq	r5, r7, #2
 800e2cc:	787c      	ldrbeq	r4, [r7, #1]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	e7c9      	b.n	800e266 <_strtol_l.isra.0+0x2e>
 800e2d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e2d6:	2b19      	cmp	r3, #25
 800e2d8:	d801      	bhi.n	800e2de <_strtol_l.isra.0+0xa6>
 800e2da:	3c37      	subs	r4, #55	; 0x37
 800e2dc:	e7e2      	b.n	800e2a4 <_strtol_l.isra.0+0x6c>
 800e2de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e2e2:	2b19      	cmp	r3, #25
 800e2e4:	d804      	bhi.n	800e2f0 <_strtol_l.isra.0+0xb8>
 800e2e6:	3c57      	subs	r4, #87	; 0x57
 800e2e8:	e7dc      	b.n	800e2a4 <_strtol_l.isra.0+0x6c>
 800e2ea:	f04f 37ff 	mov.w	r7, #4294967295
 800e2ee:	e7e5      	b.n	800e2bc <_strtol_l.isra.0+0x84>
 800e2f0:	1c7b      	adds	r3, r7, #1
 800e2f2:	d108      	bne.n	800e306 <_strtol_l.isra.0+0xce>
 800e2f4:	2322      	movs	r3, #34	; 0x22
 800e2f6:	f8c8 3000 	str.w	r3, [r8]
 800e2fa:	4608      	mov	r0, r1
 800e2fc:	f1ba 0f00 	cmp.w	sl, #0
 800e300:	d107      	bne.n	800e312 <_strtol_l.isra.0+0xda>
 800e302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e306:	b102      	cbz	r2, 800e30a <_strtol_l.isra.0+0xd2>
 800e308:	4240      	negs	r0, r0
 800e30a:	f1ba 0f00 	cmp.w	sl, #0
 800e30e:	d0f8      	beq.n	800e302 <_strtol_l.isra.0+0xca>
 800e310:	b10f      	cbz	r7, 800e316 <_strtol_l.isra.0+0xde>
 800e312:	f105 39ff 	add.w	r9, r5, #4294967295
 800e316:	f8ca 9000 	str.w	r9, [sl]
 800e31a:	e7f2      	b.n	800e302 <_strtol_l.isra.0+0xca>
 800e31c:	2430      	movs	r4, #48	; 0x30
 800e31e:	2e00      	cmp	r6, #0
 800e320:	d1af      	bne.n	800e282 <_strtol_l.isra.0+0x4a>
 800e322:	2608      	movs	r6, #8
 800e324:	e7ad      	b.n	800e282 <_strtol_l.isra.0+0x4a>
 800e326:	2c30      	cmp	r4, #48	; 0x30
 800e328:	d0a3      	beq.n	800e272 <_strtol_l.isra.0+0x3a>
 800e32a:	260a      	movs	r6, #10
 800e32c:	e7a9      	b.n	800e282 <_strtol_l.isra.0+0x4a>
	...

0800e330 <_strtol_r>:
 800e330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e332:	4c06      	ldr	r4, [pc, #24]	; (800e34c <_strtol_r+0x1c>)
 800e334:	4d06      	ldr	r5, [pc, #24]	; (800e350 <_strtol_r+0x20>)
 800e336:	6824      	ldr	r4, [r4, #0]
 800e338:	6a24      	ldr	r4, [r4, #32]
 800e33a:	2c00      	cmp	r4, #0
 800e33c:	bf08      	it	eq
 800e33e:	462c      	moveq	r4, r5
 800e340:	9400      	str	r4, [sp, #0]
 800e342:	f7ff ff79 	bl	800e238 <_strtol_l.isra.0>
 800e346:	b003      	add	sp, #12
 800e348:	bd30      	pop	{r4, r5, pc}
 800e34a:	bf00      	nop
 800e34c:	2000001c 	.word	0x2000001c
 800e350:	20000080 	.word	0x20000080

0800e354 <__swbuf_r>:
 800e354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e356:	460e      	mov	r6, r1
 800e358:	4614      	mov	r4, r2
 800e35a:	4605      	mov	r5, r0
 800e35c:	b118      	cbz	r0, 800e366 <__swbuf_r+0x12>
 800e35e:	6983      	ldr	r3, [r0, #24]
 800e360:	b90b      	cbnz	r3, 800e366 <__swbuf_r+0x12>
 800e362:	f000 ffed 	bl	800f340 <__sinit>
 800e366:	4b21      	ldr	r3, [pc, #132]	; (800e3ec <__swbuf_r+0x98>)
 800e368:	429c      	cmp	r4, r3
 800e36a:	d12a      	bne.n	800e3c2 <__swbuf_r+0x6e>
 800e36c:	686c      	ldr	r4, [r5, #4]
 800e36e:	69a3      	ldr	r3, [r4, #24]
 800e370:	60a3      	str	r3, [r4, #8]
 800e372:	89a3      	ldrh	r3, [r4, #12]
 800e374:	071a      	lsls	r2, r3, #28
 800e376:	d52e      	bpl.n	800e3d6 <__swbuf_r+0x82>
 800e378:	6923      	ldr	r3, [r4, #16]
 800e37a:	b363      	cbz	r3, 800e3d6 <__swbuf_r+0x82>
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	6820      	ldr	r0, [r4, #0]
 800e380:	1ac0      	subs	r0, r0, r3
 800e382:	6963      	ldr	r3, [r4, #20]
 800e384:	b2f6      	uxtb	r6, r6
 800e386:	4283      	cmp	r3, r0
 800e388:	4637      	mov	r7, r6
 800e38a:	dc04      	bgt.n	800e396 <__swbuf_r+0x42>
 800e38c:	4621      	mov	r1, r4
 800e38e:	4628      	mov	r0, r5
 800e390:	f000 ff6c 	bl	800f26c <_fflush_r>
 800e394:	bb28      	cbnz	r0, 800e3e2 <__swbuf_r+0x8e>
 800e396:	68a3      	ldr	r3, [r4, #8]
 800e398:	3b01      	subs	r3, #1
 800e39a:	60a3      	str	r3, [r4, #8]
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	1c5a      	adds	r2, r3, #1
 800e3a0:	6022      	str	r2, [r4, #0]
 800e3a2:	701e      	strb	r6, [r3, #0]
 800e3a4:	6963      	ldr	r3, [r4, #20]
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	4283      	cmp	r3, r0
 800e3aa:	d004      	beq.n	800e3b6 <__swbuf_r+0x62>
 800e3ac:	89a3      	ldrh	r3, [r4, #12]
 800e3ae:	07db      	lsls	r3, r3, #31
 800e3b0:	d519      	bpl.n	800e3e6 <__swbuf_r+0x92>
 800e3b2:	2e0a      	cmp	r6, #10
 800e3b4:	d117      	bne.n	800e3e6 <__swbuf_r+0x92>
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	f000 ff57 	bl	800f26c <_fflush_r>
 800e3be:	b190      	cbz	r0, 800e3e6 <__swbuf_r+0x92>
 800e3c0:	e00f      	b.n	800e3e2 <__swbuf_r+0x8e>
 800e3c2:	4b0b      	ldr	r3, [pc, #44]	; (800e3f0 <__swbuf_r+0x9c>)
 800e3c4:	429c      	cmp	r4, r3
 800e3c6:	d101      	bne.n	800e3cc <__swbuf_r+0x78>
 800e3c8:	68ac      	ldr	r4, [r5, #8]
 800e3ca:	e7d0      	b.n	800e36e <__swbuf_r+0x1a>
 800e3cc:	4b09      	ldr	r3, [pc, #36]	; (800e3f4 <__swbuf_r+0xa0>)
 800e3ce:	429c      	cmp	r4, r3
 800e3d0:	bf08      	it	eq
 800e3d2:	68ec      	ldreq	r4, [r5, #12]
 800e3d4:	e7cb      	b.n	800e36e <__swbuf_r+0x1a>
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f000 f80d 	bl	800e3f8 <__swsetup_r>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d0cc      	beq.n	800e37c <__swbuf_r+0x28>
 800e3e2:	f04f 37ff 	mov.w	r7, #4294967295
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08010cd8 	.word	0x08010cd8
 800e3f0:	08010cf8 	.word	0x08010cf8
 800e3f4:	08010cb8 	.word	0x08010cb8

0800e3f8 <__swsetup_r>:
 800e3f8:	4b32      	ldr	r3, [pc, #200]	; (800e4c4 <__swsetup_r+0xcc>)
 800e3fa:	b570      	push	{r4, r5, r6, lr}
 800e3fc:	681d      	ldr	r5, [r3, #0]
 800e3fe:	4606      	mov	r6, r0
 800e400:	460c      	mov	r4, r1
 800e402:	b125      	cbz	r5, 800e40e <__swsetup_r+0x16>
 800e404:	69ab      	ldr	r3, [r5, #24]
 800e406:	b913      	cbnz	r3, 800e40e <__swsetup_r+0x16>
 800e408:	4628      	mov	r0, r5
 800e40a:	f000 ff99 	bl	800f340 <__sinit>
 800e40e:	4b2e      	ldr	r3, [pc, #184]	; (800e4c8 <__swsetup_r+0xd0>)
 800e410:	429c      	cmp	r4, r3
 800e412:	d10f      	bne.n	800e434 <__swsetup_r+0x3c>
 800e414:	686c      	ldr	r4, [r5, #4]
 800e416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e41a:	b29a      	uxth	r2, r3
 800e41c:	0715      	lsls	r5, r2, #28
 800e41e:	d42c      	bmi.n	800e47a <__swsetup_r+0x82>
 800e420:	06d0      	lsls	r0, r2, #27
 800e422:	d411      	bmi.n	800e448 <__swsetup_r+0x50>
 800e424:	2209      	movs	r2, #9
 800e426:	6032      	str	r2, [r6, #0]
 800e428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e42c:	81a3      	strh	r3, [r4, #12]
 800e42e:	f04f 30ff 	mov.w	r0, #4294967295
 800e432:	e03e      	b.n	800e4b2 <__swsetup_r+0xba>
 800e434:	4b25      	ldr	r3, [pc, #148]	; (800e4cc <__swsetup_r+0xd4>)
 800e436:	429c      	cmp	r4, r3
 800e438:	d101      	bne.n	800e43e <__swsetup_r+0x46>
 800e43a:	68ac      	ldr	r4, [r5, #8]
 800e43c:	e7eb      	b.n	800e416 <__swsetup_r+0x1e>
 800e43e:	4b24      	ldr	r3, [pc, #144]	; (800e4d0 <__swsetup_r+0xd8>)
 800e440:	429c      	cmp	r4, r3
 800e442:	bf08      	it	eq
 800e444:	68ec      	ldreq	r4, [r5, #12]
 800e446:	e7e6      	b.n	800e416 <__swsetup_r+0x1e>
 800e448:	0751      	lsls	r1, r2, #29
 800e44a:	d512      	bpl.n	800e472 <__swsetup_r+0x7a>
 800e44c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e44e:	b141      	cbz	r1, 800e462 <__swsetup_r+0x6a>
 800e450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e454:	4299      	cmp	r1, r3
 800e456:	d002      	beq.n	800e45e <__swsetup_r+0x66>
 800e458:	4630      	mov	r0, r6
 800e45a:	f001 ffc1 	bl	80103e0 <_free_r>
 800e45e:	2300      	movs	r3, #0
 800e460:	6363      	str	r3, [r4, #52]	; 0x34
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e468:	81a3      	strh	r3, [r4, #12]
 800e46a:	2300      	movs	r3, #0
 800e46c:	6063      	str	r3, [r4, #4]
 800e46e:	6923      	ldr	r3, [r4, #16]
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	89a3      	ldrh	r3, [r4, #12]
 800e474:	f043 0308 	orr.w	r3, r3, #8
 800e478:	81a3      	strh	r3, [r4, #12]
 800e47a:	6923      	ldr	r3, [r4, #16]
 800e47c:	b94b      	cbnz	r3, 800e492 <__swsetup_r+0x9a>
 800e47e:	89a3      	ldrh	r3, [r4, #12]
 800e480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e488:	d003      	beq.n	800e492 <__swsetup_r+0x9a>
 800e48a:	4621      	mov	r1, r4
 800e48c:	4630      	mov	r0, r6
 800e48e:	f001 fb3f 	bl	800fb10 <__smakebuf_r>
 800e492:	89a2      	ldrh	r2, [r4, #12]
 800e494:	f012 0301 	ands.w	r3, r2, #1
 800e498:	d00c      	beq.n	800e4b4 <__swsetup_r+0xbc>
 800e49a:	2300      	movs	r3, #0
 800e49c:	60a3      	str	r3, [r4, #8]
 800e49e:	6963      	ldr	r3, [r4, #20]
 800e4a0:	425b      	negs	r3, r3
 800e4a2:	61a3      	str	r3, [r4, #24]
 800e4a4:	6923      	ldr	r3, [r4, #16]
 800e4a6:	b953      	cbnz	r3, 800e4be <__swsetup_r+0xc6>
 800e4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e4b0:	d1ba      	bne.n	800e428 <__swsetup_r+0x30>
 800e4b2:	bd70      	pop	{r4, r5, r6, pc}
 800e4b4:	0792      	lsls	r2, r2, #30
 800e4b6:	bf58      	it	pl
 800e4b8:	6963      	ldrpl	r3, [r4, #20]
 800e4ba:	60a3      	str	r3, [r4, #8]
 800e4bc:	e7f2      	b.n	800e4a4 <__swsetup_r+0xac>
 800e4be:	2000      	movs	r0, #0
 800e4c0:	e7f7      	b.n	800e4b2 <__swsetup_r+0xba>
 800e4c2:	bf00      	nop
 800e4c4:	2000001c 	.word	0x2000001c
 800e4c8:	08010cd8 	.word	0x08010cd8
 800e4cc:	08010cf8 	.word	0x08010cf8
 800e4d0:	08010cb8 	.word	0x08010cb8

0800e4d4 <quorem>:
 800e4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	6903      	ldr	r3, [r0, #16]
 800e4da:	690c      	ldr	r4, [r1, #16]
 800e4dc:	42a3      	cmp	r3, r4
 800e4de:	4680      	mov	r8, r0
 800e4e0:	f2c0 8082 	blt.w	800e5e8 <quorem+0x114>
 800e4e4:	3c01      	subs	r4, #1
 800e4e6:	f101 0714 	add.w	r7, r1, #20
 800e4ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e4ee:	f100 0614 	add.w	r6, r0, #20
 800e4f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e4f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e4fa:	eb06 030c 	add.w	r3, r6, ip
 800e4fe:	3501      	adds	r5, #1
 800e500:	eb07 090c 	add.w	r9, r7, ip
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	fbb0 f5f5 	udiv	r5, r0, r5
 800e50a:	b395      	cbz	r5, 800e572 <quorem+0x9e>
 800e50c:	f04f 0a00 	mov.w	sl, #0
 800e510:	4638      	mov	r0, r7
 800e512:	46b6      	mov	lr, r6
 800e514:	46d3      	mov	fp, sl
 800e516:	f850 2b04 	ldr.w	r2, [r0], #4
 800e51a:	b293      	uxth	r3, r2
 800e51c:	fb05 a303 	mla	r3, r5, r3, sl
 800e520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e524:	b29b      	uxth	r3, r3
 800e526:	ebab 0303 	sub.w	r3, fp, r3
 800e52a:	0c12      	lsrs	r2, r2, #16
 800e52c:	f8de b000 	ldr.w	fp, [lr]
 800e530:	fb05 a202 	mla	r2, r5, r2, sl
 800e534:	fa13 f38b 	uxtah	r3, r3, fp
 800e538:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e53c:	fa1f fb82 	uxth.w	fp, r2
 800e540:	f8de 2000 	ldr.w	r2, [lr]
 800e544:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e548:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e552:	4581      	cmp	r9, r0
 800e554:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e558:	f84e 3b04 	str.w	r3, [lr], #4
 800e55c:	d2db      	bcs.n	800e516 <quorem+0x42>
 800e55e:	f856 300c 	ldr.w	r3, [r6, ip]
 800e562:	b933      	cbnz	r3, 800e572 <quorem+0x9e>
 800e564:	9b01      	ldr	r3, [sp, #4]
 800e566:	3b04      	subs	r3, #4
 800e568:	429e      	cmp	r6, r3
 800e56a:	461a      	mov	r2, r3
 800e56c:	d330      	bcc.n	800e5d0 <quorem+0xfc>
 800e56e:	f8c8 4010 	str.w	r4, [r8, #16]
 800e572:	4640      	mov	r0, r8
 800e574:	f001 fd7a 	bl	801006c <__mcmp>
 800e578:	2800      	cmp	r0, #0
 800e57a:	db25      	blt.n	800e5c8 <quorem+0xf4>
 800e57c:	3501      	adds	r5, #1
 800e57e:	4630      	mov	r0, r6
 800e580:	f04f 0c00 	mov.w	ip, #0
 800e584:	f857 2b04 	ldr.w	r2, [r7], #4
 800e588:	f8d0 e000 	ldr.w	lr, [r0]
 800e58c:	b293      	uxth	r3, r2
 800e58e:	ebac 0303 	sub.w	r3, ip, r3
 800e592:	0c12      	lsrs	r2, r2, #16
 800e594:	fa13 f38e 	uxtah	r3, r3, lr
 800e598:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e59c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5a6:	45b9      	cmp	r9, r7
 800e5a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e5ac:	f840 3b04 	str.w	r3, [r0], #4
 800e5b0:	d2e8      	bcs.n	800e584 <quorem+0xb0>
 800e5b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e5b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e5ba:	b92a      	cbnz	r2, 800e5c8 <quorem+0xf4>
 800e5bc:	3b04      	subs	r3, #4
 800e5be:	429e      	cmp	r6, r3
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	d30b      	bcc.n	800e5dc <quorem+0x108>
 800e5c4:	f8c8 4010 	str.w	r4, [r8, #16]
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	b003      	add	sp, #12
 800e5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d0:	6812      	ldr	r2, [r2, #0]
 800e5d2:	3b04      	subs	r3, #4
 800e5d4:	2a00      	cmp	r2, #0
 800e5d6:	d1ca      	bne.n	800e56e <quorem+0x9a>
 800e5d8:	3c01      	subs	r4, #1
 800e5da:	e7c5      	b.n	800e568 <quorem+0x94>
 800e5dc:	6812      	ldr	r2, [r2, #0]
 800e5de:	3b04      	subs	r3, #4
 800e5e0:	2a00      	cmp	r2, #0
 800e5e2:	d1ef      	bne.n	800e5c4 <quorem+0xf0>
 800e5e4:	3c01      	subs	r4, #1
 800e5e6:	e7ea      	b.n	800e5be <quorem+0xea>
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	e7ee      	b.n	800e5ca <quorem+0xf6>
 800e5ec:	0000      	movs	r0, r0
	...

0800e5f0 <_dtoa_r>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	ec57 6b10 	vmov	r6, r7, d0
 800e5f8:	b097      	sub	sp, #92	; 0x5c
 800e5fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e5fc:	9106      	str	r1, [sp, #24]
 800e5fe:	4604      	mov	r4, r0
 800e600:	920b      	str	r2, [sp, #44]	; 0x2c
 800e602:	9312      	str	r3, [sp, #72]	; 0x48
 800e604:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e608:	e9cd 6700 	strd	r6, r7, [sp]
 800e60c:	b93d      	cbnz	r5, 800e61e <_dtoa_r+0x2e>
 800e60e:	2010      	movs	r0, #16
 800e610:	f001 fabe 	bl	800fb90 <malloc>
 800e614:	6260      	str	r0, [r4, #36]	; 0x24
 800e616:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e61a:	6005      	str	r5, [r0, #0]
 800e61c:	60c5      	str	r5, [r0, #12]
 800e61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e620:	6819      	ldr	r1, [r3, #0]
 800e622:	b151      	cbz	r1, 800e63a <_dtoa_r+0x4a>
 800e624:	685a      	ldr	r2, [r3, #4]
 800e626:	604a      	str	r2, [r1, #4]
 800e628:	2301      	movs	r3, #1
 800e62a:	4093      	lsls	r3, r2
 800e62c:	608b      	str	r3, [r1, #8]
 800e62e:	4620      	mov	r0, r4
 800e630:	f001 fafc 	bl	800fc2c <_Bfree>
 800e634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e636:	2200      	movs	r2, #0
 800e638:	601a      	str	r2, [r3, #0]
 800e63a:	1e3b      	subs	r3, r7, #0
 800e63c:	bfbb      	ittet	lt
 800e63e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e642:	9301      	strlt	r3, [sp, #4]
 800e644:	2300      	movge	r3, #0
 800e646:	2201      	movlt	r2, #1
 800e648:	bfac      	ite	ge
 800e64a:	f8c8 3000 	strge.w	r3, [r8]
 800e64e:	f8c8 2000 	strlt.w	r2, [r8]
 800e652:	4baf      	ldr	r3, [pc, #700]	; (800e910 <_dtoa_r+0x320>)
 800e654:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e658:	ea33 0308 	bics.w	r3, r3, r8
 800e65c:	d114      	bne.n	800e688 <_dtoa_r+0x98>
 800e65e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e660:	f242 730f 	movw	r3, #9999	; 0x270f
 800e664:	6013      	str	r3, [r2, #0]
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	b923      	cbnz	r3, 800e674 <_dtoa_r+0x84>
 800e66a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e66e:	2800      	cmp	r0, #0
 800e670:	f000 8542 	beq.w	800f0f8 <_dtoa_r+0xb08>
 800e674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e676:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e924 <_dtoa_r+0x334>
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 8544 	beq.w	800f108 <_dtoa_r+0xb18>
 800e680:	f10b 0303 	add.w	r3, fp, #3
 800e684:	f000 bd3e 	b.w	800f104 <_dtoa_r+0xb14>
 800e688:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e68c:	2200      	movs	r2, #0
 800e68e:	2300      	movs	r3, #0
 800e690:	4630      	mov	r0, r6
 800e692:	4639      	mov	r1, r7
 800e694:	f7f2 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 800e698:	4681      	mov	r9, r0
 800e69a:	b168      	cbz	r0, 800e6b8 <_dtoa_r+0xc8>
 800e69c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e69e:	2301      	movs	r3, #1
 800e6a0:	6013      	str	r3, [r2, #0]
 800e6a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f000 8524 	beq.w	800f0f2 <_dtoa_r+0xb02>
 800e6aa:	4b9a      	ldr	r3, [pc, #616]	; (800e914 <_dtoa_r+0x324>)
 800e6ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e6ae:	f103 3bff 	add.w	fp, r3, #4294967295
 800e6b2:	6013      	str	r3, [r2, #0]
 800e6b4:	f000 bd28 	b.w	800f108 <_dtoa_r+0xb18>
 800e6b8:	aa14      	add	r2, sp, #80	; 0x50
 800e6ba:	a915      	add	r1, sp, #84	; 0x54
 800e6bc:	ec47 6b10 	vmov	d0, r6, r7
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f001 fdc1 	bl	8010248 <__d2b>
 800e6c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e6ca:	9004      	str	r0, [sp, #16]
 800e6cc:	2d00      	cmp	r5, #0
 800e6ce:	d07c      	beq.n	800e7ca <_dtoa_r+0x1da>
 800e6d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e6d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e6d8:	46b2      	mov	sl, r6
 800e6da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e6de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e6e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	4b8b      	ldr	r3, [pc, #556]	; (800e918 <_dtoa_r+0x328>)
 800e6ea:	4650      	mov	r0, sl
 800e6ec:	4659      	mov	r1, fp
 800e6ee:	f7f1 fdd3 	bl	8000298 <__aeabi_dsub>
 800e6f2:	a381      	add	r3, pc, #516	; (adr r3, 800e8f8 <_dtoa_r+0x308>)
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	f7f1 ff86 	bl	8000608 <__aeabi_dmul>
 800e6fc:	a380      	add	r3, pc, #512	; (adr r3, 800e900 <_dtoa_r+0x310>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	f7f1 fdcb 	bl	800029c <__adddf3>
 800e706:	4606      	mov	r6, r0
 800e708:	4628      	mov	r0, r5
 800e70a:	460f      	mov	r7, r1
 800e70c:	f7f1 ff12 	bl	8000534 <__aeabi_i2d>
 800e710:	a37d      	add	r3, pc, #500	; (adr r3, 800e908 <_dtoa_r+0x318>)
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	f7f1 ff77 	bl	8000608 <__aeabi_dmul>
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	4630      	mov	r0, r6
 800e720:	4639      	mov	r1, r7
 800e722:	f7f1 fdbb 	bl	800029c <__adddf3>
 800e726:	4606      	mov	r6, r0
 800e728:	460f      	mov	r7, r1
 800e72a:	f7f2 fa1d 	bl	8000b68 <__aeabi_d2iz>
 800e72e:	2200      	movs	r2, #0
 800e730:	4682      	mov	sl, r0
 800e732:	2300      	movs	r3, #0
 800e734:	4630      	mov	r0, r6
 800e736:	4639      	mov	r1, r7
 800e738:	f7f2 f9d8 	bl	8000aec <__aeabi_dcmplt>
 800e73c:	b148      	cbz	r0, 800e752 <_dtoa_r+0x162>
 800e73e:	4650      	mov	r0, sl
 800e740:	f7f1 fef8 	bl	8000534 <__aeabi_i2d>
 800e744:	4632      	mov	r2, r6
 800e746:	463b      	mov	r3, r7
 800e748:	f7f2 f9c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800e74c:	b908      	cbnz	r0, 800e752 <_dtoa_r+0x162>
 800e74e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e752:	f1ba 0f16 	cmp.w	sl, #22
 800e756:	d859      	bhi.n	800e80c <_dtoa_r+0x21c>
 800e758:	4970      	ldr	r1, [pc, #448]	; (800e91c <_dtoa_r+0x32c>)
 800e75a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e75e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e762:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e766:	f7f2 f9df 	bl	8000b28 <__aeabi_dcmpgt>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	d050      	beq.n	800e810 <_dtoa_r+0x220>
 800e76e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e772:	2300      	movs	r3, #0
 800e774:	930f      	str	r3, [sp, #60]	; 0x3c
 800e776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e778:	1b5d      	subs	r5, r3, r5
 800e77a:	f1b5 0801 	subs.w	r8, r5, #1
 800e77e:	bf49      	itett	mi
 800e780:	f1c5 0301 	rsbmi	r3, r5, #1
 800e784:	2300      	movpl	r3, #0
 800e786:	9305      	strmi	r3, [sp, #20]
 800e788:	f04f 0800 	movmi.w	r8, #0
 800e78c:	bf58      	it	pl
 800e78e:	9305      	strpl	r3, [sp, #20]
 800e790:	f1ba 0f00 	cmp.w	sl, #0
 800e794:	db3e      	blt.n	800e814 <_dtoa_r+0x224>
 800e796:	2300      	movs	r3, #0
 800e798:	44d0      	add	r8, sl
 800e79a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e79e:	9307      	str	r3, [sp, #28]
 800e7a0:	9b06      	ldr	r3, [sp, #24]
 800e7a2:	2b09      	cmp	r3, #9
 800e7a4:	f200 8090 	bhi.w	800e8c8 <_dtoa_r+0x2d8>
 800e7a8:	2b05      	cmp	r3, #5
 800e7aa:	bfc4      	itt	gt
 800e7ac:	3b04      	subgt	r3, #4
 800e7ae:	9306      	strgt	r3, [sp, #24]
 800e7b0:	9b06      	ldr	r3, [sp, #24]
 800e7b2:	f1a3 0302 	sub.w	r3, r3, #2
 800e7b6:	bfcc      	ite	gt
 800e7b8:	2500      	movgt	r5, #0
 800e7ba:	2501      	movle	r5, #1
 800e7bc:	2b03      	cmp	r3, #3
 800e7be:	f200 808f 	bhi.w	800e8e0 <_dtoa_r+0x2f0>
 800e7c2:	e8df f003 	tbb	[pc, r3]
 800e7c6:	7f7d      	.short	0x7f7d
 800e7c8:	7131      	.short	0x7131
 800e7ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e7ce:	441d      	add	r5, r3
 800e7d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e7d4:	2820      	cmp	r0, #32
 800e7d6:	dd13      	ble.n	800e800 <_dtoa_r+0x210>
 800e7d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e7dc:	9b00      	ldr	r3, [sp, #0]
 800e7de:	fa08 f800 	lsl.w	r8, r8, r0
 800e7e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e7e6:	fa23 f000 	lsr.w	r0, r3, r0
 800e7ea:	ea48 0000 	orr.w	r0, r8, r0
 800e7ee:	f7f1 fe91 	bl	8000514 <__aeabi_ui2d>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	4682      	mov	sl, r0
 800e7f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e7fa:	3d01      	subs	r5, #1
 800e7fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800e7fe:	e772      	b.n	800e6e6 <_dtoa_r+0xf6>
 800e800:	9b00      	ldr	r3, [sp, #0]
 800e802:	f1c0 0020 	rsb	r0, r0, #32
 800e806:	fa03 f000 	lsl.w	r0, r3, r0
 800e80a:	e7f0      	b.n	800e7ee <_dtoa_r+0x1fe>
 800e80c:	2301      	movs	r3, #1
 800e80e:	e7b1      	b.n	800e774 <_dtoa_r+0x184>
 800e810:	900f      	str	r0, [sp, #60]	; 0x3c
 800e812:	e7b0      	b.n	800e776 <_dtoa_r+0x186>
 800e814:	9b05      	ldr	r3, [sp, #20]
 800e816:	eba3 030a 	sub.w	r3, r3, sl
 800e81a:	9305      	str	r3, [sp, #20]
 800e81c:	f1ca 0300 	rsb	r3, sl, #0
 800e820:	9307      	str	r3, [sp, #28]
 800e822:	2300      	movs	r3, #0
 800e824:	930e      	str	r3, [sp, #56]	; 0x38
 800e826:	e7bb      	b.n	800e7a0 <_dtoa_r+0x1b0>
 800e828:	2301      	movs	r3, #1
 800e82a:	930a      	str	r3, [sp, #40]	; 0x28
 800e82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e82e:	2b00      	cmp	r3, #0
 800e830:	dd59      	ble.n	800e8e6 <_dtoa_r+0x2f6>
 800e832:	9302      	str	r3, [sp, #8]
 800e834:	4699      	mov	r9, r3
 800e836:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e838:	2200      	movs	r2, #0
 800e83a:	6072      	str	r2, [r6, #4]
 800e83c:	2204      	movs	r2, #4
 800e83e:	f102 0014 	add.w	r0, r2, #20
 800e842:	4298      	cmp	r0, r3
 800e844:	6871      	ldr	r1, [r6, #4]
 800e846:	d953      	bls.n	800e8f0 <_dtoa_r+0x300>
 800e848:	4620      	mov	r0, r4
 800e84a:	f001 f9bb 	bl	800fbc4 <_Balloc>
 800e84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e850:	6030      	str	r0, [r6, #0]
 800e852:	f1b9 0f0e 	cmp.w	r9, #14
 800e856:	f8d3 b000 	ldr.w	fp, [r3]
 800e85a:	f200 80e6 	bhi.w	800ea2a <_dtoa_r+0x43a>
 800e85e:	2d00      	cmp	r5, #0
 800e860:	f000 80e3 	beq.w	800ea2a <_dtoa_r+0x43a>
 800e864:	ed9d 7b00 	vldr	d7, [sp]
 800e868:	f1ba 0f00 	cmp.w	sl, #0
 800e86c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e870:	dd74      	ble.n	800e95c <_dtoa_r+0x36c>
 800e872:	4a2a      	ldr	r2, [pc, #168]	; (800e91c <_dtoa_r+0x32c>)
 800e874:	f00a 030f 	and.w	r3, sl, #15
 800e878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e87c:	ed93 7b00 	vldr	d7, [r3]
 800e880:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e884:	06f0      	lsls	r0, r6, #27
 800e886:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e88a:	d565      	bpl.n	800e958 <_dtoa_r+0x368>
 800e88c:	4b24      	ldr	r3, [pc, #144]	; (800e920 <_dtoa_r+0x330>)
 800e88e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e892:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e896:	f7f1 ffe1 	bl	800085c <__aeabi_ddiv>
 800e89a:	e9cd 0100 	strd	r0, r1, [sp]
 800e89e:	f006 060f 	and.w	r6, r6, #15
 800e8a2:	2503      	movs	r5, #3
 800e8a4:	4f1e      	ldr	r7, [pc, #120]	; (800e920 <_dtoa_r+0x330>)
 800e8a6:	e04c      	b.n	800e942 <_dtoa_r+0x352>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e8ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8ae:	4453      	add	r3, sl
 800e8b0:	f103 0901 	add.w	r9, r3, #1
 800e8b4:	9302      	str	r3, [sp, #8]
 800e8b6:	464b      	mov	r3, r9
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	bfb8      	it	lt
 800e8bc:	2301      	movlt	r3, #1
 800e8be:	e7ba      	b.n	800e836 <_dtoa_r+0x246>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	e7b2      	b.n	800e82a <_dtoa_r+0x23a>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	e7f0      	b.n	800e8aa <_dtoa_r+0x2ba>
 800e8c8:	2501      	movs	r5, #1
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	9306      	str	r3, [sp, #24]
 800e8ce:	950a      	str	r5, [sp, #40]	; 0x28
 800e8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d4:	9302      	str	r3, [sp, #8]
 800e8d6:	4699      	mov	r9, r3
 800e8d8:	2200      	movs	r2, #0
 800e8da:	2312      	movs	r3, #18
 800e8dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800e8de:	e7aa      	b.n	800e836 <_dtoa_r+0x246>
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	930a      	str	r3, [sp, #40]	; 0x28
 800e8e4:	e7f4      	b.n	800e8d0 <_dtoa_r+0x2e0>
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	9302      	str	r3, [sp, #8]
 800e8ea:	4699      	mov	r9, r3
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	e7f5      	b.n	800e8dc <_dtoa_r+0x2ec>
 800e8f0:	3101      	adds	r1, #1
 800e8f2:	6071      	str	r1, [r6, #4]
 800e8f4:	0052      	lsls	r2, r2, #1
 800e8f6:	e7a2      	b.n	800e83e <_dtoa_r+0x24e>
 800e8f8:	636f4361 	.word	0x636f4361
 800e8fc:	3fd287a7 	.word	0x3fd287a7
 800e900:	8b60c8b3 	.word	0x8b60c8b3
 800e904:	3fc68a28 	.word	0x3fc68a28
 800e908:	509f79fb 	.word	0x509f79fb
 800e90c:	3fd34413 	.word	0x3fd34413
 800e910:	7ff00000 	.word	0x7ff00000
 800e914:	08010c2a 	.word	0x08010c2a
 800e918:	3ff80000 	.word	0x3ff80000
 800e91c:	08010d50 	.word	0x08010d50
 800e920:	08010d28 	.word	0x08010d28
 800e924:	08010cb1 	.word	0x08010cb1
 800e928:	07f1      	lsls	r1, r6, #31
 800e92a:	d508      	bpl.n	800e93e <_dtoa_r+0x34e>
 800e92c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e930:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e934:	f7f1 fe68 	bl	8000608 <__aeabi_dmul>
 800e938:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e93c:	3501      	adds	r5, #1
 800e93e:	1076      	asrs	r6, r6, #1
 800e940:	3708      	adds	r7, #8
 800e942:	2e00      	cmp	r6, #0
 800e944:	d1f0      	bne.n	800e928 <_dtoa_r+0x338>
 800e946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e94a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e94e:	f7f1 ff85 	bl	800085c <__aeabi_ddiv>
 800e952:	e9cd 0100 	strd	r0, r1, [sp]
 800e956:	e01a      	b.n	800e98e <_dtoa_r+0x39e>
 800e958:	2502      	movs	r5, #2
 800e95a:	e7a3      	b.n	800e8a4 <_dtoa_r+0x2b4>
 800e95c:	f000 80a0 	beq.w	800eaa0 <_dtoa_r+0x4b0>
 800e960:	f1ca 0600 	rsb	r6, sl, #0
 800e964:	4b9f      	ldr	r3, [pc, #636]	; (800ebe4 <_dtoa_r+0x5f4>)
 800e966:	4fa0      	ldr	r7, [pc, #640]	; (800ebe8 <_dtoa_r+0x5f8>)
 800e968:	f006 020f 	and.w	r2, r6, #15
 800e96c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e974:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e978:	f7f1 fe46 	bl	8000608 <__aeabi_dmul>
 800e97c:	e9cd 0100 	strd	r0, r1, [sp]
 800e980:	1136      	asrs	r6, r6, #4
 800e982:	2300      	movs	r3, #0
 800e984:	2502      	movs	r5, #2
 800e986:	2e00      	cmp	r6, #0
 800e988:	d17f      	bne.n	800ea8a <_dtoa_r+0x49a>
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e1      	bne.n	800e952 <_dtoa_r+0x362>
 800e98e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e990:	2b00      	cmp	r3, #0
 800e992:	f000 8087 	beq.w	800eaa4 <_dtoa_r+0x4b4>
 800e996:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e99a:	2200      	movs	r2, #0
 800e99c:	4b93      	ldr	r3, [pc, #588]	; (800ebec <_dtoa_r+0x5fc>)
 800e99e:	4630      	mov	r0, r6
 800e9a0:	4639      	mov	r1, r7
 800e9a2:	f7f2 f8a3 	bl	8000aec <__aeabi_dcmplt>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d07c      	beq.n	800eaa4 <_dtoa_r+0x4b4>
 800e9aa:	f1b9 0f00 	cmp.w	r9, #0
 800e9ae:	d079      	beq.n	800eaa4 <_dtoa_r+0x4b4>
 800e9b0:	9b02      	ldr	r3, [sp, #8]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dd35      	ble.n	800ea22 <_dtoa_r+0x432>
 800e9b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e9ba:	9308      	str	r3, [sp, #32]
 800e9bc:	4639      	mov	r1, r7
 800e9be:	2200      	movs	r2, #0
 800e9c0:	4b8b      	ldr	r3, [pc, #556]	; (800ebf0 <_dtoa_r+0x600>)
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	f7f1 fe20 	bl	8000608 <__aeabi_dmul>
 800e9c8:	e9cd 0100 	strd	r0, r1, [sp]
 800e9cc:	9f02      	ldr	r7, [sp, #8]
 800e9ce:	3501      	adds	r5, #1
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	f7f1 fdaf 	bl	8000534 <__aeabi_i2d>
 800e9d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9da:	f7f1 fe15 	bl	8000608 <__aeabi_dmul>
 800e9de:	2200      	movs	r2, #0
 800e9e0:	4b84      	ldr	r3, [pc, #528]	; (800ebf4 <_dtoa_r+0x604>)
 800e9e2:	f7f1 fc5b 	bl	800029c <__adddf3>
 800e9e6:	4605      	mov	r5, r0
 800e9e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e9ec:	2f00      	cmp	r7, #0
 800e9ee:	d15d      	bne.n	800eaac <_dtoa_r+0x4bc>
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	4b81      	ldr	r3, [pc, #516]	; (800ebf8 <_dtoa_r+0x608>)
 800e9f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9f8:	f7f1 fc4e 	bl	8000298 <__aeabi_dsub>
 800e9fc:	462a      	mov	r2, r5
 800e9fe:	4633      	mov	r3, r6
 800ea00:	e9cd 0100 	strd	r0, r1, [sp]
 800ea04:	f7f2 f890 	bl	8000b28 <__aeabi_dcmpgt>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	f040 8288 	bne.w	800ef1e <_dtoa_r+0x92e>
 800ea0e:	462a      	mov	r2, r5
 800ea10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ea14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea18:	f7f2 f868 	bl	8000aec <__aeabi_dcmplt>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	f040 827c 	bne.w	800ef1a <_dtoa_r+0x92a>
 800ea22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ea26:	e9cd 2300 	strd	r2, r3, [sp]
 800ea2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f2c0 8150 	blt.w	800ecd2 <_dtoa_r+0x6e2>
 800ea32:	f1ba 0f0e 	cmp.w	sl, #14
 800ea36:	f300 814c 	bgt.w	800ecd2 <_dtoa_r+0x6e2>
 800ea3a:	4b6a      	ldr	r3, [pc, #424]	; (800ebe4 <_dtoa_r+0x5f4>)
 800ea3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ea40:	ed93 7b00 	vldr	d7, [r3]
 800ea44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ea4c:	f280 80d8 	bge.w	800ec00 <_dtoa_r+0x610>
 800ea50:	f1b9 0f00 	cmp.w	r9, #0
 800ea54:	f300 80d4 	bgt.w	800ec00 <_dtoa_r+0x610>
 800ea58:	f040 825e 	bne.w	800ef18 <_dtoa_r+0x928>
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	4b66      	ldr	r3, [pc, #408]	; (800ebf8 <_dtoa_r+0x608>)
 800ea60:	ec51 0b17 	vmov	r0, r1, d7
 800ea64:	f7f1 fdd0 	bl	8000608 <__aeabi_dmul>
 800ea68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea6c:	f7f2 f852 	bl	8000b14 <__aeabi_dcmpge>
 800ea70:	464f      	mov	r7, r9
 800ea72:	464e      	mov	r6, r9
 800ea74:	2800      	cmp	r0, #0
 800ea76:	f040 8234 	bne.w	800eee2 <_dtoa_r+0x8f2>
 800ea7a:	2331      	movs	r3, #49	; 0x31
 800ea7c:	f10b 0501 	add.w	r5, fp, #1
 800ea80:	f88b 3000 	strb.w	r3, [fp]
 800ea84:	f10a 0a01 	add.w	sl, sl, #1
 800ea88:	e22f      	b.n	800eeea <_dtoa_r+0x8fa>
 800ea8a:	07f2      	lsls	r2, r6, #31
 800ea8c:	d505      	bpl.n	800ea9a <_dtoa_r+0x4aa>
 800ea8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea92:	f7f1 fdb9 	bl	8000608 <__aeabi_dmul>
 800ea96:	3501      	adds	r5, #1
 800ea98:	2301      	movs	r3, #1
 800ea9a:	1076      	asrs	r6, r6, #1
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	e772      	b.n	800e986 <_dtoa_r+0x396>
 800eaa0:	2502      	movs	r5, #2
 800eaa2:	e774      	b.n	800e98e <_dtoa_r+0x39e>
 800eaa4:	f8cd a020 	str.w	sl, [sp, #32]
 800eaa8:	464f      	mov	r7, r9
 800eaaa:	e791      	b.n	800e9d0 <_dtoa_r+0x3e0>
 800eaac:	4b4d      	ldr	r3, [pc, #308]	; (800ebe4 <_dtoa_r+0x5f4>)
 800eaae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eab2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800eab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d047      	beq.n	800eb4c <_dtoa_r+0x55c>
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	2000      	movs	r0, #0
 800eac2:	494e      	ldr	r1, [pc, #312]	; (800ebfc <_dtoa_r+0x60c>)
 800eac4:	f7f1 feca 	bl	800085c <__aeabi_ddiv>
 800eac8:	462a      	mov	r2, r5
 800eaca:	4633      	mov	r3, r6
 800eacc:	f7f1 fbe4 	bl	8000298 <__aeabi_dsub>
 800ead0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ead4:	465d      	mov	r5, fp
 800ead6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eada:	f7f2 f845 	bl	8000b68 <__aeabi_d2iz>
 800eade:	4606      	mov	r6, r0
 800eae0:	f7f1 fd28 	bl	8000534 <__aeabi_i2d>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eaec:	f7f1 fbd4 	bl	8000298 <__aeabi_dsub>
 800eaf0:	3630      	adds	r6, #48	; 0x30
 800eaf2:	f805 6b01 	strb.w	r6, [r5], #1
 800eaf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eafa:	e9cd 0100 	strd	r0, r1, [sp]
 800eafe:	f7f1 fff5 	bl	8000aec <__aeabi_dcmplt>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d163      	bne.n	800ebce <_dtoa_r+0x5de>
 800eb06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	4937      	ldr	r1, [pc, #220]	; (800ebec <_dtoa_r+0x5fc>)
 800eb0e:	f7f1 fbc3 	bl	8000298 <__aeabi_dsub>
 800eb12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb16:	f7f1 ffe9 	bl	8000aec <__aeabi_dcmplt>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	f040 80b7 	bne.w	800ec8e <_dtoa_r+0x69e>
 800eb20:	eba5 030b 	sub.w	r3, r5, fp
 800eb24:	429f      	cmp	r7, r3
 800eb26:	f77f af7c 	ble.w	800ea22 <_dtoa_r+0x432>
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	4b30      	ldr	r3, [pc, #192]	; (800ebf0 <_dtoa_r+0x600>)
 800eb2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb32:	f7f1 fd69 	bl	8000608 <__aeabi_dmul>
 800eb36:	2200      	movs	r2, #0
 800eb38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eb3c:	4b2c      	ldr	r3, [pc, #176]	; (800ebf0 <_dtoa_r+0x600>)
 800eb3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb42:	f7f1 fd61 	bl	8000608 <__aeabi_dmul>
 800eb46:	e9cd 0100 	strd	r0, r1, [sp]
 800eb4a:	e7c4      	b.n	800ead6 <_dtoa_r+0x4e6>
 800eb4c:	462a      	mov	r2, r5
 800eb4e:	4633      	mov	r3, r6
 800eb50:	f7f1 fd5a 	bl	8000608 <__aeabi_dmul>
 800eb54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eb58:	eb0b 0507 	add.w	r5, fp, r7
 800eb5c:	465e      	mov	r6, fp
 800eb5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb62:	f7f2 f801 	bl	8000b68 <__aeabi_d2iz>
 800eb66:	4607      	mov	r7, r0
 800eb68:	f7f1 fce4 	bl	8000534 <__aeabi_i2d>
 800eb6c:	3730      	adds	r7, #48	; 0x30
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb76:	f7f1 fb8f 	bl	8000298 <__aeabi_dsub>
 800eb7a:	f806 7b01 	strb.w	r7, [r6], #1
 800eb7e:	42ae      	cmp	r6, r5
 800eb80:	e9cd 0100 	strd	r0, r1, [sp]
 800eb84:	f04f 0200 	mov.w	r2, #0
 800eb88:	d126      	bne.n	800ebd8 <_dtoa_r+0x5e8>
 800eb8a:	4b1c      	ldr	r3, [pc, #112]	; (800ebfc <_dtoa_r+0x60c>)
 800eb8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb90:	f7f1 fb84 	bl	800029c <__adddf3>
 800eb94:	4602      	mov	r2, r0
 800eb96:	460b      	mov	r3, r1
 800eb98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb9c:	f7f1 ffc4 	bl	8000b28 <__aeabi_dcmpgt>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d174      	bne.n	800ec8e <_dtoa_r+0x69e>
 800eba4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eba8:	2000      	movs	r0, #0
 800ebaa:	4914      	ldr	r1, [pc, #80]	; (800ebfc <_dtoa_r+0x60c>)
 800ebac:	f7f1 fb74 	bl	8000298 <__aeabi_dsub>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebb8:	f7f1 ff98 	bl	8000aec <__aeabi_dcmplt>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	f43f af30 	beq.w	800ea22 <_dtoa_r+0x432>
 800ebc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ebc6:	2b30      	cmp	r3, #48	; 0x30
 800ebc8:	f105 32ff 	add.w	r2, r5, #4294967295
 800ebcc:	d002      	beq.n	800ebd4 <_dtoa_r+0x5e4>
 800ebce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ebd2:	e04a      	b.n	800ec6a <_dtoa_r+0x67a>
 800ebd4:	4615      	mov	r5, r2
 800ebd6:	e7f4      	b.n	800ebc2 <_dtoa_r+0x5d2>
 800ebd8:	4b05      	ldr	r3, [pc, #20]	; (800ebf0 <_dtoa_r+0x600>)
 800ebda:	f7f1 fd15 	bl	8000608 <__aeabi_dmul>
 800ebde:	e9cd 0100 	strd	r0, r1, [sp]
 800ebe2:	e7bc      	b.n	800eb5e <_dtoa_r+0x56e>
 800ebe4:	08010d50 	.word	0x08010d50
 800ebe8:	08010d28 	.word	0x08010d28
 800ebec:	3ff00000 	.word	0x3ff00000
 800ebf0:	40240000 	.word	0x40240000
 800ebf4:	401c0000 	.word	0x401c0000
 800ebf8:	40140000 	.word	0x40140000
 800ebfc:	3fe00000 	.word	0x3fe00000
 800ec00:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ec04:	465d      	mov	r5, fp
 800ec06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec0a:	4630      	mov	r0, r6
 800ec0c:	4639      	mov	r1, r7
 800ec0e:	f7f1 fe25 	bl	800085c <__aeabi_ddiv>
 800ec12:	f7f1 ffa9 	bl	8000b68 <__aeabi_d2iz>
 800ec16:	4680      	mov	r8, r0
 800ec18:	f7f1 fc8c 	bl	8000534 <__aeabi_i2d>
 800ec1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec20:	f7f1 fcf2 	bl	8000608 <__aeabi_dmul>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4630      	mov	r0, r6
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ec30:	f7f1 fb32 	bl	8000298 <__aeabi_dsub>
 800ec34:	f805 6b01 	strb.w	r6, [r5], #1
 800ec38:	eba5 060b 	sub.w	r6, r5, fp
 800ec3c:	45b1      	cmp	r9, r6
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	d139      	bne.n	800ecb8 <_dtoa_r+0x6c8>
 800ec44:	f7f1 fb2a 	bl	800029c <__adddf3>
 800ec48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	460f      	mov	r7, r1
 800ec50:	f7f1 ff6a 	bl	8000b28 <__aeabi_dcmpgt>
 800ec54:	b9c8      	cbnz	r0, 800ec8a <_dtoa_r+0x69a>
 800ec56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	f7f1 ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec62:	b110      	cbz	r0, 800ec6a <_dtoa_r+0x67a>
 800ec64:	f018 0f01 	tst.w	r8, #1
 800ec68:	d10f      	bne.n	800ec8a <_dtoa_r+0x69a>
 800ec6a:	9904      	ldr	r1, [sp, #16]
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f000 ffdd 	bl	800fc2c <_Bfree>
 800ec72:	2300      	movs	r3, #0
 800ec74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ec76:	702b      	strb	r3, [r5, #0]
 800ec78:	f10a 0301 	add.w	r3, sl, #1
 800ec7c:	6013      	str	r3, [r2, #0]
 800ec7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f000 8241 	beq.w	800f108 <_dtoa_r+0xb18>
 800ec86:	601d      	str	r5, [r3, #0]
 800ec88:	e23e      	b.n	800f108 <_dtoa_r+0xb18>
 800ec8a:	f8cd a020 	str.w	sl, [sp, #32]
 800ec8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec92:	2a39      	cmp	r2, #57	; 0x39
 800ec94:	f105 33ff 	add.w	r3, r5, #4294967295
 800ec98:	d108      	bne.n	800ecac <_dtoa_r+0x6bc>
 800ec9a:	459b      	cmp	fp, r3
 800ec9c:	d10a      	bne.n	800ecb4 <_dtoa_r+0x6c4>
 800ec9e:	9b08      	ldr	r3, [sp, #32]
 800eca0:	3301      	adds	r3, #1
 800eca2:	9308      	str	r3, [sp, #32]
 800eca4:	2330      	movs	r3, #48	; 0x30
 800eca6:	f88b 3000 	strb.w	r3, [fp]
 800ecaa:	465b      	mov	r3, fp
 800ecac:	781a      	ldrb	r2, [r3, #0]
 800ecae:	3201      	adds	r2, #1
 800ecb0:	701a      	strb	r2, [r3, #0]
 800ecb2:	e78c      	b.n	800ebce <_dtoa_r+0x5de>
 800ecb4:	461d      	mov	r5, r3
 800ecb6:	e7ea      	b.n	800ec8e <_dtoa_r+0x69e>
 800ecb8:	2200      	movs	r2, #0
 800ecba:	4b9b      	ldr	r3, [pc, #620]	; (800ef28 <_dtoa_r+0x938>)
 800ecbc:	f7f1 fca4 	bl	8000608 <__aeabi_dmul>
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	460f      	mov	r7, r1
 800ecc8:	f7f1 ff06 	bl	8000ad8 <__aeabi_dcmpeq>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d09a      	beq.n	800ec06 <_dtoa_r+0x616>
 800ecd0:	e7cb      	b.n	800ec6a <_dtoa_r+0x67a>
 800ecd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecd4:	2a00      	cmp	r2, #0
 800ecd6:	f000 808b 	beq.w	800edf0 <_dtoa_r+0x800>
 800ecda:	9a06      	ldr	r2, [sp, #24]
 800ecdc:	2a01      	cmp	r2, #1
 800ecde:	dc6e      	bgt.n	800edbe <_dtoa_r+0x7ce>
 800ece0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ece2:	2a00      	cmp	r2, #0
 800ece4:	d067      	beq.n	800edb6 <_dtoa_r+0x7c6>
 800ece6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ecea:	9f07      	ldr	r7, [sp, #28]
 800ecec:	9d05      	ldr	r5, [sp, #20]
 800ecee:	9a05      	ldr	r2, [sp, #20]
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	441a      	add	r2, r3
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	9205      	str	r2, [sp, #20]
 800ecf8:	4498      	add	r8, r3
 800ecfa:	f001 f875 	bl	800fde8 <__i2b>
 800ecfe:	4606      	mov	r6, r0
 800ed00:	2d00      	cmp	r5, #0
 800ed02:	dd0c      	ble.n	800ed1e <_dtoa_r+0x72e>
 800ed04:	f1b8 0f00 	cmp.w	r8, #0
 800ed08:	dd09      	ble.n	800ed1e <_dtoa_r+0x72e>
 800ed0a:	4545      	cmp	r5, r8
 800ed0c:	9a05      	ldr	r2, [sp, #20]
 800ed0e:	462b      	mov	r3, r5
 800ed10:	bfa8      	it	ge
 800ed12:	4643      	movge	r3, r8
 800ed14:	1ad2      	subs	r2, r2, r3
 800ed16:	9205      	str	r2, [sp, #20]
 800ed18:	1aed      	subs	r5, r5, r3
 800ed1a:	eba8 0803 	sub.w	r8, r8, r3
 800ed1e:	9b07      	ldr	r3, [sp, #28]
 800ed20:	b1eb      	cbz	r3, 800ed5e <_dtoa_r+0x76e>
 800ed22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d067      	beq.n	800edf8 <_dtoa_r+0x808>
 800ed28:	b18f      	cbz	r7, 800ed4e <_dtoa_r+0x75e>
 800ed2a:	4631      	mov	r1, r6
 800ed2c:	463a      	mov	r2, r7
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f001 f8fa 	bl	800ff28 <__pow5mult>
 800ed34:	9a04      	ldr	r2, [sp, #16]
 800ed36:	4601      	mov	r1, r0
 800ed38:	4606      	mov	r6, r0
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f001 f85d 	bl	800fdfa <__multiply>
 800ed40:	9904      	ldr	r1, [sp, #16]
 800ed42:	9008      	str	r0, [sp, #32]
 800ed44:	4620      	mov	r0, r4
 800ed46:	f000 ff71 	bl	800fc2c <_Bfree>
 800ed4a:	9b08      	ldr	r3, [sp, #32]
 800ed4c:	9304      	str	r3, [sp, #16]
 800ed4e:	9b07      	ldr	r3, [sp, #28]
 800ed50:	1bda      	subs	r2, r3, r7
 800ed52:	d004      	beq.n	800ed5e <_dtoa_r+0x76e>
 800ed54:	9904      	ldr	r1, [sp, #16]
 800ed56:	4620      	mov	r0, r4
 800ed58:	f001 f8e6 	bl	800ff28 <__pow5mult>
 800ed5c:	9004      	str	r0, [sp, #16]
 800ed5e:	2101      	movs	r1, #1
 800ed60:	4620      	mov	r0, r4
 800ed62:	f001 f841 	bl	800fde8 <__i2b>
 800ed66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed68:	4607      	mov	r7, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 81d0 	beq.w	800f110 <_dtoa_r+0xb20>
 800ed70:	461a      	mov	r2, r3
 800ed72:	4601      	mov	r1, r0
 800ed74:	4620      	mov	r0, r4
 800ed76:	f001 f8d7 	bl	800ff28 <__pow5mult>
 800ed7a:	9b06      	ldr	r3, [sp, #24]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	4607      	mov	r7, r0
 800ed80:	dc40      	bgt.n	800ee04 <_dtoa_r+0x814>
 800ed82:	9b00      	ldr	r3, [sp, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d139      	bne.n	800edfc <_dtoa_r+0x80c>
 800ed88:	9b01      	ldr	r3, [sp, #4]
 800ed8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d136      	bne.n	800ee00 <_dtoa_r+0x810>
 800ed92:	9b01      	ldr	r3, [sp, #4]
 800ed94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed98:	0d1b      	lsrs	r3, r3, #20
 800ed9a:	051b      	lsls	r3, r3, #20
 800ed9c:	b12b      	cbz	r3, 800edaa <_dtoa_r+0x7ba>
 800ed9e:	9b05      	ldr	r3, [sp, #20]
 800eda0:	3301      	adds	r3, #1
 800eda2:	9305      	str	r3, [sp, #20]
 800eda4:	f108 0801 	add.w	r8, r8, #1
 800eda8:	2301      	movs	r3, #1
 800edaa:	9307      	str	r3, [sp, #28]
 800edac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d12a      	bne.n	800ee08 <_dtoa_r+0x818>
 800edb2:	2001      	movs	r0, #1
 800edb4:	e030      	b.n	800ee18 <_dtoa_r+0x828>
 800edb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800edb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800edbc:	e795      	b.n	800ecea <_dtoa_r+0x6fa>
 800edbe:	9b07      	ldr	r3, [sp, #28]
 800edc0:	f109 37ff 	add.w	r7, r9, #4294967295
 800edc4:	42bb      	cmp	r3, r7
 800edc6:	bfbf      	itttt	lt
 800edc8:	9b07      	ldrlt	r3, [sp, #28]
 800edca:	9707      	strlt	r7, [sp, #28]
 800edcc:	1afa      	sublt	r2, r7, r3
 800edce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800edd0:	bfbb      	ittet	lt
 800edd2:	189b      	addlt	r3, r3, r2
 800edd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800edd6:	1bdf      	subge	r7, r3, r7
 800edd8:	2700      	movlt	r7, #0
 800edda:	f1b9 0f00 	cmp.w	r9, #0
 800edde:	bfb5      	itete	lt
 800ede0:	9b05      	ldrlt	r3, [sp, #20]
 800ede2:	9d05      	ldrge	r5, [sp, #20]
 800ede4:	eba3 0509 	sublt.w	r5, r3, r9
 800ede8:	464b      	movge	r3, r9
 800edea:	bfb8      	it	lt
 800edec:	2300      	movlt	r3, #0
 800edee:	e77e      	b.n	800ecee <_dtoa_r+0x6fe>
 800edf0:	9f07      	ldr	r7, [sp, #28]
 800edf2:	9d05      	ldr	r5, [sp, #20]
 800edf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800edf6:	e783      	b.n	800ed00 <_dtoa_r+0x710>
 800edf8:	9a07      	ldr	r2, [sp, #28]
 800edfa:	e7ab      	b.n	800ed54 <_dtoa_r+0x764>
 800edfc:	2300      	movs	r3, #0
 800edfe:	e7d4      	b.n	800edaa <_dtoa_r+0x7ba>
 800ee00:	9b00      	ldr	r3, [sp, #0]
 800ee02:	e7d2      	b.n	800edaa <_dtoa_r+0x7ba>
 800ee04:	2300      	movs	r3, #0
 800ee06:	9307      	str	r3, [sp, #28]
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ee0e:	6918      	ldr	r0, [r3, #16]
 800ee10:	f000 ff9c 	bl	800fd4c <__hi0bits>
 800ee14:	f1c0 0020 	rsb	r0, r0, #32
 800ee18:	4440      	add	r0, r8
 800ee1a:	f010 001f 	ands.w	r0, r0, #31
 800ee1e:	d047      	beq.n	800eeb0 <_dtoa_r+0x8c0>
 800ee20:	f1c0 0320 	rsb	r3, r0, #32
 800ee24:	2b04      	cmp	r3, #4
 800ee26:	dd3b      	ble.n	800eea0 <_dtoa_r+0x8b0>
 800ee28:	9b05      	ldr	r3, [sp, #20]
 800ee2a:	f1c0 001c 	rsb	r0, r0, #28
 800ee2e:	4403      	add	r3, r0
 800ee30:	9305      	str	r3, [sp, #20]
 800ee32:	4405      	add	r5, r0
 800ee34:	4480      	add	r8, r0
 800ee36:	9b05      	ldr	r3, [sp, #20]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	dd05      	ble.n	800ee48 <_dtoa_r+0x858>
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	9904      	ldr	r1, [sp, #16]
 800ee40:	4620      	mov	r0, r4
 800ee42:	f001 f8bf 	bl	800ffc4 <__lshift>
 800ee46:	9004      	str	r0, [sp, #16]
 800ee48:	f1b8 0f00 	cmp.w	r8, #0
 800ee4c:	dd05      	ble.n	800ee5a <_dtoa_r+0x86a>
 800ee4e:	4639      	mov	r1, r7
 800ee50:	4642      	mov	r2, r8
 800ee52:	4620      	mov	r0, r4
 800ee54:	f001 f8b6 	bl	800ffc4 <__lshift>
 800ee58:	4607      	mov	r7, r0
 800ee5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee5c:	b353      	cbz	r3, 800eeb4 <_dtoa_r+0x8c4>
 800ee5e:	4639      	mov	r1, r7
 800ee60:	9804      	ldr	r0, [sp, #16]
 800ee62:	f001 f903 	bl	801006c <__mcmp>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	da24      	bge.n	800eeb4 <_dtoa_r+0x8c4>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	220a      	movs	r2, #10
 800ee6e:	9904      	ldr	r1, [sp, #16]
 800ee70:	4620      	mov	r0, r4
 800ee72:	f000 fef2 	bl	800fc5a <__multadd>
 800ee76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee78:	9004      	str	r0, [sp, #16]
 800ee7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f000 814d 	beq.w	800f11e <_dtoa_r+0xb2e>
 800ee84:	2300      	movs	r3, #0
 800ee86:	4631      	mov	r1, r6
 800ee88:	220a      	movs	r2, #10
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f000 fee5 	bl	800fc5a <__multadd>
 800ee90:	9b02      	ldr	r3, [sp, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	4606      	mov	r6, r0
 800ee96:	dc4f      	bgt.n	800ef38 <_dtoa_r+0x948>
 800ee98:	9b06      	ldr	r3, [sp, #24]
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	dd4c      	ble.n	800ef38 <_dtoa_r+0x948>
 800ee9e:	e011      	b.n	800eec4 <_dtoa_r+0x8d4>
 800eea0:	d0c9      	beq.n	800ee36 <_dtoa_r+0x846>
 800eea2:	9a05      	ldr	r2, [sp, #20]
 800eea4:	331c      	adds	r3, #28
 800eea6:	441a      	add	r2, r3
 800eea8:	9205      	str	r2, [sp, #20]
 800eeaa:	441d      	add	r5, r3
 800eeac:	4498      	add	r8, r3
 800eeae:	e7c2      	b.n	800ee36 <_dtoa_r+0x846>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	e7f6      	b.n	800eea2 <_dtoa_r+0x8b2>
 800eeb4:	f1b9 0f00 	cmp.w	r9, #0
 800eeb8:	dc38      	bgt.n	800ef2c <_dtoa_r+0x93c>
 800eeba:	9b06      	ldr	r3, [sp, #24]
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	dd35      	ble.n	800ef2c <_dtoa_r+0x93c>
 800eec0:	f8cd 9008 	str.w	r9, [sp, #8]
 800eec4:	9b02      	ldr	r3, [sp, #8]
 800eec6:	b963      	cbnz	r3, 800eee2 <_dtoa_r+0x8f2>
 800eec8:	4639      	mov	r1, r7
 800eeca:	2205      	movs	r2, #5
 800eecc:	4620      	mov	r0, r4
 800eece:	f000 fec4 	bl	800fc5a <__multadd>
 800eed2:	4601      	mov	r1, r0
 800eed4:	4607      	mov	r7, r0
 800eed6:	9804      	ldr	r0, [sp, #16]
 800eed8:	f001 f8c8 	bl	801006c <__mcmp>
 800eedc:	2800      	cmp	r0, #0
 800eede:	f73f adcc 	bgt.w	800ea7a <_dtoa_r+0x48a>
 800eee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eee4:	465d      	mov	r5, fp
 800eee6:	ea6f 0a03 	mvn.w	sl, r3
 800eeea:	f04f 0900 	mov.w	r9, #0
 800eeee:	4639      	mov	r1, r7
 800eef0:	4620      	mov	r0, r4
 800eef2:	f000 fe9b 	bl	800fc2c <_Bfree>
 800eef6:	2e00      	cmp	r6, #0
 800eef8:	f43f aeb7 	beq.w	800ec6a <_dtoa_r+0x67a>
 800eefc:	f1b9 0f00 	cmp.w	r9, #0
 800ef00:	d005      	beq.n	800ef0e <_dtoa_r+0x91e>
 800ef02:	45b1      	cmp	r9, r6
 800ef04:	d003      	beq.n	800ef0e <_dtoa_r+0x91e>
 800ef06:	4649      	mov	r1, r9
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f000 fe8f 	bl	800fc2c <_Bfree>
 800ef0e:	4631      	mov	r1, r6
 800ef10:	4620      	mov	r0, r4
 800ef12:	f000 fe8b 	bl	800fc2c <_Bfree>
 800ef16:	e6a8      	b.n	800ec6a <_dtoa_r+0x67a>
 800ef18:	2700      	movs	r7, #0
 800ef1a:	463e      	mov	r6, r7
 800ef1c:	e7e1      	b.n	800eee2 <_dtoa_r+0x8f2>
 800ef1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ef22:	463e      	mov	r6, r7
 800ef24:	e5a9      	b.n	800ea7a <_dtoa_r+0x48a>
 800ef26:	bf00      	nop
 800ef28:	40240000 	.word	0x40240000
 800ef2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f000 80fa 	beq.w	800f12c <_dtoa_r+0xb3c>
 800ef38:	2d00      	cmp	r5, #0
 800ef3a:	dd05      	ble.n	800ef48 <_dtoa_r+0x958>
 800ef3c:	4631      	mov	r1, r6
 800ef3e:	462a      	mov	r2, r5
 800ef40:	4620      	mov	r0, r4
 800ef42:	f001 f83f 	bl	800ffc4 <__lshift>
 800ef46:	4606      	mov	r6, r0
 800ef48:	9b07      	ldr	r3, [sp, #28]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d04c      	beq.n	800efe8 <_dtoa_r+0x9f8>
 800ef4e:	6871      	ldr	r1, [r6, #4]
 800ef50:	4620      	mov	r0, r4
 800ef52:	f000 fe37 	bl	800fbc4 <_Balloc>
 800ef56:	6932      	ldr	r2, [r6, #16]
 800ef58:	3202      	adds	r2, #2
 800ef5a:	4605      	mov	r5, r0
 800ef5c:	0092      	lsls	r2, r2, #2
 800ef5e:	f106 010c 	add.w	r1, r6, #12
 800ef62:	300c      	adds	r0, #12
 800ef64:	f7fd fb32 	bl	800c5cc <memcpy>
 800ef68:	2201      	movs	r2, #1
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f001 f829 	bl	800ffc4 <__lshift>
 800ef72:	9b00      	ldr	r3, [sp, #0]
 800ef74:	f8cd b014 	str.w	fp, [sp, #20]
 800ef78:	f003 0301 	and.w	r3, r3, #1
 800ef7c:	46b1      	mov	r9, r6
 800ef7e:	9307      	str	r3, [sp, #28]
 800ef80:	4606      	mov	r6, r0
 800ef82:	4639      	mov	r1, r7
 800ef84:	9804      	ldr	r0, [sp, #16]
 800ef86:	f7ff faa5 	bl	800e4d4 <quorem>
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	4605      	mov	r5, r0
 800ef8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ef92:	9804      	ldr	r0, [sp, #16]
 800ef94:	f001 f86a 	bl	801006c <__mcmp>
 800ef98:	4632      	mov	r2, r6
 800ef9a:	9000      	str	r0, [sp, #0]
 800ef9c:	4639      	mov	r1, r7
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f001 f87e 	bl	80100a0 <__mdiff>
 800efa4:	68c3      	ldr	r3, [r0, #12]
 800efa6:	4602      	mov	r2, r0
 800efa8:	bb03      	cbnz	r3, 800efec <_dtoa_r+0x9fc>
 800efaa:	4601      	mov	r1, r0
 800efac:	9008      	str	r0, [sp, #32]
 800efae:	9804      	ldr	r0, [sp, #16]
 800efb0:	f001 f85c 	bl	801006c <__mcmp>
 800efb4:	9a08      	ldr	r2, [sp, #32]
 800efb6:	4603      	mov	r3, r0
 800efb8:	4611      	mov	r1, r2
 800efba:	4620      	mov	r0, r4
 800efbc:	9308      	str	r3, [sp, #32]
 800efbe:	f000 fe35 	bl	800fc2c <_Bfree>
 800efc2:	9b08      	ldr	r3, [sp, #32]
 800efc4:	b9a3      	cbnz	r3, 800eff0 <_dtoa_r+0xa00>
 800efc6:	9a06      	ldr	r2, [sp, #24]
 800efc8:	b992      	cbnz	r2, 800eff0 <_dtoa_r+0xa00>
 800efca:	9a07      	ldr	r2, [sp, #28]
 800efcc:	b982      	cbnz	r2, 800eff0 <_dtoa_r+0xa00>
 800efce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800efd2:	d029      	beq.n	800f028 <_dtoa_r+0xa38>
 800efd4:	9b00      	ldr	r3, [sp, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	dd01      	ble.n	800efde <_dtoa_r+0x9ee>
 800efda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800efde:	9b05      	ldr	r3, [sp, #20]
 800efe0:	1c5d      	adds	r5, r3, #1
 800efe2:	f883 8000 	strb.w	r8, [r3]
 800efe6:	e782      	b.n	800eeee <_dtoa_r+0x8fe>
 800efe8:	4630      	mov	r0, r6
 800efea:	e7c2      	b.n	800ef72 <_dtoa_r+0x982>
 800efec:	2301      	movs	r3, #1
 800efee:	e7e3      	b.n	800efb8 <_dtoa_r+0x9c8>
 800eff0:	9a00      	ldr	r2, [sp, #0]
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	db04      	blt.n	800f000 <_dtoa_r+0xa10>
 800eff6:	d125      	bne.n	800f044 <_dtoa_r+0xa54>
 800eff8:	9a06      	ldr	r2, [sp, #24]
 800effa:	bb1a      	cbnz	r2, 800f044 <_dtoa_r+0xa54>
 800effc:	9a07      	ldr	r2, [sp, #28]
 800effe:	bb0a      	cbnz	r2, 800f044 <_dtoa_r+0xa54>
 800f000:	2b00      	cmp	r3, #0
 800f002:	ddec      	ble.n	800efde <_dtoa_r+0x9ee>
 800f004:	2201      	movs	r2, #1
 800f006:	9904      	ldr	r1, [sp, #16]
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 ffdb 	bl	800ffc4 <__lshift>
 800f00e:	4639      	mov	r1, r7
 800f010:	9004      	str	r0, [sp, #16]
 800f012:	f001 f82b 	bl	801006c <__mcmp>
 800f016:	2800      	cmp	r0, #0
 800f018:	dc03      	bgt.n	800f022 <_dtoa_r+0xa32>
 800f01a:	d1e0      	bne.n	800efde <_dtoa_r+0x9ee>
 800f01c:	f018 0f01 	tst.w	r8, #1
 800f020:	d0dd      	beq.n	800efde <_dtoa_r+0x9ee>
 800f022:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f026:	d1d8      	bne.n	800efda <_dtoa_r+0x9ea>
 800f028:	9b05      	ldr	r3, [sp, #20]
 800f02a:	9a05      	ldr	r2, [sp, #20]
 800f02c:	1c5d      	adds	r5, r3, #1
 800f02e:	2339      	movs	r3, #57	; 0x39
 800f030:	7013      	strb	r3, [r2, #0]
 800f032:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f036:	2b39      	cmp	r3, #57	; 0x39
 800f038:	f105 32ff 	add.w	r2, r5, #4294967295
 800f03c:	d04f      	beq.n	800f0de <_dtoa_r+0xaee>
 800f03e:	3301      	adds	r3, #1
 800f040:	7013      	strb	r3, [r2, #0]
 800f042:	e754      	b.n	800eeee <_dtoa_r+0x8fe>
 800f044:	9a05      	ldr	r2, [sp, #20]
 800f046:	2b00      	cmp	r3, #0
 800f048:	f102 0501 	add.w	r5, r2, #1
 800f04c:	dd06      	ble.n	800f05c <_dtoa_r+0xa6c>
 800f04e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f052:	d0e9      	beq.n	800f028 <_dtoa_r+0xa38>
 800f054:	f108 0801 	add.w	r8, r8, #1
 800f058:	9b05      	ldr	r3, [sp, #20]
 800f05a:	e7c2      	b.n	800efe2 <_dtoa_r+0x9f2>
 800f05c:	9a02      	ldr	r2, [sp, #8]
 800f05e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f062:	eba5 030b 	sub.w	r3, r5, fp
 800f066:	4293      	cmp	r3, r2
 800f068:	d021      	beq.n	800f0ae <_dtoa_r+0xabe>
 800f06a:	2300      	movs	r3, #0
 800f06c:	220a      	movs	r2, #10
 800f06e:	9904      	ldr	r1, [sp, #16]
 800f070:	4620      	mov	r0, r4
 800f072:	f000 fdf2 	bl	800fc5a <__multadd>
 800f076:	45b1      	cmp	r9, r6
 800f078:	9004      	str	r0, [sp, #16]
 800f07a:	f04f 0300 	mov.w	r3, #0
 800f07e:	f04f 020a 	mov.w	r2, #10
 800f082:	4649      	mov	r1, r9
 800f084:	4620      	mov	r0, r4
 800f086:	d105      	bne.n	800f094 <_dtoa_r+0xaa4>
 800f088:	f000 fde7 	bl	800fc5a <__multadd>
 800f08c:	4681      	mov	r9, r0
 800f08e:	4606      	mov	r6, r0
 800f090:	9505      	str	r5, [sp, #20]
 800f092:	e776      	b.n	800ef82 <_dtoa_r+0x992>
 800f094:	f000 fde1 	bl	800fc5a <__multadd>
 800f098:	4631      	mov	r1, r6
 800f09a:	4681      	mov	r9, r0
 800f09c:	2300      	movs	r3, #0
 800f09e:	220a      	movs	r2, #10
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f000 fdda 	bl	800fc5a <__multadd>
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	e7f2      	b.n	800f090 <_dtoa_r+0xaa0>
 800f0aa:	f04f 0900 	mov.w	r9, #0
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	9904      	ldr	r1, [sp, #16]
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f000 ff86 	bl	800ffc4 <__lshift>
 800f0b8:	4639      	mov	r1, r7
 800f0ba:	9004      	str	r0, [sp, #16]
 800f0bc:	f000 ffd6 	bl	801006c <__mcmp>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	dcb6      	bgt.n	800f032 <_dtoa_r+0xa42>
 800f0c4:	d102      	bne.n	800f0cc <_dtoa_r+0xadc>
 800f0c6:	f018 0f01 	tst.w	r8, #1
 800f0ca:	d1b2      	bne.n	800f032 <_dtoa_r+0xa42>
 800f0cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f0d0:	2b30      	cmp	r3, #48	; 0x30
 800f0d2:	f105 32ff 	add.w	r2, r5, #4294967295
 800f0d6:	f47f af0a 	bne.w	800eeee <_dtoa_r+0x8fe>
 800f0da:	4615      	mov	r5, r2
 800f0dc:	e7f6      	b.n	800f0cc <_dtoa_r+0xadc>
 800f0de:	4593      	cmp	fp, r2
 800f0e0:	d105      	bne.n	800f0ee <_dtoa_r+0xafe>
 800f0e2:	2331      	movs	r3, #49	; 0x31
 800f0e4:	f10a 0a01 	add.w	sl, sl, #1
 800f0e8:	f88b 3000 	strb.w	r3, [fp]
 800f0ec:	e6ff      	b.n	800eeee <_dtoa_r+0x8fe>
 800f0ee:	4615      	mov	r5, r2
 800f0f0:	e79f      	b.n	800f032 <_dtoa_r+0xa42>
 800f0f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f158 <_dtoa_r+0xb68>
 800f0f6:	e007      	b.n	800f108 <_dtoa_r+0xb18>
 800f0f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f15c <_dtoa_r+0xb6c>
 800f0fe:	b11b      	cbz	r3, 800f108 <_dtoa_r+0xb18>
 800f100:	f10b 0308 	add.w	r3, fp, #8
 800f104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f106:	6013      	str	r3, [r2, #0]
 800f108:	4658      	mov	r0, fp
 800f10a:	b017      	add	sp, #92	; 0x5c
 800f10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f110:	9b06      	ldr	r3, [sp, #24]
 800f112:	2b01      	cmp	r3, #1
 800f114:	f77f ae35 	ble.w	800ed82 <_dtoa_r+0x792>
 800f118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f11a:	9307      	str	r3, [sp, #28]
 800f11c:	e649      	b.n	800edb2 <_dtoa_r+0x7c2>
 800f11e:	9b02      	ldr	r3, [sp, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	dc03      	bgt.n	800f12c <_dtoa_r+0xb3c>
 800f124:	9b06      	ldr	r3, [sp, #24]
 800f126:	2b02      	cmp	r3, #2
 800f128:	f73f aecc 	bgt.w	800eec4 <_dtoa_r+0x8d4>
 800f12c:	465d      	mov	r5, fp
 800f12e:	4639      	mov	r1, r7
 800f130:	9804      	ldr	r0, [sp, #16]
 800f132:	f7ff f9cf 	bl	800e4d4 <quorem>
 800f136:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f13a:	f805 8b01 	strb.w	r8, [r5], #1
 800f13e:	9a02      	ldr	r2, [sp, #8]
 800f140:	eba5 030b 	sub.w	r3, r5, fp
 800f144:	429a      	cmp	r2, r3
 800f146:	ddb0      	ble.n	800f0aa <_dtoa_r+0xaba>
 800f148:	2300      	movs	r3, #0
 800f14a:	220a      	movs	r2, #10
 800f14c:	9904      	ldr	r1, [sp, #16]
 800f14e:	4620      	mov	r0, r4
 800f150:	f000 fd83 	bl	800fc5a <__multadd>
 800f154:	9004      	str	r0, [sp, #16]
 800f156:	e7ea      	b.n	800f12e <_dtoa_r+0xb3e>
 800f158:	08010c29 	.word	0x08010c29
 800f15c:	08010ca8 	.word	0x08010ca8

0800f160 <__sflush_r>:
 800f160:	898a      	ldrh	r2, [r1, #12]
 800f162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f166:	4605      	mov	r5, r0
 800f168:	0710      	lsls	r0, r2, #28
 800f16a:	460c      	mov	r4, r1
 800f16c:	d458      	bmi.n	800f220 <__sflush_r+0xc0>
 800f16e:	684b      	ldr	r3, [r1, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	dc05      	bgt.n	800f180 <__sflush_r+0x20>
 800f174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f176:	2b00      	cmp	r3, #0
 800f178:	dc02      	bgt.n	800f180 <__sflush_r+0x20>
 800f17a:	2000      	movs	r0, #0
 800f17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f182:	2e00      	cmp	r6, #0
 800f184:	d0f9      	beq.n	800f17a <__sflush_r+0x1a>
 800f186:	2300      	movs	r3, #0
 800f188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f18c:	682f      	ldr	r7, [r5, #0]
 800f18e:	6a21      	ldr	r1, [r4, #32]
 800f190:	602b      	str	r3, [r5, #0]
 800f192:	d032      	beq.n	800f1fa <__sflush_r+0x9a>
 800f194:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	075a      	lsls	r2, r3, #29
 800f19a:	d505      	bpl.n	800f1a8 <__sflush_r+0x48>
 800f19c:	6863      	ldr	r3, [r4, #4]
 800f19e:	1ac0      	subs	r0, r0, r3
 800f1a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1a2:	b10b      	cbz	r3, 800f1a8 <__sflush_r+0x48>
 800f1a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1a6:	1ac0      	subs	r0, r0, r3
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1ae:	6a21      	ldr	r1, [r4, #32]
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	47b0      	blx	r6
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	89a3      	ldrh	r3, [r4, #12]
 800f1b8:	d106      	bne.n	800f1c8 <__sflush_r+0x68>
 800f1ba:	6829      	ldr	r1, [r5, #0]
 800f1bc:	291d      	cmp	r1, #29
 800f1be:	d848      	bhi.n	800f252 <__sflush_r+0xf2>
 800f1c0:	4a29      	ldr	r2, [pc, #164]	; (800f268 <__sflush_r+0x108>)
 800f1c2:	40ca      	lsrs	r2, r1
 800f1c4:	07d6      	lsls	r6, r2, #31
 800f1c6:	d544      	bpl.n	800f252 <__sflush_r+0xf2>
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	6062      	str	r2, [r4, #4]
 800f1cc:	04d9      	lsls	r1, r3, #19
 800f1ce:	6922      	ldr	r2, [r4, #16]
 800f1d0:	6022      	str	r2, [r4, #0]
 800f1d2:	d504      	bpl.n	800f1de <__sflush_r+0x7e>
 800f1d4:	1c42      	adds	r2, r0, #1
 800f1d6:	d101      	bne.n	800f1dc <__sflush_r+0x7c>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	b903      	cbnz	r3, 800f1de <__sflush_r+0x7e>
 800f1dc:	6560      	str	r0, [r4, #84]	; 0x54
 800f1de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1e0:	602f      	str	r7, [r5, #0]
 800f1e2:	2900      	cmp	r1, #0
 800f1e4:	d0c9      	beq.n	800f17a <__sflush_r+0x1a>
 800f1e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ea:	4299      	cmp	r1, r3
 800f1ec:	d002      	beq.n	800f1f4 <__sflush_r+0x94>
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	f001 f8f6 	bl	80103e0 <_free_r>
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	6360      	str	r0, [r4, #52]	; 0x34
 800f1f8:	e7c0      	b.n	800f17c <__sflush_r+0x1c>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	47b0      	blx	r6
 800f200:	1c41      	adds	r1, r0, #1
 800f202:	d1c8      	bne.n	800f196 <__sflush_r+0x36>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d0c5      	beq.n	800f196 <__sflush_r+0x36>
 800f20a:	2b1d      	cmp	r3, #29
 800f20c:	d001      	beq.n	800f212 <__sflush_r+0xb2>
 800f20e:	2b16      	cmp	r3, #22
 800f210:	d101      	bne.n	800f216 <__sflush_r+0xb6>
 800f212:	602f      	str	r7, [r5, #0]
 800f214:	e7b1      	b.n	800f17a <__sflush_r+0x1a>
 800f216:	89a3      	ldrh	r3, [r4, #12]
 800f218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f21c:	81a3      	strh	r3, [r4, #12]
 800f21e:	e7ad      	b.n	800f17c <__sflush_r+0x1c>
 800f220:	690f      	ldr	r7, [r1, #16]
 800f222:	2f00      	cmp	r7, #0
 800f224:	d0a9      	beq.n	800f17a <__sflush_r+0x1a>
 800f226:	0793      	lsls	r3, r2, #30
 800f228:	680e      	ldr	r6, [r1, #0]
 800f22a:	bf08      	it	eq
 800f22c:	694b      	ldreq	r3, [r1, #20]
 800f22e:	600f      	str	r7, [r1, #0]
 800f230:	bf18      	it	ne
 800f232:	2300      	movne	r3, #0
 800f234:	eba6 0807 	sub.w	r8, r6, r7
 800f238:	608b      	str	r3, [r1, #8]
 800f23a:	f1b8 0f00 	cmp.w	r8, #0
 800f23e:	dd9c      	ble.n	800f17a <__sflush_r+0x1a>
 800f240:	4643      	mov	r3, r8
 800f242:	463a      	mov	r2, r7
 800f244:	6a21      	ldr	r1, [r4, #32]
 800f246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f248:	4628      	mov	r0, r5
 800f24a:	47b0      	blx	r6
 800f24c:	2800      	cmp	r0, #0
 800f24e:	dc06      	bgt.n	800f25e <__sflush_r+0xfe>
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f256:	81a3      	strh	r3, [r4, #12]
 800f258:	f04f 30ff 	mov.w	r0, #4294967295
 800f25c:	e78e      	b.n	800f17c <__sflush_r+0x1c>
 800f25e:	4407      	add	r7, r0
 800f260:	eba8 0800 	sub.w	r8, r8, r0
 800f264:	e7e9      	b.n	800f23a <__sflush_r+0xda>
 800f266:	bf00      	nop
 800f268:	20400001 	.word	0x20400001

0800f26c <_fflush_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	690b      	ldr	r3, [r1, #16]
 800f270:	4605      	mov	r5, r0
 800f272:	460c      	mov	r4, r1
 800f274:	b1db      	cbz	r3, 800f2ae <_fflush_r+0x42>
 800f276:	b118      	cbz	r0, 800f280 <_fflush_r+0x14>
 800f278:	6983      	ldr	r3, [r0, #24]
 800f27a:	b90b      	cbnz	r3, 800f280 <_fflush_r+0x14>
 800f27c:	f000 f860 	bl	800f340 <__sinit>
 800f280:	4b0c      	ldr	r3, [pc, #48]	; (800f2b4 <_fflush_r+0x48>)
 800f282:	429c      	cmp	r4, r3
 800f284:	d109      	bne.n	800f29a <_fflush_r+0x2e>
 800f286:	686c      	ldr	r4, [r5, #4]
 800f288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f28c:	b17b      	cbz	r3, 800f2ae <_fflush_r+0x42>
 800f28e:	4621      	mov	r1, r4
 800f290:	4628      	mov	r0, r5
 800f292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f296:	f7ff bf63 	b.w	800f160 <__sflush_r>
 800f29a:	4b07      	ldr	r3, [pc, #28]	; (800f2b8 <_fflush_r+0x4c>)
 800f29c:	429c      	cmp	r4, r3
 800f29e:	d101      	bne.n	800f2a4 <_fflush_r+0x38>
 800f2a0:	68ac      	ldr	r4, [r5, #8]
 800f2a2:	e7f1      	b.n	800f288 <_fflush_r+0x1c>
 800f2a4:	4b05      	ldr	r3, [pc, #20]	; (800f2bc <_fflush_r+0x50>)
 800f2a6:	429c      	cmp	r4, r3
 800f2a8:	bf08      	it	eq
 800f2aa:	68ec      	ldreq	r4, [r5, #12]
 800f2ac:	e7ec      	b.n	800f288 <_fflush_r+0x1c>
 800f2ae:	2000      	movs	r0, #0
 800f2b0:	bd38      	pop	{r3, r4, r5, pc}
 800f2b2:	bf00      	nop
 800f2b4:	08010cd8 	.word	0x08010cd8
 800f2b8:	08010cf8 	.word	0x08010cf8
 800f2bc:	08010cb8 	.word	0x08010cb8

0800f2c0 <std>:
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	b510      	push	{r4, lr}
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	e9c0 3300 	strd	r3, r3, [r0]
 800f2ca:	6083      	str	r3, [r0, #8]
 800f2cc:	8181      	strh	r1, [r0, #12]
 800f2ce:	6643      	str	r3, [r0, #100]	; 0x64
 800f2d0:	81c2      	strh	r2, [r0, #14]
 800f2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2d6:	6183      	str	r3, [r0, #24]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	2208      	movs	r2, #8
 800f2dc:	305c      	adds	r0, #92	; 0x5c
 800f2de:	f7fd f999 	bl	800c614 <memset>
 800f2e2:	4b05      	ldr	r3, [pc, #20]	; (800f2f8 <std+0x38>)
 800f2e4:	6263      	str	r3, [r4, #36]	; 0x24
 800f2e6:	4b05      	ldr	r3, [pc, #20]	; (800f2fc <std+0x3c>)
 800f2e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2ea:	4b05      	ldr	r3, [pc, #20]	; (800f300 <std+0x40>)
 800f2ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2ee:	4b05      	ldr	r3, [pc, #20]	; (800f304 <std+0x44>)
 800f2f0:	6224      	str	r4, [r4, #32]
 800f2f2:	6323      	str	r3, [r4, #48]	; 0x30
 800f2f4:	bd10      	pop	{r4, pc}
 800f2f6:	bf00      	nop
 800f2f8:	08010841 	.word	0x08010841
 800f2fc:	08010863 	.word	0x08010863
 800f300:	0801089b 	.word	0x0801089b
 800f304:	080108bf 	.word	0x080108bf

0800f308 <_cleanup_r>:
 800f308:	4901      	ldr	r1, [pc, #4]	; (800f310 <_cleanup_r+0x8>)
 800f30a:	f000 b885 	b.w	800f418 <_fwalk_reent>
 800f30e:	bf00      	nop
 800f310:	0800f26d 	.word	0x0800f26d

0800f314 <__sfmoreglue>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	1e4a      	subs	r2, r1, #1
 800f318:	2568      	movs	r5, #104	; 0x68
 800f31a:	4355      	muls	r5, r2
 800f31c:	460e      	mov	r6, r1
 800f31e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f322:	f001 f8ab 	bl	801047c <_malloc_r>
 800f326:	4604      	mov	r4, r0
 800f328:	b140      	cbz	r0, 800f33c <__sfmoreglue+0x28>
 800f32a:	2100      	movs	r1, #0
 800f32c:	e9c0 1600 	strd	r1, r6, [r0]
 800f330:	300c      	adds	r0, #12
 800f332:	60a0      	str	r0, [r4, #8]
 800f334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f338:	f7fd f96c 	bl	800c614 <memset>
 800f33c:	4620      	mov	r0, r4
 800f33e:	bd70      	pop	{r4, r5, r6, pc}

0800f340 <__sinit>:
 800f340:	6983      	ldr	r3, [r0, #24]
 800f342:	b510      	push	{r4, lr}
 800f344:	4604      	mov	r4, r0
 800f346:	bb33      	cbnz	r3, 800f396 <__sinit+0x56>
 800f348:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f34c:	6503      	str	r3, [r0, #80]	; 0x50
 800f34e:	4b12      	ldr	r3, [pc, #72]	; (800f398 <__sinit+0x58>)
 800f350:	4a12      	ldr	r2, [pc, #72]	; (800f39c <__sinit+0x5c>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	6282      	str	r2, [r0, #40]	; 0x28
 800f356:	4298      	cmp	r0, r3
 800f358:	bf04      	itt	eq
 800f35a:	2301      	moveq	r3, #1
 800f35c:	6183      	streq	r3, [r0, #24]
 800f35e:	f000 f81f 	bl	800f3a0 <__sfp>
 800f362:	6060      	str	r0, [r4, #4]
 800f364:	4620      	mov	r0, r4
 800f366:	f000 f81b 	bl	800f3a0 <__sfp>
 800f36a:	60a0      	str	r0, [r4, #8]
 800f36c:	4620      	mov	r0, r4
 800f36e:	f000 f817 	bl	800f3a0 <__sfp>
 800f372:	2200      	movs	r2, #0
 800f374:	60e0      	str	r0, [r4, #12]
 800f376:	2104      	movs	r1, #4
 800f378:	6860      	ldr	r0, [r4, #4]
 800f37a:	f7ff ffa1 	bl	800f2c0 <std>
 800f37e:	2201      	movs	r2, #1
 800f380:	2109      	movs	r1, #9
 800f382:	68a0      	ldr	r0, [r4, #8]
 800f384:	f7ff ff9c 	bl	800f2c0 <std>
 800f388:	2202      	movs	r2, #2
 800f38a:	2112      	movs	r1, #18
 800f38c:	68e0      	ldr	r0, [r4, #12]
 800f38e:	f7ff ff97 	bl	800f2c0 <std>
 800f392:	2301      	movs	r3, #1
 800f394:	61a3      	str	r3, [r4, #24]
 800f396:	bd10      	pop	{r4, pc}
 800f398:	08010c04 	.word	0x08010c04
 800f39c:	0800f309 	.word	0x0800f309

0800f3a0 <__sfp>:
 800f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a2:	4b1b      	ldr	r3, [pc, #108]	; (800f410 <__sfp+0x70>)
 800f3a4:	681e      	ldr	r6, [r3, #0]
 800f3a6:	69b3      	ldr	r3, [r6, #24]
 800f3a8:	4607      	mov	r7, r0
 800f3aa:	b913      	cbnz	r3, 800f3b2 <__sfp+0x12>
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f7ff ffc7 	bl	800f340 <__sinit>
 800f3b2:	3648      	adds	r6, #72	; 0x48
 800f3b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	d503      	bpl.n	800f3c4 <__sfp+0x24>
 800f3bc:	6833      	ldr	r3, [r6, #0]
 800f3be:	b133      	cbz	r3, 800f3ce <__sfp+0x2e>
 800f3c0:	6836      	ldr	r6, [r6, #0]
 800f3c2:	e7f7      	b.n	800f3b4 <__sfp+0x14>
 800f3c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f3c8:	b16d      	cbz	r5, 800f3e6 <__sfp+0x46>
 800f3ca:	3468      	adds	r4, #104	; 0x68
 800f3cc:	e7f4      	b.n	800f3b8 <__sfp+0x18>
 800f3ce:	2104      	movs	r1, #4
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	f7ff ff9f 	bl	800f314 <__sfmoreglue>
 800f3d6:	6030      	str	r0, [r6, #0]
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	d1f1      	bne.n	800f3c0 <__sfp+0x20>
 800f3dc:	230c      	movs	r3, #12
 800f3de:	603b      	str	r3, [r7, #0]
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3e6:	4b0b      	ldr	r3, [pc, #44]	; (800f414 <__sfp+0x74>)
 800f3e8:	6665      	str	r5, [r4, #100]	; 0x64
 800f3ea:	e9c4 5500 	strd	r5, r5, [r4]
 800f3ee:	60a5      	str	r5, [r4, #8]
 800f3f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f3f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f3f8:	2208      	movs	r2, #8
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f400:	f7fd f908 	bl	800c614 <memset>
 800f404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f40c:	e7e9      	b.n	800f3e2 <__sfp+0x42>
 800f40e:	bf00      	nop
 800f410:	08010c04 	.word	0x08010c04
 800f414:	ffff0001 	.word	0xffff0001

0800f418 <_fwalk_reent>:
 800f418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f41c:	4680      	mov	r8, r0
 800f41e:	4689      	mov	r9, r1
 800f420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f424:	2600      	movs	r6, #0
 800f426:	b914      	cbnz	r4, 800f42e <_fwalk_reent+0x16>
 800f428:	4630      	mov	r0, r6
 800f42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f42e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f432:	3f01      	subs	r7, #1
 800f434:	d501      	bpl.n	800f43a <_fwalk_reent+0x22>
 800f436:	6824      	ldr	r4, [r4, #0]
 800f438:	e7f5      	b.n	800f426 <_fwalk_reent+0xe>
 800f43a:	89ab      	ldrh	r3, [r5, #12]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d907      	bls.n	800f450 <_fwalk_reent+0x38>
 800f440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f444:	3301      	adds	r3, #1
 800f446:	d003      	beq.n	800f450 <_fwalk_reent+0x38>
 800f448:	4629      	mov	r1, r5
 800f44a:	4640      	mov	r0, r8
 800f44c:	47c8      	blx	r9
 800f44e:	4306      	orrs	r6, r0
 800f450:	3568      	adds	r5, #104	; 0x68
 800f452:	e7ee      	b.n	800f432 <_fwalk_reent+0x1a>

0800f454 <rshift>:
 800f454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f456:	6906      	ldr	r6, [r0, #16]
 800f458:	114b      	asrs	r3, r1, #5
 800f45a:	429e      	cmp	r6, r3
 800f45c:	f100 0414 	add.w	r4, r0, #20
 800f460:	dd30      	ble.n	800f4c4 <rshift+0x70>
 800f462:	f011 011f 	ands.w	r1, r1, #31
 800f466:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f46a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f46e:	d108      	bne.n	800f482 <rshift+0x2e>
 800f470:	4621      	mov	r1, r4
 800f472:	42b2      	cmp	r2, r6
 800f474:	460b      	mov	r3, r1
 800f476:	d211      	bcs.n	800f49c <rshift+0x48>
 800f478:	f852 3b04 	ldr.w	r3, [r2], #4
 800f47c:	f841 3b04 	str.w	r3, [r1], #4
 800f480:	e7f7      	b.n	800f472 <rshift+0x1e>
 800f482:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f486:	f1c1 0c20 	rsb	ip, r1, #32
 800f48a:	40cd      	lsrs	r5, r1
 800f48c:	3204      	adds	r2, #4
 800f48e:	4623      	mov	r3, r4
 800f490:	42b2      	cmp	r2, r6
 800f492:	4617      	mov	r7, r2
 800f494:	d30c      	bcc.n	800f4b0 <rshift+0x5c>
 800f496:	601d      	str	r5, [r3, #0]
 800f498:	b105      	cbz	r5, 800f49c <rshift+0x48>
 800f49a:	3304      	adds	r3, #4
 800f49c:	1b1a      	subs	r2, r3, r4
 800f49e:	42a3      	cmp	r3, r4
 800f4a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4a4:	bf08      	it	eq
 800f4a6:	2300      	moveq	r3, #0
 800f4a8:	6102      	str	r2, [r0, #16]
 800f4aa:	bf08      	it	eq
 800f4ac:	6143      	streq	r3, [r0, #20]
 800f4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4b0:	683f      	ldr	r7, [r7, #0]
 800f4b2:	fa07 f70c 	lsl.w	r7, r7, ip
 800f4b6:	433d      	orrs	r5, r7
 800f4b8:	f843 5b04 	str.w	r5, [r3], #4
 800f4bc:	f852 5b04 	ldr.w	r5, [r2], #4
 800f4c0:	40cd      	lsrs	r5, r1
 800f4c2:	e7e5      	b.n	800f490 <rshift+0x3c>
 800f4c4:	4623      	mov	r3, r4
 800f4c6:	e7e9      	b.n	800f49c <rshift+0x48>

0800f4c8 <__hexdig_fun>:
 800f4c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	d802      	bhi.n	800f4d6 <__hexdig_fun+0xe>
 800f4d0:	3820      	subs	r0, #32
 800f4d2:	b2c0      	uxtb	r0, r0
 800f4d4:	4770      	bx	lr
 800f4d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f4da:	2b05      	cmp	r3, #5
 800f4dc:	d801      	bhi.n	800f4e2 <__hexdig_fun+0x1a>
 800f4de:	3847      	subs	r0, #71	; 0x47
 800f4e0:	e7f7      	b.n	800f4d2 <__hexdig_fun+0xa>
 800f4e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f4e6:	2b05      	cmp	r3, #5
 800f4e8:	d801      	bhi.n	800f4ee <__hexdig_fun+0x26>
 800f4ea:	3827      	subs	r0, #39	; 0x27
 800f4ec:	e7f1      	b.n	800f4d2 <__hexdig_fun+0xa>
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	4770      	bx	lr

0800f4f2 <__gethex>:
 800f4f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f6:	b08b      	sub	sp, #44	; 0x2c
 800f4f8:	468a      	mov	sl, r1
 800f4fa:	9002      	str	r0, [sp, #8]
 800f4fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f4fe:	9306      	str	r3, [sp, #24]
 800f500:	4690      	mov	r8, r2
 800f502:	f000 fad0 	bl	800faa6 <__localeconv_l>
 800f506:	6803      	ldr	r3, [r0, #0]
 800f508:	9303      	str	r3, [sp, #12]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7f0 fe68 	bl	80001e0 <strlen>
 800f510:	9b03      	ldr	r3, [sp, #12]
 800f512:	9001      	str	r0, [sp, #4]
 800f514:	4403      	add	r3, r0
 800f516:	f04f 0b00 	mov.w	fp, #0
 800f51a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f51e:	9307      	str	r3, [sp, #28]
 800f520:	f8da 3000 	ldr.w	r3, [sl]
 800f524:	3302      	adds	r3, #2
 800f526:	461f      	mov	r7, r3
 800f528:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f52c:	2830      	cmp	r0, #48	; 0x30
 800f52e:	d06c      	beq.n	800f60a <__gethex+0x118>
 800f530:	f7ff ffca 	bl	800f4c8 <__hexdig_fun>
 800f534:	4604      	mov	r4, r0
 800f536:	2800      	cmp	r0, #0
 800f538:	d16a      	bne.n	800f610 <__gethex+0x11e>
 800f53a:	9a01      	ldr	r2, [sp, #4]
 800f53c:	9903      	ldr	r1, [sp, #12]
 800f53e:	4638      	mov	r0, r7
 800f540:	f001 f9c1 	bl	80108c6 <strncmp>
 800f544:	2800      	cmp	r0, #0
 800f546:	d166      	bne.n	800f616 <__gethex+0x124>
 800f548:	9b01      	ldr	r3, [sp, #4]
 800f54a:	5cf8      	ldrb	r0, [r7, r3]
 800f54c:	18fe      	adds	r6, r7, r3
 800f54e:	f7ff ffbb 	bl	800f4c8 <__hexdig_fun>
 800f552:	2800      	cmp	r0, #0
 800f554:	d062      	beq.n	800f61c <__gethex+0x12a>
 800f556:	4633      	mov	r3, r6
 800f558:	7818      	ldrb	r0, [r3, #0]
 800f55a:	2830      	cmp	r0, #48	; 0x30
 800f55c:	461f      	mov	r7, r3
 800f55e:	f103 0301 	add.w	r3, r3, #1
 800f562:	d0f9      	beq.n	800f558 <__gethex+0x66>
 800f564:	f7ff ffb0 	bl	800f4c8 <__hexdig_fun>
 800f568:	fab0 f580 	clz	r5, r0
 800f56c:	096d      	lsrs	r5, r5, #5
 800f56e:	4634      	mov	r4, r6
 800f570:	f04f 0b01 	mov.w	fp, #1
 800f574:	463a      	mov	r2, r7
 800f576:	4616      	mov	r6, r2
 800f578:	3201      	adds	r2, #1
 800f57a:	7830      	ldrb	r0, [r6, #0]
 800f57c:	f7ff ffa4 	bl	800f4c8 <__hexdig_fun>
 800f580:	2800      	cmp	r0, #0
 800f582:	d1f8      	bne.n	800f576 <__gethex+0x84>
 800f584:	9a01      	ldr	r2, [sp, #4]
 800f586:	9903      	ldr	r1, [sp, #12]
 800f588:	4630      	mov	r0, r6
 800f58a:	f001 f99c 	bl	80108c6 <strncmp>
 800f58e:	b950      	cbnz	r0, 800f5a6 <__gethex+0xb4>
 800f590:	b954      	cbnz	r4, 800f5a8 <__gethex+0xb6>
 800f592:	9b01      	ldr	r3, [sp, #4]
 800f594:	18f4      	adds	r4, r6, r3
 800f596:	4622      	mov	r2, r4
 800f598:	4616      	mov	r6, r2
 800f59a:	3201      	adds	r2, #1
 800f59c:	7830      	ldrb	r0, [r6, #0]
 800f59e:	f7ff ff93 	bl	800f4c8 <__hexdig_fun>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d1f8      	bne.n	800f598 <__gethex+0xa6>
 800f5a6:	b10c      	cbz	r4, 800f5ac <__gethex+0xba>
 800f5a8:	1ba4      	subs	r4, r4, r6
 800f5aa:	00a4      	lsls	r4, r4, #2
 800f5ac:	7833      	ldrb	r3, [r6, #0]
 800f5ae:	2b50      	cmp	r3, #80	; 0x50
 800f5b0:	d001      	beq.n	800f5b6 <__gethex+0xc4>
 800f5b2:	2b70      	cmp	r3, #112	; 0x70
 800f5b4:	d140      	bne.n	800f638 <__gethex+0x146>
 800f5b6:	7873      	ldrb	r3, [r6, #1]
 800f5b8:	2b2b      	cmp	r3, #43	; 0x2b
 800f5ba:	d031      	beq.n	800f620 <__gethex+0x12e>
 800f5bc:	2b2d      	cmp	r3, #45	; 0x2d
 800f5be:	d033      	beq.n	800f628 <__gethex+0x136>
 800f5c0:	1c71      	adds	r1, r6, #1
 800f5c2:	f04f 0900 	mov.w	r9, #0
 800f5c6:	7808      	ldrb	r0, [r1, #0]
 800f5c8:	f7ff ff7e 	bl	800f4c8 <__hexdig_fun>
 800f5cc:	1e43      	subs	r3, r0, #1
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	2b18      	cmp	r3, #24
 800f5d2:	d831      	bhi.n	800f638 <__gethex+0x146>
 800f5d4:	f1a0 0210 	sub.w	r2, r0, #16
 800f5d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5dc:	f7ff ff74 	bl	800f4c8 <__hexdig_fun>
 800f5e0:	1e43      	subs	r3, r0, #1
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	2b18      	cmp	r3, #24
 800f5e6:	d922      	bls.n	800f62e <__gethex+0x13c>
 800f5e8:	f1b9 0f00 	cmp.w	r9, #0
 800f5ec:	d000      	beq.n	800f5f0 <__gethex+0xfe>
 800f5ee:	4252      	negs	r2, r2
 800f5f0:	4414      	add	r4, r2
 800f5f2:	f8ca 1000 	str.w	r1, [sl]
 800f5f6:	b30d      	cbz	r5, 800f63c <__gethex+0x14a>
 800f5f8:	f1bb 0f00 	cmp.w	fp, #0
 800f5fc:	bf0c      	ite	eq
 800f5fe:	2706      	moveq	r7, #6
 800f600:	2700      	movne	r7, #0
 800f602:	4638      	mov	r0, r7
 800f604:	b00b      	add	sp, #44	; 0x2c
 800f606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60a:	f10b 0b01 	add.w	fp, fp, #1
 800f60e:	e78a      	b.n	800f526 <__gethex+0x34>
 800f610:	2500      	movs	r5, #0
 800f612:	462c      	mov	r4, r5
 800f614:	e7ae      	b.n	800f574 <__gethex+0x82>
 800f616:	463e      	mov	r6, r7
 800f618:	2501      	movs	r5, #1
 800f61a:	e7c7      	b.n	800f5ac <__gethex+0xba>
 800f61c:	4604      	mov	r4, r0
 800f61e:	e7fb      	b.n	800f618 <__gethex+0x126>
 800f620:	f04f 0900 	mov.w	r9, #0
 800f624:	1cb1      	adds	r1, r6, #2
 800f626:	e7ce      	b.n	800f5c6 <__gethex+0xd4>
 800f628:	f04f 0901 	mov.w	r9, #1
 800f62c:	e7fa      	b.n	800f624 <__gethex+0x132>
 800f62e:	230a      	movs	r3, #10
 800f630:	fb03 0202 	mla	r2, r3, r2, r0
 800f634:	3a10      	subs	r2, #16
 800f636:	e7cf      	b.n	800f5d8 <__gethex+0xe6>
 800f638:	4631      	mov	r1, r6
 800f63a:	e7da      	b.n	800f5f2 <__gethex+0x100>
 800f63c:	1bf3      	subs	r3, r6, r7
 800f63e:	3b01      	subs	r3, #1
 800f640:	4629      	mov	r1, r5
 800f642:	2b07      	cmp	r3, #7
 800f644:	dc49      	bgt.n	800f6da <__gethex+0x1e8>
 800f646:	9802      	ldr	r0, [sp, #8]
 800f648:	f000 fabc 	bl	800fbc4 <_Balloc>
 800f64c:	9b01      	ldr	r3, [sp, #4]
 800f64e:	f100 0914 	add.w	r9, r0, #20
 800f652:	f04f 0b00 	mov.w	fp, #0
 800f656:	f1c3 0301 	rsb	r3, r3, #1
 800f65a:	4605      	mov	r5, r0
 800f65c:	f8cd 9010 	str.w	r9, [sp, #16]
 800f660:	46da      	mov	sl, fp
 800f662:	9308      	str	r3, [sp, #32]
 800f664:	42b7      	cmp	r7, r6
 800f666:	d33b      	bcc.n	800f6e0 <__gethex+0x1ee>
 800f668:	9804      	ldr	r0, [sp, #16]
 800f66a:	f840 ab04 	str.w	sl, [r0], #4
 800f66e:	eba0 0009 	sub.w	r0, r0, r9
 800f672:	1080      	asrs	r0, r0, #2
 800f674:	6128      	str	r0, [r5, #16]
 800f676:	0147      	lsls	r7, r0, #5
 800f678:	4650      	mov	r0, sl
 800f67a:	f000 fb67 	bl	800fd4c <__hi0bits>
 800f67e:	f8d8 6000 	ldr.w	r6, [r8]
 800f682:	1a3f      	subs	r7, r7, r0
 800f684:	42b7      	cmp	r7, r6
 800f686:	dd64      	ble.n	800f752 <__gethex+0x260>
 800f688:	1bbf      	subs	r7, r7, r6
 800f68a:	4639      	mov	r1, r7
 800f68c:	4628      	mov	r0, r5
 800f68e:	f000 fe77 	bl	8010380 <__any_on>
 800f692:	4682      	mov	sl, r0
 800f694:	b178      	cbz	r0, 800f6b6 <__gethex+0x1c4>
 800f696:	1e7b      	subs	r3, r7, #1
 800f698:	1159      	asrs	r1, r3, #5
 800f69a:	f003 021f 	and.w	r2, r3, #31
 800f69e:	f04f 0a01 	mov.w	sl, #1
 800f6a2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f6a6:	fa0a f202 	lsl.w	r2, sl, r2
 800f6aa:	420a      	tst	r2, r1
 800f6ac:	d003      	beq.n	800f6b6 <__gethex+0x1c4>
 800f6ae:	4553      	cmp	r3, sl
 800f6b0:	dc46      	bgt.n	800f740 <__gethex+0x24e>
 800f6b2:	f04f 0a02 	mov.w	sl, #2
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	f7ff fecb 	bl	800f454 <rshift>
 800f6be:	443c      	add	r4, r7
 800f6c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6c4:	42a3      	cmp	r3, r4
 800f6c6:	da52      	bge.n	800f76e <__gethex+0x27c>
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	9802      	ldr	r0, [sp, #8]
 800f6cc:	f000 faae 	bl	800fc2c <_Bfree>
 800f6d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	6013      	str	r3, [r2, #0]
 800f6d6:	27a3      	movs	r7, #163	; 0xa3
 800f6d8:	e793      	b.n	800f602 <__gethex+0x110>
 800f6da:	3101      	adds	r1, #1
 800f6dc:	105b      	asrs	r3, r3, #1
 800f6de:	e7b0      	b.n	800f642 <__gethex+0x150>
 800f6e0:	1e73      	subs	r3, r6, #1
 800f6e2:	9305      	str	r3, [sp, #20]
 800f6e4:	9a07      	ldr	r2, [sp, #28]
 800f6e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d018      	beq.n	800f720 <__gethex+0x22e>
 800f6ee:	f1bb 0f20 	cmp.w	fp, #32
 800f6f2:	d107      	bne.n	800f704 <__gethex+0x212>
 800f6f4:	9b04      	ldr	r3, [sp, #16]
 800f6f6:	f8c3 a000 	str.w	sl, [r3]
 800f6fa:	3304      	adds	r3, #4
 800f6fc:	f04f 0a00 	mov.w	sl, #0
 800f700:	9304      	str	r3, [sp, #16]
 800f702:	46d3      	mov	fp, sl
 800f704:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f708:	f7ff fede 	bl	800f4c8 <__hexdig_fun>
 800f70c:	f000 000f 	and.w	r0, r0, #15
 800f710:	fa00 f00b 	lsl.w	r0, r0, fp
 800f714:	ea4a 0a00 	orr.w	sl, sl, r0
 800f718:	f10b 0b04 	add.w	fp, fp, #4
 800f71c:	9b05      	ldr	r3, [sp, #20]
 800f71e:	e00d      	b.n	800f73c <__gethex+0x24a>
 800f720:	9b05      	ldr	r3, [sp, #20]
 800f722:	9a08      	ldr	r2, [sp, #32]
 800f724:	4413      	add	r3, r2
 800f726:	42bb      	cmp	r3, r7
 800f728:	d3e1      	bcc.n	800f6ee <__gethex+0x1fc>
 800f72a:	4618      	mov	r0, r3
 800f72c:	9a01      	ldr	r2, [sp, #4]
 800f72e:	9903      	ldr	r1, [sp, #12]
 800f730:	9309      	str	r3, [sp, #36]	; 0x24
 800f732:	f001 f8c8 	bl	80108c6 <strncmp>
 800f736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f738:	2800      	cmp	r0, #0
 800f73a:	d1d8      	bne.n	800f6ee <__gethex+0x1fc>
 800f73c:	461e      	mov	r6, r3
 800f73e:	e791      	b.n	800f664 <__gethex+0x172>
 800f740:	1eb9      	subs	r1, r7, #2
 800f742:	4628      	mov	r0, r5
 800f744:	f000 fe1c 	bl	8010380 <__any_on>
 800f748:	2800      	cmp	r0, #0
 800f74a:	d0b2      	beq.n	800f6b2 <__gethex+0x1c0>
 800f74c:	f04f 0a03 	mov.w	sl, #3
 800f750:	e7b1      	b.n	800f6b6 <__gethex+0x1c4>
 800f752:	da09      	bge.n	800f768 <__gethex+0x276>
 800f754:	1bf7      	subs	r7, r6, r7
 800f756:	4629      	mov	r1, r5
 800f758:	463a      	mov	r2, r7
 800f75a:	9802      	ldr	r0, [sp, #8]
 800f75c:	f000 fc32 	bl	800ffc4 <__lshift>
 800f760:	1be4      	subs	r4, r4, r7
 800f762:	4605      	mov	r5, r0
 800f764:	f100 0914 	add.w	r9, r0, #20
 800f768:	f04f 0a00 	mov.w	sl, #0
 800f76c:	e7a8      	b.n	800f6c0 <__gethex+0x1ce>
 800f76e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f772:	42a0      	cmp	r0, r4
 800f774:	dd6a      	ble.n	800f84c <__gethex+0x35a>
 800f776:	1b04      	subs	r4, r0, r4
 800f778:	42a6      	cmp	r6, r4
 800f77a:	dc2e      	bgt.n	800f7da <__gethex+0x2e8>
 800f77c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f780:	2b02      	cmp	r3, #2
 800f782:	d022      	beq.n	800f7ca <__gethex+0x2d8>
 800f784:	2b03      	cmp	r3, #3
 800f786:	d024      	beq.n	800f7d2 <__gethex+0x2e0>
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d115      	bne.n	800f7b8 <__gethex+0x2c6>
 800f78c:	42a6      	cmp	r6, r4
 800f78e:	d113      	bne.n	800f7b8 <__gethex+0x2c6>
 800f790:	2e01      	cmp	r6, #1
 800f792:	dc0b      	bgt.n	800f7ac <__gethex+0x2ba>
 800f794:	9a06      	ldr	r2, [sp, #24]
 800f796:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f79a:	6013      	str	r3, [r2, #0]
 800f79c:	2301      	movs	r3, #1
 800f79e:	612b      	str	r3, [r5, #16]
 800f7a0:	f8c9 3000 	str.w	r3, [r9]
 800f7a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7a6:	2762      	movs	r7, #98	; 0x62
 800f7a8:	601d      	str	r5, [r3, #0]
 800f7aa:	e72a      	b.n	800f602 <__gethex+0x110>
 800f7ac:	1e71      	subs	r1, r6, #1
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	f000 fde6 	bl	8010380 <__any_on>
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d1ed      	bne.n	800f794 <__gethex+0x2a2>
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	9802      	ldr	r0, [sp, #8]
 800f7bc:	f000 fa36 	bl	800fc2c <_Bfree>
 800f7c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	6013      	str	r3, [r2, #0]
 800f7c6:	2750      	movs	r7, #80	; 0x50
 800f7c8:	e71b      	b.n	800f602 <__gethex+0x110>
 800f7ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d0e1      	beq.n	800f794 <__gethex+0x2a2>
 800f7d0:	e7f2      	b.n	800f7b8 <__gethex+0x2c6>
 800f7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1dd      	bne.n	800f794 <__gethex+0x2a2>
 800f7d8:	e7ee      	b.n	800f7b8 <__gethex+0x2c6>
 800f7da:	1e67      	subs	r7, r4, #1
 800f7dc:	f1ba 0f00 	cmp.w	sl, #0
 800f7e0:	d131      	bne.n	800f846 <__gethex+0x354>
 800f7e2:	b127      	cbz	r7, 800f7ee <__gethex+0x2fc>
 800f7e4:	4639      	mov	r1, r7
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	f000 fdca 	bl	8010380 <__any_on>
 800f7ec:	4682      	mov	sl, r0
 800f7ee:	117a      	asrs	r2, r7, #5
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	f007 071f 	and.w	r7, r7, #31
 800f7f6:	fa03 f707 	lsl.w	r7, r3, r7
 800f7fa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f7fe:	4621      	mov	r1, r4
 800f800:	421f      	tst	r7, r3
 800f802:	4628      	mov	r0, r5
 800f804:	bf18      	it	ne
 800f806:	f04a 0a02 	orrne.w	sl, sl, #2
 800f80a:	1b36      	subs	r6, r6, r4
 800f80c:	f7ff fe22 	bl	800f454 <rshift>
 800f810:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f814:	2702      	movs	r7, #2
 800f816:	f1ba 0f00 	cmp.w	sl, #0
 800f81a:	d048      	beq.n	800f8ae <__gethex+0x3bc>
 800f81c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f820:	2b02      	cmp	r3, #2
 800f822:	d015      	beq.n	800f850 <__gethex+0x35e>
 800f824:	2b03      	cmp	r3, #3
 800f826:	d017      	beq.n	800f858 <__gethex+0x366>
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d109      	bne.n	800f840 <__gethex+0x34e>
 800f82c:	f01a 0f02 	tst.w	sl, #2
 800f830:	d006      	beq.n	800f840 <__gethex+0x34e>
 800f832:	f8d9 3000 	ldr.w	r3, [r9]
 800f836:	ea4a 0a03 	orr.w	sl, sl, r3
 800f83a:	f01a 0f01 	tst.w	sl, #1
 800f83e:	d10e      	bne.n	800f85e <__gethex+0x36c>
 800f840:	f047 0710 	orr.w	r7, r7, #16
 800f844:	e033      	b.n	800f8ae <__gethex+0x3bc>
 800f846:	f04f 0a01 	mov.w	sl, #1
 800f84a:	e7d0      	b.n	800f7ee <__gethex+0x2fc>
 800f84c:	2701      	movs	r7, #1
 800f84e:	e7e2      	b.n	800f816 <__gethex+0x324>
 800f850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f852:	f1c3 0301 	rsb	r3, r3, #1
 800f856:	9315      	str	r3, [sp, #84]	; 0x54
 800f858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d0f0      	beq.n	800f840 <__gethex+0x34e>
 800f85e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f862:	f105 0314 	add.w	r3, r5, #20
 800f866:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f86a:	eb03 010a 	add.w	r1, r3, sl
 800f86e:	f04f 0c00 	mov.w	ip, #0
 800f872:	4618      	mov	r0, r3
 800f874:	f853 2b04 	ldr.w	r2, [r3], #4
 800f878:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f87c:	d01c      	beq.n	800f8b8 <__gethex+0x3c6>
 800f87e:	3201      	adds	r2, #1
 800f880:	6002      	str	r2, [r0, #0]
 800f882:	2f02      	cmp	r7, #2
 800f884:	f105 0314 	add.w	r3, r5, #20
 800f888:	d138      	bne.n	800f8fc <__gethex+0x40a>
 800f88a:	f8d8 2000 	ldr.w	r2, [r8]
 800f88e:	3a01      	subs	r2, #1
 800f890:	42b2      	cmp	r2, r6
 800f892:	d10a      	bne.n	800f8aa <__gethex+0x3b8>
 800f894:	1171      	asrs	r1, r6, #5
 800f896:	2201      	movs	r2, #1
 800f898:	f006 061f 	and.w	r6, r6, #31
 800f89c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8a0:	fa02 f606 	lsl.w	r6, r2, r6
 800f8a4:	421e      	tst	r6, r3
 800f8a6:	bf18      	it	ne
 800f8a8:	4617      	movne	r7, r2
 800f8aa:	f047 0720 	orr.w	r7, r7, #32
 800f8ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8b0:	601d      	str	r5, [r3, #0]
 800f8b2:	9b06      	ldr	r3, [sp, #24]
 800f8b4:	601c      	str	r4, [r3, #0]
 800f8b6:	e6a4      	b.n	800f602 <__gethex+0x110>
 800f8b8:	4299      	cmp	r1, r3
 800f8ba:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8be:	d8d8      	bhi.n	800f872 <__gethex+0x380>
 800f8c0:	68ab      	ldr	r3, [r5, #8]
 800f8c2:	4599      	cmp	r9, r3
 800f8c4:	db12      	blt.n	800f8ec <__gethex+0x3fa>
 800f8c6:	6869      	ldr	r1, [r5, #4]
 800f8c8:	9802      	ldr	r0, [sp, #8]
 800f8ca:	3101      	adds	r1, #1
 800f8cc:	f000 f97a 	bl	800fbc4 <_Balloc>
 800f8d0:	692a      	ldr	r2, [r5, #16]
 800f8d2:	3202      	adds	r2, #2
 800f8d4:	f105 010c 	add.w	r1, r5, #12
 800f8d8:	4683      	mov	fp, r0
 800f8da:	0092      	lsls	r2, r2, #2
 800f8dc:	300c      	adds	r0, #12
 800f8de:	f7fc fe75 	bl	800c5cc <memcpy>
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	9802      	ldr	r0, [sp, #8]
 800f8e6:	f000 f9a1 	bl	800fc2c <_Bfree>
 800f8ea:	465d      	mov	r5, fp
 800f8ec:	692b      	ldr	r3, [r5, #16]
 800f8ee:	1c5a      	adds	r2, r3, #1
 800f8f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f8f4:	612a      	str	r2, [r5, #16]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	615a      	str	r2, [r3, #20]
 800f8fa:	e7c2      	b.n	800f882 <__gethex+0x390>
 800f8fc:	692a      	ldr	r2, [r5, #16]
 800f8fe:	454a      	cmp	r2, r9
 800f900:	dd0b      	ble.n	800f91a <__gethex+0x428>
 800f902:	2101      	movs	r1, #1
 800f904:	4628      	mov	r0, r5
 800f906:	f7ff fda5 	bl	800f454 <rshift>
 800f90a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f90e:	3401      	adds	r4, #1
 800f910:	42a3      	cmp	r3, r4
 800f912:	f6ff aed9 	blt.w	800f6c8 <__gethex+0x1d6>
 800f916:	2701      	movs	r7, #1
 800f918:	e7c7      	b.n	800f8aa <__gethex+0x3b8>
 800f91a:	f016 061f 	ands.w	r6, r6, #31
 800f91e:	d0fa      	beq.n	800f916 <__gethex+0x424>
 800f920:	449a      	add	sl, r3
 800f922:	f1c6 0620 	rsb	r6, r6, #32
 800f926:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f92a:	f000 fa0f 	bl	800fd4c <__hi0bits>
 800f92e:	42b0      	cmp	r0, r6
 800f930:	dbe7      	blt.n	800f902 <__gethex+0x410>
 800f932:	e7f0      	b.n	800f916 <__gethex+0x424>

0800f934 <L_shift>:
 800f934:	f1c2 0208 	rsb	r2, r2, #8
 800f938:	0092      	lsls	r2, r2, #2
 800f93a:	b570      	push	{r4, r5, r6, lr}
 800f93c:	f1c2 0620 	rsb	r6, r2, #32
 800f940:	6843      	ldr	r3, [r0, #4]
 800f942:	6804      	ldr	r4, [r0, #0]
 800f944:	fa03 f506 	lsl.w	r5, r3, r6
 800f948:	432c      	orrs	r4, r5
 800f94a:	40d3      	lsrs	r3, r2
 800f94c:	6004      	str	r4, [r0, #0]
 800f94e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f952:	4288      	cmp	r0, r1
 800f954:	d3f4      	bcc.n	800f940 <L_shift+0xc>
 800f956:	bd70      	pop	{r4, r5, r6, pc}

0800f958 <__match>:
 800f958:	b530      	push	{r4, r5, lr}
 800f95a:	6803      	ldr	r3, [r0, #0]
 800f95c:	3301      	adds	r3, #1
 800f95e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f962:	b914      	cbnz	r4, 800f96a <__match+0x12>
 800f964:	6003      	str	r3, [r0, #0]
 800f966:	2001      	movs	r0, #1
 800f968:	bd30      	pop	{r4, r5, pc}
 800f96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f96e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f972:	2d19      	cmp	r5, #25
 800f974:	bf98      	it	ls
 800f976:	3220      	addls	r2, #32
 800f978:	42a2      	cmp	r2, r4
 800f97a:	d0f0      	beq.n	800f95e <__match+0x6>
 800f97c:	2000      	movs	r0, #0
 800f97e:	e7f3      	b.n	800f968 <__match+0x10>

0800f980 <__hexnan>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	680b      	ldr	r3, [r1, #0]
 800f986:	6801      	ldr	r1, [r0, #0]
 800f988:	115f      	asrs	r7, r3, #5
 800f98a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f98e:	f013 031f 	ands.w	r3, r3, #31
 800f992:	b087      	sub	sp, #28
 800f994:	bf18      	it	ne
 800f996:	3704      	addne	r7, #4
 800f998:	2500      	movs	r5, #0
 800f99a:	1f3e      	subs	r6, r7, #4
 800f99c:	4682      	mov	sl, r0
 800f99e:	4690      	mov	r8, r2
 800f9a0:	9301      	str	r3, [sp, #4]
 800f9a2:	f847 5c04 	str.w	r5, [r7, #-4]
 800f9a6:	46b1      	mov	r9, r6
 800f9a8:	4634      	mov	r4, r6
 800f9aa:	9502      	str	r5, [sp, #8]
 800f9ac:	46ab      	mov	fp, r5
 800f9ae:	784a      	ldrb	r2, [r1, #1]
 800f9b0:	1c4b      	adds	r3, r1, #1
 800f9b2:	9303      	str	r3, [sp, #12]
 800f9b4:	b342      	cbz	r2, 800fa08 <__hexnan+0x88>
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	9105      	str	r1, [sp, #20]
 800f9ba:	9204      	str	r2, [sp, #16]
 800f9bc:	f7ff fd84 	bl	800f4c8 <__hexdig_fun>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d143      	bne.n	800fa4c <__hexnan+0xcc>
 800f9c4:	9a04      	ldr	r2, [sp, #16]
 800f9c6:	9905      	ldr	r1, [sp, #20]
 800f9c8:	2a20      	cmp	r2, #32
 800f9ca:	d818      	bhi.n	800f9fe <__hexnan+0x7e>
 800f9cc:	9b02      	ldr	r3, [sp, #8]
 800f9ce:	459b      	cmp	fp, r3
 800f9d0:	dd13      	ble.n	800f9fa <__hexnan+0x7a>
 800f9d2:	454c      	cmp	r4, r9
 800f9d4:	d206      	bcs.n	800f9e4 <__hexnan+0x64>
 800f9d6:	2d07      	cmp	r5, #7
 800f9d8:	dc04      	bgt.n	800f9e4 <__hexnan+0x64>
 800f9da:	462a      	mov	r2, r5
 800f9dc:	4649      	mov	r1, r9
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f7ff ffa8 	bl	800f934 <L_shift>
 800f9e4:	4544      	cmp	r4, r8
 800f9e6:	d944      	bls.n	800fa72 <__hexnan+0xf2>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	f1a4 0904 	sub.w	r9, r4, #4
 800f9ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9f2:	f8cd b008 	str.w	fp, [sp, #8]
 800f9f6:	464c      	mov	r4, r9
 800f9f8:	461d      	mov	r5, r3
 800f9fa:	9903      	ldr	r1, [sp, #12]
 800f9fc:	e7d7      	b.n	800f9ae <__hexnan+0x2e>
 800f9fe:	2a29      	cmp	r2, #41	; 0x29
 800fa00:	d14a      	bne.n	800fa98 <__hexnan+0x118>
 800fa02:	3102      	adds	r1, #2
 800fa04:	f8ca 1000 	str.w	r1, [sl]
 800fa08:	f1bb 0f00 	cmp.w	fp, #0
 800fa0c:	d044      	beq.n	800fa98 <__hexnan+0x118>
 800fa0e:	454c      	cmp	r4, r9
 800fa10:	d206      	bcs.n	800fa20 <__hexnan+0xa0>
 800fa12:	2d07      	cmp	r5, #7
 800fa14:	dc04      	bgt.n	800fa20 <__hexnan+0xa0>
 800fa16:	462a      	mov	r2, r5
 800fa18:	4649      	mov	r1, r9
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f7ff ff8a 	bl	800f934 <L_shift>
 800fa20:	4544      	cmp	r4, r8
 800fa22:	d928      	bls.n	800fa76 <__hexnan+0xf6>
 800fa24:	4643      	mov	r3, r8
 800fa26:	f854 2b04 	ldr.w	r2, [r4], #4
 800fa2a:	f843 2b04 	str.w	r2, [r3], #4
 800fa2e:	42a6      	cmp	r6, r4
 800fa30:	d2f9      	bcs.n	800fa26 <__hexnan+0xa6>
 800fa32:	2200      	movs	r2, #0
 800fa34:	f843 2b04 	str.w	r2, [r3], #4
 800fa38:	429e      	cmp	r6, r3
 800fa3a:	d2fb      	bcs.n	800fa34 <__hexnan+0xb4>
 800fa3c:	6833      	ldr	r3, [r6, #0]
 800fa3e:	b91b      	cbnz	r3, 800fa48 <__hexnan+0xc8>
 800fa40:	4546      	cmp	r6, r8
 800fa42:	d127      	bne.n	800fa94 <__hexnan+0x114>
 800fa44:	2301      	movs	r3, #1
 800fa46:	6033      	str	r3, [r6, #0]
 800fa48:	2005      	movs	r0, #5
 800fa4a:	e026      	b.n	800fa9a <__hexnan+0x11a>
 800fa4c:	3501      	adds	r5, #1
 800fa4e:	2d08      	cmp	r5, #8
 800fa50:	f10b 0b01 	add.w	fp, fp, #1
 800fa54:	dd06      	ble.n	800fa64 <__hexnan+0xe4>
 800fa56:	4544      	cmp	r4, r8
 800fa58:	d9cf      	bls.n	800f9fa <__hexnan+0x7a>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa60:	2501      	movs	r5, #1
 800fa62:	3c04      	subs	r4, #4
 800fa64:	6822      	ldr	r2, [r4, #0]
 800fa66:	f000 000f 	and.w	r0, r0, #15
 800fa6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fa6e:	6020      	str	r0, [r4, #0]
 800fa70:	e7c3      	b.n	800f9fa <__hexnan+0x7a>
 800fa72:	2508      	movs	r5, #8
 800fa74:	e7c1      	b.n	800f9fa <__hexnan+0x7a>
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d0df      	beq.n	800fa3c <__hexnan+0xbc>
 800fa7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa80:	f1c3 0320 	rsb	r3, r3, #32
 800fa84:	fa22 f303 	lsr.w	r3, r2, r3
 800fa88:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800fa8c:	401a      	ands	r2, r3
 800fa8e:	f847 2c04 	str.w	r2, [r7, #-4]
 800fa92:	e7d3      	b.n	800fa3c <__hexnan+0xbc>
 800fa94:	3e04      	subs	r6, #4
 800fa96:	e7d1      	b.n	800fa3c <__hexnan+0xbc>
 800fa98:	2004      	movs	r0, #4
 800fa9a:	b007      	add	sp, #28
 800fa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800faa0 <__locale_ctype_ptr_l>:
 800faa0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800faa4:	4770      	bx	lr

0800faa6 <__localeconv_l>:
 800faa6:	30f0      	adds	r0, #240	; 0xf0
 800faa8:	4770      	bx	lr
	...

0800faac <_localeconv_r>:
 800faac:	4b04      	ldr	r3, [pc, #16]	; (800fac0 <_localeconv_r+0x14>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6a18      	ldr	r0, [r3, #32]
 800fab2:	4b04      	ldr	r3, [pc, #16]	; (800fac4 <_localeconv_r+0x18>)
 800fab4:	2800      	cmp	r0, #0
 800fab6:	bf08      	it	eq
 800fab8:	4618      	moveq	r0, r3
 800faba:	30f0      	adds	r0, #240	; 0xf0
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop
 800fac0:	2000001c 	.word	0x2000001c
 800fac4:	20000080 	.word	0x20000080

0800fac8 <__swhatbuf_r>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	460e      	mov	r6, r1
 800facc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad0:	2900      	cmp	r1, #0
 800fad2:	b096      	sub	sp, #88	; 0x58
 800fad4:	4614      	mov	r4, r2
 800fad6:	461d      	mov	r5, r3
 800fad8:	da07      	bge.n	800faea <__swhatbuf_r+0x22>
 800fada:	2300      	movs	r3, #0
 800fadc:	602b      	str	r3, [r5, #0]
 800fade:	89b3      	ldrh	r3, [r6, #12]
 800fae0:	061a      	lsls	r2, r3, #24
 800fae2:	d410      	bmi.n	800fb06 <__swhatbuf_r+0x3e>
 800fae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fae8:	e00e      	b.n	800fb08 <__swhatbuf_r+0x40>
 800faea:	466a      	mov	r2, sp
 800faec:	f000 ff2c 	bl	8010948 <_fstat_r>
 800faf0:	2800      	cmp	r0, #0
 800faf2:	dbf2      	blt.n	800fada <__swhatbuf_r+0x12>
 800faf4:	9a01      	ldr	r2, [sp, #4]
 800faf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fafa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fafe:	425a      	negs	r2, r3
 800fb00:	415a      	adcs	r2, r3
 800fb02:	602a      	str	r2, [r5, #0]
 800fb04:	e7ee      	b.n	800fae4 <__swhatbuf_r+0x1c>
 800fb06:	2340      	movs	r3, #64	; 0x40
 800fb08:	2000      	movs	r0, #0
 800fb0a:	6023      	str	r3, [r4, #0]
 800fb0c:	b016      	add	sp, #88	; 0x58
 800fb0e:	bd70      	pop	{r4, r5, r6, pc}

0800fb10 <__smakebuf_r>:
 800fb10:	898b      	ldrh	r3, [r1, #12]
 800fb12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb14:	079d      	lsls	r5, r3, #30
 800fb16:	4606      	mov	r6, r0
 800fb18:	460c      	mov	r4, r1
 800fb1a:	d507      	bpl.n	800fb2c <__smakebuf_r+0x1c>
 800fb1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	6123      	str	r3, [r4, #16]
 800fb24:	2301      	movs	r3, #1
 800fb26:	6163      	str	r3, [r4, #20]
 800fb28:	b002      	add	sp, #8
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
 800fb2c:	ab01      	add	r3, sp, #4
 800fb2e:	466a      	mov	r2, sp
 800fb30:	f7ff ffca 	bl	800fac8 <__swhatbuf_r>
 800fb34:	9900      	ldr	r1, [sp, #0]
 800fb36:	4605      	mov	r5, r0
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f000 fc9f 	bl	801047c <_malloc_r>
 800fb3e:	b948      	cbnz	r0, 800fb54 <__smakebuf_r+0x44>
 800fb40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb44:	059a      	lsls	r2, r3, #22
 800fb46:	d4ef      	bmi.n	800fb28 <__smakebuf_r+0x18>
 800fb48:	f023 0303 	bic.w	r3, r3, #3
 800fb4c:	f043 0302 	orr.w	r3, r3, #2
 800fb50:	81a3      	strh	r3, [r4, #12]
 800fb52:	e7e3      	b.n	800fb1c <__smakebuf_r+0xc>
 800fb54:	4b0d      	ldr	r3, [pc, #52]	; (800fb8c <__smakebuf_r+0x7c>)
 800fb56:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	6020      	str	r0, [r4, #0]
 800fb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb60:	81a3      	strh	r3, [r4, #12]
 800fb62:	9b00      	ldr	r3, [sp, #0]
 800fb64:	6163      	str	r3, [r4, #20]
 800fb66:	9b01      	ldr	r3, [sp, #4]
 800fb68:	6120      	str	r0, [r4, #16]
 800fb6a:	b15b      	cbz	r3, 800fb84 <__smakebuf_r+0x74>
 800fb6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb70:	4630      	mov	r0, r6
 800fb72:	f000 fefb 	bl	801096c <_isatty_r>
 800fb76:	b128      	cbz	r0, 800fb84 <__smakebuf_r+0x74>
 800fb78:	89a3      	ldrh	r3, [r4, #12]
 800fb7a:	f023 0303 	bic.w	r3, r3, #3
 800fb7e:	f043 0301 	orr.w	r3, r3, #1
 800fb82:	81a3      	strh	r3, [r4, #12]
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	431d      	orrs	r5, r3
 800fb88:	81a5      	strh	r5, [r4, #12]
 800fb8a:	e7cd      	b.n	800fb28 <__smakebuf_r+0x18>
 800fb8c:	0800f309 	.word	0x0800f309

0800fb90 <malloc>:
 800fb90:	4b02      	ldr	r3, [pc, #8]	; (800fb9c <malloc+0xc>)
 800fb92:	4601      	mov	r1, r0
 800fb94:	6818      	ldr	r0, [r3, #0]
 800fb96:	f000 bc71 	b.w	801047c <_malloc_r>
 800fb9a:	bf00      	nop
 800fb9c:	2000001c 	.word	0x2000001c

0800fba0 <__ascii_mbtowc>:
 800fba0:	b082      	sub	sp, #8
 800fba2:	b901      	cbnz	r1, 800fba6 <__ascii_mbtowc+0x6>
 800fba4:	a901      	add	r1, sp, #4
 800fba6:	b142      	cbz	r2, 800fbba <__ascii_mbtowc+0x1a>
 800fba8:	b14b      	cbz	r3, 800fbbe <__ascii_mbtowc+0x1e>
 800fbaa:	7813      	ldrb	r3, [r2, #0]
 800fbac:	600b      	str	r3, [r1, #0]
 800fbae:	7812      	ldrb	r2, [r2, #0]
 800fbb0:	1c10      	adds	r0, r2, #0
 800fbb2:	bf18      	it	ne
 800fbb4:	2001      	movne	r0, #1
 800fbb6:	b002      	add	sp, #8
 800fbb8:	4770      	bx	lr
 800fbba:	4610      	mov	r0, r2
 800fbbc:	e7fb      	b.n	800fbb6 <__ascii_mbtowc+0x16>
 800fbbe:	f06f 0001 	mvn.w	r0, #1
 800fbc2:	e7f8      	b.n	800fbb6 <__ascii_mbtowc+0x16>

0800fbc4 <_Balloc>:
 800fbc4:	b570      	push	{r4, r5, r6, lr}
 800fbc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fbc8:	4604      	mov	r4, r0
 800fbca:	460e      	mov	r6, r1
 800fbcc:	b93d      	cbnz	r5, 800fbde <_Balloc+0x1a>
 800fbce:	2010      	movs	r0, #16
 800fbd0:	f7ff ffde 	bl	800fb90 <malloc>
 800fbd4:	6260      	str	r0, [r4, #36]	; 0x24
 800fbd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fbda:	6005      	str	r5, [r0, #0]
 800fbdc:	60c5      	str	r5, [r0, #12]
 800fbde:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fbe0:	68eb      	ldr	r3, [r5, #12]
 800fbe2:	b183      	cbz	r3, 800fc06 <_Balloc+0x42>
 800fbe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fbec:	b9b8      	cbnz	r0, 800fc1e <_Balloc+0x5a>
 800fbee:	2101      	movs	r1, #1
 800fbf0:	fa01 f506 	lsl.w	r5, r1, r6
 800fbf4:	1d6a      	adds	r2, r5, #5
 800fbf6:	0092      	lsls	r2, r2, #2
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	f000 fbe2 	bl	80103c2 <_calloc_r>
 800fbfe:	b160      	cbz	r0, 800fc1a <_Balloc+0x56>
 800fc00:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fc04:	e00e      	b.n	800fc24 <_Balloc+0x60>
 800fc06:	2221      	movs	r2, #33	; 0x21
 800fc08:	2104      	movs	r1, #4
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	f000 fbd9 	bl	80103c2 <_calloc_r>
 800fc10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc12:	60e8      	str	r0, [r5, #12]
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1e4      	bne.n	800fbe4 <_Balloc+0x20>
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	bd70      	pop	{r4, r5, r6, pc}
 800fc1e:	6802      	ldr	r2, [r0, #0]
 800fc20:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fc24:	2300      	movs	r3, #0
 800fc26:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc2a:	e7f7      	b.n	800fc1c <_Balloc+0x58>

0800fc2c <_Bfree>:
 800fc2c:	b570      	push	{r4, r5, r6, lr}
 800fc2e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fc30:	4606      	mov	r6, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	b93c      	cbnz	r4, 800fc46 <_Bfree+0x1a>
 800fc36:	2010      	movs	r0, #16
 800fc38:	f7ff ffaa 	bl	800fb90 <malloc>
 800fc3c:	6270      	str	r0, [r6, #36]	; 0x24
 800fc3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc42:	6004      	str	r4, [r0, #0]
 800fc44:	60c4      	str	r4, [r0, #12]
 800fc46:	b13d      	cbz	r5, 800fc58 <_Bfree+0x2c>
 800fc48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fc4a:	686a      	ldr	r2, [r5, #4]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc52:	6029      	str	r1, [r5, #0]
 800fc54:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fc58:	bd70      	pop	{r4, r5, r6, pc}

0800fc5a <__multadd>:
 800fc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc5e:	690d      	ldr	r5, [r1, #16]
 800fc60:	461f      	mov	r7, r3
 800fc62:	4606      	mov	r6, r0
 800fc64:	460c      	mov	r4, r1
 800fc66:	f101 0c14 	add.w	ip, r1, #20
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	f8dc 0000 	ldr.w	r0, [ip]
 800fc70:	b281      	uxth	r1, r0
 800fc72:	fb02 7101 	mla	r1, r2, r1, r7
 800fc76:	0c0f      	lsrs	r7, r1, #16
 800fc78:	0c00      	lsrs	r0, r0, #16
 800fc7a:	fb02 7000 	mla	r0, r2, r0, r7
 800fc7e:	b289      	uxth	r1, r1
 800fc80:	3301      	adds	r3, #1
 800fc82:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fc86:	429d      	cmp	r5, r3
 800fc88:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fc8c:	f84c 1b04 	str.w	r1, [ip], #4
 800fc90:	dcec      	bgt.n	800fc6c <__multadd+0x12>
 800fc92:	b1d7      	cbz	r7, 800fcca <__multadd+0x70>
 800fc94:	68a3      	ldr	r3, [r4, #8]
 800fc96:	42ab      	cmp	r3, r5
 800fc98:	dc12      	bgt.n	800fcc0 <__multadd+0x66>
 800fc9a:	6861      	ldr	r1, [r4, #4]
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	3101      	adds	r1, #1
 800fca0:	f7ff ff90 	bl	800fbc4 <_Balloc>
 800fca4:	6922      	ldr	r2, [r4, #16]
 800fca6:	3202      	adds	r2, #2
 800fca8:	f104 010c 	add.w	r1, r4, #12
 800fcac:	4680      	mov	r8, r0
 800fcae:	0092      	lsls	r2, r2, #2
 800fcb0:	300c      	adds	r0, #12
 800fcb2:	f7fc fc8b 	bl	800c5cc <memcpy>
 800fcb6:	4621      	mov	r1, r4
 800fcb8:	4630      	mov	r0, r6
 800fcba:	f7ff ffb7 	bl	800fc2c <_Bfree>
 800fcbe:	4644      	mov	r4, r8
 800fcc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcc4:	3501      	adds	r5, #1
 800fcc6:	615f      	str	r7, [r3, #20]
 800fcc8:	6125      	str	r5, [r4, #16]
 800fcca:	4620      	mov	r0, r4
 800fccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fcd0 <__s2b>:
 800fcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcd4:	460c      	mov	r4, r1
 800fcd6:	4615      	mov	r5, r2
 800fcd8:	461f      	mov	r7, r3
 800fcda:	2209      	movs	r2, #9
 800fcdc:	3308      	adds	r3, #8
 800fcde:	4606      	mov	r6, r0
 800fce0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fce4:	2100      	movs	r1, #0
 800fce6:	2201      	movs	r2, #1
 800fce8:	429a      	cmp	r2, r3
 800fcea:	db20      	blt.n	800fd2e <__s2b+0x5e>
 800fcec:	4630      	mov	r0, r6
 800fcee:	f7ff ff69 	bl	800fbc4 <_Balloc>
 800fcf2:	9b08      	ldr	r3, [sp, #32]
 800fcf4:	6143      	str	r3, [r0, #20]
 800fcf6:	2d09      	cmp	r5, #9
 800fcf8:	f04f 0301 	mov.w	r3, #1
 800fcfc:	6103      	str	r3, [r0, #16]
 800fcfe:	dd19      	ble.n	800fd34 <__s2b+0x64>
 800fd00:	f104 0809 	add.w	r8, r4, #9
 800fd04:	46c1      	mov	r9, r8
 800fd06:	442c      	add	r4, r5
 800fd08:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fd0c:	4601      	mov	r1, r0
 800fd0e:	3b30      	subs	r3, #48	; 0x30
 800fd10:	220a      	movs	r2, #10
 800fd12:	4630      	mov	r0, r6
 800fd14:	f7ff ffa1 	bl	800fc5a <__multadd>
 800fd18:	45a1      	cmp	r9, r4
 800fd1a:	d1f5      	bne.n	800fd08 <__s2b+0x38>
 800fd1c:	eb08 0405 	add.w	r4, r8, r5
 800fd20:	3c08      	subs	r4, #8
 800fd22:	1b2d      	subs	r5, r5, r4
 800fd24:	1963      	adds	r3, r4, r5
 800fd26:	42bb      	cmp	r3, r7
 800fd28:	db07      	blt.n	800fd3a <__s2b+0x6a>
 800fd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd2e:	0052      	lsls	r2, r2, #1
 800fd30:	3101      	adds	r1, #1
 800fd32:	e7d9      	b.n	800fce8 <__s2b+0x18>
 800fd34:	340a      	adds	r4, #10
 800fd36:	2509      	movs	r5, #9
 800fd38:	e7f3      	b.n	800fd22 <__s2b+0x52>
 800fd3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd3e:	4601      	mov	r1, r0
 800fd40:	3b30      	subs	r3, #48	; 0x30
 800fd42:	220a      	movs	r2, #10
 800fd44:	4630      	mov	r0, r6
 800fd46:	f7ff ff88 	bl	800fc5a <__multadd>
 800fd4a:	e7eb      	b.n	800fd24 <__s2b+0x54>

0800fd4c <__hi0bits>:
 800fd4c:	0c02      	lsrs	r2, r0, #16
 800fd4e:	0412      	lsls	r2, r2, #16
 800fd50:	4603      	mov	r3, r0
 800fd52:	b9b2      	cbnz	r2, 800fd82 <__hi0bits+0x36>
 800fd54:	0403      	lsls	r3, r0, #16
 800fd56:	2010      	movs	r0, #16
 800fd58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fd5c:	bf04      	itt	eq
 800fd5e:	021b      	lsleq	r3, r3, #8
 800fd60:	3008      	addeq	r0, #8
 800fd62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fd66:	bf04      	itt	eq
 800fd68:	011b      	lsleq	r3, r3, #4
 800fd6a:	3004      	addeq	r0, #4
 800fd6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fd70:	bf04      	itt	eq
 800fd72:	009b      	lsleq	r3, r3, #2
 800fd74:	3002      	addeq	r0, #2
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	db06      	blt.n	800fd88 <__hi0bits+0x3c>
 800fd7a:	005b      	lsls	r3, r3, #1
 800fd7c:	d503      	bpl.n	800fd86 <__hi0bits+0x3a>
 800fd7e:	3001      	adds	r0, #1
 800fd80:	4770      	bx	lr
 800fd82:	2000      	movs	r0, #0
 800fd84:	e7e8      	b.n	800fd58 <__hi0bits+0xc>
 800fd86:	2020      	movs	r0, #32
 800fd88:	4770      	bx	lr

0800fd8a <__lo0bits>:
 800fd8a:	6803      	ldr	r3, [r0, #0]
 800fd8c:	f013 0207 	ands.w	r2, r3, #7
 800fd90:	4601      	mov	r1, r0
 800fd92:	d00b      	beq.n	800fdac <__lo0bits+0x22>
 800fd94:	07da      	lsls	r2, r3, #31
 800fd96:	d423      	bmi.n	800fde0 <__lo0bits+0x56>
 800fd98:	0798      	lsls	r0, r3, #30
 800fd9a:	bf49      	itett	mi
 800fd9c:	085b      	lsrmi	r3, r3, #1
 800fd9e:	089b      	lsrpl	r3, r3, #2
 800fda0:	2001      	movmi	r0, #1
 800fda2:	600b      	strmi	r3, [r1, #0]
 800fda4:	bf5c      	itt	pl
 800fda6:	600b      	strpl	r3, [r1, #0]
 800fda8:	2002      	movpl	r0, #2
 800fdaa:	4770      	bx	lr
 800fdac:	b298      	uxth	r0, r3
 800fdae:	b9a8      	cbnz	r0, 800fddc <__lo0bits+0x52>
 800fdb0:	0c1b      	lsrs	r3, r3, #16
 800fdb2:	2010      	movs	r0, #16
 800fdb4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fdb8:	bf04      	itt	eq
 800fdba:	0a1b      	lsreq	r3, r3, #8
 800fdbc:	3008      	addeq	r0, #8
 800fdbe:	071a      	lsls	r2, r3, #28
 800fdc0:	bf04      	itt	eq
 800fdc2:	091b      	lsreq	r3, r3, #4
 800fdc4:	3004      	addeq	r0, #4
 800fdc6:	079a      	lsls	r2, r3, #30
 800fdc8:	bf04      	itt	eq
 800fdca:	089b      	lsreq	r3, r3, #2
 800fdcc:	3002      	addeq	r0, #2
 800fdce:	07da      	lsls	r2, r3, #31
 800fdd0:	d402      	bmi.n	800fdd8 <__lo0bits+0x4e>
 800fdd2:	085b      	lsrs	r3, r3, #1
 800fdd4:	d006      	beq.n	800fde4 <__lo0bits+0x5a>
 800fdd6:	3001      	adds	r0, #1
 800fdd8:	600b      	str	r3, [r1, #0]
 800fdda:	4770      	bx	lr
 800fddc:	4610      	mov	r0, r2
 800fdde:	e7e9      	b.n	800fdb4 <__lo0bits+0x2a>
 800fde0:	2000      	movs	r0, #0
 800fde2:	4770      	bx	lr
 800fde4:	2020      	movs	r0, #32
 800fde6:	4770      	bx	lr

0800fde8 <__i2b>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	460c      	mov	r4, r1
 800fdec:	2101      	movs	r1, #1
 800fdee:	f7ff fee9 	bl	800fbc4 <_Balloc>
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	6144      	str	r4, [r0, #20]
 800fdf6:	6102      	str	r2, [r0, #16]
 800fdf8:	bd10      	pop	{r4, pc}

0800fdfa <__multiply>:
 800fdfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfe:	4614      	mov	r4, r2
 800fe00:	690a      	ldr	r2, [r1, #16]
 800fe02:	6923      	ldr	r3, [r4, #16]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	bfb8      	it	lt
 800fe08:	460b      	movlt	r3, r1
 800fe0a:	4688      	mov	r8, r1
 800fe0c:	bfbc      	itt	lt
 800fe0e:	46a0      	movlt	r8, r4
 800fe10:	461c      	movlt	r4, r3
 800fe12:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fe16:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fe1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe1e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe22:	eb07 0609 	add.w	r6, r7, r9
 800fe26:	42b3      	cmp	r3, r6
 800fe28:	bfb8      	it	lt
 800fe2a:	3101      	addlt	r1, #1
 800fe2c:	f7ff feca 	bl	800fbc4 <_Balloc>
 800fe30:	f100 0514 	add.w	r5, r0, #20
 800fe34:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fe38:	462b      	mov	r3, r5
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	4573      	cmp	r3, lr
 800fe3e:	d316      	bcc.n	800fe6e <__multiply+0x74>
 800fe40:	f104 0214 	add.w	r2, r4, #20
 800fe44:	f108 0114 	add.w	r1, r8, #20
 800fe48:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fe4c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fe50:	9300      	str	r3, [sp, #0]
 800fe52:	9b00      	ldr	r3, [sp, #0]
 800fe54:	9201      	str	r2, [sp, #4]
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d80c      	bhi.n	800fe74 <__multiply+0x7a>
 800fe5a:	2e00      	cmp	r6, #0
 800fe5c:	dd03      	ble.n	800fe66 <__multiply+0x6c>
 800fe5e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d05d      	beq.n	800ff22 <__multiply+0x128>
 800fe66:	6106      	str	r6, [r0, #16]
 800fe68:	b003      	add	sp, #12
 800fe6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6e:	f843 2b04 	str.w	r2, [r3], #4
 800fe72:	e7e3      	b.n	800fe3c <__multiply+0x42>
 800fe74:	f8b2 b000 	ldrh.w	fp, [r2]
 800fe78:	f1bb 0f00 	cmp.w	fp, #0
 800fe7c:	d023      	beq.n	800fec6 <__multiply+0xcc>
 800fe7e:	4689      	mov	r9, r1
 800fe80:	46ac      	mov	ip, r5
 800fe82:	f04f 0800 	mov.w	r8, #0
 800fe86:	f859 4b04 	ldr.w	r4, [r9], #4
 800fe8a:	f8dc a000 	ldr.w	sl, [ip]
 800fe8e:	b2a3      	uxth	r3, r4
 800fe90:	fa1f fa8a 	uxth.w	sl, sl
 800fe94:	fb0b a303 	mla	r3, fp, r3, sl
 800fe98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fe9c:	f8dc 4000 	ldr.w	r4, [ip]
 800fea0:	4443      	add	r3, r8
 800fea2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fea6:	fb0b 840a 	mla	r4, fp, sl, r8
 800feaa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800feae:	46e2      	mov	sl, ip
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800feb6:	454f      	cmp	r7, r9
 800feb8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800febc:	f84a 3b04 	str.w	r3, [sl], #4
 800fec0:	d82b      	bhi.n	800ff1a <__multiply+0x120>
 800fec2:	f8cc 8004 	str.w	r8, [ip, #4]
 800fec6:	9b01      	ldr	r3, [sp, #4]
 800fec8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fecc:	3204      	adds	r2, #4
 800fece:	f1ba 0f00 	cmp.w	sl, #0
 800fed2:	d020      	beq.n	800ff16 <__multiply+0x11c>
 800fed4:	682b      	ldr	r3, [r5, #0]
 800fed6:	4689      	mov	r9, r1
 800fed8:	46a8      	mov	r8, r5
 800feda:	f04f 0b00 	mov.w	fp, #0
 800fede:	f8b9 c000 	ldrh.w	ip, [r9]
 800fee2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fee6:	fb0a 440c 	mla	r4, sl, ip, r4
 800feea:	445c      	add	r4, fp
 800feec:	46c4      	mov	ip, r8
 800feee:	b29b      	uxth	r3, r3
 800fef0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fef4:	f84c 3b04 	str.w	r3, [ip], #4
 800fef8:	f859 3b04 	ldr.w	r3, [r9], #4
 800fefc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ff00:	0c1b      	lsrs	r3, r3, #16
 800ff02:	fb0a b303 	mla	r3, sl, r3, fp
 800ff06:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ff0a:	454f      	cmp	r7, r9
 800ff0c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ff10:	d805      	bhi.n	800ff1e <__multiply+0x124>
 800ff12:	f8c8 3004 	str.w	r3, [r8, #4]
 800ff16:	3504      	adds	r5, #4
 800ff18:	e79b      	b.n	800fe52 <__multiply+0x58>
 800ff1a:	46d4      	mov	ip, sl
 800ff1c:	e7b3      	b.n	800fe86 <__multiply+0x8c>
 800ff1e:	46e0      	mov	r8, ip
 800ff20:	e7dd      	b.n	800fede <__multiply+0xe4>
 800ff22:	3e01      	subs	r6, #1
 800ff24:	e799      	b.n	800fe5a <__multiply+0x60>
	...

0800ff28 <__pow5mult>:
 800ff28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff2c:	4615      	mov	r5, r2
 800ff2e:	f012 0203 	ands.w	r2, r2, #3
 800ff32:	4606      	mov	r6, r0
 800ff34:	460f      	mov	r7, r1
 800ff36:	d007      	beq.n	800ff48 <__pow5mult+0x20>
 800ff38:	3a01      	subs	r2, #1
 800ff3a:	4c21      	ldr	r4, [pc, #132]	; (800ffc0 <__pow5mult+0x98>)
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff42:	f7ff fe8a 	bl	800fc5a <__multadd>
 800ff46:	4607      	mov	r7, r0
 800ff48:	10ad      	asrs	r5, r5, #2
 800ff4a:	d035      	beq.n	800ffb8 <__pow5mult+0x90>
 800ff4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff4e:	b93c      	cbnz	r4, 800ff60 <__pow5mult+0x38>
 800ff50:	2010      	movs	r0, #16
 800ff52:	f7ff fe1d 	bl	800fb90 <malloc>
 800ff56:	6270      	str	r0, [r6, #36]	; 0x24
 800ff58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff5c:	6004      	str	r4, [r0, #0]
 800ff5e:	60c4      	str	r4, [r0, #12]
 800ff60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff68:	b94c      	cbnz	r4, 800ff7e <__pow5mult+0x56>
 800ff6a:	f240 2171 	movw	r1, #625	; 0x271
 800ff6e:	4630      	mov	r0, r6
 800ff70:	f7ff ff3a 	bl	800fde8 <__i2b>
 800ff74:	2300      	movs	r3, #0
 800ff76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	6003      	str	r3, [r0, #0]
 800ff7e:	f04f 0800 	mov.w	r8, #0
 800ff82:	07eb      	lsls	r3, r5, #31
 800ff84:	d50a      	bpl.n	800ff9c <__pow5mult+0x74>
 800ff86:	4639      	mov	r1, r7
 800ff88:	4622      	mov	r2, r4
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	f7ff ff35 	bl	800fdfa <__multiply>
 800ff90:	4639      	mov	r1, r7
 800ff92:	4681      	mov	r9, r0
 800ff94:	4630      	mov	r0, r6
 800ff96:	f7ff fe49 	bl	800fc2c <_Bfree>
 800ff9a:	464f      	mov	r7, r9
 800ff9c:	106d      	asrs	r5, r5, #1
 800ff9e:	d00b      	beq.n	800ffb8 <__pow5mult+0x90>
 800ffa0:	6820      	ldr	r0, [r4, #0]
 800ffa2:	b938      	cbnz	r0, 800ffb4 <__pow5mult+0x8c>
 800ffa4:	4622      	mov	r2, r4
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f7ff ff26 	bl	800fdfa <__multiply>
 800ffae:	6020      	str	r0, [r4, #0]
 800ffb0:	f8c0 8000 	str.w	r8, [r0]
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	e7e4      	b.n	800ff82 <__pow5mult+0x5a>
 800ffb8:	4638      	mov	r0, r7
 800ffba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffbe:	bf00      	nop
 800ffc0:	08010e18 	.word	0x08010e18

0800ffc4 <__lshift>:
 800ffc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffc8:	460c      	mov	r4, r1
 800ffca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffce:	6923      	ldr	r3, [r4, #16]
 800ffd0:	6849      	ldr	r1, [r1, #4]
 800ffd2:	eb0a 0903 	add.w	r9, sl, r3
 800ffd6:	68a3      	ldr	r3, [r4, #8]
 800ffd8:	4607      	mov	r7, r0
 800ffda:	4616      	mov	r6, r2
 800ffdc:	f109 0501 	add.w	r5, r9, #1
 800ffe0:	42ab      	cmp	r3, r5
 800ffe2:	db32      	blt.n	801004a <__lshift+0x86>
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	f7ff fded 	bl	800fbc4 <_Balloc>
 800ffea:	2300      	movs	r3, #0
 800ffec:	4680      	mov	r8, r0
 800ffee:	f100 0114 	add.w	r1, r0, #20
 800fff2:	461a      	mov	r2, r3
 800fff4:	4553      	cmp	r3, sl
 800fff6:	db2b      	blt.n	8010050 <__lshift+0x8c>
 800fff8:	6920      	ldr	r0, [r4, #16]
 800fffa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fffe:	f104 0314 	add.w	r3, r4, #20
 8010002:	f016 021f 	ands.w	r2, r6, #31
 8010006:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801000a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801000e:	d025      	beq.n	801005c <__lshift+0x98>
 8010010:	f1c2 0e20 	rsb	lr, r2, #32
 8010014:	2000      	movs	r0, #0
 8010016:	681e      	ldr	r6, [r3, #0]
 8010018:	468a      	mov	sl, r1
 801001a:	4096      	lsls	r6, r2
 801001c:	4330      	orrs	r0, r6
 801001e:	f84a 0b04 	str.w	r0, [sl], #4
 8010022:	f853 0b04 	ldr.w	r0, [r3], #4
 8010026:	459c      	cmp	ip, r3
 8010028:	fa20 f00e 	lsr.w	r0, r0, lr
 801002c:	d814      	bhi.n	8010058 <__lshift+0x94>
 801002e:	6048      	str	r0, [r1, #4]
 8010030:	b108      	cbz	r0, 8010036 <__lshift+0x72>
 8010032:	f109 0502 	add.w	r5, r9, #2
 8010036:	3d01      	subs	r5, #1
 8010038:	4638      	mov	r0, r7
 801003a:	f8c8 5010 	str.w	r5, [r8, #16]
 801003e:	4621      	mov	r1, r4
 8010040:	f7ff fdf4 	bl	800fc2c <_Bfree>
 8010044:	4640      	mov	r0, r8
 8010046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801004a:	3101      	adds	r1, #1
 801004c:	005b      	lsls	r3, r3, #1
 801004e:	e7c7      	b.n	800ffe0 <__lshift+0x1c>
 8010050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010054:	3301      	adds	r3, #1
 8010056:	e7cd      	b.n	800fff4 <__lshift+0x30>
 8010058:	4651      	mov	r1, sl
 801005a:	e7dc      	b.n	8010016 <__lshift+0x52>
 801005c:	3904      	subs	r1, #4
 801005e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010062:	f841 2f04 	str.w	r2, [r1, #4]!
 8010066:	459c      	cmp	ip, r3
 8010068:	d8f9      	bhi.n	801005e <__lshift+0x9a>
 801006a:	e7e4      	b.n	8010036 <__lshift+0x72>

0801006c <__mcmp>:
 801006c:	6903      	ldr	r3, [r0, #16]
 801006e:	690a      	ldr	r2, [r1, #16]
 8010070:	1a9b      	subs	r3, r3, r2
 8010072:	b530      	push	{r4, r5, lr}
 8010074:	d10c      	bne.n	8010090 <__mcmp+0x24>
 8010076:	0092      	lsls	r2, r2, #2
 8010078:	3014      	adds	r0, #20
 801007a:	3114      	adds	r1, #20
 801007c:	1884      	adds	r4, r0, r2
 801007e:	4411      	add	r1, r2
 8010080:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010084:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010088:	4295      	cmp	r5, r2
 801008a:	d003      	beq.n	8010094 <__mcmp+0x28>
 801008c:	d305      	bcc.n	801009a <__mcmp+0x2e>
 801008e:	2301      	movs	r3, #1
 8010090:	4618      	mov	r0, r3
 8010092:	bd30      	pop	{r4, r5, pc}
 8010094:	42a0      	cmp	r0, r4
 8010096:	d3f3      	bcc.n	8010080 <__mcmp+0x14>
 8010098:	e7fa      	b.n	8010090 <__mcmp+0x24>
 801009a:	f04f 33ff 	mov.w	r3, #4294967295
 801009e:	e7f7      	b.n	8010090 <__mcmp+0x24>

080100a0 <__mdiff>:
 80100a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100a4:	460d      	mov	r5, r1
 80100a6:	4607      	mov	r7, r0
 80100a8:	4611      	mov	r1, r2
 80100aa:	4628      	mov	r0, r5
 80100ac:	4614      	mov	r4, r2
 80100ae:	f7ff ffdd 	bl	801006c <__mcmp>
 80100b2:	1e06      	subs	r6, r0, #0
 80100b4:	d108      	bne.n	80100c8 <__mdiff+0x28>
 80100b6:	4631      	mov	r1, r6
 80100b8:	4638      	mov	r0, r7
 80100ba:	f7ff fd83 	bl	800fbc4 <_Balloc>
 80100be:	2301      	movs	r3, #1
 80100c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80100c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100c8:	bfa4      	itt	ge
 80100ca:	4623      	movge	r3, r4
 80100cc:	462c      	movge	r4, r5
 80100ce:	4638      	mov	r0, r7
 80100d0:	6861      	ldr	r1, [r4, #4]
 80100d2:	bfa6      	itte	ge
 80100d4:	461d      	movge	r5, r3
 80100d6:	2600      	movge	r6, #0
 80100d8:	2601      	movlt	r6, #1
 80100da:	f7ff fd73 	bl	800fbc4 <_Balloc>
 80100de:	692b      	ldr	r3, [r5, #16]
 80100e0:	60c6      	str	r6, [r0, #12]
 80100e2:	6926      	ldr	r6, [r4, #16]
 80100e4:	f105 0914 	add.w	r9, r5, #20
 80100e8:	f104 0214 	add.w	r2, r4, #20
 80100ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80100f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80100f4:	f100 0514 	add.w	r5, r0, #20
 80100f8:	f04f 0e00 	mov.w	lr, #0
 80100fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8010100:	f859 4b04 	ldr.w	r4, [r9], #4
 8010104:	fa1e f18a 	uxtah	r1, lr, sl
 8010108:	b2a3      	uxth	r3, r4
 801010a:	1ac9      	subs	r1, r1, r3
 801010c:	0c23      	lsrs	r3, r4, #16
 801010e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010112:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010116:	b289      	uxth	r1, r1
 8010118:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801011c:	45c8      	cmp	r8, r9
 801011e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010122:	4694      	mov	ip, r2
 8010124:	f845 3b04 	str.w	r3, [r5], #4
 8010128:	d8e8      	bhi.n	80100fc <__mdiff+0x5c>
 801012a:	45bc      	cmp	ip, r7
 801012c:	d304      	bcc.n	8010138 <__mdiff+0x98>
 801012e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010132:	b183      	cbz	r3, 8010156 <__mdiff+0xb6>
 8010134:	6106      	str	r6, [r0, #16]
 8010136:	e7c5      	b.n	80100c4 <__mdiff+0x24>
 8010138:	f85c 1b04 	ldr.w	r1, [ip], #4
 801013c:	fa1e f381 	uxtah	r3, lr, r1
 8010140:	141a      	asrs	r2, r3, #16
 8010142:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010146:	b29b      	uxth	r3, r3
 8010148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801014c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010150:	f845 3b04 	str.w	r3, [r5], #4
 8010154:	e7e9      	b.n	801012a <__mdiff+0x8a>
 8010156:	3e01      	subs	r6, #1
 8010158:	e7e9      	b.n	801012e <__mdiff+0x8e>
	...

0801015c <__ulp>:
 801015c:	4b12      	ldr	r3, [pc, #72]	; (80101a8 <__ulp+0x4c>)
 801015e:	ee10 2a90 	vmov	r2, s1
 8010162:	401a      	ands	r2, r3
 8010164:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010168:	2b00      	cmp	r3, #0
 801016a:	dd04      	ble.n	8010176 <__ulp+0x1a>
 801016c:	2000      	movs	r0, #0
 801016e:	4619      	mov	r1, r3
 8010170:	ec41 0b10 	vmov	d0, r0, r1
 8010174:	4770      	bx	lr
 8010176:	425b      	negs	r3, r3
 8010178:	151b      	asrs	r3, r3, #20
 801017a:	2b13      	cmp	r3, #19
 801017c:	f04f 0000 	mov.w	r0, #0
 8010180:	f04f 0100 	mov.w	r1, #0
 8010184:	dc04      	bgt.n	8010190 <__ulp+0x34>
 8010186:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801018a:	fa42 f103 	asr.w	r1, r2, r3
 801018e:	e7ef      	b.n	8010170 <__ulp+0x14>
 8010190:	3b14      	subs	r3, #20
 8010192:	2b1e      	cmp	r3, #30
 8010194:	f04f 0201 	mov.w	r2, #1
 8010198:	bfda      	itte	le
 801019a:	f1c3 031f 	rsble	r3, r3, #31
 801019e:	fa02 f303 	lslle.w	r3, r2, r3
 80101a2:	4613      	movgt	r3, r2
 80101a4:	4618      	mov	r0, r3
 80101a6:	e7e3      	b.n	8010170 <__ulp+0x14>
 80101a8:	7ff00000 	.word	0x7ff00000

080101ac <__b2d>:
 80101ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ae:	6905      	ldr	r5, [r0, #16]
 80101b0:	f100 0714 	add.w	r7, r0, #20
 80101b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80101b8:	1f2e      	subs	r6, r5, #4
 80101ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80101be:	4620      	mov	r0, r4
 80101c0:	f7ff fdc4 	bl	800fd4c <__hi0bits>
 80101c4:	f1c0 0320 	rsb	r3, r0, #32
 80101c8:	280a      	cmp	r0, #10
 80101ca:	600b      	str	r3, [r1, #0]
 80101cc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010244 <__b2d+0x98>
 80101d0:	dc14      	bgt.n	80101fc <__b2d+0x50>
 80101d2:	f1c0 0e0b 	rsb	lr, r0, #11
 80101d6:	fa24 f10e 	lsr.w	r1, r4, lr
 80101da:	42b7      	cmp	r7, r6
 80101dc:	ea41 030c 	orr.w	r3, r1, ip
 80101e0:	bf34      	ite	cc
 80101e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80101e6:	2100      	movcs	r1, #0
 80101e8:	3015      	adds	r0, #21
 80101ea:	fa04 f000 	lsl.w	r0, r4, r0
 80101ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80101f2:	ea40 0201 	orr.w	r2, r0, r1
 80101f6:	ec43 2b10 	vmov	d0, r2, r3
 80101fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101fc:	42b7      	cmp	r7, r6
 80101fe:	bf3a      	itte	cc
 8010200:	f1a5 0608 	subcc.w	r6, r5, #8
 8010204:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010208:	2100      	movcs	r1, #0
 801020a:	380b      	subs	r0, #11
 801020c:	d015      	beq.n	801023a <__b2d+0x8e>
 801020e:	4084      	lsls	r4, r0
 8010210:	f1c0 0520 	rsb	r5, r0, #32
 8010214:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010218:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801021c:	42be      	cmp	r6, r7
 801021e:	fa21 fc05 	lsr.w	ip, r1, r5
 8010222:	ea44 030c 	orr.w	r3, r4, ip
 8010226:	bf8c      	ite	hi
 8010228:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801022c:	2400      	movls	r4, #0
 801022e:	fa01 f000 	lsl.w	r0, r1, r0
 8010232:	40ec      	lsrs	r4, r5
 8010234:	ea40 0204 	orr.w	r2, r0, r4
 8010238:	e7dd      	b.n	80101f6 <__b2d+0x4a>
 801023a:	ea44 030c 	orr.w	r3, r4, ip
 801023e:	460a      	mov	r2, r1
 8010240:	e7d9      	b.n	80101f6 <__b2d+0x4a>
 8010242:	bf00      	nop
 8010244:	3ff00000 	.word	0x3ff00000

08010248 <__d2b>:
 8010248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801024c:	460e      	mov	r6, r1
 801024e:	2101      	movs	r1, #1
 8010250:	ec59 8b10 	vmov	r8, r9, d0
 8010254:	4615      	mov	r5, r2
 8010256:	f7ff fcb5 	bl	800fbc4 <_Balloc>
 801025a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801025e:	4607      	mov	r7, r0
 8010260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010264:	bb34      	cbnz	r4, 80102b4 <__d2b+0x6c>
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	f1b8 0300 	subs.w	r3, r8, #0
 801026c:	d027      	beq.n	80102be <__d2b+0x76>
 801026e:	a802      	add	r0, sp, #8
 8010270:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010274:	f7ff fd89 	bl	800fd8a <__lo0bits>
 8010278:	9900      	ldr	r1, [sp, #0]
 801027a:	b1f0      	cbz	r0, 80102ba <__d2b+0x72>
 801027c:	9a01      	ldr	r2, [sp, #4]
 801027e:	f1c0 0320 	rsb	r3, r0, #32
 8010282:	fa02 f303 	lsl.w	r3, r2, r3
 8010286:	430b      	orrs	r3, r1
 8010288:	40c2      	lsrs	r2, r0
 801028a:	617b      	str	r3, [r7, #20]
 801028c:	9201      	str	r2, [sp, #4]
 801028e:	9b01      	ldr	r3, [sp, #4]
 8010290:	61bb      	str	r3, [r7, #24]
 8010292:	2b00      	cmp	r3, #0
 8010294:	bf14      	ite	ne
 8010296:	2102      	movne	r1, #2
 8010298:	2101      	moveq	r1, #1
 801029a:	6139      	str	r1, [r7, #16]
 801029c:	b1c4      	cbz	r4, 80102d0 <__d2b+0x88>
 801029e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80102a2:	4404      	add	r4, r0
 80102a4:	6034      	str	r4, [r6, #0]
 80102a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102aa:	6028      	str	r0, [r5, #0]
 80102ac:	4638      	mov	r0, r7
 80102ae:	b003      	add	sp, #12
 80102b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102b8:	e7d5      	b.n	8010266 <__d2b+0x1e>
 80102ba:	6179      	str	r1, [r7, #20]
 80102bc:	e7e7      	b.n	801028e <__d2b+0x46>
 80102be:	a801      	add	r0, sp, #4
 80102c0:	f7ff fd63 	bl	800fd8a <__lo0bits>
 80102c4:	9b01      	ldr	r3, [sp, #4]
 80102c6:	617b      	str	r3, [r7, #20]
 80102c8:	2101      	movs	r1, #1
 80102ca:	6139      	str	r1, [r7, #16]
 80102cc:	3020      	adds	r0, #32
 80102ce:	e7e5      	b.n	801029c <__d2b+0x54>
 80102d0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80102d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102d8:	6030      	str	r0, [r6, #0]
 80102da:	6918      	ldr	r0, [r3, #16]
 80102dc:	f7ff fd36 	bl	800fd4c <__hi0bits>
 80102e0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80102e4:	e7e1      	b.n	80102aa <__d2b+0x62>

080102e6 <__ratio>:
 80102e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ea:	4688      	mov	r8, r1
 80102ec:	4669      	mov	r1, sp
 80102ee:	4681      	mov	r9, r0
 80102f0:	f7ff ff5c 	bl	80101ac <__b2d>
 80102f4:	a901      	add	r1, sp, #4
 80102f6:	4640      	mov	r0, r8
 80102f8:	ec57 6b10 	vmov	r6, r7, d0
 80102fc:	f7ff ff56 	bl	80101ac <__b2d>
 8010300:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010304:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010308:	eba3 0c02 	sub.w	ip, r3, r2
 801030c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010310:	1a9b      	subs	r3, r3, r2
 8010312:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010316:	ec5b ab10 	vmov	sl, fp, d0
 801031a:	2b00      	cmp	r3, #0
 801031c:	bfce      	itee	gt
 801031e:	463a      	movgt	r2, r7
 8010320:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010324:	465a      	movle	r2, fp
 8010326:	4659      	mov	r1, fp
 8010328:	463d      	mov	r5, r7
 801032a:	bfd4      	ite	le
 801032c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010330:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010334:	4630      	mov	r0, r6
 8010336:	ee10 2a10 	vmov	r2, s0
 801033a:	460b      	mov	r3, r1
 801033c:	4629      	mov	r1, r5
 801033e:	f7f0 fa8d 	bl	800085c <__aeabi_ddiv>
 8010342:	ec41 0b10 	vmov	d0, r0, r1
 8010346:	b003      	add	sp, #12
 8010348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801034c <__copybits>:
 801034c:	3901      	subs	r1, #1
 801034e:	b510      	push	{r4, lr}
 8010350:	1149      	asrs	r1, r1, #5
 8010352:	6914      	ldr	r4, [r2, #16]
 8010354:	3101      	adds	r1, #1
 8010356:	f102 0314 	add.w	r3, r2, #20
 801035a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801035e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010362:	42a3      	cmp	r3, r4
 8010364:	4602      	mov	r2, r0
 8010366:	d303      	bcc.n	8010370 <__copybits+0x24>
 8010368:	2300      	movs	r3, #0
 801036a:	428a      	cmp	r2, r1
 801036c:	d305      	bcc.n	801037a <__copybits+0x2e>
 801036e:	bd10      	pop	{r4, pc}
 8010370:	f853 2b04 	ldr.w	r2, [r3], #4
 8010374:	f840 2b04 	str.w	r2, [r0], #4
 8010378:	e7f3      	b.n	8010362 <__copybits+0x16>
 801037a:	f842 3b04 	str.w	r3, [r2], #4
 801037e:	e7f4      	b.n	801036a <__copybits+0x1e>

08010380 <__any_on>:
 8010380:	f100 0214 	add.w	r2, r0, #20
 8010384:	6900      	ldr	r0, [r0, #16]
 8010386:	114b      	asrs	r3, r1, #5
 8010388:	4298      	cmp	r0, r3
 801038a:	b510      	push	{r4, lr}
 801038c:	db11      	blt.n	80103b2 <__any_on+0x32>
 801038e:	dd0a      	ble.n	80103a6 <__any_on+0x26>
 8010390:	f011 011f 	ands.w	r1, r1, #31
 8010394:	d007      	beq.n	80103a6 <__any_on+0x26>
 8010396:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801039a:	fa24 f001 	lsr.w	r0, r4, r1
 801039e:	fa00 f101 	lsl.w	r1, r0, r1
 80103a2:	428c      	cmp	r4, r1
 80103a4:	d10b      	bne.n	80103be <__any_on+0x3e>
 80103a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d803      	bhi.n	80103b6 <__any_on+0x36>
 80103ae:	2000      	movs	r0, #0
 80103b0:	bd10      	pop	{r4, pc}
 80103b2:	4603      	mov	r3, r0
 80103b4:	e7f7      	b.n	80103a6 <__any_on+0x26>
 80103b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103ba:	2900      	cmp	r1, #0
 80103bc:	d0f5      	beq.n	80103aa <__any_on+0x2a>
 80103be:	2001      	movs	r0, #1
 80103c0:	e7f6      	b.n	80103b0 <__any_on+0x30>

080103c2 <_calloc_r>:
 80103c2:	b538      	push	{r3, r4, r5, lr}
 80103c4:	fb02 f401 	mul.w	r4, r2, r1
 80103c8:	4621      	mov	r1, r4
 80103ca:	f000 f857 	bl	801047c <_malloc_r>
 80103ce:	4605      	mov	r5, r0
 80103d0:	b118      	cbz	r0, 80103da <_calloc_r+0x18>
 80103d2:	4622      	mov	r2, r4
 80103d4:	2100      	movs	r1, #0
 80103d6:	f7fc f91d 	bl	800c614 <memset>
 80103da:	4628      	mov	r0, r5
 80103dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080103e0 <_free_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4605      	mov	r5, r0
 80103e4:	2900      	cmp	r1, #0
 80103e6:	d045      	beq.n	8010474 <_free_r+0x94>
 80103e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103ec:	1f0c      	subs	r4, r1, #4
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	bfb8      	it	lt
 80103f2:	18e4      	addlt	r4, r4, r3
 80103f4:	f000 fadc 	bl	80109b0 <__malloc_lock>
 80103f8:	4a1f      	ldr	r2, [pc, #124]	; (8010478 <_free_r+0x98>)
 80103fa:	6813      	ldr	r3, [r2, #0]
 80103fc:	4610      	mov	r0, r2
 80103fe:	b933      	cbnz	r3, 801040e <_free_r+0x2e>
 8010400:	6063      	str	r3, [r4, #4]
 8010402:	6014      	str	r4, [r2, #0]
 8010404:	4628      	mov	r0, r5
 8010406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801040a:	f000 bad2 	b.w	80109b2 <__malloc_unlock>
 801040e:	42a3      	cmp	r3, r4
 8010410:	d90c      	bls.n	801042c <_free_r+0x4c>
 8010412:	6821      	ldr	r1, [r4, #0]
 8010414:	1862      	adds	r2, r4, r1
 8010416:	4293      	cmp	r3, r2
 8010418:	bf04      	itt	eq
 801041a:	681a      	ldreq	r2, [r3, #0]
 801041c:	685b      	ldreq	r3, [r3, #4]
 801041e:	6063      	str	r3, [r4, #4]
 8010420:	bf04      	itt	eq
 8010422:	1852      	addeq	r2, r2, r1
 8010424:	6022      	streq	r2, [r4, #0]
 8010426:	6004      	str	r4, [r0, #0]
 8010428:	e7ec      	b.n	8010404 <_free_r+0x24>
 801042a:	4613      	mov	r3, r2
 801042c:	685a      	ldr	r2, [r3, #4]
 801042e:	b10a      	cbz	r2, 8010434 <_free_r+0x54>
 8010430:	42a2      	cmp	r2, r4
 8010432:	d9fa      	bls.n	801042a <_free_r+0x4a>
 8010434:	6819      	ldr	r1, [r3, #0]
 8010436:	1858      	adds	r0, r3, r1
 8010438:	42a0      	cmp	r0, r4
 801043a:	d10b      	bne.n	8010454 <_free_r+0x74>
 801043c:	6820      	ldr	r0, [r4, #0]
 801043e:	4401      	add	r1, r0
 8010440:	1858      	adds	r0, r3, r1
 8010442:	4282      	cmp	r2, r0
 8010444:	6019      	str	r1, [r3, #0]
 8010446:	d1dd      	bne.n	8010404 <_free_r+0x24>
 8010448:	6810      	ldr	r0, [r2, #0]
 801044a:	6852      	ldr	r2, [r2, #4]
 801044c:	605a      	str	r2, [r3, #4]
 801044e:	4401      	add	r1, r0
 8010450:	6019      	str	r1, [r3, #0]
 8010452:	e7d7      	b.n	8010404 <_free_r+0x24>
 8010454:	d902      	bls.n	801045c <_free_r+0x7c>
 8010456:	230c      	movs	r3, #12
 8010458:	602b      	str	r3, [r5, #0]
 801045a:	e7d3      	b.n	8010404 <_free_r+0x24>
 801045c:	6820      	ldr	r0, [r4, #0]
 801045e:	1821      	adds	r1, r4, r0
 8010460:	428a      	cmp	r2, r1
 8010462:	bf04      	itt	eq
 8010464:	6811      	ldreq	r1, [r2, #0]
 8010466:	6852      	ldreq	r2, [r2, #4]
 8010468:	6062      	str	r2, [r4, #4]
 801046a:	bf04      	itt	eq
 801046c:	1809      	addeq	r1, r1, r0
 801046e:	6021      	streq	r1, [r4, #0]
 8010470:	605c      	str	r4, [r3, #4]
 8010472:	e7c7      	b.n	8010404 <_free_r+0x24>
 8010474:	bd38      	pop	{r3, r4, r5, pc}
 8010476:	bf00      	nop
 8010478:	20003e90 	.word	0x20003e90

0801047c <_malloc_r>:
 801047c:	b570      	push	{r4, r5, r6, lr}
 801047e:	1ccd      	adds	r5, r1, #3
 8010480:	f025 0503 	bic.w	r5, r5, #3
 8010484:	3508      	adds	r5, #8
 8010486:	2d0c      	cmp	r5, #12
 8010488:	bf38      	it	cc
 801048a:	250c      	movcc	r5, #12
 801048c:	2d00      	cmp	r5, #0
 801048e:	4606      	mov	r6, r0
 8010490:	db01      	blt.n	8010496 <_malloc_r+0x1a>
 8010492:	42a9      	cmp	r1, r5
 8010494:	d903      	bls.n	801049e <_malloc_r+0x22>
 8010496:	230c      	movs	r3, #12
 8010498:	6033      	str	r3, [r6, #0]
 801049a:	2000      	movs	r0, #0
 801049c:	bd70      	pop	{r4, r5, r6, pc}
 801049e:	f000 fa87 	bl	80109b0 <__malloc_lock>
 80104a2:	4a21      	ldr	r2, [pc, #132]	; (8010528 <_malloc_r+0xac>)
 80104a4:	6814      	ldr	r4, [r2, #0]
 80104a6:	4621      	mov	r1, r4
 80104a8:	b991      	cbnz	r1, 80104d0 <_malloc_r+0x54>
 80104aa:	4c20      	ldr	r4, [pc, #128]	; (801052c <_malloc_r+0xb0>)
 80104ac:	6823      	ldr	r3, [r4, #0]
 80104ae:	b91b      	cbnz	r3, 80104b8 <_malloc_r+0x3c>
 80104b0:	4630      	mov	r0, r6
 80104b2:	f000 f9b5 	bl	8010820 <_sbrk_r>
 80104b6:	6020      	str	r0, [r4, #0]
 80104b8:	4629      	mov	r1, r5
 80104ba:	4630      	mov	r0, r6
 80104bc:	f000 f9b0 	bl	8010820 <_sbrk_r>
 80104c0:	1c43      	adds	r3, r0, #1
 80104c2:	d124      	bne.n	801050e <_malloc_r+0x92>
 80104c4:	230c      	movs	r3, #12
 80104c6:	6033      	str	r3, [r6, #0]
 80104c8:	4630      	mov	r0, r6
 80104ca:	f000 fa72 	bl	80109b2 <__malloc_unlock>
 80104ce:	e7e4      	b.n	801049a <_malloc_r+0x1e>
 80104d0:	680b      	ldr	r3, [r1, #0]
 80104d2:	1b5b      	subs	r3, r3, r5
 80104d4:	d418      	bmi.n	8010508 <_malloc_r+0x8c>
 80104d6:	2b0b      	cmp	r3, #11
 80104d8:	d90f      	bls.n	80104fa <_malloc_r+0x7e>
 80104da:	600b      	str	r3, [r1, #0]
 80104dc:	50cd      	str	r5, [r1, r3]
 80104de:	18cc      	adds	r4, r1, r3
 80104e0:	4630      	mov	r0, r6
 80104e2:	f000 fa66 	bl	80109b2 <__malloc_unlock>
 80104e6:	f104 000b 	add.w	r0, r4, #11
 80104ea:	1d23      	adds	r3, r4, #4
 80104ec:	f020 0007 	bic.w	r0, r0, #7
 80104f0:	1ac3      	subs	r3, r0, r3
 80104f2:	d0d3      	beq.n	801049c <_malloc_r+0x20>
 80104f4:	425a      	negs	r2, r3
 80104f6:	50e2      	str	r2, [r4, r3]
 80104f8:	e7d0      	b.n	801049c <_malloc_r+0x20>
 80104fa:	428c      	cmp	r4, r1
 80104fc:	684b      	ldr	r3, [r1, #4]
 80104fe:	bf16      	itet	ne
 8010500:	6063      	strne	r3, [r4, #4]
 8010502:	6013      	streq	r3, [r2, #0]
 8010504:	460c      	movne	r4, r1
 8010506:	e7eb      	b.n	80104e0 <_malloc_r+0x64>
 8010508:	460c      	mov	r4, r1
 801050a:	6849      	ldr	r1, [r1, #4]
 801050c:	e7cc      	b.n	80104a8 <_malloc_r+0x2c>
 801050e:	1cc4      	adds	r4, r0, #3
 8010510:	f024 0403 	bic.w	r4, r4, #3
 8010514:	42a0      	cmp	r0, r4
 8010516:	d005      	beq.n	8010524 <_malloc_r+0xa8>
 8010518:	1a21      	subs	r1, r4, r0
 801051a:	4630      	mov	r0, r6
 801051c:	f000 f980 	bl	8010820 <_sbrk_r>
 8010520:	3001      	adds	r0, #1
 8010522:	d0cf      	beq.n	80104c4 <_malloc_r+0x48>
 8010524:	6025      	str	r5, [r4, #0]
 8010526:	e7db      	b.n	80104e0 <_malloc_r+0x64>
 8010528:	20003e90 	.word	0x20003e90
 801052c:	20003e94 	.word	0x20003e94

08010530 <_realloc_r>:
 8010530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010532:	4607      	mov	r7, r0
 8010534:	4614      	mov	r4, r2
 8010536:	460e      	mov	r6, r1
 8010538:	b921      	cbnz	r1, 8010544 <_realloc_r+0x14>
 801053a:	4611      	mov	r1, r2
 801053c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010540:	f7ff bf9c 	b.w	801047c <_malloc_r>
 8010544:	b922      	cbnz	r2, 8010550 <_realloc_r+0x20>
 8010546:	f7ff ff4b 	bl	80103e0 <_free_r>
 801054a:	4625      	mov	r5, r4
 801054c:	4628      	mov	r0, r5
 801054e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010550:	f000 fa30 	bl	80109b4 <_malloc_usable_size_r>
 8010554:	42a0      	cmp	r0, r4
 8010556:	d20f      	bcs.n	8010578 <_realloc_r+0x48>
 8010558:	4621      	mov	r1, r4
 801055a:	4638      	mov	r0, r7
 801055c:	f7ff ff8e 	bl	801047c <_malloc_r>
 8010560:	4605      	mov	r5, r0
 8010562:	2800      	cmp	r0, #0
 8010564:	d0f2      	beq.n	801054c <_realloc_r+0x1c>
 8010566:	4631      	mov	r1, r6
 8010568:	4622      	mov	r2, r4
 801056a:	f7fc f82f 	bl	800c5cc <memcpy>
 801056e:	4631      	mov	r1, r6
 8010570:	4638      	mov	r0, r7
 8010572:	f7ff ff35 	bl	80103e0 <_free_r>
 8010576:	e7e9      	b.n	801054c <_realloc_r+0x1c>
 8010578:	4635      	mov	r5, r6
 801057a:	e7e7      	b.n	801054c <_realloc_r+0x1c>

0801057c <__ssputs_r>:
 801057c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010580:	688e      	ldr	r6, [r1, #8]
 8010582:	429e      	cmp	r6, r3
 8010584:	4682      	mov	sl, r0
 8010586:	460c      	mov	r4, r1
 8010588:	4690      	mov	r8, r2
 801058a:	4699      	mov	r9, r3
 801058c:	d837      	bhi.n	80105fe <__ssputs_r+0x82>
 801058e:	898a      	ldrh	r2, [r1, #12]
 8010590:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010594:	d031      	beq.n	80105fa <__ssputs_r+0x7e>
 8010596:	6825      	ldr	r5, [r4, #0]
 8010598:	6909      	ldr	r1, [r1, #16]
 801059a:	1a6f      	subs	r7, r5, r1
 801059c:	6965      	ldr	r5, [r4, #20]
 801059e:	2302      	movs	r3, #2
 80105a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80105a8:	f109 0301 	add.w	r3, r9, #1
 80105ac:	443b      	add	r3, r7
 80105ae:	429d      	cmp	r5, r3
 80105b0:	bf38      	it	cc
 80105b2:	461d      	movcc	r5, r3
 80105b4:	0553      	lsls	r3, r2, #21
 80105b6:	d530      	bpl.n	801061a <__ssputs_r+0x9e>
 80105b8:	4629      	mov	r1, r5
 80105ba:	f7ff ff5f 	bl	801047c <_malloc_r>
 80105be:	4606      	mov	r6, r0
 80105c0:	b950      	cbnz	r0, 80105d8 <__ssputs_r+0x5c>
 80105c2:	230c      	movs	r3, #12
 80105c4:	f8ca 3000 	str.w	r3, [sl]
 80105c8:	89a3      	ldrh	r3, [r4, #12]
 80105ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105ce:	81a3      	strh	r3, [r4, #12]
 80105d0:	f04f 30ff 	mov.w	r0, #4294967295
 80105d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105d8:	463a      	mov	r2, r7
 80105da:	6921      	ldr	r1, [r4, #16]
 80105dc:	f7fb fff6 	bl	800c5cc <memcpy>
 80105e0:	89a3      	ldrh	r3, [r4, #12]
 80105e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80105e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105ea:	81a3      	strh	r3, [r4, #12]
 80105ec:	6126      	str	r6, [r4, #16]
 80105ee:	6165      	str	r5, [r4, #20]
 80105f0:	443e      	add	r6, r7
 80105f2:	1bed      	subs	r5, r5, r7
 80105f4:	6026      	str	r6, [r4, #0]
 80105f6:	60a5      	str	r5, [r4, #8]
 80105f8:	464e      	mov	r6, r9
 80105fa:	454e      	cmp	r6, r9
 80105fc:	d900      	bls.n	8010600 <__ssputs_r+0x84>
 80105fe:	464e      	mov	r6, r9
 8010600:	4632      	mov	r2, r6
 8010602:	4641      	mov	r1, r8
 8010604:	6820      	ldr	r0, [r4, #0]
 8010606:	f7fb ffec 	bl	800c5e2 <memmove>
 801060a:	68a3      	ldr	r3, [r4, #8]
 801060c:	1b9b      	subs	r3, r3, r6
 801060e:	60a3      	str	r3, [r4, #8]
 8010610:	6823      	ldr	r3, [r4, #0]
 8010612:	441e      	add	r6, r3
 8010614:	6026      	str	r6, [r4, #0]
 8010616:	2000      	movs	r0, #0
 8010618:	e7dc      	b.n	80105d4 <__ssputs_r+0x58>
 801061a:	462a      	mov	r2, r5
 801061c:	f7ff ff88 	bl	8010530 <_realloc_r>
 8010620:	4606      	mov	r6, r0
 8010622:	2800      	cmp	r0, #0
 8010624:	d1e2      	bne.n	80105ec <__ssputs_r+0x70>
 8010626:	6921      	ldr	r1, [r4, #16]
 8010628:	4650      	mov	r0, sl
 801062a:	f7ff fed9 	bl	80103e0 <_free_r>
 801062e:	e7c8      	b.n	80105c2 <__ssputs_r+0x46>

08010630 <_svfiprintf_r>:
 8010630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	461d      	mov	r5, r3
 8010636:	898b      	ldrh	r3, [r1, #12]
 8010638:	061f      	lsls	r7, r3, #24
 801063a:	b09d      	sub	sp, #116	; 0x74
 801063c:	4680      	mov	r8, r0
 801063e:	460c      	mov	r4, r1
 8010640:	4616      	mov	r6, r2
 8010642:	d50f      	bpl.n	8010664 <_svfiprintf_r+0x34>
 8010644:	690b      	ldr	r3, [r1, #16]
 8010646:	b96b      	cbnz	r3, 8010664 <_svfiprintf_r+0x34>
 8010648:	2140      	movs	r1, #64	; 0x40
 801064a:	f7ff ff17 	bl	801047c <_malloc_r>
 801064e:	6020      	str	r0, [r4, #0]
 8010650:	6120      	str	r0, [r4, #16]
 8010652:	b928      	cbnz	r0, 8010660 <_svfiprintf_r+0x30>
 8010654:	230c      	movs	r3, #12
 8010656:	f8c8 3000 	str.w	r3, [r8]
 801065a:	f04f 30ff 	mov.w	r0, #4294967295
 801065e:	e0c8      	b.n	80107f2 <_svfiprintf_r+0x1c2>
 8010660:	2340      	movs	r3, #64	; 0x40
 8010662:	6163      	str	r3, [r4, #20]
 8010664:	2300      	movs	r3, #0
 8010666:	9309      	str	r3, [sp, #36]	; 0x24
 8010668:	2320      	movs	r3, #32
 801066a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801066e:	2330      	movs	r3, #48	; 0x30
 8010670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010674:	9503      	str	r5, [sp, #12]
 8010676:	f04f 0b01 	mov.w	fp, #1
 801067a:	4637      	mov	r7, r6
 801067c:	463d      	mov	r5, r7
 801067e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010682:	b10b      	cbz	r3, 8010688 <_svfiprintf_r+0x58>
 8010684:	2b25      	cmp	r3, #37	; 0x25
 8010686:	d13e      	bne.n	8010706 <_svfiprintf_r+0xd6>
 8010688:	ebb7 0a06 	subs.w	sl, r7, r6
 801068c:	d00b      	beq.n	80106a6 <_svfiprintf_r+0x76>
 801068e:	4653      	mov	r3, sl
 8010690:	4632      	mov	r2, r6
 8010692:	4621      	mov	r1, r4
 8010694:	4640      	mov	r0, r8
 8010696:	f7ff ff71 	bl	801057c <__ssputs_r>
 801069a:	3001      	adds	r0, #1
 801069c:	f000 80a4 	beq.w	80107e8 <_svfiprintf_r+0x1b8>
 80106a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106a2:	4453      	add	r3, sl
 80106a4:	9309      	str	r3, [sp, #36]	; 0x24
 80106a6:	783b      	ldrb	r3, [r7, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	f000 809d 	beq.w	80107e8 <_svfiprintf_r+0x1b8>
 80106ae:	2300      	movs	r3, #0
 80106b0:	f04f 32ff 	mov.w	r2, #4294967295
 80106b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106b8:	9304      	str	r3, [sp, #16]
 80106ba:	9307      	str	r3, [sp, #28]
 80106bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106c0:	931a      	str	r3, [sp, #104]	; 0x68
 80106c2:	462f      	mov	r7, r5
 80106c4:	2205      	movs	r2, #5
 80106c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80106ca:	4850      	ldr	r0, [pc, #320]	; (801080c <_svfiprintf_r+0x1dc>)
 80106cc:	f7ef fd90 	bl	80001f0 <memchr>
 80106d0:	9b04      	ldr	r3, [sp, #16]
 80106d2:	b9d0      	cbnz	r0, 801070a <_svfiprintf_r+0xda>
 80106d4:	06d9      	lsls	r1, r3, #27
 80106d6:	bf44      	itt	mi
 80106d8:	2220      	movmi	r2, #32
 80106da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80106de:	071a      	lsls	r2, r3, #28
 80106e0:	bf44      	itt	mi
 80106e2:	222b      	movmi	r2, #43	; 0x2b
 80106e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80106e8:	782a      	ldrb	r2, [r5, #0]
 80106ea:	2a2a      	cmp	r2, #42	; 0x2a
 80106ec:	d015      	beq.n	801071a <_svfiprintf_r+0xea>
 80106ee:	9a07      	ldr	r2, [sp, #28]
 80106f0:	462f      	mov	r7, r5
 80106f2:	2000      	movs	r0, #0
 80106f4:	250a      	movs	r5, #10
 80106f6:	4639      	mov	r1, r7
 80106f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106fc:	3b30      	subs	r3, #48	; 0x30
 80106fe:	2b09      	cmp	r3, #9
 8010700:	d94d      	bls.n	801079e <_svfiprintf_r+0x16e>
 8010702:	b1b8      	cbz	r0, 8010734 <_svfiprintf_r+0x104>
 8010704:	e00f      	b.n	8010726 <_svfiprintf_r+0xf6>
 8010706:	462f      	mov	r7, r5
 8010708:	e7b8      	b.n	801067c <_svfiprintf_r+0x4c>
 801070a:	4a40      	ldr	r2, [pc, #256]	; (801080c <_svfiprintf_r+0x1dc>)
 801070c:	1a80      	subs	r0, r0, r2
 801070e:	fa0b f000 	lsl.w	r0, fp, r0
 8010712:	4318      	orrs	r0, r3
 8010714:	9004      	str	r0, [sp, #16]
 8010716:	463d      	mov	r5, r7
 8010718:	e7d3      	b.n	80106c2 <_svfiprintf_r+0x92>
 801071a:	9a03      	ldr	r2, [sp, #12]
 801071c:	1d11      	adds	r1, r2, #4
 801071e:	6812      	ldr	r2, [r2, #0]
 8010720:	9103      	str	r1, [sp, #12]
 8010722:	2a00      	cmp	r2, #0
 8010724:	db01      	blt.n	801072a <_svfiprintf_r+0xfa>
 8010726:	9207      	str	r2, [sp, #28]
 8010728:	e004      	b.n	8010734 <_svfiprintf_r+0x104>
 801072a:	4252      	negs	r2, r2
 801072c:	f043 0302 	orr.w	r3, r3, #2
 8010730:	9207      	str	r2, [sp, #28]
 8010732:	9304      	str	r3, [sp, #16]
 8010734:	783b      	ldrb	r3, [r7, #0]
 8010736:	2b2e      	cmp	r3, #46	; 0x2e
 8010738:	d10c      	bne.n	8010754 <_svfiprintf_r+0x124>
 801073a:	787b      	ldrb	r3, [r7, #1]
 801073c:	2b2a      	cmp	r3, #42	; 0x2a
 801073e:	d133      	bne.n	80107a8 <_svfiprintf_r+0x178>
 8010740:	9b03      	ldr	r3, [sp, #12]
 8010742:	1d1a      	adds	r2, r3, #4
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	9203      	str	r2, [sp, #12]
 8010748:	2b00      	cmp	r3, #0
 801074a:	bfb8      	it	lt
 801074c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010750:	3702      	adds	r7, #2
 8010752:	9305      	str	r3, [sp, #20]
 8010754:	4d2e      	ldr	r5, [pc, #184]	; (8010810 <_svfiprintf_r+0x1e0>)
 8010756:	7839      	ldrb	r1, [r7, #0]
 8010758:	2203      	movs	r2, #3
 801075a:	4628      	mov	r0, r5
 801075c:	f7ef fd48 	bl	80001f0 <memchr>
 8010760:	b138      	cbz	r0, 8010772 <_svfiprintf_r+0x142>
 8010762:	2340      	movs	r3, #64	; 0x40
 8010764:	1b40      	subs	r0, r0, r5
 8010766:	fa03 f000 	lsl.w	r0, r3, r0
 801076a:	9b04      	ldr	r3, [sp, #16]
 801076c:	4303      	orrs	r3, r0
 801076e:	3701      	adds	r7, #1
 8010770:	9304      	str	r3, [sp, #16]
 8010772:	7839      	ldrb	r1, [r7, #0]
 8010774:	4827      	ldr	r0, [pc, #156]	; (8010814 <_svfiprintf_r+0x1e4>)
 8010776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801077a:	2206      	movs	r2, #6
 801077c:	1c7e      	adds	r6, r7, #1
 801077e:	f7ef fd37 	bl	80001f0 <memchr>
 8010782:	2800      	cmp	r0, #0
 8010784:	d038      	beq.n	80107f8 <_svfiprintf_r+0x1c8>
 8010786:	4b24      	ldr	r3, [pc, #144]	; (8010818 <_svfiprintf_r+0x1e8>)
 8010788:	bb13      	cbnz	r3, 80107d0 <_svfiprintf_r+0x1a0>
 801078a:	9b03      	ldr	r3, [sp, #12]
 801078c:	3307      	adds	r3, #7
 801078e:	f023 0307 	bic.w	r3, r3, #7
 8010792:	3308      	adds	r3, #8
 8010794:	9303      	str	r3, [sp, #12]
 8010796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010798:	444b      	add	r3, r9
 801079a:	9309      	str	r3, [sp, #36]	; 0x24
 801079c:	e76d      	b.n	801067a <_svfiprintf_r+0x4a>
 801079e:	fb05 3202 	mla	r2, r5, r2, r3
 80107a2:	2001      	movs	r0, #1
 80107a4:	460f      	mov	r7, r1
 80107a6:	e7a6      	b.n	80106f6 <_svfiprintf_r+0xc6>
 80107a8:	2300      	movs	r3, #0
 80107aa:	3701      	adds	r7, #1
 80107ac:	9305      	str	r3, [sp, #20]
 80107ae:	4619      	mov	r1, r3
 80107b0:	250a      	movs	r5, #10
 80107b2:	4638      	mov	r0, r7
 80107b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107b8:	3a30      	subs	r2, #48	; 0x30
 80107ba:	2a09      	cmp	r2, #9
 80107bc:	d903      	bls.n	80107c6 <_svfiprintf_r+0x196>
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d0c8      	beq.n	8010754 <_svfiprintf_r+0x124>
 80107c2:	9105      	str	r1, [sp, #20]
 80107c4:	e7c6      	b.n	8010754 <_svfiprintf_r+0x124>
 80107c6:	fb05 2101 	mla	r1, r5, r1, r2
 80107ca:	2301      	movs	r3, #1
 80107cc:	4607      	mov	r7, r0
 80107ce:	e7f0      	b.n	80107b2 <_svfiprintf_r+0x182>
 80107d0:	ab03      	add	r3, sp, #12
 80107d2:	9300      	str	r3, [sp, #0]
 80107d4:	4622      	mov	r2, r4
 80107d6:	4b11      	ldr	r3, [pc, #68]	; (801081c <_svfiprintf_r+0x1ec>)
 80107d8:	a904      	add	r1, sp, #16
 80107da:	4640      	mov	r0, r8
 80107dc:	f7fc f8f6 	bl	800c9cc <_printf_float>
 80107e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80107e4:	4681      	mov	r9, r0
 80107e6:	d1d6      	bne.n	8010796 <_svfiprintf_r+0x166>
 80107e8:	89a3      	ldrh	r3, [r4, #12]
 80107ea:	065b      	lsls	r3, r3, #25
 80107ec:	f53f af35 	bmi.w	801065a <_svfiprintf_r+0x2a>
 80107f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107f2:	b01d      	add	sp, #116	; 0x74
 80107f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f8:	ab03      	add	r3, sp, #12
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	4622      	mov	r2, r4
 80107fe:	4b07      	ldr	r3, [pc, #28]	; (801081c <_svfiprintf_r+0x1ec>)
 8010800:	a904      	add	r1, sp, #16
 8010802:	4640      	mov	r0, r8
 8010804:	f7fc fb98 	bl	800cf38 <_printf_i>
 8010808:	e7ea      	b.n	80107e0 <_svfiprintf_r+0x1b0>
 801080a:	bf00      	nop
 801080c:	08010c08 	.word	0x08010c08
 8010810:	08010c0e 	.word	0x08010c0e
 8010814:	08010c12 	.word	0x08010c12
 8010818:	0800c9cd 	.word	0x0800c9cd
 801081c:	0801057d 	.word	0x0801057d

08010820 <_sbrk_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4c06      	ldr	r4, [pc, #24]	; (801083c <_sbrk_r+0x1c>)
 8010824:	2300      	movs	r3, #0
 8010826:	4605      	mov	r5, r0
 8010828:	4608      	mov	r0, r1
 801082a:	6023      	str	r3, [r4, #0]
 801082c:	f7f2 fc30 	bl	8003090 <_sbrk>
 8010830:	1c43      	adds	r3, r0, #1
 8010832:	d102      	bne.n	801083a <_sbrk_r+0x1a>
 8010834:	6823      	ldr	r3, [r4, #0]
 8010836:	b103      	cbz	r3, 801083a <_sbrk_r+0x1a>
 8010838:	602b      	str	r3, [r5, #0]
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	20003f1c 	.word	0x20003f1c

08010840 <__sread>:
 8010840:	b510      	push	{r4, lr}
 8010842:	460c      	mov	r4, r1
 8010844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010848:	f000 f8bc 	bl	80109c4 <_read_r>
 801084c:	2800      	cmp	r0, #0
 801084e:	bfab      	itete	ge
 8010850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010852:	89a3      	ldrhlt	r3, [r4, #12]
 8010854:	181b      	addge	r3, r3, r0
 8010856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801085a:	bfac      	ite	ge
 801085c:	6563      	strge	r3, [r4, #84]	; 0x54
 801085e:	81a3      	strhlt	r3, [r4, #12]
 8010860:	bd10      	pop	{r4, pc}

08010862 <__swrite>:
 8010862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010866:	461f      	mov	r7, r3
 8010868:	898b      	ldrh	r3, [r1, #12]
 801086a:	05db      	lsls	r3, r3, #23
 801086c:	4605      	mov	r5, r0
 801086e:	460c      	mov	r4, r1
 8010870:	4616      	mov	r6, r2
 8010872:	d505      	bpl.n	8010880 <__swrite+0x1e>
 8010874:	2302      	movs	r3, #2
 8010876:	2200      	movs	r2, #0
 8010878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801087c:	f000 f886 	bl	801098c <_lseek_r>
 8010880:	89a3      	ldrh	r3, [r4, #12]
 8010882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801088a:	81a3      	strh	r3, [r4, #12]
 801088c:	4632      	mov	r2, r6
 801088e:	463b      	mov	r3, r7
 8010890:	4628      	mov	r0, r5
 8010892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010896:	f000 b835 	b.w	8010904 <_write_r>

0801089a <__sseek>:
 801089a:	b510      	push	{r4, lr}
 801089c:	460c      	mov	r4, r1
 801089e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a2:	f000 f873 	bl	801098c <_lseek_r>
 80108a6:	1c43      	adds	r3, r0, #1
 80108a8:	89a3      	ldrh	r3, [r4, #12]
 80108aa:	bf15      	itete	ne
 80108ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80108ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80108b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80108b6:	81a3      	strheq	r3, [r4, #12]
 80108b8:	bf18      	it	ne
 80108ba:	81a3      	strhne	r3, [r4, #12]
 80108bc:	bd10      	pop	{r4, pc}

080108be <__sclose>:
 80108be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108c2:	f000 b831 	b.w	8010928 <_close_r>

080108c6 <strncmp>:
 80108c6:	b510      	push	{r4, lr}
 80108c8:	b16a      	cbz	r2, 80108e6 <strncmp+0x20>
 80108ca:	3901      	subs	r1, #1
 80108cc:	1884      	adds	r4, r0, r2
 80108ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80108d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d103      	bne.n	80108e2 <strncmp+0x1c>
 80108da:	42a0      	cmp	r0, r4
 80108dc:	d001      	beq.n	80108e2 <strncmp+0x1c>
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1f5      	bne.n	80108ce <strncmp+0x8>
 80108e2:	1a98      	subs	r0, r3, r2
 80108e4:	bd10      	pop	{r4, pc}
 80108e6:	4610      	mov	r0, r2
 80108e8:	e7fc      	b.n	80108e4 <strncmp+0x1e>

080108ea <__ascii_wctomb>:
 80108ea:	b149      	cbz	r1, 8010900 <__ascii_wctomb+0x16>
 80108ec:	2aff      	cmp	r2, #255	; 0xff
 80108ee:	bf85      	ittet	hi
 80108f0:	238a      	movhi	r3, #138	; 0x8a
 80108f2:	6003      	strhi	r3, [r0, #0]
 80108f4:	700a      	strbls	r2, [r1, #0]
 80108f6:	f04f 30ff 	movhi.w	r0, #4294967295
 80108fa:	bf98      	it	ls
 80108fc:	2001      	movls	r0, #1
 80108fe:	4770      	bx	lr
 8010900:	4608      	mov	r0, r1
 8010902:	4770      	bx	lr

08010904 <_write_r>:
 8010904:	b538      	push	{r3, r4, r5, lr}
 8010906:	4c07      	ldr	r4, [pc, #28]	; (8010924 <_write_r+0x20>)
 8010908:	4605      	mov	r5, r0
 801090a:	4608      	mov	r0, r1
 801090c:	4611      	mov	r1, r2
 801090e:	2200      	movs	r2, #0
 8010910:	6022      	str	r2, [r4, #0]
 8010912:	461a      	mov	r2, r3
 8010914:	f7f1 fc2c 	bl	8002170 <_write>
 8010918:	1c43      	adds	r3, r0, #1
 801091a:	d102      	bne.n	8010922 <_write_r+0x1e>
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	b103      	cbz	r3, 8010922 <_write_r+0x1e>
 8010920:	602b      	str	r3, [r5, #0]
 8010922:	bd38      	pop	{r3, r4, r5, pc}
 8010924:	20003f1c 	.word	0x20003f1c

08010928 <_close_r>:
 8010928:	b538      	push	{r3, r4, r5, lr}
 801092a:	4c06      	ldr	r4, [pc, #24]	; (8010944 <_close_r+0x1c>)
 801092c:	2300      	movs	r3, #0
 801092e:	4605      	mov	r5, r0
 8010930:	4608      	mov	r0, r1
 8010932:	6023      	str	r3, [r4, #0]
 8010934:	f7f2 fb78 	bl	8003028 <_close>
 8010938:	1c43      	adds	r3, r0, #1
 801093a:	d102      	bne.n	8010942 <_close_r+0x1a>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	b103      	cbz	r3, 8010942 <_close_r+0x1a>
 8010940:	602b      	str	r3, [r5, #0]
 8010942:	bd38      	pop	{r3, r4, r5, pc}
 8010944:	20003f1c 	.word	0x20003f1c

08010948 <_fstat_r>:
 8010948:	b538      	push	{r3, r4, r5, lr}
 801094a:	4c07      	ldr	r4, [pc, #28]	; (8010968 <_fstat_r+0x20>)
 801094c:	2300      	movs	r3, #0
 801094e:	4605      	mov	r5, r0
 8010950:	4608      	mov	r0, r1
 8010952:	4611      	mov	r1, r2
 8010954:	6023      	str	r3, [r4, #0]
 8010956:	f7f2 fb73 	bl	8003040 <_fstat>
 801095a:	1c43      	adds	r3, r0, #1
 801095c:	d102      	bne.n	8010964 <_fstat_r+0x1c>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	b103      	cbz	r3, 8010964 <_fstat_r+0x1c>
 8010962:	602b      	str	r3, [r5, #0]
 8010964:	bd38      	pop	{r3, r4, r5, pc}
 8010966:	bf00      	nop
 8010968:	20003f1c 	.word	0x20003f1c

0801096c <_isatty_r>:
 801096c:	b538      	push	{r3, r4, r5, lr}
 801096e:	4c06      	ldr	r4, [pc, #24]	; (8010988 <_isatty_r+0x1c>)
 8010970:	2300      	movs	r3, #0
 8010972:	4605      	mov	r5, r0
 8010974:	4608      	mov	r0, r1
 8010976:	6023      	str	r3, [r4, #0]
 8010978:	f7f2 fb72 	bl	8003060 <_isatty>
 801097c:	1c43      	adds	r3, r0, #1
 801097e:	d102      	bne.n	8010986 <_isatty_r+0x1a>
 8010980:	6823      	ldr	r3, [r4, #0]
 8010982:	b103      	cbz	r3, 8010986 <_isatty_r+0x1a>
 8010984:	602b      	str	r3, [r5, #0]
 8010986:	bd38      	pop	{r3, r4, r5, pc}
 8010988:	20003f1c 	.word	0x20003f1c

0801098c <_lseek_r>:
 801098c:	b538      	push	{r3, r4, r5, lr}
 801098e:	4c07      	ldr	r4, [pc, #28]	; (80109ac <_lseek_r+0x20>)
 8010990:	4605      	mov	r5, r0
 8010992:	4608      	mov	r0, r1
 8010994:	4611      	mov	r1, r2
 8010996:	2200      	movs	r2, #0
 8010998:	6022      	str	r2, [r4, #0]
 801099a:	461a      	mov	r2, r3
 801099c:	f7f2 fb6b 	bl	8003076 <_lseek>
 80109a0:	1c43      	adds	r3, r0, #1
 80109a2:	d102      	bne.n	80109aa <_lseek_r+0x1e>
 80109a4:	6823      	ldr	r3, [r4, #0]
 80109a6:	b103      	cbz	r3, 80109aa <_lseek_r+0x1e>
 80109a8:	602b      	str	r3, [r5, #0]
 80109aa:	bd38      	pop	{r3, r4, r5, pc}
 80109ac:	20003f1c 	.word	0x20003f1c

080109b0 <__malloc_lock>:
 80109b0:	4770      	bx	lr

080109b2 <__malloc_unlock>:
 80109b2:	4770      	bx	lr

080109b4 <_malloc_usable_size_r>:
 80109b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109b8:	1f18      	subs	r0, r3, #4
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	bfbc      	itt	lt
 80109be:	580b      	ldrlt	r3, [r1, r0]
 80109c0:	18c0      	addlt	r0, r0, r3
 80109c2:	4770      	bx	lr

080109c4 <_read_r>:
 80109c4:	b538      	push	{r3, r4, r5, lr}
 80109c6:	4c07      	ldr	r4, [pc, #28]	; (80109e4 <_read_r+0x20>)
 80109c8:	4605      	mov	r5, r0
 80109ca:	4608      	mov	r0, r1
 80109cc:	4611      	mov	r1, r2
 80109ce:	2200      	movs	r2, #0
 80109d0:	6022      	str	r2, [r4, #0]
 80109d2:	461a      	mov	r2, r3
 80109d4:	f7f1 fbae 	bl	8002134 <_read>
 80109d8:	1c43      	adds	r3, r0, #1
 80109da:	d102      	bne.n	80109e2 <_read_r+0x1e>
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	b103      	cbz	r3, 80109e2 <_read_r+0x1e>
 80109e0:	602b      	str	r3, [r5, #0]
 80109e2:	bd38      	pop	{r3, r4, r5, pc}
 80109e4:	20003f1c 	.word	0x20003f1c

080109e8 <_init>:
 80109e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ea:	bf00      	nop
 80109ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ee:	bc08      	pop	{r3}
 80109f0:	469e      	mov	lr, r3
 80109f2:	4770      	bx	lr

080109f4 <_fini>:
 80109f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f6:	bf00      	nop
 80109f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109fa:	bc08      	pop	{r3}
 80109fc:	469e      	mov	lr, r3
 80109fe:	4770      	bx	lr
