
nucleo-f303_freeRTOS-LCD-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800dc38  0800dc38  0001dc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e010  0800e010  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800e010  0800e010  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e010  0800e010  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e010  0800e010  0001e010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e018  0800e018  0001e018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800e020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a48  20000204  0800e224  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00008404  20003c4c  0800e224  00023c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ec8  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ffc  00000000  00000000  000440fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  000480f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001568  00000000  00000000  000497f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008e68  00000000  00000000  0004ad60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014509  00000000  00000000  00053bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdcbc  00000000  00000000  000680d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135d8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fe4  00000000  00000000  00135e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc20 	.word	0x0800dc20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800dc20 	.word	0x0800dc20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <_ZN3lcd5DelayEm>:
#include <stm32f3xx_hal_gpio.h>

namespace lcd {

#ifdef USING_FREERTOS
void Delay( uint32_t ms ) { vTaskDelay(ms / portTICK_PERIOD_MS); }
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f006 fd89 	bl	80077b8 <vTaskDelay>
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <_ZN3lcd3LCDC1EPP12GPIO_TypeDefPtS2_tS2_tS2_tNS_15Lcd_ModeTypeDefE>:

//----------------------------
const uint8_t ROW_16[] = {0x00, 0x40, 0x10, 0x50};
const uint8_t ROW_20[] = {0x00, 0x40, 0x14, 0x54};

LCD::LCD( Lcd_PortType port[], Lcd_PinType pin[], Lcd_PortType rs_Port, Lcd_PinType rs_Pin, Lcd_PortType rw_Port, Lcd_PinType rw_Pin, Lcd_PortType en_Port, Lcd_PinType en_Pin, Lcd_ModeTypeDef mode){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <_ZN3lcd3LCDC1EPP12GPIO_TypeDefPtS2_tS2_tS2_tNS_15Lcd_ModeTypeDefE+0x80>)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	601a      	str	r2, [r3, #0]
	mode = mode;
	rw_pin = rw_Pin;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	8c3a      	ldrh	r2, [r7, #32]
 8000cc8:	831a      	strh	r2, [r3, #24]
	rw_port = rw_Port;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	69fa      	ldr	r2, [r7, #28]
 8000cce:	615a      	str	r2, [r3, #20]
	en_pin = en_Pin;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cd4:	841a      	strh	r2, [r3, #32]
	en_port = en_Port;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cda:	61da      	str	r2, [r3, #28]
	rs_pin = rs_Pin;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	8b3a      	ldrh	r2, [r7, #24]
 8000ce0:	821a      	strh	r2, [r3, #16]
	rs_port = rs_Port;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	60da      	str	r2, [r3, #12]
	data_pin = pin;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	609a      	str	r2, [r3, #8]
	data_port = port;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(en_port, en_pin, LCD_ENABLE_OFF);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	69d8      	ldr	r0, [r3, #28]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	8c1b      	ldrh	r3, [r3, #32]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f003 f9ca 	bl	8004098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rw_port, rw_pin, GPIO_PIN_SET);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6958      	ldr	r0, [r3, #20]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	8b1b      	ldrh	r3, [r3, #24]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f003 f9c2 	bl	8004098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rs_port, rs_pin, LCD_DATA_REG);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	68d8      	ldr	r0, [r3, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	8a1b      	ldrh	r3, [r3, #16]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f003 f9ba 	bl	8004098 <HAL_GPIO_WritePin>
}
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800dcd0 	.word	0x0800dcd0

08000d34 <_ZN3lcd3LCDD1Ev>:

LCD::~LCD() {
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <_ZN3lcd3LCDD1Ev+0x1c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	0800dcd0 	.word	0x0800dcd0

08000d54 <_ZN3lcd3LCDD0Ev>:
LCD::~LCD() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
}
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ffe9 	bl	8000d34 <_ZN3lcd3LCDD1Ev>
 8000d62:	2124      	movs	r1, #36	; 0x24
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f008 f999 	bl	800909c <_ZdlPvj>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_ZN3lcd3LCD5beginEv>:

		write(data >> 4, LCD_NIB);
}


void LCD::begin() {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	Delay(50);
 8000d7c:	2032      	movs	r0, #50	; 0x32
 8000d7e:	f7ff ff8b 	bl	8000c98 <_ZN3lcd5DelayEm>
	if(mode == LCD_4_BIT_MODE) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d11e      	bne.n	8000dca <_ZN3lcd3LCD5beginEv+0x56>
		write_command(0x33);
 8000d8c:	2133      	movs	r1, #51	; 0x33
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 f887 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
		Delay(5);
 8000d94:	2005      	movs	r0, #5
 8000d96:	f7ff ff7f 	bl	8000c98 <_ZN3lcd5DelayEm>
		write_command(0x32);
 8000d9a:	2132      	movs	r1, #50	; 0x32
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f880 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
		Delay(5);
 8000da2:	2005      	movs	r0, #5
 8000da4:	f7ff ff78 	bl	8000c98 <_ZN3lcd5DelayEm>
		write_command(FUNCTION_SET | OPT_N);
 8000da8:	2128      	movs	r1, #40	; 0x28
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 f879 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
		write_command(CLEAR_DISPLAY);						// Clear screen
 8000db0:	2101      	movs	r1, #1
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f875 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
		write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000db8:	210c      	movs	r1, #12
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f871 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
		write_command(ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f86d 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
 8000dc8:	e003      	b.n	8000dd2 <_ZN3lcd3LCD5beginEv+0x5e>
	}
	else write_command(FUNCTION_SET | OPT_DL | OPT_N);
 8000dca:	2138      	movs	r1, #56	; 0x38
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f868 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
	Delay(2);
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f7ff ff60 	bl	8000c98 <_ZN3lcd5DelayEm>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_ZN3lcd3LCD9write_intEhl>:
//	return (read_status() & 0x80) > 0;
	Delay(50);
	return false;
}

void LCD::write_int(uint8_t len, int32_t number) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	460b      	mov	r3, r1
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	72fb      	strb	r3, [r7, #11]
	char buffer[11];
	sprintf(buffer, "%*d", len, number);
 8000dee:	7afa      	ldrb	r2, [r7, #11]
 8000df0:	f107 0014 	add.w	r0, r7, #20
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4906      	ldr	r1, [pc, #24]	; (8000e10 <_ZN3lcd3LCD9write_intEhl+0x30>)
 8000df8:	f00a f82a 	bl	800ae50 <siprintf>
	write_string(buffer);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f000 f806 	bl	8000e14 <_ZN3lcd3LCD12write_stringEPc>
}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	0800dc38 	.word	0x0800dc38

08000e14 <_ZN3lcd3LCD12write_stringEPc>:

	write_string(buffer);
}


void LCD::write_string(char *string) {
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	7bfc      	ldrb	r4, [r7, #15]
 8000e24:	6838      	ldr	r0, [r7, #0]
 8000e26:	f7ff f9db 	bl	80001e0 <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	d20b      	bcs.n	8000e48 <_ZN3lcd3LCD12write_stringEPc+0x34>
	{
		write_data(string[i]);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f860 	bl	8000f00 <_ZN3lcd3LCD10write_dataEh>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	3301      	adds	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
 8000e46:	e7ec      	b.n	8000e22 <_ZN3lcd3LCD12write_stringEPc+0xe>
	}
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}

08000e50 <_ZN3lcd3LCD11move_cursorEhh>:


void LCD::move_cursor(uint8_t row, uint8_t col) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	write_command(SET_DDRAM_ADDR + ROW_20[row] + col);
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <_ZN3lcd3LCD11move_cursorEhh+0x30>)
 8000e64:	5cd2      	ldrb	r2, [r2, r3]
 8000e66:	78bb      	ldrb	r3, [r7, #2]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	3b80      	subs	r3, #128	; 0x80
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f815 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
	#endif

	#ifdef LCD16xN
	write_command(SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	0800dcc4 	.word	0x0800dcc4

08000e84 <_ZN3lcd3LCD5clearEv>:


void LCD::clear() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	write_command(CLEAR_DISPLAY);
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f807 	bl	8000ea2 <_ZN3lcd3LCD13write_commandEh>
	vTaskDelay(2);
 8000e94:	2002      	movs	r0, #2
 8000e96:	f006 fc8f 	bl	80077b8 <vTaskDelay>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_ZN3lcd3LCD13write_commandEh>:



void LCD::write_command( uint8_t command ) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(rs_port, rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68d8      	ldr	r0, [r3, #12]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	8a1b      	ldrh	r3, [r3, #16]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f003 f8ed 	bl	8004098 <HAL_GPIO_WritePin>

	if(mode == LCD_4_BIT_MODE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d111      	bne.n	8000eec <_ZN3lcd3LCD13write_commandEh+0x4a>
	{
		write((command >> 4), LCD_NIB);
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	111b      	asrs	r3, r3, #4
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f843 	bl	8000f5e <_ZN3lcd3LCD5writeEhh>
		write(command & 0x0F, LCD_NIB);
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f83a 	bl	8000f5e <_ZN3lcd3LCD5writeEhh>
	else
	{
		write(command, LCD_BYTE);
	}

}
 8000eea:	e005      	b.n	8000ef8 <_ZN3lcd3LCD13write_commandEh+0x56>
		write(command, LCD_BYTE);
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	2208      	movs	r2, #8
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f833 	bl	8000f5e <_ZN3lcd3LCD5writeEhh>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_ZN3lcd3LCD10write_dataEh>:


void LCD::write_data(uint8_t data) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(rs_port, rs_pin, LCD_DATA_REG);			// Write to data register
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68d8      	ldr	r0, [r3, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	8a1b      	ldrh	r3, [r3, #16]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	f003 f8be 	bl	8004098 <HAL_GPIO_WritePin>

	if(mode == LCD_4_BIT_MODE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d111      	bne.n	8000f4a <_ZN3lcd3LCD10write_dataEh+0x4a>
	{
		write(data >> 4, LCD_NIB);
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	111b      	asrs	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f814 	bl	8000f5e <_ZN3lcd3LCD5writeEhh>
		write(data & 0x0F, LCD_NIB);
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	f003 030f 	and.w	r3, r3, #15
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f80b 	bl	8000f5e <_ZN3lcd3LCD5writeEhh>
	else
	{
		write(data, LCD_BYTE);
	}

}
 8000f48:	e005      	b.n	8000f56 <_ZN3lcd3LCD10write_dataEh+0x56>
		write(data, LCD_BYTE);
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f804 	bl	8000f5e <_ZN3lcd3LCD5writeEhh>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZN3lcd3LCD5writeEhh>:

void LCD::write(uint8_t data, uint8_t len)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(rw_port, rw_pin, LCD_WRITE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6958      	ldr	r0, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	8b1b      	ldrh	r3, [r3, #24]
 8000f76:	2200      	movs	r2, #0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f003 f88d 	bl	8004098 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	78bb      	ldrb	r3, [r7, #2]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d21a      	bcs.n	8000fc0 <_ZN3lcd3LCD5writeEhh+0x62>
	{
		HAL_GPIO_WritePin(data_port[i], data_pin[i], (GPIO_PinState)((data >> i) & 0x01));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	8819      	ldrh	r1, [r3, #0]
 8000fa2:	78fa      	ldrb	r2, [r7, #3]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	fa42 f303 	asr.w	r3, r2, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f003 f870 	bl	8004098 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e7e0      	b.n	8000f82 <_ZN3lcd3LCD5writeEhh+0x24>
	}

	Delay(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fe69 	bl	8000c98 <_ZN3lcd5DelayEm>
	HAL_GPIO_WritePin(en_port, en_pin, LCD_ENABLE_ON);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69d8      	ldr	r0, [r3, #28]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	8c1b      	ldrh	r3, [r3, #32]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f003 f861 	bl	8004098 <HAL_GPIO_WritePin>
	Delay(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff fe5e 	bl	8000c98 <_ZN3lcd5DelayEm>
	HAL_GPIO_WritePin(en_port, en_pin, LCD_ENABLE_OFF);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69d8      	ldr	r0, [r3, #28]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8c1b      	ldrh	r3, [r3, #32]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f003 f856 	bl	8004098 <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZN3lcd10LCDMessageC1EhhPc>:
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, int16_t val) {x=X; y=Y; T=i16; Len=len; v.I16=val; };
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, uint32_t val) {x=X; y=Y; T=u32; Len=len; v.U32=val; };
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, int32_t val) {x=X; y=Y; T=i32; Len=len; v.I32=val; };
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, float val) {x=X; y=Y; T=f; Len=len; v.F=val; };
	LCDMessage(uint8_t X, uint8_t Y, uint8_t len, double val) {x=X; y=Y; T=d; Len=len; v.D=val; };
	LCDMessage(uint8_t X, uint8_t Y, char *val) {x=X; y=Y; T=s; v.S=val; };
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	72fb      	strb	r3, [r7, #11]
 8001002:	4613      	mov	r3, r2
 8001004:	72bb      	strb	r3, [r7, #10]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	7afa      	ldrb	r2, [r7, #11]
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	7aba      	ldrb	r2, [r7, #10]
 8001010:	705a      	strb	r2, [r3, #1]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2208      	movs	r2, #8
 8001016:	70da      	strb	r2, [r3, #3]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_Znwj>:
static StackType_t uiStack[UI_STACKSIZE];
static StaticTask_t uiTCB;
static TaskHandle_t hUI;

void * operator new( size_t size )
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f007 fe5b 	bl	8008cf0 <pvPortMalloc>
 800103a:	4603      	mov	r3, r0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f007 ff11 	bl	8008e74 <vPortFree>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_Z7reversePci>:
    vPortFree ( ptr );
}

//***** Apufunktiot joilla kierretään printf float bugi
void reverse(char* str, int len)
{
 800105a:	b480      	push	{r7}
 800105c:	b087      	sub	sp, #28
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	429a      	cmp	r2, r3
 8001074:	da19      	bge.n	80010aa <_Z7reversePci+0x50>
        temp = str[i];
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	441a      	add	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	440b      	add	r3, r1
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	701a      	strb	r2, [r3, #0]
        i++;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
        j--;
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80010a8:	e7e1      	b.n	800106e <_Z7reversePci+0x14>
    }
}
 80010aa:	bf00      	nop
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <_Z8intToStriPci>:

int intToStr(int x, char str[], int d)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
    while (x) {
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d01e      	beq.n	800110c <_Z8intToStriPci+0x54>
        str[i++] = (x % 10) + '0';
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <_Z8intToStriPci+0x8c>)
 80010d2:	fb83 1302 	smull	r1, r3, r3, r2
 80010d6:	1099      	asrs	r1, r3, #2
 80010d8:	17d3      	asrs	r3, r2, #31
 80010da:	1ac9      	subs	r1, r1, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	1ad1      	subs	r1, r2, r3
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	1c59      	adds	r1, r3, #1
 80010ec:	6179      	str	r1, [r7, #20]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	440b      	add	r3, r1
 80010f4:	3230      	adds	r2, #48	; 0x30
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <_Z8intToStriPci+0x8c>)
 80010fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001102:	1092      	asrs	r2, r2, #2
 8001104:	17db      	asrs	r3, r3, #31
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	60fb      	str	r3, [r7, #12]
    while (x) {
 800110a:	e7dd      	b.n	80010c8 <_Z8intToStriPci+0x10>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	da08      	bge.n	8001126 <_Z8intToStriPci+0x6e>
        str[i++] = '0';
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	617a      	str	r2, [r7, #20]
 800111a:	461a      	mov	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4413      	add	r3, r2
 8001120:	2230      	movs	r2, #48	; 0x30
 8001122:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001124:	e7f2      	b.n	800110c <_Z8intToStriPci+0x54>

    reverse(str, i);
 8001126:	6979      	ldr	r1, [r7, #20]
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f7ff ff96 	bl	800105a <_Z7reversePci>
    str[i] = '\0';
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    return i;
 8001138:	697b      	ldr	r3, [r7, #20]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	66666667 	.word	0x66666667

08001148 <_Z4ftoafPci>:

void ftoa(float n, char* res, int afterpoint)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001152:	60b8      	str	r0, [r7, #8]
 8001154:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001156:	edd7 7a03 	vldr	s15, [r7, #12]
 800115a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115e:	ee17 3a90 	vmov	r3, s15
 8001162:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	69f8      	ldr	r0, [r7, #28]
 8001180:	f7ff ff9a 	bl	80010b8 <_Z8intToStriPci>
 8001184:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d029      	beq.n	80011e0 <_Z4ftoafPci+0x98>
        res[i] = '.'; // add dot
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	222e      	movs	r2, #46	; 0x2e
 8001194:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001196:	69b8      	ldr	r0, [r7, #24]
 8001198:	f7ff f9de 	bl	8000558 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	200a      	movs	r0, #10
 80011a4:	f000 fcaf 	bl	8001b06 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011a8:	ec53 2b10 	vmov	r2, r3, d0
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff fa2a 	bl	8000608 <__aeabi_dmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd1c 	bl	8000bf8 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80011c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	4413      	add	r3, r2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4619      	mov	r1, r3
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff ff6c 	bl	80010b8 <_Z8intToStriPci>
    }
}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdb0      	pop	{r4, r5, r7, pc}

080011e8 <_Z8chMapperPv>:
QueueHandle_t hUIQ;

using namespace lcd;

// Merkistön tulostustaski
void chMapper( void *pvParameters ) {
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b08d      	sub	sp, #52	; 0x34
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	QueueHandle_t *lcdQ;
	char chBuf[21];
	lcdQ = (QueueHandle_t *)pvParameters;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
	LCDMessage *pMsg;

	for ( ;; ) {
		for ( uint8_t col = 1; col <= 0x0f; col++ ) {
 80011f4:	2301      	movs	r3, #1
 80011f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	d8f8      	bhi.n	80011f4 <_Z8chMapperPv+0xc>
			sprintf(chBuf, "%2x: ", (col<<4));
 8001202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001206:	011a      	lsls	r2, r3, #4
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4921      	ldr	r1, [pc, #132]	; (8001294 <_Z8chMapperPv+0xac>)
 800120e:	4618      	mov	r0, r3
 8001210:	f009 fe1e 	bl	800ae50 <siprintf>
			for ( uint8_t row = 0; row <= 0x0f; row ++ ) {
 8001214:	2300      	movs	r3, #0
 8001216:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800121a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800121e:	2b0f      	cmp	r3, #15
 8001220:	d815      	bhi.n	800124e <_Z8chMapperPv+0x66>
				chBuf[row+4] = ((col<<4) + row);
 8001222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	b2d9      	uxtb	r1, r3
 800122a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800122e:	3304      	adds	r3, #4
 8001230:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001234:	440a      	add	r2, r1
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800123c:	440b      	add	r3, r1
 800123e:	f803 2c20 	strb.w	r2, [r3, #-32]
			for ( uint8_t row = 0; row <= 0x0f; row ++ ) {
 8001242:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001246:	3301      	adds	r3, #1
 8001248:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800124c:	e7e5      	b.n	800121a <_Z8chMapperPv+0x32>
			}
			chBuf[20] = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			pMsg = new LCDMessage( 1, 0, chBuf );
 8001254:	2010      	movs	r0, #16
 8001256:	f7ff fee9 	bl	800102c <_Znwj>
 800125a:	4603      	mov	r3, r0
 800125c:	461c      	mov	r4, r3
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2200      	movs	r2, #0
 8001264:	2101      	movs	r1, #1
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fec4 	bl	8000ff4 <_ZN3lcd10LCDMessageC1EhhPc>
 800126c:	60fc      	str	r4, [r7, #12]
			xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	f107 010c 	add.w	r1, r7, #12
 8001276:	2300      	movs	r3, #0
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	f005 fd76 	bl	8006d6c <xQueueGenericSend>
			vTaskDelay(3000);
 8001280:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001284:	f006 fa98 	bl	80077b8 <vTaskDelay>
		for ( uint8_t col = 1; col <= 0x0f; col++ ) {
 8001288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800128c:	3301      	adds	r3, #1
 800128e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001292:	e7b2      	b.n	80011fa <_Z8chMapperPv+0x12>
 8001294:	0800dc44 	.word	0x0800dc44

08001298 <_Z11tickCounterPv>:
		}
	}
}

// Kellolaskuritaski
void tickCounter( void *pvParameters ) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b08b      	sub	sp, #44	; 0x2c
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	QueueHandle_t *lcdQ;
	char chBuf[21];
	lcdQ = (QueueHandle_t *)pvParameters;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
	LCDMessage *pMsg;
	sprintf(chBuf, "Tick cnt:");
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4a20      	ldr	r2, [pc, #128]	; (800132c <_Z11tickCounterPv+0x94>)
 80012aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ac:	c303      	stmia	r3!, {r0, r1}
 80012ae:	801a      	strh	r2, [r3, #0]
	pMsg = new LCDMessage( 2, 3, chBuf );
 80012b0:	2010      	movs	r0, #16
 80012b2:	f7ff febb 	bl	800102c <_Znwj>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461c      	mov	r4, r3
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2203      	movs	r2, #3
 80012c0:	2102      	movs	r1, #2
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff fe96 	bl	8000ff4 <_ZN3lcd10LCDMessageC1EhhPc>
 80012c8:	60bc      	str	r4, [r7, #8]
	xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f107 0108 	add.w	r1, r7, #8
 80012d2:	2300      	movs	r3, #0
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	f005 fd48 	bl	8006d6c <xQueueGenericSend>
	vTaskDelay(5000);
 80012dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80012e0:	f006 fa6a 	bl	80077b8 <vTaskDelay>

	for ( ;; ) {
		sprintf(chBuf, "%8d", uwTick);
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <_Z11tickCounterPv+0x98>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4911      	ldr	r1, [pc, #68]	; (8001334 <_Z11tickCounterPv+0x9c>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f009 fdae 	bl	800ae50 <siprintf>
		pMsg = new LCDMessage( 2, 12, chBuf );
 80012f4:	2010      	movs	r0, #16
 80012f6:	f7ff fe99 	bl	800102c <_Znwj>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461c      	mov	r4, r3
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	220c      	movs	r2, #12
 8001304:	2102      	movs	r1, #2
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fe74 	bl	8000ff4 <_ZN3lcd10LCDMessageC1EhhPc>
 800130c:	60bc      	str	r4, [r7, #8]
		xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	f107 0108 	add.w	r1, r7, #8
 8001316:	2300      	movs	r3, #0
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	f005 fd26 	bl	8006d6c <xQueueGenericSend>
		vTaskDelay(1000);
 8001320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001324:	f006 fa48 	bl	80077b8 <vTaskDelay>
		sprintf(chBuf, "%8d", uwTick);
 8001328:	e7dc      	b.n	80012e4 <_Z11tickCounterPv+0x4c>
 800132a:	bf00      	nop
 800132c:	0800dc4c 	.word	0x0800dc4c
 8001330:	20003c04 	.word	0x20003c04
 8001334:	0800dc58 	.word	0x0800dc58

08001338 <_Z11thermoMeterPv>:
}

// Lämpömittari
static float V25 = 1.43;			// jännite 25C lämpötilassa
static float AVG_SLOPE = 0.0043;	// mV/C
void thermoMeter( void *pvParameters ) {
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b091      	sub	sp, #68	; 0x44
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	QueueHandle_t *lcdQ;
	char chBuf[21];
	bool convDone;
	HAL_StatusTypeDef ADCStatus;
	uint32_t tempVal;
	float volts, tempFlt = 21.25;
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <_Z11thermoMeterPv+0x190>)
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
	lcdQ = (QueueHandle_t *)pvParameters;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
	LCDMessage *pMsg;
	sprintf(chBuf, "Int temp C\xdf:");
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4a5f      	ldr	r2, [pc, #380]	; (80014cc <_Z11thermoMeterPv+0x194>)
 800134e:	461c      	mov	r4, r3
 8001350:	4613      	mov	r3, r2
 8001352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001354:	c407      	stmia	r4!, {r0, r1, r2}
 8001356:	7023      	strb	r3, [r4, #0]
	pMsg = new LCDMessage( 3, 0, chBuf );
 8001358:	2010      	movs	r0, #16
 800135a:	f7ff fe67 	bl	800102c <_Znwj>
 800135e:	4603      	mov	r3, r0
 8001360:	461c      	mov	r4, r3
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	2200      	movs	r2, #0
 8001368:	2103      	movs	r1, #3
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff fe42 	bl	8000ff4 <_ZN3lcd10LCDMessageC1EhhPc>
 8001370:	60fc      	str	r4, [r7, #12]
	xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 8001372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	f107 010c 	add.w	r1, r7, #12
 800137a:	2300      	movs	r3, #0
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	f005 fcf4 	bl	8006d6c <xQueueGenericSend>
	vTaskDelay(5000);
 8001384:	f241 3088 	movw	r0, #5000	; 0x1388
 8001388:	f006 fa16 	bl	80077b8 <vTaskDelay>
	HAL_ADCEx_Calibration_Start (&hadc1, ADC_SINGLE_ENDED);
 800138c:	2100      	movs	r1, #0
 800138e:	4850      	ldr	r0, [pc, #320]	; (80014d0 <_Z11thermoMeterPv+0x198>)
 8001390:	f001 fe3a 	bl	8003008 <HAL_ADCEx_Calibration_Start>

	for ( ;; ) {
		HAL_ADC_Start(&hadc1);
 8001394:	484e      	ldr	r0, [pc, #312]	; (80014d0 <_Z11thermoMeterPv+0x198>)
 8001396:	f001 f8d7 	bl	8002548 <HAL_ADC_Start>
		convDone = false;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		while ( !convDone ) {
 80013a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 8083 	bne.w	80014b0 <_Z11thermoMeterPv+0x178>
			ADCStatus = HAL_ADC_PollForConversion(&hadc1, 0xffffffff );
 80013aa:	f04f 31ff 	mov.w	r1, #4294967295
 80013ae:	4848      	ldr	r0, [pc, #288]	; (80014d0 <_Z11thermoMeterPv+0x198>)
 80013b0:	f001 fa16 	bl	80027e0 <HAL_ADC_PollForConversion>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			switch ( ADCStatus ) {
 80013ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d055      	beq.n	800146e <_Z11thermoMeterPv+0x136>
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d053      	beq.n	800146e <_Z11thermoMeterPv+0x136>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d171      	bne.n	80014ae <_Z11thermoMeterPv+0x176>
				case HAL_OK: {
					tempVal = HAL_ADC_GetValue(&hadc1);
 80013ca:	4841      	ldr	r0, [pc, #260]	; (80014d0 <_Z11thermoMeterPv+0x198>)
 80013cc:	f001 fb02 	bl	80029d4 <HAL_ADC_GetValue>
 80013d0:	62f8      	str	r0, [r7, #44]	; 0x2c
					volts=(float)tempVal/4096*3.3;
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013dc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80014d4 <_Z11thermoMeterPv+0x19c>
 80013e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013e4:	ee16 0a90 	vmov	r0, s13
 80013e8:	f7ff f8b6 	bl	8000558 <__aeabi_f2d>
 80013ec:	a334      	add	r3, pc, #208	; (adr r3, 80014c0 <_Z11thermoMeterPv+0x188>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f909 	bl	8000608 <__aeabi_dmul>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	4618      	mov	r0, r3
 80013fc:	4621      	mov	r1, r4
 80013fe:	f7ff fbfb 	bl	8000bf8 <__aeabi_d2f>
 8001402:	4603      	mov	r3, r0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
					tempFlt=(volts-V25)*AVG_SLOPE+25;
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <_Z11thermoMeterPv+0x1a0>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <_Z11thermoMeterPv+0x1a4>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001426:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					ftoa( tempFlt, chBuf, 2 );
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	2102      	movs	r1, #2
 8001430:	4618      	mov	r0, r3
 8001432:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001436:	f7ff fe87 	bl	8001148 <_Z4ftoafPci>
					pMsg = new LCDMessage( 3, 15, chBuf );
 800143a:	2010      	movs	r0, #16
 800143c:	f7ff fdf6 	bl	800102c <_Znwj>
 8001440:	4603      	mov	r3, r0
 8001442:	461c      	mov	r4, r3
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	220f      	movs	r2, #15
 800144a:	2103      	movs	r1, #3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fdd1 	bl	8000ff4 <_ZN3lcd10LCDMessageC1EhhPc>
 8001452:	60fc      	str	r4, [r7, #12]
					xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 8001454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	f107 010c 	add.w	r1, r7, #12
 800145c:	2300      	movs	r3, #0
 800145e:	f04f 32ff 	mov.w	r2, #4294967295
 8001462:	f005 fc83 	bl	8006d6c <xQueueGenericSend>
					convDone = true;
 8001466:	2301      	movs	r3, #1
 8001468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					break;
 800146c:	e01f      	b.n	80014ae <_Z11thermoMeterPv+0x176>
				}
				case HAL_ERROR:
				case HAL_TIMEOUT: {
					sprintf(chBuf, "ADC ERR!");
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <_Z11thermoMeterPv+0x1a8>)
 8001474:	ca07      	ldmia	r2, {r0, r1, r2}
 8001476:	c303      	stmia	r3!, {r0, r1}
 8001478:	701a      	strb	r2, [r3, #0]
					pMsg = new LCDMessage( 3, 12, chBuf );
 800147a:	2010      	movs	r0, #16
 800147c:	f7ff fdd6 	bl	800102c <_Znwj>
 8001480:	4603      	mov	r3, r0
 8001482:	461c      	mov	r4, r3
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	220c      	movs	r2, #12
 800148a:	2103      	movs	r1, #3
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff fdb1 	bl	8000ff4 <_ZN3lcd10LCDMessageC1EhhPc>
 8001492:	60fc      	str	r4, [r7, #12]
					xQueueSend( *lcdQ, &pMsg, portMAX_DELAY );
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	f107 010c 	add.w	r1, r7, #12
 800149c:	2300      	movs	r3, #0
 800149e:	f04f 32ff 	mov.w	r2, #4294967295
 80014a2:	f005 fc63 	bl	8006d6c <xQueueGenericSend>
					convDone = true;
 80014a6:	2301      	movs	r3, #1
 80014a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					break;
 80014ac:	bf00      	nop
		while ( !convDone ) {
 80014ae:	e777      	b.n	80013a0 <_Z11thermoMeterPv+0x68>
				default: {

				}
			}
		}
		HAL_ADC_Stop(&hadc1);
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <_Z11thermoMeterPv+0x198>)
 80014b2:	f001 f95f 	bl	8002774 <HAL_ADC_Stop>
		vTaskDelay(1000);
 80014b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ba:	f006 f97d 	bl	80077b8 <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 80014be:	e769      	b.n	8001394 <_Z11thermoMeterPv+0x5c>
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666
 80014c8:	41aa0000 	.word	0x41aa0000
 80014cc:	0800dc5c 	.word	0x0800dc5c
 80014d0:	20000220 	.word	0x20000220
 80014d4:	45800000 	.word	0x45800000
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004
 80014e0:	0800dc6c 	.word	0x0800dc6c

080014e4 <main>:
	}

}

int main(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af04      	add	r7, sp, #16

	HAL_Init();
 80014ea:	f000 fddf 	bl	80020ac <HAL_Init>

	SystemClock_Config();
 80014ee:	f000 f879 	bl	80015e4 <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 80014f2:	f000 fa5d 	bl	80019b0 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 80014f6:	f000 fa27 	bl	8001948 <_ZL19MX_USART2_UART_Initv>
	MX_TIM4_Init();
 80014fa:	f000 f9c5 	bl	8001888 <_ZL12MX_TIM4_Initv>
	MX_TIM2_Init();
 80014fe:	f000 f965 	bl	80017cc <_ZL12MX_TIM2_Initv>
	MX_ADC1_Init();
 8001502:	f000 f8e5 	bl	80016d0 <_ZL12MX_ADC1_Initv>


	//  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);

	hUIQ = xQueueCreate( 5, sizeof( void *) );
 8001506:	2200      	movs	r2, #0
 8001508:	2104      	movs	r1, #4
 800150a:	2005      	movs	r0, #5
 800150c:	f005 fbce 	bl	8006cac <xQueueGenericCreate>
 8001510:	4602      	mov	r2, r0
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <main+0xb4>)
 8001514:	601a      	str	r2, [r3, #0]
	hUI = xTaskCreateStatic( UI, "UI", UI_STACKSIZE, &hUIQ, tskIDLE_PRIORITY+4, uiStack, &uiTCB );
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <main+0xb8>)
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <main+0xbc>)
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	2304      	movs	r3, #4
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <main+0xb4>)
 8001524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001528:	491e      	ldr	r1, [pc, #120]	; (80015a4 <main+0xc0>)
 800152a:	481f      	ldr	r0, [pc, #124]	; (80015a8 <main+0xc4>)
 800152c:	f005 fff4 	bl	8007518 <xTaskCreateStatic>
 8001530:	4602      	mov	r2, r0
 8001532:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <main+0xc8>)
 8001534:	601a      	str	r2, [r3, #0]
	hCM = xTaskCreateStatic( chMapper, "CMAP", CHMAP_STACKSIZE, &hUIQ, tskIDLE_PRIORITY+3, chMapStack, &chMapTCB );
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <main+0xcc>)
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <main+0xd0>)
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	2303      	movs	r3, #3
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <main+0xb4>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	491c      	ldr	r1, [pc, #112]	; (80015b8 <main+0xd4>)
 8001548:	481c      	ldr	r0, [pc, #112]	; (80015bc <main+0xd8>)
 800154a:	f005 ffe5 	bl	8007518 <xTaskCreateStatic>
 800154e:	4602      	mov	r2, r0
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <main+0xdc>)
 8001552:	601a      	str	r2, [r3, #0]
	hCM = xTaskCreateStatic( tickCounter, "TCNT", TCNT_STACKSIZE, &hUIQ, tskIDLE_PRIORITY+3, tCntStack, &tCntTCB );
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <main+0xe0>)
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <main+0xe4>)
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	2303      	movs	r3, #3
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <main+0xb4>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	4919      	ldr	r1, [pc, #100]	; (80015cc <main+0xe8>)
 8001566:	481a      	ldr	r0, [pc, #104]	; (80015d0 <main+0xec>)
 8001568:	f005 ffd6 	bl	8007518 <xTaskCreateStatic>
 800156c:	4602      	mov	r2, r0
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <main+0xdc>)
 8001570:	601a      	str	r2, [r3, #0]
	hCM = xTaskCreateStatic( thermoMeter, "TMTR", TMTR_STACKSIZE, &hUIQ, tskIDLE_PRIORITY+3, tMtrStack, &tMtrTCB );
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <main+0xf0>)
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <main+0xf4>)
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	2303      	movs	r3, #3
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <main+0xb4>)
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	4916      	ldr	r1, [pc, #88]	; (80015dc <main+0xf8>)
 8001584:	4816      	ldr	r0, [pc, #88]	; (80015e0 <main+0xfc>)
 8001586:	f005 ffc7 	bl	8007518 <xTaskCreateStatic>
 800158a:	4602      	mov	r2, r0
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <main+0xdc>)
 800158e:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 8001590:	f006 f946 	bl	8007820 <vTaskStartScheduler>

	while (1) { }
 8001594:	e7fe      	b.n	8001594 <main+0xb0>
 8001596:	bf00      	nop
 8001598:	20000eec 	.word	0x20000eec
 800159c:	20000e8c 	.word	0x20000e8c
 80015a0:	20000a8c 	.word	0x20000a8c
 80015a4:	0800dc78 	.word	0x0800dc78
 80015a8:	08001f0d 	.word	0x08001f0d
 80015ac:	20000ee8 	.word	0x20000ee8
 80015b0:	20000574 	.word	0x20000574
 80015b4:	20000374 	.word	0x20000374
 80015b8:	0800dc7c 	.word	0x0800dc7c
 80015bc:	080011e9 	.word	0x080011e9
 80015c0:	200005d0 	.word	0x200005d0
 80015c4:	200007d4 	.word	0x200007d4
 80015c8:	200005d4 	.word	0x200005d4
 80015cc:	0800dc84 	.word	0x0800dc84
 80015d0:	08001299 	.word	0x08001299
 80015d4:	20000a30 	.word	0x20000a30
 80015d8:	20000830 	.word	0x20000830
 80015dc:	0800dc8c 	.word	0x0800dc8c
 80015e0:	08001339 	.word	0x08001339

080015e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0a6      	sub	sp, #152	; 0x98
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ee:	2228      	movs	r2, #40	; 0x28
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f008 fddf 	bl	800a1b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2258      	movs	r2, #88	; 0x58
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f008 fdd1 	bl	800a1b6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001614:	2302      	movs	r3, #2
 8001616:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001618:	2301      	movs	r3, #1
 800161a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161c:	2310      	movs	r3, #16
 800161e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800162c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001630:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fd40 	bl	80040c8 <HAL_RCC_OscConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf14      	ite	ne
 800164e:	2301      	movne	r3, #1
 8001650:	2300      	moveq	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8001658:	f000 fa4e 	bl	8001af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165c:	230f      	movs	r3, #15
 800165e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001660:	2302      	movs	r3, #2
 8001662:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001672:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001676:	2102      	movs	r1, #2
 8001678:	4618      	mov	r0, r3
 800167a:	f003 fc3b 	bl	8004ef4 <HAL_RCC_ClockConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800168e:	f000 fa33 	bl	8001af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <_Z18SystemClock_Configv+0xe8>)
 8001694:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800169a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fe8a 	bl	80053c4 <HAL_RCCEx_PeriphCLKConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 80016c0:	f000 fa1a 	bl	8001af8 <Error_Handler>
  }
}
 80016c4:	bf00      	nop
 80016c6:	3798      	adds	r7, #152	; 0x98
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	00300082 	.word	0x00300082

080016d0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 80016f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 800170e:	2200      	movs	r2, #0
 8001710:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001722:	2201      	movs	r2, #1
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 800172e:	2201      	movs	r2, #1
 8001730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 800173c:	2204      	movs	r2, #4
 800173e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001742:	2200      	movs	r2, #0
 8001744:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001748:	2200      	movs	r2, #0
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800174c:	481e      	ldr	r0, [pc, #120]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 800174e:	f000 fd01 	bl	8002154 <HAL_ADC_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 8001762:	f000 f9c9 	bl	8001af8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	4815      	ldr	r0, [pc, #84]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 8001772:	f001 ffc7 	bl	8003704 <HAL_ADCEx_MultiModeConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <_ZL12MX_ADC1_Initv+0xba>
  {
    Error_Handler();
 8001786:	f000 f9b7 	bl	8001af8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800178a:	2310      	movs	r3, #16
 800178c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178e:	2301      	movs	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001796:	2306      	movs	r3, #6
 8001798:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4808      	ldr	r0, [pc, #32]	; (80017c8 <_ZL12MX_ADC1_Initv+0xf8>)
 80017a8:	f001 fcc0 	bl	800312c <HAL_ADC_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf14      	ite	ne
 80017b2:	2301      	movne	r3, #1
 80017b4:	2300      	moveq	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <_ZL12MX_ADC1_Initv+0xf0>
  {
    Error_Handler();
 80017bc:	f000 f99c 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000220 	.word	0x20000220

080017cc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 80017ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 80017f4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80017f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 8001802:	f242 7210 	movw	r2, #10000	; 0x2710
 8001806:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001814:	481b      	ldr	r0, [pc, #108]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 8001816:	f003 fff3 	bl	8005800 <HAL_TIM_Base_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 800182a:	f000 f965 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	4812      	ldr	r0, [pc, #72]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 800183c:	f004 f9e7 	bl	8005c0e <HAL_TIM_ConfigClockSource>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001850:	f000 f952 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001854:	2320      	movs	r3, #32
 8001856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <_ZL12MX_TIM2_Initv+0xb8>)
 8001862:	f004 fbed 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf14      	ite	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2300      	moveq	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8001876:	f000 f93f 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3720      	adds	r7, #32
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000270 	.word	0x20000270

08001888 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	2224      	movs	r2, #36	; 0x24
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f008 fc8d 	bl	800a1b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <_ZL12MX_TIM4_Initv+0xb8>)
 80018a8:	4a26      	ldr	r2, [pc, #152]	; (8001944 <_ZL12MX_TIM4_Initv+0xbc>)
 80018aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <_ZL12MX_TIM4_Initv+0xb8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <_ZL12MX_TIM4_Initv+0xb8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <_ZL12MX_TIM4_Initv+0xb8>)
 80018ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <_ZL12MX_TIM4_Initv+0xb8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <_ZL12MX_TIM4_Initv+0xb8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018d4:	2301      	movs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80018dc:	2305      	movs	r3, #5
 80018de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018e4:	2301      	movs	r3, #1
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80018ec:	2305      	movs	r3, #5
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4619      	mov	r1, r3
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <_ZL12MX_TIM4_Initv+0xb8>)
 80018f8:	f003 ffd8 	bl	80058ac <HAL_TIM_Encoder_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	2300      	moveq	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 800190c:	f000 f8f4 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <_ZL12MX_TIM4_Initv+0xb8>)
 800191e:	f004 fb8f 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf14      	ite	ne
 8001928:	2301      	movne	r3, #1
 800192a:	2300      	moveq	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8001932:	f000 f8e1 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	3730      	adds	r7, #48	; 0x30
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200002b0 	.word	0x200002b0
 8001944:	40000800 	.word	0x40000800

08001948 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <_ZL19MX_USART2_UART_Initv+0x64>)
 8001950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001954:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800198c:	f004 fc02 	bl	8006194 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80019a0:	f000 f8aa 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200002f0 	.word	0x200002f0
 80019ac:	40004400 	.word	0x40004400

080019b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4a3e      	ldr	r2, [pc, #248]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 80019cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019d0:	6153      	str	r3, [r2, #20]
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019de:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	4a38      	ldr	r2, [pc, #224]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 80019e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019e8:	6153      	str	r3, [r2, #20]
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	6153      	str	r3, [r2, #20]
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a2c      	ldr	r2, [pc, #176]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6153      	str	r3, [r2, #20]
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <_ZL12MX_GPIO_Initv+0x114>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RW_Pin|RS_Pin|D4_Pin|D5_Pin
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8001a2c:	4826      	ldr	r0, [pc, #152]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x118>)
 8001a2e:	f002 fb33 	bl	8004098 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2120      	movs	r1, #32
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3a:	f002 fb2d 	bl	8004098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2130      	movs	r1, #48	; 0x30
 8001a42:	4822      	ldr	r0, [pc, #136]	; (8001acc <_ZL12MX_GPIO_Initv+0x11c>)
 8001a44:	f002 fb28 	bl	8004098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <_ZL12MX_GPIO_Initv+0x120>)
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	481a      	ldr	r0, [pc, #104]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x118>)
 8001a5e:	f002 f991 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RW_Pin RS_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RW_Pin|RS_Pin|D4_Pin|D5_Pin
 8001a62:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8001a66:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4813      	ldr	r0, [pc, #76]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x118>)
 8001a7c:	f002 f982 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a80:	2320      	movs	r3, #32
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9a:	f002 f973 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin;
 8001a9e:	2330      	movs	r3, #48	; 0x30
 8001aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <_ZL12MX_GPIO_Initv+0x11c>)
 8001ab6:	f002 f965 	bl	8003d84 <HAL_GPIO_Init>

}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	10210000 	.word	0x10210000

08001ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ae6:	f000 faf7 	bl	80020d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40001000 	.word	0x40001000

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001b06:	b5b0      	push	{r4, r5, r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7fe fd0f 	bl	8000534 <__aeabi_i2d>
 8001b16:	4604      	mov	r4, r0
 8001b18:	460d      	mov	r5, r1
 8001b1a:	6838      	ldr	r0, [r7, #0]
 8001b1c:	f7fe fd0a 	bl	8000534 <__aeabi_i2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	ec43 2b11 	vmov	d1, r2, r3
 8001b28:	ec45 4b10 	vmov	d0, r4, r5
 8001b2c:	f007 fab8 	bl	80090a0 <pow>
 8001b30:	eeb0 7a40 	vmov.f32	s14, s0
 8001b34:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001b38:	eeb0 0a47 	vmov.f32	s0, s14
 8001b3c:	eef0 0a67 	vmov.f32	s1, s15
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6193      	str	r3, [r2, #24]
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	210f      	movs	r1, #15
 8001b82:	f06f 0001 	mvn.w	r0, #1
 8001b86:	f002 f8d3 	bl	8003d30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba8:	d113      	bne.n	8001bd2 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_ADC_MspInit+0x44>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <HAL_ADC_MspInit+0x44>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6153      	str	r3, [r2, #20]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_ADC_MspInit+0x44>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	2012      	movs	r0, #18
 8001bc8:	f002 f8b2 	bl	8003d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bcc:	2012      	movs	r0, #18
 8001bce:	f002 f8cb 	bl	8003d68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d113      	bne.n	8001c1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_TIM_Base_MspInit+0x44>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_TIM_Base_MspInit+0x44>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_TIM_Base_MspInit+0x44>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	201c      	movs	r0, #28
 8001c10:	f002 f88e 	bl	8003d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c14:	201c      	movs	r0, #28
 8001c16:	f002 f8a7 	bl	8003d68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d131      	bne.n	8001cae <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9a:	f002 f873 	bl	8003d84 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	201e      	movs	r0, #30
 8001ca4:	f002 f844 	bl	8003d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ca8:	201e      	movs	r0, #30
 8001caa:	f002 f85d 	bl	8003d68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_UART_MspInit+0x7c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d128      	bne.n	8001d34 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_UART_MspInit+0x80>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_UART_MspInit+0x80>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_UART_MspInit+0x80>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_UART_MspInit+0x80>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <HAL_UART_MspInit+0x80>)
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	6153      	str	r3, [r2, #20]
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_UART_MspInit+0x80>)
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d12:	230c      	movs	r3, #12
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d22:	2307      	movs	r3, #7
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f002 f828 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40004400 	.word	0x40004400
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001d54:	2200      	movs	r2, #0
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	2036      	movs	r0, #54	; 0x36
 8001d5a:	f001 ffe9 	bl	8003d30 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001d5e:	2036      	movs	r0, #54	; 0x36
 8001d60:	f002 f802 	bl	8003d68 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_InitTick+0xa0>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_InitTick+0xa0>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	61d3      	str	r3, [r2, #28]
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_InitTick+0xa0>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d7c:	f107 0210 	add.w	r2, r7, #16
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 faea 	bl	8005360 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d8c:	f003 faa4 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 8001d90:	4603      	mov	r3, r0
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_InitTick+0xa4>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9b      	lsrs	r3, r3, #18
 8001da0:	3b01      	subs	r3, #1
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_InitTick+0xa8>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <HAL_InitTick+0xac>)
 8001da8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_InitTick+0xa8>)
 8001dac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001db0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_InitTick+0xa8>)
 8001db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_InitTick+0xa8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_InitTick+0xa8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001dc4:	4809      	ldr	r0, [pc, #36]	; (8001dec <HAL_InitTick+0xa8>)
 8001dc6:	f003 fd1b 	bl	8005800 <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <HAL_InitTick+0xa8>)
 8001dd2:	f003 fd41 	bl	8005858 <HAL_TIM_Base_Start_IT>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3730      	adds	r7, #48	; 0x30
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	20003bc4 	.word	0x20003bc4
 8001df0:	40001000 	.word	0x40001000

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <ADC1_2_IRQHandler+0x10>)
 8001e2e:	f000 fddf 	bl	80029f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000220 	.word	0x20000220

08001e3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM2_IRQHandler+0x10>)
 8001e42:	f003 fdc5 	bl	80059d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000270 	.word	0x20000270

08001e50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	encCount = htim4.Instance->CNT;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <TIM4_IRQHandler+0x1c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <TIM4_IRQHandler+0x20>)
 8001e5e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <TIM4_IRQHandler+0x1c>)
 8001e62:	f003 fdb5 	bl	80059d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200002b0 	.word	0x200002b0
 8001e70:	20000370 	.word	0x20000370

08001e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <TIM6_DAC_IRQHandler+0x10>)
 8001e7a:	f003 fda9 	bl	80059d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20003bc4 	.word	0x20003bc4

08001e88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <_sbrk+0x50>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x16>
		heap_end = &end;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <_sbrk+0x50>)
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <_sbrk+0x54>)
 8001e9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <_sbrk+0x50>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <_sbrk+0x50>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	466a      	mov	r2, sp
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d907      	bls.n	8001ec2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001eb2:	f008 f94b 	bl	800a14c <__errno>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	230c      	movs	r3, #12
 8001eba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec0:	e006      	b.n	8001ed0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <_sbrk+0x50>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <_sbrk+0x50>)
 8001ecc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000ef0 	.word	0x20000ef0
 8001edc:	20003c50 	.word	0x20003c50

08001ee0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <SystemInit+0x28>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <SystemInit+0x28>)
 8001eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SystemInit+0x28>)
 8001ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001efa:	609a      	str	r2, [r3, #8]
#endif
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <_Z2UIPv>:

using namespace lcd;

LCD display( dataPorts, dataPins, RS_GPIO_Port, RS_Pin, RW_GPIO_Port, RW_Pin, EN1_GPIO_Port, EN1_Pin, LCD_4_BIT_MODE);

void UI( void *pvParameters ) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	QueueHandle_t *lcdQ;
	LCDMessage *pMsg;

	lcdQ = (QueueHandle_t *)pvParameters;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

    display.begin();
 8001f18:	4829      	ldr	r0, [pc, #164]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001f1a:	f7fe ff2b 	bl	8000d74 <_ZN3lcd3LCD5beginEv>
    display.clear();
 8001f1e:	4828      	ldr	r0, [pc, #160]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001f20:	f7fe ffb0 	bl	8000e84 <_ZN3lcd3LCD5clearEv>
    vTaskDelay(1000);
 8001f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f28:	f005 fc46 	bl	80077b8 <vTaskDelay>
    display.move_cursor(0,0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4823      	ldr	r0, [pc, #140]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001f32:	f7fe ff8d 	bl	8000e50 <_ZN3lcd3LCD11move_cursorEhh>
    display.write_string((char *)"UITask ohjaa n\xe1ytt\xef\xe1");
 8001f36:	4923      	ldr	r1, [pc, #140]	; (8001fc4 <_Z2UIPv+0xb8>)
 8001f38:	4821      	ldr	r0, [pc, #132]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001f3a:	f7fe ff6b 	bl	8000e14 <_ZN3lcd3LCD12write_stringEPc>
	while ( 1 ) {
		xQueueReceive(*lcdQ, &pMsg, portMAX_DELAY );
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f107 0108 	add.w	r1, r7, #8
 8001f46:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f005 f89c 	bl	8007088 <xQueueReceive>
		display.move_cursor(pMsg->x, pMsg->y);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	7819      	ldrb	r1, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4819      	ldr	r0, [pc, #100]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001f5c:	f7fe ff78 	bl	8000e50 <_ZN3lcd3LCD11move_cursorEhh>
		switch ( pMsg->T ) {
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	78db      	ldrb	r3, [r3, #3]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d00c      	beq.n	8001f82 <_Z2UIPv+0x76>
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d014      	beq.n	8001f96 <_Z2UIPv+0x8a>
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d119      	bne.n	8001fa4 <_Z2UIPv+0x98>
			case u8: {
				display.write_int(pMsg->Len, pMsg->v.U8);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	7899      	ldrb	r1, [r3, #2]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	7a1b      	ldrb	r3, [r3, #8]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001f7c:	f7fe ff30 	bl	8000de0 <_ZN3lcd3LCD9write_intEhl>
				break;
 8001f80:	e018      	b.n	8001fb4 <_Z2UIPv+0xa8>
			}
			case i8: {
				display.write_int(pMsg->Len, pMsg->v.I8);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	7899      	ldrb	r1, [r3, #2]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001f90:	f7fe ff26 	bl	8000de0 <_ZN3lcd3LCD9write_intEhl>
				break;
 8001f94:	e00e      	b.n	8001fb4 <_Z2UIPv+0xa8>
			}
			case s: {
				display.write_string(pMsg->v.S);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4808      	ldr	r0, [pc, #32]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001f9e:	f7fe ff39 	bl	8000e14 <_ZN3lcd3LCD12write_stringEPc>
				break;
 8001fa2:	e007      	b.n	8001fb4 <_Z2UIPv+0xa8>
			}
			default: display.write_int(pMsg->Len, pMsg->v.U8);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	7899      	ldrb	r1, [r3, #2]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	7a1b      	ldrb	r3, [r3, #8]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <_Z2UIPv+0xb4>)
 8001fb0:	f7fe ff16 	bl	8000de0 <_ZN3lcd3LCD9write_intEhl>
		}
		delete pMsg;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f007 f86f 	bl	800909c <_ZdlPvj>
		xQueueReceive(*lcdQ, &pMsg, portMAX_DELAY );
 8001fbe:	e7be      	b.n	8001f3e <_Z2UIPv+0x32>
 8001fc0:	20000ef4 	.word	0x20000ef4
 8001fc4:	0800dc94 	.word	0x0800dc94

08001fc8 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af06      	add	r7, sp, #24
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d116      	bne.n	8002006 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d111      	bne.n	8002006 <_Z41__static_initialization_and_destruction_0ii+0x3e>
LCD display( dataPorts, dataPins, RS_GPIO_Port, RS_Pin, RW_GPIO_Port, RW_Pin, EN1_GPIO_Port, EN1_Pin, LCD_4_BIT_MODE);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9305      	str	r3, [sp, #20]
 8001fe6:	2310      	movs	r3, #16
 8001fe8:	9304      	str	r3, [sp, #16]
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001fec:	9303      	str	r3, [sp, #12]
 8001fee:	2304      	movs	r3, #4
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	; (800202c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001ffe:	490c      	ldr	r1, [pc, #48]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002002:	f7fe fe55 	bl	8000cb0 <_ZN3lcd3LCDC1EPP12GPIO_TypeDefPtS2_tS2_tS2_tNS_15Lcd_ModeTypeDefE>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d107      	bne.n	800201c <_Z41__static_initialization_and_destruction_0ii+0x54>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002012:	4293      	cmp	r3, r2
 8002014:	d102      	bne.n	800201c <_Z41__static_initialization_and_destruction_0ii+0x54>
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002018:	f7fe fe8c 	bl	8000d34 <_ZN3lcd3LCDD1Ev>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	48000400 	.word	0x48000400
 8002028:	48000800 	.word	0x48000800
 800202c:	2000001c 	.word	0x2000001c
 8002030:	2000000c 	.word	0x2000000c
 8002034:	20000ef4 	.word	0x20000ef4

08002038 <_GLOBAL__sub_I_display>:
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
 800203c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff ffc1 	bl	8001fc8 <_Z41__static_initialization_and_destruction_0ii>
 8002046:	bd80      	pop	{r7, pc}

08002048 <_GLOBAL__sub_D_display>:
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
 800204c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff ffb9 	bl	8001fc8 <_Z41__static_initialization_and_destruction_0ii>
 8002056:	bd80      	pop	{r7, pc}

08002058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002090 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800205c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800205e:	e003      	b.n	8002068 <LoopCopyDataInit>

08002060 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002062:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002064:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002066:	3104      	adds	r1, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <LoopForever+0xa>)
	ldr	r3, =_edata
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <LoopForever+0xe>)
	adds	r2, r0, r1
 800206c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800206e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002070:	d3f6      	bcc.n	8002060 <CopyDataInit>
	ldr	r2, =_sbss
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002074:	e002      	b.n	800207c <LoopFillZerobss>

08002076 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002076:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002078:	f842 3b04 	str.w	r3, [r2], #4

0800207c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <LoopForever+0x16>)
	cmp	r2, r3
 800207e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002080:	d3f9      	bcc.n	8002076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002082:	f7ff ff2d 	bl	8001ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002086:	f008 f867 	bl	800a158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800208a:	f7ff fa2b 	bl	80014e4 <main>

0800208e <LoopForever>:

LoopForever:
    b LoopForever
 800208e:	e7fe      	b.n	800208e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002090:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002094:	0800e020 	.word	0x0800e020
	ldr	r0, =_sdata
 8002098:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800209c:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 80020a0:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 80020a4:	20003c4c 	.word	0x20003c4c

080020a8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC3_IRQHandler>
	...

080020ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_Init+0x28>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_Init+0x28>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f001 fe2c 	bl	8003d1a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7ff fe3e 	bl	8001d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c8:	f7ff fd3e 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40022000 	.word	0x40022000

080020d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000028 	.word	0x20000028
 80020fc:	20003c04 	.word	0x20003c04

08002100 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;  
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20003c04 	.word	0x20003c04

08002118 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b09a      	sub	sp, #104	; 0x68
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e1e3      	b.n	800253c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d176      	bne.n	8002274 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d152      	bne.n	8002234 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fcf5 	bl	8001b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d13b      	bne.n	8002234 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f001 fbf1 	bl	80039a4 <ADC_Disable>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d12f      	bne.n	8002234 <HAL_ADC_Init+0xe0>
 80021d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d12b      	bne.n	8002234 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e4:	f023 0302 	bic.w	r3, r3, #2
 80021e8:	f043 0202 	orr.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021fe:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800220e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002210:	4b92      	ldr	r3, [pc, #584]	; (800245c <HAL_ADC_Init+0x308>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a92      	ldr	r2, [pc, #584]	; (8002460 <HAL_ADC_Init+0x30c>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9a      	lsrs	r2, r3, #18
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002226:	e002      	b.n	800222e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3b01      	subs	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f9      	bne.n	8002228 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800224c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002250:	d110      	bne.n	8002274 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f023 0312 	bic.w	r3, r3, #18
 800225a:	f043 0210 	orr.w	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 8150 	bne.w	8002522 <HAL_ADC_Init+0x3ce>
 8002282:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 814b 	bne.w	8002522 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 8143 	bne.w	8002522 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022a4:	f043 0202 	orr.w	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b4:	d004      	beq.n	80022c0 <HAL_ADC_Init+0x16c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_ADC_Init+0x310>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_Init+0x170>
 80022c0:	4b69      	ldr	r3, [pc, #420]	; (8002468 <HAL_ADC_Init+0x314>)
 80022c2:	e000      	b.n	80022c6 <HAL_ADC_Init+0x172>
 80022c4:	4b69      	ldr	r3, [pc, #420]	; (800246c <HAL_ADC_Init+0x318>)
 80022c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d0:	d102      	bne.n	80022d8 <HAL_ADC_Init+0x184>
 80022d2:	4b64      	ldr	r3, [pc, #400]	; (8002464 <HAL_ADC_Init+0x310>)
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e01a      	b.n	800230e <HAL_ADC_Init+0x1ba>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a61      	ldr	r2, [pc, #388]	; (8002464 <HAL_ADC_Init+0x310>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d103      	bne.n	80022ea <HAL_ADC_Init+0x196>
 80022e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e011      	b.n	800230e <HAL_ADC_Init+0x1ba>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a60      	ldr	r2, [pc, #384]	; (8002470 <HAL_ADC_Init+0x31c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d102      	bne.n	80022fa <HAL_ADC_Init+0x1a6>
 80022f4:	4b5f      	ldr	r3, [pc, #380]	; (8002474 <HAL_ADC_Init+0x320>)
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e009      	b.n	800230e <HAL_ADC_Init+0x1ba>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5d      	ldr	r2, [pc, #372]	; (8002474 <HAL_ADC_Init+0x320>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d102      	bne.n	800230a <HAL_ADC_Init+0x1b6>
 8002304:	4b5a      	ldr	r3, [pc, #360]	; (8002470 <HAL_ADC_Init+0x31c>)
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e001      	b.n	800230e <HAL_ADC_Init+0x1ba>
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d108      	bne.n	800232e <HAL_ADC_Init+0x1da>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x1da>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_ADC_Init+0x1dc>
 800232e:	2300      	movs	r3, #0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11c      	bne.n	800236e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002334:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	d010      	beq.n	800235c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_ADC_Init+0x202>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_ADC_Init+0x202>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_ADC_Init+0x204>
 8002356:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002358:	2b00      	cmp	r3, #0
 800235a:	d108      	bne.n	800236e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800235c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	431a      	orrs	r2, r3
 800236a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7e5b      	ldrb	r3, [r3, #25]
 8002372:	035b      	lsls	r3, r3, #13
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002378:	2a01      	cmp	r2, #1
 800237a:	d002      	beq.n	8002382 <HAL_ADC_Init+0x22e>
 800237c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002380:	e000      	b.n	8002384 <HAL_ADC_Init+0x230>
 8002382:	2200      	movs	r2, #0
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4313      	orrs	r3, r2
 8002392:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002394:	4313      	orrs	r3, r2
 8002396:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d11b      	bne.n	80023da <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7e5b      	ldrb	r3, [r3, #25]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	3b01      	subs	r3, #1
 80023b0:	045a      	lsls	r2, r3, #17
 80023b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	663b      	str	r3, [r7, #96]	; 0x60
 80023bc:	e00d      	b.n	80023da <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d054      	beq.n	800248c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a22      	ldr	r2, [pc, #136]	; (8002470 <HAL_ADC_Init+0x31c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d004      	beq.n	80023f6 <HAL_ADC_Init+0x2a2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a20      	ldr	r2, [pc, #128]	; (8002474 <HAL_ADC_Init+0x320>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d140      	bne.n	8002478 <HAL_ADC_Init+0x324>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80023fe:	d02a      	beq.n	8002456 <HAL_ADC_Init+0x302>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002408:	d022      	beq.n	8002450 <HAL_ADC_Init+0x2fc>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002412:	d01a      	beq.n	800244a <HAL_ADC_Init+0x2f6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800241c:	d012      	beq.n	8002444 <HAL_ADC_Init+0x2f0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002426:	d00a      	beq.n	800243e <HAL_ADC_Init+0x2ea>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002430:	d002      	beq.n	8002438 <HAL_ADC_Init+0x2e4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	e023      	b.n	8002480 <HAL_ADC_Init+0x32c>
 8002438:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800243c:	e020      	b.n	8002480 <HAL_ADC_Init+0x32c>
 800243e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002442:	e01d      	b.n	8002480 <HAL_ADC_Init+0x32c>
 8002444:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002448:	e01a      	b.n	8002480 <HAL_ADC_Init+0x32c>
 800244a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244e:	e017      	b.n	8002480 <HAL_ADC_Init+0x32c>
 8002450:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002454:	e014      	b.n	8002480 <HAL_ADC_Init+0x32c>
 8002456:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800245a:	e011      	b.n	8002480 <HAL_ADC_Init+0x32c>
 800245c:	20000008 	.word	0x20000008
 8002460:	431bde83 	.word	0x431bde83
 8002464:	50000100 	.word	0x50000100
 8002468:	50000300 	.word	0x50000300
 800246c:	50000700 	.word	0x50000700
 8002470:	50000400 	.word	0x50000400
 8002474:	50000500 	.word	0x50000500
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002484:	4313      	orrs	r3, r2
 8002486:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002488:	4313      	orrs	r3, r2
 800248a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d114      	bne.n	80024c4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a8:	f023 0302 	bic.w	r3, r3, #2
 80024ac:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7e1b      	ldrb	r3, [r3, #24]
 80024b2:	039a      	lsls	r2, r3, #14
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4313      	orrs	r3, r2
 80024be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c0:	4313      	orrs	r3, r2
 80024c2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_ADC_Init+0x3f0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80024d4:	430b      	orrs	r3, r1
 80024d6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10c      	bne.n	80024fa <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f023 010f 	bic.w	r1, r3, #15
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
 80024f8:	e007      	b.n	800250a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 020f 	bic.w	r2, r2, #15
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f023 0303 	bic.w	r3, r3, #3
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
 8002520:	e00a      	b.n	8002538 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f023 0312 	bic.w	r3, r3, #18
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002532:	2301      	movs	r3, #1
 8002534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800253c:	4618      	mov	r0, r3
 800253e:	3768      	adds	r7, #104	; 0x68
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	fff0c007 	.word	0xfff0c007

08002548 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80f9 	bne.w	8002756 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Start+0x2a>
 800256e:	2302      	movs	r3, #2
 8002570:	e0f4      	b.n	800275c <HAL_ADC_Start+0x214>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f001 f9b4 	bl	80038e8 <ADC_Enable>
 8002580:	4603      	mov	r3, r0
 8002582:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 80e0 	bne.w	800274c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a8:	d004      	beq.n	80025b4 <HAL_ADC_Start+0x6c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6d      	ldr	r2, [pc, #436]	; (8002764 <HAL_ADC_Start+0x21c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d106      	bne.n	80025c2 <HAL_ADC_Start+0x7a>
 80025b4:	4b6c      	ldr	r3, [pc, #432]	; (8002768 <HAL_ADC_Start+0x220>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <HAL_ADC_Start+0x9a>
 80025c0:	e005      	b.n	80025ce <HAL_ADC_Start+0x86>
 80025c2:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_ADC_Start+0x224>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_ADC_Start+0x9a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d6:	d004      	beq.n	80025e2 <HAL_ADC_Start+0x9a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a64      	ldr	r2, [pc, #400]	; (8002770 <HAL_ADC_Start+0x228>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d115      	bne.n	800260e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d036      	beq.n	800266a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002604:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800260c:	e02d      	b.n	800266a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002622:	d004      	beq.n	800262e <HAL_ADC_Start+0xe6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4e      	ldr	r2, [pc, #312]	; (8002764 <HAL_ADC_Start+0x21c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10a      	bne.n	8002644 <HAL_ADC_Start+0xfc>
 800262e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e008      	b.n	8002656 <HAL_ADC_Start+0x10e>
 8002644:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_ADC_Start+0x228>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002662:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	d106      	bne.n	8002686 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	f023 0206 	bic.w	r2, r3, #6
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	645a      	str	r2, [r3, #68]	; 0x44
 8002684:	e002      	b.n	800268c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	221c      	movs	r2, #28
 800269a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a4:	d004      	beq.n	80026b0 <HAL_ADC_Start+0x168>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2e      	ldr	r2, [pc, #184]	; (8002764 <HAL_ADC_Start+0x21c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d106      	bne.n	80026be <HAL_ADC_Start+0x176>
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_ADC_Start+0x220>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d03e      	beq.n	800273a <HAL_ADC_Start+0x1f2>
 80026bc:	e005      	b.n	80026ca <HAL_ADC_Start+0x182>
 80026be:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_ADC_Start+0x224>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d037      	beq.n	800273a <HAL_ADC_Start+0x1f2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d2:	d004      	beq.n	80026de <HAL_ADC_Start+0x196>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_ADC_Start+0x21c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d106      	bne.n	80026ec <HAL_ADC_Start+0x1a4>
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_ADC_Start+0x220>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d027      	beq.n	800273a <HAL_ADC_Start+0x1f2>
 80026ea:	e005      	b.n	80026f8 <HAL_ADC_Start+0x1b0>
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <HAL_ADC_Start+0x224>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d020      	beq.n	800273a <HAL_ADC_Start+0x1f2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002700:	d004      	beq.n	800270c <HAL_ADC_Start+0x1c4>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a17      	ldr	r2, [pc, #92]	; (8002764 <HAL_ADC_Start+0x21c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d106      	bne.n	800271a <HAL_ADC_Start+0x1d2>
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_ADC_Start+0x220>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2b09      	cmp	r3, #9
 8002716:	d010      	beq.n	800273a <HAL_ADC_Start+0x1f2>
 8002718:	e005      	b.n	8002726 <HAL_ADC_Start+0x1de>
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_ADC_Start+0x224>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2b09      	cmp	r3, #9
 8002724:	d009      	beq.n	800273a <HAL_ADC_Start+0x1f2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800272e:	d004      	beq.n	800273a <HAL_ADC_Start+0x1f2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <HAL_ADC_Start+0x228>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10f      	bne.n	800275a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0204 	orr.w	r2, r2, #4
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	e006      	b.n	800275a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002754:	e001      	b.n	800275a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002756:	2302      	movs	r3, #2
 8002758:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	50000100 	.word	0x50000100
 8002768:	50000300 	.word	0x50000300
 800276c:	50000700 	.word	0x50000700
 8002770:	50000400 	.word	0x50000400

08002774 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_ADC_Stop+0x1a>
 800278a:	2302      	movs	r3, #2
 800278c:	e023      	b.n	80027d6 <HAL_ADC_Stop+0x62>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002796:	216c      	movs	r1, #108	; 0x6c
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f001 f963 	bl	8003a64 <ADC_ConversionStop>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d111      	bne.n	80027cc <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f001 f8fb 	bl	80039a4 <ADC_Disable>
 80027ae:	4603      	mov	r3, r0
 80027b0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d102      	bne.n	80027fc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80027f6:	2308      	movs	r3, #8
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e03a      	b.n	8002872 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002804:	d004      	beq.n	8002810 <HAL_ADC_PollForConversion+0x30>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6e      	ldr	r2, [pc, #440]	; (80029c4 <HAL_ADC_PollForConversion+0x1e4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_ADC_PollForConversion+0x34>
 8002810:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <HAL_ADC_PollForConversion+0x1e8>)
 8002812:	e000      	b.n	8002816 <HAL_ADC_PollForConversion+0x36>
 8002814:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <HAL_ADC_PollForConversion+0x1ec>)
 8002816:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2b00      	cmp	r3, #0
 8002822:	d112      	bne.n	800284a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d11d      	bne.n	800286e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0b8      	b.n	80029bc <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0220 	orr.w	r2, r3, #32
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0a6      	b.n	80029bc <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800286e:	230c      	movs	r3, #12
 8002870:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287a:	d004      	beq.n	8002886 <HAL_ADC_PollForConversion+0xa6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_ADC_PollForConversion+0x1e4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d106      	bne.n	8002894 <HAL_ADC_PollForConversion+0xb4>
 8002886:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_ADC_PollForConversion+0x1e8>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2b00      	cmp	r3, #0
 8002890:	d010      	beq.n	80028b4 <HAL_ADC_PollForConversion+0xd4>
 8002892:	e005      	b.n	80028a0 <HAL_ADC_PollForConversion+0xc0>
 8002894:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <HAL_ADC_PollForConversion+0x1ec>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HAL_ADC_PollForConversion+0xd4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028a8:	d004      	beq.n	80028b4 <HAL_ADC_PollForConversion+0xd4>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a48      	ldr	r2, [pc, #288]	; (80029d0 <HAL_ADC_PollForConversion+0x1f0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d104      	bne.n	80028be <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	e00f      	b.n	80028de <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c6:	d004      	beq.n	80028d2 <HAL_ADC_PollForConversion+0xf2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <HAL_ADC_PollForConversion+0x1e4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d102      	bne.n	80028d8 <HAL_ADC_PollForConversion+0xf8>
 80028d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028d6:	e000      	b.n	80028da <HAL_ADC_PollForConversion+0xfa>
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_ADC_PollForConversion+0x1f0>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80028de:	f7ff fc0f 	bl	8002100 <HAL_GetTick>
 80028e2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80028e4:	e01a      	b.n	800291c <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d016      	beq.n	800291c <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_ADC_PollForConversion+0x124>
 80028f4:	f7ff fc04 	bl	8002100 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d20b      	bcs.n	800291c <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0204 	orr.w	r2, r3, #4
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e04f      	b.n	80029bc <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0dd      	beq.n	80028e6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002940:	2b00      	cmp	r3, #0
 8002942:	d131      	bne.n	80029a8 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12c      	bne.n	80029a8 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b08      	cmp	r3, #8
 800295a:	d125      	bne.n	80029a8 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d112      	bne.n	8002990 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d112      	bne.n	80029a8 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
 800298e:	e00b      	b.n	80029a8 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	50000100 	.word	0x50000100
 80029c8:	50000300 	.word	0x50000300
 80029cc:	50000700 	.word	0x50000700
 80029d0:	50000400 	.word	0x50000400

080029d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d106      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x30>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d00f      	beq.n	8002a40 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	f040 80c0 	bne.w	8002bb0 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	f040 80b8 	bne.w	8002bb0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_IRQHandler+0x7c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a95      	ldr	r2, [pc, #596]	; (8002cbc <HAL_ADC_IRQHandler+0x2cc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d106      	bne.n	8002a7a <HAL_ADC_IRQHandler+0x8a>
 8002a6c:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <HAL_ADC_IRQHandler+0x2d0>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d03e      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x106>
 8002a78:	e005      	b.n	8002a86 <HAL_ADC_IRQHandler+0x96>
 8002a7a:	4b92      	ldr	r3, [pc, #584]	; (8002cc4 <HAL_ADC_IRQHandler+0x2d4>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d037      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x106>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a8e:	d004      	beq.n	8002a9a <HAL_ADC_IRQHandler+0xaa>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a89      	ldr	r2, [pc, #548]	; (8002cbc <HAL_ADC_IRQHandler+0x2cc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d106      	bne.n	8002aa8 <HAL_ADC_IRQHandler+0xb8>
 8002a9a:	4b89      	ldr	r3, [pc, #548]	; (8002cc0 <HAL_ADC_IRQHandler+0x2d0>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d027      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x106>
 8002aa6:	e005      	b.n	8002ab4 <HAL_ADC_IRQHandler+0xc4>
 8002aa8:	4b86      	ldr	r3, [pc, #536]	; (8002cc4 <HAL_ADC_IRQHandler+0x2d4>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d020      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x106>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002abc:	d004      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0xd8>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	; (8002cbc <HAL_ADC_IRQHandler+0x2cc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d106      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0xe6>
 8002ac8:	4b7d      	ldr	r3, [pc, #500]	; (8002cc0 <HAL_ADC_IRQHandler+0x2d0>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d010      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x106>
 8002ad4:	e005      	b.n	8002ae2 <HAL_ADC_IRQHandler+0xf2>
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_ADC_IRQHandler+0x2d4>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d009      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x106>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aea:	d004      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x106>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a75      	ldr	r2, [pc, #468]	; (8002cc8 <HAL_ADC_IRQHandler+0x2d8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d104      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	e00f      	b.n	8002b20 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b08:	d004      	beq.n	8002b14 <HAL_ADC_IRQHandler+0x124>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6b      	ldr	r2, [pc, #428]	; (8002cbc <HAL_ADC_IRQHandler+0x2cc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d102      	bne.n	8002b1a <HAL_ADC_IRQHandler+0x12a>
 8002b14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b18:	e000      	b.n	8002b1c <HAL_ADC_IRQHandler+0x12c>
 8002b1a:	4b6b      	ldr	r3, [pc, #428]	; (8002cc8 <HAL_ADC_IRQHandler+0x2d8>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d139      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d134      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d12d      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11a      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 020c 	bic.w	r2, r2, #12
 8002b62:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d112      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
 8002b88:	e00b      	b.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fab8 	bl	8002118 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	220c      	movs	r2, #12
 8002bae:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d106      	bne.n	8002bcc <HAL_ADC_IRQHandler+0x1dc>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d00f      	beq.n	8002bec <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	f040 813c 	bne.w	8002e54 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	f040 8134 	bne.w	8002e54 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_IRQHandler+0x21c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a2d      	ldr	r2, [pc, #180]	; (8002cbc <HAL_ADC_IRQHandler+0x2cc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d106      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x22a>
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_ADC_IRQHandler+0x2d0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d03e      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x2a6>
 8002c18:	e005      	b.n	8002c26 <HAL_ADC_IRQHandler+0x236>
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <HAL_ADC_IRQHandler+0x2d4>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d037      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x2a6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2e:	d004      	beq.n	8002c3a <HAL_ADC_IRQHandler+0x24a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <HAL_ADC_IRQHandler+0x2cc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d106      	bne.n	8002c48 <HAL_ADC_IRQHandler+0x258>
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_ADC_IRQHandler+0x2d0>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d027      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x2a6>
 8002c46:	e005      	b.n	8002c54 <HAL_ADC_IRQHandler+0x264>
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_ADC_IRQHandler+0x2d4>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d020      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x2a6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x278>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_ADC_IRQHandler+0x2cc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d106      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x286>
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_ADC_IRQHandler+0x2d0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	d010      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x2a6>
 8002c74:	e005      	b.n	8002c82 <HAL_ADC_IRQHandler+0x292>
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_ADC_IRQHandler+0x2d4>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	d009      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x2a6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c8a:	d004      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x2a6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_ADC_IRQHandler+0x2d8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d104      	bne.n	8002ca0 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e018      	b.n	8002cd2 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_IRQHandler+0x2c4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <HAL_ADC_IRQHandler+0x2cc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10b      	bne.n	8002ccc <HAL_ADC_IRQHandler+0x2dc>
 8002cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cb8:	e009      	b.n	8002cce <HAL_ADC_IRQHandler+0x2de>
 8002cba:	bf00      	nop
 8002cbc:	50000100 	.word	0x50000100
 8002cc0:	50000300 	.word	0x50000300
 8002cc4:	50000700 	.word	0x50000700
 8002cc8:	50000400 	.word	0x50000400
 8002ccc:	4b9d      	ldr	r3, [pc, #628]	; (8002f44 <HAL_ADC_IRQHandler+0x554>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 80ad 	bne.w	8002e46 <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 80a5 	bne.w	8002e46 <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 809f 	bne.w	8002e46 <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	f040 8097 	bne.w	8002e46 <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d20:	d004      	beq.n	8002d2c <HAL_ADC_IRQHandler+0x33c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a88      	ldr	r2, [pc, #544]	; (8002f48 <HAL_ADC_IRQHandler+0x558>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d106      	bne.n	8002d3a <HAL_ADC_IRQHandler+0x34a>
 8002d2c:	4b87      	ldr	r3, [pc, #540]	; (8002f4c <HAL_ADC_IRQHandler+0x55c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d03e      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x3c6>
 8002d38:	e005      	b.n	8002d46 <HAL_ADC_IRQHandler+0x356>
 8002d3a:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_ADC_IRQHandler+0x560>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d037      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x3c6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d4e:	d004      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x36a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <HAL_ADC_IRQHandler+0x558>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d106      	bne.n	8002d68 <HAL_ADC_IRQHandler+0x378>
 8002d5a:	4b7c      	ldr	r3, [pc, #496]	; (8002f4c <HAL_ADC_IRQHandler+0x55c>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d027      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x3c6>
 8002d66:	e005      	b.n	8002d74 <HAL_ADC_IRQHandler+0x384>
 8002d68:	4b79      	ldr	r3, [pc, #484]	; (8002f50 <HAL_ADC_IRQHandler+0x560>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d020      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x3c6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7c:	d004      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x398>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a71      	ldr	r2, [pc, #452]	; (8002f48 <HAL_ADC_IRQHandler+0x558>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d106      	bne.n	8002d96 <HAL_ADC_IRQHandler+0x3a6>
 8002d88:	4b70      	ldr	r3, [pc, #448]	; (8002f4c <HAL_ADC_IRQHandler+0x55c>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2b07      	cmp	r3, #7
 8002d92:	d010      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x3c6>
 8002d94:	e005      	b.n	8002da2 <HAL_ADC_IRQHandler+0x3b2>
 8002d96:	4b6e      	ldr	r3, [pc, #440]	; (8002f50 <HAL_ADC_IRQHandler+0x560>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2b07      	cmp	r3, #7
 8002da0:	d009      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x3c6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002daa:	d004      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x3c6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a64      	ldr	r2, [pc, #400]	; (8002f44 <HAL_ADC_IRQHandler+0x554>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d104      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e00f      	b.n	8002de0 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc8:	d004      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0x3e4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <HAL_ADC_IRQHandler+0x558>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d102      	bne.n	8002dda <HAL_ADC_IRQHandler+0x3ea>
 8002dd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dd8:	e000      	b.n	8002ddc <HAL_ADC_IRQHandler+0x3ec>
 8002dda:	4b5a      	ldr	r3, [pc, #360]	; (8002f44 <HAL_ADC_IRQHandler+0x554>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d12d      	bne.n	8002e46 <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11a      	bne.n	8002e2e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e06:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d112      	bne.n	8002e46 <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e2c:	e00b      	b.n	8002e46 <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f948 	bl	80030dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2260      	movs	r2, #96	; 0x60
 8002e52:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b80      	cmp	r3, #128	; 0x80
 8002e60:	d113      	bne.n	8002e8a <HAL_ADC_IRQHandler+0x49a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d10c      	bne.n	8002e8a <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff f955 	bl	800212c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	d115      	bne.n	8002ec6 <HAL_ADC_IRQHandler+0x4d6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f924 	bl	8003104 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed4:	d115      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x512>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee4:	d10d      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f910 	bl	8003118 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f00:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d151      	bne.n	8002fb4 <HAL_ADC_IRQHandler+0x5c4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d14a      	bne.n	8002fb4 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002f26:	2301      	movs	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e02d      	b.n	8002f88 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_IRQHandler+0x550>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <HAL_ADC_IRQHandler+0x558>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d109      	bne.n	8002f54 <HAL_ADC_IRQHandler+0x564>
 8002f40:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <HAL_ADC_IRQHandler+0x55c>)
 8002f42:	e008      	b.n	8002f56 <HAL_ADC_IRQHandler+0x566>
 8002f44:	50000400 	.word	0x50000400
 8002f48:	50000100 	.word	0x50000100
 8002f4c:	50000300 	.word	0x50000300
 8002f50:	50000700 	.word	0x50000700
 8002f54:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <HAL_ADC_IRQHandler+0x614>)
 8002f56:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10a      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002f72:	2301      	movs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e007      	b.n	8002f88 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002f84:	2301      	movs	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10e      	bne.n	8002fac <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f043 0202 	orr.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff f8ca 	bl	8002140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d11b      	bne.n	8002ffc <HAL_ADC_IRQHandler+0x60c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd2:	d113      	bne.n	8002ffc <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	f043 0208 	orr.w	r2, r3, #8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f87a 	bl	80030f0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	50000700 	.word	0x50000700

08003008 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_ADCEx_Calibration_Start+0x1c>
 8003020:	2302      	movs	r3, #2
 8003022:	e057      	b.n	80030d4 <HAL_ADCEx_Calibration_Start+0xcc>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fcb9 	bl	80039a4 <ADC_Disable>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d146      	bne.n	80030ca <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003050:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003066:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003076:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003078:	f7ff f842 	bl	8002100 <HAL_GetTick>
 800307c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800307e:	e014      	b.n	80030aa <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003080:	f7ff f83e 	bl	8002100 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b0a      	cmp	r3, #10
 800308c:	d90d      	bls.n	80030aa <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f023 0312 	bic.w	r3, r3, #18
 8003096:	f043 0210 	orr.w	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e014      	b.n	80030d4 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030b8:	d0e2      	beq.n	8003080 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800312c:	b480      	push	{r7}
 800312e:	b09b      	sub	sp, #108	; 0x6c
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x22>
 800314a:	2302      	movs	r3, #2
 800314c:	e2cb      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x5ba>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	f040 82af 	bne.w	80036c4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d81c      	bhi.n	80031a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	461a      	mov	r2, r3
 8003182:	231f      	movs	r3, #31
 8003184:	4093      	lsls	r3, r2
 8003186:	43db      	mvns	r3, r3
 8003188:	4019      	ands	r1, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	fa00 f203 	lsl.w	r2, r0, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
 80031a6:	e063      	b.n	8003270 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b09      	cmp	r3, #9
 80031ae:	d81e      	bhi.n	80031ee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	3b1e      	subs	r3, #30
 80031c4:	221f      	movs	r2, #31
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	4019      	ands	r1, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	3b1e      	subs	r3, #30
 80031e0:	fa00 f203 	lsl.w	r2, r0, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34
 80031ec:	e040      	b.n	8003270 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b0e      	cmp	r3, #14
 80031f4:	d81e      	bhi.n	8003234 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	3b3c      	subs	r3, #60	; 0x3c
 800320a:	221f      	movs	r2, #31
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	4019      	ands	r1, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	3b3c      	subs	r3, #60	; 0x3c
 8003226:	fa00 f203 	lsl.w	r2, r0, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
 8003232:	e01d      	b.n	8003270 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	3b5a      	subs	r3, #90	; 0x5a
 8003248:	221f      	movs	r2, #31
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	4019      	ands	r1, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	3b5a      	subs	r3, #90	; 0x5a
 8003264:	fa00 f203 	lsl.w	r2, r0, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 80e5 	bne.w	800344a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b09      	cmp	r3, #9
 8003286:	d91c      	bls.n	80032c2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6999      	ldr	r1, [r3, #24]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	3b1e      	subs	r3, #30
 800329a:	2207      	movs	r2, #7
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	4019      	ands	r1, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6898      	ldr	r0, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	3b1e      	subs	r3, #30
 80032b4:	fa00 f203 	lsl.w	r2, r0, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	619a      	str	r2, [r3, #24]
 80032c0:	e019      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6959      	ldr	r1, [r3, #20]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	2207      	movs	r2, #7
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	4019      	ands	r1, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6898      	ldr	r0, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	fa00 f203 	lsl.w	r2, r0, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	3b01      	subs	r3, #1
 8003314:	2b03      	cmp	r3, #3
 8003316:	d84f      	bhi.n	80033b8 <HAL_ADC_ConfigChannel+0x28c>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <HAL_ADC_ConfigChannel+0x1f4>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003331 	.word	0x08003331
 8003324:	08003353 	.word	0x08003353
 8003328:	08003375 	.word	0x08003375
 800332c:	08003397 	.word	0x08003397
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003336:	4b9f      	ldr	r3, [pc, #636]	; (80035b4 <HAL_ADC_ConfigChannel+0x488>)
 8003338:	4013      	ands	r3, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	0691      	lsls	r1, r2, #26
 8003340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003342:	430a      	orrs	r2, r1
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800334e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003350:	e07e      	b.n	8003450 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003358:	4b96      	ldr	r3, [pc, #600]	; (80035b4 <HAL_ADC_ConfigChannel+0x488>)
 800335a:	4013      	ands	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	0691      	lsls	r1, r2, #26
 8003362:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003364:	430a      	orrs	r2, r1
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003370:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003372:	e06d      	b.n	8003450 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800337a:	4b8e      	ldr	r3, [pc, #568]	; (80035b4 <HAL_ADC_ConfigChannel+0x488>)
 800337c:	4013      	ands	r3, r2
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	0691      	lsls	r1, r2, #26
 8003384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003386:	430a      	orrs	r2, r1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003392:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003394:	e05c      	b.n	8003450 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800339c:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_ADC_ConfigChannel+0x488>)
 800339e:	4013      	ands	r3, r2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	0691      	lsls	r1, r2, #26
 80033a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033a8:	430a      	orrs	r2, r1
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033b4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80033b6:	e04b      	b.n	8003450 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	069b      	lsls	r3, r3, #26
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d107      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033da:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	069b      	lsls	r3, r3, #26
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d107      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033fe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	069b      	lsls	r3, r3, #26
 8003410:	429a      	cmp	r2, r3
 8003412:	d107      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003422:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	069b      	lsls	r3, r3, #26
 8003434:	429a      	cmp	r2, r3
 8003436:	d10a      	bne.n	800344e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003446:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003448:	e001      	b.n	800344e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <HAL_ADC_ConfigChannel+0x324>
      break;
 800344e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x344>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x344>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_ADC_ConfigChannel+0x346>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 8131 	bne.w	80036da <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d00f      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2201      	movs	r2, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	400a      	ands	r2, r1
 800349a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800349e:	e049      	b.n	8003534 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2201      	movs	r2, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b09      	cmp	r3, #9
 80034c0:	d91c      	bls.n	80034fc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6999      	ldr	r1, [r3, #24]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	3b1b      	subs	r3, #27
 80034d4:	2207      	movs	r2, #7
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	4019      	ands	r1, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6898      	ldr	r0, [r3, #8]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	3b1b      	subs	r3, #27
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	619a      	str	r2, [r3, #24]
 80034fa:	e01b      	b.n	8003534 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6959      	ldr	r1, [r3, #20]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	2207      	movs	r2, #7
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	4019      	ands	r1, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6898      	ldr	r0, [r3, #8]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	fa00 f203 	lsl.w	r2, r0, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800353c:	d004      	beq.n	8003548 <HAL_ADC_ConfigChannel+0x41c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <HAL_ADC_ConfigChannel+0x48c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x420>
 8003548:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <HAL_ADC_ConfigChannel+0x490>)
 800354a:	e000      	b.n	800354e <HAL_ADC_ConfigChannel+0x422>
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <HAL_ADC_ConfigChannel+0x494>)
 800354e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b10      	cmp	r3, #16
 8003556:	d105      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003560:	2b00      	cmp	r3, #0
 8003562:	d015      	beq.n	8003590 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003568:	2b11      	cmp	r3, #17
 800356a:	d105      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800356c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800357c:	2b12      	cmp	r3, #18
 800357e:	f040 80ac 	bne.w	80036da <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 80a5 	bne.w	80036da <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003598:	d102      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x474>
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_ADC_ConfigChannel+0x48c>)
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	e023      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x4bc>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <HAL_ADC_ConfigChannel+0x48c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d10c      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x498>
 80035aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e01a      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x4bc>
 80035b2:	bf00      	nop
 80035b4:	83fff000 	.word	0x83fff000
 80035b8:	50000100 	.word	0x50000100
 80035bc:	50000300 	.word	0x50000300
 80035c0:	50000700 	.word	0x50000700
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a4a      	ldr	r2, [pc, #296]	; (80036f4 <HAL_ADC_ConfigChannel+0x5c8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d102      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x4a8>
 80035ce:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_ADC_ConfigChannel+0x5cc>)
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e009      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x4bc>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a47      	ldr	r2, [pc, #284]	; (80036f8 <HAL_ADC_ConfigChannel+0x5cc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d102      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x4b8>
 80035de:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <HAL_ADC_ConfigChannel+0x5c8>)
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e001      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x4bc>
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x4dc>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x4dc>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_ADC_ConfigChannel+0x4de>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d150      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800360e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x504>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x504>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_ADC_ConfigChannel+0x506>
 8003630:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13c      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b10      	cmp	r3, #16
 800363c:	d11d      	bne.n	800367a <HAL_ADC_ConfigChannel+0x54e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003646:	d118      	bne.n	800367a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003652:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003654:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_ADC_ConfigChannel+0x5d0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a29      	ldr	r2, [pc, #164]	; (8003700 <HAL_ADC_ConfigChannel+0x5d4>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0c9a      	lsrs	r2, r3, #18
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800366a:	e002      	b.n	8003672 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3b01      	subs	r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f9      	bne.n	800366c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003678:	e02e      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b11      	cmp	r3, #17
 8003680:	d10b      	bne.n	800369a <HAL_ADC_ConfigChannel+0x56e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800368a:	d106      	bne.n	800369a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800368c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003696:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003698:	e01e      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b12      	cmp	r3, #18
 80036a0:	d11a      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80036a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036ae:	e013      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80036c2:	e00a      	b.n	80036da <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80036d6:	e000      	b.n	80036da <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036d8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	376c      	adds	r7, #108	; 0x6c
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	50000400 	.word	0x50000400
 80036f8:	50000500 	.word	0x50000500
 80036fc:	20000008 	.word	0x20000008
 8003700:	431bde83 	.word	0x431bde83

08003704 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003704:	b480      	push	{r7}
 8003706:	b099      	sub	sp, #100	; 0x64
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800371c:	d102      	bne.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800371e:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	e01a      	b.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a6a      	ldr	r2, [pc, #424]	; (80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d103      	bne.n	8003736 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800372e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	e011      	b.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a67      	ldr	r2, [pc, #412]	; (80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d102      	bne.n	8003746 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003740:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	e009      	b.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a64      	ldr	r2, [pc, #400]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d102      	bne.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003750:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	e001      	b.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b0      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800376e:	2302      	movs	r3, #2
 8003770:	e0a9      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 808d 	bne.w	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 8086 	bne.w	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a0:	d004      	beq.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a4b      	ldr	r2, [pc, #300]	; (80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80037ac:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80037ae:	e000      	b.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80037b0:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80037b2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d040      	beq.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80037bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037ce:	035b      	lsls	r3, r3, #13
 80037d0:	430b      	orrs	r3, r1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80037f8:	2300      	movs	r3, #0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d15c      	bne.n	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800381a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800381c:	2b00      	cmp	r3, #0
 800381e:	d14b      	bne.n	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003828:	f023 030f 	bic.w	r3, r3, #15
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	6811      	ldr	r1, [r2, #0]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	6892      	ldr	r2, [r2, #8]
 8003834:	430a      	orrs	r2, r1
 8003836:	431a      	orrs	r2, r3
 8003838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800383a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800383c:	e03c      	b.n	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800383e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003848:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d108      	bne.n	800386a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d123      	bne.n	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800388c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d112      	bne.n	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800389a:	f023 030f 	bic.w	r3, r3, #15
 800389e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038a0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80038a2:	e009      	b.n	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80038b6:	e000      	b.n	80038ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80038b8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80038c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80038c6:	4618      	mov	r0, r3
 80038c8:	3764      	adds	r7, #100	; 0x64
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	50000100 	.word	0x50000100
 80038d8:	50000400 	.word	0x50000400
 80038dc:	50000500 	.word	0x50000500
 80038e0:	50000300 	.word	0x50000300
 80038e4:	50000700 	.word	0x50000700

080038e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d108      	bne.n	8003914 <ADC_Enable+0x2c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <ADC_Enable+0x2c>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <ADC_Enable+0x2e>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d13c      	bne.n	8003994 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <ADC_Enable+0xb8>)
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00d      	beq.n	8003944 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f043 0210 	orr.w	r2, r3, #16
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e028      	b.n	8003996 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003954:	f7fe fbd4 	bl	8002100 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800395a:	e014      	b.n	8003986 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800395c:	f7fe fbd0 	bl	8002100 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d90d      	bls.n	8003986 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e007      	b.n	8003996 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d1e3      	bne.n	800395c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	8000003f 	.word	0x8000003f

080039a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d108      	bne.n	80039d0 <ADC_Disable+0x2c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <ADC_Disable+0x2c>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <ADC_Disable+0x2e>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d040      	beq.n	8003a58 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030d 	and.w	r3, r3, #13
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10f      	bne.n	8003a04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0202 	orr.w	r2, r2, #2
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2203      	movs	r2, #3
 80039fa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80039fc:	f7fe fb80 	bl	8002100 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a02:	e022      	b.n	8003a4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0210 	orr.w	r2, r3, #16
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	f043 0201 	orr.w	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e01c      	b.n	8003a5a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a20:	f7fe fb6e 	bl	8002100 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d90d      	bls.n	8003a4a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0210 	orr.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e007      	b.n	8003a5a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d0e3      	beq.n	8003a20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8093 	beq.w	8003bb0 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a98:	d12a      	bne.n	8003af0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d126      	bne.n	8003af0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d122      	bne.n	8003af0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003aaa:	230c      	movs	r3, #12
 8003aac:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003aae:	e014      	b.n	8003ada <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4a42      	ldr	r2, [pc, #264]	; (8003bbc <ADC_ConversionStop+0x158>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d90d      	bls.n	8003ad4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e06e      	b.n	8003bb2 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d1e3      	bne.n	8003ab0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2240      	movs	r2, #64	; 0x40
 8003aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b60      	cmp	r3, #96	; 0x60
 8003af4:	d015      	beq.n	8003b22 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d10e      	bne.n	8003b22 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0210 	orr.w	r2, r2, #16
 8003b20:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d015      	beq.n	8003b54 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d10e      	bne.n	8003b54 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0220 	orr.w	r2, r2, #32
 8003b52:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b60      	cmp	r3, #96	; 0x60
 8003b58:	d004      	beq.n	8003b64 <ADC_ConversionStop+0x100>
 8003b5a:	2b6c      	cmp	r3, #108	; 0x6c
 8003b5c:	d105      	bne.n	8003b6a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003b5e:	230c      	movs	r3, #12
 8003b60:	617b      	str	r3, [r7, #20]
        break;
 8003b62:	e005      	b.n	8003b70 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003b64:	2308      	movs	r3, #8
 8003b66:	617b      	str	r3, [r7, #20]
        break;
 8003b68:	e002      	b.n	8003b70 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	617b      	str	r3, [r7, #20]
        break;
 8003b6e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b70:	f7fe fac6 	bl	8002100 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003b76:	e014      	b.n	8003ba2 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b78:	f7fe fac2 	bl	8002100 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b0b      	cmp	r3, #11
 8003b84:	d90d      	bls.n	8003ba2 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e007      	b.n	8003bb2 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e3      	bne.n	8003b78 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	000993ff 	.word	0x000993ff

08003bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_GetPriorityGrouping+0x18>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0307 	and.w	r3, r3, #7
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db0b      	blt.n	8003c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4907      	ldr	r1, [pc, #28]	; (8003c5c <__NVIC_EnableIRQ+0x38>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2001      	movs	r0, #1
 8003c46:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e100 	.word	0xe000e100

08003c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db0a      	blt.n	8003c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	490c      	ldr	r1, [pc, #48]	; (8003cac <__NVIC_SetPriority+0x4c>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c88:	e00a      	b.n	8003ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <__NVIC_SetPriority+0x50>)
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	3b04      	subs	r3, #4
 8003c98:	0112      	lsls	r2, r2, #4
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	761a      	strb	r2, [r3, #24]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000e100 	.word	0xe000e100
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf28      	it	cs
 8003cd2:	2304      	movcs	r3, #4
 8003cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d902      	bls.n	8003ce4 <NVIC_EncodePriority+0x30>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3b03      	subs	r3, #3
 8003ce2:	e000      	b.n	8003ce6 <NVIC_EncodePriority+0x32>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	43d9      	mvns	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	4313      	orrs	r3, r2
         );
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ff4c 	bl	8003bc0 <__NVIC_SetPriorityGrouping>
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d42:	f7ff ff61 	bl	8003c08 <__NVIC_GetPriorityGrouping>
 8003d46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	6978      	ldr	r0, [r7, #20]
 8003d4e:	f7ff ffb1 	bl	8003cb4 <NVIC_EncodePriority>
 8003d52:	4602      	mov	r2, r0
 8003d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ff80 	bl	8003c60 <__NVIC_SetPriority>
}
 8003d60:	bf00      	nop
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff54 	bl	8003c24 <__NVIC_EnableIRQ>
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d92:	e160      	b.n	8004056 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8152 	beq.w	8004050 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x38>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b12      	cmp	r3, #18
 8003dba:	d123      	bne.n	8003e04 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	08da      	lsrs	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3208      	adds	r2, #8
 8003dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	08da      	lsrs	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3208      	adds	r2, #8
 8003dfe:	6939      	ldr	r1, [r7, #16]
 8003e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d00b      	beq.n	8003e58 <HAL_GPIO_Init+0xd4>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d007      	beq.n	8003e58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e4c:	2b11      	cmp	r3, #17
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b12      	cmp	r3, #18
 8003e56:	d130      	bne.n	8003eba <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	2203      	movs	r2, #3
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e8e:	2201      	movs	r2, #1
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 0201 	and.w	r2, r3, #1
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80ac 	beq.w	8004050 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef8:	4b5e      	ldr	r3, [pc, #376]	; (8004074 <HAL_GPIO_Init+0x2f0>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4a5d      	ldr	r2, [pc, #372]	; (8004074 <HAL_GPIO_Init+0x2f0>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6193      	str	r3, [r2, #24]
 8003f04:	4b5b      	ldr	r3, [pc, #364]	; (8004074 <HAL_GPIO_Init+0x2f0>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f10:	4a59      	ldr	r2, [pc, #356]	; (8004078 <HAL_GPIO_Init+0x2f4>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3302      	adds	r3, #2
 8003f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f3a:	d025      	beq.n	8003f88 <HAL_GPIO_Init+0x204>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a4f      	ldr	r2, [pc, #316]	; (800407c <HAL_GPIO_Init+0x2f8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d01f      	beq.n	8003f84 <HAL_GPIO_Init+0x200>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a4e      	ldr	r2, [pc, #312]	; (8004080 <HAL_GPIO_Init+0x2fc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d019      	beq.n	8003f80 <HAL_GPIO_Init+0x1fc>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a4d      	ldr	r2, [pc, #308]	; (8004084 <HAL_GPIO_Init+0x300>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_GPIO_Init+0x1f8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4c      	ldr	r2, [pc, #304]	; (8004088 <HAL_GPIO_Init+0x304>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00d      	beq.n	8003f78 <HAL_GPIO_Init+0x1f4>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4b      	ldr	r2, [pc, #300]	; (800408c <HAL_GPIO_Init+0x308>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <HAL_GPIO_Init+0x1f0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a4a      	ldr	r2, [pc, #296]	; (8004090 <HAL_GPIO_Init+0x30c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_GPIO_Init+0x1ec>
 8003f6c:	2306      	movs	r3, #6
 8003f6e:	e00c      	b.n	8003f8a <HAL_GPIO_Init+0x206>
 8003f70:	2307      	movs	r3, #7
 8003f72:	e00a      	b.n	8003f8a <HAL_GPIO_Init+0x206>
 8003f74:	2305      	movs	r3, #5
 8003f76:	e008      	b.n	8003f8a <HAL_GPIO_Init+0x206>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	e006      	b.n	8003f8a <HAL_GPIO_Init+0x206>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e004      	b.n	8003f8a <HAL_GPIO_Init+0x206>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e002      	b.n	8003f8a <HAL_GPIO_Init+0x206>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_GPIO_Init+0x206>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	f002 0203 	and.w	r2, r2, #3
 8003f90:	0092      	lsls	r2, r2, #2
 8003f92:	4093      	lsls	r3, r2
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f9a:	4937      	ldr	r1, [pc, #220]	; (8004078 <HAL_GPIO_Init+0x2f4>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fa8:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <HAL_GPIO_Init+0x310>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fcc:	4a31      	ldr	r2, [pc, #196]	; (8004094 <HAL_GPIO_Init+0x310>)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_GPIO_Init+0x310>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ff6:	4a27      	ldr	r2, [pc, #156]	; (8004094 <HAL_GPIO_Init+0x310>)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <HAL_GPIO_Init+0x310>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004020:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <HAL_GPIO_Init+0x310>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_GPIO_Init+0x310>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <HAL_GPIO_Init+0x310>)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3301      	adds	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f ae97 	bne.w	8003d94 <HAL_GPIO_Init+0x10>
  }
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	40010000 	.word	0x40010000
 800407c:	48000400 	.word	0x48000400
 8004080:	48000800 	.word	0x48000800
 8004084:	48000c00 	.word	0x48000c00
 8004088:	48001000 	.word	0x48001000
 800408c:	48001400 	.word	0x48001400
 8004090:	48001800 	.word	0x48001800
 8004094:	40010400 	.word	0x40010400

08004098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	807b      	strh	r3, [r7, #2]
 80040a4:	4613      	mov	r3, r2
 80040a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040a8:	787b      	ldrb	r3, [r7, #1]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040b4:	e002      	b.n	80040bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f000 bf01 	b.w	8004ee4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8160 	beq.w	80043b2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040f2:	4bae      	ldr	r3, [pc, #696]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d00c      	beq.n	8004118 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040fe:	4bab      	ldr	r3, [pc, #684]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b08      	cmp	r3, #8
 8004108:	d159      	bne.n	80041be <HAL_RCC_OscConfig+0xf6>
 800410a:	4ba8      	ldr	r3, [pc, #672]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004116:	d152      	bne.n	80041be <HAL_RCC_OscConfig+0xf6>
 8004118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800411c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800412c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	fab3 f383 	clz	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d102      	bne.n	800414a <HAL_RCC_OscConfig+0x82>
 8004144:	4b99      	ldr	r3, [pc, #612]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	e015      	b.n	8004176 <HAL_RCC_OscConfig+0xae>
 800414a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800414e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800415e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004162:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004166:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004172:	4b8e      	ldr	r3, [pc, #568]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800417a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800417e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004182:	fa92 f2a2 	rbit	r2, r2
 8004186:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800418a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800418e:	fab2 f282 	clz	r2, r2
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	f042 0220 	orr.w	r2, r2, #32
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	f002 021f 	and.w	r2, r2, #31
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8102 	beq.w	80043b0 <HAL_RCC_OscConfig+0x2e8>
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f040 80fc 	bne.w	80043b0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f000 be93 	b.w	8004ee4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041be:	1d3b      	adds	r3, r7, #4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c8:	d106      	bne.n	80041d8 <HAL_RCC_OscConfig+0x110>
 80041ca:	4b78      	ldr	r3, [pc, #480]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a77      	ldr	r2, [pc, #476]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e030      	b.n	800423a <HAL_RCC_OscConfig+0x172>
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x134>
 80041e2:	4b72      	ldr	r3, [pc, #456]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a71      	ldr	r2, [pc, #452]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6e      	ldr	r2, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 80041f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01e      	b.n	800423a <HAL_RCC_OscConfig+0x172>
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004206:	d10c      	bne.n	8004222 <HAL_RCC_OscConfig+0x15a>
 8004208:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a67      	ldr	r2, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 800420e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b65      	ldr	r3, [pc, #404]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a64      	ldr	r2, [pc, #400]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 800421a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e00b      	b.n	800423a <HAL_RCC_OscConfig+0x172>
 8004222:	4b62      	ldr	r3, [pc, #392]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a61      	ldr	r2, [pc, #388]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a5e      	ldr	r2, [pc, #376]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d059      	beq.n	80042f8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fd ff5c 	bl	8002100 <HAL_GetTick>
 8004248:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800424e:	f7fd ff57 	bl	8002100 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d902      	bls.n	8004264 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	f000 be40 	b.w	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004268:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004278:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d102      	bne.n	8004296 <HAL_RCC_OscConfig+0x1ce>
 8004290:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	e015      	b.n	80042c2 <HAL_RCC_OscConfig+0x1fa>
 8004296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800429a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80042aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80042b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80042ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80042ce:	fa92 f2a2 	rbit	r2, r2
 80042d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80042d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80042da:	fab2 f282 	clz	r2, r2
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f042 0220 	orr.w	r2, r2, #32
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f002 021f 	and.w	r2, r2, #31
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0ab      	beq.n	800424e <HAL_RCC_OscConfig+0x186>
 80042f6:	e05c      	b.n	80043b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fd ff02 	bl	8002100 <HAL_GetTick>
 80042fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004302:	f7fd fefd 	bl	8002100 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d902      	bls.n	8004318 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	f000 bde6 	b.w	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800431c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800432c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004330:	fab3 f383 	clz	r3, r3
 8004334:	b2db      	uxtb	r3, r3
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d102      	bne.n	800434a <HAL_RCC_OscConfig+0x282>
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	e015      	b.n	8004376 <HAL_RCC_OscConfig+0x2ae>
 800434a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800434e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800435e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004362:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004366:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800436a:	fa93 f3a3 	rbit	r3, r3
 800436e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_RCC_OscConfig+0x2e4>)
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800437a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800437e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004382:	fa92 f2a2 	rbit	r2, r2
 8004386:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800438a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800438e:	fab2 f282 	clz	r2, r2
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	f042 0220 	orr.w	r2, r2, #32
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	f002 021f 	and.w	r2, r2, #31
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f202 	lsl.w	r2, r1, r2
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1ab      	bne.n	8004302 <HAL_RCC_OscConfig+0x23a>
 80043aa:	e002      	b.n	80043b2 <HAL_RCC_OscConfig+0x2ea>
 80043ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8170 	beq.w	80046a2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043c2:	4bd0      	ldr	r3, [pc, #832]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043ce:	4bcd      	ldr	r3, [pc, #820]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d16d      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3ee>
 80043da:	4bca      	ldr	r3, [pc, #808]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80043e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e6:	d166      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3ee>
 80043e8:	2302      	movs	r3, #2
 80043ea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80043fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d102      	bne.n	8004418 <HAL_RCC_OscConfig+0x350>
 8004412:	4bbc      	ldr	r3, [pc, #752]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	e013      	b.n	8004440 <HAL_RCC_OscConfig+0x378>
 8004418:	2302      	movs	r3, #2
 800441a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800442a:	2302      	movs	r3, #2
 800442c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004430:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004434:	fa93 f3a3 	rbit	r3, r3
 8004438:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800443c:	4bb1      	ldr	r3, [pc, #708]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2202      	movs	r2, #2
 8004442:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004446:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800444a:	fa92 f2a2 	rbit	r2, r2
 800444e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004452:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004456:	fab2 f282 	clz	r2, r2
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	f042 0220 	orr.w	r2, r2, #32
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	f002 021f 	and.w	r2, r2, #31
 8004466:	2101      	movs	r1, #1
 8004468:	fa01 f202 	lsl.w	r2, r1, r2
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <HAL_RCC_OscConfig+0x3ba>
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d002      	beq.n	8004482 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f000 bd31 	b.w	8004ee4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4ba0      	ldr	r3, [pc, #640]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448a:	1d3b      	adds	r3, r7, #4
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	21f8      	movs	r1, #248	; 0xf8
 8004492:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800449a:	fa91 f1a1 	rbit	r1, r1
 800449e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80044a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80044a6:	fab1 f181 	clz	r1, r1
 80044aa:	b2c9      	uxtb	r1, r1
 80044ac:	408b      	lsls	r3, r1
 80044ae:	4995      	ldr	r1, [pc, #596]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b4:	e0f5      	b.n	80046a2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8085 	beq.w	80045cc <HAL_RCC_OscConfig+0x504>
 80044c2:	2301      	movs	r3, #1
 80044c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80044d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d8:	fab3 f383 	clz	r3, r3
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	461a      	mov	r2, r3
 80044ea:	2301      	movs	r3, #1
 80044ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ee:	f7fd fe07 	bl	8002100 <HAL_GetTick>
 80044f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f8:	f7fd fe02 	bl	8002100 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d902      	bls.n	800450e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	f000 bceb 	b.w	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 800450e:	2302      	movs	r3, #2
 8004510:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004520:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <HAL_RCC_OscConfig+0x476>
 8004538:	4b72      	ldr	r3, [pc, #456]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	e013      	b.n	8004566 <HAL_RCC_OscConfig+0x49e>
 800453e:	2302      	movs	r3, #2
 8004540:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004550:	2302      	movs	r3, #2
 8004552:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004556:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004562:	4b68      	ldr	r3, [pc, #416]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2202      	movs	r2, #2
 8004568:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800456c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004570:	fa92 f2a2 	rbit	r2, r2
 8004574:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004578:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800457c:	fab2 f282 	clz	r2, r2
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	f042 0220 	orr.w	r2, r2, #32
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	f002 021f 	and.w	r2, r2, #31
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f202 	lsl.w	r2, r1, r2
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0af      	beq.n	80044f8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a0:	1d3b      	adds	r3, r7, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	21f8      	movs	r1, #248	; 0xf8
 80045a8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80045b0:	fa91 f1a1 	rbit	r1, r1
 80045b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80045b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80045bc:	fab1 f181 	clz	r1, r1
 80045c0:	b2c9      	uxtb	r1, r1
 80045c2:	408b      	lsls	r3, r1
 80045c4:	494f      	ldr	r1, [pc, #316]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
 80045ca:	e06a      	b.n	80046a2 <HAL_RCC_OscConfig+0x5da>
 80045cc:	2301      	movs	r3, #1
 80045ce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80045de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fd fd82 	bl	8002100 <HAL_GetTick>
 80045fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004600:	e00a      	b.n	8004618 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004602:	f7fd fd7d 	bl	8002100 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d902      	bls.n	8004618 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	f000 bc66 	b.w	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004618:	2302      	movs	r3, #2
 800461a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800462a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b01      	cmp	r3, #1
 8004640:	d102      	bne.n	8004648 <HAL_RCC_OscConfig+0x580>
 8004642:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	e013      	b.n	8004670 <HAL_RCC_OscConfig+0x5a8>
 8004648:	2302      	movs	r3, #2
 800464a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800465a:	2302      	movs	r3, #2
 800465c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004660:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <HAL_RCC_OscConfig+0x63c>)
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2202      	movs	r2, #2
 8004672:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004676:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800467a:	fa92 f2a2 	rbit	r2, r2
 800467e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004682:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004686:	fab2 f282 	clz	r2, r2
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	f042 0220 	orr.w	r2, r2, #32
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	f002 021f 	and.w	r2, r2, #31
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f202 	lsl.w	r2, r1, r2
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1af      	bne.n	8004602 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a2:	1d3b      	adds	r3, r7, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80da 	beq.w	8004866 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b2:	1d3b      	adds	r3, r7, #4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d069      	beq.n	8004790 <HAL_RCC_OscConfig+0x6c8>
 80046bc:	2301      	movs	r3, #1
 80046be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80046ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_OscConfig+0x640>)
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	461a      	mov	r2, r3
 80046e2:	2301      	movs	r3, #1
 80046e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fd fd0b 	bl	8002100 <HAL_GetTick>
 80046ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	e00d      	b.n	800470c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fd fd06 	bl	8002100 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d905      	bls.n	800470c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e3ef      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004704:	40021000 	.word	0x40021000
 8004708:	10908120 	.word	0x10908120
 800470c:	2302      	movs	r3, #2
 800470e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	fa93 f2a3 	rbit	r2, r3
 800471a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004724:	2202      	movs	r2, #2
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	fa93 f2a3 	rbit	r2, r3
 8004732:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800473c:	2202      	movs	r2, #2
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	fa93 f2a3 	rbit	r2, r3
 800474a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800474e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004750:	4ba4      	ldr	r3, [pc, #656]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004754:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004758:	2102      	movs	r1, #2
 800475a:	6019      	str	r1, [r3, #0]
 800475c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	fa93 f1a3 	rbit	r1, r3
 8004766:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800476a:	6019      	str	r1, [r3, #0]
  return result;
 800476c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2101      	movs	r1, #1
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0b0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x628>
 800478e:	e06a      	b.n	8004866 <HAL_RCC_OscConfig+0x79e>
 8004790:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	fa93 f2a3 	rbit	r2, r3
 80047a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80047a6:	601a      	str	r2, [r3, #0]
  return result;
 80047a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80047ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b8c      	ldr	r3, [pc, #560]	; (80049e8 <HAL_RCC_OscConfig+0x920>)
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	461a      	mov	r2, r3
 80047be:	2300      	movs	r3, #0
 80047c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c2:	f7fd fc9d 	bl	8002100 <HAL_GetTick>
 80047c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ca:	e009      	b.n	80047e0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fd fc98 	bl	8002100 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e381      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 80047e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80047e4:	2202      	movs	r2, #2
 80047e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	fa93 f2a3 	rbit	r2, r3
 80047f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80047fc:	2202      	movs	r2, #2
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	fa93 f2a3 	rbit	r2, r3
 800480a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004814:	2202      	movs	r2, #2
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	fa93 f2a3 	rbit	r2, r3
 8004822:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004826:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004828:	4b6e      	ldr	r3, [pc, #440]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 800482a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800482c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004830:	2102      	movs	r1, #2
 8004832:	6019      	str	r1, [r3, #0]
 8004834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	fa93 f1a3 	rbit	r1, r3
 800483e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004842:	6019      	str	r1, [r3, #0]
  return result;
 8004844:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1b2      	bne.n	80047cc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8157 	beq.w	8004b24 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487c:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d112      	bne.n	80048ae <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004888:	4b56      	ldr	r3, [pc, #344]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4a55      	ldr	r2, [pc, #340]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004892:	61d3      	str	r3, [r2, #28]
 8004894:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	4b4f      	ldr	r3, [pc, #316]	; (80049ec <HAL_RCC_OscConfig+0x924>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11a      	bne.n	80048f0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ba:	4b4c      	ldr	r3, [pc, #304]	; (80049ec <HAL_RCC_OscConfig+0x924>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4b      	ldr	r2, [pc, #300]	; (80049ec <HAL_RCC_OscConfig+0x924>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c6:	f7fd fc1b 	bl	8002100 <HAL_GetTick>
 80048ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ce:	e009      	b.n	80048e4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d0:	f7fd fc16 	bl	8002100 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b64      	cmp	r3, #100	; 0x64
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e2ff      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	4b41      	ldr	r3, [pc, #260]	; (80049ec <HAL_RCC_OscConfig+0x924>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ef      	beq.n	80048d0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f0:	1d3b      	adds	r3, r7, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d106      	bne.n	8004908 <HAL_RCC_OscConfig+0x840>
 80048fa:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	4a39      	ldr	r2, [pc, #228]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6213      	str	r3, [r2, #32]
 8004906:	e02f      	b.n	8004968 <HAL_RCC_OscConfig+0x8a0>
 8004908:	1d3b      	adds	r3, r7, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10c      	bne.n	800492c <HAL_RCC_OscConfig+0x864>
 8004912:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4a33      	ldr	r2, [pc, #204]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	6213      	str	r3, [r2, #32]
 800491e:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	6213      	str	r3, [r2, #32]
 800492a:	e01d      	b.n	8004968 <HAL_RCC_OscConfig+0x8a0>
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d10c      	bne.n	8004950 <HAL_RCC_OscConfig+0x888>
 8004936:	4b2b      	ldr	r3, [pc, #172]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	6213      	str	r3, [r2, #32]
 8004942:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6213      	str	r3, [r2, #32]
 800494e:	e00b      	b.n	8004968 <HAL_RCC_OscConfig+0x8a0>
 8004950:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	6213      	str	r3, [r2, #32]
 800495c:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 8004962:	f023 0304 	bic.w	r3, r3, #4
 8004966:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004968:	1d3b      	adds	r3, r7, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d06a      	beq.n	8004a48 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004972:	f7fd fbc5 	bl	8002100 <HAL_GetTick>
 8004976:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497a:	e00b      	b.n	8004994 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497c:	f7fd fbc0 	bl	8002100 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f241 3288 	movw	r2, #5000	; 0x1388
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e2a7      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004994:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004998:	2202      	movs	r2, #2
 800499a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	fa93 f2a3 	rbit	r2, r3
 80049a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80049b0:	2202      	movs	r2, #2
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	fa93 f2a3 	rbit	r2, r3
 80049be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80049c2:	601a      	str	r2, [r3, #0]
  return result;
 80049c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80049c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d108      	bne.n	80049f0 <HAL_RCC_OscConfig+0x928>
 80049de:	4b01      	ldr	r3, [pc, #4]	; (80049e4 <HAL_RCC_OscConfig+0x91c>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	e013      	b.n	8004a0c <HAL_RCC_OscConfig+0x944>
 80049e4:	40021000 	.word	0x40021000
 80049e8:	10908120 	.word	0x10908120
 80049ec:	40007000 	.word	0x40007000
 80049f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80049f4:	2202      	movs	r2, #2
 80049f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	fa93 f2a3 	rbit	r2, r3
 8004a02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	4bc0      	ldr	r3, [pc, #768]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004a10:	2102      	movs	r1, #2
 8004a12:	6011      	str	r1, [r2, #0]
 8004a14:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	fa92 f1a2 	rbit	r1, r2
 8004a1e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004a22:	6011      	str	r1, [r2, #0]
  return result;
 8004a24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	fab2 f282 	clz	r2, r2
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	f002 021f 	and.w	r2, r2, #31
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d09a      	beq.n	800497c <HAL_RCC_OscConfig+0x8b4>
 8004a46:	e063      	b.n	8004b10 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7fd fb5a 	bl	8002100 <HAL_GetTick>
 8004a4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a50:	e00b      	b.n	8004a6a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fd fb55 	bl	8002100 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e23c      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004a6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004a6e:	2202      	movs	r2, #2
 8004a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fa93 f2a3 	rbit	r2, r3
 8004a7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a86:	2202      	movs	r2, #2
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	fa93 f2a3 	rbit	r2, r3
 8004a94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004a98:	601a      	str	r2, [r3, #0]
  return result;
 8004a9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004a9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa0:	fab3 f383 	clz	r3, r3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f043 0302 	orr.w	r3, r3, #2
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d102      	bne.n	8004aba <HAL_RCC_OscConfig+0x9f2>
 8004ab4:	4b95      	ldr	r3, [pc, #596]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	e00d      	b.n	8004ad6 <HAL_RCC_OscConfig+0xa0e>
 8004aba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004abe:	2202      	movs	r2, #2
 8004ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	fa93 f2a3 	rbit	r2, r3
 8004acc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	4b8e      	ldr	r3, [pc, #568]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004ada:	2102      	movs	r1, #2
 8004adc:	6011      	str	r1, [r2, #0]
 8004ade:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	fa92 f1a2 	rbit	r1, r2
 8004ae8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004aec:	6011      	str	r1, [r2, #0]
  return result;
 8004aee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	fab2 f282 	clz	r2, r2
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	f002 021f 	and.w	r2, r2, #31
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1a0      	bne.n	8004a52 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b10:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b18:	4b7c      	ldr	r3, [pc, #496]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	4a7b      	ldr	r2, [pc, #492]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b24:	1d3b      	adds	r3, r7, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 81d9 	beq.w	8004ee2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b30:	4b76      	ldr	r3, [pc, #472]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	f000 81a6 	beq.w	8004e8a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	f040 811e 	bne.w	8004d86 <HAL_RCC_OscConfig+0xcbe>
 8004b4a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	fa93 f2a3 	rbit	r2, r3
 8004b5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004b62:	601a      	str	r2, [r3, #0]
  return result;
 8004b64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004b68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fd fabe 	bl	8002100 <HAL_GetTick>
 8004b84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b88:	e009      	b.n	8004b9e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b8a:	f7fd fab9 	bl	8002100 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e1a2      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004b9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004bb6:	601a      	str	r2, [r3, #0]
  return result;
 8004bb8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004bbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d102      	bne.n	8004bd8 <HAL_RCC_OscConfig+0xb10>
 8004bd2:	4b4e      	ldr	r3, [pc, #312]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	e01b      	b.n	8004c10 <HAL_RCC_OscConfig+0xb48>
 8004bd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	fa93 f2a3 	rbit	r2, r3
 8004bec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	fa93 f2a3 	rbit	r2, r3
 8004c06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	4b3f      	ldr	r3, [pc, #252]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c18:	6011      	str	r1, [r2, #0]
 8004c1a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	fa92 f1a2 	rbit	r1, r2
 8004c24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c28:	6011      	str	r1, [r2, #0]
  return result;
 8004c2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	fab2 f282 	clz	r2, r2
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	f042 0220 	orr.w	r2, r2, #32
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	f002 021f 	and.w	r2, r2, #31
 8004c40:	2101      	movs	r1, #1
 8004c42:	fa01 f202 	lsl.w	r2, r1, r2
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d19e      	bne.n	8004b8a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c4c:	4b2f      	ldr	r3, [pc, #188]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f023 020f 	bic.w	r2, r3, #15
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	492c      	ldr	r1, [pc, #176]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004c60:	4b2a      	ldr	r3, [pc, #168]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004c68:	1d3b      	adds	r3, r7, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a19      	ldr	r1, [r3, #32]
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	4925      	ldr	r1, [pc, #148]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]
 8004c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	fa93 f2a3 	rbit	r2, r3
 8004c90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c94:	601a      	str	r2, [r3, #0]
  return result;
 8004c96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c9a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c9c:	fab3 f383 	clz	r3, r3
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ca6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	461a      	mov	r2, r3
 8004cae:	2301      	movs	r3, #1
 8004cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fd fa25 	bl	8002100 <HAL_GetTick>
 8004cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cba:	e009      	b.n	8004cd0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fd fa20 	bl	8002100 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e109      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004cd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	fa93 f2a3 	rbit	r2, r3
 8004ce4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004ce8:	601a      	str	r2, [r3, #0]
  return result;
 8004cea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004cee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cf0:	fab3 f383 	clz	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <HAL_RCC_OscConfig+0xc48>
 8004d04:	4b01      	ldr	r3, [pc, #4]	; (8004d0c <HAL_RCC_OscConfig+0xc44>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	e01e      	b.n	8004d48 <HAL_RCC_OscConfig+0xc80>
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	fa93 f2a3 	rbit	r2, r3
 8004d24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	fa93 f2a3 	rbit	r2, r3
 8004d3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	4b6a      	ldr	r3, [pc, #424]	; (8004ef0 <HAL_RCC_OscConfig+0xe28>)
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	fa92 f1a2 	rbit	r1, r2
 8004d5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004d60:	6011      	str	r1, [r2, #0]
  return result;
 8004d62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	fab2 f282 	clz	r2, r2
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	f042 0220 	orr.w	r2, r2, #32
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	f002 021f 	and.w	r2, r2, #31
 8004d78:	2101      	movs	r1, #1
 8004d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d09b      	beq.n	8004cbc <HAL_RCC_OscConfig+0xbf4>
 8004d84:	e0ad      	b.n	8004ee2 <HAL_RCC_OscConfig+0xe1a>
 8004d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	fa93 f2a3 	rbit	r2, r3
 8004d9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d9e:	601a      	str	r2, [r3, #0]
  return result;
 8004da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004da4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da6:	fab3 f383 	clz	r3, r3
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	461a      	mov	r2, r3
 8004db8:	2300      	movs	r3, #0
 8004dba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fd f9a0 	bl	8002100 <HAL_GetTick>
 8004dc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc4:	e009      	b.n	8004dda <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fd f99b 	bl	8002100 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e084      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
 8004dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	fa93 f2a3 	rbit	r2, r3
 8004dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004df2:	601a      	str	r2, [r3, #0]
  return result;
 8004df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dfa:	fab3 f383 	clz	r3, r3
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d102      	bne.n	8004e14 <HAL_RCC_OscConfig+0xd4c>
 8004e0e:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <HAL_RCC_OscConfig+0xe28>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	e01b      	b.n	8004e4c <HAL_RCC_OscConfig+0xd84>
 8004e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	fa93 f2a3 	rbit	r2, r3
 8004e28:	f107 0320 	add.w	r3, r7, #32
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f107 031c 	add.w	r3, r7, #28
 8004e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f107 031c 	add.w	r3, r7, #28
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	fa93 f2a3 	rbit	r2, r3
 8004e42:	f107 0318 	add.w	r3, r7, #24
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <HAL_RCC_OscConfig+0xe28>)
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	f107 0214 	add.w	r2, r7, #20
 8004e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	f107 0214 	add.w	r2, r7, #20
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	fa92 f1a2 	rbit	r1, r2
 8004e60:	f107 0210 	add.w	r2, r7, #16
 8004e64:	6011      	str	r1, [r2, #0]
  return result;
 8004e66:	f107 0210 	add.w	r2, r7, #16
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	fab2 f282 	clz	r2, r2
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	f042 0220 	orr.w	r2, r2, #32
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	f002 021f 	and.w	r2, r2, #31
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d19e      	bne.n	8004dc6 <HAL_RCC_OscConfig+0xcfe>
 8004e88:	e02b      	b.n	8004ee2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e025      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_RCC_OscConfig+0xe28>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <HAL_RCC_OscConfig+0xe28>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ea8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004eac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004eb0:	1d3b      	adds	r3, r7, #4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d111      	bne.n	8004ede <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004eba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d108      	bne.n	8004ede <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000

08004ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b09e      	sub	sp, #120	; 0x78
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e162      	b.n	80051d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b90      	ldr	r3, [pc, #576]	; (8005150 <HAL_RCC_ClockConfig+0x25c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d910      	bls.n	8004f3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b8d      	ldr	r3, [pc, #564]	; (8005150 <HAL_RCC_ClockConfig+0x25c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 0207 	bic.w	r2, r3, #7
 8004f22:	498b      	ldr	r1, [pc, #556]	; (8005150 <HAL_RCC_ClockConfig+0x25c>)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b89      	ldr	r3, [pc, #548]	; (8005150 <HAL_RCC_ClockConfig+0x25c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e14a      	b.n	80051d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b82      	ldr	r3, [pc, #520]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	497f      	ldr	r1, [pc, #508]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80dc 	beq.w	8005120 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d13c      	bne.n	8004fea <HAL_RCC_ClockConfig+0xf6>
 8004f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f80:	fab3 f383 	clz	r3, r3
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d102      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xa6>
 8004f94:	4b6f      	ldr	r3, [pc, #444]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	e00f      	b.n	8004fba <HAL_RCC_ClockConfig+0xc6>
 8004f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa2:	fa93 f3a3 	rbit	r3, r3
 8004fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fac:	663b      	str	r3, [r7, #96]	; 0x60
 8004fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb6:	4b67      	ldr	r3, [pc, #412]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fc2:	fa92 f2a2 	rbit	r2, r2
 8004fc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fca:	fab2 f282 	clz	r2, r2
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	f042 0220 	orr.w	r2, r2, #32
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	f002 021f 	and.w	r2, r2, #31
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d17b      	bne.n	80050de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e0f3      	b.n	80051d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d13c      	bne.n	800506c <HAL_RCC_ClockConfig+0x178>
 8004ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005002:	fab3 f383 	clz	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d102      	bne.n	800501c <HAL_RCC_ClockConfig+0x128>
 8005016:	4b4f      	ldr	r3, [pc, #316]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	e00f      	b.n	800503c <HAL_RCC_ClockConfig+0x148>
 800501c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005020:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005024:	fa93 f3a3 	rbit	r3, r3
 8005028:	647b      	str	r3, [r7, #68]	; 0x44
 800502a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800502e:	643b      	str	r3, [r7, #64]	; 0x40
 8005030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005038:	4b46      	ldr	r3, [pc, #280]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005040:	63ba      	str	r2, [r7, #56]	; 0x38
 8005042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005044:	fa92 f2a2 	rbit	r2, r2
 8005048:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800504a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800504c:	fab2 f282 	clz	r2, r2
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	f042 0220 	orr.w	r2, r2, #32
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	f002 021f 	and.w	r2, r2, #31
 800505c:	2101      	movs	r1, #1
 800505e:	fa01 f202 	lsl.w	r2, r1, r2
 8005062:	4013      	ands	r3, r2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d13a      	bne.n	80050de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0b2      	b.n	80051d2 <HAL_RCC_ClockConfig+0x2de>
 800506c:	2302      	movs	r3, #2
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	fa93 f3a3 	rbit	r3, r3
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	fab3 f383 	clz	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d102      	bne.n	8005094 <HAL_RCC_ClockConfig+0x1a0>
 800508e:	4b31      	ldr	r3, [pc, #196]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	e00d      	b.n	80050b0 <HAL_RCC_ClockConfig+0x1bc>
 8005094:	2302      	movs	r3, #2
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
 80050a0:	2302      	movs	r3, #2
 80050a2:	623b      	str	r3, [r7, #32]
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	4b29      	ldr	r3, [pc, #164]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	2202      	movs	r2, #2
 80050b2:	61ba      	str	r2, [r7, #24]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	fa92 f2a2 	rbit	r2, r2
 80050ba:	617a      	str	r2, [r7, #20]
  return result;
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	fab2 f282 	clz	r2, r2
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	f042 0220 	orr.w	r2, r2, #32
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	f002 021f 	and.w	r2, r2, #31
 80050ce:	2101      	movs	r1, #1
 80050d0:	fa01 f202 	lsl.w	r2, r1, r2
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e079      	b.n	80051d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050de:	4b1d      	ldr	r3, [pc, #116]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f023 0203 	bic.w	r2, r3, #3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	491a      	ldr	r1, [pc, #104]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f0:	f7fd f806 	bl	8002100 <HAL_GetTick>
 80050f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	e00a      	b.n	800510e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f8:	f7fd f802 	bl	8002100 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e061      	b.n	80051d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <HAL_RCC_ClockConfig+0x260>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 020c 	and.w	r2, r3, #12
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	429a      	cmp	r2, r3
 800511e:	d1eb      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_ClockConfig+0x25c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d214      	bcs.n	8005158 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <HAL_RCC_ClockConfig+0x25c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f023 0207 	bic.w	r2, r3, #7
 8005136:	4906      	ldr	r1, [pc, #24]	; (8005150 <HAL_RCC_ClockConfig+0x25c>)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <HAL_RCC_ClockConfig+0x25c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d005      	beq.n	8005158 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e040      	b.n	80051d2 <HAL_RCC_ClockConfig+0x2de>
 8005150:	40022000 	.word	0x40022000
 8005154:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_RCC_ClockConfig+0x2e8>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	491a      	ldr	r1, [pc, #104]	; (80051dc <HAL_RCC_ClockConfig+0x2e8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005182:	4b16      	ldr	r3, [pc, #88]	; (80051dc <HAL_RCC_ClockConfig+0x2e8>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4912      	ldr	r1, [pc, #72]	; (80051dc <HAL_RCC_ClockConfig+0x2e8>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005196:	f000 f829 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 800519a:	4601      	mov	r1, r0
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <HAL_RCC_ClockConfig+0x2e8>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a4:	22f0      	movs	r2, #240	; 0xf0
 80051a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	fa92 f2a2 	rbit	r2, r2
 80051ae:	60fa      	str	r2, [r7, #12]
  return result;
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	fab2 f282 	clz	r2, r2
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	40d3      	lsrs	r3, r2
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <HAL_RCC_ClockConfig+0x2ec>)
 80051bc:	5cd3      	ldrb	r3, [r2, r3]
 80051be:	fa21 f303 	lsr.w	r3, r1, r3
 80051c2:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <HAL_RCC_ClockConfig+0x2f0>)
 80051c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80051c6:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <HAL_RCC_ClockConfig+0x2f4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fc fdba 	bl	8001d44 <HAL_InitTick>
  
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3778      	adds	r7, #120	; 0x78
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000
 80051e0:	0800dcd8 	.word	0x0800dcd8
 80051e4:	20000008 	.word	0x20000008
 80051e8:	20000024 	.word	0x20000024

080051ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b08b      	sub	sp, #44	; 0x2c
 80051f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	2300      	movs	r3, #0
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005206:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b04      	cmp	r3, #4
 8005214:	d002      	beq.n	800521c <HAL_RCC_GetSysClockFreq+0x30>
 8005216:	2b08      	cmp	r3, #8
 8005218:	d003      	beq.n	8005222 <HAL_RCC_GetSysClockFreq+0x36>
 800521a:	e03f      	b.n	800529c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800521e:	623b      	str	r3, [r7, #32]
      break;
 8005220:	e03f      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005228:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800522c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	fa92 f2a2 	rbit	r2, r2
 8005234:	607a      	str	r2, [r7, #4]
  return result;
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	fab2 f282 	clz	r2, r2
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	40d3      	lsrs	r3, r2
 8005240:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005242:	5cd3      	ldrb	r3, [r2, r3]
 8005244:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	220f      	movs	r2, #15
 8005250:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	fa92 f2a2 	rbit	r2, r2
 8005258:	60fa      	str	r2, [r7, #12]
  return result;
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	fab2 f282 	clz	r2, r2
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	40d3      	lsrs	r3, r2
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005266:	5cd3      	ldrb	r3, [r2, r3]
 8005268:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005274:	4a0f      	ldr	r2, [pc, #60]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	fbb2 f2f3 	udiv	r2, r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
 8005284:	e007      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005286:	4a0b      	ldr	r2, [pc, #44]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	fbb2 f2f3 	udiv	r2, r2, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	623b      	str	r3, [r7, #32]
      break;
 800529a:	e002      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800529e:	623b      	str	r3, [r7, #32]
      break;
 80052a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a2:	6a3b      	ldr	r3, [r7, #32]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	372c      	adds	r7, #44	; 0x2c
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40021000 	.word	0x40021000
 80052b4:	007a1200 	.word	0x007a1200
 80052b8:	0800dcf0 	.word	0x0800dcf0
 80052bc:	0800dd00 	.word	0x0800dd00

080052c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000008 	.word	0x20000008

080052d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80052de:	f7ff ffef 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 80052e2:	4601      	mov	r1, r0
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	fa92 f2a2 	rbit	r2, r2
 80052f8:	603a      	str	r2, [r7, #0]
  return result;
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	fab2 f282 	clz	r2, r2
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	40d3      	lsrs	r3, r2
 8005304:	4a04      	ldr	r2, [pc, #16]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000
 8005318:	0800dce8 	.word	0x0800dce8

0800531c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005322:	f7ff ffcd 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8005326:	4601      	mov	r1, r0
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005330:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005334:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	fa92 f2a2 	rbit	r2, r2
 800533c:	603a      	str	r2, [r7, #0]
  return result;
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	fab2 f282 	clz	r2, r2
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	40d3      	lsrs	r3, r2
 8005348:	4a04      	ldr	r2, [pc, #16]	; (800535c <HAL_RCC_GetPCLK2Freq+0x40>)
 800534a:	5cd3      	ldrb	r3, [r2, r3]
 800534c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	0800dce8 	.word	0x0800dce8

08005360 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	220f      	movs	r2, #15
 800536e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005370:	4b12      	ldr	r3, [pc, #72]	; (80053bc <HAL_RCC_GetClockConfig+0x5c>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 0203 	and.w	r2, r3, #3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800537c:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <HAL_RCC_GetClockConfig+0x5c>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <HAL_RCC_GetClockConfig+0x5c>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_RCC_GetClockConfig+0x5c>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	08db      	lsrs	r3, r3, #3
 800539a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <HAL_RCC_GetClockConfig+0x60>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0207 	and.w	r2, r3, #7
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	601a      	str	r2, [r3, #0]
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000
 80053c0:	40022000 	.word	0x40022000

080053c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b092      	sub	sp, #72	; 0x48
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80d7 	beq.w	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053e8:	4b4e      	ldr	r3, [pc, #312]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10e      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f4:	4b4b      	ldr	r3, [pc, #300]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	4a4a      	ldr	r2, [pc, #296]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fe:	61d3      	str	r3, [r2, #28]
 8005400:	4b48      	ldr	r3, [pc, #288]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005412:	4b45      	ldr	r3, [pc, #276]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d118      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800541e:	4b42      	ldr	r3, [pc, #264]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a41      	ldr	r2, [pc, #260]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542a:	f7fc fe69 	bl	8002100 <HAL_GetTick>
 800542e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005430:	e008      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005432:	f7fc fe65 	bl	8002100 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b64      	cmp	r3, #100	; 0x64
 800543e:	d901      	bls.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e1d6      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005444:	4b38      	ldr	r3, [pc, #224]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005450:	4b34      	ldr	r3, [pc, #208]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8084 	beq.w	800556a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800546c:	429a      	cmp	r2, r3
 800546e:	d07c      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005470:	4b2c      	ldr	r3, [pc, #176]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800547a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800547e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	fa93 f3a3 	rbit	r3, r3
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800548a:	fab3 f383 	clz	r3, r3
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	4b26      	ldr	r3, [pc, #152]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	461a      	mov	r2, r3
 800549a:	2301      	movs	r3, #1
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	fa93 f3a3 	rbit	r3, r3
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054ae:	fab3 f383 	clz	r3, r3
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04b      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d2:	f7fc fe15 	bl	8002100 <HAL_GetTick>
 80054d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d8:	e00a      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054da:	f7fc fe11 	bl	8002100 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e180      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80054f0:	2302      	movs	r3, #2
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	fa93 f3a3 	rbit	r3, r3
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	2302      	movs	r3, #2
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	61fb      	str	r3, [r7, #28]
  return result;
 8005508:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550a:	fab3 f383 	clz	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f043 0302 	orr.w	r3, r3, #2
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d108      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800551e:	4b01      	ldr	r3, [pc, #4]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	e00d      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005524:	40021000 	.word	0x40021000
 8005528:	40007000 	.word	0x40007000
 800552c:	10908100 	.word	0x10908100
 8005530:	2302      	movs	r3, #2
 8005532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	fa93 f3a3 	rbit	r3, r3
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	4ba0      	ldr	r3, [pc, #640]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	2202      	movs	r2, #2
 8005542:	613a      	str	r2, [r7, #16]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	fa92 f2a2 	rbit	r2, r2
 800554a:	60fa      	str	r2, [r7, #12]
  return result;
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	fab2 f282 	clz	r2, r2
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	f002 021f 	and.w	r2, r2, #31
 800555e:	2101      	movs	r1, #1
 8005560:	fa01 f202 	lsl.w	r2, r1, r2
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0b7      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800556a:	4b95      	ldr	r3, [pc, #596]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4992      	ldr	r1, [pc, #584]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005578:	4313      	orrs	r3, r2
 800557a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800557c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005584:	4b8e      	ldr	r3, [pc, #568]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4a8d      	ldr	r2, [pc, #564]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800559c:	4b88      	ldr	r3, [pc, #544]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	f023 0203 	bic.w	r2, r3, #3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4985      	ldr	r1, [pc, #532]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ba:	4b81      	ldr	r3, [pc, #516]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	497e      	ldr	r1, [pc, #504]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055d8:	4b79      	ldr	r3, [pc, #484]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	4976      	ldr	r1, [pc, #472]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f6:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	f023 0210 	bic.w	r2, r3, #16
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	496f      	ldr	r1, [pc, #444]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005604:	4313      	orrs	r3, r2
 8005606:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005614:	4b6a      	ldr	r3, [pc, #424]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	4967      	ldr	r1, [pc, #412]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005632:	4b63      	ldr	r3, [pc, #396]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	f023 0220 	bic.w	r2, r3, #32
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	4960      	ldr	r1, [pc, #384]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005640:	4313      	orrs	r3, r2
 8005642:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005650:	4b5b      	ldr	r3, [pc, #364]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	4958      	ldr	r1, [pc, #352]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800566e:	4b54      	ldr	r3, [pc, #336]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4951      	ldr	r1, [pc, #324]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800567c:	4313      	orrs	r3, r2
 800567e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800568c:	4b4c      	ldr	r3, [pc, #304]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	4949      	ldr	r1, [pc, #292]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800569a:	4313      	orrs	r3, r2
 800569c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056aa:	4b45      	ldr	r3, [pc, #276]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4942      	ldr	r1, [pc, #264]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	493a      	ldr	r1, [pc, #232]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80056e6:	4b36      	ldr	r3, [pc, #216]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	4933      	ldr	r1, [pc, #204]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005704:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	492b      	ldr	r1, [pc, #172]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005712:	4313      	orrs	r3, r2
 8005714:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d008      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005722:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	4924      	ldr	r1, [pc, #144]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005730:	4313      	orrs	r3, r2
 8005732:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005740:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	491c      	ldr	r1, [pc, #112]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800575e:	4b18      	ldr	r3, [pc, #96]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	4915      	ldr	r1, [pc, #84]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	490d      	ldr	r1, [pc, #52]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800578a:	4313      	orrs	r3, r2
 800578c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	4906      	ldr	r1, [pc, #24]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00c      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80057b8:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	e002      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057cc:	490b      	ldr	r1, [pc, #44]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ea:	4904      	ldr	r1, [pc, #16]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3748      	adds	r7, #72	; 0x48
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000

08005800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e01d      	b.n	800584e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc f9da 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f000 fac6 	bl	8005dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <HAL_TIM_Base_Start_IT+0x50>)
 8005878:	4013      	ands	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b06      	cmp	r3, #6
 8005880:	d00b      	beq.n	800589a <HAL_TIM_Base_Start_IT+0x42>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005888:	d007      	beq.n	800589a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	00010007 	.word	0x00010007

080058ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e083      	b.n	80059c8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fc f9a7 	bl	8001c28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80058f0:	f023 0307 	bic.w	r3, r3, #7
 80058f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f000 fa65 	bl	8005dd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	4313      	orrs	r3, r2
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800594c:	f023 030c 	bic.w	r3, r3, #12
 8005950:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800595c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	4313      	orrs	r3, r2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	011a      	lsls	r2, r3, #4
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	031b      	lsls	r3, r3, #12
 800597c:	4313      	orrs	r3, r2
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	4313      	orrs	r3, r2
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d122      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d11b      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0202 	mvn.w	r2, #2
 80059fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9be 	bl	8005d94 <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9b0 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f9c1 	bl	8005da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d122      	bne.n	8005a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d11b      	bne.n	8005a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0204 	mvn.w	r2, #4
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f994 	bl	8005d94 <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f986 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f997 	bl	8005da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d122      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0208 	mvn.w	r2, #8
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f96a 	bl	8005d94 <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f95c 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f96d 	bl	8005da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b10      	cmp	r3, #16
 8005ae0:	d122      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d11b      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0210 	mvn.w	r2, #16
 8005af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2208      	movs	r2, #8
 8005afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f940 	bl	8005d94 <HAL_TIM_IC_CaptureCallback>
 8005b14:	e005      	b.n	8005b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f932 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f943 	bl	8005da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10e      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0201 	mvn.w	r2, #1
 8005b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fb ffc0 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d10e      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6c:	2b80      	cmp	r3, #128	; 0x80
 8005b6e:	d107      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 faf6 	bl	800616c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	d10e      	bne.n	8005bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d107      	bne.n	8005bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fae9 	bl	8006180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d10e      	bne.n	8005bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f8f1 	bl	8005dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d10e      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d107      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0220 	mvn.w	r2, #32
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 faa9 	bl	8006158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_ConfigClockSource+0x18>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e0a8      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x16a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c50:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d067      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x124>
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d80b      	bhi.n	8005c7e <HAL_TIM_ConfigClockSource+0x70>
 8005c66:	2b10      	cmp	r3, #16
 8005c68:	d073      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x144>
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d802      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x66>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d06f      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c72:	e078      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d06c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x144>
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d06a      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005c7c:	e073      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005c7e:	2b70      	cmp	r3, #112	; 0x70
 8005c80:	d00d      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x90>
 8005c82:	2b70      	cmp	r3, #112	; 0x70
 8005c84:	d804      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x82>
 8005c86:	2b50      	cmp	r3, #80	; 0x50
 8005c88:	d033      	beq.n	8005cf2 <HAL_TIM_ConfigClockSource+0xe4>
 8005c8a:	2b60      	cmp	r3, #96	; 0x60
 8005c8c:	d041      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005c8e:	e06a      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c94:	d066      	beq.n	8005d64 <HAL_TIM_ConfigClockSource+0x156>
 8005c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9a:	d017      	beq.n	8005ccc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005c9c:	e063      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f000 f9a7 	bl	8006000 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	609a      	str	r2, [r3, #8]
      break;
 8005cca:	e04c      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6899      	ldr	r1, [r3, #8]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f000 f990 	bl	8006000 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cee:	609a      	str	r2, [r3, #8]
      break;
 8005cf0:	e039      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6859      	ldr	r1, [r3, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f000 f904 	bl	8005f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2150      	movs	r1, #80	; 0x50
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f95d 	bl	8005fca <TIM_ITRx_SetConfig>
      break;
 8005d10:	e029      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 f923 	bl	8005f6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2160      	movs	r1, #96	; 0x60
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f94d 	bl	8005fca <TIM_ITRx_SetConfig>
      break;
 8005d30:	e019      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 f8e4 	bl	8005f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2140      	movs	r1, #64	; 0x40
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f93d 	bl	8005fca <TIM_ITRx_SetConfig>
      break;
 8005d50:	e009      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f000 f934 	bl	8005fca <TIM_ITRx_SetConfig>
      break;
 8005d62:	e000      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005d64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a42      	ldr	r2, [pc, #264]	; (8005eec <TIM_Base_SetConfig+0x11c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d013      	beq.n	8005e10 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dee:	d00f      	beq.n	8005e10 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <TIM_Base_SetConfig+0x120>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00b      	beq.n	8005e10 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3e      	ldr	r2, [pc, #248]	; (8005ef4 <TIM_Base_SetConfig+0x124>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d007      	beq.n	8005e10 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3d      	ldr	r2, [pc, #244]	; (8005ef8 <TIM_Base_SetConfig+0x128>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d003      	beq.n	8005e10 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <TIM_Base_SetConfig+0x12c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d108      	bne.n	8005e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a31      	ldr	r2, [pc, #196]	; (8005eec <TIM_Base_SetConfig+0x11c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01f      	beq.n	8005e6a <TIM_Base_SetConfig+0x9a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e30:	d01b      	beq.n	8005e6a <TIM_Base_SetConfig+0x9a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2e      	ldr	r2, [pc, #184]	; (8005ef0 <TIM_Base_SetConfig+0x120>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d017      	beq.n	8005e6a <TIM_Base_SetConfig+0x9a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <TIM_Base_SetConfig+0x124>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <TIM_Base_SetConfig+0x128>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00f      	beq.n	8005e6a <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2c      	ldr	r2, [pc, #176]	; (8005f00 <TIM_Base_SetConfig+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00b      	beq.n	8005e6a <TIM_Base_SetConfig+0x9a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2b      	ldr	r2, [pc, #172]	; (8005f04 <TIM_Base_SetConfig+0x134>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <TIM_Base_SetConfig+0x9a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2a      	ldr	r2, [pc, #168]	; (8005f08 <TIM_Base_SetConfig+0x138>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_Base_SetConfig+0x9a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <TIM_Base_SetConfig+0x12c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d108      	bne.n	8005e7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <TIM_Base_SetConfig+0x11c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <TIM_Base_SetConfig+0x100>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <TIM_Base_SetConfig+0x128>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00f      	beq.n	8005ed0 <TIM_Base_SetConfig+0x100>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <TIM_Base_SetConfig+0x130>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00b      	beq.n	8005ed0 <TIM_Base_SetConfig+0x100>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <TIM_Base_SetConfig+0x134>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_Base_SetConfig+0x100>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a11      	ldr	r2, [pc, #68]	; (8005f08 <TIM_Base_SetConfig+0x138>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0x100>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <TIM_Base_SetConfig+0x12c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d103      	bne.n	8005ed8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	615a      	str	r2, [r3, #20]
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40013400 	.word	0x40013400
 8005efc:	40015000 	.word	0x40015000
 8005f00:	40014000 	.word	0x40014000
 8005f04:	40014400 	.word	0x40014400
 8005f08:	40014800 	.word	0x40014800

08005f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f023 0201 	bic.w	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 030a 	bic.w	r3, r3, #10
 8005f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b087      	sub	sp, #28
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0210 	bic.w	r2, r3, #16
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	031b      	lsls	r3, r3, #12
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	621a      	str	r2, [r3, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f043 0307 	orr.w	r3, r3, #7
 8005fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800601a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	021a      	lsls	r2, r3, #8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	431a      	orrs	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4313      	orrs	r3, r2
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006054:	2302      	movs	r3, #2
 8006056:	e06d      	b.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a30      	ldr	r2, [pc, #192]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d009      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a2f      	ldr	r2, [pc, #188]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d004      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2d      	ldr	r2, [pc, #180]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d108      	bne.n	80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800609c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d01d      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d4:	d018      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1c      	ldr	r2, [pc, #112]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1a      	ldr	r2, [pc, #104]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00e      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a15      	ldr	r2, [pc, #84]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d009      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a16      	ldr	r2, [pc, #88]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a11      	ldr	r2, [pc, #68]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d10c      	bne.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	4313      	orrs	r3, r2
 8006118:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40013400 	.word	0x40013400
 8006148:	40015000 	.word	0x40015000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40014000 	.word	0x40014000

08006158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e040      	b.n	8006228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fb fd82 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2224      	movs	r2, #36	; 0x24
 80061c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f82c 	bl	8006230 <UART_SetConfig>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e022      	b.n	8006228 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa3a 	bl	8006664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800620e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fac1 	bl	80067a8 <UART_CheckIdleState>
 8006226:	4603      	mov	r3, r0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006238:	2300      	movs	r3, #0
 800623a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4bac      	ldr	r3, [pc, #688]	; (8006510 <UART_SetConfig+0x2e0>)
 8006260:	4013      	ands	r3, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	6939      	ldr	r1, [r7, #16]
 8006268:	430b      	orrs	r3, r1
 800626a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a9a      	ldr	r2, [pc, #616]	; (8006514 <UART_SetConfig+0x2e4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d121      	bne.n	80062f4 <UART_SetConfig+0xc4>
 80062b0:	4b99      	ldr	r3, [pc, #612]	; (8006518 <UART_SetConfig+0x2e8>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d817      	bhi.n	80062ec <UART_SetConfig+0xbc>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <UART_SetConfig+0x94>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	080062e1 	.word	0x080062e1
 80062cc:	080062e7 	.word	0x080062e7
 80062d0:	080062db 	.word	0x080062db
 80062d4:	2301      	movs	r3, #1
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e0b2      	b.n	8006440 <UART_SetConfig+0x210>
 80062da:	2302      	movs	r3, #2
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e0af      	b.n	8006440 <UART_SetConfig+0x210>
 80062e0:	2304      	movs	r3, #4
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e0ac      	b.n	8006440 <UART_SetConfig+0x210>
 80062e6:	2308      	movs	r3, #8
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e0a9      	b.n	8006440 <UART_SetConfig+0x210>
 80062ec:	2310      	movs	r3, #16
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	bf00      	nop
 80062f2:	e0a5      	b.n	8006440 <UART_SetConfig+0x210>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a88      	ldr	r2, [pc, #544]	; (800651c <UART_SetConfig+0x2ec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d123      	bne.n	8006346 <UART_SetConfig+0x116>
 80062fe:	4b86      	ldr	r3, [pc, #536]	; (8006518 <UART_SetConfig+0x2e8>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630a:	d012      	beq.n	8006332 <UART_SetConfig+0x102>
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006310:	d802      	bhi.n	8006318 <UART_SetConfig+0xe8>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <UART_SetConfig+0xf6>
 8006316:	e012      	b.n	800633e <UART_SetConfig+0x10e>
 8006318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800631c:	d00c      	beq.n	8006338 <UART_SetConfig+0x108>
 800631e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006322:	d003      	beq.n	800632c <UART_SetConfig+0xfc>
 8006324:	e00b      	b.n	800633e <UART_SetConfig+0x10e>
 8006326:	2300      	movs	r3, #0
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e089      	b.n	8006440 <UART_SetConfig+0x210>
 800632c:	2302      	movs	r3, #2
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e086      	b.n	8006440 <UART_SetConfig+0x210>
 8006332:	2304      	movs	r3, #4
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e083      	b.n	8006440 <UART_SetConfig+0x210>
 8006338:	2308      	movs	r3, #8
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e080      	b.n	8006440 <UART_SetConfig+0x210>
 800633e:	2310      	movs	r3, #16
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	bf00      	nop
 8006344:	e07c      	b.n	8006440 <UART_SetConfig+0x210>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a75      	ldr	r2, [pc, #468]	; (8006520 <UART_SetConfig+0x2f0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d123      	bne.n	8006398 <UART_SetConfig+0x168>
 8006350:	4b71      	ldr	r3, [pc, #452]	; (8006518 <UART_SetConfig+0x2e8>)
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006358:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800635c:	d012      	beq.n	8006384 <UART_SetConfig+0x154>
 800635e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006362:	d802      	bhi.n	800636a <UART_SetConfig+0x13a>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <UART_SetConfig+0x148>
 8006368:	e012      	b.n	8006390 <UART_SetConfig+0x160>
 800636a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800636e:	d00c      	beq.n	800638a <UART_SetConfig+0x15a>
 8006370:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006374:	d003      	beq.n	800637e <UART_SetConfig+0x14e>
 8006376:	e00b      	b.n	8006390 <UART_SetConfig+0x160>
 8006378:	2300      	movs	r3, #0
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e060      	b.n	8006440 <UART_SetConfig+0x210>
 800637e:	2302      	movs	r3, #2
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e05d      	b.n	8006440 <UART_SetConfig+0x210>
 8006384:	2304      	movs	r3, #4
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e05a      	b.n	8006440 <UART_SetConfig+0x210>
 800638a:	2308      	movs	r3, #8
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e057      	b.n	8006440 <UART_SetConfig+0x210>
 8006390:	2310      	movs	r3, #16
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	bf00      	nop
 8006396:	e053      	b.n	8006440 <UART_SetConfig+0x210>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a61      	ldr	r2, [pc, #388]	; (8006524 <UART_SetConfig+0x2f4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d123      	bne.n	80063ea <UART_SetConfig+0x1ba>
 80063a2:	4b5d      	ldr	r3, [pc, #372]	; (8006518 <UART_SetConfig+0x2e8>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80063aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ae:	d012      	beq.n	80063d6 <UART_SetConfig+0x1a6>
 80063b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b4:	d802      	bhi.n	80063bc <UART_SetConfig+0x18c>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <UART_SetConfig+0x19a>
 80063ba:	e012      	b.n	80063e2 <UART_SetConfig+0x1b2>
 80063bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063c0:	d00c      	beq.n	80063dc <UART_SetConfig+0x1ac>
 80063c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063c6:	d003      	beq.n	80063d0 <UART_SetConfig+0x1a0>
 80063c8:	e00b      	b.n	80063e2 <UART_SetConfig+0x1b2>
 80063ca:	2300      	movs	r3, #0
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e037      	b.n	8006440 <UART_SetConfig+0x210>
 80063d0:	2302      	movs	r3, #2
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e034      	b.n	8006440 <UART_SetConfig+0x210>
 80063d6:	2304      	movs	r3, #4
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e031      	b.n	8006440 <UART_SetConfig+0x210>
 80063dc:	2308      	movs	r3, #8
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e02e      	b.n	8006440 <UART_SetConfig+0x210>
 80063e2:	2310      	movs	r3, #16
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	bf00      	nop
 80063e8:	e02a      	b.n	8006440 <UART_SetConfig+0x210>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4e      	ldr	r2, [pc, #312]	; (8006528 <UART_SetConfig+0x2f8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d123      	bne.n	800643c <UART_SetConfig+0x20c>
 80063f4:	4b48      	ldr	r3, [pc, #288]	; (8006518 <UART_SetConfig+0x2e8>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80063fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006400:	d012      	beq.n	8006428 <UART_SetConfig+0x1f8>
 8006402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006406:	d802      	bhi.n	800640e <UART_SetConfig+0x1de>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <UART_SetConfig+0x1ec>
 800640c:	e012      	b.n	8006434 <UART_SetConfig+0x204>
 800640e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006412:	d00c      	beq.n	800642e <UART_SetConfig+0x1fe>
 8006414:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006418:	d003      	beq.n	8006422 <UART_SetConfig+0x1f2>
 800641a:	e00b      	b.n	8006434 <UART_SetConfig+0x204>
 800641c:	2300      	movs	r3, #0
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e00e      	b.n	8006440 <UART_SetConfig+0x210>
 8006422:	2302      	movs	r3, #2
 8006424:	77fb      	strb	r3, [r7, #31]
 8006426:	e00b      	b.n	8006440 <UART_SetConfig+0x210>
 8006428:	2304      	movs	r3, #4
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e008      	b.n	8006440 <UART_SetConfig+0x210>
 800642e:	2308      	movs	r3, #8
 8006430:	77fb      	strb	r3, [r7, #31]
 8006432:	e005      	b.n	8006440 <UART_SetConfig+0x210>
 8006434:	2310      	movs	r3, #16
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	bf00      	nop
 800643a:	e001      	b.n	8006440 <UART_SetConfig+0x210>
 800643c:	2310      	movs	r3, #16
 800643e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006448:	f040 8090 	bne.w	800656c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800644c:	7ffb      	ldrb	r3, [r7, #31]
 800644e:	2b08      	cmp	r3, #8
 8006450:	d86c      	bhi.n	800652c <UART_SetConfig+0x2fc>
 8006452:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <UART_SetConfig+0x228>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	0800647d 	.word	0x0800647d
 800645c:	0800649d 	.word	0x0800649d
 8006460:	080064bd 	.word	0x080064bd
 8006464:	0800652d 	.word	0x0800652d
 8006468:	080064d9 	.word	0x080064d9
 800646c:	0800652d 	.word	0x0800652d
 8006470:	0800652d 	.word	0x0800652d
 8006474:	0800652d 	.word	0x0800652d
 8006478:	080064f9 	.word	0x080064f9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800647c:	f7fe ff2c 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 8006480:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	005a      	lsls	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	441a      	add	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	b29b      	uxth	r3, r3
 8006498:	61bb      	str	r3, [r7, #24]
        break;
 800649a:	e04a      	b.n	8006532 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fe ff3e 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 80064a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	005a      	lsls	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	61bb      	str	r3, [r7, #24]
        break;
 80064ba:	e03a      	b.n	8006532 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80064c6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6852      	ldr	r2, [r2, #4]
 80064ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	61bb      	str	r3, [r7, #24]
        break;
 80064d6:	e02c      	b.n	8006532 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d8:	f7fe fe88 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 80064dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	005a      	lsls	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	441a      	add	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	61bb      	str	r3, [r7, #24]
        break;
 80064f6:	e01c      	b.n	8006532 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	fbb2 f3f3 	udiv	r3, r2, r3
 800650a:	b29b      	uxth	r3, r3
 800650c:	61bb      	str	r3, [r7, #24]
        break;
 800650e:	e010      	b.n	8006532 <UART_SetConfig+0x302>
 8006510:	efff69f3 	.word	0xefff69f3
 8006514:	40013800 	.word	0x40013800
 8006518:	40021000 	.word	0x40021000
 800651c:	40004400 	.word	0x40004400
 8006520:	40004800 	.word	0x40004800
 8006524:	40004c00 	.word	0x40004c00
 8006528:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	75fb      	strb	r3, [r7, #23]
        break;
 8006530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b0f      	cmp	r3, #15
 8006536:	d916      	bls.n	8006566 <UART_SetConfig+0x336>
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800653e:	d212      	bcs.n	8006566 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f023 030f 	bic.w	r3, r3, #15
 8006548:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	b29b      	uxth	r3, r3
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	b29a      	uxth	r2, r3
 8006556:	897b      	ldrh	r3, [r7, #10]
 8006558:	4313      	orrs	r3, r2
 800655a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	897a      	ldrh	r2, [r7, #10]
 8006562:	60da      	str	r2, [r3, #12]
 8006564:	e072      	b.n	800664c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
 800656a:	e06f      	b.n	800664c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800656c:	7ffb      	ldrb	r3, [r7, #31]
 800656e:	2b08      	cmp	r3, #8
 8006570:	d85b      	bhi.n	800662a <UART_SetConfig+0x3fa>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x348>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	0800659d 	.word	0x0800659d
 800657c:	080065bb 	.word	0x080065bb
 8006580:	080065d9 	.word	0x080065d9
 8006584:	0800662b 	.word	0x0800662b
 8006588:	080065f5 	.word	0x080065f5
 800658c:	0800662b 	.word	0x0800662b
 8006590:	0800662b 	.word	0x0800662b
 8006594:	0800662b 	.word	0x0800662b
 8006598:	08006613 	.word	0x08006613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800659c:	f7fe fe9c 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 80065a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	085a      	lsrs	r2, r3, #1
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	441a      	add	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	61bb      	str	r3, [r7, #24]
        break;
 80065b8:	e03a      	b.n	8006630 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ba:	f7fe feaf 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 80065be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	085a      	lsrs	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	441a      	add	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	61bb      	str	r3, [r7, #24]
        break;
 80065d6:	e02b      	b.n	8006630 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	085b      	lsrs	r3, r3, #1
 80065de:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80065e2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6852      	ldr	r2, [r2, #4]
 80065ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	61bb      	str	r3, [r7, #24]
        break;
 80065f2:	e01d      	b.n	8006630 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f4:	f7fe fdfa 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 80065f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	085a      	lsrs	r2, r3, #1
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	441a      	add	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	b29b      	uxth	r3, r3
 800660e:	61bb      	str	r3, [r7, #24]
        break;
 8006610:	e00e      	b.n	8006630 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	b29b      	uxth	r3, r3
 8006626:	61bb      	str	r3, [r7, #24]
        break;
 8006628:	e002      	b.n	8006630 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]
        break;
 800662e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b0f      	cmp	r3, #15
 8006634:	d908      	bls.n	8006648 <UART_SetConfig+0x418>
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663c:	d204      	bcs.n	8006648 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	60da      	str	r2, [r3, #12]
 8006646:	e001      	b.n	800664c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop

08006664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01a      	beq.n	800677a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006762:	d10a      	bne.n	800677a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
  }
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80067b6:	f7fb fca3 	bl	8002100 <HAL_GetTick>
 80067ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d10e      	bne.n	80067e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f82a 	bl	8006832 <UART_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e020      	b.n	800682a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d10e      	bne.n	8006814 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f814 	bl	8006832 <UART_WaitOnFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e00a      	b.n	800682a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	4613      	mov	r3, r2
 8006840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006842:	e05d      	b.n	8006900 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684a:	d059      	beq.n	8006900 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684c:	f7fb fc58 	bl	8002100 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	429a      	cmp	r2, r3
 800685a:	d302      	bcc.n	8006862 <UART_WaitOnFlagUntilTimeout+0x30>
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d11b      	bne.n	800689a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006870:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e042      	b.n	8006920 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d02b      	beq.n	8006900 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b6:	d123      	bne.n	8006900 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0201 	bic.w	r2, r2, #1
 80068e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e00f      	b.n	8006920 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69da      	ldr	r2, [r3, #28]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4013      	ands	r3, r2
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	bf0c      	ite	eq
 8006910:	2301      	moveq	r3, #1
 8006912:	2300      	movne	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	429a      	cmp	r2, r3
 800691c:	d092      	beq.n	8006844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4a07      	ldr	r2, [pc, #28]	; (8006954 <vApplicationGetIdleTaskMemory+0x2c>)
 8006938:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4a06      	ldr	r2, [pc, #24]	; (8006958 <vApplicationGetIdleTaskMemory+0x30>)
 800693e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2280      	movs	r2, #128	; 0x80
 8006944:	601a      	str	r2, [r3, #0]
}
 8006946:	bf00      	nop
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000f18 	.word	0x20000f18
 8006958:	20000f74 	.word	0x20000f74

0800695c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a07      	ldr	r2, [pc, #28]	; (8006988 <vApplicationGetTimerTaskMemory+0x2c>)
 800696c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	4a06      	ldr	r2, [pc, #24]	; (800698c <vApplicationGetTimerTaskMemory+0x30>)
 8006972:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800697a:	601a      	str	r2, [r3, #0]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20001174 	.word	0x20001174
 800698c:	200011d0 	.word	0x200011d0

08006990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f103 0208 	add.w	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f04f 32ff 	mov.w	r2, #4294967295
 80069a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f103 0208 	add.w	r2, r3, #8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f103 0208 	add.w	r2, r3, #8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	601a      	str	r2, [r3, #0]
}
 8006a26:	bf00      	nop
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d103      	bne.n	8006a52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e00c      	b.n	8006a6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3308      	adds	r3, #8
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e002      	b.n	8006a60 <vListInsert+0x2e>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d2f6      	bcs.n	8006a5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6892      	ldr	r2, [r2, #8]
 8006aba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6852      	ldr	r2, [r2, #4]
 8006ac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d103      	bne.n	8006ad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	1e5a      	subs	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	e7fe      	b.n	8006b1e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006b20:	f001 ffcc 	bl	8008abc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	441a      	add	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	3b01      	subs	r3, #1
 8006b52:	68f9      	ldr	r1, [r7, #12]
 8006b54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	441a      	add	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	22ff      	movs	r2, #255	; 0xff
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	22ff      	movs	r2, #255	; 0xff
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d114      	bne.n	8006ba0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01a      	beq.n	8006bb4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3310      	adds	r3, #16
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 f8d2 	bl	8007d2c <xTaskRemoveFromEventList>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d012      	beq.n	8006bb4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <xQueueGenericReset+0xcc>)
 8006b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	e009      	b.n	8006bb4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3310      	adds	r3, #16
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fef3 	bl	8006990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3324      	adds	r3, #36	; 0x24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff feee 	bl	8006990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bb4:	f001 ffb0 	bl	8008b18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bb8:	2301      	movs	r3, #1
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	e000ed04 	.word	0xe000ed04

08006bc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08e      	sub	sp, #56	; 0x38
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <xQueueGenericCreateStatic+0x28>
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bee:	e7fe      	b.n	8006bee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <xQueueGenericCreateStatic+0x42>
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
 8006c08:	e7fe      	b.n	8006c08 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <xQueueGenericCreateStatic+0x4e>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <xQueueGenericCreateStatic+0x52>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <xQueueGenericCreateStatic+0x54>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <xQueueGenericCreateStatic+0x6c>
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	e7fe      	b.n	8006c32 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <xQueueGenericCreateStatic+0x78>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <xQueueGenericCreateStatic+0x7c>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <xQueueGenericCreateStatic+0x7e>
 8006c44:	2300      	movs	r3, #0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <xQueueGenericCreateStatic+0x96>
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e7fe      	b.n	8006c5c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c5e:	2350      	movs	r3, #80	; 0x50
 8006c60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b50      	cmp	r3, #80	; 0x50
 8006c66:	d009      	beq.n	8006c7c <xQueueGenericCreateStatic+0xb4>
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e7fe      	b.n	8006c7a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	4613      	mov	r3, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f842 	bl	8006d26 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3730      	adds	r7, #48	; 0x30
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <xQueueGenericCreate+0x28>
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e7fe      	b.n	8006cd2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	e004      	b.n	8006cea <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	fb02 f303 	mul.w	r3, r2, r3
 8006ce8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	3350      	adds	r3, #80	; 0x50
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fffe 	bl	8008cf0 <pvPortMalloc>
 8006cf4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00f      	beq.n	8006d1c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	3350      	adds	r3, #80	; 0x50
 8006d00:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d0a:	79fa      	ldrb	r2, [r7, #7]
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f805 	bl	8006d26 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
	}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e002      	b.n	8006d48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d54:	2101      	movs	r1, #1
 8006d56:	69b8      	ldr	r0, [r7, #24]
 8006d58:	f7ff fece 	bl	8006af8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08e      	sub	sp, #56	; 0x38
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <xQueueGenericSend+0x30>
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d9a:	e7fe      	b.n	8006d9a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <xQueueGenericSend+0x3e>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <xQueueGenericSend+0x42>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <xQueueGenericSend+0x44>
 8006dae:	2300      	movs	r3, #0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <xQueueGenericSend+0x5c>
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc6:	e7fe      	b.n	8006dc6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d103      	bne.n	8006dd6 <xQueueGenericSend+0x6a>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <xQueueGenericSend+0x6e>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <xQueueGenericSend+0x70>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <xQueueGenericSend+0x88>
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	623b      	str	r3, [r7, #32]
 8006df2:	e7fe      	b.n	8006df2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006df4:	f001 f956 	bl	80080a4 <xTaskGetSchedulerState>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <xQueueGenericSend+0x98>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <xQueueGenericSend+0x9c>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <xQueueGenericSend+0x9e>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <xQueueGenericSend+0xb6>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	e7fe      	b.n	8006e20 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e22:	f001 fe4b 	bl	8008abc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d302      	bcc.n	8006e38 <xQueueGenericSend+0xcc>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d129      	bne.n	8006e8c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e3e:	f000 f9ff 	bl	8007240 <prvCopyDataToQueue>
 8006e42:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d010      	beq.n	8006e6e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	3324      	adds	r3, #36	; 0x24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 ff6b 	bl	8007d2c <xTaskRemoveFromEventList>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d013      	beq.n	8006e84 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e5c:	4b3f      	ldr	r3, [pc, #252]	; (8006f5c <xQueueGenericSend+0x1f0>)
 8006e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	e00a      	b.n	8006e84 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e74:	4b39      	ldr	r3, [pc, #228]	; (8006f5c <xQueueGenericSend+0x1f0>)
 8006e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e84:	f001 fe48 	bl	8008b18 <vPortExitCritical>
				return pdPASS;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e063      	b.n	8006f54 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d103      	bne.n	8006e9a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e92:	f001 fe41 	bl	8008b18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e05c      	b.n	8006f54 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ea0:	f107 0314 	add.w	r3, r7, #20
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 ffa3 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eae:	f001 fe33 	bl	8008b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eb2:	f000 fd19 	bl	80078e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eb6:	f001 fe01 	bl	8008abc <vPortEnterCritical>
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ec0:	b25b      	sxtb	r3, r3
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d103      	bne.n	8006ed0 <xQueueGenericSend+0x164>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed6:	b25b      	sxtb	r3, r3
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d103      	bne.n	8006ee6 <xQueueGenericSend+0x17a>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ee6:	f001 fe17 	bl	8008b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eea:	1d3a      	adds	r2, r7, #4
 8006eec:	f107 0314 	add.w	r3, r7, #20
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 ff92 	bl	8007e1c <xTaskCheckForTimeOut>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d124      	bne.n	8006f48 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f00:	f000 fa96 	bl	8007430 <prvIsQueueFull>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d018      	beq.n	8006f3c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	3310      	adds	r3, #16
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 febc 	bl	8007c90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f1a:	f000 fa21 	bl	8007360 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f1e:	f000 fcf1 	bl	8007904 <xTaskResumeAll>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f47f af7c 	bne.w	8006e22 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <xQueueGenericSend+0x1f0>)
 8006f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	e772      	b.n	8006e22 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f3e:	f000 fa0f 	bl	8007360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f42:	f000 fcdf 	bl	8007904 <xTaskResumeAll>
 8006f46:	e76c      	b.n	8006e22 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f4a:	f000 fa09 	bl	8007360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f4e:	f000 fcd9 	bl	8007904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f52:	2300      	movs	r3, #0
		}
	}
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3738      	adds	r7, #56	; 0x38
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	e000ed04 	.word	0xe000ed04

08006f60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08e      	sub	sp, #56	; 0x38
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <xQueueGenericSendFromISR+0x2c>
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8a:	e7fe      	b.n	8006f8a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d103      	bne.n	8006f9a <xQueueGenericSendFromISR+0x3a>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <xQueueGenericSendFromISR+0x3e>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <xQueueGenericSendFromISR+0x40>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <xQueueGenericSendFromISR+0x58>
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	623b      	str	r3, [r7, #32]
 8006fb6:	e7fe      	b.n	8006fb6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d103      	bne.n	8006fc6 <xQueueGenericSendFromISR+0x66>
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <xQueueGenericSendFromISR+0x6a>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <xQueueGenericSendFromISR+0x6c>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <xQueueGenericSendFromISR+0x84>
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	e7fe      	b.n	8006fe2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fe4:	f001 fe46 	bl	8008c74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fe8:	f3ef 8211 	mrs	r2, BASEPRI
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	61ba      	str	r2, [r7, #24]
 8006ffe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007000:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <xQueueGenericSendFromISR+0xb6>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d12c      	bne.n	8007070 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800701c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007026:	f000 f90b 	bl	8007240 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800702a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d112      	bne.n	800705a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d016      	beq.n	800706a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	3324      	adds	r3, #36	; 0x24
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fe73 	bl	8007d2c <xTaskRemoveFromEventList>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	e007      	b.n	800706a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800705a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800705e:	3301      	adds	r3, #1
 8007060:	b2db      	uxtb	r3, r3
 8007062:	b25a      	sxtb	r2, r3
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800706a:	2301      	movs	r3, #1
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800706e:	e001      	b.n	8007074 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007070:	2300      	movs	r3, #0
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007080:	4618      	mov	r0, r3
 8007082:	3738      	adds	r7, #56	; 0x38
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08c      	sub	sp, #48	; 0x30
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007094:	2300      	movs	r3, #0
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <xQueueReceive+0x2e>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	623b      	str	r3, [r7, #32]
 80070b4:	e7fe      	b.n	80070b4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d103      	bne.n	80070c4 <xQueueReceive+0x3c>
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <xQueueReceive+0x40>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <xQueueReceive+0x42>
 80070c8:	2300      	movs	r3, #0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <xQueueReceive+0x5a>
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e7fe      	b.n	80070e0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070e2:	f000 ffdf 	bl	80080a4 <xTaskGetSchedulerState>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <xQueueReceive+0x6a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <xQueueReceive+0x6e>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <xQueueReceive+0x70>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d109      	bne.n	8007110 <xQueueReceive+0x88>
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	e7fe      	b.n	800710e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007110:	f001 fcd4 	bl	8008abc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01f      	beq.n	8007160 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007124:	f000 f8f6 	bl	8007314 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	1e5a      	subs	r2, r3, #1
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00f      	beq.n	8007158 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	3310      	adds	r3, #16
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fdf5 	bl	8007d2c <xTaskRemoveFromEventList>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007148:	4b3c      	ldr	r3, [pc, #240]	; (800723c <xQueueReceive+0x1b4>)
 800714a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007158:	f001 fcde 	bl	8008b18 <vPortExitCritical>
				return pdPASS;
 800715c:	2301      	movs	r3, #1
 800715e:	e069      	b.n	8007234 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007166:	f001 fcd7 	bl	8008b18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800716a:	2300      	movs	r3, #0
 800716c:	e062      	b.n	8007234 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007174:	f107 0310 	add.w	r3, r7, #16
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fe39 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800717e:	2301      	movs	r3, #1
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007182:	f001 fcc9 	bl	8008b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007186:	f000 fbaf 	bl	80078e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800718a:	f001 fc97 	bl	8008abc <vPortEnterCritical>
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007194:	b25b      	sxtb	r3, r3
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d103      	bne.n	80071a4 <xQueueReceive+0x11c>
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071aa:	b25b      	sxtb	r3, r3
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d103      	bne.n	80071ba <xQueueReceive+0x132>
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ba:	f001 fcad 	bl	8008b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071be:	1d3a      	adds	r2, r7, #4
 80071c0:	f107 0310 	add.w	r3, r7, #16
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fe28 	bl	8007e1c <xTaskCheckForTimeOut>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d123      	bne.n	800721a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d4:	f000 f916 	bl	8007404 <prvIsQueueEmpty>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d017      	beq.n	800720e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	3324      	adds	r3, #36	; 0x24
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4611      	mov	r1, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fd52 	bl	8007c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ee:	f000 f8b7 	bl	8007360 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071f2:	f000 fb87 	bl	8007904 <xTaskResumeAll>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d189      	bne.n	8007110 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80071fc:	4b0f      	ldr	r3, [pc, #60]	; (800723c <xQueueReceive+0x1b4>)
 80071fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	e780      	b.n	8007110 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800720e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007210:	f000 f8a6 	bl	8007360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007214:	f000 fb76 	bl	8007904 <xTaskResumeAll>
 8007218:	e77a      	b.n	8007110 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800721a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800721c:	f000 f8a0 	bl	8007360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007220:	f000 fb70 	bl	8007904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007226:	f000 f8ed 	bl	8007404 <prvIsQueueEmpty>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	f43f af6f 	beq.w	8007110 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007232:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007234:	4618      	mov	r0, r3
 8007236:	3730      	adds	r7, #48	; 0x30
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10d      	bne.n	800727a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d14d      	bne.n	8007302 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 ff38 	bl	80080e0 <xTaskPriorityDisinherit>
 8007270:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	605a      	str	r2, [r3, #4]
 8007278:	e043      	b.n	8007302 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d119      	bne.n	80072b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6898      	ldr	r0, [r3, #8]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	461a      	mov	r2, r3
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	f002 ff88 	bl	800a1a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	441a      	add	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d32b      	bcc.n	8007302 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	609a      	str	r2, [r3, #8]
 80072b2:	e026      	b.n	8007302 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68d8      	ldr	r0, [r3, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	461a      	mov	r2, r3
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	f002 ff6e 	bl	800a1a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	425b      	negs	r3, r3
 80072ce:	441a      	add	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d207      	bcs.n	80072f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	425b      	negs	r3, r3
 80072ea:	441a      	add	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d105      	bne.n	8007302 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3b01      	subs	r3, #1
 8007300:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800730a:	697b      	ldr	r3, [r7, #20]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d018      	beq.n	8007358 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	441a      	add	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d303      	bcc.n	8007348 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68d9      	ldr	r1, [r3, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007350:	461a      	mov	r2, r3
 8007352:	6838      	ldr	r0, [r7, #0]
 8007354:	f002 ff24 	bl	800a1a0 <memcpy>
	}
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007368:	f001 fba8 	bl	8008abc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007372:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007374:	e011      	b.n	800739a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	d012      	beq.n	80073a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3324      	adds	r3, #36	; 0x24
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fcd2 	bl	8007d2c <xTaskRemoveFromEventList>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800738e:	f000 fda5 	bl	8007edc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	3b01      	subs	r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800739a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dce9      	bgt.n	8007376 <prvUnlockQueue+0x16>
 80073a2:	e000      	b.n	80073a6 <prvUnlockQueue+0x46>
					break;
 80073a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	22ff      	movs	r2, #255	; 0xff
 80073aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073ae:	f001 fbb3 	bl	8008b18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073b2:	f001 fb83 	bl	8008abc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073be:	e011      	b.n	80073e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3310      	adds	r3, #16
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fcad 	bl	8007d2c <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073d8:	f000 fd80 	bl	8007edc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	3b01      	subs	r3, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dce9      	bgt.n	80073c0 <prvUnlockQueue+0x60>
 80073ec:	e000      	b.n	80073f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	22ff      	movs	r2, #255	; 0xff
 80073f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073f8:	f001 fb8e 	bl	8008b18 <vPortExitCritical>
}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800740c:	f001 fb56 	bl	8008abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e001      	b.n	8007422 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007422:	f001 fb79 	bl	8008b18 <vPortExitCritical>

	return xReturn;
 8007426:	68fb      	ldr	r3, [r7, #12]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007438:	f001 fb40 	bl	8008abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007444:	429a      	cmp	r2, r3
 8007446:	d102      	bne.n	800744e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e001      	b.n	8007452 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007452:	f001 fb61 	bl	8008b18 <vPortExitCritical>

	return xReturn;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	e014      	b.n	800749a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007470:	4a0e      	ldr	r2, [pc, #56]	; (80074ac <vQueueAddToRegistry+0x4c>)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10b      	bne.n	8007494 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800747c:	490b      	ldr	r1, [pc, #44]	; (80074ac <vQueueAddToRegistry+0x4c>)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007486:	4a09      	ldr	r2, [pc, #36]	; (80074ac <vQueueAddToRegistry+0x4c>)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4413      	add	r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007492:	e005      	b.n	80074a0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b07      	cmp	r3, #7
 800749e:	d9e7      	bls.n	8007470 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	20003c08 	.word	0x20003c08

080074b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074c0:	f001 fafc 	bl	8008abc <vPortEnterCritical>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d0:	d103      	bne.n	80074da <vQueueWaitForMessageRestricted+0x2a>
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074e0:	b25b      	sxtb	r3, r3
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d103      	bne.n	80074f0 <vQueueWaitForMessageRestricted+0x40>
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074f0:	f001 fb12 	bl	8008b18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3324      	adds	r3, #36	; 0x24
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	4618      	mov	r0, r3
 8007506:	f000 fbe7 	bl	8007cd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800750a:	6978      	ldr	r0, [r7, #20]
 800750c:	f7ff ff28 	bl	8007360 <prvUnlockQueue>
	}
 8007510:	bf00      	nop
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08e      	sub	sp, #56	; 0x38
 800751c:	af04      	add	r7, sp, #16
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <xTaskCreateStatic+0x28>
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	623b      	str	r3, [r7, #32]
 800753e:	e7fe      	b.n	800753e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	2b00      	cmp	r3, #0
 8007544:	d109      	bne.n	800755a <xTaskCreateStatic+0x42>
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	61fb      	str	r3, [r7, #28]
 8007558:	e7fe      	b.n	8007558 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800755a:	235c      	movs	r3, #92	; 0x5c
 800755c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b5c      	cmp	r3, #92	; 0x5c
 8007562:	d009      	beq.n	8007578 <xTaskCreateStatic+0x60>
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	e7fe      	b.n	8007576 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	2b00      	cmp	r3, #0
 800757c:	d01e      	beq.n	80075bc <xTaskCreateStatic+0xa4>
 800757e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01b      	beq.n	80075bc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800758c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	2202      	movs	r2, #2
 8007592:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007596:	2300      	movs	r3, #0
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	9302      	str	r3, [sp, #8]
 800759e:	f107 0314 	add.w	r3, r7, #20
 80075a2:	9301      	str	r3, [sp, #4]
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 f80b 	bl	80075ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075b6:	f000 f88f 	bl	80076d8 <prvAddNewTaskToReadyList>
 80075ba:	e001      	b.n	80075c0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075c0:	697b      	ldr	r3, [r7, #20]
	}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3728      	adds	r7, #40	; 0x28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b088      	sub	sp, #32
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	461a      	mov	r2, r3
 80075e2:	21a5      	movs	r1, #165	; 0xa5
 80075e4:	f002 fde7 	bl	800a1b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075f2:	3b01      	subs	r3, #1
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	f023 0307 	bic.w	r3, r3, #7
 8007600:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	2b00      	cmp	r3, #0
 800760a:	d009      	beq.n	8007620 <prvInitialiseNewTask+0x56>
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	e7fe      	b.n	800761e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
 8007624:	e012      	b.n	800764c <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	4413      	add	r3, r2
 800762c:	7819      	ldrb	r1, [r3, #0]
 800762e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	4413      	add	r3, r2
 8007634:	3334      	adds	r3, #52	; 0x34
 8007636:	460a      	mov	r2, r1
 8007638:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d006      	beq.n	8007654 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	3301      	adds	r3, #1
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	2b0f      	cmp	r3, #15
 8007650:	d9e9      	bls.n	8007626 <prvInitialiseNewTask+0x5c>
 8007652:	e000      	b.n	8007656 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007654:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	2b37      	cmp	r3, #55	; 0x37
 8007662:	d901      	bls.n	8007668 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007664:	2337      	movs	r3, #55	; 0x37
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800766c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007672:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	2200      	movs	r2, #0
 8007678:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	3304      	adds	r3, #4
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff f9a6 	bl	80069d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	3318      	adds	r3, #24
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff f9a1 	bl	80069d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	2200      	movs	r2, #0
 80076a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	68f9      	ldr	r1, [r7, #12]
 80076b6:	69b8      	ldr	r0, [r7, #24]
 80076b8:	f001 f8dc 	bl	8008874 <pxPortInitialiseStack>
 80076bc:	4602      	mov	r2, r0
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ce:	bf00      	nop
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076e0:	f001 f9ec 	bl	8008abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076e4:	4b2d      	ldr	r3, [pc, #180]	; (800779c <prvAddNewTaskToReadyList+0xc4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	4a2c      	ldr	r2, [pc, #176]	; (800779c <prvAddNewTaskToReadyList+0xc4>)
 80076ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076ee:	4b2c      	ldr	r3, [pc, #176]	; (80077a0 <prvAddNewTaskToReadyList+0xc8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076f6:	4a2a      	ldr	r2, [pc, #168]	; (80077a0 <prvAddNewTaskToReadyList+0xc8>)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076fc:	4b27      	ldr	r3, [pc, #156]	; (800779c <prvAddNewTaskToReadyList+0xc4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d110      	bne.n	8007726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007704:	f000 fc0e 	bl	8007f24 <prvInitialiseTaskLists>
 8007708:	e00d      	b.n	8007726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800770a:	4b26      	ldr	r3, [pc, #152]	; (80077a4 <prvAddNewTaskToReadyList+0xcc>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007712:	4b23      	ldr	r3, [pc, #140]	; (80077a0 <prvAddNewTaskToReadyList+0xc8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	429a      	cmp	r2, r3
 800771e:	d802      	bhi.n	8007726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007720:	4a1f      	ldr	r2, [pc, #124]	; (80077a0 <prvAddNewTaskToReadyList+0xc8>)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007726:	4b20      	ldr	r3, [pc, #128]	; (80077a8 <prvAddNewTaskToReadyList+0xd0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3301      	adds	r3, #1
 800772c:	4a1e      	ldr	r2, [pc, #120]	; (80077a8 <prvAddNewTaskToReadyList+0xd0>)
 800772e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007730:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <prvAddNewTaskToReadyList+0xd0>)
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773c:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <prvAddNewTaskToReadyList+0xd4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d903      	bls.n	800774c <prvAddNewTaskToReadyList+0x74>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4a18      	ldr	r2, [pc, #96]	; (80077ac <prvAddNewTaskToReadyList+0xd4>)
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4a15      	ldr	r2, [pc, #84]	; (80077b0 <prvAddNewTaskToReadyList+0xd8>)
 800775a:	441a      	add	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f7ff f941 	bl	80069ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007768:	f001 f9d6 	bl	8008b18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800776c:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <prvAddNewTaskToReadyList+0xcc>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00e      	beq.n	8007792 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007774:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <prvAddNewTaskToReadyList+0xc8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	429a      	cmp	r2, r3
 8007780:	d207      	bcs.n	8007792 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <prvAddNewTaskToReadyList+0xdc>)
 8007784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20001aa4 	.word	0x20001aa4
 80077a0:	200015d0 	.word	0x200015d0
 80077a4:	20001ab0 	.word	0x20001ab0
 80077a8:	20001ac0 	.word	0x20001ac0
 80077ac:	20001aac 	.word	0x20001aac
 80077b0:	200015d4 	.word	0x200015d4
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d016      	beq.n	80077f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077ca:	4b13      	ldr	r3, [pc, #76]	; (8007818 <vTaskDelay+0x60>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <vTaskDelay+0x2e>
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60bb      	str	r3, [r7, #8]
 80077e4:	e7fe      	b.n	80077e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80077e6:	f000 f87f 	bl	80078e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077ea:	2100      	movs	r1, #0
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fce3 	bl	80081b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077f2:	f000 f887 	bl	8007904 <xTaskResumeAll>
 80077f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d107      	bne.n	800780e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80077fe:	4b07      	ldr	r3, [pc, #28]	; (800781c <vTaskDelay+0x64>)
 8007800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20001acc 	.word	0x20001acc
 800781c:	e000ed04 	.word	0xe000ed04

08007820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800782e:	463a      	mov	r2, r7
 8007830:	1d39      	adds	r1, r7, #4
 8007832:	f107 0308 	add.w	r3, r7, #8
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff f876 	bl	8006928 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	9202      	str	r2, [sp, #8]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	2300      	movs	r3, #0
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	2300      	movs	r3, #0
 800784c:	460a      	mov	r2, r1
 800784e:	4920      	ldr	r1, [pc, #128]	; (80078d0 <vTaskStartScheduler+0xb0>)
 8007850:	4820      	ldr	r0, [pc, #128]	; (80078d4 <vTaskStartScheduler+0xb4>)
 8007852:	f7ff fe61 	bl	8007518 <xTaskCreateStatic>
 8007856:	4602      	mov	r2, r0
 8007858:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <vTaskStartScheduler+0xb8>)
 800785a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800785c:	4b1e      	ldr	r3, [pc, #120]	; (80078d8 <vTaskStartScheduler+0xb8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007864:	2301      	movs	r3, #1
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e001      	b.n	800786e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d102      	bne.n	800787a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007874:	f000 fcf4 	bl	8008260 <xTimerCreateTimerTask>
 8007878:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d115      	bne.n	80078ac <vTaskStartScheduler+0x8c>
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007892:	4b12      	ldr	r3, [pc, #72]	; (80078dc <vTaskStartScheduler+0xbc>)
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800789a:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <vTaskStartScheduler+0xc0>)
 800789c:	2201      	movs	r2, #1
 800789e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80078a0:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <vTaskStartScheduler+0xc4>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078a6:	f001 f86b 	bl	8008980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078aa:	e00d      	b.n	80078c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d109      	bne.n	80078c8 <vTaskStartScheduler+0xa8>
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e7fe      	b.n	80078c6 <vTaskStartScheduler+0xa6>
}
 80078c8:	bf00      	nop
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	0800dcac 	.word	0x0800dcac
 80078d4:	08007ef5 	.word	0x08007ef5
 80078d8:	20001ac8 	.word	0x20001ac8
 80078dc:	20001ac4 	.word	0x20001ac4
 80078e0:	20001ab0 	.word	0x20001ab0
 80078e4:	20001aa8 	.word	0x20001aa8

080078e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078ec:	4b04      	ldr	r3, [pc, #16]	; (8007900 <vTaskSuspendAll+0x18>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	4a03      	ldr	r2, [pc, #12]	; (8007900 <vTaskSuspendAll+0x18>)
 80078f4:	6013      	str	r3, [r2, #0]
}
 80078f6:	bf00      	nop
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20001acc 	.word	0x20001acc

08007904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007912:	4b41      	ldr	r3, [pc, #260]	; (8007a18 <xTaskResumeAll+0x114>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d109      	bne.n	800792e <xTaskResumeAll+0x2a>
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	e7fe      	b.n	800792c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800792e:	f001 f8c5 	bl	8008abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007932:	4b39      	ldr	r3, [pc, #228]	; (8007a18 <xTaskResumeAll+0x114>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3b01      	subs	r3, #1
 8007938:	4a37      	ldr	r2, [pc, #220]	; (8007a18 <xTaskResumeAll+0x114>)
 800793a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800793c:	4b36      	ldr	r3, [pc, #216]	; (8007a18 <xTaskResumeAll+0x114>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d162      	bne.n	8007a0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007944:	4b35      	ldr	r3, [pc, #212]	; (8007a1c <xTaskResumeAll+0x118>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d05e      	beq.n	8007a0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800794c:	e02f      	b.n	80079ae <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800794e:	4b34      	ldr	r3, [pc, #208]	; (8007a20 <xTaskResumeAll+0x11c>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3318      	adds	r3, #24
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff f8a2 	bl	8006aa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3304      	adds	r3, #4
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff f89d 	bl	8006aa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	4b2d      	ldr	r3, [pc, #180]	; (8007a24 <xTaskResumeAll+0x120>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d903      	bls.n	800797e <xTaskResumeAll+0x7a>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	4a2a      	ldr	r2, [pc, #168]	; (8007a24 <xTaskResumeAll+0x120>)
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4a27      	ldr	r2, [pc, #156]	; (8007a28 <xTaskResumeAll+0x124>)
 800798c:	441a      	add	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3304      	adds	r3, #4
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f7ff f828 	bl	80069ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799e:	4b23      	ldr	r3, [pc, #140]	; (8007a2c <xTaskResumeAll+0x128>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d302      	bcc.n	80079ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80079a8:	4b21      	ldr	r3, [pc, #132]	; (8007a30 <xTaskResumeAll+0x12c>)
 80079aa:	2201      	movs	r2, #1
 80079ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ae:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <xTaskResumeAll+0x11c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1cb      	bne.n	800794e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079bc:	f000 fb4c 	bl	8008058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079c0:	4b1c      	ldr	r3, [pc, #112]	; (8007a34 <xTaskResumeAll+0x130>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d010      	beq.n	80079ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079cc:	f000 f846 	bl	8007a5c <xTaskIncrementTick>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80079d6:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <xTaskResumeAll+0x12c>)
 80079d8:	2201      	movs	r2, #1
 80079da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3b01      	subs	r3, #1
 80079e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f1      	bne.n	80079cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80079e8:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <xTaskResumeAll+0x130>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <xTaskResumeAll+0x12c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079fa:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <xTaskResumeAll+0x134>)
 80079fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a0a:	f001 f885 	bl	8008b18 <vPortExitCritical>

	return xAlreadyYielded;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20001acc 	.word	0x20001acc
 8007a1c:	20001aa4 	.word	0x20001aa4
 8007a20:	20001a64 	.word	0x20001a64
 8007a24:	20001aac 	.word	0x20001aac
 8007a28:	200015d4 	.word	0x200015d4
 8007a2c:	200015d0 	.word	0x200015d0
 8007a30:	20001ab8 	.word	0x20001ab8
 8007a34:	20001ab4 	.word	0x20001ab4
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a42:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <xTaskGetTickCount+0x1c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a48:	687b      	ldr	r3, [r7, #4]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20001aa8 	.word	0x20001aa8

08007a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a66:	4b51      	ldr	r3, [pc, #324]	; (8007bac <xTaskIncrementTick+0x150>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 808d 	bne.w	8007b8a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a70:	4b4f      	ldr	r3, [pc, #316]	; (8007bb0 <xTaskIncrementTick+0x154>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a78:	4a4d      	ldr	r2, [pc, #308]	; (8007bb0 <xTaskIncrementTick+0x154>)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d11f      	bne.n	8007ac4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a84:	4b4b      	ldr	r3, [pc, #300]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <xTaskIncrementTick+0x46>
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	e7fe      	b.n	8007aa0 <xTaskIncrementTick+0x44>
 8007aa2:	4b44      	ldr	r3, [pc, #272]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	4b43      	ldr	r3, [pc, #268]	; (8007bb8 <xTaskIncrementTick+0x15c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a41      	ldr	r2, [pc, #260]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	4a41      	ldr	r2, [pc, #260]	; (8007bb8 <xTaskIncrementTick+0x15c>)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <xTaskIncrementTick+0x160>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	4a3f      	ldr	r2, [pc, #252]	; (8007bbc <xTaskIncrementTick+0x160>)
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	f000 faca 	bl	8008058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ac4:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <xTaskIncrementTick+0x164>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d34e      	bcc.n	8007b6c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ace:	4b39      	ldr	r3, [pc, #228]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <xTaskIncrementTick+0x80>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <xTaskIncrementTick+0x82>
 8007adc:	2300      	movs	r3, #0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae2:	4b37      	ldr	r3, [pc, #220]	; (8007bc0 <xTaskIncrementTick+0x164>)
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae8:	601a      	str	r2, [r3, #0]
					break;
 8007aea:	e03f      	b.n	8007b6c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007aec:	4b31      	ldr	r3, [pc, #196]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d203      	bcs.n	8007b0c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b04:	4a2e      	ldr	r2, [pc, #184]	; (8007bc0 <xTaskIncrementTick+0x164>)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6013      	str	r3, [r2, #0]
						break;
 8007b0a:	e02f      	b.n	8007b6c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe ffc7 	bl	8006aa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d004      	beq.n	8007b28 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	3318      	adds	r3, #24
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe ffbe 	bl	8006aa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	4b25      	ldr	r3, [pc, #148]	; (8007bc4 <xTaskIncrementTick+0x168>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d903      	bls.n	8007b3c <xTaskIncrementTick+0xe0>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	4a22      	ldr	r2, [pc, #136]	; (8007bc4 <xTaskIncrementTick+0x168>)
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4a1f      	ldr	r2, [pc, #124]	; (8007bc8 <xTaskIncrementTick+0x16c>)
 8007b4a:	441a      	add	r2, r3
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f7fe ff49 	bl	80069ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <xTaskIncrementTick+0x170>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d3b3      	bcc.n	8007ace <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007b66:	2301      	movs	r3, #1
 8007b68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6a:	e7b0      	b.n	8007ace <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b6c:	4b17      	ldr	r3, [pc, #92]	; (8007bcc <xTaskIncrementTick+0x170>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	4915      	ldr	r1, [pc, #84]	; (8007bc8 <xTaskIncrementTick+0x16c>)
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d907      	bls.n	8007b94 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007b84:	2301      	movs	r3, #1
 8007b86:	617b      	str	r3, [r7, #20]
 8007b88:	e004      	b.n	8007b94 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b8a:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <xTaskIncrementTick+0x174>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	4a0f      	ldr	r2, [pc, #60]	; (8007bd0 <xTaskIncrementTick+0x174>)
 8007b92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <xTaskIncrementTick+0x178>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ba0:	697b      	ldr	r3, [r7, #20]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20001acc 	.word	0x20001acc
 8007bb0:	20001aa8 	.word	0x20001aa8
 8007bb4:	20001a5c 	.word	0x20001a5c
 8007bb8:	20001a60 	.word	0x20001a60
 8007bbc:	20001abc 	.word	0x20001abc
 8007bc0:	20001ac4 	.word	0x20001ac4
 8007bc4:	20001aac 	.word	0x20001aac
 8007bc8:	200015d4 	.word	0x200015d4
 8007bcc:	200015d0 	.word	0x200015d0
 8007bd0:	20001ab4 	.word	0x20001ab4
 8007bd4:	20001ab8 	.word	0x20001ab8

08007bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bde:	4b27      	ldr	r3, [pc, #156]	; (8007c7c <vTaskSwitchContext+0xa4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007be6:	4b26      	ldr	r3, [pc, #152]	; (8007c80 <vTaskSwitchContext+0xa8>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bec:	e040      	b.n	8007c70 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007bee:	4b24      	ldr	r3, [pc, #144]	; (8007c80 <vTaskSwitchContext+0xa8>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007bf4:	4b23      	ldr	r3, [pc, #140]	; (8007c84 <vTaskSwitchContext+0xac>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	e00f      	b.n	8007c1c <vTaskSwitchContext+0x44>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <vTaskSwitchContext+0x3e>
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	e7fe      	b.n	8007c14 <vTaskSwitchContext+0x3c>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	491a      	ldr	r1, [pc, #104]	; (8007c88 <vTaskSwitchContext+0xb0>)
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0e5      	beq.n	8007bfc <vTaskSwitchContext+0x24>
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4a13      	ldr	r2, [pc, #76]	; (8007c88 <vTaskSwitchContext+0xb0>)
 8007c3c:	4413      	add	r3, r2
 8007c3e:	60bb      	str	r3, [r7, #8]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	3308      	adds	r3, #8
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d104      	bne.n	8007c60 <vTaskSwitchContext+0x88>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	605a      	str	r2, [r3, #4]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4a09      	ldr	r2, [pc, #36]	; (8007c8c <vTaskSwitchContext+0xb4>)
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	4a06      	ldr	r2, [pc, #24]	; (8007c84 <vTaskSwitchContext+0xac>)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6013      	str	r3, [r2, #0]
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	20001acc 	.word	0x20001acc
 8007c80:	20001ab8 	.word	0x20001ab8
 8007c84:	20001aac 	.word	0x20001aac
 8007c88:	200015d4 	.word	0x200015d4
 8007c8c:	200015d0 	.word	0x200015d0

08007c90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d109      	bne.n	8007cb4 <vTaskPlaceOnEventList+0x24>
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	e7fe      	b.n	8007cb2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cb4:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <vTaskPlaceOnEventList+0x44>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3318      	adds	r3, #24
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fe feb8 	bl	8006a32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	6838      	ldr	r0, [r7, #0]
 8007cc6:	f000 fa77 	bl	80081b8 <prvAddCurrentTaskToDelayedList>
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200015d0 	.word	0x200015d0

08007cd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <vTaskPlaceOnEventListRestricted+0x26>
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	e7fe      	b.n	8007cfc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <vTaskPlaceOnEventListRestricted+0x50>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3318      	adds	r3, #24
 8007d04:	4619      	mov	r1, r3
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7fe fe6f 	bl	80069ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295
 8007d16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	68b8      	ldr	r0, [r7, #8]
 8007d1c:	f000 fa4c 	bl	80081b8 <prvAddCurrentTaskToDelayedList>
	}
 8007d20:	bf00      	nop
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	200015d0 	.word	0x200015d0

08007d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <xTaskRemoveFromEventList+0x2a>
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e7fe      	b.n	8007d54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	3318      	adds	r3, #24
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fea2 	bl	8006aa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d60:	4b1d      	ldr	r3, [pc, #116]	; (8007dd8 <xTaskRemoveFromEventList+0xac>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11d      	bne.n	8007da4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe fe99 	bl	8006aa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d76:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <xTaskRemoveFromEventList+0xb0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d903      	bls.n	8007d86 <xTaskRemoveFromEventList+0x5a>
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <xTaskRemoveFromEventList+0xb0>)
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <xTaskRemoveFromEventList+0xb4>)
 8007d94:	441a      	add	r2, r3
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	f7fe fe24 	bl	80069ea <vListInsertEnd>
 8007da2:	e005      	b.n	8007db0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	3318      	adds	r3, #24
 8007da8:	4619      	mov	r1, r3
 8007daa:	480e      	ldr	r0, [pc, #56]	; (8007de4 <xTaskRemoveFromEventList+0xb8>)
 8007dac:	f7fe fe1d 	bl	80069ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db4:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <xTaskRemoveFromEventList+0xbc>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d905      	bls.n	8007dca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <xTaskRemoveFromEventList+0xc0>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e001      	b.n	8007dce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007dce:	697b      	ldr	r3, [r7, #20]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20001acc 	.word	0x20001acc
 8007ddc:	20001aac 	.word	0x20001aac
 8007de0:	200015d4 	.word	0x200015d4
 8007de4:	20001a64 	.word	0x20001a64
 8007de8:	200015d0 	.word	0x200015d0
 8007dec:	20001ab8 	.word	0x20001ab8

08007df0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <vTaskInternalSetTimeOutState+0x24>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <vTaskInternalSetTimeOutState+0x28>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	605a      	str	r2, [r3, #4]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	20001abc 	.word	0x20001abc
 8007e18:	20001aa8 	.word	0x20001aa8

08007e1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d109      	bne.n	8007e40 <xTaskCheckForTimeOut+0x24>
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	613b      	str	r3, [r7, #16]
 8007e3e:	e7fe      	b.n	8007e3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <xTaskCheckForTimeOut+0x3e>
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	e7fe      	b.n	8007e58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007e5a:	f000 fe2f 	bl	8008abc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e5e:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <xTaskCheckForTimeOut+0xb8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d102      	bne.n	8007e7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	e023      	b.n	8007ec6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <xTaskCheckForTimeOut+0xbc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d007      	beq.n	8007e9a <xTaskCheckForTimeOut+0x7e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d302      	bcc.n	8007e9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	61fb      	str	r3, [r7, #28]
 8007e98:	e015      	b.n	8007ec6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d20b      	bcs.n	8007ebc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff ff9d 	bl	8007df0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	e004      	b.n	8007ec6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ec6:	f000 fe27 	bl	8008b18 <vPortExitCritical>

	return xReturn;
 8007eca:	69fb      	ldr	r3, [r7, #28]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20001aa8 	.word	0x20001aa8
 8007ed8:	20001abc 	.word	0x20001abc

08007edc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ee0:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <vTaskMissedYield+0x14>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20001ab8 	.word	0x20001ab8

08007ef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007efc:	f000 f852 	bl	8007fa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f00:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <prvIdleTask+0x28>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d9f9      	bls.n	8007efc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <prvIdleTask+0x2c>)
 8007f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f18:	e7f0      	b.n	8007efc <prvIdleTask+0x8>
 8007f1a:	bf00      	nop
 8007f1c:	200015d4 	.word	0x200015d4
 8007f20:	e000ed04 	.word	0xe000ed04

08007f24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	e00c      	b.n	8007f4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4a12      	ldr	r2, [pc, #72]	; (8007f84 <prvInitialiseTaskLists+0x60>)
 8007f3c:	4413      	add	r3, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fd26 	bl	8006990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3301      	adds	r3, #1
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b37      	cmp	r3, #55	; 0x37
 8007f4e:	d9ef      	bls.n	8007f30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f50:	480d      	ldr	r0, [pc, #52]	; (8007f88 <prvInitialiseTaskLists+0x64>)
 8007f52:	f7fe fd1d 	bl	8006990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f56:	480d      	ldr	r0, [pc, #52]	; (8007f8c <prvInitialiseTaskLists+0x68>)
 8007f58:	f7fe fd1a 	bl	8006990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f5c:	480c      	ldr	r0, [pc, #48]	; (8007f90 <prvInitialiseTaskLists+0x6c>)
 8007f5e:	f7fe fd17 	bl	8006990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f62:	480c      	ldr	r0, [pc, #48]	; (8007f94 <prvInitialiseTaskLists+0x70>)
 8007f64:	f7fe fd14 	bl	8006990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f68:	480b      	ldr	r0, [pc, #44]	; (8007f98 <prvInitialiseTaskLists+0x74>)
 8007f6a:	f7fe fd11 	bl	8006990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <prvInitialiseTaskLists+0x78>)
 8007f70:	4a05      	ldr	r2, [pc, #20]	; (8007f88 <prvInitialiseTaskLists+0x64>)
 8007f72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f74:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <prvInitialiseTaskLists+0x7c>)
 8007f76:	4a05      	ldr	r2, [pc, #20]	; (8007f8c <prvInitialiseTaskLists+0x68>)
 8007f78:	601a      	str	r2, [r3, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	200015d4 	.word	0x200015d4
 8007f88:	20001a34 	.word	0x20001a34
 8007f8c:	20001a48 	.word	0x20001a48
 8007f90:	20001a64 	.word	0x20001a64
 8007f94:	20001a78 	.word	0x20001a78
 8007f98:	20001a90 	.word	0x20001a90
 8007f9c:	20001a5c 	.word	0x20001a5c
 8007fa0:	20001a60 	.word	0x20001a60

08007fa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007faa:	e019      	b.n	8007fe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fac:	f000 fd86 	bl	8008abc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <prvCheckTasksWaitingTermination+0x4c>)
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fd71 	bl	8006aa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	; (8007ff4 <prvCheckTasksWaitingTermination+0x50>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	4a0a      	ldr	r2, [pc, #40]	; (8007ff4 <prvCheckTasksWaitingTermination+0x50>)
 8007fca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <prvCheckTasksWaitingTermination+0x54>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <prvCheckTasksWaitingTermination+0x54>)
 8007fd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fd6:	f000 fd9f 	bl	8008b18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f80e 	bl	8007ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <prvCheckTasksWaitingTermination+0x54>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1e1      	bne.n	8007fac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20001a78 	.word	0x20001a78
 8007ff4:	20001aa4 	.word	0x20001aa4
 8007ff8:	20001a8c 	.word	0x20001a8c

08007ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800800a:	2b00      	cmp	r3, #0
 800800c:	d108      	bne.n	8008020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	4618      	mov	r0, r3
 8008014:	f000 ff2e 	bl	8008e74 <vPortFree>
				vPortFree( pxTCB );
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 ff2b 	bl	8008e74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800801e:	e017      	b.n	8008050 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008026:	2b01      	cmp	r3, #1
 8008028:	d103      	bne.n	8008032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 ff22 	bl	8008e74 <vPortFree>
	}
 8008030:	e00e      	b.n	8008050 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008038:	2b02      	cmp	r3, #2
 800803a:	d009      	beq.n	8008050 <prvDeleteTCB+0x54>
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e7fe      	b.n	800804e <prvDeleteTCB+0x52>
	}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <prvResetNextTaskUnblockTime+0x44>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <prvResetNextTaskUnblockTime+0x14>
 8008068:	2301      	movs	r3, #1
 800806a:	e000      	b.n	800806e <prvResetNextTaskUnblockTime+0x16>
 800806c:	2300      	movs	r3, #0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008072:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <prvResetNextTaskUnblockTime+0x48>)
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800807a:	e008      	b.n	800808e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800807c:	4b07      	ldr	r3, [pc, #28]	; (800809c <prvResetNextTaskUnblockTime+0x44>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	4a05      	ldr	r2, [pc, #20]	; (80080a0 <prvResetNextTaskUnblockTime+0x48>)
 800808c:	6013      	str	r3, [r2, #0]
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20001a5c 	.word	0x20001a5c
 80080a0:	20001ac4 	.word	0x20001ac4

080080a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080aa:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <xTaskGetSchedulerState+0x34>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080b2:	2301      	movs	r3, #1
 80080b4:	607b      	str	r3, [r7, #4]
 80080b6:	e008      	b.n	80080ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b8:	4b08      	ldr	r3, [pc, #32]	; (80080dc <xTaskGetSchedulerState+0x38>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d102      	bne.n	80080c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080c0:	2302      	movs	r3, #2
 80080c2:	607b      	str	r3, [r7, #4]
 80080c4:	e001      	b.n	80080ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080c6:	2300      	movs	r3, #0
 80080c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080ca:	687b      	ldr	r3, [r7, #4]
	}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	20001ab0 	.word	0x20001ab0
 80080dc:	20001acc 	.word	0x20001acc

080080e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d054      	beq.n	80081a0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080f6:	4b2d      	ldr	r3, [pc, #180]	; (80081ac <xTaskPriorityDisinherit+0xcc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d009      	beq.n	8008114 <xTaskPriorityDisinherit+0x34>
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e7fe      	b.n	8008112 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <xTaskPriorityDisinherit+0x50>
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	e7fe      	b.n	800812e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	1e5a      	subs	r2, r3, #1
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008142:	429a      	cmp	r2, r3
 8008144:	d02c      	beq.n	80081a0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814a:	2b00      	cmp	r3, #0
 800814c:	d128      	bne.n	80081a0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	3304      	adds	r3, #4
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fca6 	bl	8006aa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008170:	4b0f      	ldr	r3, [pc, #60]	; (80081b0 <xTaskPriorityDisinherit+0xd0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d903      	bls.n	8008180 <xTaskPriorityDisinherit+0xa0>
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	4a0c      	ldr	r2, [pc, #48]	; (80081b0 <xTaskPriorityDisinherit+0xd0>)
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4a09      	ldr	r2, [pc, #36]	; (80081b4 <xTaskPriorityDisinherit+0xd4>)
 800818e:	441a      	add	r2, r3
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	3304      	adds	r3, #4
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f7fe fc27 	bl	80069ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081a0:	697b      	ldr	r3, [r7, #20]
	}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	200015d0 	.word	0x200015d0
 80081b0:	20001aac 	.word	0x20001aac
 80081b4:	200015d4 	.word	0x200015d4

080081b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081c2:	4b21      	ldr	r3, [pc, #132]	; (8008248 <prvAddCurrentTaskToDelayedList+0x90>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081c8:	4b20      	ldr	r3, [pc, #128]	; (800824c <prvAddCurrentTaskToDelayedList+0x94>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe fc68 	bl	8006aa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081da:	d10a      	bne.n	80081f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d007      	beq.n	80081f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081e2:	4b1a      	ldr	r3, [pc, #104]	; (800824c <prvAddCurrentTaskToDelayedList+0x94>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4819      	ldr	r0, [pc, #100]	; (8008250 <prvAddCurrentTaskToDelayedList+0x98>)
 80081ec:	f7fe fbfd 	bl	80069ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081f0:	e026      	b.n	8008240 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4413      	add	r3, r2
 80081f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <prvAddCurrentTaskToDelayedList+0x94>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	429a      	cmp	r2, r3
 8008208:	d209      	bcs.n	800821e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800820a:	4b12      	ldr	r3, [pc, #72]	; (8008254 <prvAddCurrentTaskToDelayedList+0x9c>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4b0f      	ldr	r3, [pc, #60]	; (800824c <prvAddCurrentTaskToDelayedList+0x94>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7fe fc0b 	bl	8006a32 <vListInsert>
}
 800821c:	e010      	b.n	8008240 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800821e:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b0a      	ldr	r3, [pc, #40]	; (800824c <prvAddCurrentTaskToDelayedList+0x94>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3304      	adds	r3, #4
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f7fe fc01 	bl	8006a32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008230:	4b0a      	ldr	r3, [pc, #40]	; (800825c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	429a      	cmp	r2, r3
 8008238:	d202      	bcs.n	8008240 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800823a:	4a08      	ldr	r2, [pc, #32]	; (800825c <prvAddCurrentTaskToDelayedList+0xa4>)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6013      	str	r3, [r2, #0]
}
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20001aa8 	.word	0x20001aa8
 800824c:	200015d0 	.word	0x200015d0
 8008250:	20001a90 	.word	0x20001a90
 8008254:	20001a60 	.word	0x20001a60
 8008258:	20001a5c 	.word	0x20001a5c
 800825c:	20001ac4 	.word	0x20001ac4

08008260 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08a      	sub	sp, #40	; 0x28
 8008264:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800826a:	f000 fac3 	bl	80087f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800826e:	4b1c      	ldr	r3, [pc, #112]	; (80082e0 <xTimerCreateTimerTask+0x80>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d021      	beq.n	80082ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800827e:	1d3a      	adds	r2, r7, #4
 8008280:	f107 0108 	add.w	r1, r7, #8
 8008284:	f107 030c 	add.w	r3, r7, #12
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fb67 	bl	800695c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	9202      	str	r2, [sp, #8]
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	2302      	movs	r3, #2
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2300      	movs	r3, #0
 800829e:	460a      	mov	r2, r1
 80082a0:	4910      	ldr	r1, [pc, #64]	; (80082e4 <xTimerCreateTimerTask+0x84>)
 80082a2:	4811      	ldr	r0, [pc, #68]	; (80082e8 <xTimerCreateTimerTask+0x88>)
 80082a4:	f7ff f938 	bl	8007518 <xTaskCreateStatic>
 80082a8:	4602      	mov	r2, r0
 80082aa:	4b10      	ldr	r3, [pc, #64]	; (80082ec <xTimerCreateTimerTask+0x8c>)
 80082ac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <xTimerCreateTimerTask+0x8c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082b6:	2301      	movs	r3, #1
 80082b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d109      	bne.n	80082d4 <xTimerCreateTimerTask+0x74>
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	613b      	str	r3, [r7, #16]
 80082d2:	e7fe      	b.n	80082d2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80082d4:	697b      	ldr	r3, [r7, #20]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20001b00 	.word	0x20001b00
 80082e4:	0800dcb4 	.word	0x0800dcb4
 80082e8:	08008409 	.word	0x08008409
 80082ec:	20001b04 	.word	0x20001b04

080082f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082fe:	2300      	movs	r3, #0
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d109      	bne.n	800831c <xTimerGenericCommand+0x2c>
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	623b      	str	r3, [r7, #32]
 800831a:	e7fe      	b.n	800831a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800831c:	4b19      	ldr	r3, [pc, #100]	; (8008384 <xTimerGenericCommand+0x94>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d02a      	beq.n	800837a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b05      	cmp	r3, #5
 8008334:	dc18      	bgt.n	8008368 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008336:	f7ff feb5 	bl	80080a4 <xTaskGetSchedulerState>
 800833a:	4603      	mov	r3, r0
 800833c:	2b02      	cmp	r3, #2
 800833e:	d109      	bne.n	8008354 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008340:	4b10      	ldr	r3, [pc, #64]	; (8008384 <xTimerGenericCommand+0x94>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	f107 0110 	add.w	r1, r7, #16
 8008348:	2300      	movs	r3, #0
 800834a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800834c:	f7fe fd0e 	bl	8006d6c <xQueueGenericSend>
 8008350:	6278      	str	r0, [r7, #36]	; 0x24
 8008352:	e012      	b.n	800837a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008354:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <xTimerGenericCommand+0x94>)
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	f107 0110 	add.w	r1, r7, #16
 800835c:	2300      	movs	r3, #0
 800835e:	2200      	movs	r2, #0
 8008360:	f7fe fd04 	bl	8006d6c <xQueueGenericSend>
 8008364:	6278      	str	r0, [r7, #36]	; 0x24
 8008366:	e008      	b.n	800837a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <xTimerGenericCommand+0x94>)
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	f107 0110 	add.w	r1, r7, #16
 8008370:	2300      	movs	r3, #0
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	f7fe fdf4 	bl	8006f60 <xQueueGenericSendFromISR>
 8008378:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800837c:	4618      	mov	r0, r3
 800837e:	3728      	adds	r7, #40	; 0x28
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20001b00 	.word	0x20001b00

08008388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af02      	add	r7, sp, #8
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008392:	4b1c      	ldr	r3, [pc, #112]	; (8008404 <prvProcessExpiredTimer+0x7c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	3304      	adds	r3, #4
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fb7f 	bl	8006aa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d121      	bne.n	80083f2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	699a      	ldr	r2, [r3, #24]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	18d1      	adds	r1, r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	6978      	ldr	r0, [r7, #20]
 80083bc:	f000 f8c8 	bl	8008550 <prvInsertTimerInActiveList>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d015      	beq.n	80083f2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083c6:	2300      	movs	r3, #0
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	2300      	movs	r3, #0
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	2100      	movs	r1, #0
 80083d0:	6978      	ldr	r0, [r7, #20]
 80083d2:	f7ff ff8d 	bl	80082f0 <xTimerGenericCommand>
 80083d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <prvProcessExpiredTimer+0x6a>
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e7fe      	b.n	80083f0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	4798      	blx	r3
}
 80083fa:	bf00      	nop
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20001af8 	.word	0x20001af8

08008408 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008410:	f107 0308 	add.w	r3, r7, #8
 8008414:	4618      	mov	r0, r3
 8008416:	f000 f857 	bl	80084c8 <prvGetNextExpireTime>
 800841a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4619      	mov	r1, r3
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f803 	bl	800842c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008426:	f000 f8d5 	bl	80085d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800842a:	e7f1      	b.n	8008410 <prvTimerTask+0x8>

0800842c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008436:	f7ff fa57 	bl	80078e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800843a:	f107 0308 	add.w	r3, r7, #8
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f866 	bl	8008510 <prvSampleTimeNow>
 8008444:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d130      	bne.n	80084ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <prvProcessTimerOrBlockTask+0x3c>
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	429a      	cmp	r2, r3
 8008458:	d806      	bhi.n	8008468 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800845a:	f7ff fa53 	bl	8007904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff ff91 	bl	8008388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008466:	e024      	b.n	80084b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d008      	beq.n	8008480 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800846e:	4b13      	ldr	r3, [pc, #76]	; (80084bc <prvProcessTimerOrBlockTask+0x90>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bf0c      	ite	eq
 8008478:	2301      	moveq	r3, #1
 800847a:	2300      	movne	r3, #0
 800847c:	b2db      	uxtb	r3, r3
 800847e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008480:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <prvProcessTimerOrBlockTask+0x94>)
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4619      	mov	r1, r3
 800848e:	f7ff f80f 	bl	80074b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008492:	f7ff fa37 	bl	8007904 <xTaskResumeAll>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <prvProcessTimerOrBlockTask+0x98>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	f3bf 8f6f 	isb	sy
}
 80084ac:	e001      	b.n	80084b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084ae:	f7ff fa29 	bl	8007904 <xTaskResumeAll>
}
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20001afc 	.word	0x20001afc
 80084c0:	20001b00 	.word	0x20001b00
 80084c4:	e000ed04 	.word	0xe000ed04

080084c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084d0:	4b0e      	ldr	r3, [pc, #56]	; (800850c <prvGetNextExpireTime+0x44>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bf0c      	ite	eq
 80084da:	2301      	moveq	r3, #1
 80084dc:	2300      	movne	r3, #0
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084ee:	4b07      	ldr	r3, [pc, #28]	; (800850c <prvGetNextExpireTime+0x44>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e001      	b.n	80084fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084fe:	68fb      	ldr	r3, [r7, #12]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	20001af8 	.word	0x20001af8

08008510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008518:	f7ff fa90 	bl	8007a3c <xTaskGetTickCount>
 800851c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <prvSampleTimeNow+0x3c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	429a      	cmp	r2, r3
 8008526:	d205      	bcs.n	8008534 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008528:	f000 f904 	bl	8008734 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	e002      	b.n	800853a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800853a:	4a04      	ldr	r2, [pc, #16]	; (800854c <prvSampleTimeNow+0x3c>)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008540:	68fb      	ldr	r3, [r7, #12]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20001b08 	.word	0x20001b08

08008550 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	429a      	cmp	r2, r3
 8008574:	d812      	bhi.n	800859c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	1ad2      	subs	r2, r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	429a      	cmp	r2, r3
 8008582:	d302      	bcc.n	800858a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	e01b      	b.n	80085c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800858a:	4b10      	ldr	r3, [pc, #64]	; (80085cc <prvInsertTimerInActiveList+0x7c>)
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3304      	adds	r3, #4
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f7fe fa4c 	bl	8006a32 <vListInsert>
 800859a:	e012      	b.n	80085c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d206      	bcs.n	80085b2 <prvInsertTimerInActiveList+0x62>
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d302      	bcc.n	80085b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085ac:	2301      	movs	r3, #1
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	e007      	b.n	80085c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085b2:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <prvInsertTimerInActiveList+0x80>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f7fe fa38 	bl	8006a32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085c2:	697b      	ldr	r3, [r7, #20]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20001afc 	.word	0x20001afc
 80085d0:	20001af8 	.word	0x20001af8

080085d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08e      	sub	sp, #56	; 0x38
 80085d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085da:	e099      	b.n	8008710 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	da17      	bge.n	8008612 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085e2:	1d3b      	adds	r3, r7, #4
 80085e4:	3304      	adds	r3, #4
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d109      	bne.n	8008602 <prvProcessReceivedCommands+0x2e>
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e7fe      	b.n	8008600 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008608:	6850      	ldr	r0, [r2, #4]
 800860a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800860c:	6892      	ldr	r2, [r2, #8]
 800860e:	4611      	mov	r1, r2
 8008610:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	db7a      	blt.n	800870e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d004      	beq.n	800862e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe fa3b 	bl	8006aa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800862e:	463b      	mov	r3, r7
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff ff6d 	bl	8008510 <prvSampleTimeNow>
 8008636:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b09      	cmp	r3, #9
 800863c:	d868      	bhi.n	8008710 <prvProcessReceivedCommands+0x13c>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <prvProcessReceivedCommands+0x70>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	0800866d 	.word	0x0800866d
 8008648:	0800866d 	.word	0x0800866d
 800864c:	0800866d 	.word	0x0800866d
 8008650:	08008711 	.word	0x08008711
 8008654:	080086c7 	.word	0x080086c7
 8008658:	080086fd 	.word	0x080086fd
 800865c:	0800866d 	.word	0x0800866d
 8008660:	0800866d 	.word	0x0800866d
 8008664:	08008711 	.word	0x08008711
 8008668:	080086c7 	.word	0x080086c7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	18d1      	adds	r1, r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800867a:	f7ff ff69 	bl	8008550 <prvInsertTimerInActiveList>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d045      	beq.n	8008710 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800868a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d13d      	bne.n	8008710 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	441a      	add	r2, r3
 800869c:	2300      	movs	r3, #0
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	2300      	movs	r3, #0
 80086a2:	2100      	movs	r1, #0
 80086a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a6:	f7ff fe23 	bl	80082f0 <xTimerGenericCommand>
 80086aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d12e      	bne.n	8008710 <prvProcessReceivedCommands+0x13c>
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	61bb      	str	r3, [r7, #24]
 80086c4:	e7fe      	b.n	80086c4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d109      	bne.n	80086e8 <prvProcessReceivedCommands+0x114>
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e7fe      	b.n	80086e6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	18d1      	adds	r1, r2, r3
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f6:	f7ff ff2b 	bl	8008550 <prvInsertTimerInActiveList>
					break;
 80086fa:	e009      	b.n	8008710 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d104      	bne.n	8008710 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008708:	f000 fbb4 	bl	8008e74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800870c:	e000      	b.n	8008710 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800870e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <prvProcessReceivedCommands+0x15c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	1d39      	adds	r1, r7, #4
 8008716:	2200      	movs	r2, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fcb5 	bl	8007088 <xQueueReceive>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	f47f af5b 	bne.w	80085dc <prvProcessReceivedCommands+0x8>
	}
}
 8008726:	bf00      	nop
 8008728:	3730      	adds	r7, #48	; 0x30
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20001b00 	.word	0x20001b00

08008734 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800873a:	e044      	b.n	80087c6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800873c:	4b2b      	ldr	r3, [pc, #172]	; (80087ec <prvSwitchTimerLists+0xb8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008746:	4b29      	ldr	r3, [pc, #164]	; (80087ec <prvSwitchTimerLists+0xb8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3304      	adds	r3, #4
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe f9a5 	bl	8006aa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d12d      	bne.n	80087c6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4413      	add	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	429a      	cmp	r2, r3
 800877a:	d90e      	bls.n	800879a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008788:	4b18      	ldr	r3, [pc, #96]	; (80087ec <prvSwitchTimerLists+0xb8>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3304      	adds	r3, #4
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f7fe f94d 	bl	8006a32 <vListInsert>
 8008798:	e015      	b.n	80087c6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800879a:	2300      	movs	r3, #0
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	2300      	movs	r3, #0
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	2100      	movs	r1, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff fda3 	bl	80082f0 <xTimerGenericCommand>
 80087aa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d109      	bne.n	80087c6 <prvSwitchTimerLists+0x92>
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	603b      	str	r3, [r7, #0]
 80087c4:	e7fe      	b.n	80087c4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <prvSwitchTimerLists+0xb8>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1b5      	bne.n	800873c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <prvSwitchTimerLists+0xb8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087d6:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <prvSwitchTimerLists+0xbc>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a04      	ldr	r2, [pc, #16]	; (80087ec <prvSwitchTimerLists+0xb8>)
 80087dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087de:	4a04      	ldr	r2, [pc, #16]	; (80087f0 <prvSwitchTimerLists+0xbc>)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	6013      	str	r3, [r2, #0]
}
 80087e4:	bf00      	nop
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20001af8 	.word	0x20001af8
 80087f0:	20001afc 	.word	0x20001afc

080087f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087fa:	f000 f95f 	bl	8008abc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087fe:	4b15      	ldr	r3, [pc, #84]	; (8008854 <prvCheckForValidListAndQueue+0x60>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d120      	bne.n	8008848 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008806:	4814      	ldr	r0, [pc, #80]	; (8008858 <prvCheckForValidListAndQueue+0x64>)
 8008808:	f7fe f8c2 	bl	8006990 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800880c:	4813      	ldr	r0, [pc, #76]	; (800885c <prvCheckForValidListAndQueue+0x68>)
 800880e:	f7fe f8bf 	bl	8006990 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008812:	4b13      	ldr	r3, [pc, #76]	; (8008860 <prvCheckForValidListAndQueue+0x6c>)
 8008814:	4a10      	ldr	r2, [pc, #64]	; (8008858 <prvCheckForValidListAndQueue+0x64>)
 8008816:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008818:	4b12      	ldr	r3, [pc, #72]	; (8008864 <prvCheckForValidListAndQueue+0x70>)
 800881a:	4a10      	ldr	r2, [pc, #64]	; (800885c <prvCheckForValidListAndQueue+0x68>)
 800881c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800881e:	2300      	movs	r3, #0
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	4b11      	ldr	r3, [pc, #68]	; (8008868 <prvCheckForValidListAndQueue+0x74>)
 8008824:	4a11      	ldr	r2, [pc, #68]	; (800886c <prvCheckForValidListAndQueue+0x78>)
 8008826:	2110      	movs	r1, #16
 8008828:	200a      	movs	r0, #10
 800882a:	f7fe f9cd 	bl	8006bc8 <xQueueGenericCreateStatic>
 800882e:	4602      	mov	r2, r0
 8008830:	4b08      	ldr	r3, [pc, #32]	; (8008854 <prvCheckForValidListAndQueue+0x60>)
 8008832:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008834:	4b07      	ldr	r3, [pc, #28]	; (8008854 <prvCheckForValidListAndQueue+0x60>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <prvCheckForValidListAndQueue+0x60>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	490b      	ldr	r1, [pc, #44]	; (8008870 <prvCheckForValidListAndQueue+0x7c>)
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fe0c 	bl	8007460 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008848:	f000 f966 	bl	8008b18 <vPortExitCritical>
}
 800884c:	bf00      	nop
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20001b00 	.word	0x20001b00
 8008858:	20001ad0 	.word	0x20001ad0
 800885c:	20001ae4 	.word	0x20001ae4
 8008860:	20001af8 	.word	0x20001af8
 8008864:	20001afc 	.word	0x20001afc
 8008868:	20001bac 	.word	0x20001bac
 800886c:	20001b0c 	.word	0x20001b0c
 8008870:	0800dcbc 	.word	0x0800dcbc

08008874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3b04      	subs	r3, #4
 8008884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800888c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3b04      	subs	r3, #4
 8008892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f023 0201 	bic.w	r2, r3, #1
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088a4:	4a0c      	ldr	r2, [pc, #48]	; (80088d8 <pxPortInitialiseStack+0x64>)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3b14      	subs	r3, #20
 80088ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3b04      	subs	r3, #4
 80088ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f06f 0202 	mvn.w	r2, #2
 80088c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3b20      	subs	r3, #32
 80088c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088ca:	68fb      	ldr	r3, [r7, #12]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	080088dd 	.word	0x080088dd

080088dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088e6:	4b11      	ldr	r3, [pc, #68]	; (800892c <prvTaskExitError+0x50>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d009      	beq.n	8008904 <prvTaskExitError+0x28>
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	e7fe      	b.n	8008902 <prvTaskExitError+0x26>
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008916:	bf00      	nop
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0fc      	beq.n	8008918 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800891e:	bf00      	nop
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	2000002c 	.word	0x2000002c

08008930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <pxCurrentTCBConst2>)
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	6808      	ldr	r0, [r1, #0]
 8008936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893a:	f380 8809 	msr	PSP, r0
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f380 8811 	msr	BASEPRI, r0
 800894a:	4770      	bx	lr
 800894c:	f3af 8000 	nop.w

08008950 <pxCurrentTCBConst2>:
 8008950:	200015d0 	.word	0x200015d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop

08008958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008958:	4808      	ldr	r0, [pc, #32]	; (800897c <prvPortStartFirstTask+0x24>)
 800895a:	6800      	ldr	r0, [r0, #0]
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	f380 8808 	msr	MSP, r0
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8814 	msr	CONTROL, r0
 800896a:	b662      	cpsie	i
 800896c:	b661      	cpsie	f
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	df00      	svc	0
 8008978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800897a:	bf00      	nop
 800897c:	e000ed08 	.word	0xe000ed08

08008980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008986:	4b44      	ldr	r3, [pc, #272]	; (8008a98 <xPortStartScheduler+0x118>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a44      	ldr	r2, [pc, #272]	; (8008a9c <xPortStartScheduler+0x11c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d109      	bne.n	80089a4 <xPortStartScheduler+0x24>
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	e7fe      	b.n	80089a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089a4:	4b3c      	ldr	r3, [pc, #240]	; (8008a98 <xPortStartScheduler+0x118>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a3d      	ldr	r2, [pc, #244]	; (8008aa0 <xPortStartScheduler+0x120>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d109      	bne.n	80089c2 <xPortStartScheduler+0x42>
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e7fe      	b.n	80089c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089c2:	4b38      	ldr	r3, [pc, #224]	; (8008aa4 <xPortStartScheduler+0x124>)
 80089c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	22ff      	movs	r2, #255	; 0xff
 80089d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	4b30      	ldr	r3, [pc, #192]	; (8008aa8 <xPortStartScheduler+0x128>)
 80089e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089ea:	4b30      	ldr	r3, [pc, #192]	; (8008aac <xPortStartScheduler+0x12c>)
 80089ec:	2207      	movs	r2, #7
 80089ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089f0:	e009      	b.n	8008a06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80089f2:	4b2e      	ldr	r3, [pc, #184]	; (8008aac <xPortStartScheduler+0x12c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	4a2c      	ldr	r2, [pc, #176]	; (8008aac <xPortStartScheduler+0x12c>)
 80089fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0e:	2b80      	cmp	r3, #128	; 0x80
 8008a10:	d0ef      	beq.n	80089f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a12:	4b26      	ldr	r3, [pc, #152]	; (8008aac <xPortStartScheduler+0x12c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f1c3 0307 	rsb	r3, r3, #7
 8008a1a:	2b04      	cmp	r3, #4
 8008a1c:	d009      	beq.n	8008a32 <xPortStartScheduler+0xb2>
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
 8008a30:	e7fe      	b.n	8008a30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a32:	4b1e      	ldr	r3, [pc, #120]	; (8008aac <xPortStartScheduler+0x12c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	4a1c      	ldr	r2, [pc, #112]	; (8008aac <xPortStartScheduler+0x12c>)
 8008a3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a3c:	4b1b      	ldr	r3, [pc, #108]	; (8008aac <xPortStartScheduler+0x12c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a44:	4a19      	ldr	r2, [pc, #100]	; (8008aac <xPortStartScheduler+0x12c>)
 8008a46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a50:	4b17      	ldr	r3, [pc, #92]	; (8008ab0 <xPortStartScheduler+0x130>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a16      	ldr	r2, [pc, #88]	; (8008ab0 <xPortStartScheduler+0x130>)
 8008a56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a5c:	4b14      	ldr	r3, [pc, #80]	; (8008ab0 <xPortStartScheduler+0x130>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <xPortStartScheduler+0x130>)
 8008a62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a68:	f000 f8d6 	bl	8008c18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a6c:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a72:	f000 f8f5 	bl	8008c60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a76:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a0f      	ldr	r2, [pc, #60]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a82:	f7ff ff69 	bl	8008958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a86:	f7ff f8a7 	bl	8007bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8008a8a:	f7ff ff27 	bl	80088dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	e000ed00 	.word	0xe000ed00
 8008a9c:	410fc271 	.word	0x410fc271
 8008aa0:	410fc270 	.word	0x410fc270
 8008aa4:	e000e400 	.word	0xe000e400
 8008aa8:	20001bfc 	.word	0x20001bfc
 8008aac:	20001c00 	.word	0x20001c00
 8008ab0:	e000ed20 	.word	0xe000ed20
 8008ab4:	2000002c 	.word	0x2000002c
 8008ab8:	e000ef34 	.word	0xe000ef34

08008abc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <vPortEnterCritical+0x54>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	4a0d      	ldr	r2, [pc, #52]	; (8008b10 <vPortEnterCritical+0x54>)
 8008adc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ade:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <vPortEnterCritical+0x54>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d10e      	bne.n	8008b04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <vPortEnterCritical+0x58>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <vPortEnterCritical+0x48>
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	603b      	str	r3, [r7, #0]
 8008b02:	e7fe      	b.n	8008b02 <vPortEnterCritical+0x46>
	}
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	2000002c 	.word	0x2000002c
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b1e:	4b11      	ldr	r3, [pc, #68]	; (8008b64 <vPortExitCritical+0x4c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <vPortExitCritical+0x22>
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	607b      	str	r3, [r7, #4]
 8008b38:	e7fe      	b.n	8008b38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008b3a:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <vPortExitCritical+0x4c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	4a08      	ldr	r2, [pc, #32]	; (8008b64 <vPortExitCritical+0x4c>)
 8008b42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b44:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <vPortExitCritical+0x4c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <vPortExitCritical+0x3e>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	2000002c 	.word	0x2000002c
	...

08008b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b70:	f3ef 8009 	mrs	r0, PSP
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <pxCurrentTCBConst>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	f01e 0f10 	tst.w	lr, #16
 8008b80:	bf08      	it	eq
 8008b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	6010      	str	r0, [r2, #0]
 8008b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b94:	f380 8811 	msr	BASEPRI, r0
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f7ff f81a 	bl	8007bd8 <vTaskSwitchContext>
 8008ba4:	f04f 0000 	mov.w	r0, #0
 8008ba8:	f380 8811 	msr	BASEPRI, r0
 8008bac:	bc09      	pop	{r0, r3}
 8008bae:	6819      	ldr	r1, [r3, #0]
 8008bb0:	6808      	ldr	r0, [r1, #0]
 8008bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb6:	f01e 0f10 	tst.w	lr, #16
 8008bba:	bf08      	it	eq
 8008bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bc0:	f380 8809 	msr	PSP, r0
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	f3af 8000 	nop.w

08008bd0 <pxCurrentTCBConst>:
 8008bd0:	200015d0 	.word	0x200015d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop

08008bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bf0:	f7fe ff34 	bl	8007a5c <xTaskIncrementTick>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <SysTick_Handler+0x3c>)
 8008bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	2300      	movs	r3, #0
 8008c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <vPortSetupTimerInterrupt+0x34>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c22:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <vPortSetupTimerInterrupt+0x38>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <vPortSetupTimerInterrupt+0x3c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a0a      	ldr	r2, [pc, #40]	; (8008c58 <vPortSetupTimerInterrupt+0x40>)
 8008c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c32:	099b      	lsrs	r3, r3, #6
 8008c34:	4a09      	ldr	r2, [pc, #36]	; (8008c5c <vPortSetupTimerInterrupt+0x44>)
 8008c36:	3b01      	subs	r3, #1
 8008c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c3a:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <vPortSetupTimerInterrupt+0x34>)
 8008c3c:	2207      	movs	r2, #7
 8008c3e:	601a      	str	r2, [r3, #0]
}
 8008c40:	bf00      	nop
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	e000e010 	.word	0xe000e010
 8008c50:	e000e018 	.word	0xe000e018
 8008c54:	20000008 	.word	0x20000008
 8008c58:	10624dd3 	.word	0x10624dd3
 8008c5c:	e000e014 	.word	0xe000e014

08008c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c70 <vPortEnableVFP+0x10>
 8008c64:	6801      	ldr	r1, [r0, #0]
 8008c66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c6a:	6001      	str	r1, [r0, #0]
 8008c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c6e:	bf00      	nop
 8008c70:	e000ed88 	.word	0xe000ed88

08008c74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c7a:	f3ef 8305 	mrs	r3, IPSR
 8008c7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b0f      	cmp	r3, #15
 8008c84:	d913      	bls.n	8008cae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c86:	4a16      	ldr	r2, [pc, #88]	; (8008ce0 <vPortValidateInterruptPriority+0x6c>)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c90:	4b14      	ldr	r3, [pc, #80]	; (8008ce4 <vPortValidateInterruptPriority+0x70>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	7afa      	ldrb	r2, [r7, #11]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d209      	bcs.n	8008cae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	607b      	str	r3, [r7, #4]
 8008cac:	e7fe      	b.n	8008cac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cae:	4b0e      	ldr	r3, [pc, #56]	; (8008ce8 <vPortValidateInterruptPriority+0x74>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cb6:	4b0d      	ldr	r3, [pc, #52]	; (8008cec <vPortValidateInterruptPriority+0x78>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d909      	bls.n	8008cd2 <vPortValidateInterruptPriority+0x5e>
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	e7fe      	b.n	8008cd0 <vPortValidateInterruptPriority+0x5c>
	}
 8008cd2:	bf00      	nop
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	e000e3f0 	.word	0xe000e3f0
 8008ce4:	20001bfc 	.word	0x20001bfc
 8008ce8:	e000ed0c 	.word	0xe000ed0c
 8008cec:	20001c00 	.word	0x20001c00

08008cf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08a      	sub	sp, #40	; 0x28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cfc:	f7fe fdf4 	bl	80078e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d00:	4b57      	ldr	r3, [pc, #348]	; (8008e60 <pvPortMalloc+0x170>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d08:	f000 f90c 	bl	8008f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d0c:	4b55      	ldr	r3, [pc, #340]	; (8008e64 <pvPortMalloc+0x174>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4013      	ands	r3, r2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 808c 	bne.w	8008e32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01c      	beq.n	8008d5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008d20:	2208      	movs	r2, #8
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4413      	add	r3, r2
 8008d26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d013      	beq.n	8008d5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f023 0307 	bic.w	r3, r3, #7
 8008d38:	3308      	adds	r3, #8
 8008d3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <pvPortMalloc+0x6a>
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e7fe      	b.n	8008d58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d068      	beq.n	8008e32 <pvPortMalloc+0x142>
 8008d60:	4b41      	ldr	r3, [pc, #260]	; (8008e68 <pvPortMalloc+0x178>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d863      	bhi.n	8008e32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d6a:	4b40      	ldr	r3, [pc, #256]	; (8008e6c <pvPortMalloc+0x17c>)
 8008d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d6e:	4b3f      	ldr	r3, [pc, #252]	; (8008e6c <pvPortMalloc+0x17c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d74:	e004      	b.n	8008d80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d903      	bls.n	8008d92 <pvPortMalloc+0xa2>
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f1      	bne.n	8008d76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d92:	4b33      	ldr	r3, [pc, #204]	; (8008e60 <pvPortMalloc+0x170>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d04a      	beq.n	8008e32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2208      	movs	r2, #8
 8008da2:	4413      	add	r3, r2
 8008da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	1ad2      	subs	r2, r2, r3
 8008db6:	2308      	movs	r3, #8
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d91e      	bls.n	8008dfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <pvPortMalloc+0xf4>
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	e7fe      	b.n	8008de2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	1ad2      	subs	r2, r2, r3
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008df6:	69b8      	ldr	r0, [r7, #24]
 8008df8:	f000 f8f6 	bl	8008fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dfc:	4b1a      	ldr	r3, [pc, #104]	; (8008e68 <pvPortMalloc+0x178>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <pvPortMalloc+0x178>)
 8008e08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e0a:	4b17      	ldr	r3, [pc, #92]	; (8008e68 <pvPortMalloc+0x178>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b18      	ldr	r3, [pc, #96]	; (8008e70 <pvPortMalloc+0x180>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d203      	bcs.n	8008e1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <pvPortMalloc+0x178>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <pvPortMalloc+0x180>)
 8008e1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <pvPortMalloc+0x174>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	431a      	orrs	r2, r3
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e32:	f7fe fd67 	bl	8007904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f003 0307 	and.w	r3, r3, #7
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d009      	beq.n	8008e54 <pvPortMalloc+0x164>
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e7fe      	b.n	8008e52 <pvPortMalloc+0x162>
	return pvReturn;
 8008e54:	69fb      	ldr	r3, [r7, #28]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3728      	adds	r7, #40	; 0x28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20003bac 	.word	0x20003bac
 8008e64:	20003bb8 	.word	0x20003bb8
 8008e68:	20003bb0 	.word	0x20003bb0
 8008e6c:	20003ba4 	.word	0x20003ba4
 8008e70:	20003bb4 	.word	0x20003bb4

08008e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d046      	beq.n	8008f14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e86:	2308      	movs	r3, #8
 8008e88:	425b      	negs	r3, r3
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	4b20      	ldr	r3, [pc, #128]	; (8008f1c <vPortFree+0xa8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <vPortFree+0x42>
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	e7fe      	b.n	8008eb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d009      	beq.n	8008ed2 <vPortFree+0x5e>
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	60bb      	str	r3, [r7, #8]
 8008ed0:	e7fe      	b.n	8008ed0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	4b11      	ldr	r3, [pc, #68]	; (8008f1c <vPortFree+0xa8>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d019      	beq.n	8008f14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d115      	bne.n	8008f14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4b0b      	ldr	r3, [pc, #44]	; (8008f1c <vPortFree+0xa8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	401a      	ands	r2, r3
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ef8:	f7fe fcf6 	bl	80078e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <vPortFree+0xac>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4413      	add	r3, r2
 8008f06:	4a06      	ldr	r2, [pc, #24]	; (8008f20 <vPortFree+0xac>)
 8008f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f0a:	6938      	ldr	r0, [r7, #16]
 8008f0c:	f000 f86c 	bl	8008fe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f10:	f7fe fcf8 	bl	8007904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f14:	bf00      	nop
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20003bb8 	.word	0x20003bb8
 8008f20:	20003bb0 	.word	0x20003bb0

08008f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f2a:	f44f 53fd 	mov.w	r3, #8096	; 0x1fa0
 8008f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f30:	4b27      	ldr	r3, [pc, #156]	; (8008fd0 <prvHeapInit+0xac>)
 8008f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00c      	beq.n	8008f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3307      	adds	r3, #7
 8008f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0307 	bic.w	r3, r3, #7
 8008f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <prvHeapInit+0xac>)
 8008f54:	4413      	add	r3, r2
 8008f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f5c:	4a1d      	ldr	r2, [pc, #116]	; (8008fd4 <prvHeapInit+0xb0>)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f62:	4b1c      	ldr	r3, [pc, #112]	; (8008fd4 <prvHeapInit+0xb0>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f70:	2208      	movs	r2, #8
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	1a9b      	subs	r3, r3, r2
 8008f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0307 	bic.w	r3, r3, #7
 8008f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4a15      	ldr	r2, [pc, #84]	; (8008fd8 <prvHeapInit+0xb4>)
 8008f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f86:	4b14      	ldr	r3, [pc, #80]	; (8008fd8 <prvHeapInit+0xb4>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f8e:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <prvHeapInit+0xb4>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fa4:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <prvHeapInit+0xb4>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a0a      	ldr	r2, [pc, #40]	; (8008fdc <prvHeapInit+0xb8>)
 8008fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	4a09      	ldr	r2, [pc, #36]	; (8008fe0 <prvHeapInit+0xbc>)
 8008fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fbc:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <prvHeapInit+0xc0>)
 8008fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fc2:	601a      	str	r2, [r3, #0]
}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20001c04 	.word	0x20001c04
 8008fd4:	20003ba4 	.word	0x20003ba4
 8008fd8:	20003bac 	.word	0x20003bac
 8008fdc:	20003bb4 	.word	0x20003bb4
 8008fe0:	20003bb0 	.word	0x20003bb0
 8008fe4:	20003bb8 	.word	0x20003bb8

08008fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ff0:	4b28      	ldr	r3, [pc, #160]	; (8009094 <prvInsertBlockIntoFreeList+0xac>)
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	e002      	b.n	8008ffc <prvInsertBlockIntoFreeList+0x14>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d8f7      	bhi.n	8008ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	4413      	add	r3, r2
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	d108      	bne.n	800902a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	441a      	add	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	441a      	add	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	429a      	cmp	r2, r3
 800903c:	d118      	bne.n	8009070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4b15      	ldr	r3, [pc, #84]	; (8009098 <prvInsertBlockIntoFreeList+0xb0>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d00d      	beq.n	8009066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	441a      	add	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e008      	b.n	8009078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009066:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <prvInsertBlockIntoFreeList+0xb0>)
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	e003      	b.n	8009078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	429a      	cmp	r2, r3
 800907e:	d002      	beq.n	8009086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009086:	bf00      	nop
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20003ba4 	.word	0x20003ba4
 8009098:	20003bac 	.word	0x20003bac

0800909c <_ZdlPvj>:
 800909c:	f7f7 bfd2 	b.w	8001044 <_ZdlPv>

080090a0 <pow>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	ed2d 8b04 	vpush	{d8-d9}
 80090a8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800937c <pow+0x2dc>
 80090ac:	b08d      	sub	sp, #52	; 0x34
 80090ae:	ec57 6b10 	vmov	r6, r7, d0
 80090b2:	ec55 4b11 	vmov	r4, r5, d1
 80090b6:	f000 f963 	bl	8009380 <__ieee754_pow>
 80090ba:	f999 3000 	ldrsb.w	r3, [r9]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	eeb0 8a40 	vmov.f32	s16, s0
 80090c6:	eef0 8a60 	vmov.f32	s17, s1
 80090ca:	46c8      	mov	r8, r9
 80090cc:	d05f      	beq.n	800918e <pow+0xee>
 80090ce:	4622      	mov	r2, r4
 80090d0:	462b      	mov	r3, r5
 80090d2:	4620      	mov	r0, r4
 80090d4:	4629      	mov	r1, r5
 80090d6:	f7f7 fd31 	bl	8000b3c <__aeabi_dcmpun>
 80090da:	4683      	mov	fp, r0
 80090dc:	2800      	cmp	r0, #0
 80090de:	d156      	bne.n	800918e <pow+0xee>
 80090e0:	4632      	mov	r2, r6
 80090e2:	463b      	mov	r3, r7
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	f7f7 fd28 	bl	8000b3c <__aeabi_dcmpun>
 80090ec:	9001      	str	r0, [sp, #4]
 80090ee:	b1e8      	cbz	r0, 800912c <pow+0x8c>
 80090f0:	2200      	movs	r2, #0
 80090f2:	2300      	movs	r3, #0
 80090f4:	4620      	mov	r0, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	f7f7 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d046      	beq.n	800918e <pow+0xee>
 8009100:	2301      	movs	r3, #1
 8009102:	9302      	str	r3, [sp, #8]
 8009104:	4b96      	ldr	r3, [pc, #600]	; (8009360 <pow+0x2c0>)
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	4b96      	ldr	r3, [pc, #600]	; (8009364 <pow+0x2c4>)
 800910a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800910e:	2200      	movs	r2, #0
 8009110:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009114:	9b00      	ldr	r3, [sp, #0]
 8009116:	2b02      	cmp	r3, #2
 8009118:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800911c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009120:	d033      	beq.n	800918a <pow+0xea>
 8009122:	a802      	add	r0, sp, #8
 8009124:	f000 fefb 	bl	8009f1e <matherr>
 8009128:	bb48      	cbnz	r0, 800917e <pow+0xde>
 800912a:	e05d      	b.n	80091e8 <pow+0x148>
 800912c:	f04f 0a00 	mov.w	sl, #0
 8009130:	f04f 0b00 	mov.w	fp, #0
 8009134:	4652      	mov	r2, sl
 8009136:	465b      	mov	r3, fp
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 fccc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009140:	ec4b ab19 	vmov	d9, sl, fp
 8009144:	2800      	cmp	r0, #0
 8009146:	d054      	beq.n	80091f2 <pow+0x152>
 8009148:	4652      	mov	r2, sl
 800914a:	465b      	mov	r3, fp
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009154:	4680      	mov	r8, r0
 8009156:	b318      	cbz	r0, 80091a0 <pow+0x100>
 8009158:	2301      	movs	r3, #1
 800915a:	9302      	str	r3, [sp, #8]
 800915c:	4b80      	ldr	r3, [pc, #512]	; (8009360 <pow+0x2c0>)
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	930a      	str	r3, [sp, #40]	; 0x28
 8009164:	9b00      	ldr	r3, [sp, #0]
 8009166:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800916a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800916e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0d5      	beq.n	8009122 <pow+0x82>
 8009176:	4b7b      	ldr	r3, [pc, #492]	; (8009364 <pow+0x2c4>)
 8009178:	2200      	movs	r2, #0
 800917a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800917e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009180:	b11b      	cbz	r3, 800918a <pow+0xea>
 8009182:	f000 ffe3 	bl	800a14c <__errno>
 8009186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009188:	6003      	str	r3, [r0, #0]
 800918a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800918e:	eeb0 0a48 	vmov.f32	s0, s16
 8009192:	eef0 0a68 	vmov.f32	s1, s17
 8009196:	b00d      	add	sp, #52	; 0x34
 8009198:	ecbd 8b04 	vpop	{d8-d9}
 800919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a0:	ec45 4b10 	vmov	d0, r4, r5
 80091a4:	f000 feb3 	bl	8009f0e <finite>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d0f0      	beq.n	800918e <pow+0xee>
 80091ac:	4652      	mov	r2, sl
 80091ae:	465b      	mov	r3, fp
 80091b0:	4620      	mov	r0, r4
 80091b2:	4629      	mov	r1, r5
 80091b4:	f7f7 fc9a 	bl	8000aec <__aeabi_dcmplt>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d0e8      	beq.n	800918e <pow+0xee>
 80091bc:	2301      	movs	r3, #1
 80091be:	9302      	str	r3, [sp, #8]
 80091c0:	4b67      	ldr	r3, [pc, #412]	; (8009360 <pow+0x2c0>)
 80091c2:	9303      	str	r3, [sp, #12]
 80091c4:	f999 3000 	ldrsb.w	r3, [r9]
 80091c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80091cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80091d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80091d4:	b913      	cbnz	r3, 80091dc <pow+0x13c>
 80091d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80091da:	e7a2      	b.n	8009122 <pow+0x82>
 80091dc:	4962      	ldr	r1, [pc, #392]	; (8009368 <pow+0x2c8>)
 80091de:	2000      	movs	r0, #0
 80091e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d19c      	bne.n	8009122 <pow+0x82>
 80091e8:	f000 ffb0 	bl	800a14c <__errno>
 80091ec:	2321      	movs	r3, #33	; 0x21
 80091ee:	6003      	str	r3, [r0, #0]
 80091f0:	e7c5      	b.n	800917e <pow+0xde>
 80091f2:	eeb0 0a48 	vmov.f32	s0, s16
 80091f6:	eef0 0a68 	vmov.f32	s1, s17
 80091fa:	f000 fe88 	bl	8009f0e <finite>
 80091fe:	9000      	str	r0, [sp, #0]
 8009200:	2800      	cmp	r0, #0
 8009202:	f040 8081 	bne.w	8009308 <pow+0x268>
 8009206:	ec47 6b10 	vmov	d0, r6, r7
 800920a:	f000 fe80 	bl	8009f0e <finite>
 800920e:	2800      	cmp	r0, #0
 8009210:	d07a      	beq.n	8009308 <pow+0x268>
 8009212:	ec45 4b10 	vmov	d0, r4, r5
 8009216:	f000 fe7a 	bl	8009f0e <finite>
 800921a:	2800      	cmp	r0, #0
 800921c:	d074      	beq.n	8009308 <pow+0x268>
 800921e:	ec53 2b18 	vmov	r2, r3, d8
 8009222:	ee18 0a10 	vmov	r0, s16
 8009226:	4619      	mov	r1, r3
 8009228:	f7f7 fc88 	bl	8000b3c <__aeabi_dcmpun>
 800922c:	f999 9000 	ldrsb.w	r9, [r9]
 8009230:	4b4b      	ldr	r3, [pc, #300]	; (8009360 <pow+0x2c0>)
 8009232:	b1b0      	cbz	r0, 8009262 <pow+0x1c2>
 8009234:	2201      	movs	r2, #1
 8009236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800923a:	9b00      	ldr	r3, [sp, #0]
 800923c:	930a      	str	r3, [sp, #40]	; 0x28
 800923e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009242:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009246:	f1b9 0f00 	cmp.w	r9, #0
 800924a:	d0c4      	beq.n	80091d6 <pow+0x136>
 800924c:	4652      	mov	r2, sl
 800924e:	465b      	mov	r3, fp
 8009250:	4650      	mov	r0, sl
 8009252:	4659      	mov	r1, fp
 8009254:	f7f7 fb02 	bl	800085c <__aeabi_ddiv>
 8009258:	f1b9 0f02 	cmp.w	r9, #2
 800925c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009260:	e7c1      	b.n	80091e6 <pow+0x146>
 8009262:	2203      	movs	r2, #3
 8009264:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009268:	900a      	str	r0, [sp, #40]	; 0x28
 800926a:	4629      	mov	r1, r5
 800926c:	4620      	mov	r0, r4
 800926e:	2200      	movs	r2, #0
 8009270:	4b3e      	ldr	r3, [pc, #248]	; (800936c <pow+0x2cc>)
 8009272:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009276:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800927a:	f7f7 f9c5 	bl	8000608 <__aeabi_dmul>
 800927e:	4604      	mov	r4, r0
 8009280:	460d      	mov	r5, r1
 8009282:	f1b9 0f00 	cmp.w	r9, #0
 8009286:	d124      	bne.n	80092d2 <pow+0x232>
 8009288:	4b39      	ldr	r3, [pc, #228]	; (8009370 <pow+0x2d0>)
 800928a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800928e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009292:	4630      	mov	r0, r6
 8009294:	4652      	mov	r2, sl
 8009296:	465b      	mov	r3, fp
 8009298:	4639      	mov	r1, r7
 800929a:	f7f7 fc27 	bl	8000aec <__aeabi_dcmplt>
 800929e:	2800      	cmp	r0, #0
 80092a0:	d056      	beq.n	8009350 <pow+0x2b0>
 80092a2:	ec45 4b10 	vmov	d0, r4, r5
 80092a6:	f000 fe47 	bl	8009f38 <rint>
 80092aa:	4622      	mov	r2, r4
 80092ac:	462b      	mov	r3, r5
 80092ae:	ec51 0b10 	vmov	r0, r1, d0
 80092b2:	f7f7 fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 80092b6:	b920      	cbnz	r0, 80092c2 <pow+0x222>
 80092b8:	4b2e      	ldr	r3, [pc, #184]	; (8009374 <pow+0x2d4>)
 80092ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80092be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80092c2:	f998 3000 	ldrsb.w	r3, [r8]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d142      	bne.n	8009350 <pow+0x2b0>
 80092ca:	f000 ff3f 	bl	800a14c <__errno>
 80092ce:	2322      	movs	r3, #34	; 0x22
 80092d0:	e78d      	b.n	80091ee <pow+0x14e>
 80092d2:	4b29      	ldr	r3, [pc, #164]	; (8009378 <pow+0x2d8>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80092da:	4630      	mov	r0, r6
 80092dc:	4652      	mov	r2, sl
 80092de:	465b      	mov	r3, fp
 80092e0:	4639      	mov	r1, r7
 80092e2:	f7f7 fc03 	bl	8000aec <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0eb      	beq.n	80092c2 <pow+0x222>
 80092ea:	ec45 4b10 	vmov	d0, r4, r5
 80092ee:	f000 fe23 	bl	8009f38 <rint>
 80092f2:	4622      	mov	r2, r4
 80092f4:	462b      	mov	r3, r5
 80092f6:	ec51 0b10 	vmov	r0, r1, d0
 80092fa:	f7f7 fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d1df      	bne.n	80092c2 <pow+0x222>
 8009302:	2200      	movs	r2, #0
 8009304:	4b18      	ldr	r3, [pc, #96]	; (8009368 <pow+0x2c8>)
 8009306:	e7da      	b.n	80092be <pow+0x21e>
 8009308:	2200      	movs	r2, #0
 800930a:	2300      	movs	r3, #0
 800930c:	ec51 0b18 	vmov	r0, r1, d8
 8009310:	f7f7 fbe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009314:	2800      	cmp	r0, #0
 8009316:	f43f af3a 	beq.w	800918e <pow+0xee>
 800931a:	ec47 6b10 	vmov	d0, r6, r7
 800931e:	f000 fdf6 	bl	8009f0e <finite>
 8009322:	2800      	cmp	r0, #0
 8009324:	f43f af33 	beq.w	800918e <pow+0xee>
 8009328:	ec45 4b10 	vmov	d0, r4, r5
 800932c:	f000 fdef 	bl	8009f0e <finite>
 8009330:	2800      	cmp	r0, #0
 8009332:	f43f af2c 	beq.w	800918e <pow+0xee>
 8009336:	2304      	movs	r3, #4
 8009338:	9302      	str	r3, [sp, #8]
 800933a:	4b09      	ldr	r3, [pc, #36]	; (8009360 <pow+0x2c0>)
 800933c:	9303      	str	r3, [sp, #12]
 800933e:	2300      	movs	r3, #0
 8009340:	930a      	str	r3, [sp, #40]	; 0x28
 8009342:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009346:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800934a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800934e:	e7b8      	b.n	80092c2 <pow+0x222>
 8009350:	a802      	add	r0, sp, #8
 8009352:	f000 fde4 	bl	8009f1e <matherr>
 8009356:	2800      	cmp	r0, #0
 8009358:	f47f af11 	bne.w	800917e <pow+0xde>
 800935c:	e7b5      	b.n	80092ca <pow+0x22a>
 800935e:	bf00      	nop
 8009360:	0800dd10 	.word	0x0800dd10
 8009364:	3ff00000 	.word	0x3ff00000
 8009368:	fff00000 	.word	0xfff00000
 800936c:	3fe00000 	.word	0x3fe00000
 8009370:	47efffff 	.word	0x47efffff
 8009374:	c7efffff 	.word	0xc7efffff
 8009378:	7ff00000 	.word	0x7ff00000
 800937c:	20000030 	.word	0x20000030

08009380 <__ieee754_pow>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	b091      	sub	sp, #68	; 0x44
 8009386:	ed8d 1b00 	vstr	d1, [sp]
 800938a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800938e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009392:	ea58 0302 	orrs.w	r3, r8, r2
 8009396:	ec57 6b10 	vmov	r6, r7, d0
 800939a:	f000 84be 	beq.w	8009d1a <__ieee754_pow+0x99a>
 800939e:	4b7a      	ldr	r3, [pc, #488]	; (8009588 <__ieee754_pow+0x208>)
 80093a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80093a4:	429c      	cmp	r4, r3
 80093a6:	463d      	mov	r5, r7
 80093a8:	ee10 aa10 	vmov	sl, s0
 80093ac:	dc09      	bgt.n	80093c2 <__ieee754_pow+0x42>
 80093ae:	d103      	bne.n	80093b8 <__ieee754_pow+0x38>
 80093b0:	b93e      	cbnz	r6, 80093c2 <__ieee754_pow+0x42>
 80093b2:	45a0      	cmp	r8, r4
 80093b4:	dc0d      	bgt.n	80093d2 <__ieee754_pow+0x52>
 80093b6:	e001      	b.n	80093bc <__ieee754_pow+0x3c>
 80093b8:	4598      	cmp	r8, r3
 80093ba:	dc02      	bgt.n	80093c2 <__ieee754_pow+0x42>
 80093bc:	4598      	cmp	r8, r3
 80093be:	d10e      	bne.n	80093de <__ieee754_pow+0x5e>
 80093c0:	b16a      	cbz	r2, 80093de <__ieee754_pow+0x5e>
 80093c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80093c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80093ca:	ea54 030a 	orrs.w	r3, r4, sl
 80093ce:	f000 84a4 	beq.w	8009d1a <__ieee754_pow+0x99a>
 80093d2:	486e      	ldr	r0, [pc, #440]	; (800958c <__ieee754_pow+0x20c>)
 80093d4:	b011      	add	sp, #68	; 0x44
 80093d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093da:	f000 bda5 	b.w	8009f28 <nan>
 80093de:	2d00      	cmp	r5, #0
 80093e0:	da53      	bge.n	800948a <__ieee754_pow+0x10a>
 80093e2:	4b6b      	ldr	r3, [pc, #428]	; (8009590 <__ieee754_pow+0x210>)
 80093e4:	4598      	cmp	r8, r3
 80093e6:	dc4d      	bgt.n	8009484 <__ieee754_pow+0x104>
 80093e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80093ec:	4598      	cmp	r8, r3
 80093ee:	dd4c      	ble.n	800948a <__ieee754_pow+0x10a>
 80093f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80093f8:	2b14      	cmp	r3, #20
 80093fa:	dd26      	ble.n	800944a <__ieee754_pow+0xca>
 80093fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009400:	fa22 f103 	lsr.w	r1, r2, r3
 8009404:	fa01 f303 	lsl.w	r3, r1, r3
 8009408:	4293      	cmp	r3, r2
 800940a:	d13e      	bne.n	800948a <__ieee754_pow+0x10a>
 800940c:	f001 0101 	and.w	r1, r1, #1
 8009410:	f1c1 0b02 	rsb	fp, r1, #2
 8009414:	2a00      	cmp	r2, #0
 8009416:	d15b      	bne.n	80094d0 <__ieee754_pow+0x150>
 8009418:	4b5b      	ldr	r3, [pc, #364]	; (8009588 <__ieee754_pow+0x208>)
 800941a:	4598      	cmp	r8, r3
 800941c:	d124      	bne.n	8009468 <__ieee754_pow+0xe8>
 800941e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009422:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009426:	ea53 030a 	orrs.w	r3, r3, sl
 800942a:	f000 8476 	beq.w	8009d1a <__ieee754_pow+0x99a>
 800942e:	4b59      	ldr	r3, [pc, #356]	; (8009594 <__ieee754_pow+0x214>)
 8009430:	429c      	cmp	r4, r3
 8009432:	dd2d      	ble.n	8009490 <__ieee754_pow+0x110>
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	f280 8473 	bge.w	8009d22 <__ieee754_pow+0x9a2>
 800943c:	2000      	movs	r0, #0
 800943e:	2100      	movs	r1, #0
 8009440:	ec41 0b10 	vmov	d0, r0, r1
 8009444:	b011      	add	sp, #68	; 0x44
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	2a00      	cmp	r2, #0
 800944c:	d13e      	bne.n	80094cc <__ieee754_pow+0x14c>
 800944e:	f1c3 0314 	rsb	r3, r3, #20
 8009452:	fa48 f103 	asr.w	r1, r8, r3
 8009456:	fa01 f303 	lsl.w	r3, r1, r3
 800945a:	4543      	cmp	r3, r8
 800945c:	f040 8469 	bne.w	8009d32 <__ieee754_pow+0x9b2>
 8009460:	f001 0101 	and.w	r1, r1, #1
 8009464:	f1c1 0b02 	rsb	fp, r1, #2
 8009468:	4b4b      	ldr	r3, [pc, #300]	; (8009598 <__ieee754_pow+0x218>)
 800946a:	4598      	cmp	r8, r3
 800946c:	d118      	bne.n	80094a0 <__ieee754_pow+0x120>
 800946e:	f1b9 0f00 	cmp.w	r9, #0
 8009472:	f280 845a 	bge.w	8009d2a <__ieee754_pow+0x9aa>
 8009476:	4948      	ldr	r1, [pc, #288]	; (8009598 <__ieee754_pow+0x218>)
 8009478:	4632      	mov	r2, r6
 800947a:	463b      	mov	r3, r7
 800947c:	2000      	movs	r0, #0
 800947e:	f7f7 f9ed 	bl	800085c <__aeabi_ddiv>
 8009482:	e7dd      	b.n	8009440 <__ieee754_pow+0xc0>
 8009484:	f04f 0b02 	mov.w	fp, #2
 8009488:	e7c4      	b.n	8009414 <__ieee754_pow+0x94>
 800948a:	f04f 0b00 	mov.w	fp, #0
 800948e:	e7c1      	b.n	8009414 <__ieee754_pow+0x94>
 8009490:	f1b9 0f00 	cmp.w	r9, #0
 8009494:	dad2      	bge.n	800943c <__ieee754_pow+0xbc>
 8009496:	e9dd 0300 	ldrd	r0, r3, [sp]
 800949a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800949e:	e7cf      	b.n	8009440 <__ieee754_pow+0xc0>
 80094a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80094a4:	d106      	bne.n	80094b4 <__ieee754_pow+0x134>
 80094a6:	4632      	mov	r2, r6
 80094a8:	463b      	mov	r3, r7
 80094aa:	4610      	mov	r0, r2
 80094ac:	4619      	mov	r1, r3
 80094ae:	f7f7 f8ab 	bl	8000608 <__aeabi_dmul>
 80094b2:	e7c5      	b.n	8009440 <__ieee754_pow+0xc0>
 80094b4:	4b39      	ldr	r3, [pc, #228]	; (800959c <__ieee754_pow+0x21c>)
 80094b6:	4599      	cmp	r9, r3
 80094b8:	d10a      	bne.n	80094d0 <__ieee754_pow+0x150>
 80094ba:	2d00      	cmp	r5, #0
 80094bc:	db08      	blt.n	80094d0 <__ieee754_pow+0x150>
 80094be:	ec47 6b10 	vmov	d0, r6, r7
 80094c2:	b011      	add	sp, #68	; 0x44
 80094c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c8:	f000 bc68 	b.w	8009d9c <__ieee754_sqrt>
 80094cc:	f04f 0b00 	mov.w	fp, #0
 80094d0:	ec47 6b10 	vmov	d0, r6, r7
 80094d4:	f000 fd12 	bl	8009efc <fabs>
 80094d8:	ec51 0b10 	vmov	r0, r1, d0
 80094dc:	f1ba 0f00 	cmp.w	sl, #0
 80094e0:	d127      	bne.n	8009532 <__ieee754_pow+0x1b2>
 80094e2:	b124      	cbz	r4, 80094ee <__ieee754_pow+0x16e>
 80094e4:	4b2c      	ldr	r3, [pc, #176]	; (8009598 <__ieee754_pow+0x218>)
 80094e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d121      	bne.n	8009532 <__ieee754_pow+0x1b2>
 80094ee:	f1b9 0f00 	cmp.w	r9, #0
 80094f2:	da05      	bge.n	8009500 <__ieee754_pow+0x180>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	2000      	movs	r0, #0
 80094fa:	4927      	ldr	r1, [pc, #156]	; (8009598 <__ieee754_pow+0x218>)
 80094fc:	f7f7 f9ae 	bl	800085c <__aeabi_ddiv>
 8009500:	2d00      	cmp	r5, #0
 8009502:	da9d      	bge.n	8009440 <__ieee754_pow+0xc0>
 8009504:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009508:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800950c:	ea54 030b 	orrs.w	r3, r4, fp
 8009510:	d108      	bne.n	8009524 <__ieee754_pow+0x1a4>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4610      	mov	r0, r2
 8009518:	4619      	mov	r1, r3
 800951a:	f7f6 febd 	bl	8000298 <__aeabi_dsub>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	e7ac      	b.n	800947e <__ieee754_pow+0xfe>
 8009524:	f1bb 0f01 	cmp.w	fp, #1
 8009528:	d18a      	bne.n	8009440 <__ieee754_pow+0xc0>
 800952a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800952e:	4619      	mov	r1, r3
 8009530:	e786      	b.n	8009440 <__ieee754_pow+0xc0>
 8009532:	0fed      	lsrs	r5, r5, #31
 8009534:	1e6b      	subs	r3, r5, #1
 8009536:	930d      	str	r3, [sp, #52]	; 0x34
 8009538:	ea5b 0303 	orrs.w	r3, fp, r3
 800953c:	d102      	bne.n	8009544 <__ieee754_pow+0x1c4>
 800953e:	4632      	mov	r2, r6
 8009540:	463b      	mov	r3, r7
 8009542:	e7e8      	b.n	8009516 <__ieee754_pow+0x196>
 8009544:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <__ieee754_pow+0x220>)
 8009546:	4598      	cmp	r8, r3
 8009548:	f340 80fe 	ble.w	8009748 <__ieee754_pow+0x3c8>
 800954c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009550:	4598      	cmp	r8, r3
 8009552:	dd0a      	ble.n	800956a <__ieee754_pow+0x1ea>
 8009554:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <__ieee754_pow+0x214>)
 8009556:	429c      	cmp	r4, r3
 8009558:	dc0d      	bgt.n	8009576 <__ieee754_pow+0x1f6>
 800955a:	f1b9 0f00 	cmp.w	r9, #0
 800955e:	f6bf af6d 	bge.w	800943c <__ieee754_pow+0xbc>
 8009562:	a307      	add	r3, pc, #28	; (adr r3, 8009580 <__ieee754_pow+0x200>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	e79f      	b.n	80094aa <__ieee754_pow+0x12a>
 800956a:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <__ieee754_pow+0x224>)
 800956c:	429c      	cmp	r4, r3
 800956e:	ddf4      	ble.n	800955a <__ieee754_pow+0x1da>
 8009570:	4b09      	ldr	r3, [pc, #36]	; (8009598 <__ieee754_pow+0x218>)
 8009572:	429c      	cmp	r4, r3
 8009574:	dd18      	ble.n	80095a8 <__ieee754_pow+0x228>
 8009576:	f1b9 0f00 	cmp.w	r9, #0
 800957a:	dcf2      	bgt.n	8009562 <__ieee754_pow+0x1e2>
 800957c:	e75e      	b.n	800943c <__ieee754_pow+0xbc>
 800957e:	bf00      	nop
 8009580:	8800759c 	.word	0x8800759c
 8009584:	7e37e43c 	.word	0x7e37e43c
 8009588:	7ff00000 	.word	0x7ff00000
 800958c:	0800df01 	.word	0x0800df01
 8009590:	433fffff 	.word	0x433fffff
 8009594:	3fefffff 	.word	0x3fefffff
 8009598:	3ff00000 	.word	0x3ff00000
 800959c:	3fe00000 	.word	0x3fe00000
 80095a0:	41e00000 	.word	0x41e00000
 80095a4:	3feffffe 	.word	0x3feffffe
 80095a8:	2200      	movs	r2, #0
 80095aa:	4b63      	ldr	r3, [pc, #396]	; (8009738 <__ieee754_pow+0x3b8>)
 80095ac:	f7f6 fe74 	bl	8000298 <__aeabi_dsub>
 80095b0:	a355      	add	r3, pc, #340	; (adr r3, 8009708 <__ieee754_pow+0x388>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	4604      	mov	r4, r0
 80095b8:	460d      	mov	r5, r1
 80095ba:	f7f7 f825 	bl	8000608 <__aeabi_dmul>
 80095be:	a354      	add	r3, pc, #336	; (adr r3, 8009710 <__ieee754_pow+0x390>)
 80095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c4:	4606      	mov	r6, r0
 80095c6:	460f      	mov	r7, r1
 80095c8:	4620      	mov	r0, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	f7f7 f81c 	bl	8000608 <__aeabi_dmul>
 80095d0:	2200      	movs	r2, #0
 80095d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095d6:	4b59      	ldr	r3, [pc, #356]	; (800973c <__ieee754_pow+0x3bc>)
 80095d8:	4620      	mov	r0, r4
 80095da:	4629      	mov	r1, r5
 80095dc:	f7f7 f814 	bl	8000608 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	a14c      	add	r1, pc, #304	; (adr r1, 8009718 <__ieee754_pow+0x398>)
 80095e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ea:	f7f6 fe55 	bl	8000298 <__aeabi_dsub>
 80095ee:	4622      	mov	r2, r4
 80095f0:	462b      	mov	r3, r5
 80095f2:	f7f7 f809 	bl	8000608 <__aeabi_dmul>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	2000      	movs	r0, #0
 80095fc:	4950      	ldr	r1, [pc, #320]	; (8009740 <__ieee754_pow+0x3c0>)
 80095fe:	f7f6 fe4b 	bl	8000298 <__aeabi_dsub>
 8009602:	4622      	mov	r2, r4
 8009604:	462b      	mov	r3, r5
 8009606:	4680      	mov	r8, r0
 8009608:	4689      	mov	r9, r1
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f6 fffb 	bl	8000608 <__aeabi_dmul>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	4640      	mov	r0, r8
 8009618:	4649      	mov	r1, r9
 800961a:	f7f6 fff5 	bl	8000608 <__aeabi_dmul>
 800961e:	a340      	add	r3, pc, #256	; (adr r3, 8009720 <__ieee754_pow+0x3a0>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	f7f6 fff0 	bl	8000608 <__aeabi_dmul>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009630:	f7f6 fe32 	bl	8000298 <__aeabi_dsub>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4604      	mov	r4, r0
 800963a:	460d      	mov	r5, r1
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f7f6 fe2c 	bl	800029c <__adddf3>
 8009644:	2000      	movs	r0, #0
 8009646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800964a:	4632      	mov	r2, r6
 800964c:	463b      	mov	r3, r7
 800964e:	f7f6 fe23 	bl	8000298 <__aeabi_dsub>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4620      	mov	r0, r4
 8009658:	4629      	mov	r1, r5
 800965a:	f7f6 fe1d 	bl	8000298 <__aeabi_dsub>
 800965e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009660:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009664:	4313      	orrs	r3, r2
 8009666:	4606      	mov	r6, r0
 8009668:	460f      	mov	r7, r1
 800966a:	f040 81eb 	bne.w	8009a44 <__ieee754_pow+0x6c4>
 800966e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009728 <__ieee754_pow+0x3a8>
 8009672:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009676:	2400      	movs	r4, #0
 8009678:	4622      	mov	r2, r4
 800967a:	462b      	mov	r3, r5
 800967c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009680:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009684:	f7f6 fe08 	bl	8000298 <__aeabi_dsub>
 8009688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800968c:	f7f6 ffbc 	bl	8000608 <__aeabi_dmul>
 8009690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009694:	4680      	mov	r8, r0
 8009696:	4689      	mov	r9, r1
 8009698:	4630      	mov	r0, r6
 800969a:	4639      	mov	r1, r7
 800969c:	f7f6 ffb4 	bl	8000608 <__aeabi_dmul>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4640      	mov	r0, r8
 80096a6:	4649      	mov	r1, r9
 80096a8:	f7f6 fdf8 	bl	800029c <__adddf3>
 80096ac:	4622      	mov	r2, r4
 80096ae:	462b      	mov	r3, r5
 80096b0:	4680      	mov	r8, r0
 80096b2:	4689      	mov	r9, r1
 80096b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096b8:	f7f6 ffa6 	bl	8000608 <__aeabi_dmul>
 80096bc:	460b      	mov	r3, r1
 80096be:	4604      	mov	r4, r0
 80096c0:	460d      	mov	r5, r1
 80096c2:	4602      	mov	r2, r0
 80096c4:	4649      	mov	r1, r9
 80096c6:	4640      	mov	r0, r8
 80096c8:	e9cd 4500 	strd	r4, r5, [sp]
 80096cc:	f7f6 fde6 	bl	800029c <__adddf3>
 80096d0:	4b1c      	ldr	r3, [pc, #112]	; (8009744 <__ieee754_pow+0x3c4>)
 80096d2:	4299      	cmp	r1, r3
 80096d4:	4606      	mov	r6, r0
 80096d6:	460f      	mov	r7, r1
 80096d8:	468b      	mov	fp, r1
 80096da:	f340 82f7 	ble.w	8009ccc <__ieee754_pow+0x94c>
 80096de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80096e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80096e6:	4303      	orrs	r3, r0
 80096e8:	f000 81ea 	beq.w	8009ac0 <__ieee754_pow+0x740>
 80096ec:	a310      	add	r3, pc, #64	; (adr r3, 8009730 <__ieee754_pow+0x3b0>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f6:	f7f6 ff87 	bl	8000608 <__aeabi_dmul>
 80096fa:	a30d      	add	r3, pc, #52	; (adr r3, 8009730 <__ieee754_pow+0x3b0>)
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	e6d5      	b.n	80094ae <__ieee754_pow+0x12e>
 8009702:	bf00      	nop
 8009704:	f3af 8000 	nop.w
 8009708:	60000000 	.word	0x60000000
 800970c:	3ff71547 	.word	0x3ff71547
 8009710:	f85ddf44 	.word	0xf85ddf44
 8009714:	3e54ae0b 	.word	0x3e54ae0b
 8009718:	55555555 	.word	0x55555555
 800971c:	3fd55555 	.word	0x3fd55555
 8009720:	652b82fe 	.word	0x652b82fe
 8009724:	3ff71547 	.word	0x3ff71547
 8009728:	00000000 	.word	0x00000000
 800972c:	bff00000 	.word	0xbff00000
 8009730:	8800759c 	.word	0x8800759c
 8009734:	7e37e43c 	.word	0x7e37e43c
 8009738:	3ff00000 	.word	0x3ff00000
 800973c:	3fd00000 	.word	0x3fd00000
 8009740:	3fe00000 	.word	0x3fe00000
 8009744:	408fffff 	.word	0x408fffff
 8009748:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800974c:	f04f 0200 	mov.w	r2, #0
 8009750:	da05      	bge.n	800975e <__ieee754_pow+0x3de>
 8009752:	4bd3      	ldr	r3, [pc, #844]	; (8009aa0 <__ieee754_pow+0x720>)
 8009754:	f7f6 ff58 	bl	8000608 <__aeabi_dmul>
 8009758:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800975c:	460c      	mov	r4, r1
 800975e:	1523      	asrs	r3, r4, #20
 8009760:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009764:	4413      	add	r3, r2
 8009766:	9309      	str	r3, [sp, #36]	; 0x24
 8009768:	4bce      	ldr	r3, [pc, #824]	; (8009aa4 <__ieee754_pow+0x724>)
 800976a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800976e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009772:	429c      	cmp	r4, r3
 8009774:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009778:	dd08      	ble.n	800978c <__ieee754_pow+0x40c>
 800977a:	4bcb      	ldr	r3, [pc, #812]	; (8009aa8 <__ieee754_pow+0x728>)
 800977c:	429c      	cmp	r4, r3
 800977e:	f340 815e 	ble.w	8009a3e <__ieee754_pow+0x6be>
 8009782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009784:	3301      	adds	r3, #1
 8009786:	9309      	str	r3, [sp, #36]	; 0x24
 8009788:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800978c:	f04f 0a00 	mov.w	sl, #0
 8009790:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009794:	930c      	str	r3, [sp, #48]	; 0x30
 8009796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009798:	4bc4      	ldr	r3, [pc, #784]	; (8009aac <__ieee754_pow+0x72c>)
 800979a:	4413      	add	r3, r2
 800979c:	ed93 7b00 	vldr	d7, [r3]
 80097a0:	4629      	mov	r1, r5
 80097a2:	ec53 2b17 	vmov	r2, r3, d7
 80097a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80097ae:	f7f6 fd73 	bl	8000298 <__aeabi_dsub>
 80097b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097b6:	4606      	mov	r6, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097be:	f7f6 fd6d 	bl	800029c <__adddf3>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	2000      	movs	r0, #0
 80097c8:	49b9      	ldr	r1, [pc, #740]	; (8009ab0 <__ieee754_pow+0x730>)
 80097ca:	f7f7 f847 	bl	800085c <__aeabi_ddiv>
 80097ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f6 ff15 	bl	8000608 <__aeabi_dmul>
 80097de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80097e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80097ea:	2300      	movs	r3, #0
 80097ec:	9302      	str	r3, [sp, #8]
 80097ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80097f2:	106d      	asrs	r5, r5, #1
 80097f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80097f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80097fc:	2200      	movs	r2, #0
 80097fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009802:	4640      	mov	r0, r8
 8009804:	4649      	mov	r1, r9
 8009806:	4614      	mov	r4, r2
 8009808:	461d      	mov	r5, r3
 800980a:	f7f6 fefd 	bl	8000608 <__aeabi_dmul>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f6 fd3f 	bl	8000298 <__aeabi_dsub>
 800981a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800981e:	4606      	mov	r6, r0
 8009820:	460f      	mov	r7, r1
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7f6 fd37 	bl	8000298 <__aeabi_dsub>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009832:	f7f6 fd31 	bl	8000298 <__aeabi_dsub>
 8009836:	4642      	mov	r2, r8
 8009838:	464b      	mov	r3, r9
 800983a:	f7f6 fee5 	bl	8000608 <__aeabi_dmul>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4630      	mov	r0, r6
 8009844:	4639      	mov	r1, r7
 8009846:	f7f6 fd27 	bl	8000298 <__aeabi_dsub>
 800984a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800984e:	f7f6 fedb 	bl	8000608 <__aeabi_dmul>
 8009852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800985a:	4610      	mov	r0, r2
 800985c:	4619      	mov	r1, r3
 800985e:	f7f6 fed3 	bl	8000608 <__aeabi_dmul>
 8009862:	a37b      	add	r3, pc, #492	; (adr r3, 8009a50 <__ieee754_pow+0x6d0>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	4604      	mov	r4, r0
 800986a:	460d      	mov	r5, r1
 800986c:	f7f6 fecc 	bl	8000608 <__aeabi_dmul>
 8009870:	a379      	add	r3, pc, #484	; (adr r3, 8009a58 <__ieee754_pow+0x6d8>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fd11 	bl	800029c <__adddf3>
 800987a:	4622      	mov	r2, r4
 800987c:	462b      	mov	r3, r5
 800987e:	f7f6 fec3 	bl	8000608 <__aeabi_dmul>
 8009882:	a377      	add	r3, pc, #476	; (adr r3, 8009a60 <__ieee754_pow+0x6e0>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 fd08 	bl	800029c <__adddf3>
 800988c:	4622      	mov	r2, r4
 800988e:	462b      	mov	r3, r5
 8009890:	f7f6 feba 	bl	8000608 <__aeabi_dmul>
 8009894:	a374      	add	r3, pc, #464	; (adr r3, 8009a68 <__ieee754_pow+0x6e8>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f7f6 fcff 	bl	800029c <__adddf3>
 800989e:	4622      	mov	r2, r4
 80098a0:	462b      	mov	r3, r5
 80098a2:	f7f6 feb1 	bl	8000608 <__aeabi_dmul>
 80098a6:	a372      	add	r3, pc, #456	; (adr r3, 8009a70 <__ieee754_pow+0x6f0>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 fcf6 	bl	800029c <__adddf3>
 80098b0:	4622      	mov	r2, r4
 80098b2:	462b      	mov	r3, r5
 80098b4:	f7f6 fea8 	bl	8000608 <__aeabi_dmul>
 80098b8:	a36f      	add	r3, pc, #444	; (adr r3, 8009a78 <__ieee754_pow+0x6f8>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f6 fced 	bl	800029c <__adddf3>
 80098c2:	4622      	mov	r2, r4
 80098c4:	4606      	mov	r6, r0
 80098c6:	460f      	mov	r7, r1
 80098c8:	462b      	mov	r3, r5
 80098ca:	4620      	mov	r0, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7f6 fe9b 	bl	8000608 <__aeabi_dmul>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4630      	mov	r0, r6
 80098d8:	4639      	mov	r1, r7
 80098da:	f7f6 fe95 	bl	8000608 <__aeabi_dmul>
 80098de:	4642      	mov	r2, r8
 80098e0:	4604      	mov	r4, r0
 80098e2:	460d      	mov	r5, r1
 80098e4:	464b      	mov	r3, r9
 80098e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098ea:	f7f6 fcd7 	bl	800029c <__adddf3>
 80098ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098f2:	f7f6 fe89 	bl	8000608 <__aeabi_dmul>
 80098f6:	4622      	mov	r2, r4
 80098f8:	462b      	mov	r3, r5
 80098fa:	f7f6 fccf 	bl	800029c <__adddf3>
 80098fe:	4642      	mov	r2, r8
 8009900:	4606      	mov	r6, r0
 8009902:	460f      	mov	r7, r1
 8009904:	464b      	mov	r3, r9
 8009906:	4640      	mov	r0, r8
 8009908:	4649      	mov	r1, r9
 800990a:	f7f6 fe7d 	bl	8000608 <__aeabi_dmul>
 800990e:	2200      	movs	r2, #0
 8009910:	4b68      	ldr	r3, [pc, #416]	; (8009ab4 <__ieee754_pow+0x734>)
 8009912:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009916:	f7f6 fcc1 	bl	800029c <__adddf3>
 800991a:	4632      	mov	r2, r6
 800991c:	463b      	mov	r3, r7
 800991e:	f7f6 fcbd 	bl	800029c <__adddf3>
 8009922:	9802      	ldr	r0, [sp, #8]
 8009924:	460d      	mov	r5, r1
 8009926:	4604      	mov	r4, r0
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4640      	mov	r0, r8
 800992e:	4649      	mov	r1, r9
 8009930:	f7f6 fe6a 	bl	8000608 <__aeabi_dmul>
 8009934:	2200      	movs	r2, #0
 8009936:	4680      	mov	r8, r0
 8009938:	4689      	mov	r9, r1
 800993a:	4b5e      	ldr	r3, [pc, #376]	; (8009ab4 <__ieee754_pow+0x734>)
 800993c:	4620      	mov	r0, r4
 800993e:	4629      	mov	r1, r5
 8009940:	f7f6 fcaa 	bl	8000298 <__aeabi_dsub>
 8009944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009948:	f7f6 fca6 	bl	8000298 <__aeabi_dsub>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4630      	mov	r0, r6
 8009952:	4639      	mov	r1, r7
 8009954:	f7f6 fca0 	bl	8000298 <__aeabi_dsub>
 8009958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800995c:	f7f6 fe54 	bl	8000608 <__aeabi_dmul>
 8009960:	4622      	mov	r2, r4
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	462b      	mov	r3, r5
 8009968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800996c:	f7f6 fe4c 	bl	8000608 <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	f7f6 fc90 	bl	800029c <__adddf3>
 800997c:	4606      	mov	r6, r0
 800997e:	460f      	mov	r7, r1
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4640      	mov	r0, r8
 8009986:	4649      	mov	r1, r9
 8009988:	f7f6 fc88 	bl	800029c <__adddf3>
 800998c:	9802      	ldr	r0, [sp, #8]
 800998e:	a33c      	add	r3, pc, #240	; (adr r3, 8009a80 <__ieee754_pow+0x700>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	4604      	mov	r4, r0
 8009996:	460d      	mov	r5, r1
 8009998:	f7f6 fe36 	bl	8000608 <__aeabi_dmul>
 800999c:	4642      	mov	r2, r8
 800999e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099a2:	464b      	mov	r3, r9
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f6 fc76 	bl	8000298 <__aeabi_dsub>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4630      	mov	r0, r6
 80099b2:	4639      	mov	r1, r7
 80099b4:	f7f6 fc70 	bl	8000298 <__aeabi_dsub>
 80099b8:	a333      	add	r3, pc, #204	; (adr r3, 8009a88 <__ieee754_pow+0x708>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fe23 	bl	8000608 <__aeabi_dmul>
 80099c2:	a333      	add	r3, pc, #204	; (adr r3, 8009a90 <__ieee754_pow+0x710>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	4606      	mov	r6, r0
 80099ca:	460f      	mov	r7, r1
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f6 fe1a 	bl	8000608 <__aeabi_dmul>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4630      	mov	r0, r6
 80099da:	4639      	mov	r1, r7
 80099dc:	f7f6 fc5e 	bl	800029c <__adddf3>
 80099e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099e2:	4b35      	ldr	r3, [pc, #212]	; (8009ab8 <__ieee754_pow+0x738>)
 80099e4:	4413      	add	r3, r2
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f7f6 fc57 	bl	800029c <__adddf3>
 80099ee:	4604      	mov	r4, r0
 80099f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099f2:	460d      	mov	r5, r1
 80099f4:	f7f6 fd9e 	bl	8000534 <__aeabi_i2d>
 80099f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099fa:	4b30      	ldr	r3, [pc, #192]	; (8009abc <__ieee754_pow+0x73c>)
 80099fc:	4413      	add	r3, r2
 80099fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a02:	4606      	mov	r6, r0
 8009a04:	460f      	mov	r7, r1
 8009a06:	4622      	mov	r2, r4
 8009a08:	462b      	mov	r3, r5
 8009a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a0e:	f7f6 fc45 	bl	800029c <__adddf3>
 8009a12:	4642      	mov	r2, r8
 8009a14:	464b      	mov	r3, r9
 8009a16:	f7f6 fc41 	bl	800029c <__adddf3>
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	463b      	mov	r3, r7
 8009a1e:	f7f6 fc3d 	bl	800029c <__adddf3>
 8009a22:	9802      	ldr	r0, [sp, #8]
 8009a24:	4632      	mov	r2, r6
 8009a26:	463b      	mov	r3, r7
 8009a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a2c:	f7f6 fc34 	bl	8000298 <__aeabi_dsub>
 8009a30:	4642      	mov	r2, r8
 8009a32:	464b      	mov	r3, r9
 8009a34:	f7f6 fc30 	bl	8000298 <__aeabi_dsub>
 8009a38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a3c:	e607      	b.n	800964e <__ieee754_pow+0x2ce>
 8009a3e:	f04f 0a01 	mov.w	sl, #1
 8009a42:	e6a5      	b.n	8009790 <__ieee754_pow+0x410>
 8009a44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009a98 <__ieee754_pow+0x718>
 8009a48:	e613      	b.n	8009672 <__ieee754_pow+0x2f2>
 8009a4a:	bf00      	nop
 8009a4c:	f3af 8000 	nop.w
 8009a50:	4a454eef 	.word	0x4a454eef
 8009a54:	3fca7e28 	.word	0x3fca7e28
 8009a58:	93c9db65 	.word	0x93c9db65
 8009a5c:	3fcd864a 	.word	0x3fcd864a
 8009a60:	a91d4101 	.word	0xa91d4101
 8009a64:	3fd17460 	.word	0x3fd17460
 8009a68:	518f264d 	.word	0x518f264d
 8009a6c:	3fd55555 	.word	0x3fd55555
 8009a70:	db6fabff 	.word	0xdb6fabff
 8009a74:	3fdb6db6 	.word	0x3fdb6db6
 8009a78:	33333303 	.word	0x33333303
 8009a7c:	3fe33333 	.word	0x3fe33333
 8009a80:	e0000000 	.word	0xe0000000
 8009a84:	3feec709 	.word	0x3feec709
 8009a88:	dc3a03fd 	.word	0xdc3a03fd
 8009a8c:	3feec709 	.word	0x3feec709
 8009a90:	145b01f5 	.word	0x145b01f5
 8009a94:	be3e2fe0 	.word	0xbe3e2fe0
 8009a98:	00000000 	.word	0x00000000
 8009a9c:	3ff00000 	.word	0x3ff00000
 8009aa0:	43400000 	.word	0x43400000
 8009aa4:	0003988e 	.word	0x0003988e
 8009aa8:	000bb679 	.word	0x000bb679
 8009aac:	0800dd18 	.word	0x0800dd18
 8009ab0:	3ff00000 	.word	0x3ff00000
 8009ab4:	40080000 	.word	0x40080000
 8009ab8:	0800dd38 	.word	0x0800dd38
 8009abc:	0800dd28 	.word	0x0800dd28
 8009ac0:	a3b4      	add	r3, pc, #720	; (adr r3, 8009d94 <__ieee754_pow+0xa14>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	4649      	mov	r1, r9
 8009aca:	f7f6 fbe7 	bl	800029c <__adddf3>
 8009ace:	4622      	mov	r2, r4
 8009ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ad4:	462b      	mov	r3, r5
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f6 fbdd 	bl	8000298 <__aeabi_dsub>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ae6:	f7f7 f81f 	bl	8000b28 <__aeabi_dcmpgt>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f47f adfe 	bne.w	80096ec <__ieee754_pow+0x36c>
 8009af0:	4aa3      	ldr	r2, [pc, #652]	; (8009d80 <__ieee754_pow+0xa00>)
 8009af2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009af6:	4293      	cmp	r3, r2
 8009af8:	f340 810a 	ble.w	8009d10 <__ieee754_pow+0x990>
 8009afc:	151b      	asrs	r3, r3, #20
 8009afe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009b02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009b06:	fa4a f303 	asr.w	r3, sl, r3
 8009b0a:	445b      	add	r3, fp
 8009b0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009b10:	4e9c      	ldr	r6, [pc, #624]	; (8009d84 <__ieee754_pow+0xa04>)
 8009b12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009b16:	4116      	asrs	r6, r2
 8009b18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	ea23 0106 	bic.w	r1, r3, r6
 8009b22:	f1c2 0214 	rsb	r2, r2, #20
 8009b26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009b2a:	fa4a fa02 	asr.w	sl, sl, r2
 8009b2e:	f1bb 0f00 	cmp.w	fp, #0
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4620      	mov	r0, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	bfb8      	it	lt
 8009b3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009b40:	f7f6 fbaa 	bl	8000298 <__aeabi_dsub>
 8009b44:	e9cd 0100 	strd	r0, r1, [sp]
 8009b48:	4642      	mov	r2, r8
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b50:	f7f6 fba4 	bl	800029c <__adddf3>
 8009b54:	2000      	movs	r0, #0
 8009b56:	a378      	add	r3, pc, #480	; (adr r3, 8009d38 <__ieee754_pow+0x9b8>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	460d      	mov	r5, r1
 8009b60:	f7f6 fd52 	bl	8000608 <__aeabi_dmul>
 8009b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b68:	4606      	mov	r6, r0
 8009b6a:	460f      	mov	r7, r1
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 fb92 	bl	8000298 <__aeabi_dsub>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f7f6 fb8c 	bl	8000298 <__aeabi_dsub>
 8009b80:	a36f      	add	r3, pc, #444	; (adr r3, 8009d40 <__ieee754_pow+0x9c0>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 fd3f 	bl	8000608 <__aeabi_dmul>
 8009b8a:	a36f      	add	r3, pc, #444	; (adr r3, 8009d48 <__ieee754_pow+0x9c8>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	4680      	mov	r8, r0
 8009b92:	4689      	mov	r9, r1
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 fd36 	bl	8000608 <__aeabi_dmul>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	4649      	mov	r1, r9
 8009ba4:	f7f6 fb7a 	bl	800029c <__adddf3>
 8009ba8:	4604      	mov	r4, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fb72 	bl	800029c <__adddf3>
 8009bb8:	4632      	mov	r2, r6
 8009bba:	463b      	mov	r3, r7
 8009bbc:	4680      	mov	r8, r0
 8009bbe:	4689      	mov	r9, r1
 8009bc0:	f7f6 fb6a 	bl	8000298 <__aeabi_dsub>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4629      	mov	r1, r5
 8009bcc:	f7f6 fb64 	bl	8000298 <__aeabi_dsub>
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	4640      	mov	r0, r8
 8009bda:	4649      	mov	r1, r9
 8009bdc:	f7f6 fd14 	bl	8000608 <__aeabi_dmul>
 8009be0:	a35b      	add	r3, pc, #364	; (adr r3, 8009d50 <__ieee754_pow+0x9d0>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	4604      	mov	r4, r0
 8009be8:	460d      	mov	r5, r1
 8009bea:	f7f6 fd0d 	bl	8000608 <__aeabi_dmul>
 8009bee:	a35a      	add	r3, pc, #360	; (adr r3, 8009d58 <__ieee754_pow+0x9d8>)
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	f7f6 fb50 	bl	8000298 <__aeabi_dsub>
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	462b      	mov	r3, r5
 8009bfc:	f7f6 fd04 	bl	8000608 <__aeabi_dmul>
 8009c00:	a357      	add	r3, pc, #348	; (adr r3, 8009d60 <__ieee754_pow+0x9e0>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	f7f6 fb49 	bl	800029c <__adddf3>
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	462b      	mov	r3, r5
 8009c0e:	f7f6 fcfb 	bl	8000608 <__aeabi_dmul>
 8009c12:	a355      	add	r3, pc, #340	; (adr r3, 8009d68 <__ieee754_pow+0x9e8>)
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	f7f6 fb3e 	bl	8000298 <__aeabi_dsub>
 8009c1c:	4622      	mov	r2, r4
 8009c1e:	462b      	mov	r3, r5
 8009c20:	f7f6 fcf2 	bl	8000608 <__aeabi_dmul>
 8009c24:	a352      	add	r3, pc, #328	; (adr r3, 8009d70 <__ieee754_pow+0x9f0>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	f7f6 fb37 	bl	800029c <__adddf3>
 8009c2e:	4622      	mov	r2, r4
 8009c30:	462b      	mov	r3, r5
 8009c32:	f7f6 fce9 	bl	8000608 <__aeabi_dmul>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	f7f6 fb2b 	bl	8000298 <__aeabi_dsub>
 8009c42:	4604      	mov	r4, r0
 8009c44:	460d      	mov	r5, r1
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fcdb 	bl	8000608 <__aeabi_dmul>
 8009c52:	2200      	movs	r2, #0
 8009c54:	e9cd 0100 	strd	r0, r1, [sp]
 8009c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7f6 fb1a 	bl	8000298 <__aeabi_dsub>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c6c:	f7f6 fdf6 	bl	800085c <__aeabi_ddiv>
 8009c70:	4632      	mov	r2, r6
 8009c72:	4604      	mov	r4, r0
 8009c74:	460d      	mov	r5, r1
 8009c76:	463b      	mov	r3, r7
 8009c78:	4640      	mov	r0, r8
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 fcc4 	bl	8000608 <__aeabi_dmul>
 8009c80:	4632      	mov	r2, r6
 8009c82:	463b      	mov	r3, r7
 8009c84:	f7f6 fb0a 	bl	800029c <__adddf3>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	4629      	mov	r1, r5
 8009c90:	f7f6 fb02 	bl	8000298 <__aeabi_dsub>
 8009c94:	4642      	mov	r2, r8
 8009c96:	464b      	mov	r3, r9
 8009c98:	f7f6 fafe 	bl	8000298 <__aeabi_dsub>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	4939      	ldr	r1, [pc, #228]	; (8009d88 <__ieee754_pow+0xa08>)
 8009ca4:	f7f6 faf8 	bl	8000298 <__aeabi_dsub>
 8009ca8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009cac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	da2f      	bge.n	8009d16 <__ieee754_pow+0x996>
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	ec43 2b10 	vmov	d0, r2, r3
 8009cbc:	f000 f9c0 	bl	800a040 <scalbn>
 8009cc0:	ec51 0b10 	vmov	r0, r1, d0
 8009cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cc8:	f7ff bbf1 	b.w	80094ae <__ieee754_pow+0x12e>
 8009ccc:	4b2f      	ldr	r3, [pc, #188]	; (8009d8c <__ieee754_pow+0xa0c>)
 8009cce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009cd2:	429e      	cmp	r6, r3
 8009cd4:	f77f af0c 	ble.w	8009af0 <__ieee754_pow+0x770>
 8009cd8:	4b2d      	ldr	r3, [pc, #180]	; (8009d90 <__ieee754_pow+0xa10>)
 8009cda:	440b      	add	r3, r1
 8009cdc:	4303      	orrs	r3, r0
 8009cde:	d00b      	beq.n	8009cf8 <__ieee754_pow+0x978>
 8009ce0:	a325      	add	r3, pc, #148	; (adr r3, 8009d78 <__ieee754_pow+0x9f8>)
 8009ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cea:	f7f6 fc8d 	bl	8000608 <__aeabi_dmul>
 8009cee:	a322      	add	r3, pc, #136	; (adr r3, 8009d78 <__ieee754_pow+0x9f8>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f7ff bbdb 	b.w	80094ae <__ieee754_pow+0x12e>
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	462b      	mov	r3, r5
 8009cfc:	f7f6 facc 	bl	8000298 <__aeabi_dsub>
 8009d00:	4642      	mov	r2, r8
 8009d02:	464b      	mov	r3, r9
 8009d04:	f7f6 ff06 	bl	8000b14 <__aeabi_dcmpge>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f43f aef1 	beq.w	8009af0 <__ieee754_pow+0x770>
 8009d0e:	e7e7      	b.n	8009ce0 <__ieee754_pow+0x960>
 8009d10:	f04f 0a00 	mov.w	sl, #0
 8009d14:	e718      	b.n	8009b48 <__ieee754_pow+0x7c8>
 8009d16:	4621      	mov	r1, r4
 8009d18:	e7d4      	b.n	8009cc4 <__ieee754_pow+0x944>
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	491a      	ldr	r1, [pc, #104]	; (8009d88 <__ieee754_pow+0xa08>)
 8009d1e:	f7ff bb8f 	b.w	8009440 <__ieee754_pow+0xc0>
 8009d22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d26:	f7ff bb8b 	b.w	8009440 <__ieee754_pow+0xc0>
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	f7ff bb87 	b.w	8009440 <__ieee754_pow+0xc0>
 8009d32:	4693      	mov	fp, r2
 8009d34:	f7ff bb98 	b.w	8009468 <__ieee754_pow+0xe8>
 8009d38:	00000000 	.word	0x00000000
 8009d3c:	3fe62e43 	.word	0x3fe62e43
 8009d40:	fefa39ef 	.word	0xfefa39ef
 8009d44:	3fe62e42 	.word	0x3fe62e42
 8009d48:	0ca86c39 	.word	0x0ca86c39
 8009d4c:	be205c61 	.word	0xbe205c61
 8009d50:	72bea4d0 	.word	0x72bea4d0
 8009d54:	3e663769 	.word	0x3e663769
 8009d58:	c5d26bf1 	.word	0xc5d26bf1
 8009d5c:	3ebbbd41 	.word	0x3ebbbd41
 8009d60:	af25de2c 	.word	0xaf25de2c
 8009d64:	3f11566a 	.word	0x3f11566a
 8009d68:	16bebd93 	.word	0x16bebd93
 8009d6c:	3f66c16c 	.word	0x3f66c16c
 8009d70:	5555553e 	.word	0x5555553e
 8009d74:	3fc55555 	.word	0x3fc55555
 8009d78:	c2f8f359 	.word	0xc2f8f359
 8009d7c:	01a56e1f 	.word	0x01a56e1f
 8009d80:	3fe00000 	.word	0x3fe00000
 8009d84:	000fffff 	.word	0x000fffff
 8009d88:	3ff00000 	.word	0x3ff00000
 8009d8c:	4090cbff 	.word	0x4090cbff
 8009d90:	3f6f3400 	.word	0x3f6f3400
 8009d94:	652b82fe 	.word	0x652b82fe
 8009d98:	3c971547 	.word	0x3c971547

08009d9c <__ieee754_sqrt>:
 8009d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da0:	4955      	ldr	r1, [pc, #340]	; (8009ef8 <__ieee754_sqrt+0x15c>)
 8009da2:	ec55 4b10 	vmov	r4, r5, d0
 8009da6:	43a9      	bics	r1, r5
 8009da8:	462b      	mov	r3, r5
 8009daa:	462a      	mov	r2, r5
 8009dac:	d112      	bne.n	8009dd4 <__ieee754_sqrt+0x38>
 8009dae:	ee10 2a10 	vmov	r2, s0
 8009db2:	ee10 0a10 	vmov	r0, s0
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fc26 	bl	8000608 <__aeabi_dmul>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f7f6 fa6a 	bl	800029c <__adddf3>
 8009dc8:	4604      	mov	r4, r0
 8009dca:	460d      	mov	r5, r1
 8009dcc:	ec45 4b10 	vmov	d0, r4, r5
 8009dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd4:	2d00      	cmp	r5, #0
 8009dd6:	ee10 0a10 	vmov	r0, s0
 8009dda:	4621      	mov	r1, r4
 8009ddc:	dc0f      	bgt.n	8009dfe <__ieee754_sqrt+0x62>
 8009dde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009de2:	4330      	orrs	r0, r6
 8009de4:	d0f2      	beq.n	8009dcc <__ieee754_sqrt+0x30>
 8009de6:	b155      	cbz	r5, 8009dfe <__ieee754_sqrt+0x62>
 8009de8:	ee10 2a10 	vmov	r2, s0
 8009dec:	4620      	mov	r0, r4
 8009dee:	4629      	mov	r1, r5
 8009df0:	f7f6 fa52 	bl	8000298 <__aeabi_dsub>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	f7f6 fd30 	bl	800085c <__aeabi_ddiv>
 8009dfc:	e7e4      	b.n	8009dc8 <__ieee754_sqrt+0x2c>
 8009dfe:	151b      	asrs	r3, r3, #20
 8009e00:	d073      	beq.n	8009eea <__ieee754_sqrt+0x14e>
 8009e02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e06:	07dd      	lsls	r5, r3, #31
 8009e08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009e0c:	bf48      	it	mi
 8009e0e:	0fc8      	lsrmi	r0, r1, #31
 8009e10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009e14:	bf44      	itt	mi
 8009e16:	0049      	lslmi	r1, r1, #1
 8009e18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009e1c:	2500      	movs	r5, #0
 8009e1e:	1058      	asrs	r0, r3, #1
 8009e20:	0fcb      	lsrs	r3, r1, #31
 8009e22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009e26:	0049      	lsls	r1, r1, #1
 8009e28:	2316      	movs	r3, #22
 8009e2a:	462c      	mov	r4, r5
 8009e2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009e30:	19a7      	adds	r7, r4, r6
 8009e32:	4297      	cmp	r7, r2
 8009e34:	bfde      	ittt	le
 8009e36:	19bc      	addle	r4, r7, r6
 8009e38:	1bd2      	suble	r2, r2, r7
 8009e3a:	19ad      	addle	r5, r5, r6
 8009e3c:	0fcf      	lsrs	r7, r1, #31
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009e44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e4c:	d1f0      	bne.n	8009e30 <__ieee754_sqrt+0x94>
 8009e4e:	f04f 0c20 	mov.w	ip, #32
 8009e52:	469e      	mov	lr, r3
 8009e54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e58:	42a2      	cmp	r2, r4
 8009e5a:	eb06 070e 	add.w	r7, r6, lr
 8009e5e:	dc02      	bgt.n	8009e66 <__ieee754_sqrt+0xca>
 8009e60:	d112      	bne.n	8009e88 <__ieee754_sqrt+0xec>
 8009e62:	428f      	cmp	r7, r1
 8009e64:	d810      	bhi.n	8009e88 <__ieee754_sqrt+0xec>
 8009e66:	2f00      	cmp	r7, #0
 8009e68:	eb07 0e06 	add.w	lr, r7, r6
 8009e6c:	da42      	bge.n	8009ef4 <__ieee754_sqrt+0x158>
 8009e6e:	f1be 0f00 	cmp.w	lr, #0
 8009e72:	db3f      	blt.n	8009ef4 <__ieee754_sqrt+0x158>
 8009e74:	f104 0801 	add.w	r8, r4, #1
 8009e78:	1b12      	subs	r2, r2, r4
 8009e7a:	428f      	cmp	r7, r1
 8009e7c:	bf88      	it	hi
 8009e7e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009e82:	1bc9      	subs	r1, r1, r7
 8009e84:	4433      	add	r3, r6
 8009e86:	4644      	mov	r4, r8
 8009e88:	0052      	lsls	r2, r2, #1
 8009e8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8009e8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009e92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e9a:	d1dd      	bne.n	8009e58 <__ieee754_sqrt+0xbc>
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	d006      	beq.n	8009eae <__ieee754_sqrt+0x112>
 8009ea0:	1c5c      	adds	r4, r3, #1
 8009ea2:	bf13      	iteet	ne
 8009ea4:	3301      	addne	r3, #1
 8009ea6:	3501      	addeq	r5, #1
 8009ea8:	4663      	moveq	r3, ip
 8009eaa:	f023 0301 	bicne.w	r3, r3, #1
 8009eae:	106a      	asrs	r2, r5, #1
 8009eb0:	085b      	lsrs	r3, r3, #1
 8009eb2:	07e9      	lsls	r1, r5, #31
 8009eb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009eb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009ebc:	bf48      	it	mi
 8009ebe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009ec2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009ec6:	461c      	mov	r4, r3
 8009ec8:	e780      	b.n	8009dcc <__ieee754_sqrt+0x30>
 8009eca:	0aca      	lsrs	r2, r1, #11
 8009ecc:	3815      	subs	r0, #21
 8009ece:	0549      	lsls	r1, r1, #21
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	d0fa      	beq.n	8009eca <__ieee754_sqrt+0x12e>
 8009ed4:	02d6      	lsls	r6, r2, #11
 8009ed6:	d50a      	bpl.n	8009eee <__ieee754_sqrt+0x152>
 8009ed8:	f1c3 0420 	rsb	r4, r3, #32
 8009edc:	fa21 f404 	lsr.w	r4, r1, r4
 8009ee0:	1e5d      	subs	r5, r3, #1
 8009ee2:	4099      	lsls	r1, r3
 8009ee4:	4322      	orrs	r2, r4
 8009ee6:	1b43      	subs	r3, r0, r5
 8009ee8:	e78b      	b.n	8009e02 <__ieee754_sqrt+0x66>
 8009eea:	4618      	mov	r0, r3
 8009eec:	e7f0      	b.n	8009ed0 <__ieee754_sqrt+0x134>
 8009eee:	0052      	lsls	r2, r2, #1
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	e7ef      	b.n	8009ed4 <__ieee754_sqrt+0x138>
 8009ef4:	46a0      	mov	r8, r4
 8009ef6:	e7bf      	b.n	8009e78 <__ieee754_sqrt+0xdc>
 8009ef8:	7ff00000 	.word	0x7ff00000

08009efc <fabs>:
 8009efc:	ec51 0b10 	vmov	r0, r1, d0
 8009f00:	ee10 2a10 	vmov	r2, s0
 8009f04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f08:	ec43 2b10 	vmov	d0, r2, r3
 8009f0c:	4770      	bx	lr

08009f0e <finite>:
 8009f0e:	ee10 3a90 	vmov	r3, s1
 8009f12:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009f16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f1a:	0fc0      	lsrs	r0, r0, #31
 8009f1c:	4770      	bx	lr

08009f1e <matherr>:
 8009f1e:	2000      	movs	r0, #0
 8009f20:	4770      	bx	lr
 8009f22:	0000      	movs	r0, r0
 8009f24:	0000      	movs	r0, r0
	...

08009f28 <nan>:
 8009f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f30 <nan+0x8>
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	00000000 	.word	0x00000000
 8009f34:	7ff80000 	.word	0x7ff80000

08009f38 <rint>:
 8009f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f3a:	ec51 0b10 	vmov	r0, r1, d0
 8009f3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009f46:	2e13      	cmp	r6, #19
 8009f48:	460b      	mov	r3, r1
 8009f4a:	ee10 4a10 	vmov	r4, s0
 8009f4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009f52:	dc56      	bgt.n	800a002 <rint+0xca>
 8009f54:	2e00      	cmp	r6, #0
 8009f56:	da2b      	bge.n	8009fb0 <rint+0x78>
 8009f58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009f5c:	4302      	orrs	r2, r0
 8009f5e:	d023      	beq.n	8009fa8 <rint+0x70>
 8009f60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009f64:	4302      	orrs	r2, r0
 8009f66:	4254      	negs	r4, r2
 8009f68:	4314      	orrs	r4, r2
 8009f6a:	0c4b      	lsrs	r3, r1, #17
 8009f6c:	0b24      	lsrs	r4, r4, #12
 8009f6e:	045b      	lsls	r3, r3, #17
 8009f70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009f74:	ea44 0103 	orr.w	r1, r4, r3
 8009f78:	460b      	mov	r3, r1
 8009f7a:	492f      	ldr	r1, [pc, #188]	; (800a038 <rint+0x100>)
 8009f7c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009f80:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009f84:	4602      	mov	r2, r0
 8009f86:	4639      	mov	r1, r7
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7f6 f987 	bl	800029c <__adddf3>
 8009f8e:	e9cd 0100 	strd	r0, r1, [sp]
 8009f92:	463b      	mov	r3, r7
 8009f94:	4632      	mov	r2, r6
 8009f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f9a:	f7f6 f97d 	bl	8000298 <__aeabi_dsub>
 8009f9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fa2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	ec41 0b10 	vmov	d0, r0, r1
 8009fac:	b003      	add	sp, #12
 8009fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb0:	4a22      	ldr	r2, [pc, #136]	; (800a03c <rint+0x104>)
 8009fb2:	4132      	asrs	r2, r6
 8009fb4:	ea01 0702 	and.w	r7, r1, r2
 8009fb8:	4307      	orrs	r7, r0
 8009fba:	d0f5      	beq.n	8009fa8 <rint+0x70>
 8009fbc:	0852      	lsrs	r2, r2, #1
 8009fbe:	4011      	ands	r1, r2
 8009fc0:	430c      	orrs	r4, r1
 8009fc2:	d00b      	beq.n	8009fdc <rint+0xa4>
 8009fc4:	ea23 0202 	bic.w	r2, r3, r2
 8009fc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009fcc:	2e13      	cmp	r6, #19
 8009fce:	fa43 f306 	asr.w	r3, r3, r6
 8009fd2:	bf0c      	ite	eq
 8009fd4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009fd8:	2400      	movne	r4, #0
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	4916      	ldr	r1, [pc, #88]	; (800a038 <rint+0x100>)
 8009fde:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 f956 	bl	800029c <__adddf3>
 8009ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	462b      	mov	r3, r5
 8009ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ffc:	f7f6 f94c 	bl	8000298 <__aeabi_dsub>
 800a000:	e7d2      	b.n	8009fa8 <rint+0x70>
 800a002:	2e33      	cmp	r6, #51	; 0x33
 800a004:	dd07      	ble.n	800a016 <rint+0xde>
 800a006:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a00a:	d1cd      	bne.n	8009fa8 <rint+0x70>
 800a00c:	ee10 2a10 	vmov	r2, s0
 800a010:	f7f6 f944 	bl	800029c <__adddf3>
 800a014:	e7c8      	b.n	8009fa8 <rint+0x70>
 800a016:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	40f2      	lsrs	r2, r6
 800a020:	4210      	tst	r0, r2
 800a022:	d0c1      	beq.n	8009fa8 <rint+0x70>
 800a024:	0852      	lsrs	r2, r2, #1
 800a026:	4210      	tst	r0, r2
 800a028:	bf1f      	itttt	ne
 800a02a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a02e:	ea20 0202 	bicne.w	r2, r0, r2
 800a032:	4134      	asrne	r4, r6
 800a034:	4314      	orrne	r4, r2
 800a036:	e7d1      	b.n	8009fdc <rint+0xa4>
 800a038:	0800dd48 	.word	0x0800dd48
 800a03c:	000fffff 	.word	0x000fffff

0800a040 <scalbn>:
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	ec55 4b10 	vmov	r4, r5, d0
 800a046:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a04a:	4606      	mov	r6, r0
 800a04c:	462b      	mov	r3, r5
 800a04e:	b9aa      	cbnz	r2, 800a07c <scalbn+0x3c>
 800a050:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a054:	4323      	orrs	r3, r4
 800a056:	d03b      	beq.n	800a0d0 <scalbn+0x90>
 800a058:	4b31      	ldr	r3, [pc, #196]	; (800a120 <scalbn+0xe0>)
 800a05a:	4629      	mov	r1, r5
 800a05c:	2200      	movs	r2, #0
 800a05e:	ee10 0a10 	vmov	r0, s0
 800a062:	f7f6 fad1 	bl	8000608 <__aeabi_dmul>
 800a066:	4b2f      	ldr	r3, [pc, #188]	; (800a124 <scalbn+0xe4>)
 800a068:	429e      	cmp	r6, r3
 800a06a:	4604      	mov	r4, r0
 800a06c:	460d      	mov	r5, r1
 800a06e:	da12      	bge.n	800a096 <scalbn+0x56>
 800a070:	a327      	add	r3, pc, #156	; (adr r3, 800a110 <scalbn+0xd0>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7f6 fac7 	bl	8000608 <__aeabi_dmul>
 800a07a:	e009      	b.n	800a090 <scalbn+0x50>
 800a07c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a080:	428a      	cmp	r2, r1
 800a082:	d10c      	bne.n	800a09e <scalbn+0x5e>
 800a084:	ee10 2a10 	vmov	r2, s0
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 f906 	bl	800029c <__adddf3>
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	e01c      	b.n	800a0d0 <scalbn+0x90>
 800a096:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a09a:	460b      	mov	r3, r1
 800a09c:	3a36      	subs	r2, #54	; 0x36
 800a09e:	4432      	add	r2, r6
 800a0a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a0a4:	428a      	cmp	r2, r1
 800a0a6:	dd0b      	ble.n	800a0c0 <scalbn+0x80>
 800a0a8:	ec45 4b11 	vmov	d1, r4, r5
 800a0ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a118 <scalbn+0xd8>
 800a0b0:	f000 f83c 	bl	800a12c <copysign>
 800a0b4:	a318      	add	r3, pc, #96	; (adr r3, 800a118 <scalbn+0xd8>)
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	ec51 0b10 	vmov	r0, r1, d0
 800a0be:	e7da      	b.n	800a076 <scalbn+0x36>
 800a0c0:	2a00      	cmp	r2, #0
 800a0c2:	dd08      	ble.n	800a0d6 <scalbn+0x96>
 800a0c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0d0:	ec45 4b10 	vmov	d0, r4, r5
 800a0d4:	bd70      	pop	{r4, r5, r6, pc}
 800a0d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a0da:	da0d      	bge.n	800a0f8 <scalbn+0xb8>
 800a0dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a0e0:	429e      	cmp	r6, r3
 800a0e2:	ec45 4b11 	vmov	d1, r4, r5
 800a0e6:	dce1      	bgt.n	800a0ac <scalbn+0x6c>
 800a0e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a110 <scalbn+0xd0>
 800a0ec:	f000 f81e 	bl	800a12c <copysign>
 800a0f0:	a307      	add	r3, pc, #28	; (adr r3, 800a110 <scalbn+0xd0>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	e7e0      	b.n	800a0ba <scalbn+0x7a>
 800a0f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0fc:	3236      	adds	r2, #54	; 0x36
 800a0fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a102:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a106:	4620      	mov	r0, r4
 800a108:	4629      	mov	r1, r5
 800a10a:	2200      	movs	r2, #0
 800a10c:	4b06      	ldr	r3, [pc, #24]	; (800a128 <scalbn+0xe8>)
 800a10e:	e7b2      	b.n	800a076 <scalbn+0x36>
 800a110:	c2f8f359 	.word	0xc2f8f359
 800a114:	01a56e1f 	.word	0x01a56e1f
 800a118:	8800759c 	.word	0x8800759c
 800a11c:	7e37e43c 	.word	0x7e37e43c
 800a120:	43500000 	.word	0x43500000
 800a124:	ffff3cb0 	.word	0xffff3cb0
 800a128:	3c900000 	.word	0x3c900000

0800a12c <copysign>:
 800a12c:	ec51 0b10 	vmov	r0, r1, d0
 800a130:	ee11 0a90 	vmov	r0, s3
 800a134:	ee10 2a10 	vmov	r2, s0
 800a138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a13c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a140:	ea41 0300 	orr.w	r3, r1, r0
 800a144:	ec43 2b10 	vmov	d0, r2, r3
 800a148:	4770      	bx	lr
	...

0800a14c <__errno>:
 800a14c:	4b01      	ldr	r3, [pc, #4]	; (800a154 <__errno+0x8>)
 800a14e:	6818      	ldr	r0, [r3, #0]
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000034 	.word	0x20000034

0800a158 <__libc_init_array>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4e0d      	ldr	r6, [pc, #52]	; (800a190 <__libc_init_array+0x38>)
 800a15c:	4c0d      	ldr	r4, [pc, #52]	; (800a194 <__libc_init_array+0x3c>)
 800a15e:	1ba4      	subs	r4, r4, r6
 800a160:	10a4      	asrs	r4, r4, #2
 800a162:	2500      	movs	r5, #0
 800a164:	42a5      	cmp	r5, r4
 800a166:	d109      	bne.n	800a17c <__libc_init_array+0x24>
 800a168:	4e0b      	ldr	r6, [pc, #44]	; (800a198 <__libc_init_array+0x40>)
 800a16a:	4c0c      	ldr	r4, [pc, #48]	; (800a19c <__libc_init_array+0x44>)
 800a16c:	f003 fd58 	bl	800dc20 <_init>
 800a170:	1ba4      	subs	r4, r4, r6
 800a172:	10a4      	asrs	r4, r4, #2
 800a174:	2500      	movs	r5, #0
 800a176:	42a5      	cmp	r5, r4
 800a178:	d105      	bne.n	800a186 <__libc_init_array+0x2e>
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a180:	4798      	blx	r3
 800a182:	3501      	adds	r5, #1
 800a184:	e7ee      	b.n	800a164 <__libc_init_array+0xc>
 800a186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a18a:	4798      	blx	r3
 800a18c:	3501      	adds	r5, #1
 800a18e:	e7f2      	b.n	800a176 <__libc_init_array+0x1e>
 800a190:	0800e010 	.word	0x0800e010
 800a194:	0800e010 	.word	0x0800e010
 800a198:	0800e010 	.word	0x0800e010
 800a19c:	0800e018 	.word	0x0800e018

0800a1a0 <memcpy>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	1e43      	subs	r3, r0, #1
 800a1a4:	440a      	add	r2, r1
 800a1a6:	4291      	cmp	r1, r2
 800a1a8:	d100      	bne.n	800a1ac <memcpy+0xc>
 800a1aa:	bd10      	pop	{r4, pc}
 800a1ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1b4:	e7f7      	b.n	800a1a6 <memcpy+0x6>

0800a1b6 <memset>:
 800a1b6:	4402      	add	r2, r0
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d100      	bne.n	800a1c0 <memset+0xa>
 800a1be:	4770      	bx	lr
 800a1c0:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c4:	e7f9      	b.n	800a1ba <memset+0x4>

0800a1c6 <__cvt>:
 800a1c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ca:	ec55 4b10 	vmov	r4, r5, d0
 800a1ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a1d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	460e      	mov	r6, r1
 800a1d8:	4691      	mov	r9, r2
 800a1da:	4619      	mov	r1, r3
 800a1dc:	bfb8      	it	lt
 800a1de:	4622      	movlt	r2, r4
 800a1e0:	462b      	mov	r3, r5
 800a1e2:	f027 0720 	bic.w	r7, r7, #32
 800a1e6:	bfbb      	ittet	lt
 800a1e8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1ec:	461d      	movlt	r5, r3
 800a1ee:	2300      	movge	r3, #0
 800a1f0:	232d      	movlt	r3, #45	; 0x2d
 800a1f2:	bfb8      	it	lt
 800a1f4:	4614      	movlt	r4, r2
 800a1f6:	2f46      	cmp	r7, #70	; 0x46
 800a1f8:	700b      	strb	r3, [r1, #0]
 800a1fa:	d004      	beq.n	800a206 <__cvt+0x40>
 800a1fc:	2f45      	cmp	r7, #69	; 0x45
 800a1fe:	d100      	bne.n	800a202 <__cvt+0x3c>
 800a200:	3601      	adds	r6, #1
 800a202:	2102      	movs	r1, #2
 800a204:	e000      	b.n	800a208 <__cvt+0x42>
 800a206:	2103      	movs	r1, #3
 800a208:	ab03      	add	r3, sp, #12
 800a20a:	9301      	str	r3, [sp, #4]
 800a20c:	ab02      	add	r3, sp, #8
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	4632      	mov	r2, r6
 800a212:	4653      	mov	r3, sl
 800a214:	ec45 4b10 	vmov	d0, r4, r5
 800a218:	f001 fd76 	bl	800bd08 <_dtoa_r>
 800a21c:	2f47      	cmp	r7, #71	; 0x47
 800a21e:	4680      	mov	r8, r0
 800a220:	d102      	bne.n	800a228 <__cvt+0x62>
 800a222:	f019 0f01 	tst.w	r9, #1
 800a226:	d026      	beq.n	800a276 <__cvt+0xb0>
 800a228:	2f46      	cmp	r7, #70	; 0x46
 800a22a:	eb08 0906 	add.w	r9, r8, r6
 800a22e:	d111      	bne.n	800a254 <__cvt+0x8e>
 800a230:	f898 3000 	ldrb.w	r3, [r8]
 800a234:	2b30      	cmp	r3, #48	; 0x30
 800a236:	d10a      	bne.n	800a24e <__cvt+0x88>
 800a238:	2200      	movs	r2, #0
 800a23a:	2300      	movs	r3, #0
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f6 fc4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a244:	b918      	cbnz	r0, 800a24e <__cvt+0x88>
 800a246:	f1c6 0601 	rsb	r6, r6, #1
 800a24a:	f8ca 6000 	str.w	r6, [sl]
 800a24e:	f8da 3000 	ldr.w	r3, [sl]
 800a252:	4499      	add	r9, r3
 800a254:	2200      	movs	r2, #0
 800a256:	2300      	movs	r3, #0
 800a258:	4620      	mov	r0, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	f7f6 fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a260:	b938      	cbnz	r0, 800a272 <__cvt+0xac>
 800a262:	2230      	movs	r2, #48	; 0x30
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	454b      	cmp	r3, r9
 800a268:	d205      	bcs.n	800a276 <__cvt+0xb0>
 800a26a:	1c59      	adds	r1, r3, #1
 800a26c:	9103      	str	r1, [sp, #12]
 800a26e:	701a      	strb	r2, [r3, #0]
 800a270:	e7f8      	b.n	800a264 <__cvt+0x9e>
 800a272:	f8cd 900c 	str.w	r9, [sp, #12]
 800a276:	9b03      	ldr	r3, [sp, #12]
 800a278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a27a:	eba3 0308 	sub.w	r3, r3, r8
 800a27e:	4640      	mov	r0, r8
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	b004      	add	sp, #16
 800a284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a288 <__exponent>:
 800a288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a28a:	2900      	cmp	r1, #0
 800a28c:	4604      	mov	r4, r0
 800a28e:	bfba      	itte	lt
 800a290:	4249      	neglt	r1, r1
 800a292:	232d      	movlt	r3, #45	; 0x2d
 800a294:	232b      	movge	r3, #43	; 0x2b
 800a296:	2909      	cmp	r1, #9
 800a298:	f804 2b02 	strb.w	r2, [r4], #2
 800a29c:	7043      	strb	r3, [r0, #1]
 800a29e:	dd20      	ble.n	800a2e2 <__exponent+0x5a>
 800a2a0:	f10d 0307 	add.w	r3, sp, #7
 800a2a4:	461f      	mov	r7, r3
 800a2a6:	260a      	movs	r6, #10
 800a2a8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a2ac:	fb06 1115 	mls	r1, r6, r5, r1
 800a2b0:	3130      	adds	r1, #48	; 0x30
 800a2b2:	2d09      	cmp	r5, #9
 800a2b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a2b8:	f103 32ff 	add.w	r2, r3, #4294967295
 800a2bc:	4629      	mov	r1, r5
 800a2be:	dc09      	bgt.n	800a2d4 <__exponent+0x4c>
 800a2c0:	3130      	adds	r1, #48	; 0x30
 800a2c2:	3b02      	subs	r3, #2
 800a2c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a2c8:	42bb      	cmp	r3, r7
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	d304      	bcc.n	800a2d8 <__exponent+0x50>
 800a2ce:	1a10      	subs	r0, r2, r0
 800a2d0:	b003      	add	sp, #12
 800a2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	e7e7      	b.n	800a2a8 <__exponent+0x20>
 800a2d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2dc:	f804 2b01 	strb.w	r2, [r4], #1
 800a2e0:	e7f2      	b.n	800a2c8 <__exponent+0x40>
 800a2e2:	2330      	movs	r3, #48	; 0x30
 800a2e4:	4419      	add	r1, r3
 800a2e6:	7083      	strb	r3, [r0, #2]
 800a2e8:	1d02      	adds	r2, r0, #4
 800a2ea:	70c1      	strb	r1, [r0, #3]
 800a2ec:	e7ef      	b.n	800a2ce <__exponent+0x46>
	...

0800a2f0 <_printf_float>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	b08d      	sub	sp, #52	; 0x34
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a2fc:	4616      	mov	r6, r2
 800a2fe:	461f      	mov	r7, r3
 800a300:	4605      	mov	r5, r0
 800a302:	f002 fde5 	bl	800ced0 <_localeconv_r>
 800a306:	6803      	ldr	r3, [r0, #0]
 800a308:	9304      	str	r3, [sp, #16]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7f5 ff68 	bl	80001e0 <strlen>
 800a310:	2300      	movs	r3, #0
 800a312:	930a      	str	r3, [sp, #40]	; 0x28
 800a314:	f8d8 3000 	ldr.w	r3, [r8]
 800a318:	9005      	str	r0, [sp, #20]
 800a31a:	3307      	adds	r3, #7
 800a31c:	f023 0307 	bic.w	r3, r3, #7
 800a320:	f103 0208 	add.w	r2, r3, #8
 800a324:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a328:	f8d4 b000 	ldr.w	fp, [r4]
 800a32c:	f8c8 2000 	str.w	r2, [r8]
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a338:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a33c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a340:	9307      	str	r3, [sp, #28]
 800a342:	f8cd 8018 	str.w	r8, [sp, #24]
 800a346:	f04f 32ff 	mov.w	r2, #4294967295
 800a34a:	4ba7      	ldr	r3, [pc, #668]	; (800a5e8 <_printf_float+0x2f8>)
 800a34c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a350:	f7f6 fbf4 	bl	8000b3c <__aeabi_dcmpun>
 800a354:	bb70      	cbnz	r0, 800a3b4 <_printf_float+0xc4>
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	4ba3      	ldr	r3, [pc, #652]	; (800a5e8 <_printf_float+0x2f8>)
 800a35c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a360:	f7f6 fbce 	bl	8000b00 <__aeabi_dcmple>
 800a364:	bb30      	cbnz	r0, 800a3b4 <_printf_float+0xc4>
 800a366:	2200      	movs	r2, #0
 800a368:	2300      	movs	r3, #0
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	f7f6 fbbd 	bl	8000aec <__aeabi_dcmplt>
 800a372:	b110      	cbz	r0, 800a37a <_printf_float+0x8a>
 800a374:	232d      	movs	r3, #45	; 0x2d
 800a376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a37a:	4a9c      	ldr	r2, [pc, #624]	; (800a5ec <_printf_float+0x2fc>)
 800a37c:	4b9c      	ldr	r3, [pc, #624]	; (800a5f0 <_printf_float+0x300>)
 800a37e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a382:	bf8c      	ite	hi
 800a384:	4690      	movhi	r8, r2
 800a386:	4698      	movls	r8, r3
 800a388:	2303      	movs	r3, #3
 800a38a:	f02b 0204 	bic.w	r2, fp, #4
 800a38e:	6123      	str	r3, [r4, #16]
 800a390:	6022      	str	r2, [r4, #0]
 800a392:	f04f 0900 	mov.w	r9, #0
 800a396:	9700      	str	r7, [sp, #0]
 800a398:	4633      	mov	r3, r6
 800a39a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a39c:	4621      	mov	r1, r4
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f000 f9e6 	bl	800a770 <_printf_common>
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f040 808d 	bne.w	800a4c4 <_printf_float+0x1d4>
 800a3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ae:	b00d      	add	sp, #52	; 0x34
 800a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b4:	4642      	mov	r2, r8
 800a3b6:	464b      	mov	r3, r9
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7f6 fbbe 	bl	8000b3c <__aeabi_dcmpun>
 800a3c0:	b110      	cbz	r0, 800a3c8 <_printf_float+0xd8>
 800a3c2:	4a8c      	ldr	r2, [pc, #560]	; (800a5f4 <_printf_float+0x304>)
 800a3c4:	4b8c      	ldr	r3, [pc, #560]	; (800a5f8 <_printf_float+0x308>)
 800a3c6:	e7da      	b.n	800a37e <_printf_float+0x8e>
 800a3c8:	6861      	ldr	r1, [r4, #4]
 800a3ca:	1c4b      	adds	r3, r1, #1
 800a3cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a3d0:	a80a      	add	r0, sp, #40	; 0x28
 800a3d2:	d13e      	bne.n	800a452 <_printf_float+0x162>
 800a3d4:	2306      	movs	r3, #6
 800a3d6:	6063      	str	r3, [r4, #4]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a3de:	ab09      	add	r3, sp, #36	; 0x24
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	ec49 8b10 	vmov	d0, r8, r9
 800a3e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3ea:	6022      	str	r2, [r4, #0]
 800a3ec:	f8cd a004 	str.w	sl, [sp, #4]
 800a3f0:	6861      	ldr	r1, [r4, #4]
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f7ff fee7 	bl	800a1c6 <__cvt>
 800a3f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a3fc:	2b47      	cmp	r3, #71	; 0x47
 800a3fe:	4680      	mov	r8, r0
 800a400:	d109      	bne.n	800a416 <_printf_float+0x126>
 800a402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a404:	1cd8      	adds	r0, r3, #3
 800a406:	db02      	blt.n	800a40e <_printf_float+0x11e>
 800a408:	6862      	ldr	r2, [r4, #4]
 800a40a:	4293      	cmp	r3, r2
 800a40c:	dd47      	ble.n	800a49e <_printf_float+0x1ae>
 800a40e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a412:	fa5f fa8a 	uxtb.w	sl, sl
 800a416:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a41a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a41c:	d824      	bhi.n	800a468 <_printf_float+0x178>
 800a41e:	3901      	subs	r1, #1
 800a420:	4652      	mov	r2, sl
 800a422:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a426:	9109      	str	r1, [sp, #36]	; 0x24
 800a428:	f7ff ff2e 	bl	800a288 <__exponent>
 800a42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a42e:	1813      	adds	r3, r2, r0
 800a430:	2a01      	cmp	r2, #1
 800a432:	4681      	mov	r9, r0
 800a434:	6123      	str	r3, [r4, #16]
 800a436:	dc02      	bgt.n	800a43e <_printf_float+0x14e>
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	07d1      	lsls	r1, r2, #31
 800a43c:	d501      	bpl.n	800a442 <_printf_float+0x152>
 800a43e:	3301      	adds	r3, #1
 800a440:	6123      	str	r3, [r4, #16]
 800a442:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0a5      	beq.n	800a396 <_printf_float+0xa6>
 800a44a:	232d      	movs	r3, #45	; 0x2d
 800a44c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a450:	e7a1      	b.n	800a396 <_printf_float+0xa6>
 800a452:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a456:	f000 8177 	beq.w	800a748 <_printf_float+0x458>
 800a45a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a45e:	d1bb      	bne.n	800a3d8 <_printf_float+0xe8>
 800a460:	2900      	cmp	r1, #0
 800a462:	d1b9      	bne.n	800a3d8 <_printf_float+0xe8>
 800a464:	2301      	movs	r3, #1
 800a466:	e7b6      	b.n	800a3d6 <_printf_float+0xe6>
 800a468:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a46c:	d119      	bne.n	800a4a2 <_printf_float+0x1b2>
 800a46e:	2900      	cmp	r1, #0
 800a470:	6863      	ldr	r3, [r4, #4]
 800a472:	dd0c      	ble.n	800a48e <_printf_float+0x19e>
 800a474:	6121      	str	r1, [r4, #16]
 800a476:	b913      	cbnz	r3, 800a47e <_printf_float+0x18e>
 800a478:	6822      	ldr	r2, [r4, #0]
 800a47a:	07d2      	lsls	r2, r2, #31
 800a47c:	d502      	bpl.n	800a484 <_printf_float+0x194>
 800a47e:	3301      	adds	r3, #1
 800a480:	440b      	add	r3, r1
 800a482:	6123      	str	r3, [r4, #16]
 800a484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a486:	65a3      	str	r3, [r4, #88]	; 0x58
 800a488:	f04f 0900 	mov.w	r9, #0
 800a48c:	e7d9      	b.n	800a442 <_printf_float+0x152>
 800a48e:	b913      	cbnz	r3, 800a496 <_printf_float+0x1a6>
 800a490:	6822      	ldr	r2, [r4, #0]
 800a492:	07d0      	lsls	r0, r2, #31
 800a494:	d501      	bpl.n	800a49a <_printf_float+0x1aa>
 800a496:	3302      	adds	r3, #2
 800a498:	e7f3      	b.n	800a482 <_printf_float+0x192>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e7f1      	b.n	800a482 <_printf_float+0x192>
 800a49e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a4a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	db05      	blt.n	800a4b6 <_printf_float+0x1c6>
 800a4aa:	6822      	ldr	r2, [r4, #0]
 800a4ac:	6123      	str	r3, [r4, #16]
 800a4ae:	07d1      	lsls	r1, r2, #31
 800a4b0:	d5e8      	bpl.n	800a484 <_printf_float+0x194>
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	e7e5      	b.n	800a482 <_printf_float+0x192>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfd4      	ite	le
 800a4ba:	f1c3 0302 	rsble	r3, r3, #2
 800a4be:	2301      	movgt	r3, #1
 800a4c0:	4413      	add	r3, r2
 800a4c2:	e7de      	b.n	800a482 <_printf_float+0x192>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	055a      	lsls	r2, r3, #21
 800a4c8:	d407      	bmi.n	800a4da <_printf_float+0x1ea>
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	47b8      	blx	r7
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d12b      	bne.n	800a530 <_printf_float+0x240>
 800a4d8:	e767      	b.n	800a3aa <_printf_float+0xba>
 800a4da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a4de:	f240 80dc 	bls.w	800a69a <_printf_float+0x3aa>
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4ea:	f7f6 faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d033      	beq.n	800a55a <_printf_float+0x26a>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4a41      	ldr	r2, [pc, #260]	; (800a5fc <_printf_float+0x30c>)
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f43f af54 	beq.w	800a3aa <_printf_float+0xba>
 800a502:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a506:	429a      	cmp	r2, r3
 800a508:	db02      	blt.n	800a510 <_printf_float+0x220>
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	07d8      	lsls	r0, r3, #31
 800a50e:	d50f      	bpl.n	800a530 <_printf_float+0x240>
 800a510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a514:	4631      	mov	r1, r6
 800a516:	4628      	mov	r0, r5
 800a518:	47b8      	blx	r7
 800a51a:	3001      	adds	r0, #1
 800a51c:	f43f af45 	beq.w	800a3aa <_printf_float+0xba>
 800a520:	f04f 0800 	mov.w	r8, #0
 800a524:	f104 091a 	add.w	r9, r4, #26
 800a528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a52a:	3b01      	subs	r3, #1
 800a52c:	4543      	cmp	r3, r8
 800a52e:	dc09      	bgt.n	800a544 <_printf_float+0x254>
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	079b      	lsls	r3, r3, #30
 800a534:	f100 8103 	bmi.w	800a73e <_printf_float+0x44e>
 800a538:	68e0      	ldr	r0, [r4, #12]
 800a53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53c:	4298      	cmp	r0, r3
 800a53e:	bfb8      	it	lt
 800a540:	4618      	movlt	r0, r3
 800a542:	e734      	b.n	800a3ae <_printf_float+0xbe>
 800a544:	2301      	movs	r3, #1
 800a546:	464a      	mov	r2, r9
 800a548:	4631      	mov	r1, r6
 800a54a:	4628      	mov	r0, r5
 800a54c:	47b8      	blx	r7
 800a54e:	3001      	adds	r0, #1
 800a550:	f43f af2b 	beq.w	800a3aa <_printf_float+0xba>
 800a554:	f108 0801 	add.w	r8, r8, #1
 800a558:	e7e6      	b.n	800a528 <_printf_float+0x238>
 800a55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	dc2b      	bgt.n	800a5b8 <_printf_float+0x2c8>
 800a560:	2301      	movs	r3, #1
 800a562:	4a26      	ldr	r2, [pc, #152]	; (800a5fc <_printf_float+0x30c>)
 800a564:	4631      	mov	r1, r6
 800a566:	4628      	mov	r0, r5
 800a568:	47b8      	blx	r7
 800a56a:	3001      	adds	r0, #1
 800a56c:	f43f af1d 	beq.w	800a3aa <_printf_float+0xba>
 800a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a572:	b923      	cbnz	r3, 800a57e <_printf_float+0x28e>
 800a574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a576:	b913      	cbnz	r3, 800a57e <_printf_float+0x28e>
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	07d9      	lsls	r1, r3, #31
 800a57c:	d5d8      	bpl.n	800a530 <_printf_float+0x240>
 800a57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a582:	4631      	mov	r1, r6
 800a584:	4628      	mov	r0, r5
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	f43f af0e 	beq.w	800a3aa <_printf_float+0xba>
 800a58e:	f04f 0900 	mov.w	r9, #0
 800a592:	f104 0a1a 	add.w	sl, r4, #26
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	425b      	negs	r3, r3
 800a59a:	454b      	cmp	r3, r9
 800a59c:	dc01      	bgt.n	800a5a2 <_printf_float+0x2b2>
 800a59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a0:	e794      	b.n	800a4cc <_printf_float+0x1dc>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4652      	mov	r2, sl
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	47b8      	blx	r7
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	f43f aefc 	beq.w	800a3aa <_printf_float+0xba>
 800a5b2:	f109 0901 	add.w	r9, r9, #1
 800a5b6:	e7ee      	b.n	800a596 <_printf_float+0x2a6>
 800a5b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	bfa8      	it	ge
 800a5c0:	461a      	movge	r2, r3
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	4691      	mov	r9, r2
 800a5c6:	dd07      	ble.n	800a5d8 <_printf_float+0x2e8>
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4642      	mov	r2, r8
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b8      	blx	r7
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	f43f aee9 	beq.w	800a3aa <_printf_float+0xba>
 800a5d8:	f104 031a 	add.w	r3, r4, #26
 800a5dc:	f04f 0b00 	mov.w	fp, #0
 800a5e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5e4:	9306      	str	r3, [sp, #24]
 800a5e6:	e015      	b.n	800a614 <_printf_float+0x324>
 800a5e8:	7fefffff 	.word	0x7fefffff
 800a5ec:	0800dd5c 	.word	0x0800dd5c
 800a5f0:	0800dd58 	.word	0x0800dd58
 800a5f4:	0800dd64 	.word	0x0800dd64
 800a5f8:	0800dd60 	.word	0x0800dd60
 800a5fc:	0800dd68 	.word	0x0800dd68
 800a600:	2301      	movs	r3, #1
 800a602:	9a06      	ldr	r2, [sp, #24]
 800a604:	4631      	mov	r1, r6
 800a606:	4628      	mov	r0, r5
 800a608:	47b8      	blx	r7
 800a60a:	3001      	adds	r0, #1
 800a60c:	f43f aecd 	beq.w	800a3aa <_printf_float+0xba>
 800a610:	f10b 0b01 	add.w	fp, fp, #1
 800a614:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a618:	ebaa 0309 	sub.w	r3, sl, r9
 800a61c:	455b      	cmp	r3, fp
 800a61e:	dcef      	bgt.n	800a600 <_printf_float+0x310>
 800a620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a624:	429a      	cmp	r2, r3
 800a626:	44d0      	add	r8, sl
 800a628:	db15      	blt.n	800a656 <_printf_float+0x366>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	07da      	lsls	r2, r3, #31
 800a62e:	d412      	bmi.n	800a656 <_printf_float+0x366>
 800a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a632:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a634:	eba3 020a 	sub.w	r2, r3, sl
 800a638:	eba3 0a01 	sub.w	sl, r3, r1
 800a63c:	4592      	cmp	sl, r2
 800a63e:	bfa8      	it	ge
 800a640:	4692      	movge	sl, r2
 800a642:	f1ba 0f00 	cmp.w	sl, #0
 800a646:	dc0e      	bgt.n	800a666 <_printf_float+0x376>
 800a648:	f04f 0800 	mov.w	r8, #0
 800a64c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a650:	f104 091a 	add.w	r9, r4, #26
 800a654:	e019      	b.n	800a68a <_printf_float+0x39a>
 800a656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a65a:	4631      	mov	r1, r6
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b8      	blx	r7
 800a660:	3001      	adds	r0, #1
 800a662:	d1e5      	bne.n	800a630 <_printf_float+0x340>
 800a664:	e6a1      	b.n	800a3aa <_printf_float+0xba>
 800a666:	4653      	mov	r3, sl
 800a668:	4642      	mov	r2, r8
 800a66a:	4631      	mov	r1, r6
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b8      	blx	r7
 800a670:	3001      	adds	r0, #1
 800a672:	d1e9      	bne.n	800a648 <_printf_float+0x358>
 800a674:	e699      	b.n	800a3aa <_printf_float+0xba>
 800a676:	2301      	movs	r3, #1
 800a678:	464a      	mov	r2, r9
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	f43f ae92 	beq.w	800a3aa <_printf_float+0xba>
 800a686:	f108 0801 	add.w	r8, r8, #1
 800a68a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a68e:	1a9b      	subs	r3, r3, r2
 800a690:	eba3 030a 	sub.w	r3, r3, sl
 800a694:	4543      	cmp	r3, r8
 800a696:	dcee      	bgt.n	800a676 <_printf_float+0x386>
 800a698:	e74a      	b.n	800a530 <_printf_float+0x240>
 800a69a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a69c:	2a01      	cmp	r2, #1
 800a69e:	dc01      	bgt.n	800a6a4 <_printf_float+0x3b4>
 800a6a0:	07db      	lsls	r3, r3, #31
 800a6a2:	d53a      	bpl.n	800a71a <_printf_float+0x42a>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	4642      	mov	r2, r8
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	47b8      	blx	r7
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	f43f ae7b 	beq.w	800a3aa <_printf_float+0xba>
 800a6b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b8      	blx	r7
 800a6be:	3001      	adds	r0, #1
 800a6c0:	f108 0801 	add.w	r8, r8, #1
 800a6c4:	f43f ae71 	beq.w	800a3aa <_printf_float+0xba>
 800a6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f103 3aff 	add.w	sl, r3, #4294967295
 800a6d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f7f6 f9ff 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6da:	b9c8      	cbnz	r0, 800a710 <_printf_float+0x420>
 800a6dc:	4653      	mov	r3, sl
 800a6de:	4642      	mov	r2, r8
 800a6e0:	4631      	mov	r1, r6
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	47b8      	blx	r7
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d10e      	bne.n	800a708 <_printf_float+0x418>
 800a6ea:	e65e      	b.n	800a3aa <_printf_float+0xba>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	4652      	mov	r2, sl
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	47b8      	blx	r7
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	f43f ae57 	beq.w	800a3aa <_printf_float+0xba>
 800a6fc:	f108 0801 	add.w	r8, r8, #1
 800a700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a702:	3b01      	subs	r3, #1
 800a704:	4543      	cmp	r3, r8
 800a706:	dcf1      	bgt.n	800a6ec <_printf_float+0x3fc>
 800a708:	464b      	mov	r3, r9
 800a70a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a70e:	e6de      	b.n	800a4ce <_printf_float+0x1de>
 800a710:	f04f 0800 	mov.w	r8, #0
 800a714:	f104 0a1a 	add.w	sl, r4, #26
 800a718:	e7f2      	b.n	800a700 <_printf_float+0x410>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e7df      	b.n	800a6de <_printf_float+0x3ee>
 800a71e:	2301      	movs	r3, #1
 800a720:	464a      	mov	r2, r9
 800a722:	4631      	mov	r1, r6
 800a724:	4628      	mov	r0, r5
 800a726:	47b8      	blx	r7
 800a728:	3001      	adds	r0, #1
 800a72a:	f43f ae3e 	beq.w	800a3aa <_printf_float+0xba>
 800a72e:	f108 0801 	add.w	r8, r8, #1
 800a732:	68e3      	ldr	r3, [r4, #12]
 800a734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a736:	1a9b      	subs	r3, r3, r2
 800a738:	4543      	cmp	r3, r8
 800a73a:	dcf0      	bgt.n	800a71e <_printf_float+0x42e>
 800a73c:	e6fc      	b.n	800a538 <_printf_float+0x248>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	f104 0919 	add.w	r9, r4, #25
 800a746:	e7f4      	b.n	800a732 <_printf_float+0x442>
 800a748:	2900      	cmp	r1, #0
 800a74a:	f43f ae8b 	beq.w	800a464 <_printf_float+0x174>
 800a74e:	2300      	movs	r3, #0
 800a750:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a754:	ab09      	add	r3, sp, #36	; 0x24
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	ec49 8b10 	vmov	d0, r8, r9
 800a75c:	6022      	str	r2, [r4, #0]
 800a75e:	f8cd a004 	str.w	sl, [sp, #4]
 800a762:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a766:	4628      	mov	r0, r5
 800a768:	f7ff fd2d 	bl	800a1c6 <__cvt>
 800a76c:	4680      	mov	r8, r0
 800a76e:	e648      	b.n	800a402 <_printf_float+0x112>

0800a770 <_printf_common>:
 800a770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a774:	4691      	mov	r9, r2
 800a776:	461f      	mov	r7, r3
 800a778:	688a      	ldr	r2, [r1, #8]
 800a77a:	690b      	ldr	r3, [r1, #16]
 800a77c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a780:	4293      	cmp	r3, r2
 800a782:	bfb8      	it	lt
 800a784:	4613      	movlt	r3, r2
 800a786:	f8c9 3000 	str.w	r3, [r9]
 800a78a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a78e:	4606      	mov	r6, r0
 800a790:	460c      	mov	r4, r1
 800a792:	b112      	cbz	r2, 800a79a <_printf_common+0x2a>
 800a794:	3301      	adds	r3, #1
 800a796:	f8c9 3000 	str.w	r3, [r9]
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	0699      	lsls	r1, r3, #26
 800a79e:	bf42      	ittt	mi
 800a7a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a7a4:	3302      	addmi	r3, #2
 800a7a6:	f8c9 3000 	strmi.w	r3, [r9]
 800a7aa:	6825      	ldr	r5, [r4, #0]
 800a7ac:	f015 0506 	ands.w	r5, r5, #6
 800a7b0:	d107      	bne.n	800a7c2 <_printf_common+0x52>
 800a7b2:	f104 0a19 	add.w	sl, r4, #25
 800a7b6:	68e3      	ldr	r3, [r4, #12]
 800a7b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	42ab      	cmp	r3, r5
 800a7c0:	dc28      	bgt.n	800a814 <_printf_common+0xa4>
 800a7c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a7c6:	6822      	ldr	r2, [r4, #0]
 800a7c8:	3300      	adds	r3, #0
 800a7ca:	bf18      	it	ne
 800a7cc:	2301      	movne	r3, #1
 800a7ce:	0692      	lsls	r2, r2, #26
 800a7d0:	d42d      	bmi.n	800a82e <_printf_common+0xbe>
 800a7d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	4630      	mov	r0, r6
 800a7da:	47c0      	blx	r8
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d020      	beq.n	800a822 <_printf_common+0xb2>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	68e5      	ldr	r5, [r4, #12]
 800a7e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a7e8:	f003 0306 	and.w	r3, r3, #6
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	bf08      	it	eq
 800a7f0:	1aad      	subeq	r5, r5, r2
 800a7f2:	68a3      	ldr	r3, [r4, #8]
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	bf0c      	ite	eq
 800a7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7fc:	2500      	movne	r5, #0
 800a7fe:	4293      	cmp	r3, r2
 800a800:	bfc4      	itt	gt
 800a802:	1a9b      	subgt	r3, r3, r2
 800a804:	18ed      	addgt	r5, r5, r3
 800a806:	f04f 0900 	mov.w	r9, #0
 800a80a:	341a      	adds	r4, #26
 800a80c:	454d      	cmp	r5, r9
 800a80e:	d11a      	bne.n	800a846 <_printf_common+0xd6>
 800a810:	2000      	movs	r0, #0
 800a812:	e008      	b.n	800a826 <_printf_common+0xb6>
 800a814:	2301      	movs	r3, #1
 800a816:	4652      	mov	r2, sl
 800a818:	4639      	mov	r1, r7
 800a81a:	4630      	mov	r0, r6
 800a81c:	47c0      	blx	r8
 800a81e:	3001      	adds	r0, #1
 800a820:	d103      	bne.n	800a82a <_printf_common+0xba>
 800a822:	f04f 30ff 	mov.w	r0, #4294967295
 800a826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a82a:	3501      	adds	r5, #1
 800a82c:	e7c3      	b.n	800a7b6 <_printf_common+0x46>
 800a82e:	18e1      	adds	r1, r4, r3
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	2030      	movs	r0, #48	; 0x30
 800a834:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a838:	4422      	add	r2, r4
 800a83a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a83e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a842:	3302      	adds	r3, #2
 800a844:	e7c5      	b.n	800a7d2 <_printf_common+0x62>
 800a846:	2301      	movs	r3, #1
 800a848:	4622      	mov	r2, r4
 800a84a:	4639      	mov	r1, r7
 800a84c:	4630      	mov	r0, r6
 800a84e:	47c0      	blx	r8
 800a850:	3001      	adds	r0, #1
 800a852:	d0e6      	beq.n	800a822 <_printf_common+0xb2>
 800a854:	f109 0901 	add.w	r9, r9, #1
 800a858:	e7d8      	b.n	800a80c <_printf_common+0x9c>
	...

0800a85c <_printf_i>:
 800a85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a860:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a864:	460c      	mov	r4, r1
 800a866:	7e09      	ldrb	r1, [r1, #24]
 800a868:	b085      	sub	sp, #20
 800a86a:	296e      	cmp	r1, #110	; 0x6e
 800a86c:	4617      	mov	r7, r2
 800a86e:	4606      	mov	r6, r0
 800a870:	4698      	mov	r8, r3
 800a872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a874:	f000 80b3 	beq.w	800a9de <_printf_i+0x182>
 800a878:	d822      	bhi.n	800a8c0 <_printf_i+0x64>
 800a87a:	2963      	cmp	r1, #99	; 0x63
 800a87c:	d036      	beq.n	800a8ec <_printf_i+0x90>
 800a87e:	d80a      	bhi.n	800a896 <_printf_i+0x3a>
 800a880:	2900      	cmp	r1, #0
 800a882:	f000 80b9 	beq.w	800a9f8 <_printf_i+0x19c>
 800a886:	2958      	cmp	r1, #88	; 0x58
 800a888:	f000 8083 	beq.w	800a992 <_printf_i+0x136>
 800a88c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a890:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a894:	e032      	b.n	800a8fc <_printf_i+0xa0>
 800a896:	2964      	cmp	r1, #100	; 0x64
 800a898:	d001      	beq.n	800a89e <_printf_i+0x42>
 800a89a:	2969      	cmp	r1, #105	; 0x69
 800a89c:	d1f6      	bne.n	800a88c <_printf_i+0x30>
 800a89e:	6820      	ldr	r0, [r4, #0]
 800a8a0:	6813      	ldr	r3, [r2, #0]
 800a8a2:	0605      	lsls	r5, r0, #24
 800a8a4:	f103 0104 	add.w	r1, r3, #4
 800a8a8:	d52a      	bpl.n	800a900 <_printf_i+0xa4>
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6011      	str	r1, [r2, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	da03      	bge.n	800a8ba <_printf_i+0x5e>
 800a8b2:	222d      	movs	r2, #45	; 0x2d
 800a8b4:	425b      	negs	r3, r3
 800a8b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a8ba:	486f      	ldr	r0, [pc, #444]	; (800aa78 <_printf_i+0x21c>)
 800a8bc:	220a      	movs	r2, #10
 800a8be:	e039      	b.n	800a934 <_printf_i+0xd8>
 800a8c0:	2973      	cmp	r1, #115	; 0x73
 800a8c2:	f000 809d 	beq.w	800aa00 <_printf_i+0x1a4>
 800a8c6:	d808      	bhi.n	800a8da <_printf_i+0x7e>
 800a8c8:	296f      	cmp	r1, #111	; 0x6f
 800a8ca:	d020      	beq.n	800a90e <_printf_i+0xb2>
 800a8cc:	2970      	cmp	r1, #112	; 0x70
 800a8ce:	d1dd      	bne.n	800a88c <_printf_i+0x30>
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	f043 0320 	orr.w	r3, r3, #32
 800a8d6:	6023      	str	r3, [r4, #0]
 800a8d8:	e003      	b.n	800a8e2 <_printf_i+0x86>
 800a8da:	2975      	cmp	r1, #117	; 0x75
 800a8dc:	d017      	beq.n	800a90e <_printf_i+0xb2>
 800a8de:	2978      	cmp	r1, #120	; 0x78
 800a8e0:	d1d4      	bne.n	800a88c <_printf_i+0x30>
 800a8e2:	2378      	movs	r3, #120	; 0x78
 800a8e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8e8:	4864      	ldr	r0, [pc, #400]	; (800aa7c <_printf_i+0x220>)
 800a8ea:	e055      	b.n	800a998 <_printf_i+0x13c>
 800a8ec:	6813      	ldr	r3, [r2, #0]
 800a8ee:	1d19      	adds	r1, r3, #4
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6011      	str	r1, [r2, #0]
 800a8f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e08c      	b.n	800aa1a <_printf_i+0x1be>
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6011      	str	r1, [r2, #0]
 800a904:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a908:	bf18      	it	ne
 800a90a:	b21b      	sxthne	r3, r3
 800a90c:	e7cf      	b.n	800a8ae <_printf_i+0x52>
 800a90e:	6813      	ldr	r3, [r2, #0]
 800a910:	6825      	ldr	r5, [r4, #0]
 800a912:	1d18      	adds	r0, r3, #4
 800a914:	6010      	str	r0, [r2, #0]
 800a916:	0628      	lsls	r0, r5, #24
 800a918:	d501      	bpl.n	800a91e <_printf_i+0xc2>
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	e002      	b.n	800a924 <_printf_i+0xc8>
 800a91e:	0668      	lsls	r0, r5, #25
 800a920:	d5fb      	bpl.n	800a91a <_printf_i+0xbe>
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	4854      	ldr	r0, [pc, #336]	; (800aa78 <_printf_i+0x21c>)
 800a926:	296f      	cmp	r1, #111	; 0x6f
 800a928:	bf14      	ite	ne
 800a92a:	220a      	movne	r2, #10
 800a92c:	2208      	moveq	r2, #8
 800a92e:	2100      	movs	r1, #0
 800a930:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a934:	6865      	ldr	r5, [r4, #4]
 800a936:	60a5      	str	r5, [r4, #8]
 800a938:	2d00      	cmp	r5, #0
 800a93a:	f2c0 8095 	blt.w	800aa68 <_printf_i+0x20c>
 800a93e:	6821      	ldr	r1, [r4, #0]
 800a940:	f021 0104 	bic.w	r1, r1, #4
 800a944:	6021      	str	r1, [r4, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d13d      	bne.n	800a9c6 <_printf_i+0x16a>
 800a94a:	2d00      	cmp	r5, #0
 800a94c:	f040 808e 	bne.w	800aa6c <_printf_i+0x210>
 800a950:	4665      	mov	r5, ip
 800a952:	2a08      	cmp	r2, #8
 800a954:	d10b      	bne.n	800a96e <_printf_i+0x112>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	07db      	lsls	r3, r3, #31
 800a95a:	d508      	bpl.n	800a96e <_printf_i+0x112>
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	6862      	ldr	r2, [r4, #4]
 800a960:	429a      	cmp	r2, r3
 800a962:	bfde      	ittt	le
 800a964:	2330      	movle	r3, #48	; 0x30
 800a966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a96a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a96e:	ebac 0305 	sub.w	r3, ip, r5
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	f8cd 8000 	str.w	r8, [sp]
 800a978:	463b      	mov	r3, r7
 800a97a:	aa03      	add	r2, sp, #12
 800a97c:	4621      	mov	r1, r4
 800a97e:	4630      	mov	r0, r6
 800a980:	f7ff fef6 	bl	800a770 <_printf_common>
 800a984:	3001      	adds	r0, #1
 800a986:	d14d      	bne.n	800aa24 <_printf_i+0x1c8>
 800a988:	f04f 30ff 	mov.w	r0, #4294967295
 800a98c:	b005      	add	sp, #20
 800a98e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a992:	4839      	ldr	r0, [pc, #228]	; (800aa78 <_printf_i+0x21c>)
 800a994:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a998:	6813      	ldr	r3, [r2, #0]
 800a99a:	6821      	ldr	r1, [r4, #0]
 800a99c:	1d1d      	adds	r5, r3, #4
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6015      	str	r5, [r2, #0]
 800a9a2:	060a      	lsls	r2, r1, #24
 800a9a4:	d50b      	bpl.n	800a9be <_printf_i+0x162>
 800a9a6:	07ca      	lsls	r2, r1, #31
 800a9a8:	bf44      	itt	mi
 800a9aa:	f041 0120 	orrmi.w	r1, r1, #32
 800a9ae:	6021      	strmi	r1, [r4, #0]
 800a9b0:	b91b      	cbnz	r3, 800a9ba <_printf_i+0x15e>
 800a9b2:	6822      	ldr	r2, [r4, #0]
 800a9b4:	f022 0220 	bic.w	r2, r2, #32
 800a9b8:	6022      	str	r2, [r4, #0]
 800a9ba:	2210      	movs	r2, #16
 800a9bc:	e7b7      	b.n	800a92e <_printf_i+0xd2>
 800a9be:	064d      	lsls	r5, r1, #25
 800a9c0:	bf48      	it	mi
 800a9c2:	b29b      	uxthmi	r3, r3
 800a9c4:	e7ef      	b.n	800a9a6 <_printf_i+0x14a>
 800a9c6:	4665      	mov	r5, ip
 800a9c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9cc:	fb02 3311 	mls	r3, r2, r1, r3
 800a9d0:	5cc3      	ldrb	r3, [r0, r3]
 800a9d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	2900      	cmp	r1, #0
 800a9da:	d1f5      	bne.n	800a9c8 <_printf_i+0x16c>
 800a9dc:	e7b9      	b.n	800a952 <_printf_i+0xf6>
 800a9de:	6813      	ldr	r3, [r2, #0]
 800a9e0:	6825      	ldr	r5, [r4, #0]
 800a9e2:	6961      	ldr	r1, [r4, #20]
 800a9e4:	1d18      	adds	r0, r3, #4
 800a9e6:	6010      	str	r0, [r2, #0]
 800a9e8:	0628      	lsls	r0, r5, #24
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	d501      	bpl.n	800a9f2 <_printf_i+0x196>
 800a9ee:	6019      	str	r1, [r3, #0]
 800a9f0:	e002      	b.n	800a9f8 <_printf_i+0x19c>
 800a9f2:	066a      	lsls	r2, r5, #25
 800a9f4:	d5fb      	bpl.n	800a9ee <_printf_i+0x192>
 800a9f6:	8019      	strh	r1, [r3, #0]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	6123      	str	r3, [r4, #16]
 800a9fc:	4665      	mov	r5, ip
 800a9fe:	e7b9      	b.n	800a974 <_printf_i+0x118>
 800aa00:	6813      	ldr	r3, [r2, #0]
 800aa02:	1d19      	adds	r1, r3, #4
 800aa04:	6011      	str	r1, [r2, #0]
 800aa06:	681d      	ldr	r5, [r3, #0]
 800aa08:	6862      	ldr	r2, [r4, #4]
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f7f5 fbef 	bl	80001f0 <memchr>
 800aa12:	b108      	cbz	r0, 800aa18 <_printf_i+0x1bc>
 800aa14:	1b40      	subs	r0, r0, r5
 800aa16:	6060      	str	r0, [r4, #4]
 800aa18:	6863      	ldr	r3, [r4, #4]
 800aa1a:	6123      	str	r3, [r4, #16]
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa22:	e7a7      	b.n	800a974 <_printf_i+0x118>
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	462a      	mov	r2, r5
 800aa28:	4639      	mov	r1, r7
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	47c0      	blx	r8
 800aa2e:	3001      	adds	r0, #1
 800aa30:	d0aa      	beq.n	800a988 <_printf_i+0x12c>
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	079b      	lsls	r3, r3, #30
 800aa36:	d413      	bmi.n	800aa60 <_printf_i+0x204>
 800aa38:	68e0      	ldr	r0, [r4, #12]
 800aa3a:	9b03      	ldr	r3, [sp, #12]
 800aa3c:	4298      	cmp	r0, r3
 800aa3e:	bfb8      	it	lt
 800aa40:	4618      	movlt	r0, r3
 800aa42:	e7a3      	b.n	800a98c <_printf_i+0x130>
 800aa44:	2301      	movs	r3, #1
 800aa46:	464a      	mov	r2, r9
 800aa48:	4639      	mov	r1, r7
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	47c0      	blx	r8
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d09a      	beq.n	800a988 <_printf_i+0x12c>
 800aa52:	3501      	adds	r5, #1
 800aa54:	68e3      	ldr	r3, [r4, #12]
 800aa56:	9a03      	ldr	r2, [sp, #12]
 800aa58:	1a9b      	subs	r3, r3, r2
 800aa5a:	42ab      	cmp	r3, r5
 800aa5c:	dcf2      	bgt.n	800aa44 <_printf_i+0x1e8>
 800aa5e:	e7eb      	b.n	800aa38 <_printf_i+0x1dc>
 800aa60:	2500      	movs	r5, #0
 800aa62:	f104 0919 	add.w	r9, r4, #25
 800aa66:	e7f5      	b.n	800aa54 <_printf_i+0x1f8>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1ac      	bne.n	800a9c6 <_printf_i+0x16a>
 800aa6c:	7803      	ldrb	r3, [r0, #0]
 800aa6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa76:	e76c      	b.n	800a952 <_printf_i+0xf6>
 800aa78:	0800dd6a 	.word	0x0800dd6a
 800aa7c:	0800dd7b 	.word	0x0800dd7b

0800aa80 <_scanf_float>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	469a      	mov	sl, r3
 800aa86:	688b      	ldr	r3, [r1, #8]
 800aa88:	4616      	mov	r6, r2
 800aa8a:	1e5a      	subs	r2, r3, #1
 800aa8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa90:	b087      	sub	sp, #28
 800aa92:	bf83      	ittte	hi
 800aa94:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800aa98:	189b      	addhi	r3, r3, r2
 800aa9a:	9301      	strhi	r3, [sp, #4]
 800aa9c:	2300      	movls	r3, #0
 800aa9e:	bf86      	itte	hi
 800aaa0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aaa4:	608b      	strhi	r3, [r1, #8]
 800aaa6:	9301      	strls	r3, [sp, #4]
 800aaa8:	680b      	ldr	r3, [r1, #0]
 800aaaa:	4688      	mov	r8, r1
 800aaac:	f04f 0b00 	mov.w	fp, #0
 800aab0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aab4:	f848 3b1c 	str.w	r3, [r8], #28
 800aab8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800aabc:	4607      	mov	r7, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	4645      	mov	r5, r8
 800aac2:	465a      	mov	r2, fp
 800aac4:	46d9      	mov	r9, fp
 800aac6:	f8cd b008 	str.w	fp, [sp, #8]
 800aaca:	68a1      	ldr	r1, [r4, #8]
 800aacc:	b181      	cbz	r1, 800aaf0 <_scanf_float+0x70>
 800aace:	6833      	ldr	r3, [r6, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	2b49      	cmp	r3, #73	; 0x49
 800aad4:	d071      	beq.n	800abba <_scanf_float+0x13a>
 800aad6:	d84d      	bhi.n	800ab74 <_scanf_float+0xf4>
 800aad8:	2b39      	cmp	r3, #57	; 0x39
 800aada:	d840      	bhi.n	800ab5e <_scanf_float+0xde>
 800aadc:	2b31      	cmp	r3, #49	; 0x31
 800aade:	f080 8088 	bcs.w	800abf2 <_scanf_float+0x172>
 800aae2:	2b2d      	cmp	r3, #45	; 0x2d
 800aae4:	f000 8090 	beq.w	800ac08 <_scanf_float+0x188>
 800aae8:	d815      	bhi.n	800ab16 <_scanf_float+0x96>
 800aaea:	2b2b      	cmp	r3, #43	; 0x2b
 800aaec:	f000 808c 	beq.w	800ac08 <_scanf_float+0x188>
 800aaf0:	f1b9 0f00 	cmp.w	r9, #0
 800aaf4:	d003      	beq.n	800aafe <_scanf_float+0x7e>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	3a01      	subs	r2, #1
 800ab00:	2a01      	cmp	r2, #1
 800ab02:	f200 80ea 	bhi.w	800acda <_scanf_float+0x25a>
 800ab06:	4545      	cmp	r5, r8
 800ab08:	f200 80dc 	bhi.w	800acc4 <_scanf_float+0x244>
 800ab0c:	2601      	movs	r6, #1
 800ab0e:	4630      	mov	r0, r6
 800ab10:	b007      	add	sp, #28
 800ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab16:	2b2e      	cmp	r3, #46	; 0x2e
 800ab18:	f000 809f 	beq.w	800ac5a <_scanf_float+0x1da>
 800ab1c:	2b30      	cmp	r3, #48	; 0x30
 800ab1e:	d1e7      	bne.n	800aaf0 <_scanf_float+0x70>
 800ab20:	6820      	ldr	r0, [r4, #0]
 800ab22:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ab26:	d064      	beq.n	800abf2 <_scanf_float+0x172>
 800ab28:	9b01      	ldr	r3, [sp, #4]
 800ab2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ab2e:	6020      	str	r0, [r4, #0]
 800ab30:	f109 0901 	add.w	r9, r9, #1
 800ab34:	b11b      	cbz	r3, 800ab3e <_scanf_float+0xbe>
 800ab36:	3b01      	subs	r3, #1
 800ab38:	3101      	adds	r1, #1
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	60a1      	str	r1, [r4, #8]
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	60a3      	str	r3, [r4, #8]
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	3301      	adds	r3, #1
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	6873      	ldr	r3, [r6, #4]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	6073      	str	r3, [r6, #4]
 800ab52:	f340 80ac 	ble.w	800acae <_scanf_float+0x22e>
 800ab56:	6833      	ldr	r3, [r6, #0]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	6033      	str	r3, [r6, #0]
 800ab5c:	e7b5      	b.n	800aaca <_scanf_float+0x4a>
 800ab5e:	2b45      	cmp	r3, #69	; 0x45
 800ab60:	f000 8085 	beq.w	800ac6e <_scanf_float+0x1ee>
 800ab64:	2b46      	cmp	r3, #70	; 0x46
 800ab66:	d06a      	beq.n	800ac3e <_scanf_float+0x1be>
 800ab68:	2b41      	cmp	r3, #65	; 0x41
 800ab6a:	d1c1      	bne.n	800aaf0 <_scanf_float+0x70>
 800ab6c:	2a01      	cmp	r2, #1
 800ab6e:	d1bf      	bne.n	800aaf0 <_scanf_float+0x70>
 800ab70:	2202      	movs	r2, #2
 800ab72:	e046      	b.n	800ac02 <_scanf_float+0x182>
 800ab74:	2b65      	cmp	r3, #101	; 0x65
 800ab76:	d07a      	beq.n	800ac6e <_scanf_float+0x1ee>
 800ab78:	d818      	bhi.n	800abac <_scanf_float+0x12c>
 800ab7a:	2b54      	cmp	r3, #84	; 0x54
 800ab7c:	d066      	beq.n	800ac4c <_scanf_float+0x1cc>
 800ab7e:	d811      	bhi.n	800aba4 <_scanf_float+0x124>
 800ab80:	2b4e      	cmp	r3, #78	; 0x4e
 800ab82:	d1b5      	bne.n	800aaf0 <_scanf_float+0x70>
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	d146      	bne.n	800ac16 <_scanf_float+0x196>
 800ab88:	f1b9 0f00 	cmp.w	r9, #0
 800ab8c:	d145      	bne.n	800ac1a <_scanf_float+0x19a>
 800ab8e:	6821      	ldr	r1, [r4, #0]
 800ab90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ab94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ab98:	d13f      	bne.n	800ac1a <_scanf_float+0x19a>
 800ab9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ab9e:	6021      	str	r1, [r4, #0]
 800aba0:	2201      	movs	r2, #1
 800aba2:	e02e      	b.n	800ac02 <_scanf_float+0x182>
 800aba4:	2b59      	cmp	r3, #89	; 0x59
 800aba6:	d01e      	beq.n	800abe6 <_scanf_float+0x166>
 800aba8:	2b61      	cmp	r3, #97	; 0x61
 800abaa:	e7de      	b.n	800ab6a <_scanf_float+0xea>
 800abac:	2b6e      	cmp	r3, #110	; 0x6e
 800abae:	d0e9      	beq.n	800ab84 <_scanf_float+0x104>
 800abb0:	d815      	bhi.n	800abde <_scanf_float+0x15e>
 800abb2:	2b66      	cmp	r3, #102	; 0x66
 800abb4:	d043      	beq.n	800ac3e <_scanf_float+0x1be>
 800abb6:	2b69      	cmp	r3, #105	; 0x69
 800abb8:	d19a      	bne.n	800aaf0 <_scanf_float+0x70>
 800abba:	f1bb 0f00 	cmp.w	fp, #0
 800abbe:	d138      	bne.n	800ac32 <_scanf_float+0x1b2>
 800abc0:	f1b9 0f00 	cmp.w	r9, #0
 800abc4:	d197      	bne.n	800aaf6 <_scanf_float+0x76>
 800abc6:	6821      	ldr	r1, [r4, #0]
 800abc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800abcc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800abd0:	d195      	bne.n	800aafe <_scanf_float+0x7e>
 800abd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800abd6:	6021      	str	r1, [r4, #0]
 800abd8:	f04f 0b01 	mov.w	fp, #1
 800abdc:	e011      	b.n	800ac02 <_scanf_float+0x182>
 800abde:	2b74      	cmp	r3, #116	; 0x74
 800abe0:	d034      	beq.n	800ac4c <_scanf_float+0x1cc>
 800abe2:	2b79      	cmp	r3, #121	; 0x79
 800abe4:	d184      	bne.n	800aaf0 <_scanf_float+0x70>
 800abe6:	f1bb 0f07 	cmp.w	fp, #7
 800abea:	d181      	bne.n	800aaf0 <_scanf_float+0x70>
 800abec:	f04f 0b08 	mov.w	fp, #8
 800abf0:	e007      	b.n	800ac02 <_scanf_float+0x182>
 800abf2:	eb12 0f0b 	cmn.w	r2, fp
 800abf6:	f47f af7b 	bne.w	800aaf0 <_scanf_float+0x70>
 800abfa:	6821      	ldr	r1, [r4, #0]
 800abfc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ac00:	6021      	str	r1, [r4, #0]
 800ac02:	702b      	strb	r3, [r5, #0]
 800ac04:	3501      	adds	r5, #1
 800ac06:	e79a      	b.n	800ab3e <_scanf_float+0xbe>
 800ac08:	6821      	ldr	r1, [r4, #0]
 800ac0a:	0608      	lsls	r0, r1, #24
 800ac0c:	f57f af70 	bpl.w	800aaf0 <_scanf_float+0x70>
 800ac10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac14:	e7f4      	b.n	800ac00 <_scanf_float+0x180>
 800ac16:	2a02      	cmp	r2, #2
 800ac18:	d047      	beq.n	800acaa <_scanf_float+0x22a>
 800ac1a:	f1bb 0f01 	cmp.w	fp, #1
 800ac1e:	d003      	beq.n	800ac28 <_scanf_float+0x1a8>
 800ac20:	f1bb 0f04 	cmp.w	fp, #4
 800ac24:	f47f af64 	bne.w	800aaf0 <_scanf_float+0x70>
 800ac28:	f10b 0b01 	add.w	fp, fp, #1
 800ac2c:	fa5f fb8b 	uxtb.w	fp, fp
 800ac30:	e7e7      	b.n	800ac02 <_scanf_float+0x182>
 800ac32:	f1bb 0f03 	cmp.w	fp, #3
 800ac36:	d0f7      	beq.n	800ac28 <_scanf_float+0x1a8>
 800ac38:	f1bb 0f05 	cmp.w	fp, #5
 800ac3c:	e7f2      	b.n	800ac24 <_scanf_float+0x1a4>
 800ac3e:	f1bb 0f02 	cmp.w	fp, #2
 800ac42:	f47f af55 	bne.w	800aaf0 <_scanf_float+0x70>
 800ac46:	f04f 0b03 	mov.w	fp, #3
 800ac4a:	e7da      	b.n	800ac02 <_scanf_float+0x182>
 800ac4c:	f1bb 0f06 	cmp.w	fp, #6
 800ac50:	f47f af4e 	bne.w	800aaf0 <_scanf_float+0x70>
 800ac54:	f04f 0b07 	mov.w	fp, #7
 800ac58:	e7d3      	b.n	800ac02 <_scanf_float+0x182>
 800ac5a:	6821      	ldr	r1, [r4, #0]
 800ac5c:	0588      	lsls	r0, r1, #22
 800ac5e:	f57f af47 	bpl.w	800aaf0 <_scanf_float+0x70>
 800ac62:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ac66:	6021      	str	r1, [r4, #0]
 800ac68:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac6c:	e7c9      	b.n	800ac02 <_scanf_float+0x182>
 800ac6e:	6821      	ldr	r1, [r4, #0]
 800ac70:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ac74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ac78:	d006      	beq.n	800ac88 <_scanf_float+0x208>
 800ac7a:	0548      	lsls	r0, r1, #21
 800ac7c:	f57f af38 	bpl.w	800aaf0 <_scanf_float+0x70>
 800ac80:	f1b9 0f00 	cmp.w	r9, #0
 800ac84:	f43f af3b 	beq.w	800aafe <_scanf_float+0x7e>
 800ac88:	0588      	lsls	r0, r1, #22
 800ac8a:	bf58      	it	pl
 800ac8c:	9802      	ldrpl	r0, [sp, #8]
 800ac8e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ac92:	bf58      	it	pl
 800ac94:	eba9 0000 	subpl.w	r0, r9, r0
 800ac98:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ac9c:	bf58      	it	pl
 800ac9e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800aca2:	6021      	str	r1, [r4, #0]
 800aca4:	f04f 0900 	mov.w	r9, #0
 800aca8:	e7ab      	b.n	800ac02 <_scanf_float+0x182>
 800acaa:	2203      	movs	r2, #3
 800acac:	e7a9      	b.n	800ac02 <_scanf_float+0x182>
 800acae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800acb2:	9205      	str	r2, [sp, #20]
 800acb4:	4631      	mov	r1, r6
 800acb6:	4638      	mov	r0, r7
 800acb8:	4798      	blx	r3
 800acba:	9a05      	ldr	r2, [sp, #20]
 800acbc:	2800      	cmp	r0, #0
 800acbe:	f43f af04 	beq.w	800aaca <_scanf_float+0x4a>
 800acc2:	e715      	b.n	800aaf0 <_scanf_float+0x70>
 800acc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800accc:	4632      	mov	r2, r6
 800acce:	4638      	mov	r0, r7
 800acd0:	4798      	blx	r3
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	6123      	str	r3, [r4, #16]
 800acd8:	e715      	b.n	800ab06 <_scanf_float+0x86>
 800acda:	f10b 33ff 	add.w	r3, fp, #4294967295
 800acde:	2b06      	cmp	r3, #6
 800ace0:	d80a      	bhi.n	800acf8 <_scanf_float+0x278>
 800ace2:	f1bb 0f02 	cmp.w	fp, #2
 800ace6:	d968      	bls.n	800adba <_scanf_float+0x33a>
 800ace8:	f1ab 0b03 	sub.w	fp, fp, #3
 800acec:	fa5f fb8b 	uxtb.w	fp, fp
 800acf0:	eba5 0b0b 	sub.w	fp, r5, fp
 800acf4:	455d      	cmp	r5, fp
 800acf6:	d14b      	bne.n	800ad90 <_scanf_float+0x310>
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	05da      	lsls	r2, r3, #23
 800acfc:	d51f      	bpl.n	800ad3e <_scanf_float+0x2be>
 800acfe:	055b      	lsls	r3, r3, #21
 800ad00:	d468      	bmi.n	800add4 <_scanf_float+0x354>
 800ad02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	2965      	cmp	r1, #101	; 0x65
 800ad0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad0e:	f105 3bff 	add.w	fp, r5, #4294967295
 800ad12:	6123      	str	r3, [r4, #16]
 800ad14:	d00d      	beq.n	800ad32 <_scanf_float+0x2b2>
 800ad16:	2945      	cmp	r1, #69	; 0x45
 800ad18:	d00b      	beq.n	800ad32 <_scanf_float+0x2b2>
 800ad1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad1e:	4632      	mov	r2, r6
 800ad20:	4638      	mov	r0, r7
 800ad22:	4798      	blx	r3
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	f1a5 0b02 	sub.w	fp, r5, #2
 800ad30:	6123      	str	r3, [r4, #16]
 800ad32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad36:	4632      	mov	r2, r6
 800ad38:	4638      	mov	r0, r7
 800ad3a:	4798      	blx	r3
 800ad3c:	465d      	mov	r5, fp
 800ad3e:	6826      	ldr	r6, [r4, #0]
 800ad40:	f016 0610 	ands.w	r6, r6, #16
 800ad44:	d17a      	bne.n	800ae3c <_scanf_float+0x3bc>
 800ad46:	702e      	strb	r6, [r5, #0]
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad52:	d142      	bne.n	800adda <_scanf_float+0x35a>
 800ad54:	9b02      	ldr	r3, [sp, #8]
 800ad56:	eba9 0303 	sub.w	r3, r9, r3
 800ad5a:	425a      	negs	r2, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d149      	bne.n	800adf4 <_scanf_float+0x374>
 800ad60:	2200      	movs	r2, #0
 800ad62:	4641      	mov	r1, r8
 800ad64:	4638      	mov	r0, r7
 800ad66:	f000 fea3 	bl	800bab0 <_strtod_r>
 800ad6a:	6825      	ldr	r5, [r4, #0]
 800ad6c:	f8da 3000 	ldr.w	r3, [sl]
 800ad70:	f015 0f02 	tst.w	r5, #2
 800ad74:	f103 0204 	add.w	r2, r3, #4
 800ad78:	ec59 8b10 	vmov	r8, r9, d0
 800ad7c:	f8ca 2000 	str.w	r2, [sl]
 800ad80:	d043      	beq.n	800ae0a <_scanf_float+0x38a>
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	e9c3 8900 	strd	r8, r9, [r3]
 800ad88:	68e3      	ldr	r3, [r4, #12]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	60e3      	str	r3, [r4, #12]
 800ad8e:	e6be      	b.n	800ab0e <_scanf_float+0x8e>
 800ad90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ad98:	4632      	mov	r2, r6
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	4798      	blx	r3
 800ad9e:	6923      	ldr	r3, [r4, #16]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	6123      	str	r3, [r4, #16]
 800ada4:	e7a6      	b.n	800acf4 <_scanf_float+0x274>
 800ada6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adaa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800adae:	4632      	mov	r2, r6
 800adb0:	4638      	mov	r0, r7
 800adb2:	4798      	blx	r3
 800adb4:	6923      	ldr	r3, [r4, #16]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	6123      	str	r3, [r4, #16]
 800adba:	4545      	cmp	r5, r8
 800adbc:	d8f3      	bhi.n	800ada6 <_scanf_float+0x326>
 800adbe:	e6a5      	b.n	800ab0c <_scanf_float+0x8c>
 800adc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adc4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800adc8:	4632      	mov	r2, r6
 800adca:	4638      	mov	r0, r7
 800adcc:	4798      	blx	r3
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	3b01      	subs	r3, #1
 800add2:	6123      	str	r3, [r4, #16]
 800add4:	4545      	cmp	r5, r8
 800add6:	d8f3      	bhi.n	800adc0 <_scanf_float+0x340>
 800add8:	e698      	b.n	800ab0c <_scanf_float+0x8c>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d0bf      	beq.n	800ad60 <_scanf_float+0x2e0>
 800ade0:	9904      	ldr	r1, [sp, #16]
 800ade2:	230a      	movs	r3, #10
 800ade4:	4632      	mov	r2, r6
 800ade6:	3101      	adds	r1, #1
 800ade8:	4638      	mov	r0, r7
 800adea:	f000 feed 	bl	800bbc8 <_strtol_r>
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	9d04      	ldr	r5, [sp, #16]
 800adf2:	1ac2      	subs	r2, r0, r3
 800adf4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800adf8:	429d      	cmp	r5, r3
 800adfa:	bf28      	it	cs
 800adfc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ae00:	490f      	ldr	r1, [pc, #60]	; (800ae40 <_scanf_float+0x3c0>)
 800ae02:	4628      	mov	r0, r5
 800ae04:	f000 f824 	bl	800ae50 <siprintf>
 800ae08:	e7aa      	b.n	800ad60 <_scanf_float+0x2e0>
 800ae0a:	f015 0504 	ands.w	r5, r5, #4
 800ae0e:	d1b8      	bne.n	800ad82 <_scanf_float+0x302>
 800ae10:	681f      	ldr	r7, [r3, #0]
 800ae12:	ee10 2a10 	vmov	r2, s0
 800ae16:	464b      	mov	r3, r9
 800ae18:	ee10 0a10 	vmov	r0, s0
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	f7f5 fe8d 	bl	8000b3c <__aeabi_dcmpun>
 800ae22:	b128      	cbz	r0, 800ae30 <_scanf_float+0x3b0>
 800ae24:	4628      	mov	r0, r5
 800ae26:	f000 f80d 	bl	800ae44 <nanf>
 800ae2a:	ed87 0a00 	vstr	s0, [r7]
 800ae2e:	e7ab      	b.n	800ad88 <_scanf_float+0x308>
 800ae30:	4640      	mov	r0, r8
 800ae32:	4649      	mov	r1, r9
 800ae34:	f7f5 fee0 	bl	8000bf8 <__aeabi_d2f>
 800ae38:	6038      	str	r0, [r7, #0]
 800ae3a:	e7a5      	b.n	800ad88 <_scanf_float+0x308>
 800ae3c:	2600      	movs	r6, #0
 800ae3e:	e666      	b.n	800ab0e <_scanf_float+0x8e>
 800ae40:	0800dd8c 	.word	0x0800dd8c

0800ae44 <nanf>:
 800ae44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae4c <nanf+0x8>
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	7fc00000 	.word	0x7fc00000

0800ae50 <siprintf>:
 800ae50:	b40e      	push	{r1, r2, r3}
 800ae52:	b500      	push	{lr}
 800ae54:	b09c      	sub	sp, #112	; 0x70
 800ae56:	ab1d      	add	r3, sp, #116	; 0x74
 800ae58:	9002      	str	r0, [sp, #8]
 800ae5a:	9006      	str	r0, [sp, #24]
 800ae5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae60:	4809      	ldr	r0, [pc, #36]	; (800ae88 <siprintf+0x38>)
 800ae62:	9107      	str	r1, [sp, #28]
 800ae64:	9104      	str	r1, [sp, #16]
 800ae66:	4909      	ldr	r1, [pc, #36]	; (800ae8c <siprintf+0x3c>)
 800ae68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae6c:	9105      	str	r1, [sp, #20]
 800ae6e:	6800      	ldr	r0, [r0, #0]
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	a902      	add	r1, sp, #8
 800ae74:	f002 fd64 	bl	800d940 <_svfiprintf_r>
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	b01c      	add	sp, #112	; 0x70
 800ae80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae84:	b003      	add	sp, #12
 800ae86:	4770      	bx	lr
 800ae88:	20000034 	.word	0x20000034
 800ae8c:	ffff0208 	.word	0xffff0208

0800ae90 <sulp>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	4604      	mov	r4, r0
 800ae94:	460d      	mov	r5, r1
 800ae96:	ec45 4b10 	vmov	d0, r4, r5
 800ae9a:	4616      	mov	r6, r2
 800ae9c:	f002 fb0c 	bl	800d4b8 <__ulp>
 800aea0:	ec51 0b10 	vmov	r0, r1, d0
 800aea4:	b17e      	cbz	r6, 800aec6 <sulp+0x36>
 800aea6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aeaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	dd09      	ble.n	800aec6 <sulp+0x36>
 800aeb2:	051b      	lsls	r3, r3, #20
 800aeb4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aeb8:	2400      	movs	r4, #0
 800aeba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aebe:	4622      	mov	r2, r4
 800aec0:	462b      	mov	r3, r5
 800aec2:	f7f5 fba1 	bl	8000608 <__aeabi_dmul>
 800aec6:	bd70      	pop	{r4, r5, r6, pc}

0800aec8 <_strtod_l>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	461f      	mov	r7, r3
 800aece:	b0a1      	sub	sp, #132	; 0x84
 800aed0:	2300      	movs	r3, #0
 800aed2:	4681      	mov	r9, r0
 800aed4:	4638      	mov	r0, r7
 800aed6:	460e      	mov	r6, r1
 800aed8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeda:	931c      	str	r3, [sp, #112]	; 0x70
 800aedc:	f001 fff5 	bl	800ceca <__localeconv_l>
 800aee0:	4680      	mov	r8, r0
 800aee2:	6800      	ldr	r0, [r0, #0]
 800aee4:	f7f5 f97c 	bl	80001e0 <strlen>
 800aee8:	f04f 0a00 	mov.w	sl, #0
 800aeec:	4604      	mov	r4, r0
 800aeee:	f04f 0b00 	mov.w	fp, #0
 800aef2:	961b      	str	r6, [sp, #108]	; 0x6c
 800aef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aef6:	781a      	ldrb	r2, [r3, #0]
 800aef8:	2a0d      	cmp	r2, #13
 800aefa:	d832      	bhi.n	800af62 <_strtod_l+0x9a>
 800aefc:	2a09      	cmp	r2, #9
 800aefe:	d236      	bcs.n	800af6e <_strtod_l+0xa6>
 800af00:	2a00      	cmp	r2, #0
 800af02:	d03e      	beq.n	800af82 <_strtod_l+0xba>
 800af04:	2300      	movs	r3, #0
 800af06:	930d      	str	r3, [sp, #52]	; 0x34
 800af08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800af0a:	782b      	ldrb	r3, [r5, #0]
 800af0c:	2b30      	cmp	r3, #48	; 0x30
 800af0e:	f040 80ac 	bne.w	800b06a <_strtod_l+0x1a2>
 800af12:	786b      	ldrb	r3, [r5, #1]
 800af14:	2b58      	cmp	r3, #88	; 0x58
 800af16:	d001      	beq.n	800af1c <_strtod_l+0x54>
 800af18:	2b78      	cmp	r3, #120	; 0x78
 800af1a:	d167      	bne.n	800afec <_strtod_l+0x124>
 800af1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	ab1c      	add	r3, sp, #112	; 0x70
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	9702      	str	r7, [sp, #8]
 800af26:	ab1d      	add	r3, sp, #116	; 0x74
 800af28:	4a88      	ldr	r2, [pc, #544]	; (800b14c <_strtod_l+0x284>)
 800af2a:	a91b      	add	r1, sp, #108	; 0x6c
 800af2c:	4648      	mov	r0, r9
 800af2e:	f001 fcf2 	bl	800c916 <__gethex>
 800af32:	f010 0407 	ands.w	r4, r0, #7
 800af36:	4606      	mov	r6, r0
 800af38:	d005      	beq.n	800af46 <_strtod_l+0x7e>
 800af3a:	2c06      	cmp	r4, #6
 800af3c:	d12b      	bne.n	800af96 <_strtod_l+0xce>
 800af3e:	3501      	adds	r5, #1
 800af40:	2300      	movs	r3, #0
 800af42:	951b      	str	r5, [sp, #108]	; 0x6c
 800af44:	930d      	str	r3, [sp, #52]	; 0x34
 800af46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f040 859a 	bne.w	800ba82 <_strtod_l+0xbba>
 800af4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af50:	b1e3      	cbz	r3, 800af8c <_strtod_l+0xc4>
 800af52:	4652      	mov	r2, sl
 800af54:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af58:	ec43 2b10 	vmov	d0, r2, r3
 800af5c:	b021      	add	sp, #132	; 0x84
 800af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af62:	2a2b      	cmp	r2, #43	; 0x2b
 800af64:	d015      	beq.n	800af92 <_strtod_l+0xca>
 800af66:	2a2d      	cmp	r2, #45	; 0x2d
 800af68:	d004      	beq.n	800af74 <_strtod_l+0xac>
 800af6a:	2a20      	cmp	r2, #32
 800af6c:	d1ca      	bne.n	800af04 <_strtod_l+0x3c>
 800af6e:	3301      	adds	r3, #1
 800af70:	931b      	str	r3, [sp, #108]	; 0x6c
 800af72:	e7bf      	b.n	800aef4 <_strtod_l+0x2c>
 800af74:	2201      	movs	r2, #1
 800af76:	920d      	str	r2, [sp, #52]	; 0x34
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	921b      	str	r2, [sp, #108]	; 0x6c
 800af7c:	785b      	ldrb	r3, [r3, #1]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1c2      	bne.n	800af08 <_strtod_l+0x40>
 800af82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af84:	961b      	str	r6, [sp, #108]	; 0x6c
 800af86:	2b00      	cmp	r3, #0
 800af88:	f040 8579 	bne.w	800ba7e <_strtod_l+0xbb6>
 800af8c:	4652      	mov	r2, sl
 800af8e:	465b      	mov	r3, fp
 800af90:	e7e2      	b.n	800af58 <_strtod_l+0x90>
 800af92:	2200      	movs	r2, #0
 800af94:	e7ef      	b.n	800af76 <_strtod_l+0xae>
 800af96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af98:	b13a      	cbz	r2, 800afaa <_strtod_l+0xe2>
 800af9a:	2135      	movs	r1, #53	; 0x35
 800af9c:	a81e      	add	r0, sp, #120	; 0x78
 800af9e:	f002 fb83 	bl	800d6a8 <__copybits>
 800afa2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afa4:	4648      	mov	r0, r9
 800afa6:	f001 ffef 	bl	800cf88 <_Bfree>
 800afaa:	3c01      	subs	r4, #1
 800afac:	2c04      	cmp	r4, #4
 800afae:	d806      	bhi.n	800afbe <_strtod_l+0xf6>
 800afb0:	e8df f004 	tbb	[pc, r4]
 800afb4:	1714030a 	.word	0x1714030a
 800afb8:	0a          	.byte	0x0a
 800afb9:	00          	.byte	0x00
 800afba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800afbe:	0730      	lsls	r0, r6, #28
 800afc0:	d5c1      	bpl.n	800af46 <_strtod_l+0x7e>
 800afc2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800afc6:	e7be      	b.n	800af46 <_strtod_l+0x7e>
 800afc8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800afcc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800afd2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800afd6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800afda:	e7f0      	b.n	800afbe <_strtod_l+0xf6>
 800afdc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b150 <_strtod_l+0x288>
 800afe0:	e7ed      	b.n	800afbe <_strtod_l+0xf6>
 800afe2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800afe6:	f04f 3aff 	mov.w	sl, #4294967295
 800afea:	e7e8      	b.n	800afbe <_strtod_l+0xf6>
 800afec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	921b      	str	r2, [sp, #108]	; 0x6c
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	2b30      	cmp	r3, #48	; 0x30
 800aff6:	d0f9      	beq.n	800afec <_strtod_l+0x124>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0a4      	beq.n	800af46 <_strtod_l+0x7e>
 800affc:	2301      	movs	r3, #1
 800affe:	2500      	movs	r5, #0
 800b000:	9306      	str	r3, [sp, #24]
 800b002:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b004:	9308      	str	r3, [sp, #32]
 800b006:	9507      	str	r5, [sp, #28]
 800b008:	9505      	str	r5, [sp, #20]
 800b00a:	220a      	movs	r2, #10
 800b00c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b00e:	7807      	ldrb	r7, [r0, #0]
 800b010:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b014:	b2d9      	uxtb	r1, r3
 800b016:	2909      	cmp	r1, #9
 800b018:	d929      	bls.n	800b06e <_strtod_l+0x1a6>
 800b01a:	4622      	mov	r2, r4
 800b01c:	f8d8 1000 	ldr.w	r1, [r8]
 800b020:	f002 fd96 	bl	800db50 <strncmp>
 800b024:	2800      	cmp	r0, #0
 800b026:	d031      	beq.n	800b08c <_strtod_l+0x1c4>
 800b028:	2000      	movs	r0, #0
 800b02a:	9c05      	ldr	r4, [sp, #20]
 800b02c:	9004      	str	r0, [sp, #16]
 800b02e:	463b      	mov	r3, r7
 800b030:	4602      	mov	r2, r0
 800b032:	2b65      	cmp	r3, #101	; 0x65
 800b034:	d001      	beq.n	800b03a <_strtod_l+0x172>
 800b036:	2b45      	cmp	r3, #69	; 0x45
 800b038:	d114      	bne.n	800b064 <_strtod_l+0x19c>
 800b03a:	b924      	cbnz	r4, 800b046 <_strtod_l+0x17e>
 800b03c:	b910      	cbnz	r0, 800b044 <_strtod_l+0x17c>
 800b03e:	9b06      	ldr	r3, [sp, #24]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d09e      	beq.n	800af82 <_strtod_l+0xba>
 800b044:	2400      	movs	r4, #0
 800b046:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b048:	1c73      	adds	r3, r6, #1
 800b04a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b04c:	7873      	ldrb	r3, [r6, #1]
 800b04e:	2b2b      	cmp	r3, #43	; 0x2b
 800b050:	d078      	beq.n	800b144 <_strtod_l+0x27c>
 800b052:	2b2d      	cmp	r3, #45	; 0x2d
 800b054:	d070      	beq.n	800b138 <_strtod_l+0x270>
 800b056:	f04f 0c00 	mov.w	ip, #0
 800b05a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b05e:	2f09      	cmp	r7, #9
 800b060:	d97c      	bls.n	800b15c <_strtod_l+0x294>
 800b062:	961b      	str	r6, [sp, #108]	; 0x6c
 800b064:	f04f 0e00 	mov.w	lr, #0
 800b068:	e09a      	b.n	800b1a0 <_strtod_l+0x2d8>
 800b06a:	2300      	movs	r3, #0
 800b06c:	e7c7      	b.n	800affe <_strtod_l+0x136>
 800b06e:	9905      	ldr	r1, [sp, #20]
 800b070:	2908      	cmp	r1, #8
 800b072:	bfdd      	ittte	le
 800b074:	9907      	ldrle	r1, [sp, #28]
 800b076:	fb02 3301 	mlale	r3, r2, r1, r3
 800b07a:	9307      	strle	r3, [sp, #28]
 800b07c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b080:	9b05      	ldr	r3, [sp, #20]
 800b082:	3001      	adds	r0, #1
 800b084:	3301      	adds	r3, #1
 800b086:	9305      	str	r3, [sp, #20]
 800b088:	901b      	str	r0, [sp, #108]	; 0x6c
 800b08a:	e7bf      	b.n	800b00c <_strtod_l+0x144>
 800b08c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b08e:	191a      	adds	r2, r3, r4
 800b090:	921b      	str	r2, [sp, #108]	; 0x6c
 800b092:	9a05      	ldr	r2, [sp, #20]
 800b094:	5d1b      	ldrb	r3, [r3, r4]
 800b096:	2a00      	cmp	r2, #0
 800b098:	d037      	beq.n	800b10a <_strtod_l+0x242>
 800b09a:	9c05      	ldr	r4, [sp, #20]
 800b09c:	4602      	mov	r2, r0
 800b09e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b0a2:	2909      	cmp	r1, #9
 800b0a4:	d913      	bls.n	800b0ce <_strtod_l+0x206>
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	9104      	str	r1, [sp, #16]
 800b0aa:	e7c2      	b.n	800b032 <_strtod_l+0x16a>
 800b0ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0b2:	785b      	ldrb	r3, [r3, #1]
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	2b30      	cmp	r3, #48	; 0x30
 800b0b8:	d0f8      	beq.n	800b0ac <_strtod_l+0x1e4>
 800b0ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b0be:	2a08      	cmp	r2, #8
 800b0c0:	f200 84e4 	bhi.w	800ba8c <_strtod_l+0xbc4>
 800b0c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b0c6:	9208      	str	r2, [sp, #32]
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b0d2:	f100 0101 	add.w	r1, r0, #1
 800b0d6:	d012      	beq.n	800b0fe <_strtod_l+0x236>
 800b0d8:	440a      	add	r2, r1
 800b0da:	eb00 0c04 	add.w	ip, r0, r4
 800b0de:	4621      	mov	r1, r4
 800b0e0:	270a      	movs	r7, #10
 800b0e2:	458c      	cmp	ip, r1
 800b0e4:	d113      	bne.n	800b10e <_strtod_l+0x246>
 800b0e6:	1821      	adds	r1, r4, r0
 800b0e8:	2908      	cmp	r1, #8
 800b0ea:	f104 0401 	add.w	r4, r4, #1
 800b0ee:	4404      	add	r4, r0
 800b0f0:	dc19      	bgt.n	800b126 <_strtod_l+0x25e>
 800b0f2:	9b07      	ldr	r3, [sp, #28]
 800b0f4:	210a      	movs	r1, #10
 800b0f6:	fb01 e303 	mla	r3, r1, r3, lr
 800b0fa:	9307      	str	r3, [sp, #28]
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b100:	1c58      	adds	r0, r3, #1
 800b102:	901b      	str	r0, [sp, #108]	; 0x6c
 800b104:	785b      	ldrb	r3, [r3, #1]
 800b106:	4608      	mov	r0, r1
 800b108:	e7c9      	b.n	800b09e <_strtod_l+0x1d6>
 800b10a:	9805      	ldr	r0, [sp, #20]
 800b10c:	e7d3      	b.n	800b0b6 <_strtod_l+0x1ee>
 800b10e:	2908      	cmp	r1, #8
 800b110:	f101 0101 	add.w	r1, r1, #1
 800b114:	dc03      	bgt.n	800b11e <_strtod_l+0x256>
 800b116:	9b07      	ldr	r3, [sp, #28]
 800b118:	437b      	muls	r3, r7
 800b11a:	9307      	str	r3, [sp, #28]
 800b11c:	e7e1      	b.n	800b0e2 <_strtod_l+0x21a>
 800b11e:	2910      	cmp	r1, #16
 800b120:	bfd8      	it	le
 800b122:	437d      	mulle	r5, r7
 800b124:	e7dd      	b.n	800b0e2 <_strtod_l+0x21a>
 800b126:	2c10      	cmp	r4, #16
 800b128:	bfdc      	itt	le
 800b12a:	210a      	movle	r1, #10
 800b12c:	fb01 e505 	mlale	r5, r1, r5, lr
 800b130:	e7e4      	b.n	800b0fc <_strtod_l+0x234>
 800b132:	2301      	movs	r3, #1
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	e781      	b.n	800b03c <_strtod_l+0x174>
 800b138:	f04f 0c01 	mov.w	ip, #1
 800b13c:	1cb3      	adds	r3, r6, #2
 800b13e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b140:	78b3      	ldrb	r3, [r6, #2]
 800b142:	e78a      	b.n	800b05a <_strtod_l+0x192>
 800b144:	f04f 0c00 	mov.w	ip, #0
 800b148:	e7f8      	b.n	800b13c <_strtod_l+0x274>
 800b14a:	bf00      	nop
 800b14c:	0800dd94 	.word	0x0800dd94
 800b150:	7ff00000 	.word	0x7ff00000
 800b154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b156:	1c5f      	adds	r7, r3, #1
 800b158:	971b      	str	r7, [sp, #108]	; 0x6c
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	2b30      	cmp	r3, #48	; 0x30
 800b15e:	d0f9      	beq.n	800b154 <_strtod_l+0x28c>
 800b160:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b164:	2f08      	cmp	r7, #8
 800b166:	f63f af7d 	bhi.w	800b064 <_strtod_l+0x19c>
 800b16a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b16e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b170:	930a      	str	r3, [sp, #40]	; 0x28
 800b172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b174:	1c5f      	adds	r7, r3, #1
 800b176:	971b      	str	r7, [sp, #108]	; 0x6c
 800b178:	785b      	ldrb	r3, [r3, #1]
 800b17a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b17e:	f1b8 0f09 	cmp.w	r8, #9
 800b182:	d937      	bls.n	800b1f4 <_strtod_l+0x32c>
 800b184:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b186:	1a7f      	subs	r7, r7, r1
 800b188:	2f08      	cmp	r7, #8
 800b18a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b18e:	dc37      	bgt.n	800b200 <_strtod_l+0x338>
 800b190:	45be      	cmp	lr, r7
 800b192:	bfa8      	it	ge
 800b194:	46be      	movge	lr, r7
 800b196:	f1bc 0f00 	cmp.w	ip, #0
 800b19a:	d001      	beq.n	800b1a0 <_strtod_l+0x2d8>
 800b19c:	f1ce 0e00 	rsb	lr, lr, #0
 800b1a0:	2c00      	cmp	r4, #0
 800b1a2:	d151      	bne.n	800b248 <_strtod_l+0x380>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	f47f aece 	bne.w	800af46 <_strtod_l+0x7e>
 800b1aa:	9a06      	ldr	r2, [sp, #24]
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	f47f aeca 	bne.w	800af46 <_strtod_l+0x7e>
 800b1b2:	9a04      	ldr	r2, [sp, #16]
 800b1b4:	2a00      	cmp	r2, #0
 800b1b6:	f47f aee4 	bne.w	800af82 <_strtod_l+0xba>
 800b1ba:	2b4e      	cmp	r3, #78	; 0x4e
 800b1bc:	d027      	beq.n	800b20e <_strtod_l+0x346>
 800b1be:	dc21      	bgt.n	800b204 <_strtod_l+0x33c>
 800b1c0:	2b49      	cmp	r3, #73	; 0x49
 800b1c2:	f47f aede 	bne.w	800af82 <_strtod_l+0xba>
 800b1c6:	49a0      	ldr	r1, [pc, #640]	; (800b448 <_strtod_l+0x580>)
 800b1c8:	a81b      	add	r0, sp, #108	; 0x6c
 800b1ca:	f001 fdd7 	bl	800cd7c <__match>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f43f aed7 	beq.w	800af82 <_strtod_l+0xba>
 800b1d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1d6:	499d      	ldr	r1, [pc, #628]	; (800b44c <_strtod_l+0x584>)
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	a81b      	add	r0, sp, #108	; 0x6c
 800b1dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1de:	f001 fdcd 	bl	800cd7c <__match>
 800b1e2:	b910      	cbnz	r0, 800b1ea <_strtod_l+0x322>
 800b1e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1ea:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b460 <_strtod_l+0x598>
 800b1ee:	f04f 0a00 	mov.w	sl, #0
 800b1f2:	e6a8      	b.n	800af46 <_strtod_l+0x7e>
 800b1f4:	210a      	movs	r1, #10
 800b1f6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b1fa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b1fe:	e7b8      	b.n	800b172 <_strtod_l+0x2aa>
 800b200:	46be      	mov	lr, r7
 800b202:	e7c8      	b.n	800b196 <_strtod_l+0x2ce>
 800b204:	2b69      	cmp	r3, #105	; 0x69
 800b206:	d0de      	beq.n	800b1c6 <_strtod_l+0x2fe>
 800b208:	2b6e      	cmp	r3, #110	; 0x6e
 800b20a:	f47f aeba 	bne.w	800af82 <_strtod_l+0xba>
 800b20e:	4990      	ldr	r1, [pc, #576]	; (800b450 <_strtod_l+0x588>)
 800b210:	a81b      	add	r0, sp, #108	; 0x6c
 800b212:	f001 fdb3 	bl	800cd7c <__match>
 800b216:	2800      	cmp	r0, #0
 800b218:	f43f aeb3 	beq.w	800af82 <_strtod_l+0xba>
 800b21c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b28      	cmp	r3, #40	; 0x28
 800b222:	d10e      	bne.n	800b242 <_strtod_l+0x37a>
 800b224:	aa1e      	add	r2, sp, #120	; 0x78
 800b226:	498b      	ldr	r1, [pc, #556]	; (800b454 <_strtod_l+0x58c>)
 800b228:	a81b      	add	r0, sp, #108	; 0x6c
 800b22a:	f001 fdbb 	bl	800cda4 <__hexnan>
 800b22e:	2805      	cmp	r0, #5
 800b230:	d107      	bne.n	800b242 <_strtod_l+0x37a>
 800b232:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b234:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b238:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b23c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b240:	e681      	b.n	800af46 <_strtod_l+0x7e>
 800b242:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b468 <_strtod_l+0x5a0>
 800b246:	e7d2      	b.n	800b1ee <_strtod_l+0x326>
 800b248:	ebae 0302 	sub.w	r3, lr, r2
 800b24c:	9306      	str	r3, [sp, #24]
 800b24e:	9b05      	ldr	r3, [sp, #20]
 800b250:	9807      	ldr	r0, [sp, #28]
 800b252:	2b00      	cmp	r3, #0
 800b254:	bf08      	it	eq
 800b256:	4623      	moveq	r3, r4
 800b258:	2c10      	cmp	r4, #16
 800b25a:	9305      	str	r3, [sp, #20]
 800b25c:	46a0      	mov	r8, r4
 800b25e:	bfa8      	it	ge
 800b260:	f04f 0810 	movge.w	r8, #16
 800b264:	f7f5 f956 	bl	8000514 <__aeabi_ui2d>
 800b268:	2c09      	cmp	r4, #9
 800b26a:	4682      	mov	sl, r0
 800b26c:	468b      	mov	fp, r1
 800b26e:	dc13      	bgt.n	800b298 <_strtod_l+0x3d0>
 800b270:	9b06      	ldr	r3, [sp, #24]
 800b272:	2b00      	cmp	r3, #0
 800b274:	f43f ae67 	beq.w	800af46 <_strtod_l+0x7e>
 800b278:	9b06      	ldr	r3, [sp, #24]
 800b27a:	dd7a      	ble.n	800b372 <_strtod_l+0x4aa>
 800b27c:	2b16      	cmp	r3, #22
 800b27e:	dc61      	bgt.n	800b344 <_strtod_l+0x47c>
 800b280:	4a75      	ldr	r2, [pc, #468]	; (800b458 <_strtod_l+0x590>)
 800b282:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b286:	e9de 0100 	ldrd	r0, r1, [lr]
 800b28a:	4652      	mov	r2, sl
 800b28c:	465b      	mov	r3, fp
 800b28e:	f7f5 f9bb 	bl	8000608 <__aeabi_dmul>
 800b292:	4682      	mov	sl, r0
 800b294:	468b      	mov	fp, r1
 800b296:	e656      	b.n	800af46 <_strtod_l+0x7e>
 800b298:	4b6f      	ldr	r3, [pc, #444]	; (800b458 <_strtod_l+0x590>)
 800b29a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b29e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2a2:	f7f5 f9b1 	bl	8000608 <__aeabi_dmul>
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	460f      	mov	r7, r1
 800b2ac:	f7f5 f932 	bl	8000514 <__aeabi_ui2d>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	4639      	mov	r1, r7
 800b2b8:	f7f4 fff0 	bl	800029c <__adddf3>
 800b2bc:	2c0f      	cmp	r4, #15
 800b2be:	4682      	mov	sl, r0
 800b2c0:	468b      	mov	fp, r1
 800b2c2:	ddd5      	ble.n	800b270 <_strtod_l+0x3a8>
 800b2c4:	9b06      	ldr	r3, [sp, #24]
 800b2c6:	eba4 0808 	sub.w	r8, r4, r8
 800b2ca:	4498      	add	r8, r3
 800b2cc:	f1b8 0f00 	cmp.w	r8, #0
 800b2d0:	f340 8096 	ble.w	800b400 <_strtod_l+0x538>
 800b2d4:	f018 030f 	ands.w	r3, r8, #15
 800b2d8:	d00a      	beq.n	800b2f0 <_strtod_l+0x428>
 800b2da:	495f      	ldr	r1, [pc, #380]	; (800b458 <_strtod_l+0x590>)
 800b2dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	465b      	mov	r3, fp
 800b2e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e8:	f7f5 f98e 	bl	8000608 <__aeabi_dmul>
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	468b      	mov	fp, r1
 800b2f0:	f038 080f 	bics.w	r8, r8, #15
 800b2f4:	d073      	beq.n	800b3de <_strtod_l+0x516>
 800b2f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b2fa:	dd47      	ble.n	800b38c <_strtod_l+0x4c4>
 800b2fc:	2400      	movs	r4, #0
 800b2fe:	46a0      	mov	r8, r4
 800b300:	9407      	str	r4, [sp, #28]
 800b302:	9405      	str	r4, [sp, #20]
 800b304:	2322      	movs	r3, #34	; 0x22
 800b306:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b460 <_strtod_l+0x598>
 800b30a:	f8c9 3000 	str.w	r3, [r9]
 800b30e:	f04f 0a00 	mov.w	sl, #0
 800b312:	9b07      	ldr	r3, [sp, #28]
 800b314:	2b00      	cmp	r3, #0
 800b316:	f43f ae16 	beq.w	800af46 <_strtod_l+0x7e>
 800b31a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b31c:	4648      	mov	r0, r9
 800b31e:	f001 fe33 	bl	800cf88 <_Bfree>
 800b322:	9905      	ldr	r1, [sp, #20]
 800b324:	4648      	mov	r0, r9
 800b326:	f001 fe2f 	bl	800cf88 <_Bfree>
 800b32a:	4641      	mov	r1, r8
 800b32c:	4648      	mov	r0, r9
 800b32e:	f001 fe2b 	bl	800cf88 <_Bfree>
 800b332:	9907      	ldr	r1, [sp, #28]
 800b334:	4648      	mov	r0, r9
 800b336:	f001 fe27 	bl	800cf88 <_Bfree>
 800b33a:	4621      	mov	r1, r4
 800b33c:	4648      	mov	r0, r9
 800b33e:	f001 fe23 	bl	800cf88 <_Bfree>
 800b342:	e600      	b.n	800af46 <_strtod_l+0x7e>
 800b344:	9a06      	ldr	r2, [sp, #24]
 800b346:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b34a:	4293      	cmp	r3, r2
 800b34c:	dbba      	blt.n	800b2c4 <_strtod_l+0x3fc>
 800b34e:	4d42      	ldr	r5, [pc, #264]	; (800b458 <_strtod_l+0x590>)
 800b350:	f1c4 040f 	rsb	r4, r4, #15
 800b354:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b358:	4652      	mov	r2, sl
 800b35a:	465b      	mov	r3, fp
 800b35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b360:	f7f5 f952 	bl	8000608 <__aeabi_dmul>
 800b364:	9b06      	ldr	r3, [sp, #24]
 800b366:	1b1c      	subs	r4, r3, r4
 800b368:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b36c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b370:	e78d      	b.n	800b28e <_strtod_l+0x3c6>
 800b372:	f113 0f16 	cmn.w	r3, #22
 800b376:	dba5      	blt.n	800b2c4 <_strtod_l+0x3fc>
 800b378:	4a37      	ldr	r2, [pc, #220]	; (800b458 <_strtod_l+0x590>)
 800b37a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b37e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b382:	4650      	mov	r0, sl
 800b384:	4659      	mov	r1, fp
 800b386:	f7f5 fa69 	bl	800085c <__aeabi_ddiv>
 800b38a:	e782      	b.n	800b292 <_strtod_l+0x3ca>
 800b38c:	2300      	movs	r3, #0
 800b38e:	4e33      	ldr	r6, [pc, #204]	; (800b45c <_strtod_l+0x594>)
 800b390:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b394:	4650      	mov	r0, sl
 800b396:	4659      	mov	r1, fp
 800b398:	461d      	mov	r5, r3
 800b39a:	f1b8 0f01 	cmp.w	r8, #1
 800b39e:	dc21      	bgt.n	800b3e4 <_strtod_l+0x51c>
 800b3a0:	b10b      	cbz	r3, 800b3a6 <_strtod_l+0x4de>
 800b3a2:	4682      	mov	sl, r0
 800b3a4:	468b      	mov	fp, r1
 800b3a6:	4b2d      	ldr	r3, [pc, #180]	; (800b45c <_strtod_l+0x594>)
 800b3a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b3b0:	4652      	mov	r2, sl
 800b3b2:	465b      	mov	r3, fp
 800b3b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b3b8:	f7f5 f926 	bl	8000608 <__aeabi_dmul>
 800b3bc:	4b28      	ldr	r3, [pc, #160]	; (800b460 <_strtod_l+0x598>)
 800b3be:	460a      	mov	r2, r1
 800b3c0:	400b      	ands	r3, r1
 800b3c2:	4928      	ldr	r1, [pc, #160]	; (800b464 <_strtod_l+0x59c>)
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	4682      	mov	sl, r0
 800b3c8:	d898      	bhi.n	800b2fc <_strtod_l+0x434>
 800b3ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b3ce:	428b      	cmp	r3, r1
 800b3d0:	bf86      	itte	hi
 800b3d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b46c <_strtod_l+0x5a4>
 800b3d6:	f04f 3aff 	movhi.w	sl, #4294967295
 800b3da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9304      	str	r3, [sp, #16]
 800b3e2:	e077      	b.n	800b4d4 <_strtod_l+0x60c>
 800b3e4:	f018 0f01 	tst.w	r8, #1
 800b3e8:	d006      	beq.n	800b3f8 <_strtod_l+0x530>
 800b3ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	f7f5 f909 	bl	8000608 <__aeabi_dmul>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	3501      	adds	r5, #1
 800b3fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b3fe:	e7cc      	b.n	800b39a <_strtod_l+0x4d2>
 800b400:	d0ed      	beq.n	800b3de <_strtod_l+0x516>
 800b402:	f1c8 0800 	rsb	r8, r8, #0
 800b406:	f018 020f 	ands.w	r2, r8, #15
 800b40a:	d00a      	beq.n	800b422 <_strtod_l+0x55a>
 800b40c:	4b12      	ldr	r3, [pc, #72]	; (800b458 <_strtod_l+0x590>)
 800b40e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b412:	4650      	mov	r0, sl
 800b414:	4659      	mov	r1, fp
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f7f5 fa1f 	bl	800085c <__aeabi_ddiv>
 800b41e:	4682      	mov	sl, r0
 800b420:	468b      	mov	fp, r1
 800b422:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b426:	d0da      	beq.n	800b3de <_strtod_l+0x516>
 800b428:	f1b8 0f1f 	cmp.w	r8, #31
 800b42c:	dd20      	ble.n	800b470 <_strtod_l+0x5a8>
 800b42e:	2400      	movs	r4, #0
 800b430:	46a0      	mov	r8, r4
 800b432:	9407      	str	r4, [sp, #28]
 800b434:	9405      	str	r4, [sp, #20]
 800b436:	2322      	movs	r3, #34	; 0x22
 800b438:	f04f 0a00 	mov.w	sl, #0
 800b43c:	f04f 0b00 	mov.w	fp, #0
 800b440:	f8c9 3000 	str.w	r3, [r9]
 800b444:	e765      	b.n	800b312 <_strtod_l+0x44a>
 800b446:	bf00      	nop
 800b448:	0800dd5d 	.word	0x0800dd5d
 800b44c:	0800ddeb 	.word	0x0800ddeb
 800b450:	0800dd65 	.word	0x0800dd65
 800b454:	0800dda8 	.word	0x0800dda8
 800b458:	0800de28 	.word	0x0800de28
 800b45c:	0800de00 	.word	0x0800de00
 800b460:	7ff00000 	.word	0x7ff00000
 800b464:	7ca00000 	.word	0x7ca00000
 800b468:	fff80000 	.word	0xfff80000
 800b46c:	7fefffff 	.word	0x7fefffff
 800b470:	f018 0310 	ands.w	r3, r8, #16
 800b474:	bf18      	it	ne
 800b476:	236a      	movne	r3, #106	; 0x6a
 800b478:	4da0      	ldr	r5, [pc, #640]	; (800b6fc <_strtod_l+0x834>)
 800b47a:	9304      	str	r3, [sp, #16]
 800b47c:	4650      	mov	r0, sl
 800b47e:	4659      	mov	r1, fp
 800b480:	2300      	movs	r3, #0
 800b482:	f1b8 0f00 	cmp.w	r8, #0
 800b486:	f300 810a 	bgt.w	800b69e <_strtod_l+0x7d6>
 800b48a:	b10b      	cbz	r3, 800b490 <_strtod_l+0x5c8>
 800b48c:	4682      	mov	sl, r0
 800b48e:	468b      	mov	fp, r1
 800b490:	9b04      	ldr	r3, [sp, #16]
 800b492:	b1bb      	cbz	r3, 800b4c4 <_strtod_l+0x5fc>
 800b494:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b498:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	4659      	mov	r1, fp
 800b4a0:	dd10      	ble.n	800b4c4 <_strtod_l+0x5fc>
 800b4a2:	2b1f      	cmp	r3, #31
 800b4a4:	f340 8107 	ble.w	800b6b6 <_strtod_l+0x7ee>
 800b4a8:	2b34      	cmp	r3, #52	; 0x34
 800b4aa:	bfde      	ittt	le
 800b4ac:	3b20      	suble	r3, #32
 800b4ae:	f04f 32ff 	movle.w	r2, #4294967295
 800b4b2:	fa02 f303 	lslle.w	r3, r2, r3
 800b4b6:	f04f 0a00 	mov.w	sl, #0
 800b4ba:	bfcc      	ite	gt
 800b4bc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b4c0:	ea03 0b01 	andle.w	fp, r3, r1
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	4659      	mov	r1, fp
 800b4cc:	f7f5 fb04 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d1ac      	bne.n	800b42e <_strtod_l+0x566>
 800b4d4:	9b07      	ldr	r3, [sp, #28]
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	9a05      	ldr	r2, [sp, #20]
 800b4da:	9908      	ldr	r1, [sp, #32]
 800b4dc:	4623      	mov	r3, r4
 800b4de:	4648      	mov	r0, r9
 800b4e0:	f001 fda4 	bl	800d02c <__s2b>
 800b4e4:	9007      	str	r0, [sp, #28]
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f43f af08 	beq.w	800b2fc <_strtod_l+0x434>
 800b4ec:	9a06      	ldr	r2, [sp, #24]
 800b4ee:	9b06      	ldr	r3, [sp, #24]
 800b4f0:	2a00      	cmp	r2, #0
 800b4f2:	f1c3 0300 	rsb	r3, r3, #0
 800b4f6:	bfa8      	it	ge
 800b4f8:	2300      	movge	r3, #0
 800b4fa:	930e      	str	r3, [sp, #56]	; 0x38
 800b4fc:	2400      	movs	r4, #0
 800b4fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b502:	9316      	str	r3, [sp, #88]	; 0x58
 800b504:	46a0      	mov	r8, r4
 800b506:	9b07      	ldr	r3, [sp, #28]
 800b508:	4648      	mov	r0, r9
 800b50a:	6859      	ldr	r1, [r3, #4]
 800b50c:	f001 fd08 	bl	800cf20 <_Balloc>
 800b510:	9005      	str	r0, [sp, #20]
 800b512:	2800      	cmp	r0, #0
 800b514:	f43f aef6 	beq.w	800b304 <_strtod_l+0x43c>
 800b518:	9b07      	ldr	r3, [sp, #28]
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	3202      	adds	r2, #2
 800b51e:	f103 010c 	add.w	r1, r3, #12
 800b522:	0092      	lsls	r2, r2, #2
 800b524:	300c      	adds	r0, #12
 800b526:	f7fe fe3b 	bl	800a1a0 <memcpy>
 800b52a:	aa1e      	add	r2, sp, #120	; 0x78
 800b52c:	a91d      	add	r1, sp, #116	; 0x74
 800b52e:	ec4b ab10 	vmov	d0, sl, fp
 800b532:	4648      	mov	r0, r9
 800b534:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b538:	f002 f834 	bl	800d5a4 <__d2b>
 800b53c:	901c      	str	r0, [sp, #112]	; 0x70
 800b53e:	2800      	cmp	r0, #0
 800b540:	f43f aee0 	beq.w	800b304 <_strtod_l+0x43c>
 800b544:	2101      	movs	r1, #1
 800b546:	4648      	mov	r0, r9
 800b548:	f001 fdfc 	bl	800d144 <__i2b>
 800b54c:	4680      	mov	r8, r0
 800b54e:	2800      	cmp	r0, #0
 800b550:	f43f aed8 	beq.w	800b304 <_strtod_l+0x43c>
 800b554:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b556:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b558:	2e00      	cmp	r6, #0
 800b55a:	bfab      	itete	ge
 800b55c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b55e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b560:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b562:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b564:	bfac      	ite	ge
 800b566:	18f7      	addge	r7, r6, r3
 800b568:	1b9d      	sublt	r5, r3, r6
 800b56a:	9b04      	ldr	r3, [sp, #16]
 800b56c:	1af6      	subs	r6, r6, r3
 800b56e:	4416      	add	r6, r2
 800b570:	4b63      	ldr	r3, [pc, #396]	; (800b700 <_strtod_l+0x838>)
 800b572:	3e01      	subs	r6, #1
 800b574:	429e      	cmp	r6, r3
 800b576:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b57a:	f280 80af 	bge.w	800b6dc <_strtod_l+0x814>
 800b57e:	1b9b      	subs	r3, r3, r6
 800b580:	2b1f      	cmp	r3, #31
 800b582:	eba2 0203 	sub.w	r2, r2, r3
 800b586:	f04f 0101 	mov.w	r1, #1
 800b58a:	f300 809b 	bgt.w	800b6c4 <_strtod_l+0x7fc>
 800b58e:	fa01 f303 	lsl.w	r3, r1, r3
 800b592:	930f      	str	r3, [sp, #60]	; 0x3c
 800b594:	2300      	movs	r3, #0
 800b596:	930a      	str	r3, [sp, #40]	; 0x28
 800b598:	18be      	adds	r6, r7, r2
 800b59a:	9b04      	ldr	r3, [sp, #16]
 800b59c:	42b7      	cmp	r7, r6
 800b59e:	4415      	add	r5, r2
 800b5a0:	441d      	add	r5, r3
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	bfa8      	it	ge
 800b5a6:	4633      	movge	r3, r6
 800b5a8:	42ab      	cmp	r3, r5
 800b5aa:	bfa8      	it	ge
 800b5ac:	462b      	movge	r3, r5
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	bfc2      	ittt	gt
 800b5b2:	1af6      	subgt	r6, r6, r3
 800b5b4:	1aed      	subgt	r5, r5, r3
 800b5b6:	1aff      	subgt	r7, r7, r3
 800b5b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ba:	b1bb      	cbz	r3, 800b5ec <_strtod_l+0x724>
 800b5bc:	4641      	mov	r1, r8
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4648      	mov	r0, r9
 800b5c2:	f001 fe5f 	bl	800d284 <__pow5mult>
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	f43f ae9b 	beq.w	800b304 <_strtod_l+0x43c>
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b5d2:	4648      	mov	r0, r9
 800b5d4:	f001 fdbf 	bl	800d156 <__multiply>
 800b5d8:	900c      	str	r0, [sp, #48]	; 0x30
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	f43f ae92 	beq.w	800b304 <_strtod_l+0x43c>
 800b5e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5e2:	4648      	mov	r0, r9
 800b5e4:	f001 fcd0 	bl	800cf88 <_Bfree>
 800b5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5ea:	931c      	str	r3, [sp, #112]	; 0x70
 800b5ec:	2e00      	cmp	r6, #0
 800b5ee:	dc7a      	bgt.n	800b6e6 <_strtod_l+0x81e>
 800b5f0:	9b06      	ldr	r3, [sp, #24]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	dd08      	ble.n	800b608 <_strtod_l+0x740>
 800b5f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b5f8:	9905      	ldr	r1, [sp, #20]
 800b5fa:	4648      	mov	r0, r9
 800b5fc:	f001 fe42 	bl	800d284 <__pow5mult>
 800b600:	9005      	str	r0, [sp, #20]
 800b602:	2800      	cmp	r0, #0
 800b604:	f43f ae7e 	beq.w	800b304 <_strtod_l+0x43c>
 800b608:	2d00      	cmp	r5, #0
 800b60a:	dd08      	ble.n	800b61e <_strtod_l+0x756>
 800b60c:	462a      	mov	r2, r5
 800b60e:	9905      	ldr	r1, [sp, #20]
 800b610:	4648      	mov	r0, r9
 800b612:	f001 fe85 	bl	800d320 <__lshift>
 800b616:	9005      	str	r0, [sp, #20]
 800b618:	2800      	cmp	r0, #0
 800b61a:	f43f ae73 	beq.w	800b304 <_strtod_l+0x43c>
 800b61e:	2f00      	cmp	r7, #0
 800b620:	dd08      	ble.n	800b634 <_strtod_l+0x76c>
 800b622:	4641      	mov	r1, r8
 800b624:	463a      	mov	r2, r7
 800b626:	4648      	mov	r0, r9
 800b628:	f001 fe7a 	bl	800d320 <__lshift>
 800b62c:	4680      	mov	r8, r0
 800b62e:	2800      	cmp	r0, #0
 800b630:	f43f ae68 	beq.w	800b304 <_strtod_l+0x43c>
 800b634:	9a05      	ldr	r2, [sp, #20]
 800b636:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b638:	4648      	mov	r0, r9
 800b63a:	f001 fedf 	bl	800d3fc <__mdiff>
 800b63e:	4604      	mov	r4, r0
 800b640:	2800      	cmp	r0, #0
 800b642:	f43f ae5f 	beq.w	800b304 <_strtod_l+0x43c>
 800b646:	68c3      	ldr	r3, [r0, #12]
 800b648:	930c      	str	r3, [sp, #48]	; 0x30
 800b64a:	2300      	movs	r3, #0
 800b64c:	60c3      	str	r3, [r0, #12]
 800b64e:	4641      	mov	r1, r8
 800b650:	f001 feba 	bl	800d3c8 <__mcmp>
 800b654:	2800      	cmp	r0, #0
 800b656:	da55      	bge.n	800b704 <_strtod_l+0x83c>
 800b658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b65a:	b9e3      	cbnz	r3, 800b696 <_strtod_l+0x7ce>
 800b65c:	f1ba 0f00 	cmp.w	sl, #0
 800b660:	d119      	bne.n	800b696 <_strtod_l+0x7ce>
 800b662:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b666:	b9b3      	cbnz	r3, 800b696 <_strtod_l+0x7ce>
 800b668:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b66c:	0d1b      	lsrs	r3, r3, #20
 800b66e:	051b      	lsls	r3, r3, #20
 800b670:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b674:	d90f      	bls.n	800b696 <_strtod_l+0x7ce>
 800b676:	6963      	ldr	r3, [r4, #20]
 800b678:	b913      	cbnz	r3, 800b680 <_strtod_l+0x7b8>
 800b67a:	6923      	ldr	r3, [r4, #16]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	dd0a      	ble.n	800b696 <_strtod_l+0x7ce>
 800b680:	4621      	mov	r1, r4
 800b682:	2201      	movs	r2, #1
 800b684:	4648      	mov	r0, r9
 800b686:	f001 fe4b 	bl	800d320 <__lshift>
 800b68a:	4641      	mov	r1, r8
 800b68c:	4604      	mov	r4, r0
 800b68e:	f001 fe9b 	bl	800d3c8 <__mcmp>
 800b692:	2800      	cmp	r0, #0
 800b694:	dc67      	bgt.n	800b766 <_strtod_l+0x89e>
 800b696:	9b04      	ldr	r3, [sp, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d171      	bne.n	800b780 <_strtod_l+0x8b8>
 800b69c:	e63d      	b.n	800b31a <_strtod_l+0x452>
 800b69e:	f018 0f01 	tst.w	r8, #1
 800b6a2:	d004      	beq.n	800b6ae <_strtod_l+0x7e6>
 800b6a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6a8:	f7f4 ffae 	bl	8000608 <__aeabi_dmul>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b6b2:	3508      	adds	r5, #8
 800b6b4:	e6e5      	b.n	800b482 <_strtod_l+0x5ba>
 800b6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b6be:	ea03 0a0a 	and.w	sl, r3, sl
 800b6c2:	e6ff      	b.n	800b4c4 <_strtod_l+0x5fc>
 800b6c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b6c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b6cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b6d0:	36e2      	adds	r6, #226	; 0xe2
 800b6d2:	fa01 f306 	lsl.w	r3, r1, r6
 800b6d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800b6da:	e75d      	b.n	800b598 <_strtod_l+0x6d0>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	930a      	str	r3, [sp, #40]	; 0x28
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6e4:	e758      	b.n	800b598 <_strtod_l+0x6d0>
 800b6e6:	4632      	mov	r2, r6
 800b6e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6ea:	4648      	mov	r0, r9
 800b6ec:	f001 fe18 	bl	800d320 <__lshift>
 800b6f0:	901c      	str	r0, [sp, #112]	; 0x70
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	f47f af7c 	bne.w	800b5f0 <_strtod_l+0x728>
 800b6f8:	e604      	b.n	800b304 <_strtod_l+0x43c>
 800b6fa:	bf00      	nop
 800b6fc:	0800ddc0 	.word	0x0800ddc0
 800b700:	fffffc02 	.word	0xfffffc02
 800b704:	465d      	mov	r5, fp
 800b706:	f040 8086 	bne.w	800b816 <_strtod_l+0x94e>
 800b70a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b70c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b710:	b32a      	cbz	r2, 800b75e <_strtod_l+0x896>
 800b712:	4aaf      	ldr	r2, [pc, #700]	; (800b9d0 <_strtod_l+0xb08>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d153      	bne.n	800b7c0 <_strtod_l+0x8f8>
 800b718:	9b04      	ldr	r3, [sp, #16]
 800b71a:	4650      	mov	r0, sl
 800b71c:	b1d3      	cbz	r3, 800b754 <_strtod_l+0x88c>
 800b71e:	4aad      	ldr	r2, [pc, #692]	; (800b9d4 <_strtod_l+0xb0c>)
 800b720:	402a      	ands	r2, r5
 800b722:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b726:	f04f 31ff 	mov.w	r1, #4294967295
 800b72a:	d816      	bhi.n	800b75a <_strtod_l+0x892>
 800b72c:	0d12      	lsrs	r2, r2, #20
 800b72e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b732:	fa01 f303 	lsl.w	r3, r1, r3
 800b736:	4298      	cmp	r0, r3
 800b738:	d142      	bne.n	800b7c0 <_strtod_l+0x8f8>
 800b73a:	4ba7      	ldr	r3, [pc, #668]	; (800b9d8 <_strtod_l+0xb10>)
 800b73c:	429d      	cmp	r5, r3
 800b73e:	d102      	bne.n	800b746 <_strtod_l+0x87e>
 800b740:	3001      	adds	r0, #1
 800b742:	f43f addf 	beq.w	800b304 <_strtod_l+0x43c>
 800b746:	4ba3      	ldr	r3, [pc, #652]	; (800b9d4 <_strtod_l+0xb0c>)
 800b748:	402b      	ands	r3, r5
 800b74a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b74e:	f04f 0a00 	mov.w	sl, #0
 800b752:	e7a0      	b.n	800b696 <_strtod_l+0x7ce>
 800b754:	f04f 33ff 	mov.w	r3, #4294967295
 800b758:	e7ed      	b.n	800b736 <_strtod_l+0x86e>
 800b75a:	460b      	mov	r3, r1
 800b75c:	e7eb      	b.n	800b736 <_strtod_l+0x86e>
 800b75e:	bb7b      	cbnz	r3, 800b7c0 <_strtod_l+0x8f8>
 800b760:	f1ba 0f00 	cmp.w	sl, #0
 800b764:	d12c      	bne.n	800b7c0 <_strtod_l+0x8f8>
 800b766:	9904      	ldr	r1, [sp, #16]
 800b768:	4a9a      	ldr	r2, [pc, #616]	; (800b9d4 <_strtod_l+0xb0c>)
 800b76a:	465b      	mov	r3, fp
 800b76c:	b1f1      	cbz	r1, 800b7ac <_strtod_l+0x8e4>
 800b76e:	ea02 010b 	and.w	r1, r2, fp
 800b772:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b776:	dc19      	bgt.n	800b7ac <_strtod_l+0x8e4>
 800b778:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b77c:	f77f ae5b 	ble.w	800b436 <_strtod_l+0x56e>
 800b780:	4a96      	ldr	r2, [pc, #600]	; (800b9dc <_strtod_l+0xb14>)
 800b782:	2300      	movs	r3, #0
 800b784:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b788:	4650      	mov	r0, sl
 800b78a:	4659      	mov	r1, fp
 800b78c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b790:	f7f4 ff3a 	bl	8000608 <__aeabi_dmul>
 800b794:	4682      	mov	sl, r0
 800b796:	468b      	mov	fp, r1
 800b798:	2900      	cmp	r1, #0
 800b79a:	f47f adbe 	bne.w	800b31a <_strtod_l+0x452>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	f47f adbb 	bne.w	800b31a <_strtod_l+0x452>
 800b7a4:	2322      	movs	r3, #34	; 0x22
 800b7a6:	f8c9 3000 	str.w	r3, [r9]
 800b7aa:	e5b6      	b.n	800b31a <_strtod_l+0x452>
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7ba:	f04f 3aff 	mov.w	sl, #4294967295
 800b7be:	e76a      	b.n	800b696 <_strtod_l+0x7ce>
 800b7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c2:	b193      	cbz	r3, 800b7ea <_strtod_l+0x922>
 800b7c4:	422b      	tst	r3, r5
 800b7c6:	f43f af66 	beq.w	800b696 <_strtod_l+0x7ce>
 800b7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7cc:	9a04      	ldr	r2, [sp, #16]
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	4659      	mov	r1, fp
 800b7d2:	b173      	cbz	r3, 800b7f2 <_strtod_l+0x92a>
 800b7d4:	f7ff fb5c 	bl	800ae90 <sulp>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7e0:	f7f4 fd5c 	bl	800029c <__adddf3>
 800b7e4:	4682      	mov	sl, r0
 800b7e6:	468b      	mov	fp, r1
 800b7e8:	e755      	b.n	800b696 <_strtod_l+0x7ce>
 800b7ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7ec:	ea13 0f0a 	tst.w	r3, sl
 800b7f0:	e7e9      	b.n	800b7c6 <_strtod_l+0x8fe>
 800b7f2:	f7ff fb4d 	bl	800ae90 <sulp>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7fe:	f7f4 fd4b 	bl	8000298 <__aeabi_dsub>
 800b802:	2200      	movs	r2, #0
 800b804:	2300      	movs	r3, #0
 800b806:	4682      	mov	sl, r0
 800b808:	468b      	mov	fp, r1
 800b80a:	f7f5 f965 	bl	8000ad8 <__aeabi_dcmpeq>
 800b80e:	2800      	cmp	r0, #0
 800b810:	f47f ae11 	bne.w	800b436 <_strtod_l+0x56e>
 800b814:	e73f      	b.n	800b696 <_strtod_l+0x7ce>
 800b816:	4641      	mov	r1, r8
 800b818:	4620      	mov	r0, r4
 800b81a:	f001 ff12 	bl	800d642 <__ratio>
 800b81e:	ec57 6b10 	vmov	r6, r7, d0
 800b822:	2200      	movs	r2, #0
 800b824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b828:	ee10 0a10 	vmov	r0, s0
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f5 f967 	bl	8000b00 <__aeabi_dcmple>
 800b832:	2800      	cmp	r0, #0
 800b834:	d077      	beq.n	800b926 <_strtod_l+0xa5e>
 800b836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d04a      	beq.n	800b8d2 <_strtod_l+0xa0a>
 800b83c:	4b68      	ldr	r3, [pc, #416]	; (800b9e0 <_strtod_l+0xb18>)
 800b83e:	2200      	movs	r2, #0
 800b840:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b844:	4f66      	ldr	r7, [pc, #408]	; (800b9e0 <_strtod_l+0xb18>)
 800b846:	2600      	movs	r6, #0
 800b848:	4b62      	ldr	r3, [pc, #392]	; (800b9d4 <_strtod_l+0xb0c>)
 800b84a:	402b      	ands	r3, r5
 800b84c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b84e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b850:	4b64      	ldr	r3, [pc, #400]	; (800b9e4 <_strtod_l+0xb1c>)
 800b852:	429a      	cmp	r2, r3
 800b854:	f040 80ce 	bne.w	800b9f4 <_strtod_l+0xb2c>
 800b858:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b85c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b860:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b864:	ec4b ab10 	vmov	d0, sl, fp
 800b868:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b86c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b870:	f001 fe22 	bl	800d4b8 <__ulp>
 800b874:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b878:	ec53 2b10 	vmov	r2, r3, d0
 800b87c:	f7f4 fec4 	bl	8000608 <__aeabi_dmul>
 800b880:	4652      	mov	r2, sl
 800b882:	465b      	mov	r3, fp
 800b884:	f7f4 fd0a 	bl	800029c <__adddf3>
 800b888:	460b      	mov	r3, r1
 800b88a:	4952      	ldr	r1, [pc, #328]	; (800b9d4 <_strtod_l+0xb0c>)
 800b88c:	4a56      	ldr	r2, [pc, #344]	; (800b9e8 <_strtod_l+0xb20>)
 800b88e:	4019      	ands	r1, r3
 800b890:	4291      	cmp	r1, r2
 800b892:	4682      	mov	sl, r0
 800b894:	d95b      	bls.n	800b94e <_strtod_l+0xa86>
 800b896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b898:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d103      	bne.n	800b8a8 <_strtod_l+0x9e0>
 800b8a0:	9b08      	ldr	r3, [sp, #32]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	f43f ad2e 	beq.w	800b304 <_strtod_l+0x43c>
 800b8a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b9d8 <_strtod_l+0xb10>
 800b8ac:	f04f 3aff 	mov.w	sl, #4294967295
 800b8b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8b2:	4648      	mov	r0, r9
 800b8b4:	f001 fb68 	bl	800cf88 <_Bfree>
 800b8b8:	9905      	ldr	r1, [sp, #20]
 800b8ba:	4648      	mov	r0, r9
 800b8bc:	f001 fb64 	bl	800cf88 <_Bfree>
 800b8c0:	4641      	mov	r1, r8
 800b8c2:	4648      	mov	r0, r9
 800b8c4:	f001 fb60 	bl	800cf88 <_Bfree>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4648      	mov	r0, r9
 800b8cc:	f001 fb5c 	bl	800cf88 <_Bfree>
 800b8d0:	e619      	b.n	800b506 <_strtod_l+0x63e>
 800b8d2:	f1ba 0f00 	cmp.w	sl, #0
 800b8d6:	d11a      	bne.n	800b90e <_strtod_l+0xa46>
 800b8d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8dc:	b9eb      	cbnz	r3, 800b91a <_strtod_l+0xa52>
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4b3f      	ldr	r3, [pc, #252]	; (800b9e0 <_strtod_l+0xb18>)
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	4639      	mov	r1, r7
 800b8e6:	f7f5 f901 	bl	8000aec <__aeabi_dcmplt>
 800b8ea:	b9c8      	cbnz	r0, 800b920 <_strtod_l+0xa58>
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4b3e      	ldr	r3, [pc, #248]	; (800b9ec <_strtod_l+0xb24>)
 800b8f4:	f7f4 fe88 	bl	8000608 <__aeabi_dmul>
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	460f      	mov	r7, r1
 800b8fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b900:	9618      	str	r6, [sp, #96]	; 0x60
 800b902:	9319      	str	r3, [sp, #100]	; 0x64
 800b904:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b908:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b90c:	e79c      	b.n	800b848 <_strtod_l+0x980>
 800b90e:	f1ba 0f01 	cmp.w	sl, #1
 800b912:	d102      	bne.n	800b91a <_strtod_l+0xa52>
 800b914:	2d00      	cmp	r5, #0
 800b916:	f43f ad8e 	beq.w	800b436 <_strtod_l+0x56e>
 800b91a:	2200      	movs	r2, #0
 800b91c:	4b34      	ldr	r3, [pc, #208]	; (800b9f0 <_strtod_l+0xb28>)
 800b91e:	e78f      	b.n	800b840 <_strtod_l+0x978>
 800b920:	2600      	movs	r6, #0
 800b922:	4f32      	ldr	r7, [pc, #200]	; (800b9ec <_strtod_l+0xb24>)
 800b924:	e7ea      	b.n	800b8fc <_strtod_l+0xa34>
 800b926:	4b31      	ldr	r3, [pc, #196]	; (800b9ec <_strtod_l+0xb24>)
 800b928:	4630      	mov	r0, r6
 800b92a:	4639      	mov	r1, r7
 800b92c:	2200      	movs	r2, #0
 800b92e:	f7f4 fe6b 	bl	8000608 <__aeabi_dmul>
 800b932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b934:	4606      	mov	r6, r0
 800b936:	460f      	mov	r7, r1
 800b938:	b933      	cbnz	r3, 800b948 <_strtod_l+0xa80>
 800b93a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b93e:	9010      	str	r0, [sp, #64]	; 0x40
 800b940:	9311      	str	r3, [sp, #68]	; 0x44
 800b942:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b946:	e7df      	b.n	800b908 <_strtod_l+0xa40>
 800b948:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b94c:	e7f9      	b.n	800b942 <_strtod_l+0xa7a>
 800b94e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b952:	9b04      	ldr	r3, [sp, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1ab      	bne.n	800b8b0 <_strtod_l+0x9e8>
 800b958:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b95c:	0d1b      	lsrs	r3, r3, #20
 800b95e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b960:	051b      	lsls	r3, r3, #20
 800b962:	429a      	cmp	r2, r3
 800b964:	465d      	mov	r5, fp
 800b966:	d1a3      	bne.n	800b8b0 <_strtod_l+0x9e8>
 800b968:	4639      	mov	r1, r7
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7f5 f8fc 	bl	8000b68 <__aeabi_d2iz>
 800b970:	f7f4 fde0 	bl	8000534 <__aeabi_i2d>
 800b974:	460b      	mov	r3, r1
 800b976:	4602      	mov	r2, r0
 800b978:	4639      	mov	r1, r7
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7f4 fc8c 	bl	8000298 <__aeabi_dsub>
 800b980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b982:	4606      	mov	r6, r0
 800b984:	460f      	mov	r7, r1
 800b986:	b933      	cbnz	r3, 800b996 <_strtod_l+0xace>
 800b988:	f1ba 0f00 	cmp.w	sl, #0
 800b98c:	d103      	bne.n	800b996 <_strtod_l+0xace>
 800b98e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b992:	2d00      	cmp	r5, #0
 800b994:	d06d      	beq.n	800ba72 <_strtod_l+0xbaa>
 800b996:	a30a      	add	r3, pc, #40	; (adr r3, 800b9c0 <_strtod_l+0xaf8>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	4630      	mov	r0, r6
 800b99e:	4639      	mov	r1, r7
 800b9a0:	f7f5 f8a4 	bl	8000aec <__aeabi_dcmplt>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	f47f acb8 	bne.w	800b31a <_strtod_l+0x452>
 800b9aa:	a307      	add	r3, pc, #28	; (adr r3, 800b9c8 <_strtod_l+0xb00>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	f7f5 f8b8 	bl	8000b28 <__aeabi_dcmpgt>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	f43f af79 	beq.w	800b8b0 <_strtod_l+0x9e8>
 800b9be:	e4ac      	b.n	800b31a <_strtod_l+0x452>
 800b9c0:	94a03595 	.word	0x94a03595
 800b9c4:	3fdfffff 	.word	0x3fdfffff
 800b9c8:	35afe535 	.word	0x35afe535
 800b9cc:	3fe00000 	.word	0x3fe00000
 800b9d0:	000fffff 	.word	0x000fffff
 800b9d4:	7ff00000 	.word	0x7ff00000
 800b9d8:	7fefffff 	.word	0x7fefffff
 800b9dc:	39500000 	.word	0x39500000
 800b9e0:	3ff00000 	.word	0x3ff00000
 800b9e4:	7fe00000 	.word	0x7fe00000
 800b9e8:	7c9fffff 	.word	0x7c9fffff
 800b9ec:	3fe00000 	.word	0x3fe00000
 800b9f0:	bff00000 	.word	0xbff00000
 800b9f4:	9b04      	ldr	r3, [sp, #16]
 800b9f6:	b333      	cbz	r3, 800ba46 <_strtod_l+0xb7e>
 800b9f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b9fe:	d822      	bhi.n	800ba46 <_strtod_l+0xb7e>
 800ba00:	a327      	add	r3, pc, #156	; (adr r3, 800baa0 <_strtod_l+0xbd8>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	4630      	mov	r0, r6
 800ba08:	4639      	mov	r1, r7
 800ba0a:	f7f5 f879 	bl	8000b00 <__aeabi_dcmple>
 800ba0e:	b1a0      	cbz	r0, 800ba3a <_strtod_l+0xb72>
 800ba10:	4639      	mov	r1, r7
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7f5 f8d0 	bl	8000bb8 <__aeabi_d2uiz>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	bf08      	it	eq
 800ba1c:	2001      	moveq	r0, #1
 800ba1e:	f7f4 fd79 	bl	8000514 <__aeabi_ui2d>
 800ba22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	bb03      	cbnz	r3, 800ba6c <_strtod_l+0xba4>
 800ba2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba2e:	9012      	str	r0, [sp, #72]	; 0x48
 800ba30:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ba36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba3e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba46:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ba4a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ba4e:	f001 fd33 	bl	800d4b8 <__ulp>
 800ba52:	4650      	mov	r0, sl
 800ba54:	ec53 2b10 	vmov	r2, r3, d0
 800ba58:	4659      	mov	r1, fp
 800ba5a:	f7f4 fdd5 	bl	8000608 <__aeabi_dmul>
 800ba5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba62:	f7f4 fc1b 	bl	800029c <__adddf3>
 800ba66:	4682      	mov	sl, r0
 800ba68:	468b      	mov	fp, r1
 800ba6a:	e772      	b.n	800b952 <_strtod_l+0xa8a>
 800ba6c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ba70:	e7df      	b.n	800ba32 <_strtod_l+0xb6a>
 800ba72:	a30d      	add	r3, pc, #52	; (adr r3, 800baa8 <_strtod_l+0xbe0>)
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	f7f5 f838 	bl	8000aec <__aeabi_dcmplt>
 800ba7c:	e79c      	b.n	800b9b8 <_strtod_l+0xaf0>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	930d      	str	r3, [sp, #52]	; 0x34
 800ba82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	f7ff ba61 	b.w	800af4e <_strtod_l+0x86>
 800ba8c:	2b65      	cmp	r3, #101	; 0x65
 800ba8e:	f04f 0200 	mov.w	r2, #0
 800ba92:	f43f ab4e 	beq.w	800b132 <_strtod_l+0x26a>
 800ba96:	2101      	movs	r1, #1
 800ba98:	4614      	mov	r4, r2
 800ba9a:	9104      	str	r1, [sp, #16]
 800ba9c:	f7ff bacb 	b.w	800b036 <_strtod_l+0x16e>
 800baa0:	ffc00000 	.word	0xffc00000
 800baa4:	41dfffff 	.word	0x41dfffff
 800baa8:	94a03595 	.word	0x94a03595
 800baac:	3fcfffff 	.word	0x3fcfffff

0800bab0 <_strtod_r>:
 800bab0:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <_strtod_r+0x18>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	b410      	push	{r4}
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	4c04      	ldr	r4, [pc, #16]	; (800bacc <_strtod_r+0x1c>)
 800baba:	2b00      	cmp	r3, #0
 800babc:	bf08      	it	eq
 800babe:	4623      	moveq	r3, r4
 800bac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bac4:	f7ff ba00 	b.w	800aec8 <_strtod_l>
 800bac8:	20000034 	.word	0x20000034
 800bacc:	20000098 	.word	0x20000098

0800bad0 <_strtol_l.isra.0>:
 800bad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad4:	4680      	mov	r8, r0
 800bad6:	4689      	mov	r9, r1
 800bad8:	4692      	mov	sl, r2
 800bada:	461e      	mov	r6, r3
 800badc:	460f      	mov	r7, r1
 800bade:	463d      	mov	r5, r7
 800bae0:	9808      	ldr	r0, [sp, #32]
 800bae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bae6:	f001 f9ed 	bl	800cec4 <__locale_ctype_ptr_l>
 800baea:	4420      	add	r0, r4
 800baec:	7843      	ldrb	r3, [r0, #1]
 800baee:	f013 0308 	ands.w	r3, r3, #8
 800baf2:	d132      	bne.n	800bb5a <_strtol_l.isra.0+0x8a>
 800baf4:	2c2d      	cmp	r4, #45	; 0x2d
 800baf6:	d132      	bne.n	800bb5e <_strtol_l.isra.0+0x8e>
 800baf8:	787c      	ldrb	r4, [r7, #1]
 800bafa:	1cbd      	adds	r5, r7, #2
 800bafc:	2201      	movs	r2, #1
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	d05d      	beq.n	800bbbe <_strtol_l.isra.0+0xee>
 800bb02:	2e10      	cmp	r6, #16
 800bb04:	d109      	bne.n	800bb1a <_strtol_l.isra.0+0x4a>
 800bb06:	2c30      	cmp	r4, #48	; 0x30
 800bb08:	d107      	bne.n	800bb1a <_strtol_l.isra.0+0x4a>
 800bb0a:	782b      	ldrb	r3, [r5, #0]
 800bb0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb10:	2b58      	cmp	r3, #88	; 0x58
 800bb12:	d14f      	bne.n	800bbb4 <_strtol_l.isra.0+0xe4>
 800bb14:	786c      	ldrb	r4, [r5, #1]
 800bb16:	2610      	movs	r6, #16
 800bb18:	3502      	adds	r5, #2
 800bb1a:	2a00      	cmp	r2, #0
 800bb1c:	bf14      	ite	ne
 800bb1e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bb22:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bb26:	2700      	movs	r7, #0
 800bb28:	fbb1 fcf6 	udiv	ip, r1, r6
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bb32:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bb36:	2b09      	cmp	r3, #9
 800bb38:	d817      	bhi.n	800bb6a <_strtol_l.isra.0+0x9a>
 800bb3a:	461c      	mov	r4, r3
 800bb3c:	42a6      	cmp	r6, r4
 800bb3e:	dd23      	ble.n	800bb88 <_strtol_l.isra.0+0xb8>
 800bb40:	1c7b      	adds	r3, r7, #1
 800bb42:	d007      	beq.n	800bb54 <_strtol_l.isra.0+0x84>
 800bb44:	4584      	cmp	ip, r0
 800bb46:	d31c      	bcc.n	800bb82 <_strtol_l.isra.0+0xb2>
 800bb48:	d101      	bne.n	800bb4e <_strtol_l.isra.0+0x7e>
 800bb4a:	45a6      	cmp	lr, r4
 800bb4c:	db19      	blt.n	800bb82 <_strtol_l.isra.0+0xb2>
 800bb4e:	fb00 4006 	mla	r0, r0, r6, r4
 800bb52:	2701      	movs	r7, #1
 800bb54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb58:	e7eb      	b.n	800bb32 <_strtol_l.isra.0+0x62>
 800bb5a:	462f      	mov	r7, r5
 800bb5c:	e7bf      	b.n	800bade <_strtol_l.isra.0+0xe>
 800bb5e:	2c2b      	cmp	r4, #43	; 0x2b
 800bb60:	bf04      	itt	eq
 800bb62:	1cbd      	addeq	r5, r7, #2
 800bb64:	787c      	ldrbeq	r4, [r7, #1]
 800bb66:	461a      	mov	r2, r3
 800bb68:	e7c9      	b.n	800bafe <_strtol_l.isra.0+0x2e>
 800bb6a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bb6e:	2b19      	cmp	r3, #25
 800bb70:	d801      	bhi.n	800bb76 <_strtol_l.isra.0+0xa6>
 800bb72:	3c37      	subs	r4, #55	; 0x37
 800bb74:	e7e2      	b.n	800bb3c <_strtol_l.isra.0+0x6c>
 800bb76:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bb7a:	2b19      	cmp	r3, #25
 800bb7c:	d804      	bhi.n	800bb88 <_strtol_l.isra.0+0xb8>
 800bb7e:	3c57      	subs	r4, #87	; 0x57
 800bb80:	e7dc      	b.n	800bb3c <_strtol_l.isra.0+0x6c>
 800bb82:	f04f 37ff 	mov.w	r7, #4294967295
 800bb86:	e7e5      	b.n	800bb54 <_strtol_l.isra.0+0x84>
 800bb88:	1c7b      	adds	r3, r7, #1
 800bb8a:	d108      	bne.n	800bb9e <_strtol_l.isra.0+0xce>
 800bb8c:	2322      	movs	r3, #34	; 0x22
 800bb8e:	f8c8 3000 	str.w	r3, [r8]
 800bb92:	4608      	mov	r0, r1
 800bb94:	f1ba 0f00 	cmp.w	sl, #0
 800bb98:	d107      	bne.n	800bbaa <_strtol_l.isra.0+0xda>
 800bb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9e:	b102      	cbz	r2, 800bba2 <_strtol_l.isra.0+0xd2>
 800bba0:	4240      	negs	r0, r0
 800bba2:	f1ba 0f00 	cmp.w	sl, #0
 800bba6:	d0f8      	beq.n	800bb9a <_strtol_l.isra.0+0xca>
 800bba8:	b10f      	cbz	r7, 800bbae <_strtol_l.isra.0+0xde>
 800bbaa:	f105 39ff 	add.w	r9, r5, #4294967295
 800bbae:	f8ca 9000 	str.w	r9, [sl]
 800bbb2:	e7f2      	b.n	800bb9a <_strtol_l.isra.0+0xca>
 800bbb4:	2430      	movs	r4, #48	; 0x30
 800bbb6:	2e00      	cmp	r6, #0
 800bbb8:	d1af      	bne.n	800bb1a <_strtol_l.isra.0+0x4a>
 800bbba:	2608      	movs	r6, #8
 800bbbc:	e7ad      	b.n	800bb1a <_strtol_l.isra.0+0x4a>
 800bbbe:	2c30      	cmp	r4, #48	; 0x30
 800bbc0:	d0a3      	beq.n	800bb0a <_strtol_l.isra.0+0x3a>
 800bbc2:	260a      	movs	r6, #10
 800bbc4:	e7a9      	b.n	800bb1a <_strtol_l.isra.0+0x4a>
	...

0800bbc8 <_strtol_r>:
 800bbc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbca:	4c06      	ldr	r4, [pc, #24]	; (800bbe4 <_strtol_r+0x1c>)
 800bbcc:	4d06      	ldr	r5, [pc, #24]	; (800bbe8 <_strtol_r+0x20>)
 800bbce:	6824      	ldr	r4, [r4, #0]
 800bbd0:	6a24      	ldr	r4, [r4, #32]
 800bbd2:	2c00      	cmp	r4, #0
 800bbd4:	bf08      	it	eq
 800bbd6:	462c      	moveq	r4, r5
 800bbd8:	9400      	str	r4, [sp, #0]
 800bbda:	f7ff ff79 	bl	800bad0 <_strtol_l.isra.0>
 800bbde:	b003      	add	sp, #12
 800bbe0:	bd30      	pop	{r4, r5, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000034 	.word	0x20000034
 800bbe8:	20000098 	.word	0x20000098

0800bbec <quorem>:
 800bbec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	6903      	ldr	r3, [r0, #16]
 800bbf2:	690c      	ldr	r4, [r1, #16]
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	4680      	mov	r8, r0
 800bbf8:	f2c0 8082 	blt.w	800bd00 <quorem+0x114>
 800bbfc:	3c01      	subs	r4, #1
 800bbfe:	f101 0714 	add.w	r7, r1, #20
 800bc02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bc06:	f100 0614 	add.w	r6, r0, #20
 800bc0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bc0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bc12:	eb06 030c 	add.w	r3, r6, ip
 800bc16:	3501      	adds	r5, #1
 800bc18:	eb07 090c 	add.w	r9, r7, ip
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	fbb0 f5f5 	udiv	r5, r0, r5
 800bc22:	b395      	cbz	r5, 800bc8a <quorem+0x9e>
 800bc24:	f04f 0a00 	mov.w	sl, #0
 800bc28:	4638      	mov	r0, r7
 800bc2a:	46b6      	mov	lr, r6
 800bc2c:	46d3      	mov	fp, sl
 800bc2e:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc32:	b293      	uxth	r3, r2
 800bc34:	fb05 a303 	mla	r3, r5, r3, sl
 800bc38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	ebab 0303 	sub.w	r3, fp, r3
 800bc42:	0c12      	lsrs	r2, r2, #16
 800bc44:	f8de b000 	ldr.w	fp, [lr]
 800bc48:	fb05 a202 	mla	r2, r5, r2, sl
 800bc4c:	fa13 f38b 	uxtah	r3, r3, fp
 800bc50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bc54:	fa1f fb82 	uxth.w	fp, r2
 800bc58:	f8de 2000 	ldr.w	r2, [lr]
 800bc5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bc60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc6a:	4581      	cmp	r9, r0
 800bc6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bc70:	f84e 3b04 	str.w	r3, [lr], #4
 800bc74:	d2db      	bcs.n	800bc2e <quorem+0x42>
 800bc76:	f856 300c 	ldr.w	r3, [r6, ip]
 800bc7a:	b933      	cbnz	r3, 800bc8a <quorem+0x9e>
 800bc7c:	9b01      	ldr	r3, [sp, #4]
 800bc7e:	3b04      	subs	r3, #4
 800bc80:	429e      	cmp	r6, r3
 800bc82:	461a      	mov	r2, r3
 800bc84:	d330      	bcc.n	800bce8 <quorem+0xfc>
 800bc86:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	f001 fb9c 	bl	800d3c8 <__mcmp>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	db25      	blt.n	800bce0 <quorem+0xf4>
 800bc94:	3501      	adds	r5, #1
 800bc96:	4630      	mov	r0, r6
 800bc98:	f04f 0c00 	mov.w	ip, #0
 800bc9c:	f857 2b04 	ldr.w	r2, [r7], #4
 800bca0:	f8d0 e000 	ldr.w	lr, [r0]
 800bca4:	b293      	uxth	r3, r2
 800bca6:	ebac 0303 	sub.w	r3, ip, r3
 800bcaa:	0c12      	lsrs	r2, r2, #16
 800bcac:	fa13 f38e 	uxtah	r3, r3, lr
 800bcb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bcb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcbe:	45b9      	cmp	r9, r7
 800bcc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bcc4:	f840 3b04 	str.w	r3, [r0], #4
 800bcc8:	d2e8      	bcs.n	800bc9c <quorem+0xb0>
 800bcca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bcce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bcd2:	b92a      	cbnz	r2, 800bce0 <quorem+0xf4>
 800bcd4:	3b04      	subs	r3, #4
 800bcd6:	429e      	cmp	r6, r3
 800bcd8:	461a      	mov	r2, r3
 800bcda:	d30b      	bcc.n	800bcf4 <quorem+0x108>
 800bcdc:	f8c8 4010 	str.w	r4, [r8, #16]
 800bce0:	4628      	mov	r0, r5
 800bce2:	b003      	add	sp, #12
 800bce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce8:	6812      	ldr	r2, [r2, #0]
 800bcea:	3b04      	subs	r3, #4
 800bcec:	2a00      	cmp	r2, #0
 800bcee:	d1ca      	bne.n	800bc86 <quorem+0x9a>
 800bcf0:	3c01      	subs	r4, #1
 800bcf2:	e7c5      	b.n	800bc80 <quorem+0x94>
 800bcf4:	6812      	ldr	r2, [r2, #0]
 800bcf6:	3b04      	subs	r3, #4
 800bcf8:	2a00      	cmp	r2, #0
 800bcfa:	d1ef      	bne.n	800bcdc <quorem+0xf0>
 800bcfc:	3c01      	subs	r4, #1
 800bcfe:	e7ea      	b.n	800bcd6 <quorem+0xea>
 800bd00:	2000      	movs	r0, #0
 800bd02:	e7ee      	b.n	800bce2 <quorem+0xf6>
 800bd04:	0000      	movs	r0, r0
	...

0800bd08 <_dtoa_r>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	ec57 6b10 	vmov	r6, r7, d0
 800bd10:	b097      	sub	sp, #92	; 0x5c
 800bd12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd14:	9106      	str	r1, [sp, #24]
 800bd16:	4604      	mov	r4, r0
 800bd18:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd1a:	9312      	str	r3, [sp, #72]	; 0x48
 800bd1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd20:	e9cd 6700 	strd	r6, r7, [sp]
 800bd24:	b93d      	cbnz	r5, 800bd36 <_dtoa_r+0x2e>
 800bd26:	2010      	movs	r0, #16
 800bd28:	f001 f8e0 	bl	800ceec <malloc>
 800bd2c:	6260      	str	r0, [r4, #36]	; 0x24
 800bd2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd32:	6005      	str	r5, [r0, #0]
 800bd34:	60c5      	str	r5, [r0, #12]
 800bd36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd38:	6819      	ldr	r1, [r3, #0]
 800bd3a:	b151      	cbz	r1, 800bd52 <_dtoa_r+0x4a>
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	604a      	str	r2, [r1, #4]
 800bd40:	2301      	movs	r3, #1
 800bd42:	4093      	lsls	r3, r2
 800bd44:	608b      	str	r3, [r1, #8]
 800bd46:	4620      	mov	r0, r4
 800bd48:	f001 f91e 	bl	800cf88 <_Bfree>
 800bd4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd4e:	2200      	movs	r2, #0
 800bd50:	601a      	str	r2, [r3, #0]
 800bd52:	1e3b      	subs	r3, r7, #0
 800bd54:	bfbb      	ittet	lt
 800bd56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd5a:	9301      	strlt	r3, [sp, #4]
 800bd5c:	2300      	movge	r3, #0
 800bd5e:	2201      	movlt	r2, #1
 800bd60:	bfac      	ite	ge
 800bd62:	f8c8 3000 	strge.w	r3, [r8]
 800bd66:	f8c8 2000 	strlt.w	r2, [r8]
 800bd6a:	4baf      	ldr	r3, [pc, #700]	; (800c028 <_dtoa_r+0x320>)
 800bd6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd70:	ea33 0308 	bics.w	r3, r3, r8
 800bd74:	d114      	bne.n	800bda0 <_dtoa_r+0x98>
 800bd76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd78:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	9b00      	ldr	r3, [sp, #0]
 800bd80:	b923      	cbnz	r3, 800bd8c <_dtoa_r+0x84>
 800bd82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f000 8542 	beq.w	800c810 <_dtoa_r+0xb08>
 800bd8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c03c <_dtoa_r+0x334>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f000 8544 	beq.w	800c820 <_dtoa_r+0xb18>
 800bd98:	f10b 0303 	add.w	r3, fp, #3
 800bd9c:	f000 bd3e 	b.w	800c81c <_dtoa_r+0xb14>
 800bda0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bda4:	2200      	movs	r2, #0
 800bda6:	2300      	movs	r3, #0
 800bda8:	4630      	mov	r0, r6
 800bdaa:	4639      	mov	r1, r7
 800bdac:	f7f4 fe94 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdb0:	4681      	mov	r9, r0
 800bdb2:	b168      	cbz	r0, 800bdd0 <_dtoa_r+0xc8>
 800bdb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 8524 	beq.w	800c80a <_dtoa_r+0xb02>
 800bdc2:	4b9a      	ldr	r3, [pc, #616]	; (800c02c <_dtoa_r+0x324>)
 800bdc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdc6:	f103 3bff 	add.w	fp, r3, #4294967295
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	f000 bd28 	b.w	800c820 <_dtoa_r+0xb18>
 800bdd0:	aa14      	add	r2, sp, #80	; 0x50
 800bdd2:	a915      	add	r1, sp, #84	; 0x54
 800bdd4:	ec47 6b10 	vmov	d0, r6, r7
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f001 fbe3 	bl	800d5a4 <__d2b>
 800bdde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bde2:	9004      	str	r0, [sp, #16]
 800bde4:	2d00      	cmp	r5, #0
 800bde6:	d07c      	beq.n	800bee2 <_dtoa_r+0x1da>
 800bde8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bdf0:	46b2      	mov	sl, r6
 800bdf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bdf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bdfe:	2200      	movs	r2, #0
 800be00:	4b8b      	ldr	r3, [pc, #556]	; (800c030 <_dtoa_r+0x328>)
 800be02:	4650      	mov	r0, sl
 800be04:	4659      	mov	r1, fp
 800be06:	f7f4 fa47 	bl	8000298 <__aeabi_dsub>
 800be0a:	a381      	add	r3, pc, #516	; (adr r3, 800c010 <_dtoa_r+0x308>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f7f4 fbfa 	bl	8000608 <__aeabi_dmul>
 800be14:	a380      	add	r3, pc, #512	; (adr r3, 800c018 <_dtoa_r+0x310>)
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	f7f4 fa3f 	bl	800029c <__adddf3>
 800be1e:	4606      	mov	r6, r0
 800be20:	4628      	mov	r0, r5
 800be22:	460f      	mov	r7, r1
 800be24:	f7f4 fb86 	bl	8000534 <__aeabi_i2d>
 800be28:	a37d      	add	r3, pc, #500	; (adr r3, 800c020 <_dtoa_r+0x318>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 fbeb 	bl	8000608 <__aeabi_dmul>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4630      	mov	r0, r6
 800be38:	4639      	mov	r1, r7
 800be3a:	f7f4 fa2f 	bl	800029c <__adddf3>
 800be3e:	4606      	mov	r6, r0
 800be40:	460f      	mov	r7, r1
 800be42:	f7f4 fe91 	bl	8000b68 <__aeabi_d2iz>
 800be46:	2200      	movs	r2, #0
 800be48:	4682      	mov	sl, r0
 800be4a:	2300      	movs	r3, #0
 800be4c:	4630      	mov	r0, r6
 800be4e:	4639      	mov	r1, r7
 800be50:	f7f4 fe4c 	bl	8000aec <__aeabi_dcmplt>
 800be54:	b148      	cbz	r0, 800be6a <_dtoa_r+0x162>
 800be56:	4650      	mov	r0, sl
 800be58:	f7f4 fb6c 	bl	8000534 <__aeabi_i2d>
 800be5c:	4632      	mov	r2, r6
 800be5e:	463b      	mov	r3, r7
 800be60:	f7f4 fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800be64:	b908      	cbnz	r0, 800be6a <_dtoa_r+0x162>
 800be66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be6a:	f1ba 0f16 	cmp.w	sl, #22
 800be6e:	d859      	bhi.n	800bf24 <_dtoa_r+0x21c>
 800be70:	4970      	ldr	r1, [pc, #448]	; (800c034 <_dtoa_r+0x32c>)
 800be72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800be76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be7e:	f7f4 fe53 	bl	8000b28 <__aeabi_dcmpgt>
 800be82:	2800      	cmp	r0, #0
 800be84:	d050      	beq.n	800bf28 <_dtoa_r+0x220>
 800be86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be8a:	2300      	movs	r3, #0
 800be8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800be8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be90:	1b5d      	subs	r5, r3, r5
 800be92:	f1b5 0801 	subs.w	r8, r5, #1
 800be96:	bf49      	itett	mi
 800be98:	f1c5 0301 	rsbmi	r3, r5, #1
 800be9c:	2300      	movpl	r3, #0
 800be9e:	9305      	strmi	r3, [sp, #20]
 800bea0:	f04f 0800 	movmi.w	r8, #0
 800bea4:	bf58      	it	pl
 800bea6:	9305      	strpl	r3, [sp, #20]
 800bea8:	f1ba 0f00 	cmp.w	sl, #0
 800beac:	db3e      	blt.n	800bf2c <_dtoa_r+0x224>
 800beae:	2300      	movs	r3, #0
 800beb0:	44d0      	add	r8, sl
 800beb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800beb6:	9307      	str	r3, [sp, #28]
 800beb8:	9b06      	ldr	r3, [sp, #24]
 800beba:	2b09      	cmp	r3, #9
 800bebc:	f200 8090 	bhi.w	800bfe0 <_dtoa_r+0x2d8>
 800bec0:	2b05      	cmp	r3, #5
 800bec2:	bfc4      	itt	gt
 800bec4:	3b04      	subgt	r3, #4
 800bec6:	9306      	strgt	r3, [sp, #24]
 800bec8:	9b06      	ldr	r3, [sp, #24]
 800beca:	f1a3 0302 	sub.w	r3, r3, #2
 800bece:	bfcc      	ite	gt
 800bed0:	2500      	movgt	r5, #0
 800bed2:	2501      	movle	r5, #1
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	f200 808f 	bhi.w	800bff8 <_dtoa_r+0x2f0>
 800beda:	e8df f003 	tbb	[pc, r3]
 800bede:	7f7d      	.short	0x7f7d
 800bee0:	7131      	.short	0x7131
 800bee2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bee6:	441d      	add	r5, r3
 800bee8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800beec:	2820      	cmp	r0, #32
 800beee:	dd13      	ble.n	800bf18 <_dtoa_r+0x210>
 800bef0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bef4:	9b00      	ldr	r3, [sp, #0]
 800bef6:	fa08 f800 	lsl.w	r8, r8, r0
 800befa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800befe:	fa23 f000 	lsr.w	r0, r3, r0
 800bf02:	ea48 0000 	orr.w	r0, r8, r0
 800bf06:	f7f4 fb05 	bl	8000514 <__aeabi_ui2d>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bf12:	3d01      	subs	r5, #1
 800bf14:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf16:	e772      	b.n	800bdfe <_dtoa_r+0xf6>
 800bf18:	9b00      	ldr	r3, [sp, #0]
 800bf1a:	f1c0 0020 	rsb	r0, r0, #32
 800bf1e:	fa03 f000 	lsl.w	r0, r3, r0
 800bf22:	e7f0      	b.n	800bf06 <_dtoa_r+0x1fe>
 800bf24:	2301      	movs	r3, #1
 800bf26:	e7b1      	b.n	800be8c <_dtoa_r+0x184>
 800bf28:	900f      	str	r0, [sp, #60]	; 0x3c
 800bf2a:	e7b0      	b.n	800be8e <_dtoa_r+0x186>
 800bf2c:	9b05      	ldr	r3, [sp, #20]
 800bf2e:	eba3 030a 	sub.w	r3, r3, sl
 800bf32:	9305      	str	r3, [sp, #20]
 800bf34:	f1ca 0300 	rsb	r3, sl, #0
 800bf38:	9307      	str	r3, [sp, #28]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	930e      	str	r3, [sp, #56]	; 0x38
 800bf3e:	e7bb      	b.n	800beb8 <_dtoa_r+0x1b0>
 800bf40:	2301      	movs	r3, #1
 800bf42:	930a      	str	r3, [sp, #40]	; 0x28
 800bf44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	dd59      	ble.n	800bffe <_dtoa_r+0x2f6>
 800bf4a:	9302      	str	r3, [sp, #8]
 800bf4c:	4699      	mov	r9, r3
 800bf4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf50:	2200      	movs	r2, #0
 800bf52:	6072      	str	r2, [r6, #4]
 800bf54:	2204      	movs	r2, #4
 800bf56:	f102 0014 	add.w	r0, r2, #20
 800bf5a:	4298      	cmp	r0, r3
 800bf5c:	6871      	ldr	r1, [r6, #4]
 800bf5e:	d953      	bls.n	800c008 <_dtoa_r+0x300>
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 ffdd 	bl	800cf20 <_Balloc>
 800bf66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf68:	6030      	str	r0, [r6, #0]
 800bf6a:	f1b9 0f0e 	cmp.w	r9, #14
 800bf6e:	f8d3 b000 	ldr.w	fp, [r3]
 800bf72:	f200 80e6 	bhi.w	800c142 <_dtoa_r+0x43a>
 800bf76:	2d00      	cmp	r5, #0
 800bf78:	f000 80e3 	beq.w	800c142 <_dtoa_r+0x43a>
 800bf7c:	ed9d 7b00 	vldr	d7, [sp]
 800bf80:	f1ba 0f00 	cmp.w	sl, #0
 800bf84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bf88:	dd74      	ble.n	800c074 <_dtoa_r+0x36c>
 800bf8a:	4a2a      	ldr	r2, [pc, #168]	; (800c034 <_dtoa_r+0x32c>)
 800bf8c:	f00a 030f 	and.w	r3, sl, #15
 800bf90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf94:	ed93 7b00 	vldr	d7, [r3]
 800bf98:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bf9c:	06f0      	lsls	r0, r6, #27
 800bf9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bfa2:	d565      	bpl.n	800c070 <_dtoa_r+0x368>
 800bfa4:	4b24      	ldr	r3, [pc, #144]	; (800c038 <_dtoa_r+0x330>)
 800bfa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfae:	f7f4 fc55 	bl	800085c <__aeabi_ddiv>
 800bfb2:	e9cd 0100 	strd	r0, r1, [sp]
 800bfb6:	f006 060f 	and.w	r6, r6, #15
 800bfba:	2503      	movs	r5, #3
 800bfbc:	4f1e      	ldr	r7, [pc, #120]	; (800c038 <_dtoa_r+0x330>)
 800bfbe:	e04c      	b.n	800c05a <_dtoa_r+0x352>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bfc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc6:	4453      	add	r3, sl
 800bfc8:	f103 0901 	add.w	r9, r3, #1
 800bfcc:	9302      	str	r3, [sp, #8]
 800bfce:	464b      	mov	r3, r9
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	bfb8      	it	lt
 800bfd4:	2301      	movlt	r3, #1
 800bfd6:	e7ba      	b.n	800bf4e <_dtoa_r+0x246>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e7b2      	b.n	800bf42 <_dtoa_r+0x23a>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	e7f0      	b.n	800bfc2 <_dtoa_r+0x2ba>
 800bfe0:	2501      	movs	r5, #1
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	9306      	str	r3, [sp, #24]
 800bfe6:	950a      	str	r5, [sp, #40]	; 0x28
 800bfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfec:	9302      	str	r3, [sp, #8]
 800bfee:	4699      	mov	r9, r3
 800bff0:	2200      	movs	r2, #0
 800bff2:	2312      	movs	r3, #18
 800bff4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bff6:	e7aa      	b.n	800bf4e <_dtoa_r+0x246>
 800bff8:	2301      	movs	r3, #1
 800bffa:	930a      	str	r3, [sp, #40]	; 0x28
 800bffc:	e7f4      	b.n	800bfe8 <_dtoa_r+0x2e0>
 800bffe:	2301      	movs	r3, #1
 800c000:	9302      	str	r3, [sp, #8]
 800c002:	4699      	mov	r9, r3
 800c004:	461a      	mov	r2, r3
 800c006:	e7f5      	b.n	800bff4 <_dtoa_r+0x2ec>
 800c008:	3101      	adds	r1, #1
 800c00a:	6071      	str	r1, [r6, #4]
 800c00c:	0052      	lsls	r2, r2, #1
 800c00e:	e7a2      	b.n	800bf56 <_dtoa_r+0x24e>
 800c010:	636f4361 	.word	0x636f4361
 800c014:	3fd287a7 	.word	0x3fd287a7
 800c018:	8b60c8b3 	.word	0x8b60c8b3
 800c01c:	3fc68a28 	.word	0x3fc68a28
 800c020:	509f79fb 	.word	0x509f79fb
 800c024:	3fd34413 	.word	0x3fd34413
 800c028:	7ff00000 	.word	0x7ff00000
 800c02c:	0800dd69 	.word	0x0800dd69
 800c030:	3ff80000 	.word	0x3ff80000
 800c034:	0800de28 	.word	0x0800de28
 800c038:	0800de00 	.word	0x0800de00
 800c03c:	0800ddf1 	.word	0x0800ddf1
 800c040:	07f1      	lsls	r1, r6, #31
 800c042:	d508      	bpl.n	800c056 <_dtoa_r+0x34e>
 800c044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c04c:	f7f4 fadc 	bl	8000608 <__aeabi_dmul>
 800c050:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c054:	3501      	adds	r5, #1
 800c056:	1076      	asrs	r6, r6, #1
 800c058:	3708      	adds	r7, #8
 800c05a:	2e00      	cmp	r6, #0
 800c05c:	d1f0      	bne.n	800c040 <_dtoa_r+0x338>
 800c05e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c062:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c066:	f7f4 fbf9 	bl	800085c <__aeabi_ddiv>
 800c06a:	e9cd 0100 	strd	r0, r1, [sp]
 800c06e:	e01a      	b.n	800c0a6 <_dtoa_r+0x39e>
 800c070:	2502      	movs	r5, #2
 800c072:	e7a3      	b.n	800bfbc <_dtoa_r+0x2b4>
 800c074:	f000 80a0 	beq.w	800c1b8 <_dtoa_r+0x4b0>
 800c078:	f1ca 0600 	rsb	r6, sl, #0
 800c07c:	4b9f      	ldr	r3, [pc, #636]	; (800c2fc <_dtoa_r+0x5f4>)
 800c07e:	4fa0      	ldr	r7, [pc, #640]	; (800c300 <_dtoa_r+0x5f8>)
 800c080:	f006 020f 	and.w	r2, r6, #15
 800c084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c090:	f7f4 faba 	bl	8000608 <__aeabi_dmul>
 800c094:	e9cd 0100 	strd	r0, r1, [sp]
 800c098:	1136      	asrs	r6, r6, #4
 800c09a:	2300      	movs	r3, #0
 800c09c:	2502      	movs	r5, #2
 800c09e:	2e00      	cmp	r6, #0
 800c0a0:	d17f      	bne.n	800c1a2 <_dtoa_r+0x49a>
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e1      	bne.n	800c06a <_dtoa_r+0x362>
 800c0a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 8087 	beq.w	800c1bc <_dtoa_r+0x4b4>
 800c0ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4b93      	ldr	r3, [pc, #588]	; (800c304 <_dtoa_r+0x5fc>)
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	f7f4 fd17 	bl	8000aec <__aeabi_dcmplt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d07c      	beq.n	800c1bc <_dtoa_r+0x4b4>
 800c0c2:	f1b9 0f00 	cmp.w	r9, #0
 800c0c6:	d079      	beq.n	800c1bc <_dtoa_r+0x4b4>
 800c0c8:	9b02      	ldr	r3, [sp, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	dd35      	ble.n	800c13a <_dtoa_r+0x432>
 800c0ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c0d2:	9308      	str	r3, [sp, #32]
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	4b8b      	ldr	r3, [pc, #556]	; (800c308 <_dtoa_r+0x600>)
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7f4 fa94 	bl	8000608 <__aeabi_dmul>
 800c0e0:	e9cd 0100 	strd	r0, r1, [sp]
 800c0e4:	9f02      	ldr	r7, [sp, #8]
 800c0e6:	3501      	adds	r5, #1
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	f7f4 fa23 	bl	8000534 <__aeabi_i2d>
 800c0ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0f2:	f7f4 fa89 	bl	8000608 <__aeabi_dmul>
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4b84      	ldr	r3, [pc, #528]	; (800c30c <_dtoa_r+0x604>)
 800c0fa:	f7f4 f8cf 	bl	800029c <__adddf3>
 800c0fe:	4605      	mov	r5, r0
 800c100:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c104:	2f00      	cmp	r7, #0
 800c106:	d15d      	bne.n	800c1c4 <_dtoa_r+0x4bc>
 800c108:	2200      	movs	r2, #0
 800c10a:	4b81      	ldr	r3, [pc, #516]	; (800c310 <_dtoa_r+0x608>)
 800c10c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c110:	f7f4 f8c2 	bl	8000298 <__aeabi_dsub>
 800c114:	462a      	mov	r2, r5
 800c116:	4633      	mov	r3, r6
 800c118:	e9cd 0100 	strd	r0, r1, [sp]
 800c11c:	f7f4 fd04 	bl	8000b28 <__aeabi_dcmpgt>
 800c120:	2800      	cmp	r0, #0
 800c122:	f040 8288 	bne.w	800c636 <_dtoa_r+0x92e>
 800c126:	462a      	mov	r2, r5
 800c128:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c12c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c130:	f7f4 fcdc 	bl	8000aec <__aeabi_dcmplt>
 800c134:	2800      	cmp	r0, #0
 800c136:	f040 827c 	bne.w	800c632 <_dtoa_r+0x92a>
 800c13a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c13e:	e9cd 2300 	strd	r2, r3, [sp]
 800c142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c144:	2b00      	cmp	r3, #0
 800c146:	f2c0 8150 	blt.w	800c3ea <_dtoa_r+0x6e2>
 800c14a:	f1ba 0f0e 	cmp.w	sl, #14
 800c14e:	f300 814c 	bgt.w	800c3ea <_dtoa_r+0x6e2>
 800c152:	4b6a      	ldr	r3, [pc, #424]	; (800c2fc <_dtoa_r+0x5f4>)
 800c154:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c158:	ed93 7b00 	vldr	d7, [r3]
 800c15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c15e:	2b00      	cmp	r3, #0
 800c160:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c164:	f280 80d8 	bge.w	800c318 <_dtoa_r+0x610>
 800c168:	f1b9 0f00 	cmp.w	r9, #0
 800c16c:	f300 80d4 	bgt.w	800c318 <_dtoa_r+0x610>
 800c170:	f040 825e 	bne.w	800c630 <_dtoa_r+0x928>
 800c174:	2200      	movs	r2, #0
 800c176:	4b66      	ldr	r3, [pc, #408]	; (800c310 <_dtoa_r+0x608>)
 800c178:	ec51 0b17 	vmov	r0, r1, d7
 800c17c:	f7f4 fa44 	bl	8000608 <__aeabi_dmul>
 800c180:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c184:	f7f4 fcc6 	bl	8000b14 <__aeabi_dcmpge>
 800c188:	464f      	mov	r7, r9
 800c18a:	464e      	mov	r6, r9
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f040 8234 	bne.w	800c5fa <_dtoa_r+0x8f2>
 800c192:	2331      	movs	r3, #49	; 0x31
 800c194:	f10b 0501 	add.w	r5, fp, #1
 800c198:	f88b 3000 	strb.w	r3, [fp]
 800c19c:	f10a 0a01 	add.w	sl, sl, #1
 800c1a0:	e22f      	b.n	800c602 <_dtoa_r+0x8fa>
 800c1a2:	07f2      	lsls	r2, r6, #31
 800c1a4:	d505      	bpl.n	800c1b2 <_dtoa_r+0x4aa>
 800c1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1aa:	f7f4 fa2d 	bl	8000608 <__aeabi_dmul>
 800c1ae:	3501      	adds	r5, #1
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	1076      	asrs	r6, r6, #1
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	e772      	b.n	800c09e <_dtoa_r+0x396>
 800c1b8:	2502      	movs	r5, #2
 800c1ba:	e774      	b.n	800c0a6 <_dtoa_r+0x39e>
 800c1bc:	f8cd a020 	str.w	sl, [sp, #32]
 800c1c0:	464f      	mov	r7, r9
 800c1c2:	e791      	b.n	800c0e8 <_dtoa_r+0x3e0>
 800c1c4:	4b4d      	ldr	r3, [pc, #308]	; (800c2fc <_dtoa_r+0x5f4>)
 800c1c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d047      	beq.n	800c264 <_dtoa_r+0x55c>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	2000      	movs	r0, #0
 800c1da:	494e      	ldr	r1, [pc, #312]	; (800c314 <_dtoa_r+0x60c>)
 800c1dc:	f7f4 fb3e 	bl	800085c <__aeabi_ddiv>
 800c1e0:	462a      	mov	r2, r5
 800c1e2:	4633      	mov	r3, r6
 800c1e4:	f7f4 f858 	bl	8000298 <__aeabi_dsub>
 800c1e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c1ec:	465d      	mov	r5, fp
 800c1ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1f2:	f7f4 fcb9 	bl	8000b68 <__aeabi_d2iz>
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	f7f4 f99c 	bl	8000534 <__aeabi_i2d>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c204:	f7f4 f848 	bl	8000298 <__aeabi_dsub>
 800c208:	3630      	adds	r6, #48	; 0x30
 800c20a:	f805 6b01 	strb.w	r6, [r5], #1
 800c20e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c212:	e9cd 0100 	strd	r0, r1, [sp]
 800c216:	f7f4 fc69 	bl	8000aec <__aeabi_dcmplt>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d163      	bne.n	800c2e6 <_dtoa_r+0x5de>
 800c21e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c222:	2000      	movs	r0, #0
 800c224:	4937      	ldr	r1, [pc, #220]	; (800c304 <_dtoa_r+0x5fc>)
 800c226:	f7f4 f837 	bl	8000298 <__aeabi_dsub>
 800c22a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c22e:	f7f4 fc5d 	bl	8000aec <__aeabi_dcmplt>
 800c232:	2800      	cmp	r0, #0
 800c234:	f040 80b7 	bne.w	800c3a6 <_dtoa_r+0x69e>
 800c238:	eba5 030b 	sub.w	r3, r5, fp
 800c23c:	429f      	cmp	r7, r3
 800c23e:	f77f af7c 	ble.w	800c13a <_dtoa_r+0x432>
 800c242:	2200      	movs	r2, #0
 800c244:	4b30      	ldr	r3, [pc, #192]	; (800c308 <_dtoa_r+0x600>)
 800c246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c24a:	f7f4 f9dd 	bl	8000608 <__aeabi_dmul>
 800c24e:	2200      	movs	r2, #0
 800c250:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c254:	4b2c      	ldr	r3, [pc, #176]	; (800c308 <_dtoa_r+0x600>)
 800c256:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c25a:	f7f4 f9d5 	bl	8000608 <__aeabi_dmul>
 800c25e:	e9cd 0100 	strd	r0, r1, [sp]
 800c262:	e7c4      	b.n	800c1ee <_dtoa_r+0x4e6>
 800c264:	462a      	mov	r2, r5
 800c266:	4633      	mov	r3, r6
 800c268:	f7f4 f9ce 	bl	8000608 <__aeabi_dmul>
 800c26c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c270:	eb0b 0507 	add.w	r5, fp, r7
 800c274:	465e      	mov	r6, fp
 800c276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c27a:	f7f4 fc75 	bl	8000b68 <__aeabi_d2iz>
 800c27e:	4607      	mov	r7, r0
 800c280:	f7f4 f958 	bl	8000534 <__aeabi_i2d>
 800c284:	3730      	adds	r7, #48	; 0x30
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c28e:	f7f4 f803 	bl	8000298 <__aeabi_dsub>
 800c292:	f806 7b01 	strb.w	r7, [r6], #1
 800c296:	42ae      	cmp	r6, r5
 800c298:	e9cd 0100 	strd	r0, r1, [sp]
 800c29c:	f04f 0200 	mov.w	r2, #0
 800c2a0:	d126      	bne.n	800c2f0 <_dtoa_r+0x5e8>
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <_dtoa_r+0x60c>)
 800c2a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2a8:	f7f3 fff8 	bl	800029c <__adddf3>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2b4:	f7f4 fc38 	bl	8000b28 <__aeabi_dcmpgt>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d174      	bne.n	800c3a6 <_dtoa_r+0x69e>
 800c2bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	4914      	ldr	r1, [pc, #80]	; (800c314 <_dtoa_r+0x60c>)
 800c2c4:	f7f3 ffe8 	bl	8000298 <__aeabi_dsub>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2d0:	f7f4 fc0c 	bl	8000aec <__aeabi_dcmplt>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	f43f af30 	beq.w	800c13a <_dtoa_r+0x432>
 800c2da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2de:	2b30      	cmp	r3, #48	; 0x30
 800c2e0:	f105 32ff 	add.w	r2, r5, #4294967295
 800c2e4:	d002      	beq.n	800c2ec <_dtoa_r+0x5e4>
 800c2e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c2ea:	e04a      	b.n	800c382 <_dtoa_r+0x67a>
 800c2ec:	4615      	mov	r5, r2
 800c2ee:	e7f4      	b.n	800c2da <_dtoa_r+0x5d2>
 800c2f0:	4b05      	ldr	r3, [pc, #20]	; (800c308 <_dtoa_r+0x600>)
 800c2f2:	f7f4 f989 	bl	8000608 <__aeabi_dmul>
 800c2f6:	e9cd 0100 	strd	r0, r1, [sp]
 800c2fa:	e7bc      	b.n	800c276 <_dtoa_r+0x56e>
 800c2fc:	0800de28 	.word	0x0800de28
 800c300:	0800de00 	.word	0x0800de00
 800c304:	3ff00000 	.word	0x3ff00000
 800c308:	40240000 	.word	0x40240000
 800c30c:	401c0000 	.word	0x401c0000
 800c310:	40140000 	.word	0x40140000
 800c314:	3fe00000 	.word	0x3fe00000
 800c318:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c31c:	465d      	mov	r5, fp
 800c31e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c322:	4630      	mov	r0, r6
 800c324:	4639      	mov	r1, r7
 800c326:	f7f4 fa99 	bl	800085c <__aeabi_ddiv>
 800c32a:	f7f4 fc1d 	bl	8000b68 <__aeabi_d2iz>
 800c32e:	4680      	mov	r8, r0
 800c330:	f7f4 f900 	bl	8000534 <__aeabi_i2d>
 800c334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c338:	f7f4 f966 	bl	8000608 <__aeabi_dmul>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4630      	mov	r0, r6
 800c342:	4639      	mov	r1, r7
 800c344:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c348:	f7f3 ffa6 	bl	8000298 <__aeabi_dsub>
 800c34c:	f805 6b01 	strb.w	r6, [r5], #1
 800c350:	eba5 060b 	sub.w	r6, r5, fp
 800c354:	45b1      	cmp	r9, r6
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	d139      	bne.n	800c3d0 <_dtoa_r+0x6c8>
 800c35c:	f7f3 ff9e 	bl	800029c <__adddf3>
 800c360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c364:	4606      	mov	r6, r0
 800c366:	460f      	mov	r7, r1
 800c368:	f7f4 fbde 	bl	8000b28 <__aeabi_dcmpgt>
 800c36c:	b9c8      	cbnz	r0, 800c3a2 <_dtoa_r+0x69a>
 800c36e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c372:	4630      	mov	r0, r6
 800c374:	4639      	mov	r1, r7
 800c376:	f7f4 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800c37a:	b110      	cbz	r0, 800c382 <_dtoa_r+0x67a>
 800c37c:	f018 0f01 	tst.w	r8, #1
 800c380:	d10f      	bne.n	800c3a2 <_dtoa_r+0x69a>
 800c382:	9904      	ldr	r1, [sp, #16]
 800c384:	4620      	mov	r0, r4
 800c386:	f000 fdff 	bl	800cf88 <_Bfree>
 800c38a:	2300      	movs	r3, #0
 800c38c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c38e:	702b      	strb	r3, [r5, #0]
 800c390:	f10a 0301 	add.w	r3, sl, #1
 800c394:	6013      	str	r3, [r2, #0]
 800c396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 8241 	beq.w	800c820 <_dtoa_r+0xb18>
 800c39e:	601d      	str	r5, [r3, #0]
 800c3a0:	e23e      	b.n	800c820 <_dtoa_r+0xb18>
 800c3a2:	f8cd a020 	str.w	sl, [sp, #32]
 800c3a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3aa:	2a39      	cmp	r2, #57	; 0x39
 800c3ac:	f105 33ff 	add.w	r3, r5, #4294967295
 800c3b0:	d108      	bne.n	800c3c4 <_dtoa_r+0x6bc>
 800c3b2:	459b      	cmp	fp, r3
 800c3b4:	d10a      	bne.n	800c3cc <_dtoa_r+0x6c4>
 800c3b6:	9b08      	ldr	r3, [sp, #32]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	9308      	str	r3, [sp, #32]
 800c3bc:	2330      	movs	r3, #48	; 0x30
 800c3be:	f88b 3000 	strb.w	r3, [fp]
 800c3c2:	465b      	mov	r3, fp
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	3201      	adds	r2, #1
 800c3c8:	701a      	strb	r2, [r3, #0]
 800c3ca:	e78c      	b.n	800c2e6 <_dtoa_r+0x5de>
 800c3cc:	461d      	mov	r5, r3
 800c3ce:	e7ea      	b.n	800c3a6 <_dtoa_r+0x69e>
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4b9b      	ldr	r3, [pc, #620]	; (800c640 <_dtoa_r+0x938>)
 800c3d4:	f7f4 f918 	bl	8000608 <__aeabi_dmul>
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2300      	movs	r3, #0
 800c3dc:	4606      	mov	r6, r0
 800c3de:	460f      	mov	r7, r1
 800c3e0:	f7f4 fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d09a      	beq.n	800c31e <_dtoa_r+0x616>
 800c3e8:	e7cb      	b.n	800c382 <_dtoa_r+0x67a>
 800c3ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3ec:	2a00      	cmp	r2, #0
 800c3ee:	f000 808b 	beq.w	800c508 <_dtoa_r+0x800>
 800c3f2:	9a06      	ldr	r2, [sp, #24]
 800c3f4:	2a01      	cmp	r2, #1
 800c3f6:	dc6e      	bgt.n	800c4d6 <_dtoa_r+0x7ce>
 800c3f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3fa:	2a00      	cmp	r2, #0
 800c3fc:	d067      	beq.n	800c4ce <_dtoa_r+0x7c6>
 800c3fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c402:	9f07      	ldr	r7, [sp, #28]
 800c404:	9d05      	ldr	r5, [sp, #20]
 800c406:	9a05      	ldr	r2, [sp, #20]
 800c408:	2101      	movs	r1, #1
 800c40a:	441a      	add	r2, r3
 800c40c:	4620      	mov	r0, r4
 800c40e:	9205      	str	r2, [sp, #20]
 800c410:	4498      	add	r8, r3
 800c412:	f000 fe97 	bl	800d144 <__i2b>
 800c416:	4606      	mov	r6, r0
 800c418:	2d00      	cmp	r5, #0
 800c41a:	dd0c      	ble.n	800c436 <_dtoa_r+0x72e>
 800c41c:	f1b8 0f00 	cmp.w	r8, #0
 800c420:	dd09      	ble.n	800c436 <_dtoa_r+0x72e>
 800c422:	4545      	cmp	r5, r8
 800c424:	9a05      	ldr	r2, [sp, #20]
 800c426:	462b      	mov	r3, r5
 800c428:	bfa8      	it	ge
 800c42a:	4643      	movge	r3, r8
 800c42c:	1ad2      	subs	r2, r2, r3
 800c42e:	9205      	str	r2, [sp, #20]
 800c430:	1aed      	subs	r5, r5, r3
 800c432:	eba8 0803 	sub.w	r8, r8, r3
 800c436:	9b07      	ldr	r3, [sp, #28]
 800c438:	b1eb      	cbz	r3, 800c476 <_dtoa_r+0x76e>
 800c43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d067      	beq.n	800c510 <_dtoa_r+0x808>
 800c440:	b18f      	cbz	r7, 800c466 <_dtoa_r+0x75e>
 800c442:	4631      	mov	r1, r6
 800c444:	463a      	mov	r2, r7
 800c446:	4620      	mov	r0, r4
 800c448:	f000 ff1c 	bl	800d284 <__pow5mult>
 800c44c:	9a04      	ldr	r2, [sp, #16]
 800c44e:	4601      	mov	r1, r0
 800c450:	4606      	mov	r6, r0
 800c452:	4620      	mov	r0, r4
 800c454:	f000 fe7f 	bl	800d156 <__multiply>
 800c458:	9904      	ldr	r1, [sp, #16]
 800c45a:	9008      	str	r0, [sp, #32]
 800c45c:	4620      	mov	r0, r4
 800c45e:	f000 fd93 	bl	800cf88 <_Bfree>
 800c462:	9b08      	ldr	r3, [sp, #32]
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	9b07      	ldr	r3, [sp, #28]
 800c468:	1bda      	subs	r2, r3, r7
 800c46a:	d004      	beq.n	800c476 <_dtoa_r+0x76e>
 800c46c:	9904      	ldr	r1, [sp, #16]
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 ff08 	bl	800d284 <__pow5mult>
 800c474:	9004      	str	r0, [sp, #16]
 800c476:	2101      	movs	r1, #1
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 fe63 	bl	800d144 <__i2b>
 800c47e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c480:	4607      	mov	r7, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 81d0 	beq.w	800c828 <_dtoa_r+0xb20>
 800c488:	461a      	mov	r2, r3
 800c48a:	4601      	mov	r1, r0
 800c48c:	4620      	mov	r0, r4
 800c48e:	f000 fef9 	bl	800d284 <__pow5mult>
 800c492:	9b06      	ldr	r3, [sp, #24]
 800c494:	2b01      	cmp	r3, #1
 800c496:	4607      	mov	r7, r0
 800c498:	dc40      	bgt.n	800c51c <_dtoa_r+0x814>
 800c49a:	9b00      	ldr	r3, [sp, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d139      	bne.n	800c514 <_dtoa_r+0x80c>
 800c4a0:	9b01      	ldr	r3, [sp, #4]
 800c4a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d136      	bne.n	800c518 <_dtoa_r+0x810>
 800c4aa:	9b01      	ldr	r3, [sp, #4]
 800c4ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4b0:	0d1b      	lsrs	r3, r3, #20
 800c4b2:	051b      	lsls	r3, r3, #20
 800c4b4:	b12b      	cbz	r3, 800c4c2 <_dtoa_r+0x7ba>
 800c4b6:	9b05      	ldr	r3, [sp, #20]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	f108 0801 	add.w	r8, r8, #1
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	9307      	str	r3, [sp, #28]
 800c4c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d12a      	bne.n	800c520 <_dtoa_r+0x818>
 800c4ca:	2001      	movs	r0, #1
 800c4cc:	e030      	b.n	800c530 <_dtoa_r+0x828>
 800c4ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4d4:	e795      	b.n	800c402 <_dtoa_r+0x6fa>
 800c4d6:	9b07      	ldr	r3, [sp, #28]
 800c4d8:	f109 37ff 	add.w	r7, r9, #4294967295
 800c4dc:	42bb      	cmp	r3, r7
 800c4de:	bfbf      	itttt	lt
 800c4e0:	9b07      	ldrlt	r3, [sp, #28]
 800c4e2:	9707      	strlt	r7, [sp, #28]
 800c4e4:	1afa      	sublt	r2, r7, r3
 800c4e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c4e8:	bfbb      	ittet	lt
 800c4ea:	189b      	addlt	r3, r3, r2
 800c4ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c4ee:	1bdf      	subge	r7, r3, r7
 800c4f0:	2700      	movlt	r7, #0
 800c4f2:	f1b9 0f00 	cmp.w	r9, #0
 800c4f6:	bfb5      	itete	lt
 800c4f8:	9b05      	ldrlt	r3, [sp, #20]
 800c4fa:	9d05      	ldrge	r5, [sp, #20]
 800c4fc:	eba3 0509 	sublt.w	r5, r3, r9
 800c500:	464b      	movge	r3, r9
 800c502:	bfb8      	it	lt
 800c504:	2300      	movlt	r3, #0
 800c506:	e77e      	b.n	800c406 <_dtoa_r+0x6fe>
 800c508:	9f07      	ldr	r7, [sp, #28]
 800c50a:	9d05      	ldr	r5, [sp, #20]
 800c50c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c50e:	e783      	b.n	800c418 <_dtoa_r+0x710>
 800c510:	9a07      	ldr	r2, [sp, #28]
 800c512:	e7ab      	b.n	800c46c <_dtoa_r+0x764>
 800c514:	2300      	movs	r3, #0
 800c516:	e7d4      	b.n	800c4c2 <_dtoa_r+0x7ba>
 800c518:	9b00      	ldr	r3, [sp, #0]
 800c51a:	e7d2      	b.n	800c4c2 <_dtoa_r+0x7ba>
 800c51c:	2300      	movs	r3, #0
 800c51e:	9307      	str	r3, [sp, #28]
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c526:	6918      	ldr	r0, [r3, #16]
 800c528:	f000 fdbe 	bl	800d0a8 <__hi0bits>
 800c52c:	f1c0 0020 	rsb	r0, r0, #32
 800c530:	4440      	add	r0, r8
 800c532:	f010 001f 	ands.w	r0, r0, #31
 800c536:	d047      	beq.n	800c5c8 <_dtoa_r+0x8c0>
 800c538:	f1c0 0320 	rsb	r3, r0, #32
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	dd3b      	ble.n	800c5b8 <_dtoa_r+0x8b0>
 800c540:	9b05      	ldr	r3, [sp, #20]
 800c542:	f1c0 001c 	rsb	r0, r0, #28
 800c546:	4403      	add	r3, r0
 800c548:	9305      	str	r3, [sp, #20]
 800c54a:	4405      	add	r5, r0
 800c54c:	4480      	add	r8, r0
 800c54e:	9b05      	ldr	r3, [sp, #20]
 800c550:	2b00      	cmp	r3, #0
 800c552:	dd05      	ble.n	800c560 <_dtoa_r+0x858>
 800c554:	461a      	mov	r2, r3
 800c556:	9904      	ldr	r1, [sp, #16]
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 fee1 	bl	800d320 <__lshift>
 800c55e:	9004      	str	r0, [sp, #16]
 800c560:	f1b8 0f00 	cmp.w	r8, #0
 800c564:	dd05      	ble.n	800c572 <_dtoa_r+0x86a>
 800c566:	4639      	mov	r1, r7
 800c568:	4642      	mov	r2, r8
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 fed8 	bl	800d320 <__lshift>
 800c570:	4607      	mov	r7, r0
 800c572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c574:	b353      	cbz	r3, 800c5cc <_dtoa_r+0x8c4>
 800c576:	4639      	mov	r1, r7
 800c578:	9804      	ldr	r0, [sp, #16]
 800c57a:	f000 ff25 	bl	800d3c8 <__mcmp>
 800c57e:	2800      	cmp	r0, #0
 800c580:	da24      	bge.n	800c5cc <_dtoa_r+0x8c4>
 800c582:	2300      	movs	r3, #0
 800c584:	220a      	movs	r2, #10
 800c586:	9904      	ldr	r1, [sp, #16]
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 fd14 	bl	800cfb6 <__multadd>
 800c58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c590:	9004      	str	r0, [sp, #16]
 800c592:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 814d 	beq.w	800c836 <_dtoa_r+0xb2e>
 800c59c:	2300      	movs	r3, #0
 800c59e:	4631      	mov	r1, r6
 800c5a0:	220a      	movs	r2, #10
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 fd07 	bl	800cfb6 <__multadd>
 800c5a8:	9b02      	ldr	r3, [sp, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	dc4f      	bgt.n	800c650 <_dtoa_r+0x948>
 800c5b0:	9b06      	ldr	r3, [sp, #24]
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	dd4c      	ble.n	800c650 <_dtoa_r+0x948>
 800c5b6:	e011      	b.n	800c5dc <_dtoa_r+0x8d4>
 800c5b8:	d0c9      	beq.n	800c54e <_dtoa_r+0x846>
 800c5ba:	9a05      	ldr	r2, [sp, #20]
 800c5bc:	331c      	adds	r3, #28
 800c5be:	441a      	add	r2, r3
 800c5c0:	9205      	str	r2, [sp, #20]
 800c5c2:	441d      	add	r5, r3
 800c5c4:	4498      	add	r8, r3
 800c5c6:	e7c2      	b.n	800c54e <_dtoa_r+0x846>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	e7f6      	b.n	800c5ba <_dtoa_r+0x8b2>
 800c5cc:	f1b9 0f00 	cmp.w	r9, #0
 800c5d0:	dc38      	bgt.n	800c644 <_dtoa_r+0x93c>
 800c5d2:	9b06      	ldr	r3, [sp, #24]
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	dd35      	ble.n	800c644 <_dtoa_r+0x93c>
 800c5d8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5dc:	9b02      	ldr	r3, [sp, #8]
 800c5de:	b963      	cbnz	r3, 800c5fa <_dtoa_r+0x8f2>
 800c5e0:	4639      	mov	r1, r7
 800c5e2:	2205      	movs	r2, #5
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f000 fce6 	bl	800cfb6 <__multadd>
 800c5ea:	4601      	mov	r1, r0
 800c5ec:	4607      	mov	r7, r0
 800c5ee:	9804      	ldr	r0, [sp, #16]
 800c5f0:	f000 feea 	bl	800d3c8 <__mcmp>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	f73f adcc 	bgt.w	800c192 <_dtoa_r+0x48a>
 800c5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5fc:	465d      	mov	r5, fp
 800c5fe:	ea6f 0a03 	mvn.w	sl, r3
 800c602:	f04f 0900 	mov.w	r9, #0
 800c606:	4639      	mov	r1, r7
 800c608:	4620      	mov	r0, r4
 800c60a:	f000 fcbd 	bl	800cf88 <_Bfree>
 800c60e:	2e00      	cmp	r6, #0
 800c610:	f43f aeb7 	beq.w	800c382 <_dtoa_r+0x67a>
 800c614:	f1b9 0f00 	cmp.w	r9, #0
 800c618:	d005      	beq.n	800c626 <_dtoa_r+0x91e>
 800c61a:	45b1      	cmp	r9, r6
 800c61c:	d003      	beq.n	800c626 <_dtoa_r+0x91e>
 800c61e:	4649      	mov	r1, r9
 800c620:	4620      	mov	r0, r4
 800c622:	f000 fcb1 	bl	800cf88 <_Bfree>
 800c626:	4631      	mov	r1, r6
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 fcad 	bl	800cf88 <_Bfree>
 800c62e:	e6a8      	b.n	800c382 <_dtoa_r+0x67a>
 800c630:	2700      	movs	r7, #0
 800c632:	463e      	mov	r6, r7
 800c634:	e7e1      	b.n	800c5fa <_dtoa_r+0x8f2>
 800c636:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c63a:	463e      	mov	r6, r7
 800c63c:	e5a9      	b.n	800c192 <_dtoa_r+0x48a>
 800c63e:	bf00      	nop
 800c640:	40240000 	.word	0x40240000
 800c644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c646:	f8cd 9008 	str.w	r9, [sp, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 80fa 	beq.w	800c844 <_dtoa_r+0xb3c>
 800c650:	2d00      	cmp	r5, #0
 800c652:	dd05      	ble.n	800c660 <_dtoa_r+0x958>
 800c654:	4631      	mov	r1, r6
 800c656:	462a      	mov	r2, r5
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 fe61 	bl	800d320 <__lshift>
 800c65e:	4606      	mov	r6, r0
 800c660:	9b07      	ldr	r3, [sp, #28]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d04c      	beq.n	800c700 <_dtoa_r+0x9f8>
 800c666:	6871      	ldr	r1, [r6, #4]
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 fc59 	bl	800cf20 <_Balloc>
 800c66e:	6932      	ldr	r2, [r6, #16]
 800c670:	3202      	adds	r2, #2
 800c672:	4605      	mov	r5, r0
 800c674:	0092      	lsls	r2, r2, #2
 800c676:	f106 010c 	add.w	r1, r6, #12
 800c67a:	300c      	adds	r0, #12
 800c67c:	f7fd fd90 	bl	800a1a0 <memcpy>
 800c680:	2201      	movs	r2, #1
 800c682:	4629      	mov	r1, r5
 800c684:	4620      	mov	r0, r4
 800c686:	f000 fe4b 	bl	800d320 <__lshift>
 800c68a:	9b00      	ldr	r3, [sp, #0]
 800c68c:	f8cd b014 	str.w	fp, [sp, #20]
 800c690:	f003 0301 	and.w	r3, r3, #1
 800c694:	46b1      	mov	r9, r6
 800c696:	9307      	str	r3, [sp, #28]
 800c698:	4606      	mov	r6, r0
 800c69a:	4639      	mov	r1, r7
 800c69c:	9804      	ldr	r0, [sp, #16]
 800c69e:	f7ff faa5 	bl	800bbec <quorem>
 800c6a2:	4649      	mov	r1, r9
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c6aa:	9804      	ldr	r0, [sp, #16]
 800c6ac:	f000 fe8c 	bl	800d3c8 <__mcmp>
 800c6b0:	4632      	mov	r2, r6
 800c6b2:	9000      	str	r0, [sp, #0]
 800c6b4:	4639      	mov	r1, r7
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f000 fea0 	bl	800d3fc <__mdiff>
 800c6bc:	68c3      	ldr	r3, [r0, #12]
 800c6be:	4602      	mov	r2, r0
 800c6c0:	bb03      	cbnz	r3, 800c704 <_dtoa_r+0x9fc>
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	9008      	str	r0, [sp, #32]
 800c6c6:	9804      	ldr	r0, [sp, #16]
 800c6c8:	f000 fe7e 	bl	800d3c8 <__mcmp>
 800c6cc:	9a08      	ldr	r2, [sp, #32]
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	9308      	str	r3, [sp, #32]
 800c6d6:	f000 fc57 	bl	800cf88 <_Bfree>
 800c6da:	9b08      	ldr	r3, [sp, #32]
 800c6dc:	b9a3      	cbnz	r3, 800c708 <_dtoa_r+0xa00>
 800c6de:	9a06      	ldr	r2, [sp, #24]
 800c6e0:	b992      	cbnz	r2, 800c708 <_dtoa_r+0xa00>
 800c6e2:	9a07      	ldr	r2, [sp, #28]
 800c6e4:	b982      	cbnz	r2, 800c708 <_dtoa_r+0xa00>
 800c6e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6ea:	d029      	beq.n	800c740 <_dtoa_r+0xa38>
 800c6ec:	9b00      	ldr	r3, [sp, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	dd01      	ble.n	800c6f6 <_dtoa_r+0x9ee>
 800c6f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c6f6:	9b05      	ldr	r3, [sp, #20]
 800c6f8:	1c5d      	adds	r5, r3, #1
 800c6fa:	f883 8000 	strb.w	r8, [r3]
 800c6fe:	e782      	b.n	800c606 <_dtoa_r+0x8fe>
 800c700:	4630      	mov	r0, r6
 800c702:	e7c2      	b.n	800c68a <_dtoa_r+0x982>
 800c704:	2301      	movs	r3, #1
 800c706:	e7e3      	b.n	800c6d0 <_dtoa_r+0x9c8>
 800c708:	9a00      	ldr	r2, [sp, #0]
 800c70a:	2a00      	cmp	r2, #0
 800c70c:	db04      	blt.n	800c718 <_dtoa_r+0xa10>
 800c70e:	d125      	bne.n	800c75c <_dtoa_r+0xa54>
 800c710:	9a06      	ldr	r2, [sp, #24]
 800c712:	bb1a      	cbnz	r2, 800c75c <_dtoa_r+0xa54>
 800c714:	9a07      	ldr	r2, [sp, #28]
 800c716:	bb0a      	cbnz	r2, 800c75c <_dtoa_r+0xa54>
 800c718:	2b00      	cmp	r3, #0
 800c71a:	ddec      	ble.n	800c6f6 <_dtoa_r+0x9ee>
 800c71c:	2201      	movs	r2, #1
 800c71e:	9904      	ldr	r1, [sp, #16]
 800c720:	4620      	mov	r0, r4
 800c722:	f000 fdfd 	bl	800d320 <__lshift>
 800c726:	4639      	mov	r1, r7
 800c728:	9004      	str	r0, [sp, #16]
 800c72a:	f000 fe4d 	bl	800d3c8 <__mcmp>
 800c72e:	2800      	cmp	r0, #0
 800c730:	dc03      	bgt.n	800c73a <_dtoa_r+0xa32>
 800c732:	d1e0      	bne.n	800c6f6 <_dtoa_r+0x9ee>
 800c734:	f018 0f01 	tst.w	r8, #1
 800c738:	d0dd      	beq.n	800c6f6 <_dtoa_r+0x9ee>
 800c73a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c73e:	d1d8      	bne.n	800c6f2 <_dtoa_r+0x9ea>
 800c740:	9b05      	ldr	r3, [sp, #20]
 800c742:	9a05      	ldr	r2, [sp, #20]
 800c744:	1c5d      	adds	r5, r3, #1
 800c746:	2339      	movs	r3, #57	; 0x39
 800c748:	7013      	strb	r3, [r2, #0]
 800c74a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c74e:	2b39      	cmp	r3, #57	; 0x39
 800c750:	f105 32ff 	add.w	r2, r5, #4294967295
 800c754:	d04f      	beq.n	800c7f6 <_dtoa_r+0xaee>
 800c756:	3301      	adds	r3, #1
 800c758:	7013      	strb	r3, [r2, #0]
 800c75a:	e754      	b.n	800c606 <_dtoa_r+0x8fe>
 800c75c:	9a05      	ldr	r2, [sp, #20]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f102 0501 	add.w	r5, r2, #1
 800c764:	dd06      	ble.n	800c774 <_dtoa_r+0xa6c>
 800c766:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c76a:	d0e9      	beq.n	800c740 <_dtoa_r+0xa38>
 800c76c:	f108 0801 	add.w	r8, r8, #1
 800c770:	9b05      	ldr	r3, [sp, #20]
 800c772:	e7c2      	b.n	800c6fa <_dtoa_r+0x9f2>
 800c774:	9a02      	ldr	r2, [sp, #8]
 800c776:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c77a:	eba5 030b 	sub.w	r3, r5, fp
 800c77e:	4293      	cmp	r3, r2
 800c780:	d021      	beq.n	800c7c6 <_dtoa_r+0xabe>
 800c782:	2300      	movs	r3, #0
 800c784:	220a      	movs	r2, #10
 800c786:	9904      	ldr	r1, [sp, #16]
 800c788:	4620      	mov	r0, r4
 800c78a:	f000 fc14 	bl	800cfb6 <__multadd>
 800c78e:	45b1      	cmp	r9, r6
 800c790:	9004      	str	r0, [sp, #16]
 800c792:	f04f 0300 	mov.w	r3, #0
 800c796:	f04f 020a 	mov.w	r2, #10
 800c79a:	4649      	mov	r1, r9
 800c79c:	4620      	mov	r0, r4
 800c79e:	d105      	bne.n	800c7ac <_dtoa_r+0xaa4>
 800c7a0:	f000 fc09 	bl	800cfb6 <__multadd>
 800c7a4:	4681      	mov	r9, r0
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	9505      	str	r5, [sp, #20]
 800c7aa:	e776      	b.n	800c69a <_dtoa_r+0x992>
 800c7ac:	f000 fc03 	bl	800cfb6 <__multadd>
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4681      	mov	r9, r0
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	220a      	movs	r2, #10
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f000 fbfc 	bl	800cfb6 <__multadd>
 800c7be:	4606      	mov	r6, r0
 800c7c0:	e7f2      	b.n	800c7a8 <_dtoa_r+0xaa0>
 800c7c2:	f04f 0900 	mov.w	r9, #0
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	9904      	ldr	r1, [sp, #16]
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fda8 	bl	800d320 <__lshift>
 800c7d0:	4639      	mov	r1, r7
 800c7d2:	9004      	str	r0, [sp, #16]
 800c7d4:	f000 fdf8 	bl	800d3c8 <__mcmp>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	dcb6      	bgt.n	800c74a <_dtoa_r+0xa42>
 800c7dc:	d102      	bne.n	800c7e4 <_dtoa_r+0xadc>
 800c7de:	f018 0f01 	tst.w	r8, #1
 800c7e2:	d1b2      	bne.n	800c74a <_dtoa_r+0xa42>
 800c7e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7e8:	2b30      	cmp	r3, #48	; 0x30
 800c7ea:	f105 32ff 	add.w	r2, r5, #4294967295
 800c7ee:	f47f af0a 	bne.w	800c606 <_dtoa_r+0x8fe>
 800c7f2:	4615      	mov	r5, r2
 800c7f4:	e7f6      	b.n	800c7e4 <_dtoa_r+0xadc>
 800c7f6:	4593      	cmp	fp, r2
 800c7f8:	d105      	bne.n	800c806 <_dtoa_r+0xafe>
 800c7fa:	2331      	movs	r3, #49	; 0x31
 800c7fc:	f10a 0a01 	add.w	sl, sl, #1
 800c800:	f88b 3000 	strb.w	r3, [fp]
 800c804:	e6ff      	b.n	800c606 <_dtoa_r+0x8fe>
 800c806:	4615      	mov	r5, r2
 800c808:	e79f      	b.n	800c74a <_dtoa_r+0xa42>
 800c80a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c870 <_dtoa_r+0xb68>
 800c80e:	e007      	b.n	800c820 <_dtoa_r+0xb18>
 800c810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c812:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c874 <_dtoa_r+0xb6c>
 800c816:	b11b      	cbz	r3, 800c820 <_dtoa_r+0xb18>
 800c818:	f10b 0308 	add.w	r3, fp, #8
 800c81c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c81e:	6013      	str	r3, [r2, #0]
 800c820:	4658      	mov	r0, fp
 800c822:	b017      	add	sp, #92	; 0x5c
 800c824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c828:	9b06      	ldr	r3, [sp, #24]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	f77f ae35 	ble.w	800c49a <_dtoa_r+0x792>
 800c830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c832:	9307      	str	r3, [sp, #28]
 800c834:	e649      	b.n	800c4ca <_dtoa_r+0x7c2>
 800c836:	9b02      	ldr	r3, [sp, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dc03      	bgt.n	800c844 <_dtoa_r+0xb3c>
 800c83c:	9b06      	ldr	r3, [sp, #24]
 800c83e:	2b02      	cmp	r3, #2
 800c840:	f73f aecc 	bgt.w	800c5dc <_dtoa_r+0x8d4>
 800c844:	465d      	mov	r5, fp
 800c846:	4639      	mov	r1, r7
 800c848:	9804      	ldr	r0, [sp, #16]
 800c84a:	f7ff f9cf 	bl	800bbec <quorem>
 800c84e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c852:	f805 8b01 	strb.w	r8, [r5], #1
 800c856:	9a02      	ldr	r2, [sp, #8]
 800c858:	eba5 030b 	sub.w	r3, r5, fp
 800c85c:	429a      	cmp	r2, r3
 800c85e:	ddb0      	ble.n	800c7c2 <_dtoa_r+0xaba>
 800c860:	2300      	movs	r3, #0
 800c862:	220a      	movs	r2, #10
 800c864:	9904      	ldr	r1, [sp, #16]
 800c866:	4620      	mov	r0, r4
 800c868:	f000 fba5 	bl	800cfb6 <__multadd>
 800c86c:	9004      	str	r0, [sp, #16]
 800c86e:	e7ea      	b.n	800c846 <_dtoa_r+0xb3e>
 800c870:	0800dd68 	.word	0x0800dd68
 800c874:	0800dde8 	.word	0x0800dde8

0800c878 <rshift>:
 800c878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c87a:	6906      	ldr	r6, [r0, #16]
 800c87c:	114b      	asrs	r3, r1, #5
 800c87e:	429e      	cmp	r6, r3
 800c880:	f100 0414 	add.w	r4, r0, #20
 800c884:	dd30      	ble.n	800c8e8 <rshift+0x70>
 800c886:	f011 011f 	ands.w	r1, r1, #31
 800c88a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c88e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c892:	d108      	bne.n	800c8a6 <rshift+0x2e>
 800c894:	4621      	mov	r1, r4
 800c896:	42b2      	cmp	r2, r6
 800c898:	460b      	mov	r3, r1
 800c89a:	d211      	bcs.n	800c8c0 <rshift+0x48>
 800c89c:	f852 3b04 	ldr.w	r3, [r2], #4
 800c8a0:	f841 3b04 	str.w	r3, [r1], #4
 800c8a4:	e7f7      	b.n	800c896 <rshift+0x1e>
 800c8a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c8aa:	f1c1 0c20 	rsb	ip, r1, #32
 800c8ae:	40cd      	lsrs	r5, r1
 800c8b0:	3204      	adds	r2, #4
 800c8b2:	4623      	mov	r3, r4
 800c8b4:	42b2      	cmp	r2, r6
 800c8b6:	4617      	mov	r7, r2
 800c8b8:	d30c      	bcc.n	800c8d4 <rshift+0x5c>
 800c8ba:	601d      	str	r5, [r3, #0]
 800c8bc:	b105      	cbz	r5, 800c8c0 <rshift+0x48>
 800c8be:	3304      	adds	r3, #4
 800c8c0:	1b1a      	subs	r2, r3, r4
 800c8c2:	42a3      	cmp	r3, r4
 800c8c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8c8:	bf08      	it	eq
 800c8ca:	2300      	moveq	r3, #0
 800c8cc:	6102      	str	r2, [r0, #16]
 800c8ce:	bf08      	it	eq
 800c8d0:	6143      	streq	r3, [r0, #20]
 800c8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8d4:	683f      	ldr	r7, [r7, #0]
 800c8d6:	fa07 f70c 	lsl.w	r7, r7, ip
 800c8da:	433d      	orrs	r5, r7
 800c8dc:	f843 5b04 	str.w	r5, [r3], #4
 800c8e0:	f852 5b04 	ldr.w	r5, [r2], #4
 800c8e4:	40cd      	lsrs	r5, r1
 800c8e6:	e7e5      	b.n	800c8b4 <rshift+0x3c>
 800c8e8:	4623      	mov	r3, r4
 800c8ea:	e7e9      	b.n	800c8c0 <rshift+0x48>

0800c8ec <__hexdig_fun>:
 800c8ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c8f0:	2b09      	cmp	r3, #9
 800c8f2:	d802      	bhi.n	800c8fa <__hexdig_fun+0xe>
 800c8f4:	3820      	subs	r0, #32
 800c8f6:	b2c0      	uxtb	r0, r0
 800c8f8:	4770      	bx	lr
 800c8fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8fe:	2b05      	cmp	r3, #5
 800c900:	d801      	bhi.n	800c906 <__hexdig_fun+0x1a>
 800c902:	3847      	subs	r0, #71	; 0x47
 800c904:	e7f7      	b.n	800c8f6 <__hexdig_fun+0xa>
 800c906:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c90a:	2b05      	cmp	r3, #5
 800c90c:	d801      	bhi.n	800c912 <__hexdig_fun+0x26>
 800c90e:	3827      	subs	r0, #39	; 0x27
 800c910:	e7f1      	b.n	800c8f6 <__hexdig_fun+0xa>
 800c912:	2000      	movs	r0, #0
 800c914:	4770      	bx	lr

0800c916 <__gethex>:
 800c916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91a:	b08b      	sub	sp, #44	; 0x2c
 800c91c:	468a      	mov	sl, r1
 800c91e:	9002      	str	r0, [sp, #8]
 800c920:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c922:	9306      	str	r3, [sp, #24]
 800c924:	4690      	mov	r8, r2
 800c926:	f000 fad0 	bl	800ceca <__localeconv_l>
 800c92a:	6803      	ldr	r3, [r0, #0]
 800c92c:	9303      	str	r3, [sp, #12]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f3 fc56 	bl	80001e0 <strlen>
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	9001      	str	r0, [sp, #4]
 800c938:	4403      	add	r3, r0
 800c93a:	f04f 0b00 	mov.w	fp, #0
 800c93e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c942:	9307      	str	r3, [sp, #28]
 800c944:	f8da 3000 	ldr.w	r3, [sl]
 800c948:	3302      	adds	r3, #2
 800c94a:	461f      	mov	r7, r3
 800c94c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c950:	2830      	cmp	r0, #48	; 0x30
 800c952:	d06c      	beq.n	800ca2e <__gethex+0x118>
 800c954:	f7ff ffca 	bl	800c8ec <__hexdig_fun>
 800c958:	4604      	mov	r4, r0
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d16a      	bne.n	800ca34 <__gethex+0x11e>
 800c95e:	9a01      	ldr	r2, [sp, #4]
 800c960:	9903      	ldr	r1, [sp, #12]
 800c962:	4638      	mov	r0, r7
 800c964:	f001 f8f4 	bl	800db50 <strncmp>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d166      	bne.n	800ca3a <__gethex+0x124>
 800c96c:	9b01      	ldr	r3, [sp, #4]
 800c96e:	5cf8      	ldrb	r0, [r7, r3]
 800c970:	18fe      	adds	r6, r7, r3
 800c972:	f7ff ffbb 	bl	800c8ec <__hexdig_fun>
 800c976:	2800      	cmp	r0, #0
 800c978:	d062      	beq.n	800ca40 <__gethex+0x12a>
 800c97a:	4633      	mov	r3, r6
 800c97c:	7818      	ldrb	r0, [r3, #0]
 800c97e:	2830      	cmp	r0, #48	; 0x30
 800c980:	461f      	mov	r7, r3
 800c982:	f103 0301 	add.w	r3, r3, #1
 800c986:	d0f9      	beq.n	800c97c <__gethex+0x66>
 800c988:	f7ff ffb0 	bl	800c8ec <__hexdig_fun>
 800c98c:	fab0 f580 	clz	r5, r0
 800c990:	096d      	lsrs	r5, r5, #5
 800c992:	4634      	mov	r4, r6
 800c994:	f04f 0b01 	mov.w	fp, #1
 800c998:	463a      	mov	r2, r7
 800c99a:	4616      	mov	r6, r2
 800c99c:	3201      	adds	r2, #1
 800c99e:	7830      	ldrb	r0, [r6, #0]
 800c9a0:	f7ff ffa4 	bl	800c8ec <__hexdig_fun>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d1f8      	bne.n	800c99a <__gethex+0x84>
 800c9a8:	9a01      	ldr	r2, [sp, #4]
 800c9aa:	9903      	ldr	r1, [sp, #12]
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f001 f8cf 	bl	800db50 <strncmp>
 800c9b2:	b950      	cbnz	r0, 800c9ca <__gethex+0xb4>
 800c9b4:	b954      	cbnz	r4, 800c9cc <__gethex+0xb6>
 800c9b6:	9b01      	ldr	r3, [sp, #4]
 800c9b8:	18f4      	adds	r4, r6, r3
 800c9ba:	4622      	mov	r2, r4
 800c9bc:	4616      	mov	r6, r2
 800c9be:	3201      	adds	r2, #1
 800c9c0:	7830      	ldrb	r0, [r6, #0]
 800c9c2:	f7ff ff93 	bl	800c8ec <__hexdig_fun>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d1f8      	bne.n	800c9bc <__gethex+0xa6>
 800c9ca:	b10c      	cbz	r4, 800c9d0 <__gethex+0xba>
 800c9cc:	1ba4      	subs	r4, r4, r6
 800c9ce:	00a4      	lsls	r4, r4, #2
 800c9d0:	7833      	ldrb	r3, [r6, #0]
 800c9d2:	2b50      	cmp	r3, #80	; 0x50
 800c9d4:	d001      	beq.n	800c9da <__gethex+0xc4>
 800c9d6:	2b70      	cmp	r3, #112	; 0x70
 800c9d8:	d140      	bne.n	800ca5c <__gethex+0x146>
 800c9da:	7873      	ldrb	r3, [r6, #1]
 800c9dc:	2b2b      	cmp	r3, #43	; 0x2b
 800c9de:	d031      	beq.n	800ca44 <__gethex+0x12e>
 800c9e0:	2b2d      	cmp	r3, #45	; 0x2d
 800c9e2:	d033      	beq.n	800ca4c <__gethex+0x136>
 800c9e4:	1c71      	adds	r1, r6, #1
 800c9e6:	f04f 0900 	mov.w	r9, #0
 800c9ea:	7808      	ldrb	r0, [r1, #0]
 800c9ec:	f7ff ff7e 	bl	800c8ec <__hexdig_fun>
 800c9f0:	1e43      	subs	r3, r0, #1
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b18      	cmp	r3, #24
 800c9f6:	d831      	bhi.n	800ca5c <__gethex+0x146>
 800c9f8:	f1a0 0210 	sub.w	r2, r0, #16
 800c9fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca00:	f7ff ff74 	bl	800c8ec <__hexdig_fun>
 800ca04:	1e43      	subs	r3, r0, #1
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b18      	cmp	r3, #24
 800ca0a:	d922      	bls.n	800ca52 <__gethex+0x13c>
 800ca0c:	f1b9 0f00 	cmp.w	r9, #0
 800ca10:	d000      	beq.n	800ca14 <__gethex+0xfe>
 800ca12:	4252      	negs	r2, r2
 800ca14:	4414      	add	r4, r2
 800ca16:	f8ca 1000 	str.w	r1, [sl]
 800ca1a:	b30d      	cbz	r5, 800ca60 <__gethex+0x14a>
 800ca1c:	f1bb 0f00 	cmp.w	fp, #0
 800ca20:	bf0c      	ite	eq
 800ca22:	2706      	moveq	r7, #6
 800ca24:	2700      	movne	r7, #0
 800ca26:	4638      	mov	r0, r7
 800ca28:	b00b      	add	sp, #44	; 0x2c
 800ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2e:	f10b 0b01 	add.w	fp, fp, #1
 800ca32:	e78a      	b.n	800c94a <__gethex+0x34>
 800ca34:	2500      	movs	r5, #0
 800ca36:	462c      	mov	r4, r5
 800ca38:	e7ae      	b.n	800c998 <__gethex+0x82>
 800ca3a:	463e      	mov	r6, r7
 800ca3c:	2501      	movs	r5, #1
 800ca3e:	e7c7      	b.n	800c9d0 <__gethex+0xba>
 800ca40:	4604      	mov	r4, r0
 800ca42:	e7fb      	b.n	800ca3c <__gethex+0x126>
 800ca44:	f04f 0900 	mov.w	r9, #0
 800ca48:	1cb1      	adds	r1, r6, #2
 800ca4a:	e7ce      	b.n	800c9ea <__gethex+0xd4>
 800ca4c:	f04f 0901 	mov.w	r9, #1
 800ca50:	e7fa      	b.n	800ca48 <__gethex+0x132>
 800ca52:	230a      	movs	r3, #10
 800ca54:	fb03 0202 	mla	r2, r3, r2, r0
 800ca58:	3a10      	subs	r2, #16
 800ca5a:	e7cf      	b.n	800c9fc <__gethex+0xe6>
 800ca5c:	4631      	mov	r1, r6
 800ca5e:	e7da      	b.n	800ca16 <__gethex+0x100>
 800ca60:	1bf3      	subs	r3, r6, r7
 800ca62:	3b01      	subs	r3, #1
 800ca64:	4629      	mov	r1, r5
 800ca66:	2b07      	cmp	r3, #7
 800ca68:	dc49      	bgt.n	800cafe <__gethex+0x1e8>
 800ca6a:	9802      	ldr	r0, [sp, #8]
 800ca6c:	f000 fa58 	bl	800cf20 <_Balloc>
 800ca70:	9b01      	ldr	r3, [sp, #4]
 800ca72:	f100 0914 	add.w	r9, r0, #20
 800ca76:	f04f 0b00 	mov.w	fp, #0
 800ca7a:	f1c3 0301 	rsb	r3, r3, #1
 800ca7e:	4605      	mov	r5, r0
 800ca80:	f8cd 9010 	str.w	r9, [sp, #16]
 800ca84:	46da      	mov	sl, fp
 800ca86:	9308      	str	r3, [sp, #32]
 800ca88:	42b7      	cmp	r7, r6
 800ca8a:	d33b      	bcc.n	800cb04 <__gethex+0x1ee>
 800ca8c:	9804      	ldr	r0, [sp, #16]
 800ca8e:	f840 ab04 	str.w	sl, [r0], #4
 800ca92:	eba0 0009 	sub.w	r0, r0, r9
 800ca96:	1080      	asrs	r0, r0, #2
 800ca98:	6128      	str	r0, [r5, #16]
 800ca9a:	0147      	lsls	r7, r0, #5
 800ca9c:	4650      	mov	r0, sl
 800ca9e:	f000 fb03 	bl	800d0a8 <__hi0bits>
 800caa2:	f8d8 6000 	ldr.w	r6, [r8]
 800caa6:	1a3f      	subs	r7, r7, r0
 800caa8:	42b7      	cmp	r7, r6
 800caaa:	dd64      	ble.n	800cb76 <__gethex+0x260>
 800caac:	1bbf      	subs	r7, r7, r6
 800caae:	4639      	mov	r1, r7
 800cab0:	4628      	mov	r0, r5
 800cab2:	f000 fe13 	bl	800d6dc <__any_on>
 800cab6:	4682      	mov	sl, r0
 800cab8:	b178      	cbz	r0, 800cada <__gethex+0x1c4>
 800caba:	1e7b      	subs	r3, r7, #1
 800cabc:	1159      	asrs	r1, r3, #5
 800cabe:	f003 021f 	and.w	r2, r3, #31
 800cac2:	f04f 0a01 	mov.w	sl, #1
 800cac6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800caca:	fa0a f202 	lsl.w	r2, sl, r2
 800cace:	420a      	tst	r2, r1
 800cad0:	d003      	beq.n	800cada <__gethex+0x1c4>
 800cad2:	4553      	cmp	r3, sl
 800cad4:	dc46      	bgt.n	800cb64 <__gethex+0x24e>
 800cad6:	f04f 0a02 	mov.w	sl, #2
 800cada:	4639      	mov	r1, r7
 800cadc:	4628      	mov	r0, r5
 800cade:	f7ff fecb 	bl	800c878 <rshift>
 800cae2:	443c      	add	r4, r7
 800cae4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cae8:	42a3      	cmp	r3, r4
 800caea:	da52      	bge.n	800cb92 <__gethex+0x27c>
 800caec:	4629      	mov	r1, r5
 800caee:	9802      	ldr	r0, [sp, #8]
 800caf0:	f000 fa4a 	bl	800cf88 <_Bfree>
 800caf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800caf6:	2300      	movs	r3, #0
 800caf8:	6013      	str	r3, [r2, #0]
 800cafa:	27a3      	movs	r7, #163	; 0xa3
 800cafc:	e793      	b.n	800ca26 <__gethex+0x110>
 800cafe:	3101      	adds	r1, #1
 800cb00:	105b      	asrs	r3, r3, #1
 800cb02:	e7b0      	b.n	800ca66 <__gethex+0x150>
 800cb04:	1e73      	subs	r3, r6, #1
 800cb06:	9305      	str	r3, [sp, #20]
 800cb08:	9a07      	ldr	r2, [sp, #28]
 800cb0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d018      	beq.n	800cb44 <__gethex+0x22e>
 800cb12:	f1bb 0f20 	cmp.w	fp, #32
 800cb16:	d107      	bne.n	800cb28 <__gethex+0x212>
 800cb18:	9b04      	ldr	r3, [sp, #16]
 800cb1a:	f8c3 a000 	str.w	sl, [r3]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	f04f 0a00 	mov.w	sl, #0
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	46d3      	mov	fp, sl
 800cb28:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb2c:	f7ff fede 	bl	800c8ec <__hexdig_fun>
 800cb30:	f000 000f 	and.w	r0, r0, #15
 800cb34:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb38:	ea4a 0a00 	orr.w	sl, sl, r0
 800cb3c:	f10b 0b04 	add.w	fp, fp, #4
 800cb40:	9b05      	ldr	r3, [sp, #20]
 800cb42:	e00d      	b.n	800cb60 <__gethex+0x24a>
 800cb44:	9b05      	ldr	r3, [sp, #20]
 800cb46:	9a08      	ldr	r2, [sp, #32]
 800cb48:	4413      	add	r3, r2
 800cb4a:	42bb      	cmp	r3, r7
 800cb4c:	d3e1      	bcc.n	800cb12 <__gethex+0x1fc>
 800cb4e:	4618      	mov	r0, r3
 800cb50:	9a01      	ldr	r2, [sp, #4]
 800cb52:	9903      	ldr	r1, [sp, #12]
 800cb54:	9309      	str	r3, [sp, #36]	; 0x24
 800cb56:	f000 fffb 	bl	800db50 <strncmp>
 800cb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d1d8      	bne.n	800cb12 <__gethex+0x1fc>
 800cb60:	461e      	mov	r6, r3
 800cb62:	e791      	b.n	800ca88 <__gethex+0x172>
 800cb64:	1eb9      	subs	r1, r7, #2
 800cb66:	4628      	mov	r0, r5
 800cb68:	f000 fdb8 	bl	800d6dc <__any_on>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d0b2      	beq.n	800cad6 <__gethex+0x1c0>
 800cb70:	f04f 0a03 	mov.w	sl, #3
 800cb74:	e7b1      	b.n	800cada <__gethex+0x1c4>
 800cb76:	da09      	bge.n	800cb8c <__gethex+0x276>
 800cb78:	1bf7      	subs	r7, r6, r7
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	463a      	mov	r2, r7
 800cb7e:	9802      	ldr	r0, [sp, #8]
 800cb80:	f000 fbce 	bl	800d320 <__lshift>
 800cb84:	1be4      	subs	r4, r4, r7
 800cb86:	4605      	mov	r5, r0
 800cb88:	f100 0914 	add.w	r9, r0, #20
 800cb8c:	f04f 0a00 	mov.w	sl, #0
 800cb90:	e7a8      	b.n	800cae4 <__gethex+0x1ce>
 800cb92:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb96:	42a0      	cmp	r0, r4
 800cb98:	dd6a      	ble.n	800cc70 <__gethex+0x35a>
 800cb9a:	1b04      	subs	r4, r0, r4
 800cb9c:	42a6      	cmp	r6, r4
 800cb9e:	dc2e      	bgt.n	800cbfe <__gethex+0x2e8>
 800cba0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	d022      	beq.n	800cbee <__gethex+0x2d8>
 800cba8:	2b03      	cmp	r3, #3
 800cbaa:	d024      	beq.n	800cbf6 <__gethex+0x2e0>
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d115      	bne.n	800cbdc <__gethex+0x2c6>
 800cbb0:	42a6      	cmp	r6, r4
 800cbb2:	d113      	bne.n	800cbdc <__gethex+0x2c6>
 800cbb4:	2e01      	cmp	r6, #1
 800cbb6:	dc0b      	bgt.n	800cbd0 <__gethex+0x2ba>
 800cbb8:	9a06      	ldr	r2, [sp, #24]
 800cbba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	612b      	str	r3, [r5, #16]
 800cbc4:	f8c9 3000 	str.w	r3, [r9]
 800cbc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbca:	2762      	movs	r7, #98	; 0x62
 800cbcc:	601d      	str	r5, [r3, #0]
 800cbce:	e72a      	b.n	800ca26 <__gethex+0x110>
 800cbd0:	1e71      	subs	r1, r6, #1
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f000 fd82 	bl	800d6dc <__any_on>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d1ed      	bne.n	800cbb8 <__gethex+0x2a2>
 800cbdc:	4629      	mov	r1, r5
 800cbde:	9802      	ldr	r0, [sp, #8]
 800cbe0:	f000 f9d2 	bl	800cf88 <_Bfree>
 800cbe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	2750      	movs	r7, #80	; 0x50
 800cbec:	e71b      	b.n	800ca26 <__gethex+0x110>
 800cbee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d0e1      	beq.n	800cbb8 <__gethex+0x2a2>
 800cbf4:	e7f2      	b.n	800cbdc <__gethex+0x2c6>
 800cbf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1dd      	bne.n	800cbb8 <__gethex+0x2a2>
 800cbfc:	e7ee      	b.n	800cbdc <__gethex+0x2c6>
 800cbfe:	1e67      	subs	r7, r4, #1
 800cc00:	f1ba 0f00 	cmp.w	sl, #0
 800cc04:	d131      	bne.n	800cc6a <__gethex+0x354>
 800cc06:	b127      	cbz	r7, 800cc12 <__gethex+0x2fc>
 800cc08:	4639      	mov	r1, r7
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f000 fd66 	bl	800d6dc <__any_on>
 800cc10:	4682      	mov	sl, r0
 800cc12:	117a      	asrs	r2, r7, #5
 800cc14:	2301      	movs	r3, #1
 800cc16:	f007 071f 	and.w	r7, r7, #31
 800cc1a:	fa03 f707 	lsl.w	r7, r3, r7
 800cc1e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800cc22:	4621      	mov	r1, r4
 800cc24:	421f      	tst	r7, r3
 800cc26:	4628      	mov	r0, r5
 800cc28:	bf18      	it	ne
 800cc2a:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc2e:	1b36      	subs	r6, r6, r4
 800cc30:	f7ff fe22 	bl	800c878 <rshift>
 800cc34:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cc38:	2702      	movs	r7, #2
 800cc3a:	f1ba 0f00 	cmp.w	sl, #0
 800cc3e:	d048      	beq.n	800ccd2 <__gethex+0x3bc>
 800cc40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d015      	beq.n	800cc74 <__gethex+0x35e>
 800cc48:	2b03      	cmp	r3, #3
 800cc4a:	d017      	beq.n	800cc7c <__gethex+0x366>
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d109      	bne.n	800cc64 <__gethex+0x34e>
 800cc50:	f01a 0f02 	tst.w	sl, #2
 800cc54:	d006      	beq.n	800cc64 <__gethex+0x34e>
 800cc56:	f8d9 3000 	ldr.w	r3, [r9]
 800cc5a:	ea4a 0a03 	orr.w	sl, sl, r3
 800cc5e:	f01a 0f01 	tst.w	sl, #1
 800cc62:	d10e      	bne.n	800cc82 <__gethex+0x36c>
 800cc64:	f047 0710 	orr.w	r7, r7, #16
 800cc68:	e033      	b.n	800ccd2 <__gethex+0x3bc>
 800cc6a:	f04f 0a01 	mov.w	sl, #1
 800cc6e:	e7d0      	b.n	800cc12 <__gethex+0x2fc>
 800cc70:	2701      	movs	r7, #1
 800cc72:	e7e2      	b.n	800cc3a <__gethex+0x324>
 800cc74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc76:	f1c3 0301 	rsb	r3, r3, #1
 800cc7a:	9315      	str	r3, [sp, #84]	; 0x54
 800cc7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f0      	beq.n	800cc64 <__gethex+0x34e>
 800cc82:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800cc86:	f105 0314 	add.w	r3, r5, #20
 800cc8a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800cc8e:	eb03 010a 	add.w	r1, r3, sl
 800cc92:	f04f 0c00 	mov.w	ip, #0
 800cc96:	4618      	mov	r0, r3
 800cc98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cca0:	d01c      	beq.n	800ccdc <__gethex+0x3c6>
 800cca2:	3201      	adds	r2, #1
 800cca4:	6002      	str	r2, [r0, #0]
 800cca6:	2f02      	cmp	r7, #2
 800cca8:	f105 0314 	add.w	r3, r5, #20
 800ccac:	d138      	bne.n	800cd20 <__gethex+0x40a>
 800ccae:	f8d8 2000 	ldr.w	r2, [r8]
 800ccb2:	3a01      	subs	r2, #1
 800ccb4:	42b2      	cmp	r2, r6
 800ccb6:	d10a      	bne.n	800ccce <__gethex+0x3b8>
 800ccb8:	1171      	asrs	r1, r6, #5
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f006 061f 	and.w	r6, r6, #31
 800ccc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccc4:	fa02 f606 	lsl.w	r6, r2, r6
 800ccc8:	421e      	tst	r6, r3
 800ccca:	bf18      	it	ne
 800cccc:	4617      	movne	r7, r2
 800ccce:	f047 0720 	orr.w	r7, r7, #32
 800ccd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccd4:	601d      	str	r5, [r3, #0]
 800ccd6:	9b06      	ldr	r3, [sp, #24]
 800ccd8:	601c      	str	r4, [r3, #0]
 800ccda:	e6a4      	b.n	800ca26 <__gethex+0x110>
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	f843 cc04 	str.w	ip, [r3, #-4]
 800cce2:	d8d8      	bhi.n	800cc96 <__gethex+0x380>
 800cce4:	68ab      	ldr	r3, [r5, #8]
 800cce6:	4599      	cmp	r9, r3
 800cce8:	db12      	blt.n	800cd10 <__gethex+0x3fa>
 800ccea:	6869      	ldr	r1, [r5, #4]
 800ccec:	9802      	ldr	r0, [sp, #8]
 800ccee:	3101      	adds	r1, #1
 800ccf0:	f000 f916 	bl	800cf20 <_Balloc>
 800ccf4:	692a      	ldr	r2, [r5, #16]
 800ccf6:	3202      	adds	r2, #2
 800ccf8:	f105 010c 	add.w	r1, r5, #12
 800ccfc:	4683      	mov	fp, r0
 800ccfe:	0092      	lsls	r2, r2, #2
 800cd00:	300c      	adds	r0, #12
 800cd02:	f7fd fa4d 	bl	800a1a0 <memcpy>
 800cd06:	4629      	mov	r1, r5
 800cd08:	9802      	ldr	r0, [sp, #8]
 800cd0a:	f000 f93d 	bl	800cf88 <_Bfree>
 800cd0e:	465d      	mov	r5, fp
 800cd10:	692b      	ldr	r3, [r5, #16]
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cd18:	612a      	str	r2, [r5, #16]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	615a      	str	r2, [r3, #20]
 800cd1e:	e7c2      	b.n	800cca6 <__gethex+0x390>
 800cd20:	692a      	ldr	r2, [r5, #16]
 800cd22:	454a      	cmp	r2, r9
 800cd24:	dd0b      	ble.n	800cd3e <__gethex+0x428>
 800cd26:	2101      	movs	r1, #1
 800cd28:	4628      	mov	r0, r5
 800cd2a:	f7ff fda5 	bl	800c878 <rshift>
 800cd2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd32:	3401      	adds	r4, #1
 800cd34:	42a3      	cmp	r3, r4
 800cd36:	f6ff aed9 	blt.w	800caec <__gethex+0x1d6>
 800cd3a:	2701      	movs	r7, #1
 800cd3c:	e7c7      	b.n	800ccce <__gethex+0x3b8>
 800cd3e:	f016 061f 	ands.w	r6, r6, #31
 800cd42:	d0fa      	beq.n	800cd3a <__gethex+0x424>
 800cd44:	449a      	add	sl, r3
 800cd46:	f1c6 0620 	rsb	r6, r6, #32
 800cd4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cd4e:	f000 f9ab 	bl	800d0a8 <__hi0bits>
 800cd52:	42b0      	cmp	r0, r6
 800cd54:	dbe7      	blt.n	800cd26 <__gethex+0x410>
 800cd56:	e7f0      	b.n	800cd3a <__gethex+0x424>

0800cd58 <L_shift>:
 800cd58:	f1c2 0208 	rsb	r2, r2, #8
 800cd5c:	0092      	lsls	r2, r2, #2
 800cd5e:	b570      	push	{r4, r5, r6, lr}
 800cd60:	f1c2 0620 	rsb	r6, r2, #32
 800cd64:	6843      	ldr	r3, [r0, #4]
 800cd66:	6804      	ldr	r4, [r0, #0]
 800cd68:	fa03 f506 	lsl.w	r5, r3, r6
 800cd6c:	432c      	orrs	r4, r5
 800cd6e:	40d3      	lsrs	r3, r2
 800cd70:	6004      	str	r4, [r0, #0]
 800cd72:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd76:	4288      	cmp	r0, r1
 800cd78:	d3f4      	bcc.n	800cd64 <L_shift+0xc>
 800cd7a:	bd70      	pop	{r4, r5, r6, pc}

0800cd7c <__match>:
 800cd7c:	b530      	push	{r4, r5, lr}
 800cd7e:	6803      	ldr	r3, [r0, #0]
 800cd80:	3301      	adds	r3, #1
 800cd82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd86:	b914      	cbnz	r4, 800cd8e <__match+0x12>
 800cd88:	6003      	str	r3, [r0, #0]
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	bd30      	pop	{r4, r5, pc}
 800cd8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd96:	2d19      	cmp	r5, #25
 800cd98:	bf98      	it	ls
 800cd9a:	3220      	addls	r2, #32
 800cd9c:	42a2      	cmp	r2, r4
 800cd9e:	d0f0      	beq.n	800cd82 <__match+0x6>
 800cda0:	2000      	movs	r0, #0
 800cda2:	e7f3      	b.n	800cd8c <__match+0x10>

0800cda4 <__hexnan>:
 800cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda8:	680b      	ldr	r3, [r1, #0]
 800cdaa:	6801      	ldr	r1, [r0, #0]
 800cdac:	115f      	asrs	r7, r3, #5
 800cdae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cdb2:	f013 031f 	ands.w	r3, r3, #31
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	bf18      	it	ne
 800cdba:	3704      	addne	r7, #4
 800cdbc:	2500      	movs	r5, #0
 800cdbe:	1f3e      	subs	r6, r7, #4
 800cdc0:	4682      	mov	sl, r0
 800cdc2:	4690      	mov	r8, r2
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	f847 5c04 	str.w	r5, [r7, #-4]
 800cdca:	46b1      	mov	r9, r6
 800cdcc:	4634      	mov	r4, r6
 800cdce:	9502      	str	r5, [sp, #8]
 800cdd0:	46ab      	mov	fp, r5
 800cdd2:	784a      	ldrb	r2, [r1, #1]
 800cdd4:	1c4b      	adds	r3, r1, #1
 800cdd6:	9303      	str	r3, [sp, #12]
 800cdd8:	b342      	cbz	r2, 800ce2c <__hexnan+0x88>
 800cdda:	4610      	mov	r0, r2
 800cddc:	9105      	str	r1, [sp, #20]
 800cdde:	9204      	str	r2, [sp, #16]
 800cde0:	f7ff fd84 	bl	800c8ec <__hexdig_fun>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d143      	bne.n	800ce70 <__hexnan+0xcc>
 800cde8:	9a04      	ldr	r2, [sp, #16]
 800cdea:	9905      	ldr	r1, [sp, #20]
 800cdec:	2a20      	cmp	r2, #32
 800cdee:	d818      	bhi.n	800ce22 <__hexnan+0x7e>
 800cdf0:	9b02      	ldr	r3, [sp, #8]
 800cdf2:	459b      	cmp	fp, r3
 800cdf4:	dd13      	ble.n	800ce1e <__hexnan+0x7a>
 800cdf6:	454c      	cmp	r4, r9
 800cdf8:	d206      	bcs.n	800ce08 <__hexnan+0x64>
 800cdfa:	2d07      	cmp	r5, #7
 800cdfc:	dc04      	bgt.n	800ce08 <__hexnan+0x64>
 800cdfe:	462a      	mov	r2, r5
 800ce00:	4649      	mov	r1, r9
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7ff ffa8 	bl	800cd58 <L_shift>
 800ce08:	4544      	cmp	r4, r8
 800ce0a:	d944      	bls.n	800ce96 <__hexnan+0xf2>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f1a4 0904 	sub.w	r9, r4, #4
 800ce12:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce16:	f8cd b008 	str.w	fp, [sp, #8]
 800ce1a:	464c      	mov	r4, r9
 800ce1c:	461d      	mov	r5, r3
 800ce1e:	9903      	ldr	r1, [sp, #12]
 800ce20:	e7d7      	b.n	800cdd2 <__hexnan+0x2e>
 800ce22:	2a29      	cmp	r2, #41	; 0x29
 800ce24:	d14a      	bne.n	800cebc <__hexnan+0x118>
 800ce26:	3102      	adds	r1, #2
 800ce28:	f8ca 1000 	str.w	r1, [sl]
 800ce2c:	f1bb 0f00 	cmp.w	fp, #0
 800ce30:	d044      	beq.n	800cebc <__hexnan+0x118>
 800ce32:	454c      	cmp	r4, r9
 800ce34:	d206      	bcs.n	800ce44 <__hexnan+0xa0>
 800ce36:	2d07      	cmp	r5, #7
 800ce38:	dc04      	bgt.n	800ce44 <__hexnan+0xa0>
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f7ff ff8a 	bl	800cd58 <L_shift>
 800ce44:	4544      	cmp	r4, r8
 800ce46:	d928      	bls.n	800ce9a <__hexnan+0xf6>
 800ce48:	4643      	mov	r3, r8
 800ce4a:	f854 2b04 	ldr.w	r2, [r4], #4
 800ce4e:	f843 2b04 	str.w	r2, [r3], #4
 800ce52:	42a6      	cmp	r6, r4
 800ce54:	d2f9      	bcs.n	800ce4a <__hexnan+0xa6>
 800ce56:	2200      	movs	r2, #0
 800ce58:	f843 2b04 	str.w	r2, [r3], #4
 800ce5c:	429e      	cmp	r6, r3
 800ce5e:	d2fb      	bcs.n	800ce58 <__hexnan+0xb4>
 800ce60:	6833      	ldr	r3, [r6, #0]
 800ce62:	b91b      	cbnz	r3, 800ce6c <__hexnan+0xc8>
 800ce64:	4546      	cmp	r6, r8
 800ce66:	d127      	bne.n	800ceb8 <__hexnan+0x114>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	6033      	str	r3, [r6, #0]
 800ce6c:	2005      	movs	r0, #5
 800ce6e:	e026      	b.n	800cebe <__hexnan+0x11a>
 800ce70:	3501      	adds	r5, #1
 800ce72:	2d08      	cmp	r5, #8
 800ce74:	f10b 0b01 	add.w	fp, fp, #1
 800ce78:	dd06      	ble.n	800ce88 <__hexnan+0xe4>
 800ce7a:	4544      	cmp	r4, r8
 800ce7c:	d9cf      	bls.n	800ce1e <__hexnan+0x7a>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce84:	2501      	movs	r5, #1
 800ce86:	3c04      	subs	r4, #4
 800ce88:	6822      	ldr	r2, [r4, #0]
 800ce8a:	f000 000f 	and.w	r0, r0, #15
 800ce8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce92:	6020      	str	r0, [r4, #0]
 800ce94:	e7c3      	b.n	800ce1e <__hexnan+0x7a>
 800ce96:	2508      	movs	r5, #8
 800ce98:	e7c1      	b.n	800ce1e <__hexnan+0x7a>
 800ce9a:	9b01      	ldr	r3, [sp, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d0df      	beq.n	800ce60 <__hexnan+0xbc>
 800cea0:	f04f 32ff 	mov.w	r2, #4294967295
 800cea4:	f1c3 0320 	rsb	r3, r3, #32
 800cea8:	fa22 f303 	lsr.w	r3, r2, r3
 800ceac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ceb0:	401a      	ands	r2, r3
 800ceb2:	f847 2c04 	str.w	r2, [r7, #-4]
 800ceb6:	e7d3      	b.n	800ce60 <__hexnan+0xbc>
 800ceb8:	3e04      	subs	r6, #4
 800ceba:	e7d1      	b.n	800ce60 <__hexnan+0xbc>
 800cebc:	2004      	movs	r0, #4
 800cebe:	b007      	add	sp, #28
 800cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cec4 <__locale_ctype_ptr_l>:
 800cec4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cec8:	4770      	bx	lr

0800ceca <__localeconv_l>:
 800ceca:	30f0      	adds	r0, #240	; 0xf0
 800cecc:	4770      	bx	lr
	...

0800ced0 <_localeconv_r>:
 800ced0:	4b04      	ldr	r3, [pc, #16]	; (800cee4 <_localeconv_r+0x14>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6a18      	ldr	r0, [r3, #32]
 800ced6:	4b04      	ldr	r3, [pc, #16]	; (800cee8 <_localeconv_r+0x18>)
 800ced8:	2800      	cmp	r0, #0
 800ceda:	bf08      	it	eq
 800cedc:	4618      	moveq	r0, r3
 800cede:	30f0      	adds	r0, #240	; 0xf0
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	20000034 	.word	0x20000034
 800cee8:	20000098 	.word	0x20000098

0800ceec <malloc>:
 800ceec:	4b02      	ldr	r3, [pc, #8]	; (800cef8 <malloc+0xc>)
 800ceee:	4601      	mov	r1, r0
 800cef0:	6818      	ldr	r0, [r3, #0]
 800cef2:	f000 bc71 	b.w	800d7d8 <_malloc_r>
 800cef6:	bf00      	nop
 800cef8:	20000034 	.word	0x20000034

0800cefc <__ascii_mbtowc>:
 800cefc:	b082      	sub	sp, #8
 800cefe:	b901      	cbnz	r1, 800cf02 <__ascii_mbtowc+0x6>
 800cf00:	a901      	add	r1, sp, #4
 800cf02:	b142      	cbz	r2, 800cf16 <__ascii_mbtowc+0x1a>
 800cf04:	b14b      	cbz	r3, 800cf1a <__ascii_mbtowc+0x1e>
 800cf06:	7813      	ldrb	r3, [r2, #0]
 800cf08:	600b      	str	r3, [r1, #0]
 800cf0a:	7812      	ldrb	r2, [r2, #0]
 800cf0c:	1c10      	adds	r0, r2, #0
 800cf0e:	bf18      	it	ne
 800cf10:	2001      	movne	r0, #1
 800cf12:	b002      	add	sp, #8
 800cf14:	4770      	bx	lr
 800cf16:	4610      	mov	r0, r2
 800cf18:	e7fb      	b.n	800cf12 <__ascii_mbtowc+0x16>
 800cf1a:	f06f 0001 	mvn.w	r0, #1
 800cf1e:	e7f8      	b.n	800cf12 <__ascii_mbtowc+0x16>

0800cf20 <_Balloc>:
 800cf20:	b570      	push	{r4, r5, r6, lr}
 800cf22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf24:	4604      	mov	r4, r0
 800cf26:	460e      	mov	r6, r1
 800cf28:	b93d      	cbnz	r5, 800cf3a <_Balloc+0x1a>
 800cf2a:	2010      	movs	r0, #16
 800cf2c:	f7ff ffde 	bl	800ceec <malloc>
 800cf30:	6260      	str	r0, [r4, #36]	; 0x24
 800cf32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf36:	6005      	str	r5, [r0, #0]
 800cf38:	60c5      	str	r5, [r0, #12]
 800cf3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cf3c:	68eb      	ldr	r3, [r5, #12]
 800cf3e:	b183      	cbz	r3, 800cf62 <_Balloc+0x42>
 800cf40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cf48:	b9b8      	cbnz	r0, 800cf7a <_Balloc+0x5a>
 800cf4a:	2101      	movs	r1, #1
 800cf4c:	fa01 f506 	lsl.w	r5, r1, r6
 800cf50:	1d6a      	adds	r2, r5, #5
 800cf52:	0092      	lsls	r2, r2, #2
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fbe2 	bl	800d71e <_calloc_r>
 800cf5a:	b160      	cbz	r0, 800cf76 <_Balloc+0x56>
 800cf5c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cf60:	e00e      	b.n	800cf80 <_Balloc+0x60>
 800cf62:	2221      	movs	r2, #33	; 0x21
 800cf64:	2104      	movs	r1, #4
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 fbd9 	bl	800d71e <_calloc_r>
 800cf6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf6e:	60e8      	str	r0, [r5, #12]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1e4      	bne.n	800cf40 <_Balloc+0x20>
 800cf76:	2000      	movs	r0, #0
 800cf78:	bd70      	pop	{r4, r5, r6, pc}
 800cf7a:	6802      	ldr	r2, [r0, #0]
 800cf7c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cf80:	2300      	movs	r3, #0
 800cf82:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf86:	e7f7      	b.n	800cf78 <_Balloc+0x58>

0800cf88 <_Bfree>:
 800cf88:	b570      	push	{r4, r5, r6, lr}
 800cf8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	460d      	mov	r5, r1
 800cf90:	b93c      	cbnz	r4, 800cfa2 <_Bfree+0x1a>
 800cf92:	2010      	movs	r0, #16
 800cf94:	f7ff ffaa 	bl	800ceec <malloc>
 800cf98:	6270      	str	r0, [r6, #36]	; 0x24
 800cf9a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf9e:	6004      	str	r4, [r0, #0]
 800cfa0:	60c4      	str	r4, [r0, #12]
 800cfa2:	b13d      	cbz	r5, 800cfb4 <_Bfree+0x2c>
 800cfa4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cfa6:	686a      	ldr	r2, [r5, #4]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfae:	6029      	str	r1, [r5, #0]
 800cfb0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cfb4:	bd70      	pop	{r4, r5, r6, pc}

0800cfb6 <__multadd>:
 800cfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfba:	690d      	ldr	r5, [r1, #16]
 800cfbc:	461f      	mov	r7, r3
 800cfbe:	4606      	mov	r6, r0
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	f101 0c14 	add.w	ip, r1, #20
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f8dc 0000 	ldr.w	r0, [ip]
 800cfcc:	b281      	uxth	r1, r0
 800cfce:	fb02 7101 	mla	r1, r2, r1, r7
 800cfd2:	0c0f      	lsrs	r7, r1, #16
 800cfd4:	0c00      	lsrs	r0, r0, #16
 800cfd6:	fb02 7000 	mla	r0, r2, r0, r7
 800cfda:	b289      	uxth	r1, r1
 800cfdc:	3301      	adds	r3, #1
 800cfde:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cfe2:	429d      	cmp	r5, r3
 800cfe4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cfe8:	f84c 1b04 	str.w	r1, [ip], #4
 800cfec:	dcec      	bgt.n	800cfc8 <__multadd+0x12>
 800cfee:	b1d7      	cbz	r7, 800d026 <__multadd+0x70>
 800cff0:	68a3      	ldr	r3, [r4, #8]
 800cff2:	42ab      	cmp	r3, r5
 800cff4:	dc12      	bgt.n	800d01c <__multadd+0x66>
 800cff6:	6861      	ldr	r1, [r4, #4]
 800cff8:	4630      	mov	r0, r6
 800cffa:	3101      	adds	r1, #1
 800cffc:	f7ff ff90 	bl	800cf20 <_Balloc>
 800d000:	6922      	ldr	r2, [r4, #16]
 800d002:	3202      	adds	r2, #2
 800d004:	f104 010c 	add.w	r1, r4, #12
 800d008:	4680      	mov	r8, r0
 800d00a:	0092      	lsls	r2, r2, #2
 800d00c:	300c      	adds	r0, #12
 800d00e:	f7fd f8c7 	bl	800a1a0 <memcpy>
 800d012:	4621      	mov	r1, r4
 800d014:	4630      	mov	r0, r6
 800d016:	f7ff ffb7 	bl	800cf88 <_Bfree>
 800d01a:	4644      	mov	r4, r8
 800d01c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d020:	3501      	adds	r5, #1
 800d022:	615f      	str	r7, [r3, #20]
 800d024:	6125      	str	r5, [r4, #16]
 800d026:	4620      	mov	r0, r4
 800d028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d02c <__s2b>:
 800d02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d030:	460c      	mov	r4, r1
 800d032:	4615      	mov	r5, r2
 800d034:	461f      	mov	r7, r3
 800d036:	2209      	movs	r2, #9
 800d038:	3308      	adds	r3, #8
 800d03a:	4606      	mov	r6, r0
 800d03c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d040:	2100      	movs	r1, #0
 800d042:	2201      	movs	r2, #1
 800d044:	429a      	cmp	r2, r3
 800d046:	db20      	blt.n	800d08a <__s2b+0x5e>
 800d048:	4630      	mov	r0, r6
 800d04a:	f7ff ff69 	bl	800cf20 <_Balloc>
 800d04e:	9b08      	ldr	r3, [sp, #32]
 800d050:	6143      	str	r3, [r0, #20]
 800d052:	2d09      	cmp	r5, #9
 800d054:	f04f 0301 	mov.w	r3, #1
 800d058:	6103      	str	r3, [r0, #16]
 800d05a:	dd19      	ble.n	800d090 <__s2b+0x64>
 800d05c:	f104 0809 	add.w	r8, r4, #9
 800d060:	46c1      	mov	r9, r8
 800d062:	442c      	add	r4, r5
 800d064:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d068:	4601      	mov	r1, r0
 800d06a:	3b30      	subs	r3, #48	; 0x30
 800d06c:	220a      	movs	r2, #10
 800d06e:	4630      	mov	r0, r6
 800d070:	f7ff ffa1 	bl	800cfb6 <__multadd>
 800d074:	45a1      	cmp	r9, r4
 800d076:	d1f5      	bne.n	800d064 <__s2b+0x38>
 800d078:	eb08 0405 	add.w	r4, r8, r5
 800d07c:	3c08      	subs	r4, #8
 800d07e:	1b2d      	subs	r5, r5, r4
 800d080:	1963      	adds	r3, r4, r5
 800d082:	42bb      	cmp	r3, r7
 800d084:	db07      	blt.n	800d096 <__s2b+0x6a>
 800d086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d08a:	0052      	lsls	r2, r2, #1
 800d08c:	3101      	adds	r1, #1
 800d08e:	e7d9      	b.n	800d044 <__s2b+0x18>
 800d090:	340a      	adds	r4, #10
 800d092:	2509      	movs	r5, #9
 800d094:	e7f3      	b.n	800d07e <__s2b+0x52>
 800d096:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d09a:	4601      	mov	r1, r0
 800d09c:	3b30      	subs	r3, #48	; 0x30
 800d09e:	220a      	movs	r2, #10
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f7ff ff88 	bl	800cfb6 <__multadd>
 800d0a6:	e7eb      	b.n	800d080 <__s2b+0x54>

0800d0a8 <__hi0bits>:
 800d0a8:	0c02      	lsrs	r2, r0, #16
 800d0aa:	0412      	lsls	r2, r2, #16
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	b9b2      	cbnz	r2, 800d0de <__hi0bits+0x36>
 800d0b0:	0403      	lsls	r3, r0, #16
 800d0b2:	2010      	movs	r0, #16
 800d0b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d0b8:	bf04      	itt	eq
 800d0ba:	021b      	lsleq	r3, r3, #8
 800d0bc:	3008      	addeq	r0, #8
 800d0be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d0c2:	bf04      	itt	eq
 800d0c4:	011b      	lsleq	r3, r3, #4
 800d0c6:	3004      	addeq	r0, #4
 800d0c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d0cc:	bf04      	itt	eq
 800d0ce:	009b      	lsleq	r3, r3, #2
 800d0d0:	3002      	addeq	r0, #2
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	db06      	blt.n	800d0e4 <__hi0bits+0x3c>
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	d503      	bpl.n	800d0e2 <__hi0bits+0x3a>
 800d0da:	3001      	adds	r0, #1
 800d0dc:	4770      	bx	lr
 800d0de:	2000      	movs	r0, #0
 800d0e0:	e7e8      	b.n	800d0b4 <__hi0bits+0xc>
 800d0e2:	2020      	movs	r0, #32
 800d0e4:	4770      	bx	lr

0800d0e6 <__lo0bits>:
 800d0e6:	6803      	ldr	r3, [r0, #0]
 800d0e8:	f013 0207 	ands.w	r2, r3, #7
 800d0ec:	4601      	mov	r1, r0
 800d0ee:	d00b      	beq.n	800d108 <__lo0bits+0x22>
 800d0f0:	07da      	lsls	r2, r3, #31
 800d0f2:	d423      	bmi.n	800d13c <__lo0bits+0x56>
 800d0f4:	0798      	lsls	r0, r3, #30
 800d0f6:	bf49      	itett	mi
 800d0f8:	085b      	lsrmi	r3, r3, #1
 800d0fa:	089b      	lsrpl	r3, r3, #2
 800d0fc:	2001      	movmi	r0, #1
 800d0fe:	600b      	strmi	r3, [r1, #0]
 800d100:	bf5c      	itt	pl
 800d102:	600b      	strpl	r3, [r1, #0]
 800d104:	2002      	movpl	r0, #2
 800d106:	4770      	bx	lr
 800d108:	b298      	uxth	r0, r3
 800d10a:	b9a8      	cbnz	r0, 800d138 <__lo0bits+0x52>
 800d10c:	0c1b      	lsrs	r3, r3, #16
 800d10e:	2010      	movs	r0, #16
 800d110:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d114:	bf04      	itt	eq
 800d116:	0a1b      	lsreq	r3, r3, #8
 800d118:	3008      	addeq	r0, #8
 800d11a:	071a      	lsls	r2, r3, #28
 800d11c:	bf04      	itt	eq
 800d11e:	091b      	lsreq	r3, r3, #4
 800d120:	3004      	addeq	r0, #4
 800d122:	079a      	lsls	r2, r3, #30
 800d124:	bf04      	itt	eq
 800d126:	089b      	lsreq	r3, r3, #2
 800d128:	3002      	addeq	r0, #2
 800d12a:	07da      	lsls	r2, r3, #31
 800d12c:	d402      	bmi.n	800d134 <__lo0bits+0x4e>
 800d12e:	085b      	lsrs	r3, r3, #1
 800d130:	d006      	beq.n	800d140 <__lo0bits+0x5a>
 800d132:	3001      	adds	r0, #1
 800d134:	600b      	str	r3, [r1, #0]
 800d136:	4770      	bx	lr
 800d138:	4610      	mov	r0, r2
 800d13a:	e7e9      	b.n	800d110 <__lo0bits+0x2a>
 800d13c:	2000      	movs	r0, #0
 800d13e:	4770      	bx	lr
 800d140:	2020      	movs	r0, #32
 800d142:	4770      	bx	lr

0800d144 <__i2b>:
 800d144:	b510      	push	{r4, lr}
 800d146:	460c      	mov	r4, r1
 800d148:	2101      	movs	r1, #1
 800d14a:	f7ff fee9 	bl	800cf20 <_Balloc>
 800d14e:	2201      	movs	r2, #1
 800d150:	6144      	str	r4, [r0, #20]
 800d152:	6102      	str	r2, [r0, #16]
 800d154:	bd10      	pop	{r4, pc}

0800d156 <__multiply>:
 800d156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15a:	4614      	mov	r4, r2
 800d15c:	690a      	ldr	r2, [r1, #16]
 800d15e:	6923      	ldr	r3, [r4, #16]
 800d160:	429a      	cmp	r2, r3
 800d162:	bfb8      	it	lt
 800d164:	460b      	movlt	r3, r1
 800d166:	4688      	mov	r8, r1
 800d168:	bfbc      	itt	lt
 800d16a:	46a0      	movlt	r8, r4
 800d16c:	461c      	movlt	r4, r3
 800d16e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d172:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d176:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d17a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d17e:	eb07 0609 	add.w	r6, r7, r9
 800d182:	42b3      	cmp	r3, r6
 800d184:	bfb8      	it	lt
 800d186:	3101      	addlt	r1, #1
 800d188:	f7ff feca 	bl	800cf20 <_Balloc>
 800d18c:	f100 0514 	add.w	r5, r0, #20
 800d190:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d194:	462b      	mov	r3, r5
 800d196:	2200      	movs	r2, #0
 800d198:	4573      	cmp	r3, lr
 800d19a:	d316      	bcc.n	800d1ca <__multiply+0x74>
 800d19c:	f104 0214 	add.w	r2, r4, #20
 800d1a0:	f108 0114 	add.w	r1, r8, #20
 800d1a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d1a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	9b00      	ldr	r3, [sp, #0]
 800d1b0:	9201      	str	r2, [sp, #4]
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d80c      	bhi.n	800d1d0 <__multiply+0x7a>
 800d1b6:	2e00      	cmp	r6, #0
 800d1b8:	dd03      	ble.n	800d1c2 <__multiply+0x6c>
 800d1ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d05d      	beq.n	800d27e <__multiply+0x128>
 800d1c2:	6106      	str	r6, [r0, #16]
 800d1c4:	b003      	add	sp, #12
 800d1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ca:	f843 2b04 	str.w	r2, [r3], #4
 800d1ce:	e7e3      	b.n	800d198 <__multiply+0x42>
 800d1d0:	f8b2 b000 	ldrh.w	fp, [r2]
 800d1d4:	f1bb 0f00 	cmp.w	fp, #0
 800d1d8:	d023      	beq.n	800d222 <__multiply+0xcc>
 800d1da:	4689      	mov	r9, r1
 800d1dc:	46ac      	mov	ip, r5
 800d1de:	f04f 0800 	mov.w	r8, #0
 800d1e2:	f859 4b04 	ldr.w	r4, [r9], #4
 800d1e6:	f8dc a000 	ldr.w	sl, [ip]
 800d1ea:	b2a3      	uxth	r3, r4
 800d1ec:	fa1f fa8a 	uxth.w	sl, sl
 800d1f0:	fb0b a303 	mla	r3, fp, r3, sl
 800d1f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d1f8:	f8dc 4000 	ldr.w	r4, [ip]
 800d1fc:	4443      	add	r3, r8
 800d1fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d202:	fb0b 840a 	mla	r4, fp, sl, r8
 800d206:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d20a:	46e2      	mov	sl, ip
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d212:	454f      	cmp	r7, r9
 800d214:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d218:	f84a 3b04 	str.w	r3, [sl], #4
 800d21c:	d82b      	bhi.n	800d276 <__multiply+0x120>
 800d21e:	f8cc 8004 	str.w	r8, [ip, #4]
 800d222:	9b01      	ldr	r3, [sp, #4]
 800d224:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d228:	3204      	adds	r2, #4
 800d22a:	f1ba 0f00 	cmp.w	sl, #0
 800d22e:	d020      	beq.n	800d272 <__multiply+0x11c>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	4689      	mov	r9, r1
 800d234:	46a8      	mov	r8, r5
 800d236:	f04f 0b00 	mov.w	fp, #0
 800d23a:	f8b9 c000 	ldrh.w	ip, [r9]
 800d23e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d242:	fb0a 440c 	mla	r4, sl, ip, r4
 800d246:	445c      	add	r4, fp
 800d248:	46c4      	mov	ip, r8
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d250:	f84c 3b04 	str.w	r3, [ip], #4
 800d254:	f859 3b04 	ldr.w	r3, [r9], #4
 800d258:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d25c:	0c1b      	lsrs	r3, r3, #16
 800d25e:	fb0a b303 	mla	r3, sl, r3, fp
 800d262:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d266:	454f      	cmp	r7, r9
 800d268:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d26c:	d805      	bhi.n	800d27a <__multiply+0x124>
 800d26e:	f8c8 3004 	str.w	r3, [r8, #4]
 800d272:	3504      	adds	r5, #4
 800d274:	e79b      	b.n	800d1ae <__multiply+0x58>
 800d276:	46d4      	mov	ip, sl
 800d278:	e7b3      	b.n	800d1e2 <__multiply+0x8c>
 800d27a:	46e0      	mov	r8, ip
 800d27c:	e7dd      	b.n	800d23a <__multiply+0xe4>
 800d27e:	3e01      	subs	r6, #1
 800d280:	e799      	b.n	800d1b6 <__multiply+0x60>
	...

0800d284 <__pow5mult>:
 800d284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d288:	4615      	mov	r5, r2
 800d28a:	f012 0203 	ands.w	r2, r2, #3
 800d28e:	4606      	mov	r6, r0
 800d290:	460f      	mov	r7, r1
 800d292:	d007      	beq.n	800d2a4 <__pow5mult+0x20>
 800d294:	3a01      	subs	r2, #1
 800d296:	4c21      	ldr	r4, [pc, #132]	; (800d31c <__pow5mult+0x98>)
 800d298:	2300      	movs	r3, #0
 800d29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d29e:	f7ff fe8a 	bl	800cfb6 <__multadd>
 800d2a2:	4607      	mov	r7, r0
 800d2a4:	10ad      	asrs	r5, r5, #2
 800d2a6:	d035      	beq.n	800d314 <__pow5mult+0x90>
 800d2a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d2aa:	b93c      	cbnz	r4, 800d2bc <__pow5mult+0x38>
 800d2ac:	2010      	movs	r0, #16
 800d2ae:	f7ff fe1d 	bl	800ceec <malloc>
 800d2b2:	6270      	str	r0, [r6, #36]	; 0x24
 800d2b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2b8:	6004      	str	r4, [r0, #0]
 800d2ba:	60c4      	str	r4, [r0, #12]
 800d2bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d2c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2c4:	b94c      	cbnz	r4, 800d2da <__pow5mult+0x56>
 800d2c6:	f240 2171 	movw	r1, #625	; 0x271
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f7ff ff3a 	bl	800d144 <__i2b>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	6003      	str	r3, [r0, #0]
 800d2da:	f04f 0800 	mov.w	r8, #0
 800d2de:	07eb      	lsls	r3, r5, #31
 800d2e0:	d50a      	bpl.n	800d2f8 <__pow5mult+0x74>
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	4622      	mov	r2, r4
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f7ff ff35 	bl	800d156 <__multiply>
 800d2ec:	4639      	mov	r1, r7
 800d2ee:	4681      	mov	r9, r0
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f7ff fe49 	bl	800cf88 <_Bfree>
 800d2f6:	464f      	mov	r7, r9
 800d2f8:	106d      	asrs	r5, r5, #1
 800d2fa:	d00b      	beq.n	800d314 <__pow5mult+0x90>
 800d2fc:	6820      	ldr	r0, [r4, #0]
 800d2fe:	b938      	cbnz	r0, 800d310 <__pow5mult+0x8c>
 800d300:	4622      	mov	r2, r4
 800d302:	4621      	mov	r1, r4
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff ff26 	bl	800d156 <__multiply>
 800d30a:	6020      	str	r0, [r4, #0]
 800d30c:	f8c0 8000 	str.w	r8, [r0]
 800d310:	4604      	mov	r4, r0
 800d312:	e7e4      	b.n	800d2de <__pow5mult+0x5a>
 800d314:	4638      	mov	r0, r7
 800d316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31a:	bf00      	nop
 800d31c:	0800def0 	.word	0x0800def0

0800d320 <__lshift>:
 800d320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d324:	460c      	mov	r4, r1
 800d326:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d32a:	6923      	ldr	r3, [r4, #16]
 800d32c:	6849      	ldr	r1, [r1, #4]
 800d32e:	eb0a 0903 	add.w	r9, sl, r3
 800d332:	68a3      	ldr	r3, [r4, #8]
 800d334:	4607      	mov	r7, r0
 800d336:	4616      	mov	r6, r2
 800d338:	f109 0501 	add.w	r5, r9, #1
 800d33c:	42ab      	cmp	r3, r5
 800d33e:	db32      	blt.n	800d3a6 <__lshift+0x86>
 800d340:	4638      	mov	r0, r7
 800d342:	f7ff fded 	bl	800cf20 <_Balloc>
 800d346:	2300      	movs	r3, #0
 800d348:	4680      	mov	r8, r0
 800d34a:	f100 0114 	add.w	r1, r0, #20
 800d34e:	461a      	mov	r2, r3
 800d350:	4553      	cmp	r3, sl
 800d352:	db2b      	blt.n	800d3ac <__lshift+0x8c>
 800d354:	6920      	ldr	r0, [r4, #16]
 800d356:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d35a:	f104 0314 	add.w	r3, r4, #20
 800d35e:	f016 021f 	ands.w	r2, r6, #31
 800d362:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d366:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d36a:	d025      	beq.n	800d3b8 <__lshift+0x98>
 800d36c:	f1c2 0e20 	rsb	lr, r2, #32
 800d370:	2000      	movs	r0, #0
 800d372:	681e      	ldr	r6, [r3, #0]
 800d374:	468a      	mov	sl, r1
 800d376:	4096      	lsls	r6, r2
 800d378:	4330      	orrs	r0, r6
 800d37a:	f84a 0b04 	str.w	r0, [sl], #4
 800d37e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d382:	459c      	cmp	ip, r3
 800d384:	fa20 f00e 	lsr.w	r0, r0, lr
 800d388:	d814      	bhi.n	800d3b4 <__lshift+0x94>
 800d38a:	6048      	str	r0, [r1, #4]
 800d38c:	b108      	cbz	r0, 800d392 <__lshift+0x72>
 800d38e:	f109 0502 	add.w	r5, r9, #2
 800d392:	3d01      	subs	r5, #1
 800d394:	4638      	mov	r0, r7
 800d396:	f8c8 5010 	str.w	r5, [r8, #16]
 800d39a:	4621      	mov	r1, r4
 800d39c:	f7ff fdf4 	bl	800cf88 <_Bfree>
 800d3a0:	4640      	mov	r0, r8
 800d3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a6:	3101      	adds	r1, #1
 800d3a8:	005b      	lsls	r3, r3, #1
 800d3aa:	e7c7      	b.n	800d33c <__lshift+0x1c>
 800d3ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	e7cd      	b.n	800d350 <__lshift+0x30>
 800d3b4:	4651      	mov	r1, sl
 800d3b6:	e7dc      	b.n	800d372 <__lshift+0x52>
 800d3b8:	3904      	subs	r1, #4
 800d3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3be:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3c2:	459c      	cmp	ip, r3
 800d3c4:	d8f9      	bhi.n	800d3ba <__lshift+0x9a>
 800d3c6:	e7e4      	b.n	800d392 <__lshift+0x72>

0800d3c8 <__mcmp>:
 800d3c8:	6903      	ldr	r3, [r0, #16]
 800d3ca:	690a      	ldr	r2, [r1, #16]
 800d3cc:	1a9b      	subs	r3, r3, r2
 800d3ce:	b530      	push	{r4, r5, lr}
 800d3d0:	d10c      	bne.n	800d3ec <__mcmp+0x24>
 800d3d2:	0092      	lsls	r2, r2, #2
 800d3d4:	3014      	adds	r0, #20
 800d3d6:	3114      	adds	r1, #20
 800d3d8:	1884      	adds	r4, r0, r2
 800d3da:	4411      	add	r1, r2
 800d3dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3e4:	4295      	cmp	r5, r2
 800d3e6:	d003      	beq.n	800d3f0 <__mcmp+0x28>
 800d3e8:	d305      	bcc.n	800d3f6 <__mcmp+0x2e>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	bd30      	pop	{r4, r5, pc}
 800d3f0:	42a0      	cmp	r0, r4
 800d3f2:	d3f3      	bcc.n	800d3dc <__mcmp+0x14>
 800d3f4:	e7fa      	b.n	800d3ec <__mcmp+0x24>
 800d3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3fa:	e7f7      	b.n	800d3ec <__mcmp+0x24>

0800d3fc <__mdiff>:
 800d3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d400:	460d      	mov	r5, r1
 800d402:	4607      	mov	r7, r0
 800d404:	4611      	mov	r1, r2
 800d406:	4628      	mov	r0, r5
 800d408:	4614      	mov	r4, r2
 800d40a:	f7ff ffdd 	bl	800d3c8 <__mcmp>
 800d40e:	1e06      	subs	r6, r0, #0
 800d410:	d108      	bne.n	800d424 <__mdiff+0x28>
 800d412:	4631      	mov	r1, r6
 800d414:	4638      	mov	r0, r7
 800d416:	f7ff fd83 	bl	800cf20 <_Balloc>
 800d41a:	2301      	movs	r3, #1
 800d41c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d424:	bfa4      	itt	ge
 800d426:	4623      	movge	r3, r4
 800d428:	462c      	movge	r4, r5
 800d42a:	4638      	mov	r0, r7
 800d42c:	6861      	ldr	r1, [r4, #4]
 800d42e:	bfa6      	itte	ge
 800d430:	461d      	movge	r5, r3
 800d432:	2600      	movge	r6, #0
 800d434:	2601      	movlt	r6, #1
 800d436:	f7ff fd73 	bl	800cf20 <_Balloc>
 800d43a:	692b      	ldr	r3, [r5, #16]
 800d43c:	60c6      	str	r6, [r0, #12]
 800d43e:	6926      	ldr	r6, [r4, #16]
 800d440:	f105 0914 	add.w	r9, r5, #20
 800d444:	f104 0214 	add.w	r2, r4, #20
 800d448:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d44c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d450:	f100 0514 	add.w	r5, r0, #20
 800d454:	f04f 0e00 	mov.w	lr, #0
 800d458:	f852 ab04 	ldr.w	sl, [r2], #4
 800d45c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d460:	fa1e f18a 	uxtah	r1, lr, sl
 800d464:	b2a3      	uxth	r3, r4
 800d466:	1ac9      	subs	r1, r1, r3
 800d468:	0c23      	lsrs	r3, r4, #16
 800d46a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d46e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d472:	b289      	uxth	r1, r1
 800d474:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d478:	45c8      	cmp	r8, r9
 800d47a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d47e:	4694      	mov	ip, r2
 800d480:	f845 3b04 	str.w	r3, [r5], #4
 800d484:	d8e8      	bhi.n	800d458 <__mdiff+0x5c>
 800d486:	45bc      	cmp	ip, r7
 800d488:	d304      	bcc.n	800d494 <__mdiff+0x98>
 800d48a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d48e:	b183      	cbz	r3, 800d4b2 <__mdiff+0xb6>
 800d490:	6106      	str	r6, [r0, #16]
 800d492:	e7c5      	b.n	800d420 <__mdiff+0x24>
 800d494:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d498:	fa1e f381 	uxtah	r3, lr, r1
 800d49c:	141a      	asrs	r2, r3, #16
 800d49e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d4ac:	f845 3b04 	str.w	r3, [r5], #4
 800d4b0:	e7e9      	b.n	800d486 <__mdiff+0x8a>
 800d4b2:	3e01      	subs	r6, #1
 800d4b4:	e7e9      	b.n	800d48a <__mdiff+0x8e>
	...

0800d4b8 <__ulp>:
 800d4b8:	4b12      	ldr	r3, [pc, #72]	; (800d504 <__ulp+0x4c>)
 800d4ba:	ee10 2a90 	vmov	r2, s1
 800d4be:	401a      	ands	r2, r3
 800d4c0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dd04      	ble.n	800d4d2 <__ulp+0x1a>
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	ec41 0b10 	vmov	d0, r0, r1
 800d4d0:	4770      	bx	lr
 800d4d2:	425b      	negs	r3, r3
 800d4d4:	151b      	asrs	r3, r3, #20
 800d4d6:	2b13      	cmp	r3, #19
 800d4d8:	f04f 0000 	mov.w	r0, #0
 800d4dc:	f04f 0100 	mov.w	r1, #0
 800d4e0:	dc04      	bgt.n	800d4ec <__ulp+0x34>
 800d4e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d4e6:	fa42 f103 	asr.w	r1, r2, r3
 800d4ea:	e7ef      	b.n	800d4cc <__ulp+0x14>
 800d4ec:	3b14      	subs	r3, #20
 800d4ee:	2b1e      	cmp	r3, #30
 800d4f0:	f04f 0201 	mov.w	r2, #1
 800d4f4:	bfda      	itte	le
 800d4f6:	f1c3 031f 	rsble	r3, r3, #31
 800d4fa:	fa02 f303 	lslle.w	r3, r2, r3
 800d4fe:	4613      	movgt	r3, r2
 800d500:	4618      	mov	r0, r3
 800d502:	e7e3      	b.n	800d4cc <__ulp+0x14>
 800d504:	7ff00000 	.word	0x7ff00000

0800d508 <__b2d>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	6905      	ldr	r5, [r0, #16]
 800d50c:	f100 0714 	add.w	r7, r0, #20
 800d510:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d514:	1f2e      	subs	r6, r5, #4
 800d516:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d51a:	4620      	mov	r0, r4
 800d51c:	f7ff fdc4 	bl	800d0a8 <__hi0bits>
 800d520:	f1c0 0320 	rsb	r3, r0, #32
 800d524:	280a      	cmp	r0, #10
 800d526:	600b      	str	r3, [r1, #0]
 800d528:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d5a0 <__b2d+0x98>
 800d52c:	dc14      	bgt.n	800d558 <__b2d+0x50>
 800d52e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d532:	fa24 f10e 	lsr.w	r1, r4, lr
 800d536:	42b7      	cmp	r7, r6
 800d538:	ea41 030c 	orr.w	r3, r1, ip
 800d53c:	bf34      	ite	cc
 800d53e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d542:	2100      	movcs	r1, #0
 800d544:	3015      	adds	r0, #21
 800d546:	fa04 f000 	lsl.w	r0, r4, r0
 800d54a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d54e:	ea40 0201 	orr.w	r2, r0, r1
 800d552:	ec43 2b10 	vmov	d0, r2, r3
 800d556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d558:	42b7      	cmp	r7, r6
 800d55a:	bf3a      	itte	cc
 800d55c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d560:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d564:	2100      	movcs	r1, #0
 800d566:	380b      	subs	r0, #11
 800d568:	d015      	beq.n	800d596 <__b2d+0x8e>
 800d56a:	4084      	lsls	r4, r0
 800d56c:	f1c0 0520 	rsb	r5, r0, #32
 800d570:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d574:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d578:	42be      	cmp	r6, r7
 800d57a:	fa21 fc05 	lsr.w	ip, r1, r5
 800d57e:	ea44 030c 	orr.w	r3, r4, ip
 800d582:	bf8c      	ite	hi
 800d584:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d588:	2400      	movls	r4, #0
 800d58a:	fa01 f000 	lsl.w	r0, r1, r0
 800d58e:	40ec      	lsrs	r4, r5
 800d590:	ea40 0204 	orr.w	r2, r0, r4
 800d594:	e7dd      	b.n	800d552 <__b2d+0x4a>
 800d596:	ea44 030c 	orr.w	r3, r4, ip
 800d59a:	460a      	mov	r2, r1
 800d59c:	e7d9      	b.n	800d552 <__b2d+0x4a>
 800d59e:	bf00      	nop
 800d5a0:	3ff00000 	.word	0x3ff00000

0800d5a4 <__d2b>:
 800d5a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5a8:	460e      	mov	r6, r1
 800d5aa:	2101      	movs	r1, #1
 800d5ac:	ec59 8b10 	vmov	r8, r9, d0
 800d5b0:	4615      	mov	r5, r2
 800d5b2:	f7ff fcb5 	bl	800cf20 <_Balloc>
 800d5b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d5ba:	4607      	mov	r7, r0
 800d5bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5c0:	bb34      	cbnz	r4, 800d610 <__d2b+0x6c>
 800d5c2:	9301      	str	r3, [sp, #4]
 800d5c4:	f1b8 0300 	subs.w	r3, r8, #0
 800d5c8:	d027      	beq.n	800d61a <__d2b+0x76>
 800d5ca:	a802      	add	r0, sp, #8
 800d5cc:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d5d0:	f7ff fd89 	bl	800d0e6 <__lo0bits>
 800d5d4:	9900      	ldr	r1, [sp, #0]
 800d5d6:	b1f0      	cbz	r0, 800d616 <__d2b+0x72>
 800d5d8:	9a01      	ldr	r2, [sp, #4]
 800d5da:	f1c0 0320 	rsb	r3, r0, #32
 800d5de:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e2:	430b      	orrs	r3, r1
 800d5e4:	40c2      	lsrs	r2, r0
 800d5e6:	617b      	str	r3, [r7, #20]
 800d5e8:	9201      	str	r2, [sp, #4]
 800d5ea:	9b01      	ldr	r3, [sp, #4]
 800d5ec:	61bb      	str	r3, [r7, #24]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	bf14      	ite	ne
 800d5f2:	2102      	movne	r1, #2
 800d5f4:	2101      	moveq	r1, #1
 800d5f6:	6139      	str	r1, [r7, #16]
 800d5f8:	b1c4      	cbz	r4, 800d62c <__d2b+0x88>
 800d5fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d5fe:	4404      	add	r4, r0
 800d600:	6034      	str	r4, [r6, #0]
 800d602:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d606:	6028      	str	r0, [r5, #0]
 800d608:	4638      	mov	r0, r7
 800d60a:	b003      	add	sp, #12
 800d60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d614:	e7d5      	b.n	800d5c2 <__d2b+0x1e>
 800d616:	6179      	str	r1, [r7, #20]
 800d618:	e7e7      	b.n	800d5ea <__d2b+0x46>
 800d61a:	a801      	add	r0, sp, #4
 800d61c:	f7ff fd63 	bl	800d0e6 <__lo0bits>
 800d620:	9b01      	ldr	r3, [sp, #4]
 800d622:	617b      	str	r3, [r7, #20]
 800d624:	2101      	movs	r1, #1
 800d626:	6139      	str	r1, [r7, #16]
 800d628:	3020      	adds	r0, #32
 800d62a:	e7e5      	b.n	800d5f8 <__d2b+0x54>
 800d62c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d630:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d634:	6030      	str	r0, [r6, #0]
 800d636:	6918      	ldr	r0, [r3, #16]
 800d638:	f7ff fd36 	bl	800d0a8 <__hi0bits>
 800d63c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d640:	e7e1      	b.n	800d606 <__d2b+0x62>

0800d642 <__ratio>:
 800d642:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d646:	4688      	mov	r8, r1
 800d648:	4669      	mov	r1, sp
 800d64a:	4681      	mov	r9, r0
 800d64c:	f7ff ff5c 	bl	800d508 <__b2d>
 800d650:	a901      	add	r1, sp, #4
 800d652:	4640      	mov	r0, r8
 800d654:	ec57 6b10 	vmov	r6, r7, d0
 800d658:	f7ff ff56 	bl	800d508 <__b2d>
 800d65c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d660:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d664:	eba3 0c02 	sub.w	ip, r3, r2
 800d668:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d66c:	1a9b      	subs	r3, r3, r2
 800d66e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d672:	ec5b ab10 	vmov	sl, fp, d0
 800d676:	2b00      	cmp	r3, #0
 800d678:	bfce      	itee	gt
 800d67a:	463a      	movgt	r2, r7
 800d67c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d680:	465a      	movle	r2, fp
 800d682:	4659      	mov	r1, fp
 800d684:	463d      	mov	r5, r7
 800d686:	bfd4      	ite	le
 800d688:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d68c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d690:	4630      	mov	r0, r6
 800d692:	ee10 2a10 	vmov	r2, s0
 800d696:	460b      	mov	r3, r1
 800d698:	4629      	mov	r1, r5
 800d69a:	f7f3 f8df 	bl	800085c <__aeabi_ddiv>
 800d69e:	ec41 0b10 	vmov	d0, r0, r1
 800d6a2:	b003      	add	sp, #12
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6a8 <__copybits>:
 800d6a8:	3901      	subs	r1, #1
 800d6aa:	b510      	push	{r4, lr}
 800d6ac:	1149      	asrs	r1, r1, #5
 800d6ae:	6914      	ldr	r4, [r2, #16]
 800d6b0:	3101      	adds	r1, #1
 800d6b2:	f102 0314 	add.w	r3, r2, #20
 800d6b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6be:	42a3      	cmp	r3, r4
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	d303      	bcc.n	800d6cc <__copybits+0x24>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	428a      	cmp	r2, r1
 800d6c8:	d305      	bcc.n	800d6d6 <__copybits+0x2e>
 800d6ca:	bd10      	pop	{r4, pc}
 800d6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6d0:	f840 2b04 	str.w	r2, [r0], #4
 800d6d4:	e7f3      	b.n	800d6be <__copybits+0x16>
 800d6d6:	f842 3b04 	str.w	r3, [r2], #4
 800d6da:	e7f4      	b.n	800d6c6 <__copybits+0x1e>

0800d6dc <__any_on>:
 800d6dc:	f100 0214 	add.w	r2, r0, #20
 800d6e0:	6900      	ldr	r0, [r0, #16]
 800d6e2:	114b      	asrs	r3, r1, #5
 800d6e4:	4298      	cmp	r0, r3
 800d6e6:	b510      	push	{r4, lr}
 800d6e8:	db11      	blt.n	800d70e <__any_on+0x32>
 800d6ea:	dd0a      	ble.n	800d702 <__any_on+0x26>
 800d6ec:	f011 011f 	ands.w	r1, r1, #31
 800d6f0:	d007      	beq.n	800d702 <__any_on+0x26>
 800d6f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d6f6:	fa24 f001 	lsr.w	r0, r4, r1
 800d6fa:	fa00 f101 	lsl.w	r1, r0, r1
 800d6fe:	428c      	cmp	r4, r1
 800d700:	d10b      	bne.n	800d71a <__any_on+0x3e>
 800d702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d706:	4293      	cmp	r3, r2
 800d708:	d803      	bhi.n	800d712 <__any_on+0x36>
 800d70a:	2000      	movs	r0, #0
 800d70c:	bd10      	pop	{r4, pc}
 800d70e:	4603      	mov	r3, r0
 800d710:	e7f7      	b.n	800d702 <__any_on+0x26>
 800d712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d716:	2900      	cmp	r1, #0
 800d718:	d0f5      	beq.n	800d706 <__any_on+0x2a>
 800d71a:	2001      	movs	r0, #1
 800d71c:	e7f6      	b.n	800d70c <__any_on+0x30>

0800d71e <_calloc_r>:
 800d71e:	b538      	push	{r3, r4, r5, lr}
 800d720:	fb02 f401 	mul.w	r4, r2, r1
 800d724:	4621      	mov	r1, r4
 800d726:	f000 f857 	bl	800d7d8 <_malloc_r>
 800d72a:	4605      	mov	r5, r0
 800d72c:	b118      	cbz	r0, 800d736 <_calloc_r+0x18>
 800d72e:	4622      	mov	r2, r4
 800d730:	2100      	movs	r1, #0
 800d732:	f7fc fd40 	bl	800a1b6 <memset>
 800d736:	4628      	mov	r0, r5
 800d738:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d73c <_free_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4605      	mov	r5, r0
 800d740:	2900      	cmp	r1, #0
 800d742:	d045      	beq.n	800d7d0 <_free_r+0x94>
 800d744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d748:	1f0c      	subs	r4, r1, #4
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	bfb8      	it	lt
 800d74e:	18e4      	addlt	r4, r4, r3
 800d750:	f000 fa36 	bl	800dbc0 <__malloc_lock>
 800d754:	4a1f      	ldr	r2, [pc, #124]	; (800d7d4 <_free_r+0x98>)
 800d756:	6813      	ldr	r3, [r2, #0]
 800d758:	4610      	mov	r0, r2
 800d75a:	b933      	cbnz	r3, 800d76a <_free_r+0x2e>
 800d75c:	6063      	str	r3, [r4, #4]
 800d75e:	6014      	str	r4, [r2, #0]
 800d760:	4628      	mov	r0, r5
 800d762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d766:	f000 ba2c 	b.w	800dbc2 <__malloc_unlock>
 800d76a:	42a3      	cmp	r3, r4
 800d76c:	d90c      	bls.n	800d788 <_free_r+0x4c>
 800d76e:	6821      	ldr	r1, [r4, #0]
 800d770:	1862      	adds	r2, r4, r1
 800d772:	4293      	cmp	r3, r2
 800d774:	bf04      	itt	eq
 800d776:	681a      	ldreq	r2, [r3, #0]
 800d778:	685b      	ldreq	r3, [r3, #4]
 800d77a:	6063      	str	r3, [r4, #4]
 800d77c:	bf04      	itt	eq
 800d77e:	1852      	addeq	r2, r2, r1
 800d780:	6022      	streq	r2, [r4, #0]
 800d782:	6004      	str	r4, [r0, #0]
 800d784:	e7ec      	b.n	800d760 <_free_r+0x24>
 800d786:	4613      	mov	r3, r2
 800d788:	685a      	ldr	r2, [r3, #4]
 800d78a:	b10a      	cbz	r2, 800d790 <_free_r+0x54>
 800d78c:	42a2      	cmp	r2, r4
 800d78e:	d9fa      	bls.n	800d786 <_free_r+0x4a>
 800d790:	6819      	ldr	r1, [r3, #0]
 800d792:	1858      	adds	r0, r3, r1
 800d794:	42a0      	cmp	r0, r4
 800d796:	d10b      	bne.n	800d7b0 <_free_r+0x74>
 800d798:	6820      	ldr	r0, [r4, #0]
 800d79a:	4401      	add	r1, r0
 800d79c:	1858      	adds	r0, r3, r1
 800d79e:	4282      	cmp	r2, r0
 800d7a0:	6019      	str	r1, [r3, #0]
 800d7a2:	d1dd      	bne.n	800d760 <_free_r+0x24>
 800d7a4:	6810      	ldr	r0, [r2, #0]
 800d7a6:	6852      	ldr	r2, [r2, #4]
 800d7a8:	605a      	str	r2, [r3, #4]
 800d7aa:	4401      	add	r1, r0
 800d7ac:	6019      	str	r1, [r3, #0]
 800d7ae:	e7d7      	b.n	800d760 <_free_r+0x24>
 800d7b0:	d902      	bls.n	800d7b8 <_free_r+0x7c>
 800d7b2:	230c      	movs	r3, #12
 800d7b4:	602b      	str	r3, [r5, #0]
 800d7b6:	e7d3      	b.n	800d760 <_free_r+0x24>
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	1821      	adds	r1, r4, r0
 800d7bc:	428a      	cmp	r2, r1
 800d7be:	bf04      	itt	eq
 800d7c0:	6811      	ldreq	r1, [r2, #0]
 800d7c2:	6852      	ldreq	r2, [r2, #4]
 800d7c4:	6062      	str	r2, [r4, #4]
 800d7c6:	bf04      	itt	eq
 800d7c8:	1809      	addeq	r1, r1, r0
 800d7ca:	6021      	streq	r1, [r4, #0]
 800d7cc:	605c      	str	r4, [r3, #4]
 800d7ce:	e7c7      	b.n	800d760 <_free_r+0x24>
 800d7d0:	bd38      	pop	{r3, r4, r5, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20003bbc 	.word	0x20003bbc

0800d7d8 <_malloc_r>:
 800d7d8:	b570      	push	{r4, r5, r6, lr}
 800d7da:	1ccd      	adds	r5, r1, #3
 800d7dc:	f025 0503 	bic.w	r5, r5, #3
 800d7e0:	3508      	adds	r5, #8
 800d7e2:	2d0c      	cmp	r5, #12
 800d7e4:	bf38      	it	cc
 800d7e6:	250c      	movcc	r5, #12
 800d7e8:	2d00      	cmp	r5, #0
 800d7ea:	4606      	mov	r6, r0
 800d7ec:	db01      	blt.n	800d7f2 <_malloc_r+0x1a>
 800d7ee:	42a9      	cmp	r1, r5
 800d7f0:	d903      	bls.n	800d7fa <_malloc_r+0x22>
 800d7f2:	230c      	movs	r3, #12
 800d7f4:	6033      	str	r3, [r6, #0]
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	bd70      	pop	{r4, r5, r6, pc}
 800d7fa:	f000 f9e1 	bl	800dbc0 <__malloc_lock>
 800d7fe:	4a21      	ldr	r2, [pc, #132]	; (800d884 <_malloc_r+0xac>)
 800d800:	6814      	ldr	r4, [r2, #0]
 800d802:	4621      	mov	r1, r4
 800d804:	b991      	cbnz	r1, 800d82c <_malloc_r+0x54>
 800d806:	4c20      	ldr	r4, [pc, #128]	; (800d888 <_malloc_r+0xb0>)
 800d808:	6823      	ldr	r3, [r4, #0]
 800d80a:	b91b      	cbnz	r3, 800d814 <_malloc_r+0x3c>
 800d80c:	4630      	mov	r0, r6
 800d80e:	f000 f98f 	bl	800db30 <_sbrk_r>
 800d812:	6020      	str	r0, [r4, #0]
 800d814:	4629      	mov	r1, r5
 800d816:	4630      	mov	r0, r6
 800d818:	f000 f98a 	bl	800db30 <_sbrk_r>
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	d124      	bne.n	800d86a <_malloc_r+0x92>
 800d820:	230c      	movs	r3, #12
 800d822:	6033      	str	r3, [r6, #0]
 800d824:	4630      	mov	r0, r6
 800d826:	f000 f9cc 	bl	800dbc2 <__malloc_unlock>
 800d82a:	e7e4      	b.n	800d7f6 <_malloc_r+0x1e>
 800d82c:	680b      	ldr	r3, [r1, #0]
 800d82e:	1b5b      	subs	r3, r3, r5
 800d830:	d418      	bmi.n	800d864 <_malloc_r+0x8c>
 800d832:	2b0b      	cmp	r3, #11
 800d834:	d90f      	bls.n	800d856 <_malloc_r+0x7e>
 800d836:	600b      	str	r3, [r1, #0]
 800d838:	50cd      	str	r5, [r1, r3]
 800d83a:	18cc      	adds	r4, r1, r3
 800d83c:	4630      	mov	r0, r6
 800d83e:	f000 f9c0 	bl	800dbc2 <__malloc_unlock>
 800d842:	f104 000b 	add.w	r0, r4, #11
 800d846:	1d23      	adds	r3, r4, #4
 800d848:	f020 0007 	bic.w	r0, r0, #7
 800d84c:	1ac3      	subs	r3, r0, r3
 800d84e:	d0d3      	beq.n	800d7f8 <_malloc_r+0x20>
 800d850:	425a      	negs	r2, r3
 800d852:	50e2      	str	r2, [r4, r3]
 800d854:	e7d0      	b.n	800d7f8 <_malloc_r+0x20>
 800d856:	428c      	cmp	r4, r1
 800d858:	684b      	ldr	r3, [r1, #4]
 800d85a:	bf16      	itet	ne
 800d85c:	6063      	strne	r3, [r4, #4]
 800d85e:	6013      	streq	r3, [r2, #0]
 800d860:	460c      	movne	r4, r1
 800d862:	e7eb      	b.n	800d83c <_malloc_r+0x64>
 800d864:	460c      	mov	r4, r1
 800d866:	6849      	ldr	r1, [r1, #4]
 800d868:	e7cc      	b.n	800d804 <_malloc_r+0x2c>
 800d86a:	1cc4      	adds	r4, r0, #3
 800d86c:	f024 0403 	bic.w	r4, r4, #3
 800d870:	42a0      	cmp	r0, r4
 800d872:	d005      	beq.n	800d880 <_malloc_r+0xa8>
 800d874:	1a21      	subs	r1, r4, r0
 800d876:	4630      	mov	r0, r6
 800d878:	f000 f95a 	bl	800db30 <_sbrk_r>
 800d87c:	3001      	adds	r0, #1
 800d87e:	d0cf      	beq.n	800d820 <_malloc_r+0x48>
 800d880:	6025      	str	r5, [r4, #0]
 800d882:	e7db      	b.n	800d83c <_malloc_r+0x64>
 800d884:	20003bbc 	.word	0x20003bbc
 800d888:	20003bc0 	.word	0x20003bc0

0800d88c <__ssputs_r>:
 800d88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d890:	688e      	ldr	r6, [r1, #8]
 800d892:	429e      	cmp	r6, r3
 800d894:	4682      	mov	sl, r0
 800d896:	460c      	mov	r4, r1
 800d898:	4690      	mov	r8, r2
 800d89a:	4699      	mov	r9, r3
 800d89c:	d837      	bhi.n	800d90e <__ssputs_r+0x82>
 800d89e:	898a      	ldrh	r2, [r1, #12]
 800d8a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8a4:	d031      	beq.n	800d90a <__ssputs_r+0x7e>
 800d8a6:	6825      	ldr	r5, [r4, #0]
 800d8a8:	6909      	ldr	r1, [r1, #16]
 800d8aa:	1a6f      	subs	r7, r5, r1
 800d8ac:	6965      	ldr	r5, [r4, #20]
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8b4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d8b8:	f109 0301 	add.w	r3, r9, #1
 800d8bc:	443b      	add	r3, r7
 800d8be:	429d      	cmp	r5, r3
 800d8c0:	bf38      	it	cc
 800d8c2:	461d      	movcc	r5, r3
 800d8c4:	0553      	lsls	r3, r2, #21
 800d8c6:	d530      	bpl.n	800d92a <__ssputs_r+0x9e>
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f7ff ff85 	bl	800d7d8 <_malloc_r>
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	b950      	cbnz	r0, 800d8e8 <__ssputs_r+0x5c>
 800d8d2:	230c      	movs	r3, #12
 800d8d4:	f8ca 3000 	str.w	r3, [sl]
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8de:	81a3      	strh	r3, [r4, #12]
 800d8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e8:	463a      	mov	r2, r7
 800d8ea:	6921      	ldr	r1, [r4, #16]
 800d8ec:	f7fc fc58 	bl	800a1a0 <memcpy>
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8fa:	81a3      	strh	r3, [r4, #12]
 800d8fc:	6126      	str	r6, [r4, #16]
 800d8fe:	6165      	str	r5, [r4, #20]
 800d900:	443e      	add	r6, r7
 800d902:	1bed      	subs	r5, r5, r7
 800d904:	6026      	str	r6, [r4, #0]
 800d906:	60a5      	str	r5, [r4, #8]
 800d908:	464e      	mov	r6, r9
 800d90a:	454e      	cmp	r6, r9
 800d90c:	d900      	bls.n	800d910 <__ssputs_r+0x84>
 800d90e:	464e      	mov	r6, r9
 800d910:	4632      	mov	r2, r6
 800d912:	4641      	mov	r1, r8
 800d914:	6820      	ldr	r0, [r4, #0]
 800d916:	f000 f93a 	bl	800db8e <memmove>
 800d91a:	68a3      	ldr	r3, [r4, #8]
 800d91c:	1b9b      	subs	r3, r3, r6
 800d91e:	60a3      	str	r3, [r4, #8]
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	441e      	add	r6, r3
 800d924:	6026      	str	r6, [r4, #0]
 800d926:	2000      	movs	r0, #0
 800d928:	e7dc      	b.n	800d8e4 <__ssputs_r+0x58>
 800d92a:	462a      	mov	r2, r5
 800d92c:	f000 f94a 	bl	800dbc4 <_realloc_r>
 800d930:	4606      	mov	r6, r0
 800d932:	2800      	cmp	r0, #0
 800d934:	d1e2      	bne.n	800d8fc <__ssputs_r+0x70>
 800d936:	6921      	ldr	r1, [r4, #16]
 800d938:	4650      	mov	r0, sl
 800d93a:	f7ff feff 	bl	800d73c <_free_r>
 800d93e:	e7c8      	b.n	800d8d2 <__ssputs_r+0x46>

0800d940 <_svfiprintf_r>:
 800d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d944:	461d      	mov	r5, r3
 800d946:	898b      	ldrh	r3, [r1, #12]
 800d948:	061f      	lsls	r7, r3, #24
 800d94a:	b09d      	sub	sp, #116	; 0x74
 800d94c:	4680      	mov	r8, r0
 800d94e:	460c      	mov	r4, r1
 800d950:	4616      	mov	r6, r2
 800d952:	d50f      	bpl.n	800d974 <_svfiprintf_r+0x34>
 800d954:	690b      	ldr	r3, [r1, #16]
 800d956:	b96b      	cbnz	r3, 800d974 <_svfiprintf_r+0x34>
 800d958:	2140      	movs	r1, #64	; 0x40
 800d95a:	f7ff ff3d 	bl	800d7d8 <_malloc_r>
 800d95e:	6020      	str	r0, [r4, #0]
 800d960:	6120      	str	r0, [r4, #16]
 800d962:	b928      	cbnz	r0, 800d970 <_svfiprintf_r+0x30>
 800d964:	230c      	movs	r3, #12
 800d966:	f8c8 3000 	str.w	r3, [r8]
 800d96a:	f04f 30ff 	mov.w	r0, #4294967295
 800d96e:	e0c8      	b.n	800db02 <_svfiprintf_r+0x1c2>
 800d970:	2340      	movs	r3, #64	; 0x40
 800d972:	6163      	str	r3, [r4, #20]
 800d974:	2300      	movs	r3, #0
 800d976:	9309      	str	r3, [sp, #36]	; 0x24
 800d978:	2320      	movs	r3, #32
 800d97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d97e:	2330      	movs	r3, #48	; 0x30
 800d980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d984:	9503      	str	r5, [sp, #12]
 800d986:	f04f 0b01 	mov.w	fp, #1
 800d98a:	4637      	mov	r7, r6
 800d98c:	463d      	mov	r5, r7
 800d98e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d992:	b10b      	cbz	r3, 800d998 <_svfiprintf_r+0x58>
 800d994:	2b25      	cmp	r3, #37	; 0x25
 800d996:	d13e      	bne.n	800da16 <_svfiprintf_r+0xd6>
 800d998:	ebb7 0a06 	subs.w	sl, r7, r6
 800d99c:	d00b      	beq.n	800d9b6 <_svfiprintf_r+0x76>
 800d99e:	4653      	mov	r3, sl
 800d9a0:	4632      	mov	r2, r6
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	f7ff ff71 	bl	800d88c <__ssputs_r>
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	f000 80a4 	beq.w	800daf8 <_svfiprintf_r+0x1b8>
 800d9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b2:	4453      	add	r3, sl
 800d9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b6:	783b      	ldrb	r3, [r7, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f000 809d 	beq.w	800daf8 <_svfiprintf_r+0x1b8>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9c8:	9304      	str	r3, [sp, #16]
 800d9ca:	9307      	str	r3, [sp, #28]
 800d9cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9d0:	931a      	str	r3, [sp, #104]	; 0x68
 800d9d2:	462f      	mov	r7, r5
 800d9d4:	2205      	movs	r2, #5
 800d9d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d9da:	4850      	ldr	r0, [pc, #320]	; (800db1c <_svfiprintf_r+0x1dc>)
 800d9dc:	f7f2 fc08 	bl	80001f0 <memchr>
 800d9e0:	9b04      	ldr	r3, [sp, #16]
 800d9e2:	b9d0      	cbnz	r0, 800da1a <_svfiprintf_r+0xda>
 800d9e4:	06d9      	lsls	r1, r3, #27
 800d9e6:	bf44      	itt	mi
 800d9e8:	2220      	movmi	r2, #32
 800d9ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d9ee:	071a      	lsls	r2, r3, #28
 800d9f0:	bf44      	itt	mi
 800d9f2:	222b      	movmi	r2, #43	; 0x2b
 800d9f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d9f8:	782a      	ldrb	r2, [r5, #0]
 800d9fa:	2a2a      	cmp	r2, #42	; 0x2a
 800d9fc:	d015      	beq.n	800da2a <_svfiprintf_r+0xea>
 800d9fe:	9a07      	ldr	r2, [sp, #28]
 800da00:	462f      	mov	r7, r5
 800da02:	2000      	movs	r0, #0
 800da04:	250a      	movs	r5, #10
 800da06:	4639      	mov	r1, r7
 800da08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da0c:	3b30      	subs	r3, #48	; 0x30
 800da0e:	2b09      	cmp	r3, #9
 800da10:	d94d      	bls.n	800daae <_svfiprintf_r+0x16e>
 800da12:	b1b8      	cbz	r0, 800da44 <_svfiprintf_r+0x104>
 800da14:	e00f      	b.n	800da36 <_svfiprintf_r+0xf6>
 800da16:	462f      	mov	r7, r5
 800da18:	e7b8      	b.n	800d98c <_svfiprintf_r+0x4c>
 800da1a:	4a40      	ldr	r2, [pc, #256]	; (800db1c <_svfiprintf_r+0x1dc>)
 800da1c:	1a80      	subs	r0, r0, r2
 800da1e:	fa0b f000 	lsl.w	r0, fp, r0
 800da22:	4318      	orrs	r0, r3
 800da24:	9004      	str	r0, [sp, #16]
 800da26:	463d      	mov	r5, r7
 800da28:	e7d3      	b.n	800d9d2 <_svfiprintf_r+0x92>
 800da2a:	9a03      	ldr	r2, [sp, #12]
 800da2c:	1d11      	adds	r1, r2, #4
 800da2e:	6812      	ldr	r2, [r2, #0]
 800da30:	9103      	str	r1, [sp, #12]
 800da32:	2a00      	cmp	r2, #0
 800da34:	db01      	blt.n	800da3a <_svfiprintf_r+0xfa>
 800da36:	9207      	str	r2, [sp, #28]
 800da38:	e004      	b.n	800da44 <_svfiprintf_r+0x104>
 800da3a:	4252      	negs	r2, r2
 800da3c:	f043 0302 	orr.w	r3, r3, #2
 800da40:	9207      	str	r2, [sp, #28]
 800da42:	9304      	str	r3, [sp, #16]
 800da44:	783b      	ldrb	r3, [r7, #0]
 800da46:	2b2e      	cmp	r3, #46	; 0x2e
 800da48:	d10c      	bne.n	800da64 <_svfiprintf_r+0x124>
 800da4a:	787b      	ldrb	r3, [r7, #1]
 800da4c:	2b2a      	cmp	r3, #42	; 0x2a
 800da4e:	d133      	bne.n	800dab8 <_svfiprintf_r+0x178>
 800da50:	9b03      	ldr	r3, [sp, #12]
 800da52:	1d1a      	adds	r2, r3, #4
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	9203      	str	r2, [sp, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bfb8      	it	lt
 800da5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800da60:	3702      	adds	r7, #2
 800da62:	9305      	str	r3, [sp, #20]
 800da64:	4d2e      	ldr	r5, [pc, #184]	; (800db20 <_svfiprintf_r+0x1e0>)
 800da66:	7839      	ldrb	r1, [r7, #0]
 800da68:	2203      	movs	r2, #3
 800da6a:	4628      	mov	r0, r5
 800da6c:	f7f2 fbc0 	bl	80001f0 <memchr>
 800da70:	b138      	cbz	r0, 800da82 <_svfiprintf_r+0x142>
 800da72:	2340      	movs	r3, #64	; 0x40
 800da74:	1b40      	subs	r0, r0, r5
 800da76:	fa03 f000 	lsl.w	r0, r3, r0
 800da7a:	9b04      	ldr	r3, [sp, #16]
 800da7c:	4303      	orrs	r3, r0
 800da7e:	3701      	adds	r7, #1
 800da80:	9304      	str	r3, [sp, #16]
 800da82:	7839      	ldrb	r1, [r7, #0]
 800da84:	4827      	ldr	r0, [pc, #156]	; (800db24 <_svfiprintf_r+0x1e4>)
 800da86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da8a:	2206      	movs	r2, #6
 800da8c:	1c7e      	adds	r6, r7, #1
 800da8e:	f7f2 fbaf 	bl	80001f0 <memchr>
 800da92:	2800      	cmp	r0, #0
 800da94:	d038      	beq.n	800db08 <_svfiprintf_r+0x1c8>
 800da96:	4b24      	ldr	r3, [pc, #144]	; (800db28 <_svfiprintf_r+0x1e8>)
 800da98:	bb13      	cbnz	r3, 800dae0 <_svfiprintf_r+0x1a0>
 800da9a:	9b03      	ldr	r3, [sp, #12]
 800da9c:	3307      	adds	r3, #7
 800da9e:	f023 0307 	bic.w	r3, r3, #7
 800daa2:	3308      	adds	r3, #8
 800daa4:	9303      	str	r3, [sp, #12]
 800daa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daa8:	444b      	add	r3, r9
 800daaa:	9309      	str	r3, [sp, #36]	; 0x24
 800daac:	e76d      	b.n	800d98a <_svfiprintf_r+0x4a>
 800daae:	fb05 3202 	mla	r2, r5, r2, r3
 800dab2:	2001      	movs	r0, #1
 800dab4:	460f      	mov	r7, r1
 800dab6:	e7a6      	b.n	800da06 <_svfiprintf_r+0xc6>
 800dab8:	2300      	movs	r3, #0
 800daba:	3701      	adds	r7, #1
 800dabc:	9305      	str	r3, [sp, #20]
 800dabe:	4619      	mov	r1, r3
 800dac0:	250a      	movs	r5, #10
 800dac2:	4638      	mov	r0, r7
 800dac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dac8:	3a30      	subs	r2, #48	; 0x30
 800daca:	2a09      	cmp	r2, #9
 800dacc:	d903      	bls.n	800dad6 <_svfiprintf_r+0x196>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d0c8      	beq.n	800da64 <_svfiprintf_r+0x124>
 800dad2:	9105      	str	r1, [sp, #20]
 800dad4:	e7c6      	b.n	800da64 <_svfiprintf_r+0x124>
 800dad6:	fb05 2101 	mla	r1, r5, r1, r2
 800dada:	2301      	movs	r3, #1
 800dadc:	4607      	mov	r7, r0
 800dade:	e7f0      	b.n	800dac2 <_svfiprintf_r+0x182>
 800dae0:	ab03      	add	r3, sp, #12
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	4622      	mov	r2, r4
 800dae6:	4b11      	ldr	r3, [pc, #68]	; (800db2c <_svfiprintf_r+0x1ec>)
 800dae8:	a904      	add	r1, sp, #16
 800daea:	4640      	mov	r0, r8
 800daec:	f7fc fc00 	bl	800a2f0 <_printf_float>
 800daf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800daf4:	4681      	mov	r9, r0
 800daf6:	d1d6      	bne.n	800daa6 <_svfiprintf_r+0x166>
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	065b      	lsls	r3, r3, #25
 800dafc:	f53f af35 	bmi.w	800d96a <_svfiprintf_r+0x2a>
 800db00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db02:	b01d      	add	sp, #116	; 0x74
 800db04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db08:	ab03      	add	r3, sp, #12
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	4622      	mov	r2, r4
 800db0e:	4b07      	ldr	r3, [pc, #28]	; (800db2c <_svfiprintf_r+0x1ec>)
 800db10:	a904      	add	r1, sp, #16
 800db12:	4640      	mov	r0, r8
 800db14:	f7fc fea2 	bl	800a85c <_printf_i>
 800db18:	e7ea      	b.n	800daf0 <_svfiprintf_r+0x1b0>
 800db1a:	bf00      	nop
 800db1c:	0800defc 	.word	0x0800defc
 800db20:	0800df02 	.word	0x0800df02
 800db24:	0800df06 	.word	0x0800df06
 800db28:	0800a2f1 	.word	0x0800a2f1
 800db2c:	0800d88d 	.word	0x0800d88d

0800db30 <_sbrk_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4c06      	ldr	r4, [pc, #24]	; (800db4c <_sbrk_r+0x1c>)
 800db34:	2300      	movs	r3, #0
 800db36:	4605      	mov	r5, r0
 800db38:	4608      	mov	r0, r1
 800db3a:	6023      	str	r3, [r4, #0]
 800db3c:	f7f4 f9a4 	bl	8001e88 <_sbrk>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	d102      	bne.n	800db4a <_sbrk_r+0x1a>
 800db44:	6823      	ldr	r3, [r4, #0]
 800db46:	b103      	cbz	r3, 800db4a <_sbrk_r+0x1a>
 800db48:	602b      	str	r3, [r5, #0]
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	20003c48 	.word	0x20003c48

0800db50 <strncmp>:
 800db50:	b510      	push	{r4, lr}
 800db52:	b16a      	cbz	r2, 800db70 <strncmp+0x20>
 800db54:	3901      	subs	r1, #1
 800db56:	1884      	adds	r4, r0, r2
 800db58:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db60:	4293      	cmp	r3, r2
 800db62:	d103      	bne.n	800db6c <strncmp+0x1c>
 800db64:	42a0      	cmp	r0, r4
 800db66:	d001      	beq.n	800db6c <strncmp+0x1c>
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1f5      	bne.n	800db58 <strncmp+0x8>
 800db6c:	1a98      	subs	r0, r3, r2
 800db6e:	bd10      	pop	{r4, pc}
 800db70:	4610      	mov	r0, r2
 800db72:	e7fc      	b.n	800db6e <strncmp+0x1e>

0800db74 <__ascii_wctomb>:
 800db74:	b149      	cbz	r1, 800db8a <__ascii_wctomb+0x16>
 800db76:	2aff      	cmp	r2, #255	; 0xff
 800db78:	bf85      	ittet	hi
 800db7a:	238a      	movhi	r3, #138	; 0x8a
 800db7c:	6003      	strhi	r3, [r0, #0]
 800db7e:	700a      	strbls	r2, [r1, #0]
 800db80:	f04f 30ff 	movhi.w	r0, #4294967295
 800db84:	bf98      	it	ls
 800db86:	2001      	movls	r0, #1
 800db88:	4770      	bx	lr
 800db8a:	4608      	mov	r0, r1
 800db8c:	4770      	bx	lr

0800db8e <memmove>:
 800db8e:	4288      	cmp	r0, r1
 800db90:	b510      	push	{r4, lr}
 800db92:	eb01 0302 	add.w	r3, r1, r2
 800db96:	d807      	bhi.n	800dba8 <memmove+0x1a>
 800db98:	1e42      	subs	r2, r0, #1
 800db9a:	4299      	cmp	r1, r3
 800db9c:	d00a      	beq.n	800dbb4 <memmove+0x26>
 800db9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dba2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dba6:	e7f8      	b.n	800db9a <memmove+0xc>
 800dba8:	4283      	cmp	r3, r0
 800dbaa:	d9f5      	bls.n	800db98 <memmove+0xa>
 800dbac:	1881      	adds	r1, r0, r2
 800dbae:	1ad2      	subs	r2, r2, r3
 800dbb0:	42d3      	cmn	r3, r2
 800dbb2:	d100      	bne.n	800dbb6 <memmove+0x28>
 800dbb4:	bd10      	pop	{r4, pc}
 800dbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dbbe:	e7f7      	b.n	800dbb0 <memmove+0x22>

0800dbc0 <__malloc_lock>:
 800dbc0:	4770      	bx	lr

0800dbc2 <__malloc_unlock>:
 800dbc2:	4770      	bx	lr

0800dbc4 <_realloc_r>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	4607      	mov	r7, r0
 800dbc8:	4614      	mov	r4, r2
 800dbca:	460e      	mov	r6, r1
 800dbcc:	b921      	cbnz	r1, 800dbd8 <_realloc_r+0x14>
 800dbce:	4611      	mov	r1, r2
 800dbd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbd4:	f7ff be00 	b.w	800d7d8 <_malloc_r>
 800dbd8:	b922      	cbnz	r2, 800dbe4 <_realloc_r+0x20>
 800dbda:	f7ff fdaf 	bl	800d73c <_free_r>
 800dbde:	4625      	mov	r5, r4
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe4:	f000 f814 	bl	800dc10 <_malloc_usable_size_r>
 800dbe8:	42a0      	cmp	r0, r4
 800dbea:	d20f      	bcs.n	800dc0c <_realloc_r+0x48>
 800dbec:	4621      	mov	r1, r4
 800dbee:	4638      	mov	r0, r7
 800dbf0:	f7ff fdf2 	bl	800d7d8 <_malloc_r>
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d0f2      	beq.n	800dbe0 <_realloc_r+0x1c>
 800dbfa:	4631      	mov	r1, r6
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	f7fc facf 	bl	800a1a0 <memcpy>
 800dc02:	4631      	mov	r1, r6
 800dc04:	4638      	mov	r0, r7
 800dc06:	f7ff fd99 	bl	800d73c <_free_r>
 800dc0a:	e7e9      	b.n	800dbe0 <_realloc_r+0x1c>
 800dc0c:	4635      	mov	r5, r6
 800dc0e:	e7e7      	b.n	800dbe0 <_realloc_r+0x1c>

0800dc10 <_malloc_usable_size_r>:
 800dc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc14:	1f18      	subs	r0, r3, #4
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bfbc      	itt	lt
 800dc1a:	580b      	ldrlt	r3, [r1, r0]
 800dc1c:	18c0      	addlt	r0, r0, r3
 800dc1e:	4770      	bx	lr

0800dc20 <_init>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	bf00      	nop
 800dc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc26:	bc08      	pop	{r3}
 800dc28:	469e      	mov	lr, r3
 800dc2a:	4770      	bx	lr

0800dc2c <_fini>:
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2e:	bf00      	nop
 800dc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc32:	bc08      	pop	{r3}
 800dc34:	469e      	mov	lr, r3
 800dc36:	4770      	bx	lr
