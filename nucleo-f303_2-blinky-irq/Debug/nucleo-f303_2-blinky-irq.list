
nucleo-f303_2-blinky-irq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f8  080036f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036f8  080036f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036f8  080036f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08003770  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003770  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f4a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001785  00000000  00000000  00028fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  0002a770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002ae80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d851  00000000  00000000  0002b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e2b  00000000  00000000  00048d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a89a7  00000000  00000000  0004fb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f84eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d8  00000000  00000000  000f8568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003634 	.word	0x08003634

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003634 	.word	0x08003634

080001d4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d002      	beq.n	80001ec <_write+0x18>
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	d110      	bne.n	800020e <_write+0x3a>
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	68b9      	ldr	r1, [r7, #8]
 80001f6:	480b      	ldr	r0, [pc, #44]	; (8000224 <_write+0x50>)
 80001f8:	f002 f972 	bl	80024e0 <HAL_UART_Transmit>
 80001fc:	4603      	mov	r3, r0
 80001fe:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000200:	7dfb      	ldrb	r3, [r7, #23]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d101      	bne.n	800020a <_write+0x36>
      return len;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	e008      	b.n	800021c <_write+0x48>
    else
      return EIO;
 800020a:	2305      	movs	r3, #5
 800020c:	e006      	b.n	800021c <_write+0x48>
  }
  errno = EBADF;
 800020e:	f002 fd77 	bl	8002d00 <__errno>
 8000212:	4602      	mov	r2, r0
 8000214:	2309      	movs	r3, #9
 8000216:	6013      	str	r3, [r2, #0]
  return -1;
 8000218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800021c:	4618      	mov	r0, r3
 800021e:	3718      	adds	r7, #24
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	2000009c 	.word	0x2000009c

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 fa76 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f80e 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f89a 	bl	800036c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f868 	bl	800030c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello, World!\r\n");
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <main+0x24>)
 800023e:	f002 fded 	bl	8002e1c <puts>
	  HAL_Delay( 1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000246:	f000 facf 	bl	80007e8 <HAL_Delay>
	  printf("Hello, World!\r\n");
 800024a:	e7f7      	b.n	800023c <main+0x14>
 800024c:	0800364c 	.word	0x0800364c

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b0a6      	sub	sp, #152	; 0x98
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fd78 	bl	8002d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2258      	movs	r2, #88	; 0x58
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fd6a 	bl	8002d54 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	2302      	movs	r3, #2
 8000282:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000288:	2310      	movs	r3, #16
 800028a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fd5e 	bl	8000d70 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ba:	f000 f8bf 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2302      	movs	r3, #2
 80002c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fc5e 	bl	8001b9c <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002e6:	f000 f8a9 	bl	800043c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fe87 	bl	8002008 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000300:	f000 f89c 	bl	800043c <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3798      	adds	r7, #152	; 0x98
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <MX_USART2_UART_Init+0x5c>)
 8000314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000350:	f002 f878 	bl	8002444 <HAL_UART_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800035a:	f000 f86f 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000009c 	.word	0x2000009c
 8000368:	40004400 	.word	0x40004400

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a2a      	ldr	r2, [pc, #168]	; (8000430 <MX_GPIO_Init+0xc4>)
 8000388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b28      	ldr	r3, [pc, #160]	; (8000430 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a24      	ldr	r2, [pc, #144]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a1e      	ldr	r2, [pc, #120]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a18      	ldr	r2, [pc, #96]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2120      	movs	r1, #32
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f000 fc8f 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_GPIO_Init+0xc8>)
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4619      	mov	r1, r3
 8000402:	480d      	ldr	r0, [pc, #52]	; (8000438 <MX_GPIO_Init+0xcc>)
 8000404:	f000 faf8 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000408:	2320      	movs	r3, #32
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000414:	2300      	movs	r3, #0
 8000416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000422:	f000 fae9 	bl	80009f8 <HAL_GPIO_Init>

}
 8000426:	bf00      	nop
 8000428:	3728      	adds	r7, #40	; 0x28
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000
 8000434:	10210000 	.word	0x10210000
 8000438:	48000800 	.word	0x48000800

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x44>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x44>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x44>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <HAL_MspInit+0x44>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a08      	ldr	r2, [pc, #32]	; (8000490 <HAL_MspInit+0x44>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <HAL_MspInit+0x44>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000482:	2007      	movs	r0, #7
 8000484:	f000 fa84 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a17      	ldr	r2, [pc, #92]	; (8000510 <HAL_UART_MspInit+0x7c>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d128      	bne.n	8000508 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <HAL_UART_MspInit+0x80>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a16      	ldr	r2, [pc, #88]	; (8000514 <HAL_UART_MspInit+0x80>)
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <HAL_UART_MspInit+0x80>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <HAL_UART_MspInit+0x80>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a10      	ldr	r2, [pc, #64]	; (8000514 <HAL_UART_MspInit+0x80>)
 80004d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_UART_MspInit+0x80>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004e6:	230c      	movs	r3, #12
 80004e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	2300      	movs	r3, #0
 80004f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004f6:	2307      	movs	r3, #7
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 fa78 	bl	80009f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000508:	bf00      	nop
 800050a:	3728      	adds	r7, #40	; 0x28
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40004400 	.word	0x40004400
 8000514:	40021000 	.word	0x40021000

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <HardFault_Handler+0x4>

0800052c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <MemManage_Handler+0x4>

08000532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <UsageFault_Handler+0x4>

0800053e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
// lisätty staattinen! muuttuja count ja alustettu se nollaksi
// count laskee alaspäin 100 -> 0 ja alustuu alivuodosta uudelleen =100
// aina kun alivoto niin vaihdetaan ledipinnin tilaa -> ledi vilkkuu

static uint16_t count = 0;
	if (count) count--;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <SysTick_Handler+0x34>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d006      	beq.n	8000582 <SysTick_Handler+0x1a>
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <SysTick_Handler+0x34>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	3b01      	subs	r3, #1
 800057a:	b29a      	uxth	r2, r3
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <SysTick_Handler+0x34>)
 800057e:	801a      	strh	r2, [r3, #0]
 8000580:	e007      	b.n	8000592 <SysTick_Handler+0x2a>
	else {
		count = 100;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <SysTick_Handler+0x34>)
 8000584:	2264      	movs	r2, #100	; 0x64
 8000586:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000588:	2120      	movs	r1, #32
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fbd5 	bl	8000d3c <HAL_GPIO_TogglePin>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000592:	f000 f909 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000008c 	.word	0x2000008c

080005a0 <_read>:
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	e00a      	b.n	80005c8 <_read+0x28>
 80005b2:	f3af 8000 	nop.w
 80005b6:	4601      	mov	r1, r0
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	60ba      	str	r2, [r7, #8]
 80005be:	b2ca      	uxtb	r2, r1
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	3301      	adds	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697a      	ldr	r2, [r7, #20]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	dbf0      	blt.n	80005b2 <_read+0x12>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4618      	mov	r0, r3
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_close>:
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <_fstat>:
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	2300      	movs	r3, #0
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <_isatty>:
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	2301      	movs	r3, #1
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <_lseek>:
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	2300      	movs	r3, #0
 8000636:	4618      	mov	r0, r3
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <_sbrk>:
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_sbrk+0x50>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x16>
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <_sbrk+0x50>)
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <_sbrk+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <_sbrk+0x50>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <_sbrk+0x50>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	466a      	mov	r2, sp
 800066a:	4293      	cmp	r3, r2
 800066c:	d907      	bls.n	800067e <_sbrk+0x3a>
 800066e:	f002 fb47 	bl	8002d00 <__errno>
 8000672:	4602      	mov	r2, r0
 8000674:	230c      	movs	r3, #12
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	e006      	b.n	800068c <_sbrk+0x48>
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <_sbrk+0x50>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a03      	ldr	r2, [pc, #12]	; (8000694 <_sbrk+0x50>)
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000090 	.word	0x20000090
 8000698:	20000128 	.word	0x20000128

0800069c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <SystemInit+0x28>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <SystemInit+0x28>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <SystemInit+0x28>)
 80006b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006b6:	609a      	str	r2, [r3, #8]
#endif
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Reset_Handler>:
 80006c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000700 <LoopForever+0x2>
 80006cc:	2100      	movs	r1, #0
 80006ce:	e003      	b.n	80006d8 <LoopCopyDataInit>

080006d0 <CopyDataInit>:
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <LoopForever+0x6>)
 80006d2:	585b      	ldr	r3, [r3, r1]
 80006d4:	5043      	str	r3, [r0, r1]
 80006d6:	3104      	adds	r1, #4

080006d8 <LoopCopyDataInit>:
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <LoopForever+0xa>)
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <LoopForever+0xe>)
 80006dc:	1842      	adds	r2, r0, r1
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3f6      	bcc.n	80006d0 <CopyDataInit>
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <LoopForever+0x12>)
 80006e4:	e002      	b.n	80006ec <LoopFillZerobss>

080006e6 <FillZerobss>:
 80006e6:	2300      	movs	r3, #0
 80006e8:	f842 3b04 	str.w	r3, [r2], #4

080006ec <LoopFillZerobss>:
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <LoopForever+0x16>)
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d3f9      	bcc.n	80006e6 <FillZerobss>
 80006f2:	f7ff ffd3 	bl	800069c <SystemInit>
 80006f6:	f002 fb09 	bl	8002d0c <__libc_init_array>
 80006fa:	f7ff fd95 	bl	8000228 <main>

080006fe <LoopForever>:
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
 8000700:	20010000 	.word	0x20010000
 8000704:	08003700 	.word	0x08003700
 8000708:	20000000 	.word	0x20000000
 800070c:	20000070 	.word	0x20000070
 8000710:	20000070 	.word	0x20000070
 8000714:	20000124 	.word	0x20000124

08000718 <ADC1_2_IRQHandler>:
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f92f 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fe88 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f939 	bl	80009de <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f90f 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x20>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_IncTick+0x24>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	2000011c 	.word	0x2000011c

080007d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_GetTick+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000011c 	.word	0x2000011c

080007e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f0:	f7ff ffee 	bl	80007d0 <HAL_GetTick>
 80007f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d005      	beq.n	800080e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_Delay+0x40>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800080e:	bf00      	nop
 8000810:	f7ff ffde 	bl	80007d0 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8f7      	bhi.n	8000810 <HAL_Delay+0x28>
  {
  }
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000008 	.word	0x20000008

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff8e 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff47 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff5c 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff8e 	bl	80008e4 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5d 	bl	8000890 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffb0 	bl	800094c <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a06:	e160      	b.n	8000cca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	fa01 f303 	lsl.w	r3, r1, r3
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8152 	beq.w	8000cc4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x38>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2b12      	cmp	r3, #18
 8000a2e:	d123      	bne.n	8000a78 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	08da      	lsrs	r2, r3, #3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3208      	adds	r2, #8
 8000a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	220f      	movs	r2, #15
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	691a      	ldr	r2, [r3, #16]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	08da      	lsrs	r2, r3, #3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3208      	adds	r2, #8
 8000a72:	6939      	ldr	r1, [r7, #16]
 8000a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0203 	and.w	r2, r3, #3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d00b      	beq.n	8000acc <HAL_GPIO_Init+0xd4>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d007      	beq.n	8000acc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac0:	2b11      	cmp	r3, #17
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b12      	cmp	r3, #18
 8000aca:	d130      	bne.n	8000b2e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b02:	2201      	movs	r2, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	f003 0201 	and.w	r2, r3, #1
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80ac 	beq.w	8000cc4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a5d      	ldr	r2, [pc, #372]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b84:	4a59      	ldr	r2, [pc, #356]	; (8000cec <HAL_GPIO_Init+0x2f4>)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bae:	d025      	beq.n	8000bfc <HAL_GPIO_Init+0x204>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a4f      	ldr	r2, [pc, #316]	; (8000cf0 <HAL_GPIO_Init+0x2f8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d01f      	beq.n	8000bf8 <HAL_GPIO_Init+0x200>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a4e      	ldr	r2, [pc, #312]	; (8000cf4 <HAL_GPIO_Init+0x2fc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d019      	beq.n	8000bf4 <HAL_GPIO_Init+0x1fc>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a4d      	ldr	r2, [pc, #308]	; (8000cf8 <HAL_GPIO_Init+0x300>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d013      	beq.n	8000bf0 <HAL_GPIO_Init+0x1f8>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a4c      	ldr	r2, [pc, #304]	; (8000cfc <HAL_GPIO_Init+0x304>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00d      	beq.n	8000bec <HAL_GPIO_Init+0x1f4>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a4b      	ldr	r2, [pc, #300]	; (8000d00 <HAL_GPIO_Init+0x308>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <HAL_GPIO_Init+0x1f0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a4a      	ldr	r2, [pc, #296]	; (8000d04 <HAL_GPIO_Init+0x30c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d101      	bne.n	8000be4 <HAL_GPIO_Init+0x1ec>
 8000be0:	2306      	movs	r3, #6
 8000be2:	e00c      	b.n	8000bfe <HAL_GPIO_Init+0x206>
 8000be4:	2307      	movs	r3, #7
 8000be6:	e00a      	b.n	8000bfe <HAL_GPIO_Init+0x206>
 8000be8:	2305      	movs	r3, #5
 8000bea:	e008      	b.n	8000bfe <HAL_GPIO_Init+0x206>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x206>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e004      	b.n	8000bfe <HAL_GPIO_Init+0x206>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_Init+0x206>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <HAL_GPIO_Init+0x206>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	f002 0203 	and.w	r2, r2, #3
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	4093      	lsls	r3, r2
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0e:	4937      	ldr	r1, [pc, #220]	; (8000cec <HAL_GPIO_Init+0x2f4>)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3302      	adds	r3, #2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <HAL_GPIO_Init+0x310>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c40:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <HAL_GPIO_Init+0x310>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <HAL_GPIO_Init+0x310>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6a:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <HAL_GPIO_Init+0x310>)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_GPIO_Init+0x310>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_GPIO_Init+0x310>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_GPIO_Init+0x310>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_GPIO_Init+0x310>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f47f ae97 	bne.w	8000a08 <HAL_GPIO_Init+0x10>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	48000c00 	.word	0x48000c00
 8000cfc:	48001000 	.word	0x48001000
 8000d00:	48001400 	.word	0x48001400
 8000d04:	48001800 	.word	0x48001800
 8000d08:	40010400 	.word	0x40010400

08000d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d1c:	787b      	ldrb	r3, [r7, #1]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d28:	e002      	b.n	8000d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	041a      	lsls	r2, r3, #16
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	619a      	str	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f000 bf01 	b.w	8001b8c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 8160 	beq.w	800105a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d9a:	4bae      	ldr	r3, [pc, #696]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d00c      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da6:	4bab      	ldr	r3, [pc, #684]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d159      	bne.n	8000e66 <HAL_RCC_OscConfig+0xf6>
 8000db2:	4ba8      	ldr	r3, [pc, #672]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbe:	d152      	bne.n	8000e66 <HAL_RCC_OscConfig+0xf6>
 8000dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000dcc:	fa93 f3a3 	rbit	r3, r3
 8000dd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d102      	bne.n	8000df2 <HAL_RCC_OscConfig+0x82>
 8000dec:	4b99      	ldr	r3, [pc, #612]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	e015      	b.n	8000e1e <HAL_RCC_OscConfig+0xae>
 8000df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e12:	fa93 f3a3 	rbit	r3, r3
 8000e16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e1a:	4b8e      	ldr	r3, [pc, #568]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e22:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e26:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e2a:	fa92 f2a2 	rbit	r2, r2
 8000e2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	f042 0220 	orr.w	r2, r2, #32
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	f002 021f 	and.w	r2, r2, #31
 8000e46:	2101      	movs	r1, #1
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8102 	beq.w	8001058 <HAL_RCC_OscConfig+0x2e8>
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 80fc 	bne.w	8001058 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f000 be93 	b.w	8001b8c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e70:	d106      	bne.n	8000e80 <HAL_RCC_OscConfig+0x110>
 8000e72:	4b78      	ldr	r3, [pc, #480]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a77      	ldr	r2, [pc, #476]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e030      	b.n	8000ee2 <HAL_RCC_OscConfig+0x172>
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x134>
 8000e8a:	4b72      	ldr	r3, [pc, #456]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a71      	ldr	r2, [pc, #452]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b6f      	ldr	r3, [pc, #444]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a6e      	ldr	r2, [pc, #440]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e01e      	b.n	8000ee2 <HAL_RCC_OscConfig+0x172>
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eae:	d10c      	bne.n	8000eca <HAL_RCC_OscConfig+0x15a>
 8000eb0:	4b68      	ldr	r3, [pc, #416]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a67      	ldr	r2, [pc, #412]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000eb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b65      	ldr	r3, [pc, #404]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a64      	ldr	r2, [pc, #400]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e00b      	b.n	8000ee2 <HAL_RCC_OscConfig+0x172>
 8000eca:	4b62      	ldr	r3, [pc, #392]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a61      	ldr	r2, [pc, #388]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b5f      	ldr	r3, [pc, #380]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a5e      	ldr	r2, [pc, #376]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d059      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc70 	bl	80007d0 <HAL_GetTick>
 8000ef0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fc6b 	bl	80007d0 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	d902      	bls.n	8000f0c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f000 be40 	b.w	8001b8c <HAL_RCC_OscConfig+0xe1c>
 8000f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f10:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f20:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d102      	bne.n	8000f3e <HAL_RCC_OscConfig+0x1ce>
 8000f38:	4b46      	ldr	r3, [pc, #280]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	e015      	b.n	8000f6a <HAL_RCC_OscConfig+0x1fa>
 8000f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f42:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f56:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f5a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f66:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f6e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f76:	fa92 f2a2 	rbit	r2, r2
 8000f7a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f7e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f82:	fab2 f282 	clz	r2, r2
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	f042 0220 	orr.w	r2, r2, #32
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	f002 021f 	and.w	r2, r2, #31
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0ab      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x186>
 8000f9e:	e05c      	b.n	800105a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fc16 	bl	80007d0 <HAL_GetTick>
 8000fa4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa8:	e00a      	b.n	8000fc0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000faa:	f7ff fc11 	bl	80007d0 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d902      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	f000 bde6 	b.w	8001b8c <HAL_RCC_OscConfig+0xe1c>
 8000fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000fd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d102      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x282>
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	e015      	b.n	800101e <HAL_RCC_OscConfig+0x2ae>
 8000ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800100e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_RCC_OscConfig+0x2e4>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001022:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001026:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800102a:	fa92 f2a2 	rbit	r2, r2
 800102e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001032:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	f042 0220 	orr.w	r2, r2, #32
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	f002 021f 	and.w	r2, r2, #31
 8001046:	2101      	movs	r1, #1
 8001048:	fa01 f202 	lsl.w	r2, r1, r2
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1ab      	bne.n	8000faa <HAL_RCC_OscConfig+0x23a>
 8001052:	e002      	b.n	800105a <HAL_RCC_OscConfig+0x2ea>
 8001054:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 8170 	beq.w	800134a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800106a:	4bd0      	ldr	r3, [pc, #832]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00c      	beq.n	8001090 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001076:	4bcd      	ldr	r3, [pc, #820]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b08      	cmp	r3, #8
 8001080:	d16d      	bne.n	800115e <HAL_RCC_OscConfig+0x3ee>
 8001082:	4bca      	ldr	r3, [pc, #808]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800108a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800108e:	d166      	bne.n	800115e <HAL_RCC_OscConfig+0x3ee>
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d102      	bne.n	80010c0 <HAL_RCC_OscConfig+0x350>
 80010ba:	4bbc      	ldr	r3, [pc, #752]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	e013      	b.n	80010e8 <HAL_RCC_OscConfig+0x378>
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010e4:	4bb1      	ldr	r3, [pc, #708]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	2202      	movs	r2, #2
 80010ea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010ee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010f2:	fa92 f2a2 	rbit	r2, r2
 80010f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80010fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010fe:	fab2 f282 	clz	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	f042 0220 	orr.w	r2, r2, #32
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f002 021f 	and.w	r2, r2, #31
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <HAL_RCC_OscConfig+0x3ba>
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d002      	beq.n	800112a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	f000 bd31 	b.w	8001b8c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	4ba0      	ldr	r3, [pc, #640]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	21f8      	movs	r1, #248	; 0xf8
 800113a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001142:	fa91 f1a1 	rbit	r1, r1
 8001146:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800114a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800114e:	fab1 f181 	clz	r1, r1
 8001152:	b2c9      	uxtb	r1, r1
 8001154:	408b      	lsls	r3, r1
 8001156:	4995      	ldr	r1, [pc, #596]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115c:	e0f5      	b.n	800134a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 8085 	beq.w	8001274 <HAL_RCC_OscConfig+0x504>
 800116a:	2301      	movs	r3, #1
 800116c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800117c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800118a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	2301      	movs	r3, #1
 8001194:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb1b 	bl	80007d0 <HAL_GetTick>
 800119a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a0:	f7ff fb16 	bl	80007d0 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d902      	bls.n	80011b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f000 bceb 	b.w	8001b8c <HAL_RCC_OscConfig+0xe1c>
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80011c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d102      	bne.n	80011e6 <HAL_RCC_OscConfig+0x476>
 80011e0:	4b72      	ldr	r3, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	e013      	b.n	800120e <HAL_RCC_OscConfig+0x49e>
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800120a:	4b68      	ldr	r3, [pc, #416]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	2202      	movs	r2, #2
 8001210:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001214:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001218:	fa92 f2a2 	rbit	r2, r2
 800121c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001220:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001224:	fab2 f282 	clz	r2, r2
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f042 0220 	orr.w	r2, r2, #32
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	f002 021f 	and.w	r2, r2, #31
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0af      	beq.n	80011a0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b5a      	ldr	r3, [pc, #360]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	21f8      	movs	r1, #248	; 0xf8
 8001250:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001258:	fa91 f1a1 	rbit	r1, r1
 800125c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001260:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001264:	fab1 f181 	clz	r1, r1
 8001268:	b2c9      	uxtb	r1, r1
 800126a:	408b      	lsls	r3, r1
 800126c:	494f      	ldr	r1, [pc, #316]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
 8001272:	e06a      	b.n	800134a <HAL_RCC_OscConfig+0x5da>
 8001274:	2301      	movs	r3, #1
 8001276:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001286:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001294:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	461a      	mov	r2, r3
 800129c:	2300      	movs	r3, #0
 800129e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fa96 	bl	80007d0 <HAL_GetTick>
 80012a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a8:	e00a      	b.n	80012c0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012aa:	f7ff fa91 	bl	80007d0 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d902      	bls.n	80012c0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f000 bc66 	b.w	8001b8c <HAL_RCC_OscConfig+0xe1c>
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80012d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	095b      	lsrs	r3, r3, #5
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d102      	bne.n	80012f0 <HAL_RCC_OscConfig+0x580>
 80012ea:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	e013      	b.n	8001318 <HAL_RCC_OscConfig+0x5a8>
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001308:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_RCC_OscConfig+0x63c>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2202      	movs	r2, #2
 800131a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800131e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001322:	fa92 f2a2 	rbit	r2, r2
 8001326:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800132a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f002 021f 	and.w	r2, r2, #31
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1af      	bne.n	80012aa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80da 	beq.w	800150e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d069      	beq.n	8001438 <HAL_RCC_OscConfig+0x6c8>
 8001364:	2301      	movs	r3, #1
 8001366:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001376:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_OscConfig+0x640>)
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	461a      	mov	r2, r3
 800138a:	2301      	movs	r3, #1
 800138c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fa1f 	bl	80007d0 <HAL_GetTick>
 8001392:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e00d      	b.n	80013b4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fa1a 	bl	80007d0 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d905      	bls.n	80013b4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e3ef      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	10908120 	.word	0x10908120
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013be:	fa93 f2a3 	rbit	r2, r3
 80013c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	fa93 f2a3 	rbit	r2, r3
 80013da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013e4:	2202      	movs	r2, #2
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	fa93 f2a3 	rbit	r2, r3
 80013f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f8:	4ba4      	ldr	r3, [pc, #656]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80013fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001400:	2102      	movs	r1, #2
 8001402:	6019      	str	r1, [r3, #0]
 8001404:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	fa93 f1a3 	rbit	r1, r3
 800140e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001412:	6019      	str	r1, [r3, #0]
  return result;
 8001414:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0b0      	beq.n	8001398 <HAL_RCC_OscConfig+0x628>
 8001436:	e06a      	b.n	800150e <HAL_RCC_OscConfig+0x79e>
 8001438:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800144e:	601a      	str	r2, [r3, #0]
  return result;
 8001450:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001454:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x920>)
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	461a      	mov	r2, r3
 8001466:	2300      	movs	r3, #0
 8001468:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff f9b1 	bl	80007d0 <HAL_GetTick>
 800146e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001472:	e009      	b.n	8001488 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff f9ac 	bl	80007d0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e381      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
 8001488:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a4:	2202      	movs	r2, #2
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fa93 f2a3 	rbit	r2, r3
 80014b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014bc:	2202      	movs	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fa93 f2a3 	rbit	r2, r3
 80014ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b6e      	ldr	r3, [pc, #440]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80014d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014d8:	2102      	movs	r1, #2
 80014da:	6019      	str	r1, [r3, #0]
 80014dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fa93 f1a3 	rbit	r1, r3
 80014e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014ea:	6019      	str	r1, [r3, #0]
  return result;
 80014ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1b2      	bne.n	8001474 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8157 	beq.w	80017cc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001524:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d112      	bne.n	8001556 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	61d3      	str	r3, [r2, #28]
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001550:	2301      	movs	r3, #1
 8001552:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <HAL_RCC_OscConfig+0x924>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11a      	bne.n	8001598 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b4c      	ldr	r3, [pc, #304]	; (8001694 <HAL_RCC_OscConfig+0x924>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a4b      	ldr	r2, [pc, #300]	; (8001694 <HAL_RCC_OscConfig+0x924>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff f92f 	bl	80007d0 <HAL_GetTick>
 8001572:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	e009      	b.n	800158c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001578:	f7ff f92a 	bl	80007d0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b64      	cmp	r3, #100	; 0x64
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e2ff      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x924>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ef      	beq.n	8001578 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x840>
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a39      	ldr	r2, [pc, #228]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6213      	str	r3, [r2, #32]
 80015ae:	e02f      	b.n	8001610 <HAL_RCC_OscConfig+0x8a0>
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x864>
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a33      	ldr	r2, [pc, #204]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6213      	str	r3, [r2, #32]
 80015c6:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a30      	ldr	r2, [pc, #192]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	e01d      	b.n	8001610 <HAL_RCC_OscConfig+0x8a0>
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x888>
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4a2a      	ldr	r2, [pc, #168]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6213      	str	r3, [r2, #32]
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0x8a0>
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a23      	ldr	r2, [pc, #140]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d06a      	beq.n	80016f0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff f8d9 	bl	80007d0 <HAL_GetTick>
 800161e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff f8d4 	bl	80007d0 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e2a7      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
 800163c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001640:	2202      	movs	r2, #2
 8001642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	fa93 f2a3 	rbit	r2, r3
 8001666:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800166a:	601a      	str	r2, [r3, #0]
  return result;
 800166c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001670:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d108      	bne.n	8001698 <HAL_RCC_OscConfig+0x928>
 8001686:	4b01      	ldr	r3, [pc, #4]	; (800168c <HAL_RCC_OscConfig+0x91c>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	e013      	b.n	80016b4 <HAL_RCC_OscConfig+0x944>
 800168c:	40021000 	.word	0x40021000
 8001690:	10908120 	.word	0x10908120
 8001694:	40007000 	.word	0x40007000
 8001698:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800169c:	2202      	movs	r2, #2
 800169e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fa93 f2a3 	rbit	r2, r3
 80016aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	4bc0      	ldr	r3, [pc, #768]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016b8:	2102      	movs	r1, #2
 80016ba:	6011      	str	r1, [r2, #0]
 80016bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	fa92 f1a2 	rbit	r1, r2
 80016c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016ca:	6011      	str	r1, [r2, #0]
  return result;
 80016cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	fab2 f282 	clz	r2, r2
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f002 021f 	and.w	r2, r2, #31
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d09a      	beq.n	8001624 <HAL_RCC_OscConfig+0x8b4>
 80016ee:	e063      	b.n	80017b8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff f86e 	bl	80007d0 <HAL_GetTick>
 80016f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	e00b      	b.n	8001712 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff f869 	bl	80007d0 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e23c      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
 8001712:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001716:	2202      	movs	r2, #2
 8001718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	fa93 f2a3 	rbit	r2, r3
 8001724:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172e:	2202      	movs	r2, #2
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f2a3 	rbit	r2, r3
 800173c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001740:	601a      	str	r2, [r3, #0]
  return result;
 8001742:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001746:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d102      	bne.n	8001762 <HAL_RCC_OscConfig+0x9f2>
 800175c:	4b95      	ldr	r3, [pc, #596]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	e00d      	b.n	800177e <HAL_RCC_OscConfig+0xa0e>
 8001762:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	4b8e      	ldr	r3, [pc, #568]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001782:	2102      	movs	r1, #2
 8001784:	6011      	str	r1, [r2, #0]
 8001786:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	fa92 f1a2 	rbit	r1, r2
 8001790:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001794:	6011      	str	r1, [r2, #0]
  return result;
 8001796:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	fab2 f282 	clz	r2, r2
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f002 021f 	and.w	r2, r2, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1a0      	bne.n	80016fa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017b8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	4a7b      	ldr	r2, [pc, #492]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 81d9 	beq.w	8001b8a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d8:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	f000 81a6 	beq.w	8001b32 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	f040 811e 	bne.w	8001a2e <HAL_RCC_OscConfig+0xcbe>
 80017f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800180a:	601a      	str	r2, [r3, #0]
  return result;
 800180c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001810:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	461a      	mov	r2, r3
 8001824:	2300      	movs	r3, #0
 8001826:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7fe ffd2 	bl	80007d0 <HAL_GetTick>
 800182c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e009      	b.n	8001846 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7fe ffcd 	bl	80007d0 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1a2      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
 8001846:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800184a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800185e:	601a      	str	r2, [r3, #0]
  return result;
 8001860:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001864:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_RCC_OscConfig+0xb10>
 800187a:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	e01b      	b.n	80018b8 <HAL_RCC_OscConfig+0xb48>
 8001880:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018c0:	6011      	str	r1, [r2, #0]
 80018c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	fa92 f1a2 	rbit	r1, r2
 80018cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018d0:	6011      	str	r1, [r2, #0]
  return result;
 80018d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	fab2 f282 	clz	r2, r2
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f002 021f 	and.w	r2, r2, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d19e      	bne.n	8001832 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f023 020f 	bic.w	r2, r3, #15
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	492c      	ldr	r1, [pc, #176]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 8001904:	4313      	orrs	r3, r2
 8001906:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a19      	ldr	r1, [r3, #32]
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	430b      	orrs	r3, r1
 800191e:	4925      	ldr	r1, [pc, #148]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800193c:	601a      	str	r2, [r3, #0]
  return result;
 800193e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001942:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800194e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	461a      	mov	r2, r3
 8001956:	2301      	movs	r3, #1
 8001958:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7fe ff39 	bl	80007d0 <HAL_GetTick>
 800195e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001962:	e009      	b.n	8001978 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7fe ff34 	bl	80007d0 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e109      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
 8001978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800197c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001990:	601a      	str	r2, [r3, #0]
  return result;
 8001992:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001996:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0xc48>
 80019ac:	4b01      	ldr	r3, [pc, #4]	; (80019b4 <HAL_RCC_OscConfig+0xc44>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	e01e      	b.n	80019f0 <HAL_RCC_OscConfig+0xc80>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0xe28>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019f8:	6011      	str	r1, [r2, #0]
 80019fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	fa92 f1a2 	rbit	r1, r2
 8001a04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a08:	6011      	str	r1, [r2, #0]
  return result;
 8001a0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	fab2 f282 	clz	r2, r2
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	f042 0220 	orr.w	r2, r2, #32
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f002 021f 	and.w	r2, r2, #31
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d09b      	beq.n	8001964 <HAL_RCC_OscConfig+0xbf4>
 8001a2c:	e0ad      	b.n	8001b8a <HAL_RCC_OscConfig+0xe1a>
 8001a2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a46:	601a      	str	r2, [r3, #0]
  return result;
 8001a48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe feb4 	bl	80007d0 <HAL_GetTick>
 8001a68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7fe feaf 	bl	80007d0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e084      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
 8001a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	601a      	str	r2, [r3, #0]
  return result;
 8001a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_RCC_OscConfig+0xd4c>
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_RCC_OscConfig+0xe28>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	e01b      	b.n	8001af4 <HAL_RCC_OscConfig+0xd84>
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	f107 0320 	add.w	r3, r7, #32
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_RCC_OscConfig+0xe28>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f107 0214 	add.w	r2, r7, #20
 8001af8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001afc:	6011      	str	r1, [r2, #0]
 8001afe:	f107 0214 	add.w	r2, r7, #20
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	fa92 f1a2 	rbit	r1, r2
 8001b08:	f107 0210 	add.w	r2, r7, #16
 8001b0c:	6011      	str	r1, [r2, #0]
  return result;
 8001b0e:	f107 0210 	add.w	r2, r7, #16
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f002 021f 	and.w	r2, r2, #31
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d19e      	bne.n	8001a6e <HAL_RCC_OscConfig+0xcfe>
 8001b30:	e02b      	b.n	8001b8a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e025      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_OscConfig+0xe28>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_RCC_OscConfig+0xe28>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b54:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d111      	bne.n	8001b86 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d108      	bne.n	8001b86 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b78:	f003 020f 	and.w	r2, r3, #15
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b09e      	sub	sp, #120	; 0x78
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e162      	b.n	8001e7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b90      	ldr	r3, [pc, #576]	; (8001df8 <HAL_RCC_ClockConfig+0x25c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d910      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b8d      	ldr	r3, [pc, #564]	; (8001df8 <HAL_RCC_ClockConfig+0x25c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	498b      	ldr	r1, [pc, #556]	; (8001df8 <HAL_RCC_ClockConfig+0x25c>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <HAL_RCC_ClockConfig+0x25c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e14a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b82      	ldr	r3, [pc, #520]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	497f      	ldr	r1, [pc, #508]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80dc 	beq.w	8001dc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d13c      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xf6>
 8001c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d102      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xa6>
 8001c3c:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	e00f      	b.n	8001c62 <HAL_RCC_ClockConfig+0xc6>
 8001c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c54:	663b      	str	r3, [r7, #96]	; 0x60
 8001c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c6a:	fa92 f2a2 	rbit	r2, r2
 8001c6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c72:	fab2 f282 	clz	r2, r2
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f042 0220 	orr.w	r2, r2, #32
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f002 021f 	and.w	r2, r2, #31
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f202 	lsl.w	r2, r1, r2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d17b      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0f3      	b.n	8001e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d13c      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x178>
 8001c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x128>
 8001cbe:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x148>
 8001cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8001cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce0:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cec:	fa92 f2a2 	rbit	r2, r2
 8001cf0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf4:	fab2 f282 	clz	r2, r2
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f002 021f 	and.w	r2, r2, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d13a      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b2      	b.n	8001e7a <HAL_RCC_ClockConfig+0x2de>
 8001d14:	2302      	movs	r3, #2
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	095b      	lsrs	r3, r3, #5
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d102      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x1a0>
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	e00d      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1bc>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	2202      	movs	r2, #2
 8001d5a:	61ba      	str	r2, [r7, #24]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	fa92 f2a2 	rbit	r2, r2
 8001d62:	617a      	str	r2, [r7, #20]
  return result;
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f042 0220 	orr.w	r2, r2, #32
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	f002 021f 	and.w	r2, r2, #31
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e079      	b.n	8001e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	491a      	ldr	r1, [pc, #104]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d98:	f7fe fd1a 	bl	80007d0 <HAL_GetTick>
 8001d9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe fd16 	bl	80007d0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e061      	b.n	8001e7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_ClockConfig+0x25c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d214      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_RCC_ClockConfig+0x25c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4906      	ldr	r1, [pc, #24]	; (8001df8 <HAL_RCC_ClockConfig+0x25c>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e040      	b.n	8001e7a <HAL_RCC_ClockConfig+0x2de>
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_ClockConfig+0x2e8>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	491a      	ldr	r1, [pc, #104]	; (8001e84 <HAL_RCC_ClockConfig+0x2e8>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_RCC_ClockConfig+0x2e8>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4912      	ldr	r1, [pc, #72]	; (8001e84 <HAL_RCC_ClockConfig+0x2e8>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e3e:	f000 f829 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e42:	4601      	mov	r1, r0
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_RCC_ClockConfig+0x2e8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4c:	22f0      	movs	r2, #240	; 0xf0
 8001e4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	fa92 f2a2 	rbit	r2, r2
 8001e56:	60fa      	str	r2, [r7, #12]
  return result;
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	40d3      	lsrs	r3, r2
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x2ec>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	fa21 f303 	lsr.w	r3, r1, r3
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_RCC_ClockConfig+0x2f0>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_RCC_ClockConfig+0x2f4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fc68 	bl	8000748 <HAL_InitTick>
  
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3778      	adds	r7, #120	; 0x78
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	0800365c 	.word	0x0800365c
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b08b      	sub	sp, #44	; 0x2c
 8001e98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x36>
 8001ec2:	e03f      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ec6:	623b      	str	r3, [r7, #32]
      break;
 8001ec8:	e03f      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ed0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ed4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	fa92 f2a2 	rbit	r2, r2
 8001edc:	607a      	str	r2, [r7, #4]
  return result;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	40d3      	lsrs	r3, r2
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	fa92 f2a2 	rbit	r2, r2
 8001f00:	60fa      	str	r2, [r7, #12]
  return result;
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	fab2 f282 	clz	r2, r2
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	40d3      	lsrs	r3, r2
 8001f0c:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f1c:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2c:	e007      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	623b      	str	r3, [r7, #32]
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f46:	623b      	str	r3, [r7, #32]
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	372c      	adds	r7, #44	; 0x2c
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	08003674 	.word	0x08003674
 8001f64:	08003684 	.word	0x08003684

08001f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000

08001f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f86:	f7ff ffef 	bl	8001f68 <HAL_RCC_GetHCLKFreq>
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	fa92 f2a2 	rbit	r2, r2
 8001fa0:	603a      	str	r2, [r7, #0]
  return result;
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	40d3      	lsrs	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	0800366c 	.word	0x0800366c

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001fca:	f7ff ffcd 	bl	8001f68 <HAL_RCC_GetHCLKFreq>
 8001fce:	4601      	mov	r1, r0
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001fd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001fdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	fa92 f2a2 	rbit	r2, r2
 8001fe4:	603a      	str	r2, [r7, #0]
  return result;
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	40d3      	lsrs	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	0800366c 	.word	0x0800366c

08002008 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b092      	sub	sp, #72	; 0x48
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80d7 	beq.w	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202c:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10e      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002038:	4b4b      	ldr	r3, [pc, #300]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002042:	61d3      	str	r3, [r2, #28]
 8002044:	4b48      	ldr	r3, [pc, #288]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002050:	2301      	movs	r3, #1
 8002052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4b45      	ldr	r3, [pc, #276]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d118      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002062:	4b42      	ldr	r3, [pc, #264]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a41      	ldr	r2, [pc, #260]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7fe fbaf 	bl	80007d0 <HAL_GetTick>
 8002072:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	e008      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002076:	f7fe fbab 	bl	80007d0 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	; 0x64
 8002082:	d901      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1d6      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002094:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8084 	beq.w	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d07c      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	461a      	mov	r2, r3
 80020de:	2301      	movs	r3, #1
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	461a      	mov	r2, r3
 8002102:	2300      	movs	r3, #0
 8002104:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d04b      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe fb5b 	bl	80007d0 <HAL_GetTick>
 800211a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fb57 	bl	80007d0 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	; 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e180      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002134:	2302      	movs	r3, #2
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	2302      	movs	r3, #2
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	61fb      	str	r3, [r7, #28]
  return result;
 800214c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d108      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002162:	4b01      	ldr	r3, [pc, #4]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	e00d      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
 8002170:	10908100 	.word	0x10908100
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2202      	movs	r2, #2
 8002186:	613a      	str	r2, [r7, #16]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	fa92 f2a2 	rbit	r2, r2
 800218e:	60fa      	str	r2, [r7, #12]
  return result;
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	fab2 f282 	clz	r2, r2
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	f002 021f 	and.w	r2, r2, #31
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0b7      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021ae:	4b95      	ldr	r3, [pc, #596]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4992      	ldr	r1, [pc, #584]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4a8d      	ldr	r2, [pc, #564]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e0:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4985      	ldr	r1, [pc, #532]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	497e      	ldr	r1, [pc, #504]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800220c:	4313      	orrs	r3, r2
 800220e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800221c:	4b79      	ldr	r3, [pc, #484]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	4976      	ldr	r1, [pc, #472]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800223a:	4b72      	ldr	r3, [pc, #456]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f023 0210 	bic.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	496f      	ldr	r1, [pc, #444]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002248:	4313      	orrs	r3, r2
 800224a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002258:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	4967      	ldr	r1, [pc, #412]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f023 0220 	bic.w	r2, r3, #32
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4960      	ldr	r1, [pc, #384]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002294:	4b5b      	ldr	r3, [pc, #364]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	4958      	ldr	r1, [pc, #352]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b2:	4b54      	ldr	r3, [pc, #336]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4951      	ldr	r1, [pc, #324]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4949      	ldr	r1, [pc, #292]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022ee:	4b45      	ldr	r3, [pc, #276]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4942      	ldr	r1, [pc, #264]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800230c:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	493a      	ldr	r1, [pc, #232]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	4933      	ldr	r1, [pc, #204]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002338:	4313      	orrs	r3, r2
 800233a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002348:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	492b      	ldr	r1, [pc, #172]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002366:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4924      	ldr	r1, [pc, #144]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002374:	4313      	orrs	r3, r2
 8002376:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	491c      	ldr	r1, [pc, #112]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	4915      	ldr	r1, [pc, #84]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	490d      	ldr	r1, [pc, #52]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ea:	4906      	ldr	r1, [pc, #24]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80023fc:	4b01      	ldr	r3, [pc, #4]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	e002      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002410:	490b      	ldr	r1, [pc, #44]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002412:	4313      	orrs	r3, r2
 8002414:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242e:	4904      	ldr	r1, [pc, #16]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002430:	4313      	orrs	r3, r2
 8002432:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3748      	adds	r7, #72	; 0x48
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000

08002444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e040      	b.n	80024d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe f814 	bl	8000494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	; 0x24
 8002470:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8c0 	bl	8002608 <UART_SetConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e022      	b.n	80024d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 face 	bl	8002a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fb55 	bl	8002b80 <UART_CheckIdleState>
 80024d6:	4603      	mov	r3, r0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	f040 8081 	bne.w	80025fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_UART_Transmit+0x26>
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e079      	b.n	80025fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_UART_Transmit+0x38>
 8002514:	2302      	movs	r3, #2
 8002516:	e072      	b.n	80025fe <HAL_UART_Transmit+0x11e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2221      	movs	r2, #33	; 0x21
 800252a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800252c:	f7fe f950 	bl	80007d0 <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254a:	d108      	bne.n	800255e <HAL_UART_Transmit+0x7e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e003      	b.n	8002566 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002566:	e02d      	b.n	80025c4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fb49 	bl	8002c0a <UART_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e03d      	b.n	80025fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	881a      	ldrh	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002594:	b292      	uxth	r2, r2
 8002596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	3302      	adds	r3, #2
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e008      	b.n	80025b2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b292      	uxth	r2, r2
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	3301      	adds	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1cb      	bne.n	8002568 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2140      	movs	r1, #64	; 0x40
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fb15 	bl	8002c0a <UART_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e009      	b.n	80025fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4bac      	ldr	r3, [pc, #688]	; (80028e8 <UART_SetConfig+0x2e0>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	6939      	ldr	r1, [r7, #16]
 8002640:	430b      	orrs	r3, r1
 8002642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a9a      	ldr	r2, [pc, #616]	; (80028ec <UART_SetConfig+0x2e4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d121      	bne.n	80026cc <UART_SetConfig+0xc4>
 8002688:	4b99      	ldr	r3, [pc, #612]	; (80028f0 <UART_SetConfig+0x2e8>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b03      	cmp	r3, #3
 8002692:	d817      	bhi.n	80026c4 <UART_SetConfig+0xbc>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <UART_SetConfig+0x94>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026b9 	.word	0x080026b9
 80026a4:	080026bf 	.word	0x080026bf
 80026a8:	080026b3 	.word	0x080026b3
 80026ac:	2301      	movs	r3, #1
 80026ae:	77fb      	strb	r3, [r7, #31]
 80026b0:	e0b2      	b.n	8002818 <UART_SetConfig+0x210>
 80026b2:	2302      	movs	r3, #2
 80026b4:	77fb      	strb	r3, [r7, #31]
 80026b6:	e0af      	b.n	8002818 <UART_SetConfig+0x210>
 80026b8:	2304      	movs	r3, #4
 80026ba:	77fb      	strb	r3, [r7, #31]
 80026bc:	e0ac      	b.n	8002818 <UART_SetConfig+0x210>
 80026be:	2308      	movs	r3, #8
 80026c0:	77fb      	strb	r3, [r7, #31]
 80026c2:	e0a9      	b.n	8002818 <UART_SetConfig+0x210>
 80026c4:	2310      	movs	r3, #16
 80026c6:	77fb      	strb	r3, [r7, #31]
 80026c8:	bf00      	nop
 80026ca:	e0a5      	b.n	8002818 <UART_SetConfig+0x210>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a88      	ldr	r2, [pc, #544]	; (80028f4 <UART_SetConfig+0x2ec>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d123      	bne.n	800271e <UART_SetConfig+0x116>
 80026d6:	4b86      	ldr	r3, [pc, #536]	; (80028f0 <UART_SetConfig+0x2e8>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e2:	d012      	beq.n	800270a <UART_SetConfig+0x102>
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d802      	bhi.n	80026f0 <UART_SetConfig+0xe8>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <UART_SetConfig+0xf6>
 80026ee:	e012      	b.n	8002716 <UART_SetConfig+0x10e>
 80026f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026f4:	d00c      	beq.n	8002710 <UART_SetConfig+0x108>
 80026f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026fa:	d003      	beq.n	8002704 <UART_SetConfig+0xfc>
 80026fc:	e00b      	b.n	8002716 <UART_SetConfig+0x10e>
 80026fe:	2300      	movs	r3, #0
 8002700:	77fb      	strb	r3, [r7, #31]
 8002702:	e089      	b.n	8002818 <UART_SetConfig+0x210>
 8002704:	2302      	movs	r3, #2
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e086      	b.n	8002818 <UART_SetConfig+0x210>
 800270a:	2304      	movs	r3, #4
 800270c:	77fb      	strb	r3, [r7, #31]
 800270e:	e083      	b.n	8002818 <UART_SetConfig+0x210>
 8002710:	2308      	movs	r3, #8
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e080      	b.n	8002818 <UART_SetConfig+0x210>
 8002716:	2310      	movs	r3, #16
 8002718:	77fb      	strb	r3, [r7, #31]
 800271a:	bf00      	nop
 800271c:	e07c      	b.n	8002818 <UART_SetConfig+0x210>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a75      	ldr	r2, [pc, #468]	; (80028f8 <UART_SetConfig+0x2f0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d123      	bne.n	8002770 <UART_SetConfig+0x168>
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <UART_SetConfig+0x2e8>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002730:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002734:	d012      	beq.n	800275c <UART_SetConfig+0x154>
 8002736:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800273a:	d802      	bhi.n	8002742 <UART_SetConfig+0x13a>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <UART_SetConfig+0x148>
 8002740:	e012      	b.n	8002768 <UART_SetConfig+0x160>
 8002742:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002746:	d00c      	beq.n	8002762 <UART_SetConfig+0x15a>
 8002748:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800274c:	d003      	beq.n	8002756 <UART_SetConfig+0x14e>
 800274e:	e00b      	b.n	8002768 <UART_SetConfig+0x160>
 8002750:	2300      	movs	r3, #0
 8002752:	77fb      	strb	r3, [r7, #31]
 8002754:	e060      	b.n	8002818 <UART_SetConfig+0x210>
 8002756:	2302      	movs	r3, #2
 8002758:	77fb      	strb	r3, [r7, #31]
 800275a:	e05d      	b.n	8002818 <UART_SetConfig+0x210>
 800275c:	2304      	movs	r3, #4
 800275e:	77fb      	strb	r3, [r7, #31]
 8002760:	e05a      	b.n	8002818 <UART_SetConfig+0x210>
 8002762:	2308      	movs	r3, #8
 8002764:	77fb      	strb	r3, [r7, #31]
 8002766:	e057      	b.n	8002818 <UART_SetConfig+0x210>
 8002768:	2310      	movs	r3, #16
 800276a:	77fb      	strb	r3, [r7, #31]
 800276c:	bf00      	nop
 800276e:	e053      	b.n	8002818 <UART_SetConfig+0x210>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a61      	ldr	r2, [pc, #388]	; (80028fc <UART_SetConfig+0x2f4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d123      	bne.n	80027c2 <UART_SetConfig+0x1ba>
 800277a:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <UART_SetConfig+0x2e8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002786:	d012      	beq.n	80027ae <UART_SetConfig+0x1a6>
 8002788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800278c:	d802      	bhi.n	8002794 <UART_SetConfig+0x18c>
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <UART_SetConfig+0x19a>
 8002792:	e012      	b.n	80027ba <UART_SetConfig+0x1b2>
 8002794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002798:	d00c      	beq.n	80027b4 <UART_SetConfig+0x1ac>
 800279a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800279e:	d003      	beq.n	80027a8 <UART_SetConfig+0x1a0>
 80027a0:	e00b      	b.n	80027ba <UART_SetConfig+0x1b2>
 80027a2:	2300      	movs	r3, #0
 80027a4:	77fb      	strb	r3, [r7, #31]
 80027a6:	e037      	b.n	8002818 <UART_SetConfig+0x210>
 80027a8:	2302      	movs	r3, #2
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e034      	b.n	8002818 <UART_SetConfig+0x210>
 80027ae:	2304      	movs	r3, #4
 80027b0:	77fb      	strb	r3, [r7, #31]
 80027b2:	e031      	b.n	8002818 <UART_SetConfig+0x210>
 80027b4:	2308      	movs	r3, #8
 80027b6:	77fb      	strb	r3, [r7, #31]
 80027b8:	e02e      	b.n	8002818 <UART_SetConfig+0x210>
 80027ba:	2310      	movs	r3, #16
 80027bc:	77fb      	strb	r3, [r7, #31]
 80027be:	bf00      	nop
 80027c0:	e02a      	b.n	8002818 <UART_SetConfig+0x210>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a4e      	ldr	r2, [pc, #312]	; (8002900 <UART_SetConfig+0x2f8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d123      	bne.n	8002814 <UART_SetConfig+0x20c>
 80027cc:	4b48      	ldr	r3, [pc, #288]	; (80028f0 <UART_SetConfig+0x2e8>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80027d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d8:	d012      	beq.n	8002800 <UART_SetConfig+0x1f8>
 80027da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027de:	d802      	bhi.n	80027e6 <UART_SetConfig+0x1de>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <UART_SetConfig+0x1ec>
 80027e4:	e012      	b.n	800280c <UART_SetConfig+0x204>
 80027e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ea:	d00c      	beq.n	8002806 <UART_SetConfig+0x1fe>
 80027ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027f0:	d003      	beq.n	80027fa <UART_SetConfig+0x1f2>
 80027f2:	e00b      	b.n	800280c <UART_SetConfig+0x204>
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
 80027f8:	e00e      	b.n	8002818 <UART_SetConfig+0x210>
 80027fa:	2302      	movs	r3, #2
 80027fc:	77fb      	strb	r3, [r7, #31]
 80027fe:	e00b      	b.n	8002818 <UART_SetConfig+0x210>
 8002800:	2304      	movs	r3, #4
 8002802:	77fb      	strb	r3, [r7, #31]
 8002804:	e008      	b.n	8002818 <UART_SetConfig+0x210>
 8002806:	2308      	movs	r3, #8
 8002808:	77fb      	strb	r3, [r7, #31]
 800280a:	e005      	b.n	8002818 <UART_SetConfig+0x210>
 800280c:	2310      	movs	r3, #16
 800280e:	77fb      	strb	r3, [r7, #31]
 8002810:	bf00      	nop
 8002812:	e001      	b.n	8002818 <UART_SetConfig+0x210>
 8002814:	2310      	movs	r3, #16
 8002816:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002820:	f040 8090 	bne.w	8002944 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002824:	7ffb      	ldrb	r3, [r7, #31]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d86c      	bhi.n	8002904 <UART_SetConfig+0x2fc>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <UART_SetConfig+0x228>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002855 	.word	0x08002855
 8002834:	08002875 	.word	0x08002875
 8002838:	08002895 	.word	0x08002895
 800283c:	08002905 	.word	0x08002905
 8002840:	080028b1 	.word	0x080028b1
 8002844:	08002905 	.word	0x08002905
 8002848:	08002905 	.word	0x08002905
 800284c:	08002905 	.word	0x08002905
 8002850:	080028d1 	.word	0x080028d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002854:	f7ff fb94 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8002858:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	005a      	lsls	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	441a      	add	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	b29b      	uxth	r3, r3
 8002870:	61bb      	str	r3, [r7, #24]
        break;
 8002872:	e04a      	b.n	800290a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002874:	f7ff fba6 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002878:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	005a      	lsls	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	441a      	add	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	b29b      	uxth	r3, r3
 8002890:	61bb      	str	r3, [r7, #24]
        break;
 8002892:	e03a      	b.n	800290a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800289e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6852      	ldr	r2, [r2, #4]
 80028a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	61bb      	str	r3, [r7, #24]
        break;
 80028ae:	e02c      	b.n	800290a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028b0:	f7ff faf0 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 80028b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	005a      	lsls	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	441a      	add	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	61bb      	str	r3, [r7, #24]
        break;
 80028ce:	e01c      	b.n	800290a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	61bb      	str	r3, [r7, #24]
        break;
 80028e6:	e010      	b.n	800290a <UART_SetConfig+0x302>
 80028e8:	efff69f3 	.word	0xefff69f3
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40004800 	.word	0x40004800
 80028fc:	40004c00 	.word	0x40004c00
 8002900:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	75fb      	strb	r3, [r7, #23]
        break;
 8002908:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d916      	bls.n	800293e <UART_SetConfig+0x336>
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002916:	d212      	bcs.n	800293e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f023 030f 	bic.w	r3, r3, #15
 8002920:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	b29b      	uxth	r3, r3
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	b29a      	uxth	r2, r3
 800292e:	897b      	ldrh	r3, [r7, #10]
 8002930:	4313      	orrs	r3, r2
 8002932:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	897a      	ldrh	r2, [r7, #10]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	e072      	b.n	8002a24 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
 8002942:	e06f      	b.n	8002a24 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8002944:	7ffb      	ldrb	r3, [r7, #31]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d85b      	bhi.n	8002a02 <UART_SetConfig+0x3fa>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <UART_SetConfig+0x348>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002975 	.word	0x08002975
 8002954:	08002993 	.word	0x08002993
 8002958:	080029b1 	.word	0x080029b1
 800295c:	08002a03 	.word	0x08002a03
 8002960:	080029cd 	.word	0x080029cd
 8002964:	08002a03 	.word	0x08002a03
 8002968:	08002a03 	.word	0x08002a03
 800296c:	08002a03 	.word	0x08002a03
 8002970:	080029eb 	.word	0x080029eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002974:	f7ff fb04 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8002978:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	085a      	lsrs	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	b29b      	uxth	r3, r3
 800298e:	61bb      	str	r3, [r7, #24]
        break;
 8002990:	e03a      	b.n	8002a08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002992:	f7ff fb17 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002996:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	085a      	lsrs	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	61bb      	str	r3, [r7, #24]
        break;
 80029ae:	e02b      	b.n	8002a08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80029ba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6852      	ldr	r2, [r2, #4]
 80029c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	61bb      	str	r3, [r7, #24]
        break;
 80029ca:	e01d      	b.n	8002a08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029cc:	f7ff fa62 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 80029d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	085a      	lsrs	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	441a      	add	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	61bb      	str	r3, [r7, #24]
        break;
 80029e8:	e00e      	b.n	8002a08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	61bb      	str	r3, [r7, #24]
        break;
 8002a00:	e002      	b.n	8002a08 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
        break;
 8002a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	d908      	bls.n	8002a20 <UART_SetConfig+0x418>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d204      	bcs.n	8002a20 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	e001      	b.n	8002a24 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop

08002a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01a      	beq.n	8002b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3a:	d10a      	bne.n	8002b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
  }
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b8e:	f7fd fe1f 	bl	80007d0 <HAL_GetTick>
 8002b92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d10e      	bne.n	8002bc0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ba2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f82a 	bl	8002c0a <UART_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e020      	b.n	8002c02 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d10e      	bne.n	8002bec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f814 	bl	8002c0a <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e00a      	b.n	8002c02 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1a:	e05d      	b.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d059      	beq.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7fd fdd4 	bl	80007d0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11b      	bne.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e042      	b.n	8002cf8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02b      	beq.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8e:	d123      	bne.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c98:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ca8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e00f      	b.n	8002cf8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d092      	beq.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <__errno>:
 8002d00:	4b01      	ldr	r3, [pc, #4]	; (8002d08 <__errno+0x8>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	2000000c 	.word	0x2000000c

08002d0c <__libc_init_array>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	4e0d      	ldr	r6, [pc, #52]	; (8002d44 <__libc_init_array+0x38>)
 8002d10:	4c0d      	ldr	r4, [pc, #52]	; (8002d48 <__libc_init_array+0x3c>)
 8002d12:	1ba4      	subs	r4, r4, r6
 8002d14:	10a4      	asrs	r4, r4, #2
 8002d16:	2500      	movs	r5, #0
 8002d18:	42a5      	cmp	r5, r4
 8002d1a:	d109      	bne.n	8002d30 <__libc_init_array+0x24>
 8002d1c:	4e0b      	ldr	r6, [pc, #44]	; (8002d4c <__libc_init_array+0x40>)
 8002d1e:	4c0c      	ldr	r4, [pc, #48]	; (8002d50 <__libc_init_array+0x44>)
 8002d20:	f000 fc88 	bl	8003634 <_init>
 8002d24:	1ba4      	subs	r4, r4, r6
 8002d26:	10a4      	asrs	r4, r4, #2
 8002d28:	2500      	movs	r5, #0
 8002d2a:	42a5      	cmp	r5, r4
 8002d2c:	d105      	bne.n	8002d3a <__libc_init_array+0x2e>
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d34:	4798      	blx	r3
 8002d36:	3501      	adds	r5, #1
 8002d38:	e7ee      	b.n	8002d18 <__libc_init_array+0xc>
 8002d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d3e:	4798      	blx	r3
 8002d40:	3501      	adds	r5, #1
 8002d42:	e7f2      	b.n	8002d2a <__libc_init_array+0x1e>
 8002d44:	080036f8 	.word	0x080036f8
 8002d48:	080036f8 	.word	0x080036f8
 8002d4c:	080036f8 	.word	0x080036f8
 8002d50:	080036fc 	.word	0x080036fc

08002d54 <memset>:
 8002d54:	4402      	add	r2, r0
 8002d56:	4603      	mov	r3, r0
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <memset+0xa>
 8002d5c:	4770      	bx	lr
 8002d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d62:	e7f9      	b.n	8002d58 <memset+0x4>

08002d64 <_puts_r>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	460e      	mov	r6, r1
 8002d68:	4605      	mov	r5, r0
 8002d6a:	b118      	cbz	r0, 8002d74 <_puts_r+0x10>
 8002d6c:	6983      	ldr	r3, [r0, #24]
 8002d6e:	b90b      	cbnz	r3, 8002d74 <_puts_r+0x10>
 8002d70:	f000 fa0c 	bl	800318c <__sinit>
 8002d74:	69ab      	ldr	r3, [r5, #24]
 8002d76:	68ac      	ldr	r4, [r5, #8]
 8002d78:	b913      	cbnz	r3, 8002d80 <_puts_r+0x1c>
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f000 fa06 	bl	800318c <__sinit>
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <_puts_r+0xac>)
 8002d82:	429c      	cmp	r4, r3
 8002d84:	d117      	bne.n	8002db6 <_puts_r+0x52>
 8002d86:	686c      	ldr	r4, [r5, #4]
 8002d88:	89a3      	ldrh	r3, [r4, #12]
 8002d8a:	071b      	lsls	r3, r3, #28
 8002d8c:	d51d      	bpl.n	8002dca <_puts_r+0x66>
 8002d8e:	6923      	ldr	r3, [r4, #16]
 8002d90:	b1db      	cbz	r3, 8002dca <_puts_r+0x66>
 8002d92:	3e01      	subs	r6, #1
 8002d94:	68a3      	ldr	r3, [r4, #8]
 8002d96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	60a3      	str	r3, [r4, #8]
 8002d9e:	b9e9      	cbnz	r1, 8002ddc <_puts_r+0x78>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	da2e      	bge.n	8002e02 <_puts_r+0x9e>
 8002da4:	4622      	mov	r2, r4
 8002da6:	210a      	movs	r1, #10
 8002da8:	4628      	mov	r0, r5
 8002daa:	f000 f83f 	bl	8002e2c <__swbuf_r>
 8002dae:	3001      	adds	r0, #1
 8002db0:	d011      	beq.n	8002dd6 <_puts_r+0x72>
 8002db2:	200a      	movs	r0, #10
 8002db4:	e011      	b.n	8002dda <_puts_r+0x76>
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <_puts_r+0xb0>)
 8002db8:	429c      	cmp	r4, r3
 8002dba:	d101      	bne.n	8002dc0 <_puts_r+0x5c>
 8002dbc:	68ac      	ldr	r4, [r5, #8]
 8002dbe:	e7e3      	b.n	8002d88 <_puts_r+0x24>
 8002dc0:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <_puts_r+0xb4>)
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	bf08      	it	eq
 8002dc6:	68ec      	ldreq	r4, [r5, #12]
 8002dc8:	e7de      	b.n	8002d88 <_puts_r+0x24>
 8002dca:	4621      	mov	r1, r4
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f000 f87f 	bl	8002ed0 <__swsetup_r>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d0dd      	beq.n	8002d92 <_puts_r+0x2e>
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da04      	bge.n	8002dea <_puts_r+0x86>
 8002de0:	69a2      	ldr	r2, [r4, #24]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	dc06      	bgt.n	8002df4 <_puts_r+0x90>
 8002de6:	290a      	cmp	r1, #10
 8002de8:	d004      	beq.n	8002df4 <_puts_r+0x90>
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	6022      	str	r2, [r4, #0]
 8002df0:	7019      	strb	r1, [r3, #0]
 8002df2:	e7cf      	b.n	8002d94 <_puts_r+0x30>
 8002df4:	4622      	mov	r2, r4
 8002df6:	4628      	mov	r0, r5
 8002df8:	f000 f818 	bl	8002e2c <__swbuf_r>
 8002dfc:	3001      	adds	r0, #1
 8002dfe:	d1c9      	bne.n	8002d94 <_puts_r+0x30>
 8002e00:	e7e9      	b.n	8002dd6 <_puts_r+0x72>
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	200a      	movs	r0, #10
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	6022      	str	r2, [r4, #0]
 8002e0a:	7018      	strb	r0, [r3, #0]
 8002e0c:	e7e5      	b.n	8002dda <_puts_r+0x76>
 8002e0e:	bf00      	nop
 8002e10:	080036b8 	.word	0x080036b8
 8002e14:	080036d8 	.word	0x080036d8
 8002e18:	08003698 	.word	0x08003698

08002e1c <puts>:
 8002e1c:	4b02      	ldr	r3, [pc, #8]	; (8002e28 <puts+0xc>)
 8002e1e:	4601      	mov	r1, r0
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	f7ff bf9f 	b.w	8002d64 <_puts_r>
 8002e26:	bf00      	nop
 8002e28:	2000000c 	.word	0x2000000c

08002e2c <__swbuf_r>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	460e      	mov	r6, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	4605      	mov	r5, r0
 8002e34:	b118      	cbz	r0, 8002e3e <__swbuf_r+0x12>
 8002e36:	6983      	ldr	r3, [r0, #24]
 8002e38:	b90b      	cbnz	r3, 8002e3e <__swbuf_r+0x12>
 8002e3a:	f000 f9a7 	bl	800318c <__sinit>
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <__swbuf_r+0x98>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	d12a      	bne.n	8002e9a <__swbuf_r+0x6e>
 8002e44:	686c      	ldr	r4, [r5, #4]
 8002e46:	69a3      	ldr	r3, [r4, #24]
 8002e48:	60a3      	str	r3, [r4, #8]
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	071a      	lsls	r2, r3, #28
 8002e4e:	d52e      	bpl.n	8002eae <__swbuf_r+0x82>
 8002e50:	6923      	ldr	r3, [r4, #16]
 8002e52:	b363      	cbz	r3, 8002eae <__swbuf_r+0x82>
 8002e54:	6923      	ldr	r3, [r4, #16]
 8002e56:	6820      	ldr	r0, [r4, #0]
 8002e58:	1ac0      	subs	r0, r0, r3
 8002e5a:	6963      	ldr	r3, [r4, #20]
 8002e5c:	b2f6      	uxtb	r6, r6
 8002e5e:	4283      	cmp	r3, r0
 8002e60:	4637      	mov	r7, r6
 8002e62:	dc04      	bgt.n	8002e6e <__swbuf_r+0x42>
 8002e64:	4621      	mov	r1, r4
 8002e66:	4628      	mov	r0, r5
 8002e68:	f000 f926 	bl	80030b8 <_fflush_r>
 8002e6c:	bb28      	cbnz	r0, 8002eba <__swbuf_r+0x8e>
 8002e6e:	68a3      	ldr	r3, [r4, #8]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60a3      	str	r3, [r4, #8]
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	6022      	str	r2, [r4, #0]
 8002e7a:	701e      	strb	r6, [r3, #0]
 8002e7c:	6963      	ldr	r3, [r4, #20]
 8002e7e:	3001      	adds	r0, #1
 8002e80:	4283      	cmp	r3, r0
 8002e82:	d004      	beq.n	8002e8e <__swbuf_r+0x62>
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	07db      	lsls	r3, r3, #31
 8002e88:	d519      	bpl.n	8002ebe <__swbuf_r+0x92>
 8002e8a:	2e0a      	cmp	r6, #10
 8002e8c:	d117      	bne.n	8002ebe <__swbuf_r+0x92>
 8002e8e:	4621      	mov	r1, r4
 8002e90:	4628      	mov	r0, r5
 8002e92:	f000 f911 	bl	80030b8 <_fflush_r>
 8002e96:	b190      	cbz	r0, 8002ebe <__swbuf_r+0x92>
 8002e98:	e00f      	b.n	8002eba <__swbuf_r+0x8e>
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <__swbuf_r+0x9c>)
 8002e9c:	429c      	cmp	r4, r3
 8002e9e:	d101      	bne.n	8002ea4 <__swbuf_r+0x78>
 8002ea0:	68ac      	ldr	r4, [r5, #8]
 8002ea2:	e7d0      	b.n	8002e46 <__swbuf_r+0x1a>
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <__swbuf_r+0xa0>)
 8002ea6:	429c      	cmp	r4, r3
 8002ea8:	bf08      	it	eq
 8002eaa:	68ec      	ldreq	r4, [r5, #12]
 8002eac:	e7cb      	b.n	8002e46 <__swbuf_r+0x1a>
 8002eae:	4621      	mov	r1, r4
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f000 f80d 	bl	8002ed0 <__swsetup_r>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d0cc      	beq.n	8002e54 <__swbuf_r+0x28>
 8002eba:	f04f 37ff 	mov.w	r7, #4294967295
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	080036b8 	.word	0x080036b8
 8002ec8:	080036d8 	.word	0x080036d8
 8002ecc:	08003698 	.word	0x08003698

08002ed0 <__swsetup_r>:
 8002ed0:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <__swsetup_r+0xcc>)
 8002ed2:	b570      	push	{r4, r5, r6, lr}
 8002ed4:	681d      	ldr	r5, [r3, #0]
 8002ed6:	4606      	mov	r6, r0
 8002ed8:	460c      	mov	r4, r1
 8002eda:	b125      	cbz	r5, 8002ee6 <__swsetup_r+0x16>
 8002edc:	69ab      	ldr	r3, [r5, #24]
 8002ede:	b913      	cbnz	r3, 8002ee6 <__swsetup_r+0x16>
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f000 f953 	bl	800318c <__sinit>
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <__swsetup_r+0xd0>)
 8002ee8:	429c      	cmp	r4, r3
 8002eea:	d10f      	bne.n	8002f0c <__swsetup_r+0x3c>
 8002eec:	686c      	ldr	r4, [r5, #4]
 8002eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	0715      	lsls	r5, r2, #28
 8002ef6:	d42c      	bmi.n	8002f52 <__swsetup_r+0x82>
 8002ef8:	06d0      	lsls	r0, r2, #27
 8002efa:	d411      	bmi.n	8002f20 <__swsetup_r+0x50>
 8002efc:	2209      	movs	r2, #9
 8002efe:	6032      	str	r2, [r6, #0]
 8002f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f04:	81a3      	strh	r3, [r4, #12]
 8002f06:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0a:	e03e      	b.n	8002f8a <__swsetup_r+0xba>
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <__swsetup_r+0xd4>)
 8002f0e:	429c      	cmp	r4, r3
 8002f10:	d101      	bne.n	8002f16 <__swsetup_r+0x46>
 8002f12:	68ac      	ldr	r4, [r5, #8]
 8002f14:	e7eb      	b.n	8002eee <__swsetup_r+0x1e>
 8002f16:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <__swsetup_r+0xd8>)
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	bf08      	it	eq
 8002f1c:	68ec      	ldreq	r4, [r5, #12]
 8002f1e:	e7e6      	b.n	8002eee <__swsetup_r+0x1e>
 8002f20:	0751      	lsls	r1, r2, #29
 8002f22:	d512      	bpl.n	8002f4a <__swsetup_r+0x7a>
 8002f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f26:	b141      	cbz	r1, 8002f3a <__swsetup_r+0x6a>
 8002f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f2c:	4299      	cmp	r1, r3
 8002f2e:	d002      	beq.n	8002f36 <__swsetup_r+0x66>
 8002f30:	4630      	mov	r0, r6
 8002f32:	f000 fa19 	bl	8003368 <_free_r>
 8002f36:	2300      	movs	r3, #0
 8002f38:	6363      	str	r3, [r4, #52]	; 0x34
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f40:	81a3      	strh	r3, [r4, #12]
 8002f42:	2300      	movs	r3, #0
 8002f44:	6063      	str	r3, [r4, #4]
 8002f46:	6923      	ldr	r3, [r4, #16]
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	89a3      	ldrh	r3, [r4, #12]
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	81a3      	strh	r3, [r4, #12]
 8002f52:	6923      	ldr	r3, [r4, #16]
 8002f54:	b94b      	cbnz	r3, 8002f6a <__swsetup_r+0x9a>
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f60:	d003      	beq.n	8002f6a <__swsetup_r+0x9a>
 8002f62:	4621      	mov	r1, r4
 8002f64:	4630      	mov	r0, r6
 8002f66:	f000 f9bf 	bl	80032e8 <__smakebuf_r>
 8002f6a:	89a2      	ldrh	r2, [r4, #12]
 8002f6c:	f012 0301 	ands.w	r3, r2, #1
 8002f70:	d00c      	beq.n	8002f8c <__swsetup_r+0xbc>
 8002f72:	2300      	movs	r3, #0
 8002f74:	60a3      	str	r3, [r4, #8]
 8002f76:	6963      	ldr	r3, [r4, #20]
 8002f78:	425b      	negs	r3, r3
 8002f7a:	61a3      	str	r3, [r4, #24]
 8002f7c:	6923      	ldr	r3, [r4, #16]
 8002f7e:	b953      	cbnz	r3, 8002f96 <__swsetup_r+0xc6>
 8002f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f88:	d1ba      	bne.n	8002f00 <__swsetup_r+0x30>
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	0792      	lsls	r2, r2, #30
 8002f8e:	bf58      	it	pl
 8002f90:	6963      	ldrpl	r3, [r4, #20]
 8002f92:	60a3      	str	r3, [r4, #8]
 8002f94:	e7f2      	b.n	8002f7c <__swsetup_r+0xac>
 8002f96:	2000      	movs	r0, #0
 8002f98:	e7f7      	b.n	8002f8a <__swsetup_r+0xba>
 8002f9a:	bf00      	nop
 8002f9c:	2000000c 	.word	0x2000000c
 8002fa0:	080036b8 	.word	0x080036b8
 8002fa4:	080036d8 	.word	0x080036d8
 8002fa8:	08003698 	.word	0x08003698

08002fac <__sflush_r>:
 8002fac:	898a      	ldrh	r2, [r1, #12]
 8002fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	0710      	lsls	r0, r2, #28
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	d458      	bmi.n	800306c <__sflush_r+0xc0>
 8002fba:	684b      	ldr	r3, [r1, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	dc05      	bgt.n	8002fcc <__sflush_r+0x20>
 8002fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	dc02      	bgt.n	8002fcc <__sflush_r+0x20>
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fce:	2e00      	cmp	r6, #0
 8002fd0:	d0f9      	beq.n	8002fc6 <__sflush_r+0x1a>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fd8:	682f      	ldr	r7, [r5, #0]
 8002fda:	6a21      	ldr	r1, [r4, #32]
 8002fdc:	602b      	str	r3, [r5, #0]
 8002fde:	d032      	beq.n	8003046 <__sflush_r+0x9a>
 8002fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	075a      	lsls	r2, r3, #29
 8002fe6:	d505      	bpl.n	8002ff4 <__sflush_r+0x48>
 8002fe8:	6863      	ldr	r3, [r4, #4]
 8002fea:	1ac0      	subs	r0, r0, r3
 8002fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fee:	b10b      	cbz	r3, 8002ff4 <__sflush_r+0x48>
 8002ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ff2:	1ac0      	subs	r0, r0, r3
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ffa:	6a21      	ldr	r1, [r4, #32]
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	47b0      	blx	r6
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	d106      	bne.n	8003014 <__sflush_r+0x68>
 8003006:	6829      	ldr	r1, [r5, #0]
 8003008:	291d      	cmp	r1, #29
 800300a:	d848      	bhi.n	800309e <__sflush_r+0xf2>
 800300c:	4a29      	ldr	r2, [pc, #164]	; (80030b4 <__sflush_r+0x108>)
 800300e:	40ca      	lsrs	r2, r1
 8003010:	07d6      	lsls	r6, r2, #31
 8003012:	d544      	bpl.n	800309e <__sflush_r+0xf2>
 8003014:	2200      	movs	r2, #0
 8003016:	6062      	str	r2, [r4, #4]
 8003018:	04d9      	lsls	r1, r3, #19
 800301a:	6922      	ldr	r2, [r4, #16]
 800301c:	6022      	str	r2, [r4, #0]
 800301e:	d504      	bpl.n	800302a <__sflush_r+0x7e>
 8003020:	1c42      	adds	r2, r0, #1
 8003022:	d101      	bne.n	8003028 <__sflush_r+0x7c>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	b903      	cbnz	r3, 800302a <__sflush_r+0x7e>
 8003028:	6560      	str	r0, [r4, #84]	; 0x54
 800302a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800302c:	602f      	str	r7, [r5, #0]
 800302e:	2900      	cmp	r1, #0
 8003030:	d0c9      	beq.n	8002fc6 <__sflush_r+0x1a>
 8003032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003036:	4299      	cmp	r1, r3
 8003038:	d002      	beq.n	8003040 <__sflush_r+0x94>
 800303a:	4628      	mov	r0, r5
 800303c:	f000 f994 	bl	8003368 <_free_r>
 8003040:	2000      	movs	r0, #0
 8003042:	6360      	str	r0, [r4, #52]	; 0x34
 8003044:	e7c0      	b.n	8002fc8 <__sflush_r+0x1c>
 8003046:	2301      	movs	r3, #1
 8003048:	4628      	mov	r0, r5
 800304a:	47b0      	blx	r6
 800304c:	1c41      	adds	r1, r0, #1
 800304e:	d1c8      	bne.n	8002fe2 <__sflush_r+0x36>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0c5      	beq.n	8002fe2 <__sflush_r+0x36>
 8003056:	2b1d      	cmp	r3, #29
 8003058:	d001      	beq.n	800305e <__sflush_r+0xb2>
 800305a:	2b16      	cmp	r3, #22
 800305c:	d101      	bne.n	8003062 <__sflush_r+0xb6>
 800305e:	602f      	str	r7, [r5, #0]
 8003060:	e7b1      	b.n	8002fc6 <__sflush_r+0x1a>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003068:	81a3      	strh	r3, [r4, #12]
 800306a:	e7ad      	b.n	8002fc8 <__sflush_r+0x1c>
 800306c:	690f      	ldr	r7, [r1, #16]
 800306e:	2f00      	cmp	r7, #0
 8003070:	d0a9      	beq.n	8002fc6 <__sflush_r+0x1a>
 8003072:	0793      	lsls	r3, r2, #30
 8003074:	680e      	ldr	r6, [r1, #0]
 8003076:	bf08      	it	eq
 8003078:	694b      	ldreq	r3, [r1, #20]
 800307a:	600f      	str	r7, [r1, #0]
 800307c:	bf18      	it	ne
 800307e:	2300      	movne	r3, #0
 8003080:	eba6 0807 	sub.w	r8, r6, r7
 8003084:	608b      	str	r3, [r1, #8]
 8003086:	f1b8 0f00 	cmp.w	r8, #0
 800308a:	dd9c      	ble.n	8002fc6 <__sflush_r+0x1a>
 800308c:	4643      	mov	r3, r8
 800308e:	463a      	mov	r2, r7
 8003090:	6a21      	ldr	r1, [r4, #32]
 8003092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003094:	4628      	mov	r0, r5
 8003096:	47b0      	blx	r6
 8003098:	2800      	cmp	r0, #0
 800309a:	dc06      	bgt.n	80030aa <__sflush_r+0xfe>
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030a2:	81a3      	strh	r3, [r4, #12]
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	e78e      	b.n	8002fc8 <__sflush_r+0x1c>
 80030aa:	4407      	add	r7, r0
 80030ac:	eba8 0800 	sub.w	r8, r8, r0
 80030b0:	e7e9      	b.n	8003086 <__sflush_r+0xda>
 80030b2:	bf00      	nop
 80030b4:	20400001 	.word	0x20400001

080030b8 <_fflush_r>:
 80030b8:	b538      	push	{r3, r4, r5, lr}
 80030ba:	690b      	ldr	r3, [r1, #16]
 80030bc:	4605      	mov	r5, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	b1db      	cbz	r3, 80030fa <_fflush_r+0x42>
 80030c2:	b118      	cbz	r0, 80030cc <_fflush_r+0x14>
 80030c4:	6983      	ldr	r3, [r0, #24]
 80030c6:	b90b      	cbnz	r3, 80030cc <_fflush_r+0x14>
 80030c8:	f000 f860 	bl	800318c <__sinit>
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <_fflush_r+0x48>)
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d109      	bne.n	80030e6 <_fflush_r+0x2e>
 80030d2:	686c      	ldr	r4, [r5, #4]
 80030d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d8:	b17b      	cbz	r3, 80030fa <_fflush_r+0x42>
 80030da:	4621      	mov	r1, r4
 80030dc:	4628      	mov	r0, r5
 80030de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030e2:	f7ff bf63 	b.w	8002fac <__sflush_r>
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <_fflush_r+0x4c>)
 80030e8:	429c      	cmp	r4, r3
 80030ea:	d101      	bne.n	80030f0 <_fflush_r+0x38>
 80030ec:	68ac      	ldr	r4, [r5, #8]
 80030ee:	e7f1      	b.n	80030d4 <_fflush_r+0x1c>
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <_fflush_r+0x50>)
 80030f2:	429c      	cmp	r4, r3
 80030f4:	bf08      	it	eq
 80030f6:	68ec      	ldreq	r4, [r5, #12]
 80030f8:	e7ec      	b.n	80030d4 <_fflush_r+0x1c>
 80030fa:	2000      	movs	r0, #0
 80030fc:	bd38      	pop	{r3, r4, r5, pc}
 80030fe:	bf00      	nop
 8003100:	080036b8 	.word	0x080036b8
 8003104:	080036d8 	.word	0x080036d8
 8003108:	08003698 	.word	0x08003698

0800310c <std>:
 800310c:	2300      	movs	r3, #0
 800310e:	b510      	push	{r4, lr}
 8003110:	4604      	mov	r4, r0
 8003112:	e9c0 3300 	strd	r3, r3, [r0]
 8003116:	6083      	str	r3, [r0, #8]
 8003118:	8181      	strh	r1, [r0, #12]
 800311a:	6643      	str	r3, [r0, #100]	; 0x64
 800311c:	81c2      	strh	r2, [r0, #14]
 800311e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003122:	6183      	str	r3, [r0, #24]
 8003124:	4619      	mov	r1, r3
 8003126:	2208      	movs	r2, #8
 8003128:	305c      	adds	r0, #92	; 0x5c
 800312a:	f7ff fe13 	bl	8002d54 <memset>
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <std+0x38>)
 8003130:	6263      	str	r3, [r4, #36]	; 0x24
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <std+0x3c>)
 8003134:	62a3      	str	r3, [r4, #40]	; 0x28
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <std+0x40>)
 8003138:	62e3      	str	r3, [r4, #44]	; 0x2c
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <std+0x44>)
 800313c:	6224      	str	r4, [r4, #32]
 800313e:	6323      	str	r3, [r4, #48]	; 0x30
 8003140:	bd10      	pop	{r4, pc}
 8003142:	bf00      	nop
 8003144:	080034d9 	.word	0x080034d9
 8003148:	080034fb 	.word	0x080034fb
 800314c:	08003533 	.word	0x08003533
 8003150:	08003557 	.word	0x08003557

08003154 <_cleanup_r>:
 8003154:	4901      	ldr	r1, [pc, #4]	; (800315c <_cleanup_r+0x8>)
 8003156:	f000 b885 	b.w	8003264 <_fwalk_reent>
 800315a:	bf00      	nop
 800315c:	080030b9 	.word	0x080030b9

08003160 <__sfmoreglue>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	1e4a      	subs	r2, r1, #1
 8003164:	2568      	movs	r5, #104	; 0x68
 8003166:	4355      	muls	r5, r2
 8003168:	460e      	mov	r6, r1
 800316a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800316e:	f000 f949 	bl	8003404 <_malloc_r>
 8003172:	4604      	mov	r4, r0
 8003174:	b140      	cbz	r0, 8003188 <__sfmoreglue+0x28>
 8003176:	2100      	movs	r1, #0
 8003178:	e9c0 1600 	strd	r1, r6, [r0]
 800317c:	300c      	adds	r0, #12
 800317e:	60a0      	str	r0, [r4, #8]
 8003180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003184:	f7ff fde6 	bl	8002d54 <memset>
 8003188:	4620      	mov	r0, r4
 800318a:	bd70      	pop	{r4, r5, r6, pc}

0800318c <__sinit>:
 800318c:	6983      	ldr	r3, [r0, #24]
 800318e:	b510      	push	{r4, lr}
 8003190:	4604      	mov	r4, r0
 8003192:	bb33      	cbnz	r3, 80031e2 <__sinit+0x56>
 8003194:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003198:	6503      	str	r3, [r0, #80]	; 0x50
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <__sinit+0x58>)
 800319c:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <__sinit+0x5c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6282      	str	r2, [r0, #40]	; 0x28
 80031a2:	4298      	cmp	r0, r3
 80031a4:	bf04      	itt	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	6183      	streq	r3, [r0, #24]
 80031aa:	f000 f81f 	bl	80031ec <__sfp>
 80031ae:	6060      	str	r0, [r4, #4]
 80031b0:	4620      	mov	r0, r4
 80031b2:	f000 f81b 	bl	80031ec <__sfp>
 80031b6:	60a0      	str	r0, [r4, #8]
 80031b8:	4620      	mov	r0, r4
 80031ba:	f000 f817 	bl	80031ec <__sfp>
 80031be:	2200      	movs	r2, #0
 80031c0:	60e0      	str	r0, [r4, #12]
 80031c2:	2104      	movs	r1, #4
 80031c4:	6860      	ldr	r0, [r4, #4]
 80031c6:	f7ff ffa1 	bl	800310c <std>
 80031ca:	2201      	movs	r2, #1
 80031cc:	2109      	movs	r1, #9
 80031ce:	68a0      	ldr	r0, [r4, #8]
 80031d0:	f7ff ff9c 	bl	800310c <std>
 80031d4:	2202      	movs	r2, #2
 80031d6:	2112      	movs	r1, #18
 80031d8:	68e0      	ldr	r0, [r4, #12]
 80031da:	f7ff ff97 	bl	800310c <std>
 80031de:	2301      	movs	r3, #1
 80031e0:	61a3      	str	r3, [r4, #24]
 80031e2:	bd10      	pop	{r4, pc}
 80031e4:	08003694 	.word	0x08003694
 80031e8:	08003155 	.word	0x08003155

080031ec <__sfp>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <__sfp+0x70>)
 80031f0:	681e      	ldr	r6, [r3, #0]
 80031f2:	69b3      	ldr	r3, [r6, #24]
 80031f4:	4607      	mov	r7, r0
 80031f6:	b913      	cbnz	r3, 80031fe <__sfp+0x12>
 80031f8:	4630      	mov	r0, r6
 80031fa:	f7ff ffc7 	bl	800318c <__sinit>
 80031fe:	3648      	adds	r6, #72	; 0x48
 8003200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003204:	3b01      	subs	r3, #1
 8003206:	d503      	bpl.n	8003210 <__sfp+0x24>
 8003208:	6833      	ldr	r3, [r6, #0]
 800320a:	b133      	cbz	r3, 800321a <__sfp+0x2e>
 800320c:	6836      	ldr	r6, [r6, #0]
 800320e:	e7f7      	b.n	8003200 <__sfp+0x14>
 8003210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003214:	b16d      	cbz	r5, 8003232 <__sfp+0x46>
 8003216:	3468      	adds	r4, #104	; 0x68
 8003218:	e7f4      	b.n	8003204 <__sfp+0x18>
 800321a:	2104      	movs	r1, #4
 800321c:	4638      	mov	r0, r7
 800321e:	f7ff ff9f 	bl	8003160 <__sfmoreglue>
 8003222:	6030      	str	r0, [r6, #0]
 8003224:	2800      	cmp	r0, #0
 8003226:	d1f1      	bne.n	800320c <__sfp+0x20>
 8003228:	230c      	movs	r3, #12
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4604      	mov	r4, r0
 800322e:	4620      	mov	r0, r4
 8003230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <__sfp+0x74>)
 8003234:	6665      	str	r5, [r4, #100]	; 0x64
 8003236:	e9c4 5500 	strd	r5, r5, [r4]
 800323a:	60a5      	str	r5, [r4, #8]
 800323c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003240:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003244:	2208      	movs	r2, #8
 8003246:	4629      	mov	r1, r5
 8003248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800324c:	f7ff fd82 	bl	8002d54 <memset>
 8003250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003258:	e7e9      	b.n	800322e <__sfp+0x42>
 800325a:	bf00      	nop
 800325c:	08003694 	.word	0x08003694
 8003260:	ffff0001 	.word	0xffff0001

08003264 <_fwalk_reent>:
 8003264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003268:	4680      	mov	r8, r0
 800326a:	4689      	mov	r9, r1
 800326c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003270:	2600      	movs	r6, #0
 8003272:	b914      	cbnz	r4, 800327a <_fwalk_reent+0x16>
 8003274:	4630      	mov	r0, r6
 8003276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800327a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800327e:	3f01      	subs	r7, #1
 8003280:	d501      	bpl.n	8003286 <_fwalk_reent+0x22>
 8003282:	6824      	ldr	r4, [r4, #0]
 8003284:	e7f5      	b.n	8003272 <_fwalk_reent+0xe>
 8003286:	89ab      	ldrh	r3, [r5, #12]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d907      	bls.n	800329c <_fwalk_reent+0x38>
 800328c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003290:	3301      	adds	r3, #1
 8003292:	d003      	beq.n	800329c <_fwalk_reent+0x38>
 8003294:	4629      	mov	r1, r5
 8003296:	4640      	mov	r0, r8
 8003298:	47c8      	blx	r9
 800329a:	4306      	orrs	r6, r0
 800329c:	3568      	adds	r5, #104	; 0x68
 800329e:	e7ee      	b.n	800327e <_fwalk_reent+0x1a>

080032a0 <__swhatbuf_r>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	460e      	mov	r6, r1
 80032a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a8:	2900      	cmp	r1, #0
 80032aa:	b096      	sub	sp, #88	; 0x58
 80032ac:	4614      	mov	r4, r2
 80032ae:	461d      	mov	r5, r3
 80032b0:	da07      	bge.n	80032c2 <__swhatbuf_r+0x22>
 80032b2:	2300      	movs	r3, #0
 80032b4:	602b      	str	r3, [r5, #0]
 80032b6:	89b3      	ldrh	r3, [r6, #12]
 80032b8:	061a      	lsls	r2, r3, #24
 80032ba:	d410      	bmi.n	80032de <__swhatbuf_r+0x3e>
 80032bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c0:	e00e      	b.n	80032e0 <__swhatbuf_r+0x40>
 80032c2:	466a      	mov	r2, sp
 80032c4:	f000 f96e 	bl	80035a4 <_fstat_r>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	dbf2      	blt.n	80032b2 <__swhatbuf_r+0x12>
 80032cc:	9a01      	ldr	r2, [sp, #4]
 80032ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032d6:	425a      	negs	r2, r3
 80032d8:	415a      	adcs	r2, r3
 80032da:	602a      	str	r2, [r5, #0]
 80032dc:	e7ee      	b.n	80032bc <__swhatbuf_r+0x1c>
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	2000      	movs	r0, #0
 80032e2:	6023      	str	r3, [r4, #0]
 80032e4:	b016      	add	sp, #88	; 0x58
 80032e6:	bd70      	pop	{r4, r5, r6, pc}

080032e8 <__smakebuf_r>:
 80032e8:	898b      	ldrh	r3, [r1, #12]
 80032ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032ec:	079d      	lsls	r5, r3, #30
 80032ee:	4606      	mov	r6, r0
 80032f0:	460c      	mov	r4, r1
 80032f2:	d507      	bpl.n	8003304 <__smakebuf_r+0x1c>
 80032f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	6123      	str	r3, [r4, #16]
 80032fc:	2301      	movs	r3, #1
 80032fe:	6163      	str	r3, [r4, #20]
 8003300:	b002      	add	sp, #8
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	ab01      	add	r3, sp, #4
 8003306:	466a      	mov	r2, sp
 8003308:	f7ff ffca 	bl	80032a0 <__swhatbuf_r>
 800330c:	9900      	ldr	r1, [sp, #0]
 800330e:	4605      	mov	r5, r0
 8003310:	4630      	mov	r0, r6
 8003312:	f000 f877 	bl	8003404 <_malloc_r>
 8003316:	b948      	cbnz	r0, 800332c <__smakebuf_r+0x44>
 8003318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331c:	059a      	lsls	r2, r3, #22
 800331e:	d4ef      	bmi.n	8003300 <__smakebuf_r+0x18>
 8003320:	f023 0303 	bic.w	r3, r3, #3
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	81a3      	strh	r3, [r4, #12]
 800332a:	e7e3      	b.n	80032f4 <__smakebuf_r+0xc>
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <__smakebuf_r+0x7c>)
 800332e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	6020      	str	r0, [r4, #0]
 8003334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	9b00      	ldr	r3, [sp, #0]
 800333c:	6163      	str	r3, [r4, #20]
 800333e:	9b01      	ldr	r3, [sp, #4]
 8003340:	6120      	str	r0, [r4, #16]
 8003342:	b15b      	cbz	r3, 800335c <__smakebuf_r+0x74>
 8003344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003348:	4630      	mov	r0, r6
 800334a:	f000 f93d 	bl	80035c8 <_isatty_r>
 800334e:	b128      	cbz	r0, 800335c <__smakebuf_r+0x74>
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	81a3      	strh	r3, [r4, #12]
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	431d      	orrs	r5, r3
 8003360:	81a5      	strh	r5, [r4, #12]
 8003362:	e7cd      	b.n	8003300 <__smakebuf_r+0x18>
 8003364:	08003155 	.word	0x08003155

08003368 <_free_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4605      	mov	r5, r0
 800336c:	2900      	cmp	r1, #0
 800336e:	d045      	beq.n	80033fc <_free_r+0x94>
 8003370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003374:	1f0c      	subs	r4, r1, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	bfb8      	it	lt
 800337a:	18e4      	addlt	r4, r4, r3
 800337c:	f000 f946 	bl	800360c <__malloc_lock>
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <_free_r+0x98>)
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	4610      	mov	r0, r2
 8003386:	b933      	cbnz	r3, 8003396 <_free_r+0x2e>
 8003388:	6063      	str	r3, [r4, #4]
 800338a:	6014      	str	r4, [r2, #0]
 800338c:	4628      	mov	r0, r5
 800338e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003392:	f000 b93c 	b.w	800360e <__malloc_unlock>
 8003396:	42a3      	cmp	r3, r4
 8003398:	d90c      	bls.n	80033b4 <_free_r+0x4c>
 800339a:	6821      	ldr	r1, [r4, #0]
 800339c:	1862      	adds	r2, r4, r1
 800339e:	4293      	cmp	r3, r2
 80033a0:	bf04      	itt	eq
 80033a2:	681a      	ldreq	r2, [r3, #0]
 80033a4:	685b      	ldreq	r3, [r3, #4]
 80033a6:	6063      	str	r3, [r4, #4]
 80033a8:	bf04      	itt	eq
 80033aa:	1852      	addeq	r2, r2, r1
 80033ac:	6022      	streq	r2, [r4, #0]
 80033ae:	6004      	str	r4, [r0, #0]
 80033b0:	e7ec      	b.n	800338c <_free_r+0x24>
 80033b2:	4613      	mov	r3, r2
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	b10a      	cbz	r2, 80033bc <_free_r+0x54>
 80033b8:	42a2      	cmp	r2, r4
 80033ba:	d9fa      	bls.n	80033b2 <_free_r+0x4a>
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	1858      	adds	r0, r3, r1
 80033c0:	42a0      	cmp	r0, r4
 80033c2:	d10b      	bne.n	80033dc <_free_r+0x74>
 80033c4:	6820      	ldr	r0, [r4, #0]
 80033c6:	4401      	add	r1, r0
 80033c8:	1858      	adds	r0, r3, r1
 80033ca:	4282      	cmp	r2, r0
 80033cc:	6019      	str	r1, [r3, #0]
 80033ce:	d1dd      	bne.n	800338c <_free_r+0x24>
 80033d0:	6810      	ldr	r0, [r2, #0]
 80033d2:	6852      	ldr	r2, [r2, #4]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	4401      	add	r1, r0
 80033d8:	6019      	str	r1, [r3, #0]
 80033da:	e7d7      	b.n	800338c <_free_r+0x24>
 80033dc:	d902      	bls.n	80033e4 <_free_r+0x7c>
 80033de:	230c      	movs	r3, #12
 80033e0:	602b      	str	r3, [r5, #0]
 80033e2:	e7d3      	b.n	800338c <_free_r+0x24>
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	1821      	adds	r1, r4, r0
 80033e8:	428a      	cmp	r2, r1
 80033ea:	bf04      	itt	eq
 80033ec:	6811      	ldreq	r1, [r2, #0]
 80033ee:	6852      	ldreq	r2, [r2, #4]
 80033f0:	6062      	str	r2, [r4, #4]
 80033f2:	bf04      	itt	eq
 80033f4:	1809      	addeq	r1, r1, r0
 80033f6:	6021      	streq	r1, [r4, #0]
 80033f8:	605c      	str	r4, [r3, #4]
 80033fa:	e7c7      	b.n	800338c <_free_r+0x24>
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
 80033fe:	bf00      	nop
 8003400:	20000094 	.word	0x20000094

08003404 <_malloc_r>:
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	1ccd      	adds	r5, r1, #3
 8003408:	f025 0503 	bic.w	r5, r5, #3
 800340c:	3508      	adds	r5, #8
 800340e:	2d0c      	cmp	r5, #12
 8003410:	bf38      	it	cc
 8003412:	250c      	movcc	r5, #12
 8003414:	2d00      	cmp	r5, #0
 8003416:	4606      	mov	r6, r0
 8003418:	db01      	blt.n	800341e <_malloc_r+0x1a>
 800341a:	42a9      	cmp	r1, r5
 800341c:	d903      	bls.n	8003426 <_malloc_r+0x22>
 800341e:	230c      	movs	r3, #12
 8003420:	6033      	str	r3, [r6, #0]
 8003422:	2000      	movs	r0, #0
 8003424:	bd70      	pop	{r4, r5, r6, pc}
 8003426:	f000 f8f1 	bl	800360c <__malloc_lock>
 800342a:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <_malloc_r+0xac>)
 800342c:	6814      	ldr	r4, [r2, #0]
 800342e:	4621      	mov	r1, r4
 8003430:	b991      	cbnz	r1, 8003458 <_malloc_r+0x54>
 8003432:	4c20      	ldr	r4, [pc, #128]	; (80034b4 <_malloc_r+0xb0>)
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	b91b      	cbnz	r3, 8003440 <_malloc_r+0x3c>
 8003438:	4630      	mov	r0, r6
 800343a:	f000 f83d 	bl	80034b8 <_sbrk_r>
 800343e:	6020      	str	r0, [r4, #0]
 8003440:	4629      	mov	r1, r5
 8003442:	4630      	mov	r0, r6
 8003444:	f000 f838 	bl	80034b8 <_sbrk_r>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d124      	bne.n	8003496 <_malloc_r+0x92>
 800344c:	230c      	movs	r3, #12
 800344e:	6033      	str	r3, [r6, #0]
 8003450:	4630      	mov	r0, r6
 8003452:	f000 f8dc 	bl	800360e <__malloc_unlock>
 8003456:	e7e4      	b.n	8003422 <_malloc_r+0x1e>
 8003458:	680b      	ldr	r3, [r1, #0]
 800345a:	1b5b      	subs	r3, r3, r5
 800345c:	d418      	bmi.n	8003490 <_malloc_r+0x8c>
 800345e:	2b0b      	cmp	r3, #11
 8003460:	d90f      	bls.n	8003482 <_malloc_r+0x7e>
 8003462:	600b      	str	r3, [r1, #0]
 8003464:	50cd      	str	r5, [r1, r3]
 8003466:	18cc      	adds	r4, r1, r3
 8003468:	4630      	mov	r0, r6
 800346a:	f000 f8d0 	bl	800360e <__malloc_unlock>
 800346e:	f104 000b 	add.w	r0, r4, #11
 8003472:	1d23      	adds	r3, r4, #4
 8003474:	f020 0007 	bic.w	r0, r0, #7
 8003478:	1ac3      	subs	r3, r0, r3
 800347a:	d0d3      	beq.n	8003424 <_malloc_r+0x20>
 800347c:	425a      	negs	r2, r3
 800347e:	50e2      	str	r2, [r4, r3]
 8003480:	e7d0      	b.n	8003424 <_malloc_r+0x20>
 8003482:	428c      	cmp	r4, r1
 8003484:	684b      	ldr	r3, [r1, #4]
 8003486:	bf16      	itet	ne
 8003488:	6063      	strne	r3, [r4, #4]
 800348a:	6013      	streq	r3, [r2, #0]
 800348c:	460c      	movne	r4, r1
 800348e:	e7eb      	b.n	8003468 <_malloc_r+0x64>
 8003490:	460c      	mov	r4, r1
 8003492:	6849      	ldr	r1, [r1, #4]
 8003494:	e7cc      	b.n	8003430 <_malloc_r+0x2c>
 8003496:	1cc4      	adds	r4, r0, #3
 8003498:	f024 0403 	bic.w	r4, r4, #3
 800349c:	42a0      	cmp	r0, r4
 800349e:	d005      	beq.n	80034ac <_malloc_r+0xa8>
 80034a0:	1a21      	subs	r1, r4, r0
 80034a2:	4630      	mov	r0, r6
 80034a4:	f000 f808 	bl	80034b8 <_sbrk_r>
 80034a8:	3001      	adds	r0, #1
 80034aa:	d0cf      	beq.n	800344c <_malloc_r+0x48>
 80034ac:	6025      	str	r5, [r4, #0]
 80034ae:	e7db      	b.n	8003468 <_malloc_r+0x64>
 80034b0:	20000094 	.word	0x20000094
 80034b4:	20000098 	.word	0x20000098

080034b8 <_sbrk_r>:
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	4c06      	ldr	r4, [pc, #24]	; (80034d4 <_sbrk_r+0x1c>)
 80034bc:	2300      	movs	r3, #0
 80034be:	4605      	mov	r5, r0
 80034c0:	4608      	mov	r0, r1
 80034c2:	6023      	str	r3, [r4, #0]
 80034c4:	f7fd f8be 	bl	8000644 <_sbrk>
 80034c8:	1c43      	adds	r3, r0, #1
 80034ca:	d102      	bne.n	80034d2 <_sbrk_r+0x1a>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	b103      	cbz	r3, 80034d2 <_sbrk_r+0x1a>
 80034d0:	602b      	str	r3, [r5, #0]
 80034d2:	bd38      	pop	{r3, r4, r5, pc}
 80034d4:	20000120 	.word	0x20000120

080034d8 <__sread>:
 80034d8:	b510      	push	{r4, lr}
 80034da:	460c      	mov	r4, r1
 80034dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e0:	f000 f896 	bl	8003610 <_read_r>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	bfab      	itete	ge
 80034e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034ea:	89a3      	ldrhlt	r3, [r4, #12]
 80034ec:	181b      	addge	r3, r3, r0
 80034ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034f2:	bfac      	ite	ge
 80034f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80034f6:	81a3      	strhlt	r3, [r4, #12]
 80034f8:	bd10      	pop	{r4, pc}

080034fa <__swrite>:
 80034fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fe:	461f      	mov	r7, r3
 8003500:	898b      	ldrh	r3, [r1, #12]
 8003502:	05db      	lsls	r3, r3, #23
 8003504:	4605      	mov	r5, r0
 8003506:	460c      	mov	r4, r1
 8003508:	4616      	mov	r6, r2
 800350a:	d505      	bpl.n	8003518 <__swrite+0x1e>
 800350c:	2302      	movs	r3, #2
 800350e:	2200      	movs	r2, #0
 8003510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003514:	f000 f868 	bl	80035e8 <_lseek_r>
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800351e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003522:	81a3      	strh	r3, [r4, #12]
 8003524:	4632      	mov	r2, r6
 8003526:	463b      	mov	r3, r7
 8003528:	4628      	mov	r0, r5
 800352a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800352e:	f000 b817 	b.w	8003560 <_write_r>

08003532 <__sseek>:
 8003532:	b510      	push	{r4, lr}
 8003534:	460c      	mov	r4, r1
 8003536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800353a:	f000 f855 	bl	80035e8 <_lseek_r>
 800353e:	1c43      	adds	r3, r0, #1
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	bf15      	itete	ne
 8003544:	6560      	strne	r0, [r4, #84]	; 0x54
 8003546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800354a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800354e:	81a3      	strheq	r3, [r4, #12]
 8003550:	bf18      	it	ne
 8003552:	81a3      	strhne	r3, [r4, #12]
 8003554:	bd10      	pop	{r4, pc}

08003556 <__sclose>:
 8003556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800355a:	f000 b813 	b.w	8003584 <_close_r>
	...

08003560 <_write_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4c07      	ldr	r4, [pc, #28]	; (8003580 <_write_r+0x20>)
 8003564:	4605      	mov	r5, r0
 8003566:	4608      	mov	r0, r1
 8003568:	4611      	mov	r1, r2
 800356a:	2200      	movs	r2, #0
 800356c:	6022      	str	r2, [r4, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	f7fc fe30 	bl	80001d4 <_write>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d102      	bne.n	800357e <_write_r+0x1e>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	b103      	cbz	r3, 800357e <_write_r+0x1e>
 800357c:	602b      	str	r3, [r5, #0]
 800357e:	bd38      	pop	{r3, r4, r5, pc}
 8003580:	20000120 	.word	0x20000120

08003584 <_close_r>:
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	4c06      	ldr	r4, [pc, #24]	; (80035a0 <_close_r+0x1c>)
 8003588:	2300      	movs	r3, #0
 800358a:	4605      	mov	r5, r0
 800358c:	4608      	mov	r0, r1
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	f7fd f823 	bl	80005da <_close>
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	d102      	bne.n	800359e <_close_r+0x1a>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	b103      	cbz	r3, 800359e <_close_r+0x1a>
 800359c:	602b      	str	r3, [r5, #0]
 800359e:	bd38      	pop	{r3, r4, r5, pc}
 80035a0:	20000120 	.word	0x20000120

080035a4 <_fstat_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4c07      	ldr	r4, [pc, #28]	; (80035c4 <_fstat_r+0x20>)
 80035a8:	2300      	movs	r3, #0
 80035aa:	4605      	mov	r5, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	f7fd f81e 	bl	80005f2 <_fstat>
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	d102      	bne.n	80035c0 <_fstat_r+0x1c>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	b103      	cbz	r3, 80035c0 <_fstat_r+0x1c>
 80035be:	602b      	str	r3, [r5, #0]
 80035c0:	bd38      	pop	{r3, r4, r5, pc}
 80035c2:	bf00      	nop
 80035c4:	20000120 	.word	0x20000120

080035c8 <_isatty_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4c06      	ldr	r4, [pc, #24]	; (80035e4 <_isatty_r+0x1c>)
 80035cc:	2300      	movs	r3, #0
 80035ce:	4605      	mov	r5, r0
 80035d0:	4608      	mov	r0, r1
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	f7fd f81d 	bl	8000612 <_isatty>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_isatty_r+0x1a>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_isatty_r+0x1a>
 80035e0:	602b      	str	r3, [r5, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	20000120 	.word	0x20000120

080035e8 <_lseek_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4c07      	ldr	r4, [pc, #28]	; (8003608 <_lseek_r+0x20>)
 80035ec:	4605      	mov	r5, r0
 80035ee:	4608      	mov	r0, r1
 80035f0:	4611      	mov	r1, r2
 80035f2:	2200      	movs	r2, #0
 80035f4:	6022      	str	r2, [r4, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f7fd f816 	bl	8000628 <_lseek>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d102      	bne.n	8003606 <_lseek_r+0x1e>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	b103      	cbz	r3, 8003606 <_lseek_r+0x1e>
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	20000120 	.word	0x20000120

0800360c <__malloc_lock>:
 800360c:	4770      	bx	lr

0800360e <__malloc_unlock>:
 800360e:	4770      	bx	lr

08003610 <_read_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4c07      	ldr	r4, [pc, #28]	; (8003630 <_read_r+0x20>)
 8003614:	4605      	mov	r5, r0
 8003616:	4608      	mov	r0, r1
 8003618:	4611      	mov	r1, r2
 800361a:	2200      	movs	r2, #0
 800361c:	6022      	str	r2, [r4, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	f7fc ffbe 	bl	80005a0 <_read>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_read_r+0x1e>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	b103      	cbz	r3, 800362e <_read_r+0x1e>
 800362c:	602b      	str	r3, [r5, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	20000120 	.word	0x20000120

08003634 <_init>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr

08003640 <_fini>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr
