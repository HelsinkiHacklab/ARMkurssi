
nucleo-f303_sx1509-basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008518  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c8  080087c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080087c8  080087c8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087c8  080087c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080087d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000359c  20000074  0800884c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003610  0800884c  00023610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021644  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f62  00000000  00000000  000416e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a48  00000000  00000000  00045650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018b0  00000000  00000000  00047098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000732c  00000000  00000000  00048948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000149b3  00000000  00000000  0004fc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c342c  00000000  00000000  00064627  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127a53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074a8  00000000  00000000  00127ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086a0 	.word	0x080086a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080086a0 	.word	0x080086a0

080001e0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	4618      	mov	r0, r3
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr

080001f8 <_ZN6sx15095ioexp10getEXTIPinEv>:
	void clearPort(uint16_t portMask);
	uint16_t getPort();
	void setBit(uint8_t bitIndex);
	void clearBit(uint8_t bitIndex);
	bool getBit(uint8_t bitIndex);
	uint16_t getEXTIPin() { return intPin; };
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	8b1b      	ldrh	r3, [r3, #24]
 8000204:	4618      	mov	r0, r3
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <_ZN6sx15095DelayEm>:
static StackType_t extiStack[EXTI_STACKSIZE];
static StaticTask_t extiTCB;
static TaskHandle_t hEXTI;


void Delay( uint32_t ms ) { vTaskDelay(ms / portTICK_PERIOD_MS); }
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f006 fc19 	bl	8006a50 <vTaskDelay>
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE>:

ioexpStat_t ioexp::lastStatus;
TaskHandle_t ioexp::hHandler;
std::vector<ioexp *> ioexp::expanders;

ioexp::ioexp(I2C_HandleTypeDef *hI2C, uint8_t i2cAddr, GPIO_TypeDef *reset_Port, uint16_t reset_Pin, GPIO_TypeDef *int_Port, uint16_t int_Pin, initMode_t mode) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b08a      	sub	sp, #40	; 0x28
 800022c:	af04      	add	r7, sp, #16
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	603b      	str	r3, [r7, #0]
 8000234:	4613      	mov	r3, r2
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4a62      	ldr	r2, [pc, #392]	; (80003c4 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x19c>)
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	hi2c = hI2C;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	605a      	str	r2, [r3, #4]
	i2caddr = i2cAddr<<1;
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	b2da      	uxtb	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	721a      	strb	r2, [r3, #8]
	resetPort = reset_Port;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	60da      	str	r2, [r3, #12]
	resetPin = reset_Pin;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	8c3a      	ldrh	r2, [r7, #32]
 8000258:	821a      	strh	r2, [r3, #16]
	intPort = int_Port;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800025e:	615a      	str	r2, [r3, #20]
	intPin = int_Pin;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000264:	831a      	strh	r2, [r3, #24]
	portData = 0;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2200      	movs	r2, #0
 800026a:	835a      	strh	r2, [r3, #26]

	// resetoidaan piiri
	HAL_GPIO_WritePin(resetPort, resetPin, GPIO_PIN_RESET);
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	68d8      	ldr	r0, [r3, #12]
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	8a1b      	ldrh	r3, [r3, #16]
 8000274:	2200      	movs	r2, #0
 8000276:	4619      	mov	r1, r3
 8000278:	f001 fe50 	bl	8001f1c <HAL_GPIO_WritePin>
	Delay(1);
 800027c:	2001      	movs	r0, #1
 800027e:	f7ff ffc7 	bl	8000210 <_ZN6sx15095DelayEm>
	HAL_GPIO_WritePin(resetPort, resetPin, GPIO_PIN_SET);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	68d8      	ldr	r0, [r3, #12]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	8a1b      	ldrh	r3, [r3, #16]
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	f001 fe45 	bl	8001f1c <HAL_GPIO_WritePin>
	Delay(10);
 8000292:	200a      	movs	r0, #10
 8000294:	f7ff ffbc 	bl	8000210 <_ZN6sx15095DelayEm>

	// tsekataan että se näkyy i2c-väylässä
	stat = HAL_I2C_IsDeviceReady(hi2c, i2caddr, SX1509_I2C_RETRY_CNT, SX1509_I2C_TIMEOUT );
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	6858      	ldr	r0, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	7a1b      	ldrb	r3, [r3, #8]
 80002a0:	b299      	uxth	r1, r3
 80002a2:	2302      	movs	r3, #2
 80002a4:	2202      	movs	r2, #2
 80002a6:	f002 f931 	bl	800250c <HAL_I2C_IsDeviceReady>
 80002aa:	4603      	mov	r3, r0
 80002ac:	75fb      	strb	r3, [r7, #23]
	if ( stat != HAL_I2C_ERROR_NONE ) {
 80002ae:	7dfb      	ldrb	r3, [r7, #23]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x94>
		ioexp::lastStatus = expERROR;
 80002b4:	4b44      	ldr	r3, [pc, #272]	; (80003c8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1a0>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
 80002ba:	e07d      	b.n	80003b8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x190>
	}
	else {
		ioexp::lastStatus = expOK;
 80002bc:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1a0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
		// asetetaan portit aloitusmodeen
		writeRegister( RegDataA, 0x00 );
 80002c2:	2200      	movs	r2, #0
 80002c4:	2111      	movs	r1, #17
 80002c6:	68f8      	ldr	r0, [r7, #12]
 80002c8:	f000 f93e 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
		writeRegister( RegDataB, 0x00 );
 80002cc:	2200      	movs	r2, #0
 80002ce:	2110      	movs	r1, #16
 80002d0:	68f8      	ldr	r0, [r7, #12]
 80002d2:	f000 f939 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
		switch ( mode ) {
 80002d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80002da:	2b03      	cmp	r3, #3
 80002dc:	d836      	bhi.n	800034c <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x124>
 80002de:	a201      	add	r2, pc, #4	; (adr r2, 80002e4 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0xbc>)
 80002e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e4:	080002f5 	.word	0x080002f5
 80002e8:	0800030b 	.word	0x0800030b
 80002ec:	08000321 	.word	0x08000321
 80002f0:	08000337 	.word	0x08000337
			case inin: {
				writeRegister( RegDirA, 0xff );
 80002f4:	22ff      	movs	r2, #255	; 0xff
 80002f6:	210f      	movs	r1, #15
 80002f8:	68f8      	ldr	r0, [r7, #12]
 80002fa:	f000 f925 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				writeRegister( RegDirB, 0xff );
 80002fe:	22ff      	movs	r2, #255	; 0xff
 8000300:	210e      	movs	r1, #14
 8000302:	68f8      	ldr	r0, [r7, #12]
 8000304:	f000 f920 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				break;
 8000308:	e02a      	b.n	8000360 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x138>
			}
			case inout: {
				writeRegister( RegDirA, 0xff );
 800030a:	22ff      	movs	r2, #255	; 0xff
 800030c:	210f      	movs	r1, #15
 800030e:	68f8      	ldr	r0, [r7, #12]
 8000310:	f000 f91a 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				writeRegister( RegDirB, 0x00 );
 8000314:	2200      	movs	r2, #0
 8000316:	210e      	movs	r1, #14
 8000318:	68f8      	ldr	r0, [r7, #12]
 800031a:	f000 f915 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				break;
 800031e:	e01f      	b.n	8000360 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x138>

			}
			case outin: {
				writeRegister( RegDirA, 0x00 );
 8000320:	2200      	movs	r2, #0
 8000322:	210f      	movs	r1, #15
 8000324:	68f8      	ldr	r0, [r7, #12]
 8000326:	f000 f90f 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				writeRegister( RegDirB, 0xff );
 800032a:	22ff      	movs	r2, #255	; 0xff
 800032c:	210e      	movs	r1, #14
 800032e:	68f8      	ldr	r0, [r7, #12]
 8000330:	f000 f90a 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				break;
 8000334:	e014      	b.n	8000360 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x138>

			}
			case outout: {
				writeRegister( RegDirA, 0x00 );
 8000336:	2200      	movs	r2, #0
 8000338:	210f      	movs	r1, #15
 800033a:	68f8      	ldr	r0, [r7, #12]
 800033c:	f000 f904 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				writeRegister( RegDirB, 0x00 );
 8000340:	2200      	movs	r2, #0
 8000342:	210e      	movs	r1, #14
 8000344:	68f8      	ldr	r0, [r7, #12]
 8000346:	f000 f8ff 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				break;
 800034a:	e009      	b.n	8000360 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x138>

			}
			default: {
				writeRegister( RegDirA, 0xff );
 800034c:	22ff      	movs	r2, #255	; 0xff
 800034e:	210f      	movs	r1, #15
 8000350:	68f8      	ldr	r0, [r7, #12]
 8000352:	f000 f8f9 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
				writeRegister( RegDirB, 0xff );
 8000356:	22ff      	movs	r2, #255	; 0xff
 8000358:	210e      	movs	r1, #14
 800035a:	68f8      	ldr	r0, [r7, #12]
 800035c:	f000 f8f4 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>

			}
		}

		if ( expanders.empty() ) {
 8000360:	481a      	ldr	r0, [pc, #104]	; (80003cc <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1a4>)
 8000362:	f000 f982 	bl	800066a <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE5emptyEv>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d01d      	beq.n	80003a8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x180>
			hEXTISync = xSemaphoreCreateBinaryStatic( &EXTISyncBuffer );
 800036c:	2303      	movs	r3, #3
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1a8>)
 8000372:	2200      	movs	r2, #0
 8000374:	2100      	movs	r1, #0
 8000376:	2001      	movs	r0, #1
 8000378:	f005 fc8e 	bl	8005c98 <xQueueGenericCreateStatic>
 800037c:	4602      	mov	r2, r0
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1ac>)
 8000380:	601a      	str	r2, [r3, #0]
			hEXTI = xTaskCreateStatic( extiHandler, "EXTI", EXTI_STACKSIZE, NULL, tskIDLE_PRIORITY+3, extiStack, &extiTCB );
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1b0>)
 8000384:	9302      	str	r3, [sp, #8]
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1b4>)
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2303      	movs	r3, #3
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	4913      	ldr	r1, [pc, #76]	; (80003e0 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1b8>)
 8000394:	4813      	ldr	r0, [pc, #76]	; (80003e4 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1bc>)
 8000396:	f006 fa0b 	bl	80067b0 <xTaskCreateStatic>
 800039a:	4602      	mov	r2, r0
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1c0>)
 800039e:	601a      	str	r2, [r3, #0]
			hHandler = hEXTI;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1c0>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1c4>)
 80003a6:	6013      	str	r3, [r2, #0]
		}
		expanders.push_back(this);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE+0x1a4>)
 80003b4:	f000 f97f 	bl	80006b6 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE9push_backEOS2_>
	}
}
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	4618      	mov	r0, r3
 80003bc:	3718      	adds	r7, #24
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	08008728 	.word	0x08008728
 80003c8:	20000344 	.word	0x20000344
 80003cc:	2000034c 	.word	0x2000034c
 80003d0:	20000090 	.word	0x20000090
 80003d4:	200000e0 	.word	0x200000e0
 80003d8:	200002e4 	.word	0x200002e4
 80003dc:	200000e4 	.word	0x200000e4
 80003e0:	080086b8 	.word	0x080086b8
 80003e4:	080005c1 	.word	0x080005c1
 80003e8:	20000340 	.word	0x20000340
 80003ec:	20000348 	.word	0x20000348

080003f0 <_ZN6sx15095ioexpD1Ev>:

ioexp::~ioexp() {
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <_ZN6sx15095ioexpD1Ev+0x1c>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	08008728 	.word	0x08008728

08000410 <_ZN6sx15095ioexpD0Ev>:
ioexp::~ioexp() {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
}
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ffe9 	bl	80003f0 <_ZN6sx15095ioexpD1Ev>
 800041e:	211c      	movs	r1, #28
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f008 f893 	bl	800854c <_ZdlPvj>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4618      	mov	r0, r3
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <_ZN6sx15095ioexp20configPushPullOutputEt>:

void ioexp::configPushPullOutput(uint16_t portMask) {
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	uint8_t R;
	tmp = ( readRegister( RegDirB ) << 8 ) | readRegister( RegDirA );
 800043c:	210e      	movs	r1, #14
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f000 f8a1 	bl	8000586 <_ZN6sx15095ioexp12readRegisterEh>
 8000444:	4603      	mov	r3, r0
 8000446:	021b      	lsls	r3, r3, #8
 8000448:	b21c      	sxth	r4, r3
 800044a:	210f      	movs	r1, #15
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f89a 	bl	8000586 <_ZN6sx15095ioexp12readRegisterEh>
 8000452:	4603      	mov	r3, r0
 8000454:	b21b      	sxth	r3, r3
 8000456:	4323      	orrs	r3, r4
 8000458:	b21b      	sxth	r3, r3
 800045a:	81fb      	strh	r3, [r7, #14]
	R = ~portMask & tmp;
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	b25b      	sxtb	r3, r3
 8000460:	43db      	mvns	r3, r3
 8000462:	b25a      	sxtb	r2, r3
 8000464:	89fb      	ldrh	r3, [r7, #14]
 8000466:	b25b      	sxtb	r3, r3
 8000468:	4013      	ands	r3, r2
 800046a:	b25b      	sxtb	r3, r3
 800046c:	737b      	strb	r3, [r7, #13]
	writeRegister( RegDirA, R );
 800046e:	7b7b      	ldrb	r3, [r7, #13]
 8000470:	461a      	mov	r2, r3
 8000472:	210f      	movs	r1, #15
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f000 f867 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
	R = (~portMask & tmp) >> 8;
 800047a:	887b      	ldrh	r3, [r7, #2]
 800047c:	43da      	mvns	r2, r3
 800047e:	89fb      	ldrh	r3, [r7, #14]
 8000480:	4013      	ands	r3, r2
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	737b      	strb	r3, [r7, #13]
	writeRegister( RegDirB, R );
 8000486:	7b7b      	ldrb	r3, [r7, #13]
 8000488:	461a      	mov	r2, r3
 800048a:	210e      	movs	r1, #14
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 f85b 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
	tmp = ( readRegister( RegOpenDrainB ) << 8 ) | readRegister( RegOpenDrainA );
 8000492:	210a      	movs	r1, #10
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f000 f876 	bl	8000586 <_ZN6sx15095ioexp12readRegisterEh>
 800049a:	4603      	mov	r3, r0
 800049c:	021b      	lsls	r3, r3, #8
 800049e:	b21c      	sxth	r4, r3
 80004a0:	210b      	movs	r1, #11
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f000 f86f 	bl	8000586 <_ZN6sx15095ioexp12readRegisterEh>
 80004a8:	4603      	mov	r3, r0
 80004aa:	b21b      	sxth	r3, r3
 80004ac:	4323      	orrs	r3, r4
 80004ae:	b21b      	sxth	r3, r3
 80004b0:	81fb      	strh	r3, [r7, #14]
	R = ~portMask & tmp;
 80004b2:	887b      	ldrh	r3, [r7, #2]
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	43db      	mvns	r3, r3
 80004b8:	b25a      	sxtb	r2, r3
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	b25b      	sxtb	r3, r3
 80004be:	4013      	ands	r3, r2
 80004c0:	b25b      	sxtb	r3, r3
 80004c2:	737b      	strb	r3, [r7, #13]
	writeRegister( RegOpenDrainA, R );
 80004c4:	7b7b      	ldrb	r3, [r7, #13]
 80004c6:	461a      	mov	r2, r3
 80004c8:	210b      	movs	r1, #11
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f83c 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
	R = (~portMask & tmp) >> 8;
 80004d0:	887b      	ldrh	r3, [r7, #2]
 80004d2:	43da      	mvns	r2, r3
 80004d4:	89fb      	ldrh	r3, [r7, #14]
 80004d6:	4013      	ands	r3, r2
 80004d8:	121b      	asrs	r3, r3, #8
 80004da:	737b      	strb	r3, [r7, #13]
	writeRegister( RegOpenDrainB,  R);
 80004dc:	7b7b      	ldrb	r3, [r7, #13]
 80004de:	461a      	mov	r2, r3
 80004e0:	210a      	movs	r1, #10
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 f830 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <_ZN6sx15095ioexp10writePortAEh>:
// Asetetaan I/O-pinnit joiden maskibitti on '1'. Muut pinnit pysyvät ennallaan.
void ioexp::setPort(uint16_t portMask) {
	writeRegister( RegDataA, ( ( portMask & 0x00ff ) | readRegister( RegDataA ) ) );
	writeRegister( RegDataB, ( ( ( portMask>>8 ) & 0x00ff ) | readRegister( RegDataB ) ) );
}
void ioexp::writePortA(uint8_t portVal) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
	writeRegister( RegDataA, portVal);
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	461a      	mov	r2, r3
 8000500:	2111      	movs	r1, #17
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 f820 	bl	8000548 <_ZN6sx15095ioexp13writeRegisterEhh>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <_ZN6sx15095ioexp7getPortEv>:
	writeRegister( RegDataB, ( ~( ( portMask >> 8 ) & 0x00ff ) & readRegister( RegDataB ) ) );

}

// palauttaa I/O-pinnien tilan
uint16_t ioexp::getPort() {
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	portData = ( readRegister( RegDataB ) << 8 ) | readRegister( RegDataA );
 8000518:	2110      	movs	r1, #16
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 f833 	bl	8000586 <_ZN6sx15095ioexp12readRegisterEh>
 8000520:	4603      	mov	r3, r0
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	b21c      	sxth	r4, r3
 8000526:	2111      	movs	r1, #17
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 f82c 	bl	8000586 <_ZN6sx15095ioexp12readRegisterEh>
 800052e:	4603      	mov	r3, r0
 8000530:	b21b      	sxth	r3, r3
 8000532:	4323      	orrs	r3, r4
 8000534:	b21b      	sxth	r3, r3
 8000536:	b29a      	uxth	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	835a      	strh	r2, [r3, #26]
	return portData;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	8b5b      	ldrh	r3, [r3, #26]
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bd90      	pop	{r4, r7, pc}

08000548 <_ZN6sx15095ioexp13writeRegisterEhh>:
	assert ( bitIndex < 16 );
	if (bitIndex < 8) return ( readRegister( RegDataA ) & ( 1 << bitIndex ) ) > 0 ;
	else return ( readRegister( RegDataB ) & ( 1 << ( bitIndex / 2 ) ) ) > 0 ;
}

void ioexp::writeRegister(uint8_t reg, uint8_t regData) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af04      	add	r7, sp, #16
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
 8000554:	4613      	mov	r3, r2
 8000556:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef st;
	st = HAL_I2C_Mem_Write(hi2c, i2caddr, reg, sizeof(uint8_t), &regData, sizeof(regData), 0xffffffff );
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6858      	ldr	r0, [r3, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7a1b      	ldrb	r3, [r3, #8]
 8000560:	b299      	uxth	r1, r3
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	b29a      	uxth	r2, r3
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	9302      	str	r3, [sp, #8]
 800056c:	2301      	movs	r3, #1
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	1cbb      	adds	r3, r7, #2
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	f001 fd9b 	bl	80020b0 <HAL_I2C_Mem_Write>
 800057a:	4603      	mov	r3, r0
 800057c:	73fb      	strb	r3, [r7, #15]
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_ZN6sx15095ioexp12readRegisterEh>:

uint8_t ioexp::readRegister(uint8_t reg) {
 8000586:	b580      	push	{r7, lr}
 8000588:	b088      	sub	sp, #32
 800058a:	af04      	add	r7, sp, #16
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	460b      	mov	r3, r1
 8000590:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	HAL_I2C_Mem_Read(hi2c, i2caddr, reg, sizeof(uint8_t), &regData, sizeof(regData), 0xffffffff );
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6858      	ldr	r0, [r3, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7a1b      	ldrb	r3, [r3, #8]
 800059a:	b299      	uxth	r1, r3
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	f107 030f 	add.w	r3, r7, #15
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	f001 fe91 	bl	80022d8 <HAL_I2C_Mem_Read>
	return regData;
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <_ZN6sx150911extiHandlerEPv>:


// Exti-keskeytyksen käsittely taskitasolla.
// Tätä ei tehdä keskeytyshandlerissa koska i2c-väylän käsittely,
// ja kestää muutenkin turhan kauan ajettavaksi keskeytyskontekstissa
void extiHandler( void *pvParameters) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	ioexp *pIOE;
	for ( ;; ) {
		if ( xSemaphoreTake( hEXTISync, portMAX_DELAY ) == pdTRUE ) {
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <_ZN6sx150911extiHandlerEPv+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295
 80005d0:	4618      	mov	r0, r3
 80005d2:	f005 fe61 	bl	8006298 <xQueueSemaphoreTake>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b01      	cmp	r3, #1
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f0      	beq.n	80005c8 <_ZN6sx150911extiHandlerEPv+0x8>
			for ( std::vector<ioexp *>::iterator it = ioexp::expanders.begin() ; it != ioexp::expanders.end(); ++it) {
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <_ZN6sx150911extiHandlerEPv+0x8c>)
 80005e8:	f000 f876 	bl	80006d8 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>
 80005ec:	4603      	mov	r3, r0
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	4816      	ldr	r0, [pc, #88]	; (800064c <_ZN6sx150911extiHandlerEPv+0x8c>)
 80005f2:	f000 f881 	bl	80006f8 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>
 80005f6:	4603      	mov	r3, r0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	f107 0210 	add.w	r2, r7, #16
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f888 	bl	800071a <_ZN9__gnu_cxxneIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0db      	beq.n	80005c8 <_ZN6sx150911extiHandlerEPv+0x8>
				pIOE = *it;
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f8a8 	bl	800076a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEdeEv>
 800061a:	4603      	mov	r3, r0
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	617b      	str	r3, [r7, #20]
				if ( pIOE->getEXTIPin() == GPIO_PIN_1 ) pIOE->getPort();
 8000620:	6978      	ldr	r0, [r7, #20]
 8000622:	f7ff fde9 	bl	80001f8 <_ZN6sx15095ioexp10getEXTIPinEv>
 8000626:	4603      	mov	r3, r0
 8000628:	2b02      	cmp	r3, #2
 800062a:	bf0c      	ite	eq
 800062c:	2301      	moveq	r3, #1
 800062e:	2300      	movne	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <_ZN6sx150911extiHandlerEPv+0x7c>
 8000636:	6978      	ldr	r0, [r7, #20]
 8000638:	f7ff ff6a 	bl	8000510 <_ZN6sx15095ioexp7getPortEv>
			for ( std::vector<ioexp *>::iterator it = ioexp::expanders.begin() ; it != ioexp::expanders.end(); ++it) {
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f882 	bl	800074a <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEppEv>
 8000646:	e7d3      	b.n	80005f0 <_ZN6sx150911extiHandlerEPv+0x30>
 8000648:	200000e0 	.word	0x200000e0
 800064c:	2000034c 	.word	0x2000034c

08000650 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f89d 	bl	800079a <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EEC1Ev>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      bool
      empty() const _GLIBCXX_NOEXCEPT
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f8b8 	bl	80007e8 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>
 8000678:	4603      	mov	r3, r0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f8c7 	bl	8000810 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>
 8000682:	4603      	mov	r3, r0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	f107 020c 	add.w	r2, r7, #12
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f8d1 	bl	8000838 <_ZN9__gnu_cxxeqIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8000696:	4603      	mov	r3, r0
 8000698:	4618      	mov	r0, r3
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_ZSt4moveIRPN6sx15095ioexpEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE9push_backEOS2_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80006c0:	6838      	ldr	r0, [r7, #0]
 80006c2:	f7ff ffed 	bl	80006a0 <_ZSt4moveIRPN6sx15095ioexpEEONSt16remove_referenceIT_E4typeEOS5_>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f8d7 	bl	800087e <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE12emplace_backIJS2_EEEvDpOT_>
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4611      	mov	r1, r2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f8f6 	bl	80008da <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1d1a      	adds	r2, r3, #4
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f8e5 	bl	80008da <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <_ZN9__gnu_cxxneIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800071a:	b590      	push	{r4, r7, lr}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f8e8 	bl	80008fa <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 800072a:	4603      	mov	r3, r0
 800072c:	681c      	ldr	r4, [r3, #0]
 800072e:	6838      	ldr	r0, [r7, #0]
 8000730:	f000 f8e3 	bl	80008fa <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8000734:	4603      	mov	r3, r0
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429c      	cmp	r4, r3
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bd90      	pop	{r4, r7, pc}

0800074a <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	1d1a      	adds	r2, r3, #4
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	601a      	str	r2, [r3, #0]
	return *this;
 800075c:	687b      	ldr	r3, [r7, #4]
      }
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f8d5 	bl	800093a <_ZNSaIPN6sx15095ioexpEED1Ev>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EEC1Ev>:
      _Vector_base()
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f8b3 	bl	8000910 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE12_Vector_implC1Ev>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6819      	ldr	r1, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80007ce:	461a      	mov	r2, r3
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 f8be 	bl	8000952 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffd2 	bl	8000782 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE12_Vector_implD1Ev>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	f107 020c 	add.w	r2, r7, #12
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f8b9 	bl	8000978 <_ZN9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	f107 020c 	add.w	r2, r7, #12
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f8a5 	bl	8000978 <_ZN9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZN9__gnu_cxxeqIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f8a8 	bl	8000998 <_ZNK9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8000848:	4603      	mov	r3, r0
 800084a:	681c      	ldr	r4, [r3, #0]
 800084c:	6838      	ldr	r0, [r7, #0]
 800084e:	f000 f8a3 	bl	8000998 <_ZNK9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8000852:	4603      	mov	r3, r0
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	429c      	cmp	r4, r3
 8000858:	bf0c      	ite	eq
 800085a:	2301      	moveq	r3, #1
 800085c:	2300      	movne	r3, #0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bd90      	pop	{r4, r7, pc}

08000868 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE12emplace_backIJS2_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800087e:	b5b0      	push	{r4, r5, r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	429a      	cmp	r2, r3
 8000892:	d011      	beq.n	80008b8 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE12emplace_backIJS2_EEEvDpOT_+0x3a>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000894:	687c      	ldr	r4, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685d      	ldr	r5, [r3, #4]
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f7ff ffe4 	bl	8000868 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4629      	mov	r1, r5
 80008a6:	4620      	mov	r0, r4
 80008a8:	f000 f881 	bl	80009ae <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	1d1a      	adds	r2, r3, #4
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80008b6:	e00c      	b.n	80008d2 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE12emplace_backIJS2_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff1d 	bl	80006f8 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE3endEv>
 80008be:	4604      	mov	r4, r0
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f7ff ffd1 	bl	8000868 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4621      	mov	r1, r4
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 f881 	bl	80009d4 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bdb0      	pop	{r4, r5, r7, pc}

080008da <_ZN9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f8e7 	bl	8000aec <_ZNSaIPN6sx15095ioexpEEC1Ev>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
	{ }
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_ZNSaIPN6sx15095ioexpEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f8de 	bl	8000b04 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEED1Ev>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
	if (__p)
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f8d5 	bl	8000b1a <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE10deallocateERS3_PS2_j>
      }
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <_ZN9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_ZNK9__gnu_cxx17__normal_iteratorIPKPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ff54 	bl	8000868 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f000 f8b6 	bl	8000b38 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE9constructIS3_JS3_EEEvPT_DpOT0_>
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80009e0:	4a41      	ldr	r2, [pc, #260]	; (8000ae8 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x114>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 f8bf 	bl	8000b68 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc>
 80009ea:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff fe73 	bl	80006d8 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EE5beginEv>
 80009f2:	4603      	mov	r3, r0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	f107 0214 	add.w	r2, r7, #20
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f8f9 	bl	8000bf8 <_ZN9__gnu_cxxmiIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8000a06:	4603      	mov	r3, r0
 8000a08:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f908 	bl	8000c24 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE11_M_allocateEj>
 8000a14:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000a1a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	18d5      	adds	r5, r2, r3
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff1f 	bl	8000868 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4629      	mov	r1, r5
 8000a30:	4620      	mov	r0, r4
 8000a32:	f7ff ffbc 	bl	80009ae <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681c      	ldr	r4, [r3, #0]
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff59 	bl	80008fa <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f8fc 	bl	8000c4c <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 8000a54:	4603      	mov	r3, r0
	  __new_finish
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	4629      	mov	r1, r5
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f000 f901 	bl	8000c62 <_ZSt34__uninitialized_move_if_noexcept_aIPPN6sx15095ioexpES3_SaIS2_EET0_T_S6_S5_RT1_>
 8000a60:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	3304      	adds	r3, #4
 8000a66:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff44 	bl	80008fa <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8000a72:	4603      	mov	r3, r0
 8000a74:	681c      	ldr	r4, [r3, #0]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f8e5 	bl	8000c4c <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 8000a82:	4603      	mov	r3, r0
	  __new_finish
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4629      	mov	r1, r5
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f000 f8ea 	bl	8000c62 <_ZSt34__uninitialized_move_if_noexcept_aIPPN6sx15095ioexpES3_SaIS2_EET0_T_S6_S5_RT1_>
 8000a8e:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681c      	ldr	r4, [r3, #0]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8d6 	bl	8000c4c <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 8000aa0:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4629      	mov	r1, r5
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f000 f8f4 	bl	8000c94 <_ZSt8_DestroyIPPN6sx15095ioexpES2_EvT_S4_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f7ff ff46 	bl	8000952 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	69fa      	ldr	r2, [r7, #28]
 8000aca:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	441a      	add	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	609a      	str	r2, [r3, #8]
    }
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	080086e8 	.word	0x080086e8

08000aec <_ZNSaIPN6sx15095ioexpEEC1Ev>:
      allocator() throw() { }
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f8db 	bl	8000cb0 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEEC1Ev>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f000 f8cb 	bl	8000cc6 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE10deallocateEPS3_j>
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE9constructIS3_JS3_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fe8f 	bl	8000868 <_ZSt7forwardIPN6sx15095ioexpEEOT_RNSt16remove_referenceIS3_E4typeE>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	681c      	ldr	r4, [r3, #0]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	4619      	mov	r1, r3
 8000b52:	2004      	movs	r0, #4
 8000b54:	f7ff fb44 	bl	80001e0 <_ZnwjPv>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d000      	beq.n	8000b60 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE9constructIS3_JS3_EEEvPT_DpOT0_+0x28>
 8000b5e:	601c      	str	r4, [r3, #0]
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd90      	pop	{r4, r7, pc}

08000b68 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 f8b3 	bl	8000ce0 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE8max_sizeEv>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f8c0 	bl	8000d02 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>
 8000b82:	4603      	mov	r3, r0
 8000b84:	1ae2      	subs	r2, r4, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	bf34      	ite	cc
 8000b8c:	2301      	movcc	r3, #1
 8000b8e:	2300      	movcs	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f007 fcdc 	bl	8008556 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 f8af 	bl	8000d02 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f000 f8ab 	bl	8000d02 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>
 8000bac:	4603      	mov	r3, r0
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	f107 0208 	add.w	r2, r7, #8
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f8b2 	bl	8000d24 <_ZSt3maxIjERKT_S2_S2_>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4423      	add	r3, r4
 8000bc6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f000 f89a 	bl	8000d02 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d306      	bcc.n	8000be4 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc+0x7c>
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f000 f882 	bl	8000ce0 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE8max_sizeEv>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d904      	bls.n	8000bee <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc+0x86>
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f000 f87b 	bl	8000ce0 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE8max_sizeEv>
 8000bea:	4603      	mov	r3, r0
 8000bec:	e000      	b.n	8000bf0 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE12_M_check_lenEjPKc+0x88>
 8000bee:	697b      	ldr	r3, [r7, #20]
      }
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd90      	pop	{r4, r7, pc}

08000bf8 <_ZN9__gnu_cxxmiIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fe79 	bl	80008fa <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f7ff fe73 	bl	80008fa <_ZNK9__gnu_cxx17__normal_iteratorIPPN6sx15095ioexpESt6vectorIS3_SaIS3_EEE4baseEv>
 8000c14:	4603      	mov	r3, r0
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1ae3      	subs	r3, r4, r3
 8000c1a:	109b      	asrs	r3, r3, #2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}

08000c24 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE11_M_allocateEj+0x1e>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6839      	ldr	r1, [r7, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f887 	bl	8000d4c <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE8allocateERS3_j>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	e000      	b.n	8000c44 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE11_M_allocateEj+0x20>
 8000c42:	2300      	movs	r3, #0
      }
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_ZSt34__uninitialized_move_if_noexcept_aIPPN6sx15095ioexpES3_SaIS2_EET0_T_S6_S5_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000c62:	b590      	push	{r4, r7, lr}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f87a 	bl	8000d6a <_ZSt32__make_move_if_noexcept_iteratorIPN6sx15095ioexpESt13move_iteratorIPS2_EET0_PT_>
 8000c76:	4604      	mov	r4, r0
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f000 f876 	bl	8000d6a <_ZSt32__make_move_if_noexcept_iteratorIPN6sx15095ioexpESt13move_iteratorIPS2_EET0_PT_>
 8000c7e:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	4620      	mov	r0, r4
 8000c86:	f000 f87f 	bl	8000d88 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN6sx15095ioexpEES4_S3_ET0_T_S7_S6_RSaIT1_E>
 8000c8a:	4603      	mov	r3, r0
    }
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <_ZSt8_DestroyIPPN6sx15095ioexpES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f000 f881 	bl	8000daa <_ZSt8_DestroyIPPN6sx15095ioexpEEvT_S4_>
    }
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8000cd2:	68b8      	ldr	r0, [r7, #8]
 8000cd4:	f000 f9f0 	bl	80010b8 <_ZdlPv>
      }
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f876 	bl	8000ddc <_ZNKSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f866 	bl	8000dc4 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE8max_sizeERKS3_>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZNKSt6vectorIPN6sx15095ioexpESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	109b      	asrs	r3, r3, #2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d201      	bcs.n	8000d3e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	e000      	b.n	8000d40 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000d3e:	687b      	ldr	r3, [r7, #4]
    }
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000d56:	2200      	movs	r2, #0
 8000d58:	6839      	ldr	r1, [r7, #0]
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f849 	bl	8000df2 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8allocateEjPKv>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZSt32__make_move_if_noexcept_iteratorIPN6sx15095ioexpESt13move_iteratorIPS2_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f858 	bl	8000e2e <_ZNSt13move_iteratorIPPN6sx15095ioexpEEC1ES3_>
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN6sx15095ioexpEES4_S3_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f000 f856 	bl	8000e4c <_ZSt18uninitialized_copyISt13move_iteratorIPPN6sx15095ioexpEES4_ET0_T_S7_S6_>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_ZSt8_DestroyIPPN6sx15095ioexpEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000db4:	6839      	ldr	r1, [r7, #0]
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f85a 	bl	8000e70 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN6sx15095ioexpEEEvT_S6_>
    }
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_ZNSt16allocator_traitsISaIPN6sx15095ioexpEEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f85a 	bl	8000e86 <_ZNK9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8max_sizeEv>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZNKSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 f841 	bl	8000e86 <_ZNK9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8max_sizeEv>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	bf8c      	ite	hi
 8000e0c:	2301      	movhi	r3, #1
 8000e0e:	2300      	movls	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <_ZN9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000e16:	f007 fb9b 	bl	8008550 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f93e 	bl	80010a0 <_Znwj>
 8000e24:	4603      	mov	r3, r0
      }
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_ZNSt13move_iteratorIPPN6sx15095ioexpEEC1ES3_>:
      move_iterator(iterator_type __i)
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_ZSt18uninitialized_copyISt13move_iteratorIPPN6sx15095ioexpEES4_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f000 f81c 	bl	8000e9e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN6sx15095ioexpEES6_EET0_T_S9_S8_>
 8000e66:	4603      	mov	r3, r0
    }
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN6sx15095ioexpEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_ZNK9__gnu_cxx13new_allocatorIPN6sx15095ioexpEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8000e8e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN6sx15095ioexpEES6_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 f805 	bl	8000ebe <_ZSt4copyISt13move_iteratorIPPN6sx15095ioexpEES4_ET0_T_S7_S6_>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZSt4copyISt13move_iteratorIPPN6sx15095ioexpEES4_ET0_T_S7_S6_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000ebe:	b590      	push	{r4, r7, lr}
 8000ec0:	b085      	sub	sp, #20
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f80f 	bl	8000eee <_ZSt12__miter_baseIPPN6sx15095ioexpEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	68b8      	ldr	r0, [r7, #8]
 8000ed4:	f000 f80b 	bl	8000eee <_ZSt12__miter_baseIPPN6sx15095ioexpEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000ed8:	4603      	mov	r3, r0
	       __result));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 f816 	bl	8000f10 <_ZSt14__copy_move_a2ILb1EPPN6sx15095ioexpES3_ET1_T0_S5_S4_>
 8000ee4:	4603      	mov	r3, r0
    }
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd90      	pop	{r4, r7, pc}

08000eee <_ZSt12__miter_baseIPPN6sx15095ioexpEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f825 	bl	8000f48 <_ZNKSt13move_iteratorIPPN6sx15095ioexpEE4baseEv>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f82d 	bl	8000f60 <_ZSt12__miter_baseIPPN6sx15095ioexpEET_S4_>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_ZSt14__copy_move_a2ILb1EPPN6sx15095ioexpES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 f82a 	bl	8000f76 <_ZSt12__niter_baseIPPN6sx15095ioexpEET_S4_>
 8000f22:	4604      	mov	r4, r0
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f000 f826 	bl	8000f76 <_ZSt12__niter_baseIPPN6sx15095ioexpEET_S4_>
 8000f2a:	4605      	mov	r5, r0
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f822 	bl	8000f76 <_ZSt12__niter_baseIPPN6sx15095ioexpEET_S4_>
 8000f32:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8000f34:	461a      	mov	r2, r3
 8000f36:	4629      	mov	r1, r5
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f000 f827 	bl	8000f8c <_ZSt13__copy_move_aILb1EPPN6sx15095ioexpES3_ET1_T0_S5_S4_>
 8000f3e:	4603      	mov	r3, r0
    }
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bdb0      	pop	{r4, r5, r7, pc}

08000f48 <_ZNKSt13move_iteratorIPPN6sx15095ioexpEE4baseEv>:
      base() const
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_ZSt12__miter_baseIPPN6sx15095ioexpEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_ZSt12__niter_baseIPPN6sx15095ioexpEET_S4_>:
    __niter_base(_Iterator __it)
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_ZSt13__copy_move_aILb1EPPN6sx15095ioexpES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8000f98:	2301      	movs	r3, #1
 8000f9a:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f805 	bl	8000fb0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6sx15095ioexpEEEPT_PKS6_S9_S7_>
 8000fa6:	4603      	mov	r3, r0
    }
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6sx15095ioexpEEEPT_PKS6_S9_S7_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	109b      	asrs	r3, r3, #2
 8000fc4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN6sx15095ioexpEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f007 fafe 	bl	80085d6 <memmove>
	  return __result + _Num;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
	}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <_Z41__static_initialization_and_destruction_0ii>:
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
		}
	}
}

} /* namespace sx1509 */
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d107      	bne.n	800100c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001002:	4293      	cmp	r3, r2
 8001004:	d102      	bne.n	800100c <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<ioexp *> ioexp::expanders;
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001008:	f7ff fb22 	bl	8000650 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EEC1Ev>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d107      	bne.n	8001022 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001018:	4293      	cmp	r3, r2
 800101a:	d102      	bne.n	8001022 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800101e:	f000 f807 	bl	8001030 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EED1Ev>
} /* namespace sx1509 */
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000034c 	.word	0x2000034c

08001030 <_ZNSt6vectorIPN6sx15095ioexpESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681c      	ldr	r4, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fe02 	bl	8000c4c <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EE19_M_get_Tp_allocatorEv>
 8001048:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800104a:	461a      	mov	r2, r3
 800104c:	4629      	mov	r1, r5
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff fe20 	bl	8000c94 <_ZSt8_DestroyIPPN6sx15095ioexpES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fbac 	bl	80007b4 <_ZNSt12_Vector_baseIPN6sx15095ioexpESaIS2_EED1Ev>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bdb0      	pop	{r4, r5, r7, pc}

08001066 <_GLOBAL__sub_I__ZN6sx150914EXTISyncBufferE>:
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
 800106a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ffbc 	bl	8000fec <_Z41__static_initialization_and_destruction_0ii>
 8001074:	bd80      	pop	{r7, pc}

08001076 <_GLOBAL__sub_D__ZN6sx150914EXTISyncBufferE>:
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
 800107a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ffb4 	bl	8000fec <_Z41__static_initialization_and_destruction_0ii>
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <_ZN6sx15095ioexp4statEv>:
	static ioexpStat_t stat()  { return lastStatus; };
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <_ZN6sx15095ioexp4statEv+0x14>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000344 	.word	0x20000344

080010a0 <_Znwj>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

void * operator new( size_t size )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f007 f879 	bl	80081a0 <pvPortMalloc>
 80010ae:	4603      	mov	r3, r0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f007 f92f 	bl	8008324 <vPortFree>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <_Z11ledVatkytinPv>:
#define LV_STACKSIZE	256
static StackType_t lvStack[LV_STACKSIZE];
static StaticTask_t lvTCB;
static TaskHandle_t hLV;

void ledVatkytin( void * pvParameters ){
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	6078      	str	r0, [r7, #4]
	ioexp *io;
	uint8_t cnt;

	io = new ioexp(&hi2c1, I2CADDR, SX1509_RESET_GPIO_Port, SX1509_RESET_Pin, SX1509_INT_GPIO_Port, SX1509_INT_Pin, outin );
 80010d8:	201c      	movs	r0, #28
 80010da:	f7ff ffe1 	bl	80010a0 <_Znwj>
 80010de:	4603      	mov	r3, r0
 80010e0:	461c      	mov	r4, r3
 80010e2:	2302      	movs	r3, #2
 80010e4:	9303      	str	r3, [sp, #12]
 80010e6:	2302      	movs	r3, #2
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <_Z11ledVatkytinPv+0xfc>)
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	2304      	movs	r3, #4
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <_Z11ledVatkytinPv+0xfc>)
 80010f4:	223e      	movs	r2, #62	; 0x3e
 80010f6:	4936      	ldr	r1, [pc, #216]	; (80011d0 <_Z11ledVatkytinPv+0x100>)
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff f895 	bl	8000228 <_ZN6sx15095ioexpC1EP19__I2C_HandleTypeDefhP12GPIO_TypeDeftS4_tNS_10initMode_tE>
 80010fe:	60bc      	str	r4, [r7, #8]
	if ( io->stat() != expOK ) Error_Handler();
 8001100:	f7ff ffc2 	bl	8001088 <_ZN6sx15095ioexp4statEv>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <_Z11ledVatkytinPv+0x48>
 8001114:	f000 fa16 	bl	8001544 <Error_Handler>
	io->configPushPullOutput(0x00ff);
 8001118:	21ff      	movs	r1, #255	; 0xff
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f7ff f988 	bl	8000430 <_ZN6sx15095ioexp20configPushPullOutputEt>

	while (1) {
		for ( cnt = 0; cnt < 20; cnt++ ) {
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b13      	cmp	r3, #19
 8001128:	d811      	bhi.n	800114e <_Z11ledVatkytinPv+0x7e>
			io->writePortA( 0xaa );
 800112a:	21aa      	movs	r1, #170	; 0xaa
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	f7ff f9df 	bl	80004f0 <_ZN6sx15095ioexp10writePortAEh>
			HAL_Delay(100);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f000 fc26 	bl	8001984 <HAL_Delay>
			io->writePortA(  0x55 );
 8001138:	2155      	movs	r1, #85	; 0x55
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f7ff f9d8 	bl	80004f0 <_ZN6sx15095ioexp10writePortAEh>
			HAL_Delay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f000 fc1f 	bl	8001984 <HAL_Delay>
		for ( cnt = 0; cnt < 20; cnt++ ) {
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e7ea      	b.n	8001124 <_Z11ledVatkytinPv+0x54>
		}
		io->writePortA( 0x00 );
 800114e:	2100      	movs	r1, #0
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f7ff f9cd 	bl	80004f0 <_ZN6sx15095ioexp10writePortAEh>
		for ( cnt = 0; cnt < 64; cnt++ ) {
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	2b3f      	cmp	r3, #63	; 0x3f
 800115e:	d811      	bhi.n	8001184 <_Z11ledVatkytinPv+0xb4>
			io->writePortA( 1 << (cnt % 8) );
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	2201      	movs	r2, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4619      	mov	r1, r3
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff f9bd 	bl	80004f0 <_ZN6sx15095ioexp10writePortAEh>
			HAL_Delay(100);
 8001176:	2064      	movs	r0, #100	; 0x64
 8001178:	f000 fc04 	bl	8001984 <HAL_Delay>
		for ( cnt = 0; cnt < 64; cnt++ ) {
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	3301      	adds	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e7ea      	b.n	800115a <_Z11ledVatkytinPv+0x8a>
		}
		for ( cnt = 0; cnt < 64; cnt++ ) {
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b3f      	cmp	r3, #63	; 0x3f
 800118c:	d8c8      	bhi.n	8001120 <_Z11ledVatkytinPv+0x50>
			io->writePortA( (1 << (3 - (cnt % 4) ) | ( 1 << (4 + (cnt % 4)))) );
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	43db      	mvns	r3, r3
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2201      	movs	r2, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	b25a      	sxtb	r2, r3
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	3304      	adds	r3, #4
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff f99a 	bl	80004f0 <_ZN6sx15095ioexp10writePortAEh>
			HAL_Delay(100);
 80011bc:	2064      	movs	r0, #100	; 0x64
 80011be:	f000 fbe1 	bl	8001984 <HAL_Delay>
		for ( cnt = 0; cnt < 64; cnt++ ) {
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	3301      	adds	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e7de      	b.n	8001188 <_Z11ledVatkytinPv+0xb8>
 80011ca:	bf00      	nop
 80011cc:	48000800 	.word	0x48000800
 80011d0:	20000358 	.word	0x20000358

080011d4 <main>:
		}
	}

}

int main(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af04      	add	r7, sp, #16

	HAL_Init();
 80011da:	f000 fb9d 	bl	8001918 <HAL_Init>
	SystemClock_Config();
 80011de:	f000 f827 	bl	8001230 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 80011e2:	f000 f917 	bl	8001414 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 80011e6:	f000 f8e1 	bl	80013ac <_ZL19MX_USART2_UART_Initv>
	MX_I2C1_Init();
 80011ea:	f000 f891 	bl	8001310 <_ZL12MX_I2C1_Initv>

	hLV = xTaskCreateStatic( ledVatkytin, "LV", LV_STACKSIZE, NULL, tskIDLE_PRIORITY+4, lvStack, &lvTCB );
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <main+0x48>)
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <main+0x4c>)
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2304      	movs	r3, #4
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001200:	4908      	ldr	r1, [pc, #32]	; (8001224 <main+0x50>)
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <main+0x54>)
 8001204:	f005 fad4 	bl	80067b0 <xTaskCreateStatic>
 8001208:	4602      	mov	r2, r0
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <main+0x58>)
 800120c:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 800120e:	f005 fc53 	bl	8006ab8 <vTaskStartScheduler>

}
 8001212:	2300      	movs	r3, #0
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000824 	.word	0x20000824
 8001220:	20000424 	.word	0x20000424
 8001224:	08008704 	.word	0x08008704
 8001228:	080010d1 	.word	0x080010d1
 800122c:	20000880 	.word	0x20000880

08001230 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0a6      	sub	sp, #152	; 0x98
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800123a:	2228      	movs	r2, #40	; 0x28
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f007 f9e2 	bl	8008608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2258      	movs	r2, #88	; 0x58
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f007 f9d4 	bl	8008608 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001260:	2302      	movs	r3, #2
 8001262:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	2301      	movs	r3, #1
 8001266:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001268:	2310      	movs	r3, #16
 800126a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800127c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800128e:	4618      	mov	r0, r3
 8001290:	f002 f9e8 	bl	8003664 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf14      	ite	ne
 800129a:	2301      	movne	r3, #1
 800129c:	2300      	moveq	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 80012a4:	f000 f94e 	bl	8001544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012c2:	2102      	movs	r1, #2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 f8e3 	bl	8004490 <HAL_RCC_ClockConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80012da:	f000 f933 	bl	8001544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80012de:	2322      	movs	r3, #34	; 0x22
 80012e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fb37 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001302:	f000 f91f 	bl	8001544 <Error_Handler>
  }
}
 8001306:	bf00      	nop
 8001308:	3798      	adds	r7, #152	; 0x98
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <_ZL12MX_I2C1_Initv+0x94>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 800131c:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <_ZL12MX_I2C1_Initv+0x98>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001328:	2201      	movs	r2, #1
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134a:	4815      	ldr	r0, [pc, #84]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 800134c:	f000 fe21 	bl	8001f92 <HAL_I2C_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf14      	ite	ne
 8001356:	2301      	movne	r3, #1
 8001358:	2300      	moveq	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001360:	f000 f8f0 	bl	8001544 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001368:	f002 f8e5 	bl	8003536 <HAL_I2CEx_ConfigAnalogFilter>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf14      	ite	ne
 8001372:	2301      	movne	r3, #1
 8001374:	2300      	moveq	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800137c:	f000 f8e2 	bl	8001544 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001384:	f002 f922 	bl	80035cc <HAL_I2CEx_ConfigDigitalFilter>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf14      	ite	ne
 800138e:	2301      	movne	r3, #1
 8001390:	2300      	moveq	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001398:	f000 f8d4 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000358 	.word	0x20000358
 80013a4:	40005400 	.word	0x40005400
 80013a8:	2000090e 	.word	0x2000090e

080013ac <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <_ZL19MX_USART2_UART_Initv+0x64>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <_ZL19MX_USART2_UART_Initv+0x60>)
 80013f0:	f003 ff38 	bl	8005264 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001404:	f000 f89e 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200003a4 	.word	0x200003a4
 8001410:	40004400 	.word	0x40004400

08001414 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a39      	ldr	r2, [pc, #228]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b37      	ldr	r3, [pc, #220]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	4b25      	ldr	r3, [pc, #148]	; (8001514 <_ZL12MX_GPIO_Initv+0x100>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1509_RESET_GPIO_Port, SX1509_RESET_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2104      	movs	r1, #4
 800148e:	4822      	ldr	r0, [pc, #136]	; (8001518 <_ZL12MX_GPIO_Initv+0x104>)
 8001490:	f000 fd44 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	2120      	movs	r1, #32
 8001498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149c:	f000 fd3e 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <_ZL12MX_GPIO_Initv+0x108>)
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4818      	ldr	r0, [pc, #96]	; (8001518 <_ZL12MX_GPIO_Initv+0x104>)
 80014b6:	f000 fba7 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1509_INT_Pin */
  GPIO_InitStruct.Pin = SX1509_INT_Pin;
 80014ba:	2302      	movs	r3, #2
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <_ZL12MX_GPIO_Initv+0x108>)
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1509_INT_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	; (8001518 <_ZL12MX_GPIO_Initv+0x104>)
 80014ce:	f000 fb9b 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1509_RESET_Pin */
  GPIO_InitStruct.Pin = SX1509_RESET_Pin;
 80014d2:	2304      	movs	r3, #4
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1509_RESET_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480b      	ldr	r0, [pc, #44]	; (8001518 <_ZL12MX_GPIO_Initv+0x104>)
 80014ea:	f000 fb8d 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014ee:	2320      	movs	r3, #32
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f000 fb7e 	bl	8001c08 <HAL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	48000800 	.word	0x48000800
 800151c:	10210000 	.word	0x10210000

08001520 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001532:	f000 fa07 	bl	8001944 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40001000 	.word	0x40001000

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while ( 1 );
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x4>
	...

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_MspInit+0x5c>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <HAL_MspInit+0x5c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_MspInit+0x5c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x5c>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x5c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x5c>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	210f      	movs	r1, #15
 8001586:	f06f 0001 	mvn.w	r0, #1
 800158a:	f000 fad5 	bl	8001b38 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2105      	movs	r1, #5
 8001592:	2051      	movs	r0, #81	; 0x51
 8001594:	f000 fad0 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001598:	2051      	movs	r0, #81	; 0x51
 800159a:	f000 fae9 	bl	8001b70 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d155      	bne.n	800167a <HAL_I2C_MspInit+0xce>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	6153      	str	r3, [r2, #20]
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a27      	ldr	r2, [pc, #156]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6153      	str	r3, [r2, #20]
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001604:	2312      	movs	r3, #18
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001608:	2301      	movs	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001610:	2304      	movs	r3, #4
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f000 faf3 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001626:	2312      	movs	r3, #18
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2301      	movs	r3, #1
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001632:	2304      	movs	r3, #4
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <HAL_I2C_MspInit+0xe0>)
 800163e:	f000 fae3 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	201f      	movs	r0, #31
 8001660:	f000 fa6a 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001664:	201f      	movs	r0, #31
 8001666:	f000 fa83 	bl	8001b70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2105      	movs	r1, #5
 800166e:	2020      	movs	r0, #32
 8001670:	f000 fa62 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001674:	2020      	movs	r0, #32
 8001676:	f000 fa7b 	bl	8001b70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40005400 	.word	0x40005400
 8001688:	40021000 	.word	0x40021000
 800168c:	48000400 	.word	0x48000400

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_UART_MspInit+0x7c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d128      	bne.n	8001704 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a16      	ldr	r2, [pc, #88]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e2:	230c      	movs	r3, #12
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f2:	2307      	movs	r3, #7
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f000 fa82 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40004400 	.word	0x40004400
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	2036      	movs	r0, #54	; 0x36
 800172a:	f000 fa05 	bl	8001b38 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800172e:	2036      	movs	r0, #54	; 0x36
 8001730:	f000 fa1e 	bl	8001b70 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_InitTick+0xa0>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <HAL_InitTick+0xa0>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_InitTick+0xa0>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800174c:	f107 0210 	add.w	r2, r7, #16
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f003 f8d0 	bl	80048fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800175c:	f003 f88a 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 8001760:	4603      	mov	r3, r0
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <HAL_InitTick+0xa4>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0c9b      	lsrs	r3, r3, #18
 8001770:	3b01      	subs	r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_InitTick+0xa8>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_InitTick+0xac>)
 8001778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_InitTick+0xa8>)
 800177c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_InitTick+0xa8>)
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_InitTick+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_InitTick+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <HAL_InitTick+0xa8>)
 8001796:	f003 fb01 	bl	8004d9c <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d104      	bne.n	80017aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <HAL_InitTick+0xa8>)
 80017a2:	f003 fb31 	bl	8004e08 <HAL_TIM_Base_Start_IT>
 80017a6:	4603      	mov	r3, r0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	431bde83 	.word	0x431bde83
 80017bc:	20003588 	.word	0x20003588
 80017c0:	40001000 	.word	0x40001000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80017fc:	2002      	movs	r0, #2
 80017fe:	f000 fba5 	bl	8001f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <I2C1_EV_IRQHandler+0x10>)
 800180e:	f000 ff84 	bl	800271a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000358 	.word	0x20000358

0800181c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <I2C1_ER_IRQHandler+0x10>)
 8001822:	f000 ff94 	bl	800274e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000358 	.word	0x20000358

08001830 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM6_DAC_IRQHandler+0x10>)
 8001836:	f003 fb11 	bl	8004e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20003588 	.word	0x20003588

08001844 <FPU_IRQHandler>:

/**
  * @brief This function handles Floating point unit interrupt.
  */
void FPU_IRQHandler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_getpid>:
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
 8001856:	2301      	movs	r3, #1
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_kill>:
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
 800186c:	f006 fe7e 	bl	800856c <__errno>
 8001870:	4602      	mov	r2, r0
 8001872:	2316      	movs	r3, #22
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_exit>:
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	f04f 31ff 	mov.w	r1, #4294967295
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffe7 	bl	8001862 <_kill>
 8001894:	e7fe      	b.n	8001894 <_exit+0x12>
	...

08001898 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <SystemInit+0x28>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <SystemInit+0x28>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <SystemInit+0x28>)
 80018ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b2:	609a      	str	r2, [r3, #8]
#endif
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <Reset_Handler>:
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopForever+0x2>
 80018c8:	2100      	movs	r1, #0
 80018ca:	e003      	b.n	80018d4 <LoopCopyDataInit>

080018cc <CopyDataInit>:
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <LoopForever+0x6>)
 80018ce:	585b      	ldr	r3, [r3, r1]
 80018d0:	5043      	str	r3, [r0, r1]
 80018d2:	3104      	adds	r1, #4

080018d4 <LoopCopyDataInit>:
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <LoopForever+0xa>)
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <LoopForever+0xe>)
 80018d8:	1842      	adds	r2, r0, r1
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3f6      	bcc.n	80018cc <CopyDataInit>
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <LoopForever+0x12>)
 80018e0:	e002      	b.n	80018e8 <LoopFillZerobss>

080018e2 <FillZerobss>:
 80018e2:	2300      	movs	r3, #0
 80018e4:	f842 3b04 	str.w	r3, [r2], #4

080018e8 <LoopFillZerobss>:
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <LoopForever+0x16>)
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d3f9      	bcc.n	80018e2 <FillZerobss>
 80018ee:	f7ff ffd3 	bl	8001898 <SystemInit>
 80018f2:	f006 fe41 	bl	8008578 <__libc_init_array>
 80018f6:	f7ff fc6d 	bl	80011d4 <main>

080018fa <LoopForever>:
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
 80018fc:	20010000 	.word	0x20010000
 8001900:	080087d8 	.word	0x080087d8
 8001904:	20000000 	.word	0x20000000
 8001908:	20000074 	.word	0x20000074
 800190c:	20000074 	.word	0x20000074
 8001910:	20003610 	.word	0x20003610

08001914 <ADC1_2_IRQHandler>:
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>
	...

08001918 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x28>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x28>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f8fa 	bl	8001b22 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fef0 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fe0a 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40022000 	.word	0x40022000

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008
 8001968:	200035c8 	.word	0x200035c8

0800196c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200035c8 	.word	0x200035c8

08001984 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_Delay+0x40>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000008 	.word	0x20000008

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ff4c 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4a:	f7ff ff61 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	6978      	ldr	r0, [r7, #20]
 8001b56:	f7ff ffb1 	bl	8001abc <NVIC_EncodePriority>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff80 	bl	8001a68 <__NVIC_SetPriority>
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff54 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d005      	beq.n	8001bae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e027      	b.n	8001bfe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 020e 	bic.w	r2, r2, #14
 8001bbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
    } 
  }
  return status;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	e160      	b.n	8001eda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8152 	beq.w	8001ed4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x38>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d00b      	beq.n	8001cdc <HAL_GPIO_Init+0xd4>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd0:	2b11      	cmp	r3, #17
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d130      	bne.n	8001d3e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d12:	2201      	movs	r2, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 0201 	and.w	r2, r3, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80ac 	beq.w	8001ed4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a5d      	ldr	r2, [pc, #372]	; (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d94:	4a59      	ldr	r2, [pc, #356]	; (8001efc <HAL_GPIO_Init+0x2f4>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dbe:	d025      	beq.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a4f      	ldr	r2, [pc, #316]	; (8001f00 <HAL_GPIO_Init+0x2f8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d01f      	beq.n	8001e08 <HAL_GPIO_Init+0x200>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a4e      	ldr	r2, [pc, #312]	; (8001f04 <HAL_GPIO_Init+0x2fc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d019      	beq.n	8001e04 <HAL_GPIO_Init+0x1fc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_GPIO_Init+0x1f8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00d      	beq.n	8001dfc <HAL_GPIO_Init+0x1f4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a4b      	ldr	r2, [pc, #300]	; (8001f10 <HAL_GPIO_Init+0x308>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d007      	beq.n	8001df8 <HAL_GPIO_Init+0x1f0>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a4a      	ldr	r2, [pc, #296]	; (8001f14 <HAL_GPIO_Init+0x30c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d101      	bne.n	8001df4 <HAL_GPIO_Init+0x1ec>
 8001df0:	2306      	movs	r3, #6
 8001df2:	e00c      	b.n	8001e0e <HAL_GPIO_Init+0x206>
 8001df4:	2307      	movs	r3, #7
 8001df6:	e00a      	b.n	8001e0e <HAL_GPIO_Init+0x206>
 8001df8:	2305      	movs	r3, #5
 8001dfa:	e008      	b.n	8001e0e <HAL_GPIO_Init+0x206>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e006      	b.n	8001e0e <HAL_GPIO_Init+0x206>
 8001e00:	2303      	movs	r3, #3
 8001e02:	e004      	b.n	8001e0e <HAL_GPIO_Init+0x206>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e002      	b.n	8001e0e <HAL_GPIO_Init+0x206>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_GPIO_Init+0x206>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	f002 0203 	and.w	r2, r2, #3
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	4093      	lsls	r3, r2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e1e:	4937      	ldr	r1, [pc, #220]	; (8001efc <HAL_GPIO_Init+0x2f4>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e50:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e56:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e7a:	4a27      	ldr	r2, [pc, #156]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f ae97 	bne.w	8001c18 <HAL_GPIO_Init+0x10>
  }
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	48000400 	.word	0x48000400
 8001f04:	48000800 	.word	0x48000800
 8001f08:	48000c00 	.word	0x48000c00
 8001f0c:	48001000 	.word	0x48001000
 8001f10:	48001400 	.word	0x48001400
 8001f14:	48001800 	.word	0x48001800
 8001f18:	40010400 	.word	0x40010400

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f806 	bl	8001f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e081      	b.n	80020a8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff faf7 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2224      	movs	r2, #36	; 0x24
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fe2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	e006      	b.n	800201a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002018:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d104      	bne.n	800202c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800202a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800204e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	ea42 0103 	orr.w	r1, r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	021a      	lsls	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69d9      	ldr	r1, [r3, #28]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	817b      	strh	r3, [r7, #10]
 80020c2:	460b      	mov	r3, r1
 80020c4:	813b      	strh	r3, [r7, #8]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	f040 80f9 	bne.w	80022ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_I2C_Mem_Write+0x34>
 80020de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0ed      	b.n	80022cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Mem_Write+0x4e>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0e6      	b.n	80022cc <HAL_I2C_Mem_Write+0x21c>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002106:	f7ff fc31 	bl	800196c <HAL_GetTick>
 800210a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2319      	movs	r3, #25
 8002112:	2201      	movs	r2, #1
 8002114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f001 f857 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0d1      	b.n	80022cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2221      	movs	r2, #33	; 0x21
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2240      	movs	r2, #64	; 0x40
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002150:	88f8      	ldrh	r0, [r7, #6]
 8002152:	893a      	ldrh	r2, [r7, #8]
 8002154:	8979      	ldrh	r1, [r7, #10]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4603      	mov	r3, r0
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fc99 	bl	8002a98 <I2C_RequestMemoryWrite>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0a9      	b.n	80022cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d90e      	bls.n	80021a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	b2da      	uxtb	r2, r3
 800218e:	8979      	ldrh	r1, [r7, #10]
 8002190:	2300      	movs	r3, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f001 f939 	bl	8003410 <I2C_TransferConfig>
 800219e:	e00f      	b.n	80021c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f001 f928 	bl	8003410 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f001 f841 	bl	800324c <I2C_WaitOnTXISFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e07b      	b.n	80022cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d034      	beq.n	8002278 <HAL_I2C_Mem_Write+0x1c8>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	2b00      	cmp	r3, #0
 8002214:	d130      	bne.n	8002278 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	2200      	movs	r2, #0
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 ffd3 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e04d      	b.n	80022cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2bff      	cmp	r3, #255	; 0xff
 8002238:	d90e      	bls.n	8002258 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	22ff      	movs	r2, #255	; 0xff
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	b2da      	uxtb	r2, r3
 8002246:	8979      	ldrh	r1, [r7, #10]
 8002248:	2300      	movs	r3, #0
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f001 f8dd 	bl	8003410 <I2C_TransferConfig>
 8002256:	e00f      	b.n	8002278 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	b2da      	uxtb	r2, r3
 8002268:	8979      	ldrh	r1, [r7, #10]
 800226a:	2300      	movs	r3, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f001 f8cc 	bl	8003410 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d19e      	bne.n	80021c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f001 f820 	bl	80032cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e01a      	b.n	80022cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2220      	movs	r2, #32
 800229c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_I2C_Mem_Write+0x224>)
 80022aa:	400b      	ands	r3, r1
 80022ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
  }
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	fe00e800 	.word	0xfe00e800

080022d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	4608      	mov	r0, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	817b      	strh	r3, [r7, #10]
 80022ea:	460b      	mov	r3, r1
 80022ec:	813b      	strh	r3, [r7, #8]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	f040 80fd 	bne.w	80024fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_I2C_Mem_Read+0x34>
 8002306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002312:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0f1      	b.n	80024fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_I2C_Mem_Read+0x4e>
 8002322:	2302      	movs	r3, #2
 8002324:	e0ea      	b.n	80024fc <HAL_I2C_Mem_Read+0x224>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800232e:	f7ff fb1d 	bl	800196c <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2319      	movs	r3, #25
 800233a:	2201      	movs	r2, #1
 800233c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 ff43 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0d5      	b.n	80024fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2222      	movs	r2, #34	; 0x22
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2240      	movs	r2, #64	; 0x40
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a3a      	ldr	r2, [r7, #32]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002370:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002378:	88f8      	ldrh	r0, [r7, #6]
 800237a:	893a      	ldrh	r2, [r7, #8]
 800237c:	8979      	ldrh	r1, [r7, #10]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4603      	mov	r3, r0
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fbd9 	bl	8002b40 <I2C_RequestMemoryRead>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0ad      	b.n	80024fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2bff      	cmp	r3, #255	; 0xff
 80023a8:	d90e      	bls.n	80023c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	22ff      	movs	r2, #255	; 0xff
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	8979      	ldrh	r1, [r7, #10]
 80023b8:	4b52      	ldr	r3, [pc, #328]	; (8002504 <HAL_I2C_Mem_Read+0x22c>)
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f001 f825 	bl	8003410 <I2C_TransferConfig>
 80023c6:	e00f      	b.n	80023e8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	8979      	ldrh	r1, [r7, #10]
 80023da:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_I2C_Mem_Read+0x22c>)
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f001 f814 	bl	8003410 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	2200      	movs	r2, #0
 80023f0:	2104      	movs	r1, #4
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 feea 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07c      	b.n	80024fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d034      	beq.n	80024a8 <HAL_I2C_Mem_Read+0x1d0>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	d130      	bne.n	80024a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	2200      	movs	r2, #0
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 febb 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e04d      	b.n	80024fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2bff      	cmp	r3, #255	; 0xff
 8002468:	d90e      	bls.n	8002488 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	b2da      	uxtb	r2, r3
 8002476:	8979      	ldrh	r1, [r7, #10]
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 ffc5 	bl	8003410 <I2C_TransferConfig>
 8002486:	e00f      	b.n	80024a8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	b2da      	uxtb	r2, r3
 8002498:	8979      	ldrh	r1, [r7, #10]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 ffb4 	bl	8003410 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d19a      	bne.n	80023e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 ff08 	bl	80032cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e01a      	b.n	80024fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2220      	movs	r2, #32
 80024cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_I2C_Mem_Read+0x230>)
 80024da:	400b      	ands	r3, r1
 80024dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	80002400 	.word	0x80002400
 8002508:	fe00e800 	.word	0xfe00e800

0800250c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	460b      	mov	r3, r1
 800251a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b20      	cmp	r3, #32
 800252a:	f040 80f1 	bne.w	8002710 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253c:	d101      	bne.n	8002542 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	e0e7      	b.n	8002712 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_I2C_IsDeviceReady+0x44>
 800254c:	2302      	movs	r3, #2
 800254e:	e0e0      	b.n	8002712 <HAL_I2C_IsDeviceReady+0x206>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_I2C_IsDeviceReady+0x72>
 800256e:	897b      	ldrh	r3, [r7, #10]
 8002570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800257c:	e004      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x7c>
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002584:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800258e:	f7ff f9ed 	bl	800196c <HAL_GetTick>
 8002592:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b20      	cmp	r3, #32
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80025c0:	e034      	b.n	800262c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d01a      	beq.n	8002600 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff f9cf 	bl	800196c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <HAL_I2C_IsDeviceReady+0xd4>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10f      	bne.n	8002600 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e088      	b.n	8002712 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b20      	cmp	r3, #32
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b10      	cmp	r3, #16
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800262c:	7ffb      	ldrb	r3, [r7, #31]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <HAL_I2C_IsDeviceReady+0x12c>
 8002632:	7fbb      	ldrb	r3, [r7, #30]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0c4      	beq.n	80025c2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b10      	cmp	r3, #16
 8002644:	d01a      	beq.n	800267c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	2120      	movs	r1, #32
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fdbb 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e058      	b.n	8002712 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2220      	movs	r2, #32
 8002666:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e04a      	b.n	8002712 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	2120      	movs	r1, #32
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fda0 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e03d      	b.n	8002712 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2210      	movs	r2, #16
 800269c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2220      	movs	r2, #32
 80026a4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d118      	bne.n	80026e0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026bc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	2120      	movs	r1, #32
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fd7f 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e01c      	b.n	8002712 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2220      	movs	r2, #32
 80026de:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	f63f af3b 	bhi.w	8002566 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	68f9      	ldr	r1, [r7, #12]
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
  }
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d010      	beq.n	8002794 <HAL_I2C_ER_IRQHandler+0x46>
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	09db      	lsrs	r3, r3, #7
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002792:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	0a9b      	lsrs	r3, r3, #10
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_I2C_ER_IRQHandler+0x74>
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	09db      	lsrs	r3, r3, #7
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f043 0208 	orr.w	r2, r3, #8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	0a5b      	lsrs	r3, r3, #9
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d010      	beq.n	80027f0 <HAL_I2C_ER_IRQHandler+0xa2>
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	09db      	lsrs	r3, r3, #7
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f043 0202 	orr.w	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ee:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 030b 	and.w	r3, r3, #11
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fbda 	bl	8002fbc <I2C_ITError>
  }
}
 8002808:	bf00      	nop
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
 8002844:	4613      	mov	r3, r2
 8002846:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <I2C_Slave_ISR_IT+0x24>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0ec      	b.n	8002a8e <I2C_Slave_ISR_IT+0x1fe>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <I2C_Slave_ISR_IT+0x4c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80028d4:	6939      	ldr	r1, [r7, #16]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fa46 	bl	8002d68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d04d      	beq.n	8002984 <I2C_Slave_ISR_IT+0xf4>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d047      	beq.n	8002984 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d128      	bne.n	8002950 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b28      	cmp	r3, #40	; 0x28
 8002908:	d108      	bne.n	800291c <I2C_Slave_ISR_IT+0x8c>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002910:	d104      	bne.n	800291c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002912:	6939      	ldr	r1, [r7, #16]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fafd 	bl	8002f14 <I2C_ITListenCplt>
 800291a:	e032      	b.n	8002982 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b29      	cmp	r3, #41	; 0x29
 8002926:	d10e      	bne.n	8002946 <I2C_Slave_ISR_IT+0xb6>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800292e:	d00a      	beq.n	8002946 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2210      	movs	r2, #16
 8002936:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fbff 	bl	800313c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f9d4 	bl	8002cec <I2C_ITSlaveSeqCplt>
 8002944:	e01d      	b.n	8002982 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2210      	movs	r2, #16
 800294c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800294e:	e096      	b.n	8002a7e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2210      	movs	r2, #16
 8002956:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	f043 0204 	orr.w	r2, r3, #4
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <I2C_Slave_ISR_IT+0xe4>
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002970:	f040 8085 	bne.w	8002a7e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	4619      	mov	r1, r3
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fb1e 	bl	8002fbc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002980:	e07d      	b.n	8002a7e <I2C_Slave_ISR_IT+0x1ee>
 8002982:	e07c      	b.n	8002a7e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d030      	beq.n	80029f2 <I2C_Slave_ISR_IT+0x162>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02a      	beq.n	80029f2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d018      	beq.n	80029d8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d14f      	bne.n	8002a82 <I2C_Slave_ISR_IT+0x1f2>
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029e8:	d04b      	beq.n	8002a82 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f97e 	bl	8002cec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80029f0:	e047      	b.n	8002a82 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <I2C_Slave_ISR_IT+0x184>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002a0a:	6939      	ldr	r1, [r7, #16]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f8eb 	bl	8002be8 <I2C_ITAddrCplt>
 8002a12:	e037      	b.n	8002a84 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d031      	beq.n	8002a84 <I2C_Slave_ISR_IT+0x1f4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d02b      	beq.n	8002a84 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d018      	beq.n	8002a68 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
 8002a66:	e00d      	b.n	8002a84 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6e:	d002      	beq.n	8002a76 <I2C_Slave_ISR_IT+0x1e6>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f938 	bl	8002cec <I2C_ITSlaveSeqCplt>
 8002a7c:	e002      	b.n	8002a84 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002a82:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	8979      	ldrh	r1, [r7, #10]
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <I2C_RequestMemoryWrite+0xa4>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fca5 	bl	8003410 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	69b9      	ldr	r1, [r7, #24]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fbbe 	bl	800324c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e02c      	b.n	8002b34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae0:	893b      	ldrh	r3, [r7, #8]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28
 8002aea:	e015      	b.n	8002b18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fba4 	bl	800324c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e012      	b.n	8002b34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b0e:	893b      	ldrh	r3, [r7, #8]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fb52 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	80002000 	.word	0x80002000

08002b40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	817b      	strh	r3, [r7, #10]
 8002b52:	460b      	mov	r3, r1
 8002b54:	813b      	strh	r3, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	8979      	ldrh	r1, [r7, #10]
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <I2C_RequestMemoryRead+0xa4>)
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2300      	movs	r3, #0
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fc52 	bl	8003410 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	69b9      	ldr	r1, [r7, #24]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb6b 	bl	800324c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e02c      	b.n	8002bda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d105      	bne.n	8002b92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b86:	893b      	ldrh	r3, [r7, #8]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b90:	e015      	b.n	8002bbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b92:	893b      	ldrh	r3, [r7, #8]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fb51 	bl	800324c <I2C_WaitOnTXISFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e012      	b.n	8002bda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2140      	movs	r1, #64	; 0x40
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 faff 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	80002000 	.word	0x80002000

08002be8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bfe:	2b28      	cmp	r3, #40	; 0x28
 8002c00:	d168      	bne.n	8002cd4 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c20:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c3c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d137      	bne.n	8002cb6 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	09db      	lsrs	r3, r3, #7
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	89bb      	ldrh	r3, [r7, #12]
 8002c4e:	4053      	eors	r3, r2
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f003 0306 	and.w	r3, r3, #6
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11c      	bne.n	8002c94 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d139      	bne.n	8002ce4 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c86:	89ba      	ldrh	r2, [r7, #12]
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff fdd3 	bl	8002838 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c92:	e027      	b.n	8002ce4 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8002c94:	893b      	ldrh	r3, [r7, #8]
 8002c96:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c98:	2104      	movs	r1, #4
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fbe6 	bl	800346c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ca8:	89ba      	ldrh	r2, [r7, #12]
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fdc2 	bl	8002838 <HAL_I2C_AddrCallback>
}
 8002cb4:	e016      	b.n	8002ce4 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cb6:	2104      	movs	r1, #4
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fbd7 	bl	800346c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cc6:	89ba      	ldrh	r2, [r7, #12]
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fdb3 	bl	8002838 <HAL_I2C_AddrCallback>
}
 8002cd2:	e007      	b.n	8002ce4 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b29      	cmp	r3, #41	; 0x29
 8002d06:	d112      	bne.n	8002d2e <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2228      	movs	r2, #40	; 0x28
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2221      	movs	r2, #33	; 0x21
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d16:	2101      	movs	r1, #1
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fba7 	bl	800346c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff fd72 	bl	8002810 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d2c:	e017      	b.n	8002d5e <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b2a      	cmp	r3, #42	; 0x2a
 8002d38:	d111      	bne.n	8002d5e <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2228      	movs	r2, #40	; 0x28
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2222      	movs	r2, #34	; 0x22
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d48:	2102      	movs	r1, #2
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fb8e 	bl	800346c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff fd63 	bl	8002824 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2220      	movs	r2, #32
 8002d84:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002d86:	2107      	movs	r1, #7
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fb6f 	bl	800346c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <I2C_ITSlaveCplt+0x1a4>)
 8002daa:	400b      	ands	r3, r1
 8002dac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9c4 	bl	800313c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	0b9b      	lsrs	r3, r3, #14
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d018      	beq.n	8002dfa <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dd6:	e010      	b.n	8002dfa <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	0bdb      	lsrs	r3, r3, #15
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d020      	beq.n	8002e48 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f043 0204 	orr.w	r2, r3, #4
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f89b 	bl	8002fbc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b28      	cmp	r3, #40	; 0x28
 8002e90:	d138      	bne.n	8002f04 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e92:	68f9      	ldr	r1, [r7, #12]
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f83d 	bl	8002f14 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e9a:	e033      	b.n	8002f04 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ea4:	d011      	beq.n	8002eca <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff20 	bl	8002cec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <I2C_ITSlaveCplt+0x1a8>)
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fcc6 	bl	8002854 <HAL_I2C_ListenCpltCallback>
}
 8002ec8:	e01c      	b.n	8002f04 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b22      	cmp	r3, #34	; 0x22
 8002ed4:	d10b      	bne.n	8002eee <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff fc9c 	bl	8002824 <HAL_I2C_SlaveRxCpltCallback>
}
 8002eec:	e00a      	b.n	8002f04 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fc86 	bl	8002810 <HAL_I2C_SlaveTxCpltCallback>
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	fe00e800 	.word	0xfe00e800
 8002f10:	ffff0000 	.word	0xffff0000

08002f14 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <I2C_ITListenCplt+0xa4>)
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d022      	beq.n	8002f92 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f92:	2107      	movs	r1, #7
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa69 	bl	800346c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fc52 	bl	8002854 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	ffff0000 	.word	0xffff0000

08002fbc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fcc:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a55      	ldr	r2, [pc, #340]	; (8003130 <I2C_ITError+0x174>)
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b28      	cmp	r3, #40	; 0x28
 8002ff2:	d005      	beq.n	8003000 <I2C_ITError+0x44>
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b29      	cmp	r3, #41	; 0x29
 8002ff8:	d002      	beq.n	8003000 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffe:	d10e      	bne.n	800301e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003000:	2103      	movs	r1, #3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa32 	bl	800346c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2228      	movs	r2, #40	; 0x28
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a46      	ldr	r2, [pc, #280]	; (8003134 <I2C_ITError+0x178>)
 800301a:	635a      	str	r2, [r3, #52]	; 0x34
 800301c:	e013      	b.n	8003046 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800301e:	2107      	movs	r1, #7
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fa23 	bl	800346c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b60      	cmp	r3, #96	; 0x60
 8003030:	d003      	beq.n	800303a <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003054:	d123      	bne.n	800309e <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003064:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	2b00      	cmp	r3, #0
 800306c:	d05c      	beq.n	8003128 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	4a31      	ldr	r2, [pc, #196]	; (8003138 <I2C_ITError+0x17c>)
 8003074:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fd82 	bl	8001b8c <HAL_DMA_Abort_IT>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d04c      	beq.n	8003128 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800309c:	e044      	b.n	8003128 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ac:	d123      	bne.n	80030f6 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030bc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d030      	beq.n	8003128 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <I2C_ITError+0x17c>)
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fd56 	bl	8001b8c <HAL_DMA_Abort_IT>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d020      	beq.n	8003128 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030f0:	4610      	mov	r0, r2
 80030f2:	4798      	blx	r3
}
 80030f4:	e018      	b.n	8003128 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b60      	cmp	r3, #96	; 0x60
 8003100:	d10b      	bne.n	800311a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff fbb2 	bl	800287c <HAL_I2C_AbortCpltCallback>
}
 8003118:	e006      	b.n	8003128 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fba0 	bl	8002868 <HAL_I2C_ErrorCallback>
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	ffff0000 	.word	0xffff0000
 8003134:	08002891 	.word	0x08002891
 8003138:	08003185 	.word	0x08003185

0800313c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d103      	bne.n	800315a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d007      	beq.n	8003178 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	619a      	str	r2, [r3, #24]
  }
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	2200      	movs	r2, #0
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2200      	movs	r2, #0
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b60      	cmp	r3, #96	; 0x60
 80031ac:	d107      	bne.n	80031be <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff fb60 	bl	800287c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031bc:	e002      	b.n	80031c4 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fb52 	bl	8002868 <HAL_I2C_ErrorCallback>
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031dc:	e022      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d01e      	beq.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fe fbc1 	bl	800196c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d113      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e00f      	b.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	429a      	cmp	r2, r3
 8003240:	d0cd      	beq.n	80031de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003258:	e02c      	b.n	80032b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f870 	bl	8003344 <I2C_IsAcknowledgeFailed>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e02a      	b.n	80032c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d01e      	beq.n	80032b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fe fb79 	bl	800196c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d113      	bne.n	80032b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e007      	b.n	80032c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d1cb      	bne.n	800325a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d8:	e028      	b.n	800332c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f830 	bl	8003344 <I2C_IsAcknowledgeFailed>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e026      	b.n	800333c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fb3d 	bl	800196c <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d113      	bne.n	800332c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e007      	b.n	800333c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b20      	cmp	r3, #32
 8003338:	d1cf      	bne.n	80032da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b10      	cmp	r3, #16
 800335c:	d151      	bne.n	8003402 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800335e:	e022      	b.n	80033a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d01e      	beq.n	80033a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003368:	f7fe fb00 	bl	800196c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	d302      	bcc.n	800337e <I2C_IsAcknowledgeFailed+0x3a>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d113      	bne.n	80033a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e02e      	b.n	8003404 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d1d5      	bne.n	8003360 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2210      	movs	r2, #16
 80033ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2220      	movs	r2, #32
 80033c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff feb9 	bl	800313c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b0d      	ldr	r3, [pc, #52]	; (800340c <I2C_IsAcknowledgeFailed+0xc8>)
 80033d6:	400b      	ands	r3, r1
 80033d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f043 0204 	orr.w	r2, r3, #4
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	fe00e800 	.word	0xfe00e800

08003410 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	817b      	strh	r3, [r7, #10]
 800341e:	4613      	mov	r3, r2
 8003420:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	0d5b      	lsrs	r3, r3, #21
 800342c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <I2C_TransferConfig+0x58>)
 8003432:	430b      	orrs	r3, r1
 8003434:	43db      	mvns	r3, r3
 8003436:	ea02 0103 	and.w	r1, r2, r3
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003440:	7a7b      	ldrb	r3, [r7, #9]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	431a      	orrs	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	03ff63ff 	.word	0x03ff63ff

0800346c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800347c:	887b      	ldrh	r3, [r7, #2]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00f      	beq.n	80034a6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800348c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800349a:	2b28      	cmp	r3, #40	; 0x28
 800349c:	d003      	beq.n	80034a6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80034a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00f      	beq.n	80034d0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80034b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034c4:	2b28      	cmp	r3, #40	; 0x28
 80034c6:	d003      	beq.n	80034d0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80034ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80034e0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	f003 0311 	and.w	r3, r3, #17
 80034e8:	2b11      	cmp	r3, #17
 80034ea:	d103      	bne.n	80034f4 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80034f2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	f003 0312 	and.w	r3, r3, #18
 80034fa:	2b12      	cmp	r3, #18
 80034fc:	d103      	bne.n	8003506 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f043 0320 	orr.w	r3, r3, #32
 8003504:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	f003 0312 	and.w	r3, r3, #18
 800350c:	2b12      	cmp	r3, #18
 800350e:	d103      	bne.n	8003518 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003516:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43da      	mvns	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	400a      	ands	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	d138      	bne.n	80035be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003556:	2302      	movs	r3, #2
 8003558:	e032      	b.n	80035c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	; 0x24
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003588:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d139      	bne.n	8003656 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e033      	b.n	8003658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800361e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800366a:	af00      	add	r7, sp, #0
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f000 bf01 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8160 	beq.w	800394e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800368e:	4bae      	ldr	r3, [pc, #696]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d00c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800369a:	4bab      	ldr	r3, [pc, #684]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d159      	bne.n	800375a <HAL_RCC_OscConfig+0xf6>
 80036a6:	4ba8      	ldr	r3, [pc, #672]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d152      	bne.n	800375a <HAL_RCC_OscConfig+0xf6>
 80036b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_OscConfig+0x82>
 80036e0:	4b99      	ldr	r3, [pc, #612]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0xae>
 80036e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80036fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003702:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800370e:	4b8e      	ldr	r3, [pc, #568]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003716:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800371a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800371e:	fa92 f2a2 	rbit	r2, r2
 8003722:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003726:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800372a:	fab2 f282 	clz	r2, r2
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f042 0220 	orr.w	r2, r2, #32
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f002 021f 	and.w	r2, r2, #31
 800373a:	2101      	movs	r1, #1
 800373c:	fa01 f202 	lsl.w	r2, r1, r2
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8102 	beq.w	800394c <HAL_RCC_OscConfig+0x2e8>
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 80fc 	bne.w	800394c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f000 be93 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d106      	bne.n	8003774 <HAL_RCC_OscConfig+0x110>
 8003766:	4b78      	ldr	r3, [pc, #480]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a77      	ldr	r2, [pc, #476]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e030      	b.n	80037d6 <HAL_RCC_OscConfig+0x172>
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x134>
 800377e:	4b72      	ldr	r3, [pc, #456]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a71      	ldr	r2, [pc, #452]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6e      	ldr	r2, [pc, #440]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01e      	b.n	80037d6 <HAL_RCC_OscConfig+0x172>
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a2:	d10c      	bne.n	80037be <HAL_RCC_OscConfig+0x15a>
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a67      	ldr	r2, [pc, #412]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b65      	ldr	r3, [pc, #404]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a64      	ldr	r2, [pc, #400]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	e00b      	b.n	80037d6 <HAL_RCC_OscConfig+0x172>
 80037be:	4b62      	ldr	r3, [pc, #392]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a61      	ldr	r2, [pc, #388]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5e      	ldr	r2, [pc, #376]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d059      	beq.n	8003894 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe f8c4 	bl	800196c <HAL_GetTick>
 80037e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ea:	f7fe f8bf 	bl	800196c <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d902      	bls.n	8003800 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	f000 be40 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003804:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003814:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d102      	bne.n	8003832 <HAL_RCC_OscConfig+0x1ce>
 800382c:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x1fa>
 8003832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003836:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800384e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003862:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003866:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800386a:	fa92 f2a2 	rbit	r2, r2
 800386e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003872:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003876:	fab2 f282 	clz	r2, r2
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f042 0220 	orr.w	r2, r2, #32
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	f002 021f 	and.w	r2, r2, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0ab      	beq.n	80037ea <HAL_RCC_OscConfig+0x186>
 8003892:	e05c      	b.n	800394e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe f86a 	bl	800196c <HAL_GetTick>
 8003898:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800389e:	f7fe f865 	bl	800196c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d902      	bls.n	80038b4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	f000 bde6 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
 80038b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80038c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d102      	bne.n	80038e6 <HAL_RCC_OscConfig+0x282>
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x2ae>
 80038e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80038fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003902:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003916:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800391a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800391e:	fa92 f2a2 	rbit	r2, r2
 8003922:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003926:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ab      	bne.n	800389e <HAL_RCC_OscConfig+0x23a>
 8003946:	e002      	b.n	800394e <HAL_RCC_OscConfig+0x2ea>
 8003948:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8170 	beq.w	8003c3e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800395e:	4bd0      	ldr	r3, [pc, #832]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800396a:	4bcd      	ldr	r3, [pc, #820]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b08      	cmp	r3, #8
 8003974:	d16d      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3ee>
 8003976:	4bca      	ldr	r3, [pc, #808]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	d166      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3ee>
 8003984:	2302      	movs	r3, #2
 8003986:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003996:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_RCC_OscConfig+0x350>
 80039ae:	4bbc      	ldr	r3, [pc, #752]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e013      	b.n	80039dc <HAL_RCC_OscConfig+0x378>
 80039b4:	2302      	movs	r3, #2
 80039b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80039c6:	2302      	movs	r3, #2
 80039c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80039d8:	4bb1      	ldr	r3, [pc, #708]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2202      	movs	r2, #2
 80039de:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80039e2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80039e6:	fa92 f2a2 	rbit	r2, r2
 80039ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80039ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80039f2:	fab2 f282 	clz	r2, r2
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f042 0220 	orr.w	r2, r2, #32
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f002 021f 	and.w	r2, r2, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_RCC_OscConfig+0x3ba>
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d002      	beq.n	8003a1e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f000 bd31 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	21f8      	movs	r1, #248	; 0xf8
 8003a2e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003a36:	fa91 f1a1 	rbit	r1, r1
 8003a3a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003a3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a42:	fab1 f181 	clz	r1, r1
 8003a46:	b2c9      	uxtb	r1, r1
 8003a48:	408b      	lsls	r3, r1
 8003a4a:	4995      	ldr	r1, [pc, #596]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a50:	e0f5      	b.n	8003c3e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8085 	beq.w	8003b68 <HAL_RCC_OscConfig+0x504>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003a70:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	461a      	mov	r2, r3
 8003a86:	2301      	movs	r3, #1
 8003a88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fd ff6f 	bl	800196c <HAL_GetTick>
 8003a8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fd ff6a 	bl	800196c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d902      	bls.n	8003aaa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	f000 bceb 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003abc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <HAL_RCC_OscConfig+0x476>
 8003ad4:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e013      	b.n	8003b02 <HAL_RCC_OscConfig+0x49e>
 8003ada:	2302      	movs	r3, #2
 8003adc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003aec:	2302      	movs	r3, #2
 8003aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003af2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003afe:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2202      	movs	r2, #2
 8003b04:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003b08:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003b0c:	fa92 f2a2 	rbit	r2, r2
 8003b10:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003b14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f042 0220 	orr.w	r2, r2, #32
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f002 021f 	and.w	r2, r2, #31
 8003b28:	2101      	movs	r1, #1
 8003b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0af      	beq.n	8003a94 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b5a      	ldr	r3, [pc, #360]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3c:	1d3b      	adds	r3, r7, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	21f8      	movs	r1, #248	; 0xf8
 8003b44:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003b4c:	fa91 f1a1 	rbit	r1, r1
 8003b50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003b54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b58:	fab1 f181 	clz	r1, r1
 8003b5c:	b2c9      	uxtb	r1, r1
 8003b5e:	408b      	lsls	r3, r1
 8003b60:	494f      	ldr	r1, [pc, #316]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
 8003b66:	e06a      	b.n	8003c3e <HAL_RCC_OscConfig+0x5da>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003b7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2300      	movs	r3, #0
 8003b92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd feea 	bl	800196c <HAL_GetTick>
 8003b98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9e:	f7fd fee5 	bl	800196c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	f000 bc66 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCC_OscConfig+0x580>
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	e013      	b.n	8003c0c <HAL_RCC_OscConfig+0x5a8>
 8003be4:	2302      	movs	r3, #2
 8003be6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003bfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003c12:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003c16:	fa92 f2a2 	rbit	r2, r2
 8003c1a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003c1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f042 0220 	orr.w	r2, r2, #32
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f002 021f 	and.w	r2, r2, #31
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1af      	bne.n	8003b9e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80da 	beq.w	8003e02 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d069      	beq.n	8003d2c <HAL_RCC_OscConfig+0x6c8>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003c6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_OscConfig+0x640>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2301      	movs	r3, #1
 8003c80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c82:	f7fd fe73 	bl	800196c <HAL_GetTick>
 8003c86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	e00d      	b.n	8003ca8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fd fe6e 	bl	800196c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d905      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e3ef      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	10908120 	.word	0x10908120
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb2:	fa93 f2a3 	rbit	r2, r3
 8003cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003cd8:	2202      	movs	r2, #2
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	fa93 f2a3 	rbit	r2, r3
 8003ce6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003cea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cec:	4ba4      	ldr	r3, [pc, #656]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	6019      	str	r1, [r3, #0]
 8003cf8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	fa93 f1a3 	rbit	r1, r3
 8003d02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d06:	6019      	str	r1, [r3, #0]
  return result;
 8003d08:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0b0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x628>
 8003d2a:	e06a      	b.n	8003e02 <HAL_RCC_OscConfig+0x79e>
 8003d2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	fa93 f2a3 	rbit	r2, r3
 8003d3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d42:	601a      	str	r2, [r3, #0]
  return result;
 8003d44:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d48:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b8c      	ldr	r3, [pc, #560]	; (8003f84 <HAL_RCC_OscConfig+0x920>)
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fe05 	bl	800196c <HAL_GetTick>
 8003d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d66:	e009      	b.n	8003d7c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d68:	f7fd fe00 	bl	800196c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e381      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003d7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d80:	2202      	movs	r2, #2
 8003d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	fa93 f2a3 	rbit	r2, r3
 8003d8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d98:	2202      	movs	r2, #2
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	fa93 f2a3 	rbit	r2, r3
 8003da6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003db0:	2202      	movs	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003dc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b6e      	ldr	r3, [pc, #440]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dcc:	2102      	movs	r1, #2
 8003dce:	6019      	str	r1, [r3, #0]
 8003dd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fa93 f1a3 	rbit	r1, r3
 8003dda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003dde:	6019      	str	r1, [r3, #0]
  return result;
 8003de0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1b2      	bne.n	8003d68 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8157 	beq.w	80040c0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d112      	bne.n	8003e4a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b56      	ldr	r3, [pc, #344]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	61d3      	str	r3, [r2, #28]
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e38:	f107 030c 	add.w	r3, r7, #12
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <HAL_RCC_OscConfig+0x924>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11a      	bne.n	8003e8c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e56:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <HAL_RCC_OscConfig+0x924>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a4b      	ldr	r2, [pc, #300]	; (8003f88 <HAL_RCC_OscConfig+0x924>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7fd fd83 	bl	800196c <HAL_GetTick>
 8003e66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	e009      	b.n	8003e80 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fd fd7e 	bl	800196c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b64      	cmp	r3, #100	; 0x64
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2ff      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x924>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ef      	beq.n	8003e6c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x840>
 8003e96:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a39      	ldr	r2, [pc, #228]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6213      	str	r3, [r2, #32]
 8003ea2:	e02f      	b.n	8003f04 <HAL_RCC_OscConfig+0x8a0>
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x864>
 8003eae:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6213      	str	r3, [r2, #32]
 8003eba:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	e01d      	b.n	8003f04 <HAL_RCC_OscConfig+0x8a0>
 8003ec8:	1d3b      	adds	r3, r7, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x888>
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6213      	str	r3, [r2, #32]
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6213      	str	r3, [r2, #32]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0x8a0>
 8003eec:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	6213      	str	r3, [r2, #32]
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003efe:	f023 0304 	bic.w	r3, r3, #4
 8003f02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d06a      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fd fd2d 	bl	800196c <HAL_GetTick>
 8003f12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fd fd28 	bl	800196c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e2a7      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f34:	2202      	movs	r2, #2
 8003f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	fa93 f2a3 	rbit	r2, r3
 8003f42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	fa93 f2a3 	rbit	r2, r3
 8003f5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f5e:	601a      	str	r2, [r3, #0]
  return result;
 8003f60:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d108      	bne.n	8003f8c <HAL_RCC_OscConfig+0x928>
 8003f7a:	4b01      	ldr	r3, [pc, #4]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	e013      	b.n	8003fa8 <HAL_RCC_OscConfig+0x944>
 8003f80:	40021000 	.word	0x40021000
 8003f84:	10908120 	.word	0x10908120
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f90:	2202      	movs	r2, #2
 8003f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fa93 f2a3 	rbit	r2, r3
 8003f9e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	4bc0      	ldr	r3, [pc, #768]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003fac:	2102      	movs	r1, #2
 8003fae:	6011      	str	r1, [r2, #0]
 8003fb0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	fa92 f1a2 	rbit	r1, r2
 8003fba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fbe:	6011      	str	r1, [r2, #0]
  return result;
 8003fc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	fab2 f282 	clz	r2, r2
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	f002 021f 	and.w	r2, r2, #31
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d09a      	beq.n	8003f18 <HAL_RCC_OscConfig+0x8b4>
 8003fe2:	e063      	b.n	80040ac <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe4:	f7fd fcc2 	bl	800196c <HAL_GetTick>
 8003fe8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	e00b      	b.n	8004006 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fee:	f7fd fcbd 	bl	800196c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e23c      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8004006:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800400a:	2202      	movs	r2, #2
 800400c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	fa93 f2a3 	rbit	r2, r3
 8004018:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004022:	2202      	movs	r2, #2
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	fa93 f2a3 	rbit	r2, r3
 8004030:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004034:	601a      	str	r2, [r3, #0]
  return result;
 8004036:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800403a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f043 0302 	orr.w	r3, r3, #2
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d102      	bne.n	8004056 <HAL_RCC_OscConfig+0x9f2>
 8004050:	4b95      	ldr	r3, [pc, #596]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	e00d      	b.n	8004072 <HAL_RCC_OscConfig+0xa0e>
 8004056:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800405a:	2202      	movs	r2, #2
 800405c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa93 f2a3 	rbit	r2, r3
 8004068:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	4b8e      	ldr	r3, [pc, #568]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004076:	2102      	movs	r1, #2
 8004078:	6011      	str	r1, [r2, #0]
 800407a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	fa92 f1a2 	rbit	r1, r2
 8004084:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004088:	6011      	str	r1, [r2, #0]
  return result;
 800408a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	fab2 f282 	clz	r2, r2
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	f002 021f 	and.w	r2, r2, #31
 80040a0:	2101      	movs	r1, #1
 80040a2:	fa01 f202 	lsl.w	r2, r1, r2
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1a0      	bne.n	8003fee <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040ac:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b4:	4b7c      	ldr	r3, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4a7b      	ldr	r2, [pc, #492]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80040ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 81d9 	beq.w	800447e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040cc:	4b76      	ldr	r3, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	f000 81a6 	beq.w	8004426 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	f040 811e 	bne.w	8004322 <HAL_RCC_OscConfig+0xcbe>
 80040e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	fa93 f2a3 	rbit	r2, r3
 80040fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040fe:	601a      	str	r2, [r3, #0]
  return result;
 8004100:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004104:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	461a      	mov	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fd fc26 	bl	800196c <HAL_GetTick>
 8004120:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004124:	e009      	b.n	800413a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004126:	f7fd fc21 	bl	800196c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1a2      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 800413a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800413e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	fa93 f2a3 	rbit	r2, r3
 800414e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004152:	601a      	str	r2, [r3, #0]
  return result;
 8004154:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004158:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d102      	bne.n	8004174 <HAL_RCC_OscConfig+0xb10>
 800416e:	4b4e      	ldr	r3, [pc, #312]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	e01b      	b.n	80041ac <HAL_RCC_OscConfig+0xb48>
 8004174:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	fa93 f2a3 	rbit	r2, r3
 8004188:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	fa93 f2a3 	rbit	r2, r3
 80041a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80041b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	fa92 f1a2 	rbit	r1, r2
 80041c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041c4:	6011      	str	r1, [r2, #0]
  return result;
 80041c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	fab2 f282 	clz	r2, r2
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f042 0220 	orr.w	r2, r2, #32
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f002 021f 	and.w	r2, r2, #31
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f202 	lsl.w	r2, r1, r2
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d19e      	bne.n	8004126 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e8:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	f023 020f 	bic.w	r2, r3, #15
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	492c      	ldr	r1, [pc, #176]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80041fc:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a19      	ldr	r1, [r3, #32]
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	430b      	orrs	r3, r1
 8004212:	4925      	ldr	r1, [pc, #148]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800421c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	fa93 f2a3 	rbit	r2, r3
 800422c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004230:	601a      	str	r2, [r3, #0]
  return result;
 8004232:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004236:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004242:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	461a      	mov	r2, r3
 800424a:	2301      	movs	r3, #1
 800424c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424e:	f7fd fb8d 	bl	800196c <HAL_GetTick>
 8004252:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004256:	e009      	b.n	800426c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd fb88 	bl	800196c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e109      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 800426c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	fa93 f2a3 	rbit	r2, r3
 8004280:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004284:	601a      	str	r2, [r3, #0]
  return result;
 8004286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800428a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCC_OscConfig+0xc48>
 80042a0:	4b01      	ldr	r3, [pc, #4]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	e01e      	b.n	80042e4 <HAL_RCC_OscConfig+0xc80>
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	fa93 f2a3 	rbit	r2, r3
 80042c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	fa93 f2a3 	rbit	r2, r3
 80042da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042ec:	6011      	str	r1, [r2, #0]
 80042ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	fa92 f1a2 	rbit	r1, r2
 80042f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042fc:	6011      	str	r1, [r2, #0]
  return result;
 80042fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	fab2 f282 	clz	r2, r2
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f042 0220 	orr.w	r2, r2, #32
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	f002 021f 	and.w	r2, r2, #31
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f202 	lsl.w	r2, r1, r2
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d09b      	beq.n	8004258 <HAL_RCC_OscConfig+0xbf4>
 8004320:	e0ad      	b.n	800447e <HAL_RCC_OscConfig+0xe1a>
 8004322:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004326:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800432a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	fa93 f2a3 	rbit	r2, r3
 8004336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800433a:	601a      	str	r2, [r3, #0]
  return result;
 800433c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004340:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800434c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7fd fb08 	bl	800196c <HAL_GetTick>
 800435c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004360:	e009      	b.n	8004376 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004362:	f7fd fb03 	bl	800196c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e084      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8004376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800437a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800437e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	fa93 f2a3 	rbit	r2, r3
 800438a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800438e:	601a      	str	r2, [r3, #0]
  return result;
 8004390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004394:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d102      	bne.n	80043b0 <HAL_RCC_OscConfig+0xd4c>
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	e01b      	b.n	80043e8 <HAL_RCC_OscConfig+0xd84>
 80043b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	fa93 f2a3 	rbit	r2, r3
 80043c4:	f107 0320 	add.w	r3, r7, #32
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f107 031c 	add.w	r3, r7, #28
 80043ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f107 031c 	add.w	r3, r7, #28
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	fa93 f2a3 	rbit	r2, r3
 80043de:	f107 0318 	add.w	r3, r7, #24
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f107 0214 	add.w	r2, r7, #20
 80043ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043f0:	6011      	str	r1, [r2, #0]
 80043f2:	f107 0214 	add.w	r2, r7, #20
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	fa92 f1a2 	rbit	r1, r2
 80043fc:	f107 0210 	add.w	r2, r7, #16
 8004400:	6011      	str	r1, [r2, #0]
  return result;
 8004402:	f107 0210 	add.w	r2, r7, #16
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	fab2 f282 	clz	r2, r2
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f042 0220 	orr.w	r2, r2, #32
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	f002 021f 	and.w	r2, r2, #31
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f202 	lsl.w	r2, r1, r2
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d19e      	bne.n	8004362 <HAL_RCC_OscConfig+0xcfe>
 8004424:	e02b      	b.n	800447e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e025      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004434:	4b15      	ldr	r3, [pc, #84]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004444:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004448:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	429a      	cmp	r2, r3
 8004454:	d111      	bne.n	800447a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004456:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800445a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004464:	429a      	cmp	r2, r3
 8004466:	d108      	bne.n	800447a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b09e      	sub	sp, #120	; 0x78
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e162      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b90      	ldr	r3, [pc, #576]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b8d      	ldr	r3, [pc, #564]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 0207 	bic.w	r2, r3, #7
 80044be:	498b      	ldr	r1, [pc, #556]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b89      	ldr	r3, [pc, #548]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e14a      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e4:	4b82      	ldr	r3, [pc, #520]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	497f      	ldr	r1, [pc, #508]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80dc 	beq.w	80046bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d13c      	bne.n	8004586 <HAL_RCC_ClockConfig+0xf6>
 800450c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004510:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_RCC_ClockConfig+0xa6>
 8004530:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e00f      	b.n	8004556 <HAL_RCC_ClockConfig+0xc6>
 8004536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800453a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	667b      	str	r3, [r7, #100]	; 0x64
 8004544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004548:	663b      	str	r3, [r7, #96]	; 0x60
 800454a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800455a:	65ba      	str	r2, [r7, #88]	; 0x58
 800455c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800455e:	fa92 f2a2 	rbit	r2, r2
 8004562:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004564:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004566:	fab2 f282 	clz	r2, r2
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	f042 0220 	orr.w	r2, r2, #32
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	f002 021f 	and.w	r2, r2, #31
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d17b      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0f3      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d13c      	bne.n	8004608 <HAL_RCC_ClockConfig+0x178>
 800458e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004592:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d102      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x128>
 80045b2:	4b4f      	ldr	r3, [pc, #316]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	e00f      	b.n	80045d8 <HAL_RCC_ClockConfig+0x148>
 80045b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ca:	643b      	str	r3, [r7, #64]	; 0x40
 80045cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	4b46      	ldr	r3, [pc, #280]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80045de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e0:	fa92 f2a2 	rbit	r2, r2
 80045e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80045e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d13a      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b2      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
 8004608:	2302      	movs	r3, #2
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <HAL_RCC_ClockConfig+0x1a0>
 800462a:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e00d      	b.n	800464c <HAL_RCC_ClockConfig+0x1bc>
 8004630:	2302      	movs	r3, #2
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	2302      	movs	r3, #2
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	fa93 f3a3 	rbit	r3, r3
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2202      	movs	r2, #2
 800464e:	61ba      	str	r2, [r7, #24]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	fa92 f2a2 	rbit	r2, r2
 8004656:	617a      	str	r2, [r7, #20]
  return result;
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	f042 0220 	orr.w	r2, r2, #32
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	f002 021f 	and.w	r2, r2, #31
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f202 	lsl.w	r2, r1, r2
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e079      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	491a      	ldr	r1, [pc, #104]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800468c:	f7fd f96e 	bl	800196c <HAL_GetTick>
 8004690:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fd f96a 	bl	800196c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e061      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 020c 	and.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d1eb      	bne.n	8004694 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d214      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 0207 	bic.w	r2, r3, #7
 80046d2:	4906      	ldr	r1, [pc, #24]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e040      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	491a      	ldr	r1, [pc, #104]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4912      	ldr	r1, [pc, #72]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004732:	f000 f829 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004736:	4601      	mov	r1, r0
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004740:	22f0      	movs	r2, #240	; 0xf0
 8004742:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	fa92 f2a2 	rbit	r2, r2
 800474a:	60fa      	str	r2, [r7, #12]
  return result;
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	fab2 f282 	clz	r2, r2
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	40d3      	lsrs	r3, r2
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x2ec>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	fa21 f303 	lsr.w	r3, r1, r3
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <HAL_RCC_ClockConfig+0x2f0>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_RCC_ClockConfig+0x2f4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc ffd4 	bl	8001714 <HAL_InitTick>
  
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3778      	adds	r7, #120	; 0x78
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	08008730 	.word	0x08008730
 8004780:	20000000 	.word	0x20000000
 8004784:	20000004 	.word	0x20000004

08004788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b08b      	sub	sp, #44	; 0x2c
 800478c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d002      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x30>
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d003      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x36>
 80047b6:	e03f      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047ba:	623b      	str	r3, [r7, #32]
      break;
 80047bc:	e03f      	b.n	800483e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047c8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	fa92 f2a2 	rbit	r2, r2
 80047d0:	607a      	str	r2, [r7, #4]
  return result;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	fab2 f282 	clz	r2, r2
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	40d3      	lsrs	r3, r2
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	220f      	movs	r2, #15
 80047ec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	fa92 f2a2 	rbit	r2, r2
 80047f4:	60fa      	str	r2, [r7, #12]
  return result;
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	fab2 f282 	clz	r2, r2
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	40d3      	lsrs	r3, r2
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004810:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	fbb2 f2f3 	udiv	r2, r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e007      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	fbb2 f2f3 	udiv	r2, r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	623b      	str	r3, [r7, #32]
      break;
 8004836:	e002      	b.n	800483e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 800483a:	623b      	str	r3, [r7, #32]
      break;
 800483c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800483e:	6a3b      	ldr	r3, [r7, #32]
}
 8004840:	4618      	mov	r0, r3
 8004842:	372c      	adds	r7, #44	; 0x2c
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40021000 	.word	0x40021000
 8004850:	007a1200 	.word	0x007a1200
 8004854:	08008748 	.word	0x08008748
 8004858:	08008758 	.word	0x08008758

0800485c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004860:	4b03      	ldr	r3, [pc, #12]	; (8004870 <HAL_RCC_GetHCLKFreq+0x14>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000000 	.word	0x20000000

08004874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800487a:	f7ff ffef 	bl	800485c <HAL_RCC_GetHCLKFreq>
 800487e:	4601      	mov	r1, r0
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004888:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800488c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	fa92 f2a2 	rbit	r2, r2
 8004894:	603a      	str	r2, [r7, #0]
  return result;
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	fab2 f282 	clz	r2, r2
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	40d3      	lsrs	r3, r2
 80048a0:	4a04      	ldr	r2, [pc, #16]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000
 80048b4:	08008740 	.word	0x08008740

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048be:	f7ff ffcd 	bl	800485c <HAL_RCC_GetHCLKFreq>
 80048c2:	4601      	mov	r1, r0
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80048cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80048d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	fa92 f2a2 	rbit	r2, r2
 80048d8:	603a      	str	r2, [r7, #0]
  return result;
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	fab2 f282 	clz	r2, r2
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	40d3      	lsrs	r3, r2
 80048e4:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
 80048e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000
 80048f8:	08008740 	.word	0x08008740

080048fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	220f      	movs	r2, #15
 800490a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800490c:	4b12      	ldr	r3, [pc, #72]	; (8004958 <HAL_RCC_GetClockConfig+0x5c>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <HAL_RCC_GetClockConfig+0x5c>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <HAL_RCC_GetClockConfig+0x5c>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <HAL_RCC_GetClockConfig+0x5c>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	08db      	lsrs	r3, r3, #3
 8004936:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <HAL_RCC_GetClockConfig+0x60>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0207 	and.w	r2, r3, #7
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
 800495c:	40022000 	.word	0x40022000

08004960 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b092      	sub	sp, #72	; 0x48
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80d7 	beq.w	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004984:	4b4e      	ldr	r3, [pc, #312]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10e      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004990:	4b4b      	ldr	r3, [pc, #300]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	4a4a      	ldr	r2, [pc, #296]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	61d3      	str	r3, [r2, #28]
 800499c:	4b48      	ldr	r3, [pc, #288]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ae:	4b45      	ldr	r3, [pc, #276]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d118      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ba:	4b42      	ldr	r3, [pc, #264]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a41      	ldr	r2, [pc, #260]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c6:	f7fc ffd1 	bl	800196c <HAL_GetTick>
 80049ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	e008      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ce:	f7fc ffcd 	bl	800196c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b64      	cmp	r3, #100	; 0x64
 80049da:	d901      	bls.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e1d6      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ec:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8084 	beq.w	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d07c      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a0c:	4b2c      	ldr	r3, [pc, #176]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	461a      	mov	r2, r3
 8004a36:	2301      	movs	r3, #1
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a5e:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d04b      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fc ff7d 	bl	800196c <HAL_GetTick>
 8004a72:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fc ff79 	bl	800196c <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e180      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
 8004a98:	2302      	movs	r3, #2
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	61fb      	str	r3, [r7, #28]
  return result;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f043 0302 	orr.w	r3, r3, #2
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d108      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004aba:	4b01      	ldr	r3, [pc, #4]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	e00d      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	10908100 	.word	0x10908100
 8004acc:	2302      	movs	r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	4ba0      	ldr	r3, [pc, #640]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2202      	movs	r2, #2
 8004ade:	613a      	str	r2, [r7, #16]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	fa92 f2a2 	rbit	r2, r2
 8004ae6:	60fa      	str	r2, [r7, #12]
  return result;
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	fab2 f282 	clz	r2, r2
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	f002 021f 	and.w	r2, r2, #31
 8004afa:	2101      	movs	r1, #1
 8004afc:	fa01 f202 	lsl.w	r2, r1, r2
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0b7      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b06:	4b95      	ldr	r3, [pc, #596]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4992      	ldr	r1, [pc, #584]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b20:	4b8e      	ldr	r3, [pc, #568]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4a8d      	ldr	r2, [pc, #564]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b38:	4b88      	ldr	r3, [pc, #544]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	f023 0203 	bic.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4985      	ldr	r1, [pc, #532]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b56:	4b81      	ldr	r3, [pc, #516]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	497e      	ldr	r1, [pc, #504]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b74:	4b79      	ldr	r3, [pc, #484]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	4976      	ldr	r1, [pc, #472]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b92:	4b72      	ldr	r3, [pc, #456]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	f023 0210 	bic.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	496f      	ldr	r1, [pc, #444]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004bb0:	4b6a      	ldr	r3, [pc, #424]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbc:	4967      	ldr	r1, [pc, #412]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bce:	4b63      	ldr	r3, [pc, #396]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f023 0220 	bic.w	r2, r3, #32
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4960      	ldr	r1, [pc, #384]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bec:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	4958      	ldr	r1, [pc, #352]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d008      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c0a:	4b54      	ldr	r3, [pc, #336]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4951      	ldr	r1, [pc, #324]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c28:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	4949      	ldr	r1, [pc, #292]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c46:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4942      	ldr	r1, [pc, #264]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c64:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	493a      	ldr	r1, [pc, #232]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004c82:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	4933      	ldr	r1, [pc, #204]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ca0:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cac:	492b      	ldr	r1, [pc, #172]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004cbe:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	4924      	ldr	r1, [pc, #144]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	491c      	ldr	r1, [pc, #112]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004cfa:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d06:	4915      	ldr	r1, [pc, #84]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	490d      	ldr	r1, [pc, #52]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d42:	4906      	ldr	r1, [pc, #24]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00c      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004d54:	4b01      	ldr	r3, [pc, #4]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	e002      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d68:	490b      	ldr	r1, [pc, #44]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d86:	4904      	ldr	r1, [pc, #16]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3748      	adds	r7, #72	; 0x48
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000

08004d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e01d      	b.n	8004dea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f815 	bl	8004df2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f000 f986 	bl	80050ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <HAL_TIM_Base_Start_IT+0x50>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d00b      	beq.n	8004e4a <HAL_TIM_Base_Start_IT+0x42>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d007      	beq.n	8004e4a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	00010007 	.word	0x00010007

08004e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0202 	mvn.w	r2, #2
 8004e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f905 	bl	80050ae <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f8f7 	bl	800509a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f908 	bl	80050c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d122      	bne.n	8004f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d11b      	bne.n	8004f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0204 	mvn.w	r2, #4
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8db 	bl	80050ae <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f8cd 	bl	800509a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f8de 	bl	80050c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d122      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d11b      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0208 	mvn.w	r2, #8
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2204      	movs	r2, #4
 8004f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f8b1 	bl	80050ae <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f8a3 	bl	800509a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f8b4 	bl	80050c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b10      	cmp	r3, #16
 8004f6c:	d122      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0210 	mvn.w	r2, #16
 8004f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2208      	movs	r2, #8
 8004f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f887 	bl	80050ae <HAL_TIM_IC_CaptureCallback>
 8004fa0:	e005      	b.n	8004fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f879 	bl	800509a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f88a 	bl	80050c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0201 	mvn.w	r2, #1
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc faa0 	bl	8001520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d10e      	bne.n	800500c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	d107      	bne.n	800500c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f918 	bl	800523c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501a:	d10e      	bne.n	800503a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005026:	2b80      	cmp	r3, #128	; 0x80
 8005028:	d107      	bne.n	800503a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f90b 	bl	8005250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d10e      	bne.n	8005066 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d107      	bne.n	8005066 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800505e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f838 	bl	80050d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b20      	cmp	r3, #32
 8005072:	d10e      	bne.n	8005092 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b20      	cmp	r3, #32
 8005080:	d107      	bne.n	8005092 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f06f 0220 	mvn.w	r2, #32
 800508a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f8cb 	bl	8005228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
	...

080050ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a42      	ldr	r2, [pc, #264]	; (8005208 <TIM_Base_SetConfig+0x11c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d013      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510a:	d00f      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3f      	ldr	r2, [pc, #252]	; (800520c <TIM_Base_SetConfig+0x120>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00b      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3e      	ldr	r2, [pc, #248]	; (8005210 <TIM_Base_SetConfig+0x124>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3d      	ldr	r2, [pc, #244]	; (8005214 <TIM_Base_SetConfig+0x128>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3c      	ldr	r2, [pc, #240]	; (8005218 <TIM_Base_SetConfig+0x12c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d108      	bne.n	800513e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a31      	ldr	r2, [pc, #196]	; (8005208 <TIM_Base_SetConfig+0x11c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01f      	beq.n	8005186 <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d01b      	beq.n	8005186 <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2e      	ldr	r2, [pc, #184]	; (800520c <TIM_Base_SetConfig+0x120>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d017      	beq.n	8005186 <TIM_Base_SetConfig+0x9a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <TIM_Base_SetConfig+0x124>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <TIM_Base_SetConfig+0x9a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <TIM_Base_SetConfig+0x128>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_Base_SetConfig+0x9a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2c      	ldr	r2, [pc, #176]	; (800521c <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <TIM_Base_SetConfig+0x134>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <TIM_Base_SetConfig+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_Base_SetConfig+0x9a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <TIM_Base_SetConfig+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d108      	bne.n	8005198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <TIM_Base_SetConfig+0x11c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d013      	beq.n	80051ec <TIM_Base_SetConfig+0x100>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <TIM_Base_SetConfig+0x128>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0x100>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <TIM_Base_SetConfig+0x130>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x100>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a12      	ldr	r2, [pc, #72]	; (8005220 <TIM_Base_SetConfig+0x134>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x100>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a11      	ldr	r2, [pc, #68]	; (8005224 <TIM_Base_SetConfig+0x138>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x100>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <TIM_Base_SetConfig+0x12c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40013400 	.word	0x40013400
 8005218:	40015000 	.word	0x40015000
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800

08005228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e040      	b.n	80052f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fc fa02 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2224      	movs	r2, #36	; 0x24
 8005290:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f82c 	bl	8005300 <UART_SetConfig>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e022      	b.n	80052f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa3a 	bl	8005734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fac1 	bl	8005878 <UART_CheckIdleState>
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4bac      	ldr	r3, [pc, #688]	; (80055e0 <UART_SetConfig+0x2e0>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	6939      	ldr	r1, [r7, #16]
 8005338:	430b      	orrs	r3, r1
 800533a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a9a      	ldr	r2, [pc, #616]	; (80055e4 <UART_SetConfig+0x2e4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d121      	bne.n	80053c4 <UART_SetConfig+0xc4>
 8005380:	4b99      	ldr	r3, [pc, #612]	; (80055e8 <UART_SetConfig+0x2e8>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	2b03      	cmp	r3, #3
 800538a:	d817      	bhi.n	80053bc <UART_SetConfig+0xbc>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x94>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053a5 	.word	0x080053a5
 8005398:	080053b1 	.word	0x080053b1
 800539c:	080053b7 	.word	0x080053b7
 80053a0:	080053ab 	.word	0x080053ab
 80053a4:	2301      	movs	r3, #1
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e0b2      	b.n	8005510 <UART_SetConfig+0x210>
 80053aa:	2302      	movs	r3, #2
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e0af      	b.n	8005510 <UART_SetConfig+0x210>
 80053b0:	2304      	movs	r3, #4
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e0ac      	b.n	8005510 <UART_SetConfig+0x210>
 80053b6:	2308      	movs	r3, #8
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e0a9      	b.n	8005510 <UART_SetConfig+0x210>
 80053bc:	2310      	movs	r3, #16
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	bf00      	nop
 80053c2:	e0a5      	b.n	8005510 <UART_SetConfig+0x210>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a88      	ldr	r2, [pc, #544]	; (80055ec <UART_SetConfig+0x2ec>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d123      	bne.n	8005416 <UART_SetConfig+0x116>
 80053ce:	4b86      	ldr	r3, [pc, #536]	; (80055e8 <UART_SetConfig+0x2e8>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053da:	d012      	beq.n	8005402 <UART_SetConfig+0x102>
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e0:	d802      	bhi.n	80053e8 <UART_SetConfig+0xe8>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <UART_SetConfig+0xf6>
 80053e6:	e012      	b.n	800540e <UART_SetConfig+0x10e>
 80053e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ec:	d00c      	beq.n	8005408 <UART_SetConfig+0x108>
 80053ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053f2:	d003      	beq.n	80053fc <UART_SetConfig+0xfc>
 80053f4:	e00b      	b.n	800540e <UART_SetConfig+0x10e>
 80053f6:	2300      	movs	r3, #0
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e089      	b.n	8005510 <UART_SetConfig+0x210>
 80053fc:	2302      	movs	r3, #2
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e086      	b.n	8005510 <UART_SetConfig+0x210>
 8005402:	2304      	movs	r3, #4
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e083      	b.n	8005510 <UART_SetConfig+0x210>
 8005408:	2308      	movs	r3, #8
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e080      	b.n	8005510 <UART_SetConfig+0x210>
 800540e:	2310      	movs	r3, #16
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	bf00      	nop
 8005414:	e07c      	b.n	8005510 <UART_SetConfig+0x210>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a75      	ldr	r2, [pc, #468]	; (80055f0 <UART_SetConfig+0x2f0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d123      	bne.n	8005468 <UART_SetConfig+0x168>
 8005420:	4b71      	ldr	r3, [pc, #452]	; (80055e8 <UART_SetConfig+0x2e8>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800542c:	d012      	beq.n	8005454 <UART_SetConfig+0x154>
 800542e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005432:	d802      	bhi.n	800543a <UART_SetConfig+0x13a>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <UART_SetConfig+0x148>
 8005438:	e012      	b.n	8005460 <UART_SetConfig+0x160>
 800543a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800543e:	d00c      	beq.n	800545a <UART_SetConfig+0x15a>
 8005440:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005444:	d003      	beq.n	800544e <UART_SetConfig+0x14e>
 8005446:	e00b      	b.n	8005460 <UART_SetConfig+0x160>
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e060      	b.n	8005510 <UART_SetConfig+0x210>
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e05d      	b.n	8005510 <UART_SetConfig+0x210>
 8005454:	2304      	movs	r3, #4
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e05a      	b.n	8005510 <UART_SetConfig+0x210>
 800545a:	2308      	movs	r3, #8
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e057      	b.n	8005510 <UART_SetConfig+0x210>
 8005460:	2310      	movs	r3, #16
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	bf00      	nop
 8005466:	e053      	b.n	8005510 <UART_SetConfig+0x210>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a61      	ldr	r2, [pc, #388]	; (80055f4 <UART_SetConfig+0x2f4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d123      	bne.n	80054ba <UART_SetConfig+0x1ba>
 8005472:	4b5d      	ldr	r3, [pc, #372]	; (80055e8 <UART_SetConfig+0x2e8>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800547a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547e:	d012      	beq.n	80054a6 <UART_SetConfig+0x1a6>
 8005480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005484:	d802      	bhi.n	800548c <UART_SetConfig+0x18c>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <UART_SetConfig+0x19a>
 800548a:	e012      	b.n	80054b2 <UART_SetConfig+0x1b2>
 800548c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005490:	d00c      	beq.n	80054ac <UART_SetConfig+0x1ac>
 8005492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005496:	d003      	beq.n	80054a0 <UART_SetConfig+0x1a0>
 8005498:	e00b      	b.n	80054b2 <UART_SetConfig+0x1b2>
 800549a:	2300      	movs	r3, #0
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e037      	b.n	8005510 <UART_SetConfig+0x210>
 80054a0:	2302      	movs	r3, #2
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e034      	b.n	8005510 <UART_SetConfig+0x210>
 80054a6:	2304      	movs	r3, #4
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e031      	b.n	8005510 <UART_SetConfig+0x210>
 80054ac:	2308      	movs	r3, #8
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e02e      	b.n	8005510 <UART_SetConfig+0x210>
 80054b2:	2310      	movs	r3, #16
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	bf00      	nop
 80054b8:	e02a      	b.n	8005510 <UART_SetConfig+0x210>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a4e      	ldr	r2, [pc, #312]	; (80055f8 <UART_SetConfig+0x2f8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d123      	bne.n	800550c <UART_SetConfig+0x20c>
 80054c4:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <UART_SetConfig+0x2e8>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d0:	d012      	beq.n	80054f8 <UART_SetConfig+0x1f8>
 80054d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d6:	d802      	bhi.n	80054de <UART_SetConfig+0x1de>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <UART_SetConfig+0x1ec>
 80054dc:	e012      	b.n	8005504 <UART_SetConfig+0x204>
 80054de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054e2:	d00c      	beq.n	80054fe <UART_SetConfig+0x1fe>
 80054e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054e8:	d003      	beq.n	80054f2 <UART_SetConfig+0x1f2>
 80054ea:	e00b      	b.n	8005504 <UART_SetConfig+0x204>
 80054ec:	2300      	movs	r3, #0
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e00e      	b.n	8005510 <UART_SetConfig+0x210>
 80054f2:	2302      	movs	r3, #2
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x210>
 80054f8:	2304      	movs	r3, #4
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e008      	b.n	8005510 <UART_SetConfig+0x210>
 80054fe:	2308      	movs	r3, #8
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e005      	b.n	8005510 <UART_SetConfig+0x210>
 8005504:	2310      	movs	r3, #16
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	bf00      	nop
 800550a:	e001      	b.n	8005510 <UART_SetConfig+0x210>
 800550c:	2310      	movs	r3, #16
 800550e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005518:	f040 8090 	bne.w	800563c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800551c:	7ffb      	ldrb	r3, [r7, #31]
 800551e:	2b08      	cmp	r3, #8
 8005520:	d86c      	bhi.n	80055fc <UART_SetConfig+0x2fc>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0x228>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800554d 	.word	0x0800554d
 800552c:	0800556d 	.word	0x0800556d
 8005530:	0800558d 	.word	0x0800558d
 8005534:	080055fd 	.word	0x080055fd
 8005538:	080055a9 	.word	0x080055a9
 800553c:	080055fd 	.word	0x080055fd
 8005540:	080055fd 	.word	0x080055fd
 8005544:	080055fd 	.word	0x080055fd
 8005548:	080055c9 	.word	0x080055c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800554c:	f7ff f992 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 8005550:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	005a      	lsls	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	b29b      	uxth	r3, r3
 8005568:	61bb      	str	r3, [r7, #24]
        break;
 800556a:	e04a      	b.n	8005602 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800556c:	f7ff f9a4 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8005570:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	005a      	lsls	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	441a      	add	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	b29b      	uxth	r3, r3
 8005588:	61bb      	str	r3, [r7, #24]
        break;
 800558a:	e03a      	b.n	8005602 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005596:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6852      	ldr	r2, [r2, #4]
 800559e:	fbb3 f3f2 	udiv	r3, r3, r2
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	61bb      	str	r3, [r7, #24]
        break;
 80055a6:	e02c      	b.n	8005602 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a8:	f7ff f8ee 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 80055ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	005a      	lsls	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	61bb      	str	r3, [r7, #24]
        break;
 80055c6:	e01c      	b.n	8005602 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	b29b      	uxth	r3, r3
 80055dc:	61bb      	str	r3, [r7, #24]
        break;
 80055de:	e010      	b.n	8005602 <UART_SetConfig+0x302>
 80055e0:	efff69f3 	.word	0xefff69f3
 80055e4:	40013800 	.word	0x40013800
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40004400 	.word	0x40004400
 80055f0:	40004800 	.word	0x40004800
 80055f4:	40004c00 	.word	0x40004c00
 80055f8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
        break;
 8005600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b0f      	cmp	r3, #15
 8005606:	d916      	bls.n	8005636 <UART_SetConfig+0x336>
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560e:	d212      	bcs.n	8005636 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f023 030f 	bic.w	r3, r3, #15
 8005618:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	b29b      	uxth	r3, r3
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	b29a      	uxth	r2, r3
 8005626:	897b      	ldrh	r3, [r7, #10]
 8005628:	4313      	orrs	r3, r2
 800562a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	897a      	ldrh	r2, [r7, #10]
 8005632:	60da      	str	r2, [r3, #12]
 8005634:	e072      	b.n	800571c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
 800563a:	e06f      	b.n	800571c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800563c:	7ffb      	ldrb	r3, [r7, #31]
 800563e:	2b08      	cmp	r3, #8
 8005640:	d85b      	bhi.n	80056fa <UART_SetConfig+0x3fa>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x348>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	0800566d 	.word	0x0800566d
 800564c:	0800568b 	.word	0x0800568b
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056fb 	.word	0x080056fb
 8005658:	080056c5 	.word	0x080056c5
 800565c:	080056fb 	.word	0x080056fb
 8005660:	080056fb 	.word	0x080056fb
 8005664:	080056fb 	.word	0x080056fb
 8005668:	080056e3 	.word	0x080056e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800566c:	f7ff f902 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 8005670:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	085a      	lsrs	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	441a      	add	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	b29b      	uxth	r3, r3
 8005686:	61bb      	str	r3, [r7, #24]
        break;
 8005688:	e03a      	b.n	8005700 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800568a:	f7ff f915 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 800568e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	085a      	lsrs	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	61bb      	str	r3, [r7, #24]
        break;
 80056a6:	e02b      	b.n	8005700 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80056b2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6852      	ldr	r2, [r2, #4]
 80056ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80056be:	b29b      	uxth	r3, r3
 80056c0:	61bb      	str	r3, [r7, #24]
        break;
 80056c2:	e01d      	b.n	8005700 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c4:	f7ff f860 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 80056c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	085a      	lsrs	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	441a      	add	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	b29b      	uxth	r3, r3
 80056de:	61bb      	str	r3, [r7, #24]
        break;
 80056e0:	e00e      	b.n	8005700 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	61bb      	str	r3, [r7, #24]
        break;
 80056f8:	e002      	b.n	8005700 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	75fb      	strb	r3, [r7, #23]
        break;
 80056fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b0f      	cmp	r3, #15
 8005704:	d908      	bls.n	8005718 <UART_SetConfig+0x418>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d204      	bcs.n	8005718 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	e001      	b.n	800571c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop

08005734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01a      	beq.n	800584a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005832:	d10a      	bne.n	800584a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005886:	f7fc f871 	bl	800196c <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	d10e      	bne.n	80058b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f82a 	bl	8005902 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e020      	b.n	80058fa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d10e      	bne.n	80058e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f814 	bl	8005902 <UART_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e00a      	b.n	80058fa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005912:	e05d      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d059      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591c:	f7fc f826 	bl	800196c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <UART_WaitOnFlagUntilTimeout+0x30>
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d11b      	bne.n	800596a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005940:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0201 	bic.w	r2, r2, #1
 8005950:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e042      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02b      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005986:	d123      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005990:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e00f      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d092      	beq.n	8005914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a07      	ldr	r2, [pc, #28]	; (8005a24 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4a06      	ldr	r2, [pc, #24]	; (8005a28 <vApplicationGetIdleTaskMemory+0x30>)
 8005a0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2280      	movs	r2, #128	; 0x80
 8005a14:	601a      	str	r2, [r3, #0]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000884 	.word	0x20000884
 8005a28:	200008e0 	.word	0x200008e0

08005a2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a06      	ldr	r2, [pc, #24]	; (8005a5c <vApplicationGetTimerTaskMemory+0x30>)
 8005a42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a4a:	601a      	str	r2, [r3, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20000ae0 	.word	0x20000ae0
 8005a5c:	20000b3c 	.word	0x20000b3c

08005a60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f103 0208 	add.w	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f04f 32ff 	mov.w	r2, #4294967295
 8005a78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f103 0208 	add.w	r2, r3, #8
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f103 0208 	add.w	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d103      	bne.n	8005b22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e00c      	b.n	8005b3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3308      	adds	r3, #8
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e002      	b.n	8005b30 <vListInsert+0x2e>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d2f6      	bcs.n	8005b2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6892      	ldr	r2, [r2, #8]
 8005b8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6852      	ldr	r2, [r2, #4]
 8005b94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d103      	bne.n	8005ba8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	1e5a      	subs	r2, r3, #1
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	e7fe      	b.n	8005bee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005bf0:	f002 f9bc 	bl	8007f6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	68f9      	ldr	r1, [r7, #12]
 8005bfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	441a      	add	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	3b01      	subs	r3, #1
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c26:	fb01 f303 	mul.w	r3, r1, r3
 8005c2a:	441a      	add	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	22ff      	movs	r2, #255	; 0xff
 8005c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d114      	bne.n	8005c70 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01a      	beq.n	8005c84 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3310      	adds	r3, #16
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 f9b6 	bl	8006fc4 <xTaskRemoveFromEventList>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d012      	beq.n	8005c84 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <xQueueGenericReset+0xcc>)
 8005c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	e009      	b.n	8005c84 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3310      	adds	r3, #16
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fef3 	bl	8005a60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3324      	adds	r3, #36	; 0x24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff feee 	bl	8005a60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c84:	f002 f9a0 	bl	8007fc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c88:	2301      	movs	r3, #1
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08e      	sub	sp, #56	; 0x38
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <xQueueGenericCreateStatic+0x28>
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cbe:	e7fe      	b.n	8005cbe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <xQueueGenericCreateStatic+0x42>
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <xQueueGenericCreateStatic+0x4e>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <xQueueGenericCreateStatic+0x52>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <xQueueGenericCreateStatic+0x54>
 8005cea:	2300      	movs	r3, #0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d109      	bne.n	8005d04 <xQueueGenericCreateStatic+0x6c>
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	623b      	str	r3, [r7, #32]
 8005d02:	e7fe      	b.n	8005d02 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <xQueueGenericCreateStatic+0x78>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <xQueueGenericCreateStatic+0x7c>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <xQueueGenericCreateStatic+0x7e>
 8005d14:	2300      	movs	r3, #0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <xQueueGenericCreateStatic+0x96>
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e7fe      	b.n	8005d2c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d2e:	2350      	movs	r3, #80	; 0x50
 8005d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b50      	cmp	r3, #80	; 0x50
 8005d36:	d009      	beq.n	8005d4c <xQueueGenericCreateStatic+0xb4>
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e7fe      	b.n	8005d4a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00d      	beq.n	8005d72 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f805 	bl	8005d7c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3730      	adds	r7, #48	; 0x30
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005daa:	2101      	movs	r1, #1
 8005dac:	69b8      	ldr	r0, [r7, #24]
 8005dae:	f7ff ff0b 	bl	8005bc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	; 0x38
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <xQueueGenericSend+0x30>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df2:	e7fe      	b.n	8005df2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <xQueueGenericSend+0x3e>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <xQueueGenericSend+0x42>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <xQueueGenericSend+0x44>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <xQueueGenericSend+0x5c>
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1e:	e7fe      	b.n	8005e1e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d103      	bne.n	8005e2e <xQueueGenericSend+0x6a>
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <xQueueGenericSend+0x6e>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <xQueueGenericSend+0x70>
 8005e32:	2300      	movs	r3, #0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <xQueueGenericSend+0x88>
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	e7fe      	b.n	8005e4a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e4c:	f001 fa76 	bl	800733c <xTaskGetSchedulerState>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <xQueueGenericSend+0x98>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <xQueueGenericSend+0x9c>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <xQueueGenericSend+0x9e>
 8005e60:	2300      	movs	r3, #0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <xQueueGenericSend+0xb6>
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e7fe      	b.n	8005e78 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e7a:	f002 f877 	bl	8007f6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d302      	bcc.n	8005e90 <xQueueGenericSend+0xcc>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d129      	bne.n	8005ee4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e96:	f000 fb1f 	bl	80064d8 <prvCopyDataToQueue>
 8005e9a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d010      	beq.n	8005ec6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	3324      	adds	r3, #36	; 0x24
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 f88b 	bl	8006fc4 <xTaskRemoveFromEventList>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d013      	beq.n	8005edc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005eb4:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <xQueueGenericSend+0x1f0>)
 8005eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	e00a      	b.n	8005edc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ecc:	4b39      	ldr	r3, [pc, #228]	; (8005fb4 <xQueueGenericSend+0x1f0>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005edc:	f002 f874 	bl	8007fc8 <vPortExitCritical>
				return pdPASS;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e063      	b.n	8005fac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eea:	f002 f86d 	bl	8007fc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e05c      	b.n	8005fac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ef8:	f107 0314 	add.w	r3, r7, #20
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f8c3 	bl	8007088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f02:	2301      	movs	r3, #1
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f06:	f002 f85f 	bl	8007fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f0a:	f000 fe39 	bl	8006b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f0e:	f002 f82d 	bl	8007f6c <vPortEnterCritical>
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f18:	b25b      	sxtb	r3, r3
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d103      	bne.n	8005f28 <xQueueGenericSend+0x164>
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f2e:	b25b      	sxtb	r3, r3
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d103      	bne.n	8005f3e <xQueueGenericSend+0x17a>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f3e:	f002 f843 	bl	8007fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f42:	1d3a      	adds	r2, r7, #4
 8005f44:	f107 0314 	add.w	r3, r7, #20
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 f8b2 	bl	80070b4 <xTaskCheckForTimeOut>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d124      	bne.n	8005fa0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f58:	f000 fbb6 	bl	80066c8 <prvIsQueueFull>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	3310      	adds	r3, #16
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 ffdc 	bl	8006f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f72:	f000 fb41 	bl	80065f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f76:	f000 fe11 	bl	8006b9c <xTaskResumeAll>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f af7c 	bne.w	8005e7a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <xQueueGenericSend+0x1f0>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	e772      	b.n	8005e7a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f96:	f000 fb2f 	bl	80065f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f9a:	f000 fdff 	bl	8006b9c <xTaskResumeAll>
 8005f9e:	e76c      	b.n	8005e7a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa2:	f000 fb29 	bl	80065f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fa6:	f000 fdf9 	bl	8006b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005faa:	2300      	movs	r3, #0
		}
	}
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3738      	adds	r7, #56	; 0x38
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08e      	sub	sp, #56	; 0x38
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <xQueueGenericSendFromISR+0x2c>
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <xQueueGenericSendFromISR+0x3a>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <xQueueGenericSendFromISR+0x3e>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <xQueueGenericSendFromISR+0x40>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <xQueueGenericSendFromISR+0x58>
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	e7fe      	b.n	800600e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d103      	bne.n	800601e <xQueueGenericSendFromISR+0x66>
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <xQueueGenericSendFromISR+0x6a>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <xQueueGenericSendFromISR+0x6c>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <xQueueGenericSendFromISR+0x84>
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	e7fe      	b.n	800603a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800603c:	f002 f872 	bl	8008124 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006040:	f3ef 8211 	mrs	r2, BASEPRI
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	61ba      	str	r2, [r7, #24]
 8006056:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006058:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006064:	429a      	cmp	r2, r3
 8006066:	d302      	bcc.n	800606e <xQueueGenericSendFromISR+0xb6>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d12c      	bne.n	80060c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800607e:	f000 fa2b 	bl	80064d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006082:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608a:	d112      	bne.n	80060b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	d016      	beq.n	80060c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	4618      	mov	r0, r3
 800609a:	f000 ff93 	bl	8006fc4 <xTaskRemoveFromEventList>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00e      	beq.n	80060c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e007      	b.n	80060c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060b6:	3301      	adds	r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	b25a      	sxtb	r2, r3
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060c2:	2301      	movs	r3, #1
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80060c6:	e001      	b.n	80060cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3738      	adds	r7, #56	; 0x38
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08c      	sub	sp, #48	; 0x30
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <xQueueReceive+0x2e>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	623b      	str	r3, [r7, #32]
 800610c:	e7fe      	b.n	800610c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <xQueueReceive+0x3c>
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <xQueueReceive+0x40>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <xQueueReceive+0x42>
 8006120:	2300      	movs	r3, #0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d109      	bne.n	800613a <xQueueReceive+0x5a>
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	e7fe      	b.n	8006138 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800613a:	f001 f8ff 	bl	800733c <xTaskGetSchedulerState>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <xQueueReceive+0x6a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <xQueueReceive+0x6e>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <xQueueReceive+0x70>
 800614e:	2300      	movs	r3, #0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <xQueueReceive+0x88>
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	e7fe      	b.n	8006166 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006168:	f001 ff00 	bl	8007f6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01f      	beq.n	80061b8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800617c:	f000 fa16 	bl	80065ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1e5a      	subs	r2, r3, #1
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00f      	beq.n	80061b0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	3310      	adds	r3, #16
 8006194:	4618      	mov	r0, r3
 8006196:	f000 ff15 	bl	8006fc4 <xTaskRemoveFromEventList>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061a0:	4b3c      	ldr	r3, [pc, #240]	; (8006294 <xQueueReceive+0x1b4>)
 80061a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061b0:	f001 ff0a 	bl	8007fc8 <vPortExitCritical>
				return pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e069      	b.n	800628c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061be:	f001 ff03 	bl	8007fc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061c2:	2300      	movs	r3, #0
 80061c4:	e062      	b.n	800628c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061cc:	f107 0310 	add.w	r3, r7, #16
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 ff59 	bl	8007088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061d6:	2301      	movs	r3, #1
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061da:	f001 fef5 	bl	8007fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061de:	f000 fccf 	bl	8006b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061e2:	f001 fec3 	bl	8007f6c <vPortEnterCritical>
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ec:	b25b      	sxtb	r3, r3
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d103      	bne.n	80061fc <xQueueReceive+0x11c>
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006202:	b25b      	sxtb	r3, r3
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006208:	d103      	bne.n	8006212 <xQueueReceive+0x132>
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006212:	f001 fed9 	bl	8007fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006216:	1d3a      	adds	r2, r7, #4
 8006218:	f107 0310 	add.w	r3, r7, #16
 800621c:	4611      	mov	r1, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f000 ff48 	bl	80070b4 <xTaskCheckForTimeOut>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d123      	bne.n	8006272 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800622a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622c:	f000 fa36 	bl	800669c <prvIsQueueEmpty>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d017      	beq.n	8006266 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	3324      	adds	r3, #36	; 0x24
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	4611      	mov	r1, r2
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fe72 	bl	8006f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006246:	f000 f9d7 	bl	80065f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800624a:	f000 fca7 	bl	8006b9c <xTaskResumeAll>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d189      	bne.n	8006168 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <xQueueReceive+0x1b4>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	e780      	b.n	8006168 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006268:	f000 f9c6 	bl	80065f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800626c:	f000 fc96 	bl	8006b9c <xTaskResumeAll>
 8006270:	e77a      	b.n	8006168 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006274:	f000 f9c0 	bl	80065f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006278:	f000 fc90 	bl	8006b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	f000 fa0d 	bl	800669c <prvIsQueueEmpty>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	f43f af6f 	beq.w	8006168 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800628a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800628c:	4618      	mov	r0, r3
 800628e:	3730      	adds	r7, #48	; 0x30
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08e      	sub	sp, #56	; 0x38
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d109      	bne.n	80062c8 <xQueueSemaphoreTake+0x30>
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	e7fe      	b.n	80062c6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <xQueueSemaphoreTake+0x4c>
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	e7fe      	b.n	80062e2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062e4:	f001 f82a 	bl	800733c <xTaskGetSchedulerState>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <xQueueSemaphoreTake+0x5c>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <xQueueSemaphoreTake+0x60>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <xQueueSemaphoreTake+0x62>
 80062f8:	2300      	movs	r3, #0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <xQueueSemaphoreTake+0x7a>
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	61bb      	str	r3, [r7, #24]
 8006310:	e7fe      	b.n	8006310 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006312:	f001 fe2b 	bl	8007f6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	2b00      	cmp	r3, #0
 8006320:	d024      	beq.n	800636c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	1e5a      	subs	r2, r3, #1
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d104      	bne.n	800633c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006332:	f001 f97f 	bl	8007634 <pvTaskIncrementMutexHeldCount>
 8006336:	4602      	mov	r2, r0
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	3310      	adds	r3, #16
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fe3b 	bl	8006fc4 <xTaskRemoveFromEventList>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d007      	beq.n	8006364 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006354:	4b53      	ldr	r3, [pc, #332]	; (80064a4 <xQueueSemaphoreTake+0x20c>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006364:	f001 fe30 	bl	8007fc8 <vPortExitCritical>
				return pdPASS;
 8006368:	2301      	movs	r3, #1
 800636a:	e096      	b.n	800649a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d110      	bne.n	8006394 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <xQueueSemaphoreTake+0xf4>
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	e7fe      	b.n	800638a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800638c:	f001 fe1c 	bl	8007fc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006390:	2300      	movs	r3, #0
 8006392:	e082      	b.n	800649a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800639a:	f107 030c 	add.w	r3, r7, #12
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fe72 	bl	8007088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063a8:	f001 fe0e 	bl	8007fc8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ac:	f000 fbe8 	bl	8006b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063b0:	f001 fddc 	bl	8007f6c <vPortEnterCritical>
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d103      	bne.n	80063ca <xQueueSemaphoreTake+0x132>
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d103      	bne.n	80063e0 <xQueueSemaphoreTake+0x148>
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e0:	f001 fdf2 	bl	8007fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063e4:	463a      	mov	r2, r7
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fe61 	bl	80070b4 <xTaskCheckForTimeOut>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d132      	bne.n	800645e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063fa:	f000 f94f 	bl	800669c <prvIsQueueEmpty>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d026      	beq.n	8006452 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800640c:	f001 fdae 	bl	8007f6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 ffaf 	bl	8007378 <xTaskPriorityInherit>
 800641a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800641c:	f001 fdd4 	bl	8007fc8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	3324      	adds	r3, #36	; 0x24
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	4611      	mov	r1, r2
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fd7d 	bl	8006f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800642e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006430:	f000 f8e2 	bl	80065f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006434:	f000 fbb2 	bl	8006b9c <xTaskResumeAll>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	f47f af69 	bne.w	8006312 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006440:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <xQueueSemaphoreTake+0x20c>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	e75f      	b.n	8006312 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006454:	f000 f8d0 	bl	80065f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006458:	f000 fba0 	bl	8006b9c <xTaskResumeAll>
 800645c:	e759      	b.n	8006312 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800645e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006460:	f000 f8ca 	bl	80065f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006464:	f000 fb9a 	bl	8006b9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800646a:	f000 f917 	bl	800669c <prvIsQueueEmpty>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	f43f af4e 	beq.w	8006312 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800647c:	f001 fd76 	bl	8007f6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006480:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006482:	f000 f811 	bl	80064a8 <prvGetDisinheritPriorityAfterTimeout>
 8006486:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800648e:	4618      	mov	r0, r3
 8006490:	f001 f84c 	bl	800752c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006494:	f001 fd98 	bl	8007fc8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800649a:	4618      	mov	r0, r3
 800649c:	3738      	adds	r7, #56	; 0x38
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d006      	beq.n	80064c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e001      	b.n	80064ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80064ca:	68fb      	ldr	r3, [r7, #12]
	}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10d      	bne.n	8006512 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d14d      	bne.n	800659a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 ffa6 	bl	8007454 <xTaskPriorityDisinherit>
 8006508:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	e043      	b.n	800659a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d119      	bne.n	800654c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6898      	ldr	r0, [r3, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006520:	461a      	mov	r2, r3
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	f002 f84c 	bl	80085c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d32b      	bcc.n	800659a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	609a      	str	r2, [r3, #8]
 800654a:	e026      	b.n	800659a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68d8      	ldr	r0, [r3, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	461a      	mov	r2, r3
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	f002 f832 	bl	80085c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	425b      	negs	r3, r3
 8006566:	441a      	add	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d207      	bcs.n	8006588 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	425b      	negs	r3, r3
 8006582:	441a      	add	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d105      	bne.n	800659a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3b01      	subs	r3, #1
 8006598:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d018      	beq.n	80065f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	441a      	add	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d303      	bcc.n	80065e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68d9      	ldr	r1, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	461a      	mov	r2, r3
 80065ea:	6838      	ldr	r0, [r7, #0]
 80065ec:	f001 ffe8 	bl	80085c0 <memcpy>
	}
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006600:	f001 fcb4 	bl	8007f6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800660a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800660c:	e011      	b.n	8006632 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	2b00      	cmp	r3, #0
 8006614:	d012      	beq.n	800663c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3324      	adds	r3, #36	; 0x24
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fcd2 	bl	8006fc4 <xTaskRemoveFromEventList>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006626:	f000 fda5 	bl	8007174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	3b01      	subs	r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dce9      	bgt.n	800660e <prvUnlockQueue+0x16>
 800663a:	e000      	b.n	800663e <prvUnlockQueue+0x46>
					break;
 800663c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	22ff      	movs	r2, #255	; 0xff
 8006642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006646:	f001 fcbf 	bl	8007fc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800664a:	f001 fc8f 	bl	8007f6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006654:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006656:	e011      	b.n	800667c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d012      	beq.n	8006686 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3310      	adds	r3, #16
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fcad 	bl	8006fc4 <xTaskRemoveFromEventList>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006670:	f000 fd80 	bl	8007174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	3b01      	subs	r3, #1
 8006678:	b2db      	uxtb	r3, r3
 800667a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800667c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006680:	2b00      	cmp	r3, #0
 8006682:	dce9      	bgt.n	8006658 <prvUnlockQueue+0x60>
 8006684:	e000      	b.n	8006688 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006686:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	22ff      	movs	r2, #255	; 0xff
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006690:	f001 fc9a 	bl	8007fc8 <vPortExitCritical>
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066a4:	f001 fc62 	bl	8007f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	e001      	b.n	80066ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066ba:	f001 fc85 	bl	8007fc8 <vPortExitCritical>

	return xReturn;
 80066be:	68fb      	ldr	r3, [r7, #12]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066d0:	f001 fc4c 	bl	8007f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d102      	bne.n	80066e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e001      	b.n	80066ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066ea:	f001 fc6d 	bl	8007fc8 <vPortExitCritical>

	return xReturn;
 80066ee:	68fb      	ldr	r3, [r7, #12]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e014      	b.n	8006732 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006708:	4a0e      	ldr	r2, [pc, #56]	; (8006744 <vQueueAddToRegistry+0x4c>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006714:	490b      	ldr	r1, [pc, #44]	; (8006744 <vQueueAddToRegistry+0x4c>)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <vQueueAddToRegistry+0x4c>)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4413      	add	r3, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800672a:	e005      	b.n	8006738 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b07      	cmp	r3, #7
 8006736:	d9e7      	bls.n	8006708 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	200035cc 	.word	0x200035cc

08006748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006758:	f001 fc08 	bl	8007f6c <vPortEnterCritical>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006762:	b25b      	sxtb	r3, r3
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d103      	bne.n	8006772 <vQueueWaitForMessageRestricted+0x2a>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006778:	b25b      	sxtb	r3, r3
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d103      	bne.n	8006788 <vQueueWaitForMessageRestricted+0x40>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006788:	f001 fc1e 	bl	8007fc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3324      	adds	r3, #36	; 0x24
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fbe7 	bl	8006f70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067a2:	6978      	ldr	r0, [r7, #20]
 80067a4:	f7ff ff28 	bl	80065f8 <prvUnlockQueue>
	}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	; 0x38
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <xTaskCreateStatic+0x28>
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	623b      	str	r3, [r7, #32]
 80067d6:	e7fe      	b.n	80067d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <xTaskCreateStatic+0x42>
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	e7fe      	b.n	80067f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067f2:	235c      	movs	r3, #92	; 0x5c
 80067f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b5c      	cmp	r3, #92	; 0x5c
 80067fa:	d009      	beq.n	8006810 <xTaskCreateStatic+0x60>
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	e7fe      	b.n	800680e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01e      	beq.n	8006854 <xTaskCreateStatic+0xa4>
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01b      	beq.n	8006854 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006824:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2202      	movs	r2, #2
 800682a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800682e:	2300      	movs	r3, #0
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	9302      	str	r3, [sp, #8]
 8006836:	f107 0314 	add.w	r3, r7, #20
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f80b 	bl	8006862 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800684c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800684e:	f000 f88f 	bl	8006970 <prvAddNewTaskToReadyList>
 8006852:	e001      	b.n	8006858 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006858:	697b      	ldr	r3, [r7, #20]
	}
 800685a:	4618      	mov	r0, r3
 800685c:	3728      	adds	r7, #40	; 0x28
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b088      	sub	sp, #32
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	461a      	mov	r2, r3
 800687a:	21a5      	movs	r1, #165	; 0xa5
 800687c:	f001 fec4 	bl	8008608 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800688a:	3b01      	subs	r3, #1
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f023 0307 	bic.w	r3, r3, #7
 8006898:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d009      	beq.n	80068b8 <prvInitialiseNewTask+0x56>
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e7fe      	b.n	80068b6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068b8:	2300      	movs	r3, #0
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	e012      	b.n	80068e4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	4413      	add	r3, r2
 80068c4:	7819      	ldrb	r1, [r3, #0]
 80068c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	3334      	adds	r3, #52	; 0x34
 80068ce:	460a      	mov	r2, r1
 80068d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d006      	beq.n	80068ec <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	3301      	adds	r3, #1
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	2b0f      	cmp	r3, #15
 80068e8:	d9e9      	bls.n	80068be <prvInitialiseNewTask+0x5c>
 80068ea:	e000      	b.n	80068ee <prvInitialiseNewTask+0x8c>
		{
			break;
 80068ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	2b37      	cmp	r3, #55	; 0x37
 80068fa:	d901      	bls.n	8006900 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068fc:	2337      	movs	r3, #55	; 0x37
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006904:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800690a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	2200      	movs	r2, #0
 8006910:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	3304      	adds	r3, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff f8c2 	bl	8005aa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	3318      	adds	r3, #24
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff f8bd 	bl	8005aa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	2200      	movs	r2, #0
 8006940:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	68f9      	ldr	r1, [r7, #12]
 800694e:	69b8      	ldr	r0, [r7, #24]
 8006950:	f001 f9e2 	bl	8007d18 <pxPortInitialiseStack>
 8006954:	4602      	mov	r2, r0
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006966:	bf00      	nop
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006978:	f001 faf8 	bl	8007f6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800697c:	4b2d      	ldr	r3, [pc, #180]	; (8006a34 <prvAddNewTaskToReadyList+0xc4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a2c      	ldr	r2, [pc, #176]	; (8006a34 <prvAddNewTaskToReadyList+0xc4>)
 8006984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006986:	4b2c      	ldr	r3, [pc, #176]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800698e:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006994:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <prvAddNewTaskToReadyList+0xc4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d110      	bne.n	80069be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800699c:	f000 fc0e 	bl	80071bc <prvInitialiseTaskLists>
 80069a0:	e00d      	b.n	80069be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069a2:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <prvAddNewTaskToReadyList+0xcc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d802      	bhi.n	80069be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069b8:	4a1f      	ldr	r2, [pc, #124]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <prvAddNewTaskToReadyList+0xd0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <prvAddNewTaskToReadyList+0xd0>)
 80069c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <prvAddNewTaskToReadyList+0xd0>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	4b1b      	ldr	r3, [pc, #108]	; (8006a44 <prvAddNewTaskToReadyList+0xd4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d903      	bls.n	80069e4 <prvAddNewTaskToReadyList+0x74>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <prvAddNewTaskToReadyList+0xd4>)
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <prvAddNewTaskToReadyList+0xd8>)
 80069f2:	441a      	add	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f7ff f85d 	bl	8005aba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a00:	f001 fae2 	bl	8007fc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <prvAddNewTaskToReadyList+0xcc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00e      	beq.n	8006a2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d207      	bcs.n	8006a2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <prvAddNewTaskToReadyList+0xdc>)
 8006a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20001410 	.word	0x20001410
 8006a38:	20000f3c 	.word	0x20000f3c
 8006a3c:	2000141c 	.word	0x2000141c
 8006a40:	2000142c 	.word	0x2000142c
 8006a44:	20001418 	.word	0x20001418
 8006a48:	20000f40 	.word	0x20000f40
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d016      	beq.n	8006a90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <vTaskDelay+0x60>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <vTaskDelay+0x2e>
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	60bb      	str	r3, [r7, #8]
 8006a7c:	e7fe      	b.n	8006a7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006a7e:	f000 f87f 	bl	8006b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a82:	2100      	movs	r1, #0
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fde9 	bl	800765c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a8a:	f000 f887 	bl	8006b9c <xTaskResumeAll>
 8006a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006a96:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <vTaskDelay+0x64>)
 8006a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20001438 	.word	0x20001438
 8006ab4:	e000ed04 	.word	0xe000ed04

08006ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ac6:	463a      	mov	r2, r7
 8006ac8:	1d39      	adds	r1, r7, #4
 8006aca:	f107 0308 	add.w	r3, r7, #8
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe ff92 	bl	80059f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	9202      	str	r2, [sp, #8]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	4920      	ldr	r1, [pc, #128]	; (8006b68 <vTaskStartScheduler+0xb0>)
 8006ae8:	4820      	ldr	r0, [pc, #128]	; (8006b6c <vTaskStartScheduler+0xb4>)
 8006aea:	f7ff fe61 	bl	80067b0 <xTaskCreateStatic>
 8006aee:	4602      	mov	r2, r0
 8006af0:	4b1f      	ldr	r3, [pc, #124]	; (8006b70 <vTaskStartScheduler+0xb8>)
 8006af2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006af4:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <vTaskStartScheduler+0xb8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006afc:	2301      	movs	r3, #1
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e001      	b.n	8006b06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d102      	bne.n	8006b12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b0c:	f000 fdfa 	bl	8007704 <xTimerCreateTimerTask>
 8006b10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d115      	bne.n	8006b44 <vTaskStartScheduler+0x8c>
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b2a:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <vTaskStartScheduler+0xbc>)
 8006b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b32:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <vTaskStartScheduler+0xc0>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b38:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <vTaskStartScheduler+0xc4>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b3e:	f001 f977 	bl	8007e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b42:	e00d      	b.n	8006b60 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d109      	bne.n	8006b60 <vTaskStartScheduler+0xa8>
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	e7fe      	b.n	8006b5e <vTaskStartScheduler+0xa6>
}
 8006b60:	bf00      	nop
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	08008708 	.word	0x08008708
 8006b6c:	0800718d 	.word	0x0800718d
 8006b70:	20001434 	.word	0x20001434
 8006b74:	20001430 	.word	0x20001430
 8006b78:	2000141c 	.word	0x2000141c
 8006b7c:	20001414 	.word	0x20001414

08006b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b84:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <vTaskSuspendAll+0x18>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	4a03      	ldr	r2, [pc, #12]	; (8006b98 <vTaskSuspendAll+0x18>)
 8006b8c:	6013      	str	r3, [r2, #0]
}
 8006b8e:	bf00      	nop
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	20001438 	.word	0x20001438

08006b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006baa:	4b41      	ldr	r3, [pc, #260]	; (8006cb0 <xTaskResumeAll+0x114>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <xTaskResumeAll+0x2a>
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	e7fe      	b.n	8006bc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bc6:	f001 f9d1 	bl	8007f6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bca:	4b39      	ldr	r3, [pc, #228]	; (8006cb0 <xTaskResumeAll+0x114>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	4a37      	ldr	r2, [pc, #220]	; (8006cb0 <xTaskResumeAll+0x114>)
 8006bd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd4:	4b36      	ldr	r3, [pc, #216]	; (8006cb0 <xTaskResumeAll+0x114>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d162      	bne.n	8006ca2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bdc:	4b35      	ldr	r3, [pc, #212]	; (8006cb4 <xTaskResumeAll+0x118>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d05e      	beq.n	8006ca2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006be4:	e02f      	b.n	8006c46 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006be6:	4b34      	ldr	r3, [pc, #208]	; (8006cb8 <xTaskResumeAll+0x11c>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3318      	adds	r3, #24
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe ffbe 	bl	8005b74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe ffb9 	bl	8005b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c06:	4b2d      	ldr	r3, [pc, #180]	; (8006cbc <xTaskResumeAll+0x120>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d903      	bls.n	8006c16 <xTaskResumeAll+0x7a>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	4a2a      	ldr	r2, [pc, #168]	; (8006cbc <xTaskResumeAll+0x120>)
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4a27      	ldr	r2, [pc, #156]	; (8006cc0 <xTaskResumeAll+0x124>)
 8006c24:	441a      	add	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	f7fe ff44 	bl	8005aba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c36:	4b23      	ldr	r3, [pc, #140]	; (8006cc4 <xTaskResumeAll+0x128>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d302      	bcc.n	8006c46 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c40:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <xTaskResumeAll+0x12c>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <xTaskResumeAll+0x11c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1cb      	bne.n	8006be6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c54:	f000 fb4c 	bl	80072f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c58:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <xTaskResumeAll+0x130>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d010      	beq.n	8006c86 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c64:	f000 f846 	bl	8006cf4 <xTaskIncrementTick>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <xTaskResumeAll+0x12c>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f1      	bne.n	8006c64 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006c80:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <xTaskResumeAll+0x130>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c86:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <xTaskResumeAll+0x12c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c92:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <xTaskResumeAll+0x134>)
 8006c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ca2:	f001 f991 	bl	8007fc8 <vPortExitCritical>

	return xAlreadyYielded;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20001438 	.word	0x20001438
 8006cb4:	20001410 	.word	0x20001410
 8006cb8:	200013d0 	.word	0x200013d0
 8006cbc:	20001418 	.word	0x20001418
 8006cc0:	20000f40 	.word	0x20000f40
 8006cc4:	20000f3c 	.word	0x20000f3c
 8006cc8:	20001424 	.word	0x20001424
 8006ccc:	20001420 	.word	0x20001420
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <xTaskGetTickCount+0x1c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ce0:	687b      	ldr	r3, [r7, #4]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20001414 	.word	0x20001414

08006cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cfe:	4b51      	ldr	r3, [pc, #324]	; (8006e44 <xTaskIncrementTick+0x150>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 808d 	bne.w	8006e22 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d08:	4b4f      	ldr	r3, [pc, #316]	; (8006e48 <xTaskIncrementTick+0x154>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d10:	4a4d      	ldr	r2, [pc, #308]	; (8006e48 <xTaskIncrementTick+0x154>)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11f      	bne.n	8006d5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d1c:	4b4b      	ldr	r3, [pc, #300]	; (8006e4c <xTaskIncrementTick+0x158>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d009      	beq.n	8006d3a <xTaskIncrementTick+0x46>
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	e7fe      	b.n	8006d38 <xTaskIncrementTick+0x44>
 8006d3a:	4b44      	ldr	r3, [pc, #272]	; (8006e4c <xTaskIncrementTick+0x158>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	4b43      	ldr	r3, [pc, #268]	; (8006e50 <xTaskIncrementTick+0x15c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a41      	ldr	r2, [pc, #260]	; (8006e4c <xTaskIncrementTick+0x158>)
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	4a41      	ldr	r2, [pc, #260]	; (8006e50 <xTaskIncrementTick+0x15c>)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	4b41      	ldr	r3, [pc, #260]	; (8006e54 <xTaskIncrementTick+0x160>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	4a3f      	ldr	r2, [pc, #252]	; (8006e54 <xTaskIncrementTick+0x160>)
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	f000 faca 	bl	80072f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d5c:	4b3e      	ldr	r3, [pc, #248]	; (8006e58 <xTaskIncrementTick+0x164>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d34e      	bcc.n	8006e04 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d66:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <xTaskIncrementTick+0x158>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <xTaskIncrementTick+0x80>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <xTaskIncrementTick+0x82>
 8006d74:	2300      	movs	r3, #0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d004      	beq.n	8006d84 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d7a:	4b37      	ldr	r3, [pc, #220]	; (8006e58 <xTaskIncrementTick+0x164>)
 8006d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d80:	601a      	str	r2, [r3, #0]
					break;
 8006d82:	e03f      	b.n	8006e04 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d84:	4b31      	ldr	r3, [pc, #196]	; (8006e4c <xTaskIncrementTick+0x158>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d203      	bcs.n	8006da4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d9c:	4a2e      	ldr	r2, [pc, #184]	; (8006e58 <xTaskIncrementTick+0x164>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6013      	str	r3, [r2, #0]
						break;
 8006da2:	e02f      	b.n	8006e04 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe fee3 	bl	8005b74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	3318      	adds	r3, #24
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe feda 	bl	8005b74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc4:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <xTaskIncrementTick+0x168>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d903      	bls.n	8006dd4 <xTaskIncrementTick+0xe0>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	4a22      	ldr	r2, [pc, #136]	; (8006e5c <xTaskIncrementTick+0x168>)
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <xTaskIncrementTick+0x16c>)
 8006de2:	441a      	add	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4619      	mov	r1, r3
 8006dea:	4610      	mov	r0, r2
 8006dec:	f7fe fe65 	bl	8005aba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <xTaskIncrementTick+0x170>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d3b3      	bcc.n	8006d66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e02:	e7b0      	b.n	8006d66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e04:	4b17      	ldr	r3, [pc, #92]	; (8006e64 <xTaskIncrementTick+0x170>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0a:	4915      	ldr	r1, [pc, #84]	; (8006e60 <xTaskIncrementTick+0x16c>)
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d907      	bls.n	8006e2c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e004      	b.n	8006e2c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <xTaskIncrementTick+0x174>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3301      	adds	r3, #1
 8006e28:	4a0f      	ldr	r2, [pc, #60]	; (8006e68 <xTaskIncrementTick+0x174>)
 8006e2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <xTaskIncrementTick+0x178>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006e34:	2301      	movs	r3, #1
 8006e36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e38:	697b      	ldr	r3, [r7, #20]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20001438 	.word	0x20001438
 8006e48:	20001414 	.word	0x20001414
 8006e4c:	200013c8 	.word	0x200013c8
 8006e50:	200013cc 	.word	0x200013cc
 8006e54:	20001428 	.word	0x20001428
 8006e58:	20001430 	.word	0x20001430
 8006e5c:	20001418 	.word	0x20001418
 8006e60:	20000f40 	.word	0x20000f40
 8006e64:	20000f3c 	.word	0x20000f3c
 8006e68:	20001420 	.word	0x20001420
 8006e6c:	20001424 	.word	0x20001424

08006e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e76:	4b27      	ldr	r3, [pc, #156]	; (8006f14 <vTaskSwitchContext+0xa4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <vTaskSwitchContext+0xa8>)
 8006e80:	2201      	movs	r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e84:	e040      	b.n	8006f08 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006e86:	4b24      	ldr	r3, [pc, #144]	; (8006f18 <vTaskSwitchContext+0xa8>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e8c:	4b23      	ldr	r3, [pc, #140]	; (8006f1c <vTaskSwitchContext+0xac>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	e00f      	b.n	8006eb4 <vTaskSwitchContext+0x44>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <vTaskSwitchContext+0x3e>
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	607b      	str	r3, [r7, #4]
 8006eac:	e7fe      	b.n	8006eac <vTaskSwitchContext+0x3c>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	491a      	ldr	r1, [pc, #104]	; (8006f20 <vTaskSwitchContext+0xb0>)
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0e5      	beq.n	8006e94 <vTaskSwitchContext+0x24>
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <vTaskSwitchContext+0xb0>)
 8006ed4:	4413      	add	r3, r2
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	605a      	str	r2, [r3, #4]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d104      	bne.n	8006ef8 <vTaskSwitchContext+0x88>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <vTaskSwitchContext+0xb4>)
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4a06      	ldr	r2, [pc, #24]	; (8006f1c <vTaskSwitchContext+0xac>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	20001438 	.word	0x20001438
 8006f18:	20001424 	.word	0x20001424
 8006f1c:	20001418 	.word	0x20001418
 8006f20:	20000f40 	.word	0x20000f40
 8006f24:	20000f3c 	.word	0x20000f3c

08006f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <vTaskPlaceOnEventList+0x24>
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e7fe      	b.n	8006f4a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f4c:	4b07      	ldr	r3, [pc, #28]	; (8006f6c <vTaskPlaceOnEventList+0x44>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3318      	adds	r3, #24
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7fe fdd4 	bl	8005b02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	6838      	ldr	r0, [r7, #0]
 8006f5e:	f000 fb7d 	bl	800765c <prvAddCurrentTaskToDelayedList>
}
 8006f62:	bf00      	nop
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000f3c 	.word	0x20000f3c

08006f70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <vTaskPlaceOnEventListRestricted+0x26>
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e7fe      	b.n	8006f94 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f96:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <vTaskPlaceOnEventListRestricted+0x50>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3318      	adds	r3, #24
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7fe fd8b 	bl	8005aba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	68b8      	ldr	r0, [r7, #8]
 8006fb4:	f000 fb52 	bl	800765c <prvAddCurrentTaskToDelayedList>
	}
 8006fb8:	bf00      	nop
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000f3c 	.word	0x20000f3c

08006fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <xTaskRemoveFromEventList+0x2a>
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e7fe      	b.n	8006fec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	3318      	adds	r3, #24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fdbe 	bl	8005b74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff8:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <xTaskRemoveFromEventList+0xac>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d11d      	bne.n	800703c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	3304      	adds	r3, #4
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fdb5 	bl	8005b74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700e:	4b19      	ldr	r3, [pc, #100]	; (8007074 <xTaskRemoveFromEventList+0xb0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d903      	bls.n	800701e <xTaskRemoveFromEventList+0x5a>
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	4a16      	ldr	r2, [pc, #88]	; (8007074 <xTaskRemoveFromEventList+0xb0>)
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4a13      	ldr	r2, [pc, #76]	; (8007078 <xTaskRemoveFromEventList+0xb4>)
 800702c:	441a      	add	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fe fd40 	bl	8005aba <vListInsertEnd>
 800703a:	e005      	b.n	8007048 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	3318      	adds	r3, #24
 8007040:	4619      	mov	r1, r3
 8007042:	480e      	ldr	r0, [pc, #56]	; (800707c <xTaskRemoveFromEventList+0xb8>)
 8007044:	f7fe fd39 	bl	8005aba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <xTaskRemoveFromEventList+0xbc>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007052:	429a      	cmp	r2, r3
 8007054:	d905      	bls.n	8007062 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007056:	2301      	movs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800705a:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <xTaskRemoveFromEventList+0xc0>)
 800705c:	2201      	movs	r2, #1
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e001      	b.n	8007066 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007066:	697b      	ldr	r3, [r7, #20]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20001438 	.word	0x20001438
 8007074:	20001418 	.word	0x20001418
 8007078:	20000f40 	.word	0x20000f40
 800707c:	200013d0 	.word	0x200013d0
 8007080:	20000f3c 	.word	0x20000f3c
 8007084:	20001424 	.word	0x20001424

08007088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <vTaskInternalSetTimeOutState+0x24>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007098:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <vTaskInternalSetTimeOutState+0x28>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20001428 	.word	0x20001428
 80070b0:	20001414 	.word	0x20001414

080070b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <xTaskCheckForTimeOut+0x24>
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	e7fe      	b.n	80070d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <xTaskCheckForTimeOut+0x3e>
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	e7fe      	b.n	80070f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80070f2:	f000 ff3b 	bl	8007f6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070f6:	4b1d      	ldr	r3, [pc, #116]	; (800716c <xTaskCheckForTimeOut+0xb8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d102      	bne.n	8007116 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	e023      	b.n	800715e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b15      	ldr	r3, [pc, #84]	; (8007170 <xTaskCheckForTimeOut+0xbc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d007      	beq.n	8007132 <xTaskCheckForTimeOut+0x7e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	e015      	b.n	800715e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	429a      	cmp	r2, r3
 800713a:	d20b      	bcs.n	8007154 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	1ad2      	subs	r2, r2, r3
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff ff9d 	bl	8007088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800714e:	2300      	movs	r3, #0
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e004      	b.n	800715e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800715a:	2301      	movs	r3, #1
 800715c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800715e:	f000 ff33 	bl	8007fc8 <vPortExitCritical>

	return xReturn;
 8007162:	69fb      	ldr	r3, [r7, #28]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20001414 	.word	0x20001414
 8007170:	20001428 	.word	0x20001428

08007174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007178:	4b03      	ldr	r3, [pc, #12]	; (8007188 <vTaskMissedYield+0x14>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	20001424 	.word	0x20001424

0800718c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007194:	f000 f852 	bl	800723c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <prvIdleTask+0x28>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d9f9      	bls.n	8007194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <prvIdleTask+0x2c>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071b0:	e7f0      	b.n	8007194 <prvIdleTask+0x8>
 80071b2:	bf00      	nop
 80071b4:	20000f40 	.word	0x20000f40
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071c2:	2300      	movs	r3, #0
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	e00c      	b.n	80071e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4a12      	ldr	r2, [pc, #72]	; (800721c <prvInitialiseTaskLists+0x60>)
 80071d4:	4413      	add	r3, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fc42 	bl	8005a60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3301      	adds	r3, #1
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b37      	cmp	r3, #55	; 0x37
 80071e6:	d9ef      	bls.n	80071c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e8:	480d      	ldr	r0, [pc, #52]	; (8007220 <prvInitialiseTaskLists+0x64>)
 80071ea:	f7fe fc39 	bl	8005a60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071ee:	480d      	ldr	r0, [pc, #52]	; (8007224 <prvInitialiseTaskLists+0x68>)
 80071f0:	f7fe fc36 	bl	8005a60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071f4:	480c      	ldr	r0, [pc, #48]	; (8007228 <prvInitialiseTaskLists+0x6c>)
 80071f6:	f7fe fc33 	bl	8005a60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071fa:	480c      	ldr	r0, [pc, #48]	; (800722c <prvInitialiseTaskLists+0x70>)
 80071fc:	f7fe fc30 	bl	8005a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007200:	480b      	ldr	r0, [pc, #44]	; (8007230 <prvInitialiseTaskLists+0x74>)
 8007202:	f7fe fc2d 	bl	8005a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <prvInitialiseTaskLists+0x78>)
 8007208:	4a05      	ldr	r2, [pc, #20]	; (8007220 <prvInitialiseTaskLists+0x64>)
 800720a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800720c:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <prvInitialiseTaskLists+0x7c>)
 800720e:	4a05      	ldr	r2, [pc, #20]	; (8007224 <prvInitialiseTaskLists+0x68>)
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000f40 	.word	0x20000f40
 8007220:	200013a0 	.word	0x200013a0
 8007224:	200013b4 	.word	0x200013b4
 8007228:	200013d0 	.word	0x200013d0
 800722c:	200013e4 	.word	0x200013e4
 8007230:	200013fc 	.word	0x200013fc
 8007234:	200013c8 	.word	0x200013c8
 8007238:	200013cc 	.word	0x200013cc

0800723c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007242:	e019      	b.n	8007278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007244:	f000 fe92 	bl	8007f6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007248:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <prvCheckTasksWaitingTermination+0x4c>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fc8d 	bl	8005b74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800725a:	4b0c      	ldr	r3, [pc, #48]	; (800728c <prvCheckTasksWaitingTermination+0x50>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	4a0a      	ldr	r2, [pc, #40]	; (800728c <prvCheckTasksWaitingTermination+0x50>)
 8007262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <prvCheckTasksWaitingTermination+0x54>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3b01      	subs	r3, #1
 800726a:	4a09      	ldr	r2, [pc, #36]	; (8007290 <prvCheckTasksWaitingTermination+0x54>)
 800726c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800726e:	f000 feab 	bl	8007fc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f80e 	bl	8007294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <prvCheckTasksWaitingTermination+0x54>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e1      	bne.n	8007244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	200013e4 	.word	0x200013e4
 800728c:	20001410 	.word	0x20001410
 8007290:	200013f8 	.word	0x200013f8

08007294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d108      	bne.n	80072b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 f83a 	bl	8008324 <vPortFree>
				vPortFree( pxTCB );
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f837 	bl	8008324 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072b6:	e017      	b.n	80072e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d103      	bne.n	80072ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 f82e 	bl	8008324 <vPortFree>
	}
 80072c8:	e00e      	b.n	80072e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d009      	beq.n	80072e8 <prvDeleteTCB+0x54>
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e7fe      	b.n	80072e6 <prvDeleteTCB+0x52>
	}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <prvResetNextTaskUnblockTime+0x44>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <prvResetNextTaskUnblockTime+0x14>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <prvResetNextTaskUnblockTime+0x16>
 8007304:	2300      	movs	r3, #0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800730a:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <prvResetNextTaskUnblockTime+0x48>)
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007312:	e008      	b.n	8007326 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007314:	4b07      	ldr	r3, [pc, #28]	; (8007334 <prvResetNextTaskUnblockTime+0x44>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	4a05      	ldr	r2, [pc, #20]	; (8007338 <prvResetNextTaskUnblockTime+0x48>)
 8007324:	6013      	str	r3, [r2, #0]
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	200013c8 	.word	0x200013c8
 8007338:	20001430 	.word	0x20001430

0800733c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <xTaskGetSchedulerState+0x34>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d102      	bne.n	8007350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800734a:	2301      	movs	r3, #1
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	e008      	b.n	8007362 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007350:	4b08      	ldr	r3, [pc, #32]	; (8007374 <xTaskGetSchedulerState+0x38>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007358:	2302      	movs	r3, #2
 800735a:	607b      	str	r3, [r7, #4]
 800735c:	e001      	b.n	8007362 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007362:	687b      	ldr	r3, [r7, #4]
	}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	2000141c 	.word	0x2000141c
 8007374:	20001438 	.word	0x20001438

08007378 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d056      	beq.n	800743c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007392:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <xTaskPriorityInherit+0xd0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	429a      	cmp	r2, r3
 800739a:	d246      	bcs.n	800742a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db06      	blt.n	80073b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a4:	4b28      	ldr	r3, [pc, #160]	; (8007448 <xTaskPriorityInherit+0xd0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6959      	ldr	r1, [r3, #20]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4a22      	ldr	r2, [pc, #136]	; (800744c <xTaskPriorityInherit+0xd4>)
 80073c4:	4413      	add	r3, r2
 80073c6:	4299      	cmp	r1, r3
 80073c8:	d101      	bne.n	80073ce <xTaskPriorityInherit+0x56>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e000      	b.n	80073d0 <xTaskPriorityInherit+0x58>
 80073ce:	2300      	movs	r3, #0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d022      	beq.n	800741a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe fbcb 	bl	8005b74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073de:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <xTaskPriorityInherit+0xd0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ec:	4b18      	ldr	r3, [pc, #96]	; (8007450 <xTaskPriorityInherit+0xd8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d903      	bls.n	80073fc <xTaskPriorityInherit+0x84>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	4a15      	ldr	r2, [pc, #84]	; (8007450 <xTaskPriorityInherit+0xd8>)
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4a10      	ldr	r2, [pc, #64]	; (800744c <xTaskPriorityInherit+0xd4>)
 800740a:	441a      	add	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f7fe fb51 	bl	8005aba <vListInsertEnd>
 8007418:	e004      	b.n	8007424 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <xTaskPriorityInherit+0xd0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e008      	b.n	800743c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800742e:	4b06      	ldr	r3, [pc, #24]	; (8007448 <xTaskPriorityInherit+0xd0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	429a      	cmp	r2, r3
 8007436:	d201      	bcs.n	800743c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800743c:	68fb      	ldr	r3, [r7, #12]
	}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000f3c 	.word	0x20000f3c
 800744c:	20000f40 	.word	0x20000f40
 8007450:	20001418 	.word	0x20001418

08007454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d054      	beq.n	8007514 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800746a:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <xTaskPriorityDisinherit+0xcc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	429a      	cmp	r2, r3
 8007472:	d009      	beq.n	8007488 <xTaskPriorityDisinherit+0x34>
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	e7fe      	b.n	8007486 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <xTaskPriorityDisinherit+0x50>
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60bb      	str	r3, [r7, #8]
 80074a2:	e7fe      	b.n	80074a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a8:	1e5a      	subs	r2, r3, #1
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d02c      	beq.n	8007514 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d128      	bne.n	8007514 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	3304      	adds	r3, #4
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fb54 	bl	8005b74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <xTaskPriorityDisinherit+0xd0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d903      	bls.n	80074f4 <xTaskPriorityDisinherit+0xa0>
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <xTaskPriorityDisinherit+0xd0>)
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4a09      	ldr	r2, [pc, #36]	; (8007528 <xTaskPriorityDisinherit+0xd4>)
 8007502:	441a      	add	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3304      	adds	r3, #4
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7fe fad5 	bl	8005aba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007510:	2301      	movs	r3, #1
 8007512:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007514:	697b      	ldr	r3, [r7, #20]
	}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000f3c 	.word	0x20000f3c
 8007524:	20001418 	.word	0x20001418
 8007528:	20000f40 	.word	0x20000f40

0800752c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800753a:	2301      	movs	r3, #1
 800753c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d06d      	beq.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007548:	2b00      	cmp	r3, #0
 800754a:	d109      	bne.n	8007560 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e7fe      	b.n	800755e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d902      	bls.n	8007570 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	e002      	b.n	8007576 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007574:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	429a      	cmp	r2, r3
 800757e:	d04f      	beq.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	429a      	cmp	r2, r3
 8007588:	d14a      	bne.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800758a:	4b27      	ldr	r3, [pc, #156]	; (8007628 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	429a      	cmp	r2, r3
 8007592:	d109      	bne.n	80075a8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	60bb      	str	r3, [r7, #8]
 80075a6:	e7fe      	b.n	80075a6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	69fa      	ldr	r2, [r7, #28]
 80075b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	db04      	blt.n	80075c6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	6959      	ldr	r1, [r3, #20]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4a15      	ldr	r2, [pc, #84]	; (800762c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075d6:	4413      	add	r3, r2
 80075d8:	4299      	cmp	r1, r3
 80075da:	d101      	bne.n	80075e0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80075dc:	2301      	movs	r3, #1
 80075de:	e000      	b.n	80075e2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80075e0:	2300      	movs	r3, #0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01c      	beq.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fac2 	bl	8005b74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f4:	4b0e      	ldr	r3, [pc, #56]	; (8007630 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d903      	bls.n	8007604 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	4a0b      	ldr	r2, [pc, #44]	; (8007630 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4a06      	ldr	r2, [pc, #24]	; (800762c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007612:	441a      	add	r2, r3
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	3304      	adds	r3, #4
 8007618:	4619      	mov	r1, r3
 800761a:	4610      	mov	r0, r2
 800761c:	f7fe fa4d 	bl	8005aba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007620:	bf00      	nop
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20000f3c 	.word	0x20000f3c
 800762c:	20000f40 	.word	0x20000f40
 8007630:	20001418 	.word	0x20001418

08007634 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007638:	4b07      	ldr	r3, [pc, #28]	; (8007658 <pvTaskIncrementMutexHeldCount+0x24>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <pvTaskIncrementMutexHeldCount+0x24>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007646:	3201      	adds	r2, #1
 8007648:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800764a:	4b03      	ldr	r3, [pc, #12]	; (8007658 <pvTaskIncrementMutexHeldCount+0x24>)
 800764c:	681b      	ldr	r3, [r3, #0]
	}
 800764e:	4618      	mov	r0, r3
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	20000f3c 	.word	0x20000f3c

0800765c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007666:	4b21      	ldr	r3, [pc, #132]	; (80076ec <prvAddCurrentTaskToDelayedList+0x90>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800766c:	4b20      	ldr	r3, [pc, #128]	; (80076f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fa7e 	bl	8005b74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d10a      	bne.n	8007696 <prvAddCurrentTaskToDelayedList+0x3a>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007686:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3304      	adds	r3, #4
 800768c:	4619      	mov	r1, r3
 800768e:	4819      	ldr	r0, [pc, #100]	; (80076f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007690:	f7fe fa13 	bl	8005aba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007694:	e026      	b.n	80076e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4413      	add	r3, r2
 800769c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800769e:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d209      	bcs.n	80076c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f7fe fa21 	bl	8005b02 <vListInsert>
}
 80076c0:	e010      	b.n	80076e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076c2:	4b0e      	ldr	r3, [pc, #56]	; (80076fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7fe fa17 	bl	8005b02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d202      	bcs.n	80076e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076de:	4a08      	ldr	r2, [pc, #32]	; (8007700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6013      	str	r3, [r2, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20001414 	.word	0x20001414
 80076f0:	20000f3c 	.word	0x20000f3c
 80076f4:	200013fc 	.word	0x200013fc
 80076f8:	200013cc 	.word	0x200013cc
 80076fc:	200013c8 	.word	0x200013c8
 8007700:	20001430 	.word	0x20001430

08007704 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	; 0x28
 8007708:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800770e:	f000 fac3 	bl	8007c98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <xTimerCreateTimerTask+0x80>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d021      	beq.n	800775e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007722:	1d3a      	adds	r2, r7, #4
 8007724:	f107 0108 	add.w	r1, r7, #8
 8007728:	f107 030c 	add.w	r3, r7, #12
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe f97d 	bl	8005a2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	9202      	str	r2, [sp, #8]
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	2302      	movs	r3, #2
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	2300      	movs	r3, #0
 8007742:	460a      	mov	r2, r1
 8007744:	4910      	ldr	r1, [pc, #64]	; (8007788 <xTimerCreateTimerTask+0x84>)
 8007746:	4811      	ldr	r0, [pc, #68]	; (800778c <xTimerCreateTimerTask+0x88>)
 8007748:	f7ff f832 	bl	80067b0 <xTaskCreateStatic>
 800774c:	4602      	mov	r2, r0
 800774e:	4b10      	ldr	r3, [pc, #64]	; (8007790 <xTimerCreateTimerTask+0x8c>)
 8007750:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <xTimerCreateTimerTask+0x8c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800775a:	2301      	movs	r3, #1
 800775c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d109      	bne.n	8007778 <xTimerCreateTimerTask+0x74>
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	613b      	str	r3, [r7, #16]
 8007776:	e7fe      	b.n	8007776 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007778:	697b      	ldr	r3, [r7, #20]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	2000146c 	.word	0x2000146c
 8007788:	08008710 	.word	0x08008710
 800778c:	080078ad 	.word	0x080078ad
 8007790:	20001470 	.word	0x20001470

08007794 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08a      	sub	sp, #40	; 0x28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <xTimerGenericCommand+0x2c>
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	623b      	str	r3, [r7, #32]
 80077be:	e7fe      	b.n	80077be <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077c0:	4b19      	ldr	r3, [pc, #100]	; (8007828 <xTimerGenericCommand+0x94>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d02a      	beq.n	800781e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	dc18      	bgt.n	800780c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077da:	f7ff fdaf 	bl	800733c <xTaskGetSchedulerState>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d109      	bne.n	80077f8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077e4:	4b10      	ldr	r3, [pc, #64]	; (8007828 <xTimerGenericCommand+0x94>)
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	f107 0110 	add.w	r1, r7, #16
 80077ec:	2300      	movs	r3, #0
 80077ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f0:	f7fe fae8 	bl	8005dc4 <xQueueGenericSend>
 80077f4:	6278      	str	r0, [r7, #36]	; 0x24
 80077f6:	e012      	b.n	800781e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <xTimerGenericCommand+0x94>)
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	f107 0110 	add.w	r1, r7, #16
 8007800:	2300      	movs	r3, #0
 8007802:	2200      	movs	r2, #0
 8007804:	f7fe fade 	bl	8005dc4 <xQueueGenericSend>
 8007808:	6278      	str	r0, [r7, #36]	; 0x24
 800780a:	e008      	b.n	800781e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <xTimerGenericCommand+0x94>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	f107 0110 	add.w	r1, r7, #16
 8007814:	2300      	movs	r3, #0
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	f7fe fbce 	bl	8005fb8 <xQueueGenericSendFromISR>
 800781c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007820:	4618      	mov	r0, r3
 8007822:	3728      	adds	r7, #40	; 0x28
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	2000146c 	.word	0x2000146c

0800782c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af02      	add	r7, sp, #8
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007836:	4b1c      	ldr	r3, [pc, #112]	; (80078a8 <prvProcessExpiredTimer+0x7c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	3304      	adds	r3, #4
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe f995 	bl	8005b74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d121      	bne.n	8007896 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	18d1      	adds	r1, r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	6978      	ldr	r0, [r7, #20]
 8007860:	f000 f8c8 	bl	80079f4 <prvInsertTimerInActiveList>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d015      	beq.n	8007896 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800786a:	2300      	movs	r3, #0
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	2300      	movs	r3, #0
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	2100      	movs	r1, #0
 8007874:	6978      	ldr	r0, [r7, #20]
 8007876:	f7ff ff8d 	bl	8007794 <xTimerGenericCommand>
 800787a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <prvProcessExpiredTimer+0x6a>
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e7fe      	b.n	8007894 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	6978      	ldr	r0, [r7, #20]
 800789c:	4798      	blx	r3
}
 800789e:	bf00      	nop
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20001464 	.word	0x20001464

080078ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078b4:	f107 0308 	add.w	r3, r7, #8
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f857 	bl	800796c <prvGetNextExpireTime>
 80078be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4619      	mov	r1, r3
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 f803 	bl	80078d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078ca:	f000 f8d5 	bl	8007a78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ce:	e7f1      	b.n	80078b4 <prvTimerTask+0x8>

080078d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078da:	f7ff f951 	bl	8006b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078de:	f107 0308 	add.w	r3, r7, #8
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 f866 	bl	80079b4 <prvSampleTimeNow>
 80078e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d130      	bne.n	8007952 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10a      	bne.n	800790c <prvProcessTimerOrBlockTask+0x3c>
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d806      	bhi.n	800790c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078fe:	f7ff f94d 	bl	8006b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff ff91 	bl	800782c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800790a:	e024      	b.n	8007956 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d008      	beq.n	8007924 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007912:	4b13      	ldr	r3, [pc, #76]	; (8007960 <prvProcessTimerOrBlockTask+0x90>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	bf0c      	ite	eq
 800791c:	2301      	moveq	r3, #1
 800791e:	2300      	movne	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007924:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <prvProcessTimerOrBlockTask+0x94>)
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	4619      	mov	r1, r3
 8007932:	f7fe ff09 	bl	8006748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007936:	f7ff f931 	bl	8006b9c <xTaskResumeAll>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10a      	bne.n	8007956 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007940:	4b09      	ldr	r3, [pc, #36]	; (8007968 <prvProcessTimerOrBlockTask+0x98>)
 8007942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	f3bf 8f6f 	isb	sy
}
 8007950:	e001      	b.n	8007956 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007952:	f7ff f923 	bl	8006b9c <xTaskResumeAll>
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20001468 	.word	0x20001468
 8007964:	2000146c 	.word	0x2000146c
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007974:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <prvGetNextExpireTime+0x44>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	bf0c      	ite	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	2300      	movne	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d105      	bne.n	800799e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007992:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <prvGetNextExpireTime+0x44>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	e001      	b.n	80079a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079a2:	68fb      	ldr	r3, [r7, #12]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	20001464 	.word	0x20001464

080079b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079bc:	f7ff f98a 	bl	8006cd4 <xTaskGetTickCount>
 80079c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <prvSampleTimeNow+0x3c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d205      	bcs.n	80079d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079cc:	f000 f904 	bl	8007bd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	e002      	b.n	80079de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079de:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <prvSampleTimeNow+0x3c>)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079e4:	68fb      	ldr	r3, [r7, #12]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20001474 	.word	0x20001474

080079f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d812      	bhi.n	8007a40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d302      	bcc.n	8007a2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	e01b      	b.n	8007a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a2e:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <prvInsertTimerInActiveList+0x7c>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f7fe f862 	bl	8005b02 <vListInsert>
 8007a3e:	e012      	b.n	8007a66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d206      	bcs.n	8007a56 <prvInsertTimerInActiveList+0x62>
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d302      	bcc.n	8007a56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	e007      	b.n	8007a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a56:	4b07      	ldr	r3, [pc, #28]	; (8007a74 <prvInsertTimerInActiveList+0x80>)
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f7fe f84e 	bl	8005b02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a66:	697b      	ldr	r3, [r7, #20]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20001468 	.word	0x20001468
 8007a74:	20001464 	.word	0x20001464

08007a78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a7e:	e099      	b.n	8007bb4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da17      	bge.n	8007ab6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a86:	1d3b      	adds	r3, r7, #4
 8007a88:	3304      	adds	r3, #4
 8007a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <prvProcessReceivedCommands+0x2e>
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	61fb      	str	r3, [r7, #28]
 8007aa4:	e7fe      	b.n	8007aa4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aac:	6850      	ldr	r0, [r2, #4]
 8007aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab0:	6892      	ldr	r2, [r2, #8]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	db7a      	blt.n	8007bb2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d004      	beq.n	8007ad2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	3304      	adds	r3, #4
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe f851 	bl	8005b74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ad2:	463b      	mov	r3, r7
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff ff6d 	bl	80079b4 <prvSampleTimeNow>
 8007ada:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b09      	cmp	r3, #9
 8007ae0:	d868      	bhi.n	8007bb4 <prvProcessReceivedCommands+0x13c>
 8007ae2:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <prvProcessReceivedCommands+0x70>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b11 	.word	0x08007b11
 8007af4:	08007bb5 	.word	0x08007bb5
 8007af8:	08007b6b 	.word	0x08007b6b
 8007afc:	08007ba1 	.word	0x08007ba1
 8007b00:	08007b11 	.word	0x08007b11
 8007b04:	08007b11 	.word	0x08007b11
 8007b08:	08007bb5 	.word	0x08007bb5
 8007b0c:	08007b6b 	.word	0x08007b6b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	18d1      	adds	r1, r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b1e:	f7ff ff69 	bl	80079f4 <prvInsertTimerInActiveList>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d045      	beq.n	8007bb4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b2e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d13d      	bne.n	8007bb4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	441a      	add	r2, r3
 8007b40:	2300      	movs	r3, #0
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b4a:	f7ff fe23 	bl	8007794 <xTimerGenericCommand>
 8007b4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d12e      	bne.n	8007bb4 <prvProcessReceivedCommands+0x13c>
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	61bb      	str	r3, [r7, #24]
 8007b68:	e7fe      	b.n	8007b68 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d109      	bne.n	8007b8c <prvProcessReceivedCommands+0x114>
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	e7fe      	b.n	8007b8a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	699a      	ldr	r2, [r3, #24]
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	18d1      	adds	r1, r2, r3
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9a:	f7ff ff2b 	bl	80079f4 <prvInsertTimerInActiveList>
					break;
 8007b9e:	e009      	b.n	8007bb4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bac:	f000 fbba 	bl	8008324 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bb0:	e000      	b.n	8007bb4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007bb2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bb4:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <prvProcessReceivedCommands+0x15c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	1d39      	adds	r1, r7, #4
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe fa8f 	bl	80060e0 <xQueueReceive>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f47f af5b 	bne.w	8007a80 <prvProcessReceivedCommands+0x8>
	}
}
 8007bca:	bf00      	nop
 8007bcc:	3730      	adds	r7, #48	; 0x30
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	2000146c 	.word	0x2000146c

08007bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bde:	e044      	b.n	8007c6a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be0:	4b2b      	ldr	r3, [pc, #172]	; (8007c90 <prvSwitchTimerLists+0xb8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bea:	4b29      	ldr	r3, [pc, #164]	; (8007c90 <prvSwitchTimerLists+0xb8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fd ffbb 	bl	8005b74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d12d      	bne.n	8007c6a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4413      	add	r3, r2
 8007c16:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d90e      	bls.n	8007c3e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c2c:	4b18      	ldr	r3, [pc, #96]	; (8007c90 <prvSwitchTimerLists+0xb8>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7fd ff63 	bl	8005b02 <vListInsert>
 8007c3c:	e015      	b.n	8007c6a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	2100      	movs	r1, #0
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fda3 	bl	8007794 <xTimerGenericCommand>
 8007c4e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <prvSwitchTimerLists+0x92>
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	e7fe      	b.n	8007c68 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <prvSwitchTimerLists+0xb8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1b5      	bne.n	8007be0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <prvSwitchTimerLists+0xb8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c7a:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <prvSwitchTimerLists+0xbc>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a04      	ldr	r2, [pc, #16]	; (8007c90 <prvSwitchTimerLists+0xb8>)
 8007c80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c82:	4a04      	ldr	r2, [pc, #16]	; (8007c94 <prvSwitchTimerLists+0xbc>)
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	6013      	str	r3, [r2, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20001464 	.word	0x20001464
 8007c94:	20001468 	.word	0x20001468

08007c98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c9e:	f000 f965 	bl	8007f6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <prvCheckForValidListAndQueue+0x60>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d120      	bne.n	8007cec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007caa:	4814      	ldr	r0, [pc, #80]	; (8007cfc <prvCheckForValidListAndQueue+0x64>)
 8007cac:	f7fd fed8 	bl	8005a60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cb0:	4813      	ldr	r0, [pc, #76]	; (8007d00 <prvCheckForValidListAndQueue+0x68>)
 8007cb2:	f7fd fed5 	bl	8005a60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cb6:	4b13      	ldr	r3, [pc, #76]	; (8007d04 <prvCheckForValidListAndQueue+0x6c>)
 8007cb8:	4a10      	ldr	r2, [pc, #64]	; (8007cfc <prvCheckForValidListAndQueue+0x64>)
 8007cba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cbc:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <prvCheckForValidListAndQueue+0x70>)
 8007cbe:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <prvCheckForValidListAndQueue+0x68>)
 8007cc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <prvCheckForValidListAndQueue+0x74>)
 8007cc8:	4a11      	ldr	r2, [pc, #68]	; (8007d10 <prvCheckForValidListAndQueue+0x78>)
 8007cca:	2110      	movs	r1, #16
 8007ccc:	200a      	movs	r0, #10
 8007cce:	f7fd ffe3 	bl	8005c98 <xQueueGenericCreateStatic>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <prvCheckForValidListAndQueue+0x60>)
 8007cd6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cd8:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <prvCheckForValidListAndQueue+0x60>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <prvCheckForValidListAndQueue+0x60>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	490b      	ldr	r1, [pc, #44]	; (8007d14 <prvCheckForValidListAndQueue+0x7c>)
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fd06 	bl	80066f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cec:	f000 f96c 	bl	8007fc8 <vPortExitCritical>
}
 8007cf0:	bf00      	nop
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000146c 	.word	0x2000146c
 8007cfc:	2000143c 	.word	0x2000143c
 8007d00:	20001450 	.word	0x20001450
 8007d04:	20001464 	.word	0x20001464
 8007d08:	20001468 	.word	0x20001468
 8007d0c:	20001518 	.word	0x20001518
 8007d10:	20001478 	.word	0x20001478
 8007d14:	08008718 	.word	0x08008718

08007d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3b04      	subs	r3, #4
 8007d28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3b04      	subs	r3, #4
 8007d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f023 0201 	bic.w	r2, r3, #1
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3b04      	subs	r3, #4
 8007d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d48:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <pxPortInitialiseStack+0x64>)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3b14      	subs	r3, #20
 8007d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3b04      	subs	r3, #4
 8007d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f06f 0202 	mvn.w	r2, #2
 8007d66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3b20      	subs	r3, #32
 8007d6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	08007d81 	.word	0x08007d81

08007d80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d8a:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <prvTaskExitError+0x50>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d009      	beq.n	8007da8 <prvTaskExitError+0x28>
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	e7fe      	b.n	8007da6 <prvTaskExitError+0x26>
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dba:	bf00      	nop
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0fc      	beq.n	8007dbc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dc2:	bf00      	nop
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	2000000c 	.word	0x2000000c
	...

08007de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <pxCurrentTCBConst2>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	6808      	ldr	r0, [r1, #0]
 8007de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	f380 8809 	msr	PSP, r0
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	4770      	bx	lr
 8007dfc:	f3af 8000 	nop.w

08007e00 <pxCurrentTCBConst2>:
 8007e00:	20000f3c 	.word	0x20000f3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e08:	4808      	ldr	r0, [pc, #32]	; (8007e2c <prvPortStartFirstTask+0x24>)
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f380 8808 	msr	MSP, r0
 8007e12:	f04f 0000 	mov.w	r0, #0
 8007e16:	f380 8814 	msr	CONTROL, r0
 8007e1a:	b662      	cpsie	i
 8007e1c:	b661      	cpsie	f
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	df00      	svc	0
 8007e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e2a:	bf00      	nop
 8007e2c:	e000ed08 	.word	0xe000ed08

08007e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e36:	4b44      	ldr	r3, [pc, #272]	; (8007f48 <xPortStartScheduler+0x118>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a44      	ldr	r2, [pc, #272]	; (8007f4c <xPortStartScheduler+0x11c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d109      	bne.n	8007e54 <xPortStartScheduler+0x24>
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	e7fe      	b.n	8007e52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e54:	4b3c      	ldr	r3, [pc, #240]	; (8007f48 <xPortStartScheduler+0x118>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a3d      	ldr	r2, [pc, #244]	; (8007f50 <xPortStartScheduler+0x120>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d109      	bne.n	8007e72 <xPortStartScheduler+0x42>
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e7fe      	b.n	8007e70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e72:	4b38      	ldr	r3, [pc, #224]	; (8007f54 <xPortStartScheduler+0x124>)
 8007e74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	22ff      	movs	r2, #255	; 0xff
 8007e82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	4b30      	ldr	r3, [pc, #192]	; (8007f58 <xPortStartScheduler+0x128>)
 8007e98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e9a:	4b30      	ldr	r3, [pc, #192]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007e9c:	2207      	movs	r2, #7
 8007e9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ea0:	e009      	b.n	8007eb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007ea2:	4b2e      	ldr	r3, [pc, #184]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	4a2c      	ldr	r2, [pc, #176]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007eaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ebe:	2b80      	cmp	r3, #128	; 0x80
 8007ec0:	d0ef      	beq.n	8007ea2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ec2:	4b26      	ldr	r3, [pc, #152]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f1c3 0307 	rsb	r3, r3, #7
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d009      	beq.n	8007ee2 <xPortStartScheduler+0xb2>
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	60bb      	str	r3, [r7, #8]
 8007ee0:	e7fe      	b.n	8007ee0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ee2:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007eea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eec:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ef4:	4a19      	ldr	r2, [pc, #100]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007ef6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f00:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <xPortStartScheduler+0x130>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a16      	ldr	r2, [pc, #88]	; (8007f60 <xPortStartScheduler+0x130>)
 8007f06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f0c:	4b14      	ldr	r3, [pc, #80]	; (8007f60 <xPortStartScheduler+0x130>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a13      	ldr	r2, [pc, #76]	; (8007f60 <xPortStartScheduler+0x130>)
 8007f12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f18:	f000 f8d6 	bl	80080c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f1c:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <xPortStartScheduler+0x134>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f22:	f000 f8f5 	bl	8008110 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a0f      	ldr	r2, [pc, #60]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f32:	f7ff ff69 	bl	8007e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f36:	f7fe ff9b 	bl	8006e70 <vTaskSwitchContext>
	prvTaskExitError();
 8007f3a:	f7ff ff21 	bl	8007d80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	e000ed00 	.word	0xe000ed00
 8007f4c:	410fc271 	.word	0x410fc271
 8007f50:	410fc270 	.word	0x410fc270
 8007f54:	e000e400 	.word	0xe000e400
 8007f58:	20001568 	.word	0x20001568
 8007f5c:	2000156c 	.word	0x2000156c
 8007f60:	e000ed20 	.word	0xe000ed20
 8007f64:	2000000c 	.word	0x2000000c
 8007f68:	e000ef34 	.word	0xe000ef34

08007f6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f84:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <vPortEnterCritical+0x54>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	4a0d      	ldr	r2, [pc, #52]	; (8007fc0 <vPortEnterCritical+0x54>)
 8007f8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <vPortEnterCritical+0x54>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d10e      	bne.n	8007fb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <vPortEnterCritical+0x58>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d009      	beq.n	8007fb4 <vPortEnterCritical+0x48>
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	e7fe      	b.n	8007fb2 <vPortEnterCritical+0x46>
	}
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	2000000c 	.word	0x2000000c
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fce:	4b11      	ldr	r3, [pc, #68]	; (8008014 <vPortExitCritical+0x4c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <vPortExitCritical+0x22>
 8007fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	607b      	str	r3, [r7, #4]
 8007fe8:	e7fe      	b.n	8007fe8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007fea:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <vPortExitCritical+0x4c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	4a08      	ldr	r2, [pc, #32]	; (8008014 <vPortExitCritical+0x4c>)
 8007ff2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ff4:	4b07      	ldr	r3, [pc, #28]	; (8008014 <vPortExitCritical+0x4c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d104      	bne.n	8008006 <vPortExitCritical+0x3e>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	2000000c 	.word	0x2000000c
	...

08008020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008020:	f3ef 8009 	mrs	r0, PSP
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <pxCurrentTCBConst>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	f01e 0f10 	tst.w	lr, #16
 8008030:	bf08      	it	eq
 8008032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	6010      	str	r0, [r2, #0]
 800803c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008044:	f380 8811 	msr	BASEPRI, r0
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f7fe ff0e 	bl	8006e70 <vTaskSwitchContext>
 8008054:	f04f 0000 	mov.w	r0, #0
 8008058:	f380 8811 	msr	BASEPRI, r0
 800805c:	bc09      	pop	{r0, r3}
 800805e:	6819      	ldr	r1, [r3, #0]
 8008060:	6808      	ldr	r0, [r1, #0]
 8008062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008066:	f01e 0f10 	tst.w	lr, #16
 800806a:	bf08      	it	eq
 800806c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008070:	f380 8809 	msr	PSP, r0
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	f3af 8000 	nop.w

08008080 <pxCurrentTCBConst>:
 8008080:	20000f3c 	.word	0x20000f3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop

08008088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080a0:	f7fe fe28 	bl	8006cf4 <xTaskIncrementTick>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080aa:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <SysTick_Handler+0x3c>)
 80080ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	2300      	movs	r3, #0
 80080b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080cc:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <vPortSetupTimerInterrupt+0x34>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080d2:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <vPortSetupTimerInterrupt+0x38>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080d8:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <vPortSetupTimerInterrupt+0x3c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a0a      	ldr	r2, [pc, #40]	; (8008108 <vPortSetupTimerInterrupt+0x40>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	099b      	lsrs	r3, r3, #6
 80080e4:	4a09      	ldr	r2, [pc, #36]	; (800810c <vPortSetupTimerInterrupt+0x44>)
 80080e6:	3b01      	subs	r3, #1
 80080e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ea:	4b04      	ldr	r3, [pc, #16]	; (80080fc <vPortSetupTimerInterrupt+0x34>)
 80080ec:	2207      	movs	r2, #7
 80080ee:	601a      	str	r2, [r3, #0]
}
 80080f0:	bf00      	nop
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	e000e010 	.word	0xe000e010
 8008100:	e000e018 	.word	0xe000e018
 8008104:	20000000 	.word	0x20000000
 8008108:	10624dd3 	.word	0x10624dd3
 800810c:	e000e014 	.word	0xe000e014

08008110 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008110:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008120 <vPortEnableVFP+0x10>
 8008114:	6801      	ldr	r1, [r0, #0]
 8008116:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800811a:	6001      	str	r1, [r0, #0]
 800811c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800811e:	bf00      	nop
 8008120:	e000ed88 	.word	0xe000ed88

08008124 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800812a:	f3ef 8305 	mrs	r3, IPSR
 800812e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b0f      	cmp	r3, #15
 8008134:	d913      	bls.n	800815e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008136:	4a16      	ldr	r2, [pc, #88]	; (8008190 <vPortValidateInterruptPriority+0x6c>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008140:	4b14      	ldr	r3, [pc, #80]	; (8008194 <vPortValidateInterruptPriority+0x70>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	7afa      	ldrb	r2, [r7, #11]
 8008146:	429a      	cmp	r2, r3
 8008148:	d209      	bcs.n	800815e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	607b      	str	r3, [r7, #4]
 800815c:	e7fe      	b.n	800815c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800815e:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <vPortValidateInterruptPriority+0x74>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008166:	4b0d      	ldr	r3, [pc, #52]	; (800819c <vPortValidateInterruptPriority+0x78>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d909      	bls.n	8008182 <vPortValidateInterruptPriority+0x5e>
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	e7fe      	b.n	8008180 <vPortValidateInterruptPriority+0x5c>
	}
 8008182:	bf00      	nop
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	e000e3f0 	.word	0xe000e3f0
 8008194:	20001568 	.word	0x20001568
 8008198:	e000ed0c 	.word	0xe000ed0c
 800819c:	2000156c 	.word	0x2000156c

080081a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08a      	sub	sp, #40	; 0x28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081ac:	f7fe fce8 	bl	8006b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081b0:	4b57      	ldr	r3, [pc, #348]	; (8008310 <pvPortMalloc+0x170>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081b8:	f000 f90c 	bl	80083d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081bc:	4b55      	ldr	r3, [pc, #340]	; (8008314 <pvPortMalloc+0x174>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4013      	ands	r3, r2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f040 808c 	bne.w	80082e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01c      	beq.n	800820a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80081d0:	2208      	movs	r2, #8
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4413      	add	r3, r2
 80081d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d013      	beq.n	800820a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	3308      	adds	r3, #8
 80081ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <pvPortMalloc+0x6a>
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	e7fe      	b.n	8008208 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d068      	beq.n	80082e2 <pvPortMalloc+0x142>
 8008210:	4b41      	ldr	r3, [pc, #260]	; (8008318 <pvPortMalloc+0x178>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d863      	bhi.n	80082e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800821a:	4b40      	ldr	r3, [pc, #256]	; (800831c <pvPortMalloc+0x17c>)
 800821c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800821e:	4b3f      	ldr	r3, [pc, #252]	; (800831c <pvPortMalloc+0x17c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008224:	e004      	b.n	8008230 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d903      	bls.n	8008242 <pvPortMalloc+0xa2>
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1f1      	bne.n	8008226 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008242:	4b33      	ldr	r3, [pc, #204]	; (8008310 <pvPortMalloc+0x170>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008248:	429a      	cmp	r2, r3
 800824a:	d04a      	beq.n	80082e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2208      	movs	r2, #8
 8008252:	4413      	add	r3, r2
 8008254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	1ad2      	subs	r2, r2, r3
 8008266:	2308      	movs	r3, #8
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	429a      	cmp	r2, r3
 800826c:	d91e      	bls.n	80082ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800826e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	2b00      	cmp	r3, #0
 800827e:	d009      	beq.n	8008294 <pvPortMalloc+0xf4>
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	e7fe      	b.n	8008292 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	1ad2      	subs	r2, r2, r3
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082a6:	69b8      	ldr	r0, [r7, #24]
 80082a8:	f000 f8f6 	bl	8008498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082ac:	4b1a      	ldr	r3, [pc, #104]	; (8008318 <pvPortMalloc+0x178>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	4a18      	ldr	r2, [pc, #96]	; (8008318 <pvPortMalloc+0x178>)
 80082b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082ba:	4b17      	ldr	r3, [pc, #92]	; (8008318 <pvPortMalloc+0x178>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b18      	ldr	r3, [pc, #96]	; (8008320 <pvPortMalloc+0x180>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d203      	bcs.n	80082ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <pvPortMalloc+0x178>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a15      	ldr	r2, [pc, #84]	; (8008320 <pvPortMalloc+0x180>)
 80082cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	4b10      	ldr	r3, [pc, #64]	; (8008314 <pvPortMalloc+0x174>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	431a      	orrs	r2, r3
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082e2:	f7fe fc5b 	bl	8006b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d009      	beq.n	8008304 <pvPortMalloc+0x164>
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e7fe      	b.n	8008302 <pvPortMalloc+0x162>
	return pvReturn;
 8008304:	69fb      	ldr	r3, [r7, #28]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3728      	adds	r7, #40	; 0x28
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20003578 	.word	0x20003578
 8008314:	20003584 	.word	0x20003584
 8008318:	2000357c 	.word	0x2000357c
 800831c:	20003570 	.word	0x20003570
 8008320:	20003580 	.word	0x20003580

08008324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d046      	beq.n	80083c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008336:	2308      	movs	r3, #8
 8008338:	425b      	negs	r3, r3
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4413      	add	r3, r2
 800833e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	4b20      	ldr	r3, [pc, #128]	; (80083cc <vPortFree+0xa8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4013      	ands	r3, r2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <vPortFree+0x42>
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e7fe      	b.n	8008364 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d009      	beq.n	8008382 <vPortFree+0x5e>
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	60bb      	str	r3, [r7, #8]
 8008380:	e7fe      	b.n	8008380 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	4b11      	ldr	r3, [pc, #68]	; (80083cc <vPortFree+0xa8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d019      	beq.n	80083c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d115      	bne.n	80083c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <vPortFree+0xa8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	43db      	mvns	r3, r3
 80083a2:	401a      	ands	r2, r3
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083a8:	f7fe fbea 	bl	8006b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <vPortFree+0xac>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4413      	add	r3, r2
 80083b6:	4a06      	ldr	r2, [pc, #24]	; (80083d0 <vPortFree+0xac>)
 80083b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083ba:	6938      	ldr	r0, [r7, #16]
 80083bc:	f000 f86c 	bl	8008498 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80083c0:	f7fe fbec 	bl	8006b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083c4:	bf00      	nop
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20003584 	.word	0x20003584
 80083d0:	2000357c 	.word	0x2000357c

080083d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083e0:	4b27      	ldr	r3, [pc, #156]	; (8008480 <prvHeapInit+0xac>)
 80083e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00c      	beq.n	8008408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3307      	adds	r3, #7
 80083f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0307 	bic.w	r3, r3, #7
 80083fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <prvHeapInit+0xac>)
 8008404:	4413      	add	r3, r2
 8008406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800840c:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <prvHeapInit+0xb0>)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <prvHeapInit+0xb0>)
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	4413      	add	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008420:	2208      	movs	r2, #8
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0307 	bic.w	r3, r3, #7
 800842e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a15      	ldr	r2, [pc, #84]	; (8008488 <prvHeapInit+0xb4>)
 8008434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <prvHeapInit+0xb4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2200      	movs	r2, #0
 800843c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800843e:	4b12      	ldr	r3, [pc, #72]	; (8008488 <prvHeapInit+0xb4>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <prvHeapInit+0xb4>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <prvHeapInit+0xb8>)
 8008462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <prvHeapInit+0xbc>)
 800846a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <prvHeapInit+0xc0>)
 800846e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20001570 	.word	0x20001570
 8008484:	20003570 	.word	0x20003570
 8008488:	20003578 	.word	0x20003578
 800848c:	20003580 	.word	0x20003580
 8008490:	2000357c 	.word	0x2000357c
 8008494:	20003584 	.word	0x20003584

08008498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084a0:	4b28      	ldr	r3, [pc, #160]	; (8008544 <prvInsertBlockIntoFreeList+0xac>)
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	e002      	b.n	80084ac <prvInsertBlockIntoFreeList+0x14>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d8f7      	bhi.n	80084a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	4413      	add	r3, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d108      	bne.n	80084da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	441a      	add	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	441a      	add	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d118      	bne.n	8008520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <prvInsertBlockIntoFreeList+0xb0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d00d      	beq.n	8008516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	441a      	add	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	e008      	b.n	8008528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008516:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <prvInsertBlockIntoFreeList+0xb0>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e003      	b.n	8008528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d002      	beq.n	8008536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008536:	bf00      	nop
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	20003570 	.word	0x20003570
 8008548:	20003578 	.word	0x20003578

0800854c <_ZdlPvj>:
 800854c:	f7f8 bdb4 	b.w	80010b8 <_ZdlPv>

08008550 <_ZSt17__throw_bad_allocv>:
 8008550:	b508      	push	{r3, lr}
 8008552:	f000 f803 	bl	800855c <abort>

08008556 <_ZSt20__throw_length_errorPKc>:
 8008556:	b508      	push	{r3, lr}
 8008558:	f000 f800 	bl	800855c <abort>

0800855c <abort>:
 800855c:	b508      	push	{r3, lr}
 800855e:	2006      	movs	r0, #6
 8008560:	f000 f882 	bl	8008668 <raise>
 8008564:	2001      	movs	r0, #1
 8008566:	f7f9 f98c 	bl	8001882 <_exit>
	...

0800856c <__errno>:
 800856c:	4b01      	ldr	r3, [pc, #4]	; (8008574 <__errno+0x8>)
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000010 	.word	0x20000010

08008578 <__libc_init_array>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	4e0d      	ldr	r6, [pc, #52]	; (80085b0 <__libc_init_array+0x38>)
 800857c:	4c0d      	ldr	r4, [pc, #52]	; (80085b4 <__libc_init_array+0x3c>)
 800857e:	1ba4      	subs	r4, r4, r6
 8008580:	10a4      	asrs	r4, r4, #2
 8008582:	2500      	movs	r5, #0
 8008584:	42a5      	cmp	r5, r4
 8008586:	d109      	bne.n	800859c <__libc_init_array+0x24>
 8008588:	4e0b      	ldr	r6, [pc, #44]	; (80085b8 <__libc_init_array+0x40>)
 800858a:	4c0c      	ldr	r4, [pc, #48]	; (80085bc <__libc_init_array+0x44>)
 800858c:	f000 f888 	bl	80086a0 <_init>
 8008590:	1ba4      	subs	r4, r4, r6
 8008592:	10a4      	asrs	r4, r4, #2
 8008594:	2500      	movs	r5, #0
 8008596:	42a5      	cmp	r5, r4
 8008598:	d105      	bne.n	80085a6 <__libc_init_array+0x2e>
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085a0:	4798      	blx	r3
 80085a2:	3501      	adds	r5, #1
 80085a4:	e7ee      	b.n	8008584 <__libc_init_array+0xc>
 80085a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085aa:	4798      	blx	r3
 80085ac:	3501      	adds	r5, #1
 80085ae:	e7f2      	b.n	8008596 <__libc_init_array+0x1e>
 80085b0:	080087c8 	.word	0x080087c8
 80085b4:	080087c8 	.word	0x080087c8
 80085b8:	080087c8 	.word	0x080087c8
 80085bc:	080087d0 	.word	0x080087d0

080085c0 <memcpy>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	1e43      	subs	r3, r0, #1
 80085c4:	440a      	add	r2, r1
 80085c6:	4291      	cmp	r1, r2
 80085c8:	d100      	bne.n	80085cc <memcpy+0xc>
 80085ca:	bd10      	pop	{r4, pc}
 80085cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d4:	e7f7      	b.n	80085c6 <memcpy+0x6>

080085d6 <memmove>:
 80085d6:	4288      	cmp	r0, r1
 80085d8:	b510      	push	{r4, lr}
 80085da:	eb01 0302 	add.w	r3, r1, r2
 80085de:	d807      	bhi.n	80085f0 <memmove+0x1a>
 80085e0:	1e42      	subs	r2, r0, #1
 80085e2:	4299      	cmp	r1, r3
 80085e4:	d00a      	beq.n	80085fc <memmove+0x26>
 80085e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80085ee:	e7f8      	b.n	80085e2 <memmove+0xc>
 80085f0:	4283      	cmp	r3, r0
 80085f2:	d9f5      	bls.n	80085e0 <memmove+0xa>
 80085f4:	1881      	adds	r1, r0, r2
 80085f6:	1ad2      	subs	r2, r2, r3
 80085f8:	42d3      	cmn	r3, r2
 80085fa:	d100      	bne.n	80085fe <memmove+0x28>
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008602:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008606:	e7f7      	b.n	80085f8 <memmove+0x22>

08008608 <memset>:
 8008608:	4402      	add	r2, r0
 800860a:	4603      	mov	r3, r0
 800860c:	4293      	cmp	r3, r2
 800860e:	d100      	bne.n	8008612 <memset+0xa>
 8008610:	4770      	bx	lr
 8008612:	f803 1b01 	strb.w	r1, [r3], #1
 8008616:	e7f9      	b.n	800860c <memset+0x4>

08008618 <_raise_r>:
 8008618:	291f      	cmp	r1, #31
 800861a:	b538      	push	{r3, r4, r5, lr}
 800861c:	4604      	mov	r4, r0
 800861e:	460d      	mov	r5, r1
 8008620:	d904      	bls.n	800862c <_raise_r+0x14>
 8008622:	2316      	movs	r3, #22
 8008624:	6003      	str	r3, [r0, #0]
 8008626:	f04f 30ff 	mov.w	r0, #4294967295
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800862e:	b112      	cbz	r2, 8008636 <_raise_r+0x1e>
 8008630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008634:	b94b      	cbnz	r3, 800864a <_raise_r+0x32>
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f830 	bl	800869c <_getpid_r>
 800863c:	462a      	mov	r2, r5
 800863e:	4601      	mov	r1, r0
 8008640:	4620      	mov	r0, r4
 8008642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008646:	f000 b817 	b.w	8008678 <_kill_r>
 800864a:	2b01      	cmp	r3, #1
 800864c:	d00a      	beq.n	8008664 <_raise_r+0x4c>
 800864e:	1c59      	adds	r1, r3, #1
 8008650:	d103      	bne.n	800865a <_raise_r+0x42>
 8008652:	2316      	movs	r3, #22
 8008654:	6003      	str	r3, [r0, #0]
 8008656:	2001      	movs	r0, #1
 8008658:	e7e7      	b.n	800862a <_raise_r+0x12>
 800865a:	2400      	movs	r4, #0
 800865c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008660:	4628      	mov	r0, r5
 8008662:	4798      	blx	r3
 8008664:	2000      	movs	r0, #0
 8008666:	e7e0      	b.n	800862a <_raise_r+0x12>

08008668 <raise>:
 8008668:	4b02      	ldr	r3, [pc, #8]	; (8008674 <raise+0xc>)
 800866a:	4601      	mov	r1, r0
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	f7ff bfd3 	b.w	8008618 <_raise_r>
 8008672:	bf00      	nop
 8008674:	20000010 	.word	0x20000010

08008678 <_kill_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4c07      	ldr	r4, [pc, #28]	; (8008698 <_kill_r+0x20>)
 800867c:	2300      	movs	r3, #0
 800867e:	4605      	mov	r5, r0
 8008680:	4608      	mov	r0, r1
 8008682:	4611      	mov	r1, r2
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	f7f9 f8ec 	bl	8001862 <_kill>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	d102      	bne.n	8008694 <_kill_r+0x1c>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	b103      	cbz	r3, 8008694 <_kill_r+0x1c>
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	2000360c 	.word	0x2000360c

0800869c <_getpid_r>:
 800869c:	f7f9 b8d9 	b.w	8001852 <_getpid>

080086a0 <_init>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	bf00      	nop
 80086a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a6:	bc08      	pop	{r3}
 80086a8:	469e      	mov	lr, r3
 80086aa:	4770      	bx	lr

080086ac <_fini>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr
