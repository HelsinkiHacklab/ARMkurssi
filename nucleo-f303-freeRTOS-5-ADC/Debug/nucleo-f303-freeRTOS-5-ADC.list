
nucleo-f303-freeRTOS-5-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008768  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800899c  0800899c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800899c  0800899c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800899c  0800899c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089a0  080089a0  000189a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080089a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000200c  20000080  08008a24  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000208c  08008a24  0002208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d18d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036c2  00000000  00000000  0003d23d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  00040900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001498  00000000  00000000  00041f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022453  00000000  00000000  000433c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134c4  00000000  00000000  0006581b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2fc8  00000000  00000000  00078cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bca7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006018  00000000  00000000  0013bd24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080088f0 	.word	0x080088f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080088f0 	.word	0x080088f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_ADC_ConvCpltCallback>:
static 	SemaphoreHandle_t adcSema;
BaseType_t hiPrioTaskWoken;
static uint16_t adBuffer[ADCBUFFERLEN+8];

// Muunnos valmis
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	if ( HAL_OK != HAL_ADC_Stop_DMA( hadc ) ) {
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f001 f803 	bl	80012a4 <HAL_ADC_Stop_DMA>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <HAL_ADC_ConvCpltCallback+0x18>
		Error_Handler();
 80002a4:	f000 fab6 	bl	8000814 <Error_Handler>
	}
	xSemaphoreGiveFromISR( adcSema, &hiPrioTaskWoken );
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <HAL_ADC_ConvCpltCallback+0x44>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	490a      	ldr	r1, [pc, #40]	; (80002d8 <HAL_ADC_ConvCpltCallback+0x48>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	f005 fc26 	bl	8005b00 <xQueueGiveFromISR>
	if ( hiPrioTaskWoken ) taskYIELD();
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <HAL_ADC_ConvCpltCallback+0x48>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d007      	beq.n	80002cc <HAL_ADC_ConvCpltCallback+0x3c>
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <HAL_ADC_ConvCpltCallback+0x4c>)
 80002be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	f3bf 8f4f 	dsb	sy
 80002c8:	f3bf 8f6f 	isb	sy
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000009c 	.word	0x2000009c
 80002d8:	20002000 	.word	0x20002000
 80002dc:	e000ed04 	.word	0xe000ed04

080002e0 <ADCTask>:

// A/D-muunnostaski
void ADCTask( void *pvParameters ) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc;
	DMA_HandleTypeDef *hdma_adc;
	QueueHandle_t qh;
	uint32_t avg;
	ADCTaskParams p;
	hadc = ((ADCTaskParams *)pvParameters)->phadc;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	623b      	str	r3, [r7, #32]
	hdma_adc = ((ADCTaskParams *)pvParameters)->phdma_adc;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	61fb      	str	r3, [r7, #28]
	qh = ((ADCTaskParams *)pvParameters)->qh;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	61bb      	str	r3, [r7, #24]

	// Luodaan synkronointisemafori
	adcSema = xSemaphoreCreateBinary();
 80002fa:	2203      	movs	r2, #3
 80002fc:	2100      	movs	r1, #0
 80002fe:	2001      	movs	r0, #1
 8000300:	f005 fa10 	bl	8005724 <xQueueGenericCreate>
 8000304:	4602      	mov	r2, r0
 8000306:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <ADCTask+0xc0>)
 8000308:	601a      	str	r2, [r3, #0]

	// Kalibroidaan A/D -muunnin
	if ( HAL_OK != HAL_ADCEx_Calibration_Start( hadc, ADC_SINGLE_ENDED ) ) {
 800030a:	2100      	movs	r1, #0
 800030c:	6a38      	ldr	r0, [r7, #32]
 800030e:	f001 fb37 	bl	8001980 <HAL_ADCEx_Calibration_Start>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <ADCTask+0x3c>
		Error_Handler();
 8000318:	f000 fa7c 	bl	8000814 <Error_Handler>
	}

	// Käynnistetään 1. muunnoskierros
	if ( HAL_OK != HAL_ADC_Start_DMA(hadc, (uint16_t *)adBuffer, ADCBUFFERLEN ) ) {
 800031c:	2208      	movs	r2, #8
 800031e:	4921      	ldr	r1, [pc, #132]	; (80003a4 <ADCTask+0xc4>)
 8000320:	6a38      	ldr	r0, [r7, #32]
 8000322:	f000 fea3 	bl	800106c <HAL_ADC_Start_DMA>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <ADCTask+0x50>
		Error_Handler();
 800032c:	f000 fa72 	bl	8000814 <Error_Handler>
	}

	while ( 1 ) {

		// odotetaan että muunnoskierros tulee valmiiksi
		xSemaphoreTake( adcSema, portMAX_DELAY );
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <ADCTask+0xc0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f04f 31ff 	mov.w	r1, #4294967295
 8000338:	4618      	mov	r0, r3
 800033a:	f005 fd47 	bl	8005dcc <xQueueSemaphoreTake>
		// lasketaan näytepuskurin keskiarvo...
		avg = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
		for ( uint8_t cnt = 0; cnt < ADCBUFFERLEN; cnt++ ) {
 8000342:	2300      	movs	r3, #0
 8000344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000348:	e00d      	b.n	8000366 <ADCTask+0x86>
			avg += adBuffer[cnt];
 800034a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800034e:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <ADCTask+0xc4>)
 8000350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000354:	461a      	mov	r2, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	4413      	add	r3, r2
 800035a:	617b      	str	r3, [r7, #20]
		for ( uint8_t cnt = 0; cnt < ADCBUFFERLEN; cnt++ ) {
 800035c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000360:	3301      	adds	r3, #1
 8000362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800036a:	2b07      	cmp	r3, #7
 800036c:	d9ed      	bls.n	800034a <ADCTask+0x6a>
		}
		avg /= ADCBUFFERLEN;
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	08db      	lsrs	r3, r3, #3
 8000372:	617b      	str	r3, [r7, #20]

		// ... ja lähetetään se UI-taskille näytettäväksi
		xQueueSendToBack( qh, &avg, portMAX_DELAY );
 8000374:	f107 0114 	add.w	r1, r7, #20
 8000378:	2300      	movs	r3, #0
 800037a:	f04f 32ff 	mov.w	r2, #4294967295
 800037e:	69b8      	ldr	r0, [r7, #24]
 8000380:	f005 fa30 	bl	80057e4 <xQueueGenericSend>

		// odotellaan hetki ja käynnistetään seuraava kierros
		vTaskDelay(100);
 8000384:	2064      	movs	r0, #100	; 0x64
 8000386:	f006 f8fd 	bl	8006584 <vTaskDelay>
		if ( HAL_OK != HAL_ADC_Start_DMA(hadc, (uint16_t *)adBuffer, ADCBUFFERLEN ) ) {
 800038a:	2208      	movs	r2, #8
 800038c:	4905      	ldr	r1, [pc, #20]	; (80003a4 <ADCTask+0xc4>)
 800038e:	6a38      	ldr	r0, [r7, #32]
 8000390:	f000 fe6c 	bl	800106c <HAL_ADC_Start_DMA>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0ca      	beq.n	8000330 <ADCTask+0x50>
			Error_Handler();
 800039a:	f000 fa3b 	bl	8000814 <Error_Handler>
		xSemaphoreTake( adcSema, portMAX_DELAY );
 800039e:	e7c7      	b.n	8000330 <ADCTask+0x50>
 80003a0:	2000009c 	.word	0x2000009c
 80003a4:	200000a0 	.word	0x200000a0

080003a8 <_Z6UITaskPv>:
	.phadc = &hadc1,
	.phdma_adc = &hdma_adc1,
};


void UITask( void *pvParameters ) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08e      	sub	sp, #56	; 0x38
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	QueueHandle_t qh;
	uint32_t val;
	uint8_t txtBuf[40];

	qh = (QueueHandle_t)pvParameters;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	637b      	str	r3, [r7, #52]	; 0x34
	while ( 1 ) {
		xQueueReceive(qh, &val, portMAX_DELAY );
 80003b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003b8:	f04f 32ff 	mov.w	r2, #4294967295
 80003bc:	4619      	mov	r1, r3
 80003be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80003c0:	f005 fc28 	bl	8005c14 <xQueueReceive>
	    sprintf((char *)txtBuf, "%.4d\r\n", val);
 80003c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	4909      	ldr	r1, [pc, #36]	; (80003f0 <_Z6UITaskPv+0x48>)
 80003cc:	4618      	mov	r0, r3
 80003ce:	f007 fe93 	bl	80080f8 <siprintf>
	    HAL_UART_Transmit(&huart2, txtBuf, strlen((char *)txtBuf), HAL_MAX_DELAY);
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ff02 	bl	80001e0 <strlen>
 80003dc:	4603      	mov	r3, r0
 80003de:	b29a      	uxth	r2, r3
 80003e0:	f107 0108 	add.w	r1, r7, #8
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295
 80003e8:	4802      	ldr	r0, [pc, #8]	; (80003f4 <_Z6UITaskPv+0x4c>)
 80003ea:	f004 fbc9 	bl	8004b80 <HAL_UART_Transmit>
		xQueueReceive(qh, &val, portMAX_DELAY );
 80003ee:	e7e1      	b.n	80003b4 <_Z6UITaskPv+0xc>
 80003f0:	08008908 	.word	0x08008908
 80003f4:	20000154 	.word	0x20000154

080003f8 <main>:
	}
}
int main(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af04      	add	r7, sp, #16
	HAL_Init();
 80003fe:	f000 fbe7 	bl	8000bd0 <HAL_Init>
	SystemClock_Config();
 8000402:	f000 f84d 	bl	80004a0 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000406:	f000 f98b 	bl	8000720 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 800040a:	f000 f96b 	bl	80006e4 <_ZL11MX_DMA_Initv>
	MX_USART2_UART_Init();
 800040e:	f000 f935 	bl	800067c <_ZL19MX_USART2_UART_Initv>
	MX_ADC1_Init();
 8000412:	f000 f8b3 	bl	800057c <_ZL12MX_ADC1_Initv>

	qh = xQueueCreateStatic(2, sizeof(uint32_t), QueueStorage, &QueueBuffer);
 8000416:	2300      	movs	r3, #0
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <main+0x78>)
 800041c:	4a15      	ldr	r2, [pc, #84]	; (8000474 <main+0x7c>)
 800041e:	2104      	movs	r1, #4
 8000420:	2002      	movs	r0, #2
 8000422:	f005 f90d 	bl	8005640 <xQueueGenericCreateStatic>
 8000426:	4602      	mov	r2, r0
 8000428:	4b13      	ldr	r3, [pc, #76]	; (8000478 <main+0x80>)
 800042a:	601a      	str	r2, [r3, #0]
	ADCParams.qh = qh;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <main+0x80>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a12      	ldr	r2, [pc, #72]	; (800047c <main+0x84>)
 8000432:	6093      	str	r3, [r2, #8]
	xTaskCreateStatic( ADCTask, (const char *)"ADC", TASKSTACKDEPTH, &ADCParams, tskIDLE_PRIORITY+1, stackADC, &tcbADC );
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <main+0x88>)
 8000436:	9302      	str	r3, [sp, #8]
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <main+0x8c>)
 800043a:	9301      	str	r3, [sp, #4]
 800043c:	2301      	movs	r3, #1
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <main+0x84>)
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	4910      	ldr	r1, [pc, #64]	; (8000488 <main+0x90>)
 8000446:	4811      	ldr	r0, [pc, #68]	; (800048c <main+0x94>)
 8000448:	f005 ff4c 	bl	80062e4 <xTaskCreateStatic>
	xTaskCreateStatic( UITask, (const char *)"UI", TASKSTACKDEPTH, qh, tskIDLE_PRIORITY+1, stackUI, &tcbUI );
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <main+0x80>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <main+0x98>)
 8000452:	9302      	str	r3, [sp, #8]
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <main+0x9c>)
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	2301      	movs	r3, #1
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	4613      	mov	r3, r2
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	490d      	ldr	r1, [pc, #52]	; (8000498 <main+0xa0>)
 8000462:	480e      	ldr	r0, [pc, #56]	; (800049c <main+0xa4>)
 8000464:	f005 ff3e 	bl	80062e4 <xTaskCreateStatic>

	vTaskStartScheduler();
 8000468:	f006 f8c0 	bl	80065ec <vTaskStartScheduler>

	while (1) {
 800046c:	e7fe      	b.n	800046c <main+0x74>
 800046e:	bf00      	nop
 8000470:	2000069c 	.word	0x2000069c
 8000474:	2000068c 	.word	0x2000068c
 8000478:	200006ec 	.word	0x200006ec
 800047c:	20000000 	.word	0x20000000
 8000480:	200003d4 	.word	0x200003d4
 8000484:	200001d4 	.word	0x200001d4
 8000488:	08008910 	.word	0x08008910
 800048c:	080002e1 	.word	0x080002e1
 8000490:	20000630 	.word	0x20000630
 8000494:	20000430 	.word	0x20000430
 8000498:	08008914 	.word	0x08008914
 800049c:	080003a9 	.word	0x080003a9

080004a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b0a6      	sub	sp, #152	; 0x98
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004aa:	2228      	movs	r2, #40	; 0x28
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f007 fe19 	bl	80080e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2258      	movs	r2, #88	; 0x58
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f007 fe0b 	bl	80080e6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d0:	2302      	movs	r3, #2
 80004d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d4:	2301      	movs	r3, #1
 80004d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d8:	2310      	movs	r3, #16
 80004da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004de:	2302      	movs	r3, #2
 80004e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fcf0 	bl	8002ee4 <HAL_RCC_OscConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf14      	ite	ne
 800050a:	2301      	movne	r3, #1
 800050c:	2300      	moveq	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000514:	f000 f97e 	bl	8000814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051c:	2302      	movs	r3, #2
 800051e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000528:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000532:	2102      	movs	r1, #2
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fbeb 	bl	8003d10 <HAL_RCC_ClockConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800054a:	f000 f963 	bl	8000814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800054e:	2302      	movs	r3, #2
 8000550:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f003 fe41 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800056e:	f000 f951 	bl	8000814 <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3798      	adds	r7, #152	; 0x98
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800059e:	4b36      	ldr	r3, [pc, #216]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a6:	4b34      	ldr	r3, [pc, #208]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ae:	4b32      	ldr	r3, [pc, #200]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b4:	4b30      	ldr	r3, [pc, #192]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ba:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005bc:	2201      	movs	r2, #1
 80005be:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ce:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005dc:	2201      	movs	r2, #1
 80005de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fa:	481f      	ldr	r0, [pc, #124]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 80005fc:	f000 fb3c 	bl	8000c78 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf14      	ite	ne
 8000606:	2301      	movne	r3, #1
 8000608:	2300      	moveq	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <_ZL12MX_ADC1_Initv+0x98>
  {
    Error_Handler();
 8000610:	f000 f900 	bl	8000814 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4816      	ldr	r0, [pc, #88]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 8000620:	f001 fd2c 	bl	800207c <HAL_ADCEx_MultiModeConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf14      	ite	ne
 800062a:	2301      	movne	r3, #1
 800062c:	2300      	moveq	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <_ZL12MX_ADC1_Initv+0xbc>
  {
    Error_Handler();
 8000634:	f000 f8ee 	bl	8000814 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000638:	2301      	movs	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063c:	2301      	movs	r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000644:	2307      	movs	r3, #7
 8000646:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <_ZL12MX_ADC1_Initv+0xfc>)
 8000656:	f001 fa25 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf14      	ite	ne
 8000660:	2301      	movne	r3, #1
 8000662:	2300      	moveq	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <_ZL12MX_ADC1_Initv+0xf2>
  {
    Error_Handler();
 800066a:	f000 f8d3 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000c0 	.word	0x200000c0

0800067c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 8000688:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4807      	ldr	r0, [pc, #28]	; (80006dc <_ZL19MX_USART2_UART_Initv+0x60>)
 80006c0:	f004 fa10 	bl	8004ae4 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf14      	ite	ne
 80006ca:	2301      	movne	r3, #1
 80006cc:	2300      	moveq	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80006d4:	f000 f89e 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000154 	.word	0x20000154
 80006e0:	40004400 	.word	0x40004400

080006e4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <_ZL11MX_DMA_Initv+0x38>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <_ZL11MX_DMA_Initv+0x38>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <_ZL11MX_DMA_Initv+0x38>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2105      	movs	r1, #5
 8000706:	200b      	movs	r0, #11
 8000708:	f002 f834 	bl	8002774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800070c:	200b      	movs	r0, #11
 800070e:	f002 f84d 	bl	80027ac <HAL_NVIC_EnableIRQ>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 800073c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 8000784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <_ZL12MX_GPIO_Initv+0xc4>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f002 fb89 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <_ZL12MX_GPIO_Initv+0xcc>)
 80007b8:	f002 f9f2 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007bc:	2320      	movs	r3, #32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f002 f9e3 	bl	8002ba0 <HAL_GPIO_Init>

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	10210000 	.word	0x10210000
 80007ec:	48000800 	.word	0x48000800

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 f9fb 	bl	8000bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40001000 	.word	0x40001000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_MspInit+0x4c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_MspInit+0x4c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_MspInit+0x4c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f001 ff87 	bl	8002774 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000894:	d154      	bne.n	8000940 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <HAL_ADC_MspInit+0xd4>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a2b      	ldr	r2, [pc, #172]	; (8000948 <HAL_ADC_MspInit+0xd4>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <HAL_ADC_MspInit+0xd4>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <HAL_ADC_MspInit+0xd4>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a25      	ldr	r2, [pc, #148]	; (8000948 <HAL_ADC_MspInit+0xd4>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <HAL_ADC_MspInit+0xd4>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c6:	2301      	movs	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f002 f960 	bl	8002ba0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <HAL_ADC_MspInit+0xd8>)
 80008e2:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <HAL_ADC_MspInit+0xdc>)
 80008e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_ADC_MspInit+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_ADC_MspInit+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_ADC_MspInit+0xd8>)
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_ADC_MspInit+0xd8>)
 80008fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_ADC_MspInit+0xd8>)
 8000902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000906:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_ADC_MspInit+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_ADC_MspInit+0xd8>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <HAL_ADC_MspInit+0xd8>)
 8000916:	f001 ff57 	bl	80027c8 <HAL_DMA_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000920:	f7ff ff78 	bl	8000814 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <HAL_ADC_MspInit+0xd8>)
 8000928:	639a      	str	r2, [r3, #56]	; 0x38
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_ADC_MspInit+0xd8>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2105      	movs	r1, #5
 8000934:	2012      	movs	r0, #18
 8000936:	f001 ff1d 	bl	8002774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800093a:	2012      	movs	r0, #18
 800093c:	f001 ff36 	bl	80027ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	20000110 	.word	0x20000110
 8000950:	40020008 	.word	0x40020008

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_UART_MspInit+0x7c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d128      	bne.n	80009c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <HAL_UART_MspInit+0x80>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6153      	str	r3, [r2, #20]
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_UART_MspInit+0x80>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f002 f8ec 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	2036      	movs	r0, #54	; 0x36
 80009ee:	f001 fec1 	bl	8002774 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80009f2:	2036      	movs	r0, #54	; 0x36
 80009f4:	f001 feda 	bl	80027ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <HAL_InitTick+0xa0>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <HAL_InitTick+0xa0>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	61d3      	str	r3, [r2, #28]
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_InitTick+0xa0>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a10:	f107 0210 	add.w	r2, r7, #16
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fbae 	bl	800417c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a20:	f003 fb68 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8000a24:	4603      	mov	r3, r0
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <HAL_InitTick+0xa4>)
 8000a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a32:	0c9b      	lsrs	r3, r3, #18
 8000a34:	3b01      	subs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <HAL_InitTick+0xac>)
 8000a3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a5a:	f003 fddf 	bl	800461c <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d104      	bne.n	8000a6e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a66:	f003 fe0f 	bl	8004688 <HAL_TIM_Base_Start_IT>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3730      	adds	r7, #48	; 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	431bde83 	.word	0x431bde83
 8000a80:	20002004 	.word	0x20002004
 8000a84:	40001000 	.word	0x40001000

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <DMA1_Channel1_IRQHandler+0x10>)
 8000ac2:	f001 ff60 	bl	8002986 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000110 	.word	0x20000110

08000ad0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <ADC1_2_IRQHandler+0x10>)
 8000ad6:	f000 fc47 	bl	8001368 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000c0 	.word	0x200000c0

08000ae4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <TIM6_DAC_IRQHandler+0x10>)
 8000aea:	f003 fdf7 	bl	80046dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20002004 	.word	0x20002004

08000af8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x50>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x16>
		heap_end = &end;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <_sbrk+0x50>)
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <_sbrk+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <_sbrk+0x50>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <_sbrk+0x50>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	466a      	mov	r2, sp
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d907      	bls.n	8000b32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b22:	f007 faab 	bl	800807c <__errno>
 8000b26:	4602      	mov	r2, r0
 8000b28:	230c      	movs	r3, #12
 8000b2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	e006      	b.n	8000b40 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <_sbrk+0x50>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <_sbrk+0x50>)
 8000b3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200006f0 	.word	0x200006f0
 8000b4c:	20002090 	.word	0x20002090

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <SystemInit+0x28>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <SystemInit+0x28>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SystemInit+0x28>)
 8000b66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b82:	e003      	b.n	8000b8c <LoopCopyDataInit>

08000b84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b8a:	3104      	adds	r1, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b94:	d3f6      	bcc.n	8000b84 <CopyDataInit>
	ldr	r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b98:	e002      	b.n	8000ba0 <LoopFillZerobss>

08000b9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b9c:	f842 3b04 	str.w	r3, [r2], #4

08000ba0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ba2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ba4:	d3f9      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ffd3 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f007 fa6d 	bl	8008088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fc23 	bl	80003f8 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000bb8:	080089a4 	.word	0x080089a4
	ldr	r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bc0:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000bc4:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8000bc8:	2000208c 	.word	0x2000208c

08000bcc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC3_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x28>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x28>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f001 fdbc 	bl	800275e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fef6 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe1a 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000014 	.word	0x20000014
 8000c20:	20002044 	.word	0x20002044

08000c24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20002044 	.word	0x20002044

08000c3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09a      	sub	sp, #104	; 0x68
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e1e3      	b.n	8001060 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d176      	bne.n	8000d98 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d152      	bne.n	8000d58 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fdd1 	bl	8000874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d13b      	bne.n	8000d58 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f001 fb81 	bl	80023e8 <ADC_Disable>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d12f      	bne.n	8000d58 <HAL_ADC_Init+0xe0>
 8000cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d12b      	bne.n	8000d58 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d08:	f023 0302 	bic.w	r3, r3, #2
 8000d0c:	f043 0202 	orr.w	r2, r3, #2
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d22:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d32:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d34:	4b92      	ldr	r3, [pc, #584]	; (8000f80 <HAL_ADC_Init+0x308>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a92      	ldr	r2, [pc, #584]	; (8000f84 <HAL_ADC_Init+0x30c>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	0c9a      	lsrs	r2, r3, #18
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d4a:	e002      	b.n	8000d52 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f9      	bne.n	8000d4c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d74:	d110      	bne.n	8000d98 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f023 0312 	bic.w	r3, r3, #18
 8000d7e:	f043 0210 	orr.w	r2, r3, #16
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f043 0201 	orr.w	r2, r3, #1
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f040 8150 	bne.w	8001046 <HAL_ADC_Init+0x3ce>
 8000da6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 814b 	bne.w	8001046 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 8143 	bne.w	8001046 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000dc8:	f043 0202 	orr.w	r2, r3, #2
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dd8:	d004      	beq.n	8000de4 <HAL_ADC_Init+0x16c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a6a      	ldr	r2, [pc, #424]	; (8000f88 <HAL_ADC_Init+0x310>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d101      	bne.n	8000de8 <HAL_ADC_Init+0x170>
 8000de4:	4b69      	ldr	r3, [pc, #420]	; (8000f8c <HAL_ADC_Init+0x314>)
 8000de6:	e000      	b.n	8000dea <HAL_ADC_Init+0x172>
 8000de8:	4b69      	ldr	r3, [pc, #420]	; (8000f90 <HAL_ADC_Init+0x318>)
 8000dea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df4:	d102      	bne.n	8000dfc <HAL_ADC_Init+0x184>
 8000df6:	4b64      	ldr	r3, [pc, #400]	; (8000f88 <HAL_ADC_Init+0x310>)
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	e01a      	b.n	8000e32 <HAL_ADC_Init+0x1ba>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a61      	ldr	r2, [pc, #388]	; (8000f88 <HAL_ADC_Init+0x310>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d103      	bne.n	8000e0e <HAL_ADC_Init+0x196>
 8000e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e011      	b.n	8000e32 <HAL_ADC_Init+0x1ba>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a60      	ldr	r2, [pc, #384]	; (8000f94 <HAL_ADC_Init+0x31c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d102      	bne.n	8000e1e <HAL_ADC_Init+0x1a6>
 8000e18:	4b5f      	ldr	r3, [pc, #380]	; (8000f98 <HAL_ADC_Init+0x320>)
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e009      	b.n	8000e32 <HAL_ADC_Init+0x1ba>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a5d      	ldr	r2, [pc, #372]	; (8000f98 <HAL_ADC_Init+0x320>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d102      	bne.n	8000e2e <HAL_ADC_Init+0x1b6>
 8000e28:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <HAL_ADC_Init+0x31c>)
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e001      	b.n	8000e32 <HAL_ADC_Init+0x1ba>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d108      	bne.n	8000e52 <HAL_ADC_Init+0x1da>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d101      	bne.n	8000e52 <HAL_ADC_Init+0x1da>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <HAL_ADC_Init+0x1dc>
 8000e52:	2300      	movs	r3, #0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d11c      	bne.n	8000e92 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e58:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d010      	beq.n	8000e80 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d107      	bne.n	8000e7a <HAL_ADC_Init+0x202>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_Init+0x202>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_ADC_Init+0x204>
 8000e7a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d108      	bne.n	8000e92 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e90:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7e5b      	ldrb	r3, [r3, #25]
 8000e96:	035b      	lsls	r3, r3, #13
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e9c:	2a01      	cmp	r2, #1
 8000e9e:	d002      	beq.n	8000ea6 <HAL_ADC_Init+0x22e>
 8000ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea4:	e000      	b.n	8000ea8 <HAL_ADC_Init+0x230>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d11b      	bne.n	8000efe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7e5b      	ldrb	r3, [r3, #25]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	045a      	lsls	r2, r3, #17
 8000ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ede:	663b      	str	r3, [r7, #96]	; 0x60
 8000ee0:	e00d      	b.n	8000efe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000eea:	f043 0220 	orr.w	r2, r3, #32
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f043 0201 	orr.w	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d054      	beq.n	8000fb0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_ADC_Init+0x31c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d004      	beq.n	8000f1a <HAL_ADC_Init+0x2a2>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <HAL_ADC_Init+0x320>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d140      	bne.n	8000f9c <HAL_ADC_Init+0x324>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000f22:	d02a      	beq.n	8000f7a <HAL_ADC_Init+0x302>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f2c:	d022      	beq.n	8000f74 <HAL_ADC_Init+0x2fc>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000f36:	d01a      	beq.n	8000f6e <HAL_ADC_Init+0x2f6>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000f40:	d012      	beq.n	8000f68 <HAL_ADC_Init+0x2f0>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000f4a:	d00a      	beq.n	8000f62 <HAL_ADC_Init+0x2ea>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f50:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000f54:	d002      	beq.n	8000f5c <HAL_ADC_Init+0x2e4>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	e023      	b.n	8000fa4 <HAL_ADC_Init+0x32c>
 8000f5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f60:	e020      	b.n	8000fa4 <HAL_ADC_Init+0x32c>
 8000f62:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f66:	e01d      	b.n	8000fa4 <HAL_ADC_Init+0x32c>
 8000f68:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f6c:	e01a      	b.n	8000fa4 <HAL_ADC_Init+0x32c>
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	e017      	b.n	8000fa4 <HAL_ADC_Init+0x32c>
 8000f74:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000f78:	e014      	b.n	8000fa4 <HAL_ADC_Init+0x32c>
 8000f7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f7e:	e011      	b.n	8000fa4 <HAL_ADC_Init+0x32c>
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	431bde83 	.word	0x431bde83
 8000f88:	50000100 	.word	0x50000100
 8000f8c:	50000300 	.word	0x50000300
 8000f90:	50000700 	.word	0x50000700
 8000f94:	50000400 	.word	0x50000400
 8000f98:	50000500 	.word	0x50000500
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fac:	4313      	orrs	r3, r2
 8000fae:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d114      	bne.n	8000fe8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fcc:	f023 0302 	bic.w	r3, r3, #2
 8000fd0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7e1b      	ldrb	r3, [r3, #24]
 8000fd6:	039a      	lsls	r2, r3, #14
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_ADC_Init+0x3f0>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d10c      	bne.n	800101e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f023 010f 	bic.w	r1, r3, #15
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	430a      	orrs	r2, r1
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
 800101c:	e007      	b.n	800102e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 020f 	bic.w	r2, r2, #15
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f023 0303 	bic.w	r3, r3, #3
 800103c:	f043 0201 	orr.w	r2, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
 8001044:	e00a      	b.n	800105c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f023 0312 	bic.w	r3, r3, #18
 800104e:	f043 0210 	orr.w	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800105c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001060:	4618      	mov	r0, r3
 8001062:	3768      	adds	r7, #104	; 0x68
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	fff0c007 	.word	0xfff0c007

0800106c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	f040 80f7 	bne.w	800127a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_ADC_Start_DMA+0x2e>
 8001096:	2302      	movs	r3, #2
 8001098:	e0f2      	b.n	8001280 <HAL_ADC_Start_DMA+0x214>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010aa:	d004      	beq.n	80010b6 <HAL_ADC_Start_DMA+0x4a>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a75      	ldr	r2, [pc, #468]	; (8001288 <HAL_ADC_Start_DMA+0x21c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d109      	bne.n	80010ca <HAL_ADC_Start_DMA+0x5e>
 80010b6:	4b75      	ldr	r3, [pc, #468]	; (800128c <HAL_ADC_Start_DMA+0x220>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf0c      	ite	eq
 80010c2:	2301      	moveq	r3, #1
 80010c4:	2300      	movne	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	e008      	b.n	80010dc <HAL_ADC_Start_DMA+0x70>
 80010ca:	4b71      	ldr	r3, [pc, #452]	; (8001290 <HAL_ADC_Start_DMA+0x224>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf0c      	ite	eq
 80010d6:	2301      	moveq	r3, #1
 80010d8:	2300      	movne	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80c5 	beq.w	800126c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f001 f922 	bl	800232c <ADC_Enable>
 80010e8:	4603      	mov	r3, r0
 80010ea:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 80b7 	bne.w	8001262 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001110:	d004      	beq.n	800111c <HAL_ADC_Start_DMA+0xb0>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a5c      	ldr	r2, [pc, #368]	; (8001288 <HAL_ADC_Start_DMA+0x21c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d106      	bne.n	800112a <HAL_ADC_Start_DMA+0xbe>
 800111c:	4b5b      	ldr	r3, [pc, #364]	; (800128c <HAL_ADC_Start_DMA+0x220>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	2b00      	cmp	r3, #0
 8001126:	d010      	beq.n	800114a <HAL_ADC_Start_DMA+0xde>
 8001128:	e005      	b.n	8001136 <HAL_ADC_Start_DMA+0xca>
 800112a:	4b59      	ldr	r3, [pc, #356]	; (8001290 <HAL_ADC_Start_DMA+0x224>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_ADC_Start_DMA+0xde>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800113e:	d004      	beq.n	800114a <HAL_ADC_Start_DMA+0xde>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <HAL_ADC_Start_DMA+0x228>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d115      	bne.n	8001176 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d036      	beq.n	80011d2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800116c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001174:	e02d      	b.n	80011d2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118a:	d004      	beq.n	8001196 <HAL_ADC_Start_DMA+0x12a>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <HAL_ADC_Start_DMA+0x21c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10a      	bne.n	80011ac <HAL_ADC_Start_DMA+0x140>
 8001196:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	e008      	b.n	80011be <HAL_ADC_Start_DMA+0x152>
 80011ac:	4b39      	ldr	r3, [pc, #228]	; (8001294 <HAL_ADC_Start_DMA+0x228>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf14      	ite	ne
 80011b8:	2301      	movne	r3, #1
 80011ba:	2300      	moveq	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011de:	d106      	bne.n	80011ee <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	f023 0206 	bic.w	r2, r3, #6
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	645a      	str	r2, [r3, #68]	; 0x44
 80011ec:	e002      	b.n	80011f4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001200:	4a25      	ldr	r2, [pc, #148]	; (8001298 <HAL_ADC_Start_DMA+0x22c>)
 8001202:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001208:	4a24      	ldr	r2, [pc, #144]	; (800129c <HAL_ADC_Start_DMA+0x230>)
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001210:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <HAL_ADC_Start_DMA+0x234>)
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	221c      	movs	r2, #28
 800121a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0210 	orr.w	r2, r2, #16
 800122a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3340      	adds	r3, #64	; 0x40
 8001246:	4619      	mov	r1, r3
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f001 fb03 	bl	8002856 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0204 	orr.w	r2, r2, #4
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	e00d      	b.n	800127e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800126a:	e008      	b.n	800127e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001278:	e001      	b.n	800127e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800127a:	2302      	movs	r3, #2
 800127c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800127e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	50000100 	.word	0x50000100
 800128c:	50000300 	.word	0x50000300
 8001290:	50000700 	.word	0x50000700
 8001294:	50000400 	.word	0x50000400
 8001298:	08002261 	.word	0x08002261
 800129c:	080022db 	.word	0x080022db
 80012a0:	080022f7 	.word	0x080022f7

080012a4 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Stop_DMA+0x1a>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e050      	b.n	8001360 <HAL_ADC_Stop_DMA+0xbc>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80012c6:	216c      	movs	r1, #108	; 0x6c
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f001 f8ed 	bl	80024a8 <ADC_ConversionStop>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d13e      	bne.n	8001356 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    // MPA
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d106      	bne.n	8001302 <HAL_ADC_Stop_DMA+0x5e>
        	tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fb0b 	bl	8002914 <HAL_DMA_Abort>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
//    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
    // MPA
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_ADC_Stop_DMA+0x70>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0210 	bic.w	r2, r2, #16
 8001322:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f001 f85c 	bl	80023e8 <ADC_Disable>
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e002      	b.n	800133c <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f001 f856 	bl	80023e8 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d109      	bne.n	8001356 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b04      	cmp	r3, #4
 8001388:	d106      	bne.n	8001398 <HAL_ADC_IRQHandler+0x30>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b04      	cmp	r3, #4
 8001396:	d00f      	beq.n	80013b8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	f040 80c0 	bne.w	8001528 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	f040 80b8 	bne.w	8001528 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x7c>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a95      	ldr	r2, [pc, #596]	; (8001634 <HAL_ADC_IRQHandler+0x2cc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d106      	bne.n	80013f2 <HAL_ADC_IRQHandler+0x8a>
 80013e4:	4b94      	ldr	r3, [pc, #592]	; (8001638 <HAL_ADC_IRQHandler+0x2d0>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d03e      	beq.n	800146e <HAL_ADC_IRQHandler+0x106>
 80013f0:	e005      	b.n	80013fe <HAL_ADC_IRQHandler+0x96>
 80013f2:	4b92      	ldr	r3, [pc, #584]	; (800163c <HAL_ADC_IRQHandler+0x2d4>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d037      	beq.n	800146e <HAL_ADC_IRQHandler+0x106>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001406:	d004      	beq.n	8001412 <HAL_ADC_IRQHandler+0xaa>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a89      	ldr	r2, [pc, #548]	; (8001634 <HAL_ADC_IRQHandler+0x2cc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d106      	bne.n	8001420 <HAL_ADC_IRQHandler+0xb8>
 8001412:	4b89      	ldr	r3, [pc, #548]	; (8001638 <HAL_ADC_IRQHandler+0x2d0>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2b05      	cmp	r3, #5
 800141c:	d027      	beq.n	800146e <HAL_ADC_IRQHandler+0x106>
 800141e:	e005      	b.n	800142c <HAL_ADC_IRQHandler+0xc4>
 8001420:	4b86      	ldr	r3, [pc, #536]	; (800163c <HAL_ADC_IRQHandler+0x2d4>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2b05      	cmp	r3, #5
 800142a:	d020      	beq.n	800146e <HAL_ADC_IRQHandler+0x106>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001434:	d004      	beq.n	8001440 <HAL_ADC_IRQHandler+0xd8>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a7e      	ldr	r2, [pc, #504]	; (8001634 <HAL_ADC_IRQHandler+0x2cc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d106      	bne.n	800144e <HAL_ADC_IRQHandler+0xe6>
 8001440:	4b7d      	ldr	r3, [pc, #500]	; (8001638 <HAL_ADC_IRQHandler+0x2d0>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	2b09      	cmp	r3, #9
 800144a:	d010      	beq.n	800146e <HAL_ADC_IRQHandler+0x106>
 800144c:	e005      	b.n	800145a <HAL_ADC_IRQHandler+0xf2>
 800144e:	4b7b      	ldr	r3, [pc, #492]	; (800163c <HAL_ADC_IRQHandler+0x2d4>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2b09      	cmp	r3, #9
 8001458:	d009      	beq.n	800146e <HAL_ADC_IRQHandler+0x106>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001462:	d004      	beq.n	800146e <HAL_ADC_IRQHandler+0x106>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a75      	ldr	r2, [pc, #468]	; (8001640 <HAL_ADC_IRQHandler+0x2d8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d104      	bne.n	8001478 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	e00f      	b.n	8001498 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001480:	d004      	beq.n	800148c <HAL_ADC_IRQHandler+0x124>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6b      	ldr	r2, [pc, #428]	; (8001634 <HAL_ADC_IRQHandler+0x2cc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d102      	bne.n	8001492 <HAL_ADC_IRQHandler+0x12a>
 800148c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001490:	e000      	b.n	8001494 <HAL_ADC_IRQHandler+0x12c>
 8001492:	4b6b      	ldr	r3, [pc, #428]	; (8001640 <HAL_ADC_IRQHandler+0x2d8>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d139      	bne.n	800151a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d134      	bne.n	800151a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d12d      	bne.n	800151a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d11a      	bne.n	8001502 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 020c 	bic.w	r2, r2, #12
 80014da:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d112      	bne.n	800151a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001500:	e00b      	b.n	800151a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f043 0210 	orr.w	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe feb8 	bl	8000290 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	220c      	movs	r2, #12
 8001526:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	2b20      	cmp	r3, #32
 8001534:	d106      	bne.n	8001544 <HAL_ADC_IRQHandler+0x1dc>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	2b20      	cmp	r3, #32
 8001542:	d00f      	beq.n	8001564 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800154e:	2b40      	cmp	r3, #64	; 0x40
 8001550:	f040 813c 	bne.w	80017cc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155e:	2b40      	cmp	r3, #64	; 0x40
 8001560:	f040 8134 	bne.w	80017cc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001578:	d004      	beq.n	8001584 <HAL_ADC_IRQHandler+0x21c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <HAL_ADC_IRQHandler+0x2cc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d106      	bne.n	8001592 <HAL_ADC_IRQHandler+0x22a>
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <HAL_ADC_IRQHandler+0x2d0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b00      	cmp	r3, #0
 800158e:	d03e      	beq.n	800160e <HAL_ADC_IRQHandler+0x2a6>
 8001590:	e005      	b.n	800159e <HAL_ADC_IRQHandler+0x236>
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_ADC_IRQHandler+0x2d4>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2b00      	cmp	r3, #0
 800159c:	d037      	beq.n	800160e <HAL_ADC_IRQHandler+0x2a6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a6:	d004      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x24a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_ADC_IRQHandler+0x2cc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d106      	bne.n	80015c0 <HAL_ADC_IRQHandler+0x258>
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_ADC_IRQHandler+0x2d0>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b05      	cmp	r3, #5
 80015bc:	d027      	beq.n	800160e <HAL_ADC_IRQHandler+0x2a6>
 80015be:	e005      	b.n	80015cc <HAL_ADC_IRQHandler+0x264>
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_ADC_IRQHandler+0x2d4>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d020      	beq.n	800160e <HAL_ADC_IRQHandler+0x2a6>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_IRQHandler+0x278>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <HAL_ADC_IRQHandler+0x2cc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d106      	bne.n	80015ee <HAL_ADC_IRQHandler+0x286>
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_ADC_IRQHandler+0x2d0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d010      	beq.n	800160e <HAL_ADC_IRQHandler+0x2a6>
 80015ec:	e005      	b.n	80015fa <HAL_ADC_IRQHandler+0x292>
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_ADC_IRQHandler+0x2d4>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2b09      	cmp	r3, #9
 80015f8:	d009      	beq.n	800160e <HAL_ADC_IRQHandler+0x2a6>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001602:	d004      	beq.n	800160e <HAL_ADC_IRQHandler+0x2a6>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_ADC_IRQHandler+0x2d8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d104      	bne.n	8001618 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e018      	b.n	800164a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001620:	d004      	beq.n	800162c <HAL_ADC_IRQHandler+0x2c4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a03      	ldr	r2, [pc, #12]	; (8001634 <HAL_ADC_IRQHandler+0x2cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d10b      	bne.n	8001644 <HAL_ADC_IRQHandler+0x2dc>
 800162c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001630:	e009      	b.n	8001646 <HAL_ADC_IRQHandler+0x2de>
 8001632:	bf00      	nop
 8001634:	50000100 	.word	0x50000100
 8001638:	50000300 	.word	0x50000300
 800163c:	50000700 	.word	0x50000700
 8001640:	50000400 	.word	0x50000400
 8001644:	4b9d      	ldr	r3, [pc, #628]	; (80018bc <HAL_ADC_IRQHandler+0x554>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80ad 	bne.w	80017be <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 80a5 	bne.w	80017be <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 809f 	bne.w	80017be <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168a:	2b40      	cmp	r3, #64	; 0x40
 800168c:	f040 8097 	bne.w	80017be <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001698:	d004      	beq.n	80016a4 <HAL_ADC_IRQHandler+0x33c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a88      	ldr	r2, [pc, #544]	; (80018c0 <HAL_ADC_IRQHandler+0x558>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d106      	bne.n	80016b2 <HAL_ADC_IRQHandler+0x34a>
 80016a4:	4b87      	ldr	r3, [pc, #540]	; (80018c4 <HAL_ADC_IRQHandler+0x55c>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03e      	beq.n	800172e <HAL_ADC_IRQHandler+0x3c6>
 80016b0:	e005      	b.n	80016be <HAL_ADC_IRQHandler+0x356>
 80016b2:	4b85      	ldr	r3, [pc, #532]	; (80018c8 <HAL_ADC_IRQHandler+0x560>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d037      	beq.n	800172e <HAL_ADC_IRQHandler+0x3c6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c6:	d004      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x36a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a7c      	ldr	r2, [pc, #496]	; (80018c0 <HAL_ADC_IRQHandler+0x558>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d106      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x378>
 80016d2:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_ADC_IRQHandler+0x55c>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d027      	beq.n	800172e <HAL_ADC_IRQHandler+0x3c6>
 80016de:	e005      	b.n	80016ec <HAL_ADC_IRQHandler+0x384>
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <HAL_ADC_IRQHandler+0x560>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	d020      	beq.n	800172e <HAL_ADC_IRQHandler+0x3c6>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f4:	d004      	beq.n	8001700 <HAL_ADC_IRQHandler+0x398>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a71      	ldr	r2, [pc, #452]	; (80018c0 <HAL_ADC_IRQHandler+0x558>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d106      	bne.n	800170e <HAL_ADC_IRQHandler+0x3a6>
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_ADC_IRQHandler+0x55c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2b07      	cmp	r3, #7
 800170a:	d010      	beq.n	800172e <HAL_ADC_IRQHandler+0x3c6>
 800170c:	e005      	b.n	800171a <HAL_ADC_IRQHandler+0x3b2>
 800170e:	4b6e      	ldr	r3, [pc, #440]	; (80018c8 <HAL_ADC_IRQHandler+0x560>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2b07      	cmp	r3, #7
 8001718:	d009      	beq.n	800172e <HAL_ADC_IRQHandler+0x3c6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001722:	d004      	beq.n	800172e <HAL_ADC_IRQHandler+0x3c6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a64      	ldr	r2, [pc, #400]	; (80018bc <HAL_ADC_IRQHandler+0x554>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d104      	bne.n	8001738 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e00f      	b.n	8001758 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001740:	d004      	beq.n	800174c <HAL_ADC_IRQHandler+0x3e4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5e      	ldr	r2, [pc, #376]	; (80018c0 <HAL_ADC_IRQHandler+0x558>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d102      	bne.n	8001752 <HAL_ADC_IRQHandler+0x3ea>
 800174c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001750:	e000      	b.n	8001754 <HAL_ADC_IRQHandler+0x3ec>
 8001752:	4b5a      	ldr	r3, [pc, #360]	; (80018bc <HAL_ADC_IRQHandler+0x554>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d12d      	bne.n	80017be <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11a      	bne.n	80017a6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800177e:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d112      	bne.n	80017be <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
 80017a4:	e00b      	b.n	80017be <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f043 0210 	orr.w	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f043 0201 	orr.w	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f948 	bl	8001a54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2260      	movs	r2, #96	; 0x60
 80017ca:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	2b80      	cmp	r3, #128	; 0x80
 80017d8:	d113      	bne.n	8001802 <HAL_ADC_IRQHandler+0x49a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e4:	2b80      	cmp	r3, #128	; 0x80
 80017e6:	d10c      	bne.n	8001802 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fa2b 	bl	8000c50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001810:	d115      	bne.n	800183e <HAL_ADC_IRQHandler+0x4d6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001820:	d10d      	bne.n	800183e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f924 	bl	8001a7c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184c:	d115      	bne.n	800187a <HAL_ADC_IRQHandler+0x512>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800185c:	d10d      	bne.n	800187a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f910 	bl	8001a90 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001878:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b10      	cmp	r3, #16
 8001886:	d151      	bne.n	800192c <HAL_ADC_IRQHandler+0x5c4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b10      	cmp	r3, #16
 8001894:	d14a      	bne.n	800192c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189a:	2b01      	cmp	r3, #1
 800189c:	d102      	bne.n	80018a4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e02d      	b.n	8001900 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ac:	d004      	beq.n	80018b8 <HAL_ADC_IRQHandler+0x550>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <HAL_ADC_IRQHandler+0x558>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d109      	bne.n	80018cc <HAL_ADC_IRQHandler+0x564>
 80018b8:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <HAL_ADC_IRQHandler+0x55c>)
 80018ba:	e008      	b.n	80018ce <HAL_ADC_IRQHandler+0x566>
 80018bc:	50000400 	.word	0x50000400
 80018c0:	50000100 	.word	0x50000100
 80018c4:	50000300 	.word	0x50000300
 80018c8:	50000700 	.word	0x50000700
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_ADC_IRQHandler+0x614>)
 80018ce:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d10a      	bne.n	8001900 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80018ea:	2301      	movs	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e007      	b.n	8001900 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80018fc:	2301      	movs	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10e      	bne.n	8001924 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f043 0202 	orr.w	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff f9a0 	bl	8000c64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2210      	movs	r2, #16
 800192a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193a:	d11b      	bne.n	8001974 <HAL_ADC_IRQHandler+0x60c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194a:	d113      	bne.n	8001974 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	f043 0208 	orr.w	r2, r3, #8
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f87a 	bl	8001a68 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	50000700 	.word	0x50000700

08001980 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_ADCEx_Calibration_Start+0x1c>
 8001998:	2302      	movs	r3, #2
 800199a:	e057      	b.n	8001a4c <HAL_ADCEx_Calibration_Start+0xcc>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fd1f 	bl	80023e8 <ADC_Disable>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d146      	bne.n	8001a42 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80019c8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019de:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019ee:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80019f0:	f7ff f918 	bl	8000c24 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80019f6:	e014      	b.n	8001a22 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80019f8:	f7ff f914 	bl	8000c24 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d90d      	bls.n	8001a22 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f023 0312 	bic.w	r3, r3, #18
 8001a0e:	f043 0210 	orr.w	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e014      	b.n	8001a4c <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a30:	d0e2      	beq.n	80019f8 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b09b      	sub	sp, #108	; 0x6c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x22>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e2cb      	b.n	800205e <HAL_ADC_ConfigChannel+0x5ba>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f040 82af 	bne.w	800203c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d81c      	bhi.n	8001b20 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	461a      	mov	r2, r3
 8001afa:	231f      	movs	r3, #31
 8001afc:	4093      	lsls	r3, r2
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4019      	ands	r1, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1e:	e063      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b09      	cmp	r3, #9
 8001b26:	d81e      	bhi.n	8001b66 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	3b1e      	subs	r3, #30
 8001b3c:	221f      	movs	r2, #31
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4019      	ands	r1, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	3b1e      	subs	r3, #30
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34
 8001b64:	e040      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b0e      	cmp	r3, #14
 8001b6c:	d81e      	bhi.n	8001bac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3b3c      	subs	r3, #60	; 0x3c
 8001b82:	221f      	movs	r2, #31
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4019      	ands	r1, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	3b3c      	subs	r3, #60	; 0x3c
 8001b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8001baa:	e01d      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	3b5a      	subs	r3, #90	; 0x5a
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4019      	ands	r1, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	3b5a      	subs	r3, #90	; 0x5a
 8001bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80e5 	bne.w	8001dc2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d91c      	bls.n	8001c3a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6999      	ldr	r1, [r3, #24]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	2207      	movs	r2, #7
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4019      	ands	r1, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6898      	ldr	r0, [r3, #8]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b1e      	subs	r3, #30
 8001c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	619a      	str	r2, [r3, #24]
 8001c38:	e019      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6959      	ldr	r1, [r3, #20]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6898      	ldr	r0, [r3, #8]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d84f      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x28c>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001ccb 	.word	0x08001ccb
 8001ca0:	08001ced 	.word	0x08001ced
 8001ca4:	08001d0f 	.word	0x08001d0f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cae:	4b9f      	ldr	r3, [pc, #636]	; (8001f2c <HAL_ADC_ConfigChannel+0x488>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	0691      	lsls	r1, r2, #26
 8001cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cc6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cc8:	e07e      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cd0:	4b96      	ldr	r3, [pc, #600]	; (8001f2c <HAL_ADC_ConfigChannel+0x488>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	0691      	lsls	r1, r2, #26
 8001cda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ce8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cea:	e06d      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cf2:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <HAL_ADC_ConfigChannel+0x488>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	0691      	lsls	r1, r2, #26
 8001cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d0a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d0c:	e05c      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d14:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <HAL_ADC_ConfigChannel+0x488>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	0691      	lsls	r1, r2, #26
 8001d1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d20:	430a      	orrs	r2, r1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d2c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d2e:	e04b      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	069b      	lsls	r3, r3, #26
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d107      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d52:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d76:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	069b      	lsls	r3, r3, #26
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d107      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d9a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	069b      	lsls	r3, r3, #26
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d10a      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dbe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001dc0:	e001      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001dc2:	bf00      	nop
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001dc6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x344>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x344>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_ADC_ConfigChannel+0x346>
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 8131 	bne.w	8002052 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00f      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	400a      	ands	r2, r1
 8001e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e16:	e049      	b.n	8001eac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2201      	movs	r2, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b09      	cmp	r3, #9
 8001e38:	d91c      	bls.n	8001e74 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6999      	ldr	r1, [r3, #24]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b1b      	subs	r3, #27
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4019      	ands	r1, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6898      	ldr	r0, [r3, #8]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	3b1b      	subs	r3, #27
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	619a      	str	r2, [r3, #24]
 8001e72:	e01b      	b.n	8001eac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6959      	ldr	r1, [r3, #20]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	2207      	movs	r2, #7
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb4:	d004      	beq.n	8001ec0 <HAL_ADC_ConfigChannel+0x41c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_ADC_ConfigChannel+0x48c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x420>
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_ADC_ConfigChannel+0x490>)
 8001ec2:	e000      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x422>
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_ADC_ConfigChannel+0x494>)
 8001ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d015      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	f040 80ac 	bne.w	8002052 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 80a5 	bne.w	8002052 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f10:	d102      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x474>
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_ADC_ConfigChannel+0x48c>)
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e023      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x4bc>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_ADC_ConfigChannel+0x48c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10c      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x498>
 8001f22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e01a      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x4bc>
 8001f2a:	bf00      	nop
 8001f2c:	83fff000 	.word	0x83fff000
 8001f30:	50000100 	.word	0x50000100
 8001f34:	50000300 	.word	0x50000300
 8001f38:	50000700 	.word	0x50000700
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_ADC_ConfigChannel+0x5c8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d102      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x4a8>
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_ADC_ConfigChannel+0x5cc>)
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e009      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x4bc>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a47      	ldr	r2, [pc, #284]	; (8002070 <HAL_ADC_ConfigChannel+0x5cc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d102      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x4b8>
 8001f56:	4b45      	ldr	r3, [pc, #276]	; (800206c <HAL_ADC_ConfigChannel+0x5c8>)
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e001      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x4bc>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d108      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x4dc>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x4dc>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x4de>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d150      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d010      	beq.n	8001fae <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x504>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x504>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_ADC_ConfigChannel+0x506>
 8001fa8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d13c      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d11d      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x54e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fbe:	d118      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fca:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_ADC_ConfigChannel+0x5d0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a29      	ldr	r2, [pc, #164]	; (8002078 <HAL_ADC_ConfigChannel+0x5d4>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9a      	lsrs	r2, r3, #18
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe2:	e002      	b.n	8001fea <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f9      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ff0:	e02e      	b.n	8002050 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b11      	cmp	r3, #17
 8001ff8:	d10b      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x56e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002002:	d106      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800200c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002010:	e01e      	b.n	8002050 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b12      	cmp	r3, #18
 8002018:	d11a      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800201a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002024:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002026:	e013      	b.n	8002050 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800203a:	e00a      	b.n	8002052 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800204e:	e000      	b.n	8002052 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002050:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800205a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800205e:	4618      	mov	r0, r3
 8002060:	376c      	adds	r7, #108	; 0x6c
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	50000400 	.word	0x50000400
 8002070:	50000500 	.word	0x50000500
 8002074:	2000000c 	.word	0x2000000c
 8002078:	431bde83 	.word	0x431bde83

0800207c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800207c:	b480      	push	{r7}
 800207e:	b099      	sub	sp, #100	; 0x64
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002094:	d102      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002096:	4b6d      	ldr	r3, [pc, #436]	; (800224c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	e01a      	b.n	80020d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6a      	ldr	r2, [pc, #424]	; (800224c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d103      	bne.n	80020ae <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80020a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	e011      	b.n	80020d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a67      	ldr	r2, [pc, #412]	; (8002250 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d102      	bne.n	80020be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020b8:	4b66      	ldr	r3, [pc, #408]	; (8002254 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	e009      	b.n	80020d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a64      	ldr	r2, [pc, #400]	; (8002254 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020c8:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	e001      	b.n	80020d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b0      	b.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0a9      	b.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 808d 	bne.w	800221c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8086 	bne.w	800221c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002118:	d004      	beq.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002124:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002126:	e000      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002128:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800212a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d040      	beq.n	80021b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002146:	035b      	lsls	r3, r3, #13
 8002148:	430b      	orrs	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800214e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d108      	bne.n	8002170 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002170:	2300      	movs	r3, #0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d15c      	bne.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002192:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	d14b      	bne.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021a0:	f023 030f 	bic.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	6811      	ldr	r1, [r2, #0]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	6892      	ldr	r2, [r2, #8]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021b4:	e03c      	b.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021c0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80021e2:	2300      	movs	r3, #0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d123      	bne.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002204:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d112      	bne.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800220a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002212:	f023 030f 	bic.w	r3, r3, #15
 8002216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002218:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800221a:	e009      	b.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800222e:	e000      	b.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002230:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800223a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800223e:	4618      	mov	r0, r3
 8002240:	3764      	adds	r7, #100	; 0x64
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	50000100 	.word	0x50000100
 8002250:	50000400 	.word	0x50000400
 8002254:	50000500 	.word	0x50000500
 8002258:	50000300 	.word	0x50000300
 800225c:	50000700 	.word	0x50000700

08002260 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002276:	2b00      	cmp	r3, #0
 8002278:	d126      	bne.n	80022c8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002290:	2b00      	cmp	r3, #0
 8002292:	d115      	bne.n	80022c0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7fd ffe5 	bl	8000290 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80022c6:	e004      	b.n	80022d2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f7fe fca7 	bl	8000c3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f043 0204 	orr.w	r2, r3, #4
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7fe fca1 	bl	8000c64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d108      	bne.n	8002358 <ADC_Enable+0x2c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <ADC_Enable+0x2c>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <ADC_Enable+0x2e>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d13c      	bne.n	80023d8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <ADC_Enable+0xb8>)
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f043 0210 	orr.w	r2, r3, #16
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e028      	b.n	80023da <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002398:	f7fe fc44 	bl	8000c24 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800239e:	e014      	b.n	80023ca <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023a0:	f7fe fc40 	bl	8000c24 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d90d      	bls.n	80023ca <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f043 0210 	orr.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d1e3      	bne.n	80023a0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	8000003f 	.word	0x8000003f

080023e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <ADC_Disable+0x2c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <ADC_Disable+0x2c>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <ADC_Disable+0x2e>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d040      	beq.n	800249c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030d 	and.w	r3, r3, #13
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10f      	bne.n	8002448 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0202 	orr.w	r2, r2, #2
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2203      	movs	r2, #3
 800243e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002440:	f7fe fbf0 	bl	8000c24 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002446:	e022      	b.n	800248e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f043 0210 	orr.w	r2, r3, #16
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e01c      	b.n	800249e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002464:	f7fe fbde 	bl	8000c24 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d90d      	bls.n	800248e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e007      	b.n	800249e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d0e3      	beq.n	8002464 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8093 	beq.w	80025f4 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024dc:	d12a      	bne.n	8002534 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d126      	bne.n	8002534 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d122      	bne.n	8002534 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80024ee:	230c      	movs	r3, #12
 80024f0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80024f2:	e014      	b.n	800251e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4a42      	ldr	r2, [pc, #264]	; (8002600 <ADC_ConversionStop+0x158>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d90d      	bls.n	8002518 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f043 0210 	orr.w	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e06e      	b.n	80025f6 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	3301      	adds	r3, #1
 800251c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d1e3      	bne.n	80024f4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b60      	cmp	r3, #96	; 0x60
 8002538:	d015      	beq.n	8002566 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d10e      	bne.n	8002566 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0210 	orr.w	r2, r2, #16
 8002564:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d015      	beq.n	8002598 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d10e      	bne.n	8002598 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0220 	orr.w	r2, r2, #32
 8002596:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b60      	cmp	r3, #96	; 0x60
 800259c:	d004      	beq.n	80025a8 <ADC_ConversionStop+0x100>
 800259e:	2b6c      	cmp	r3, #108	; 0x6c
 80025a0:	d105      	bne.n	80025ae <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80025a2:	230c      	movs	r3, #12
 80025a4:	617b      	str	r3, [r7, #20]
        break;
 80025a6:	e005      	b.n	80025b4 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80025a8:	2308      	movs	r3, #8
 80025aa:	617b      	str	r3, [r7, #20]
        break;
 80025ac:	e002      	b.n	80025b4 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80025ae:	2304      	movs	r3, #4
 80025b0:	617b      	str	r3, [r7, #20]
        break;
 80025b2:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80025b4:	f7fe fb36 	bl	8000c24 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80025ba:	e014      	b.n	80025e6 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025bc:	f7fe fb32 	bl	8000c24 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b0b      	cmp	r3, #11
 80025c8:	d90d      	bls.n	80025e6 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f043 0210 	orr.w	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e007      	b.n	80025f6 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e3      	bne.n	80025bc <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	000993ff 	.word	0x000993ff

08002604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <__NVIC_SetPriorityGrouping+0x44>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002620:	4013      	ands	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800262c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002636:	4a04      	ldr	r2, [pc, #16]	; (8002648 <__NVIC_SetPriorityGrouping+0x44>)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	60d3      	str	r3, [r2, #12]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <__NVIC_GetPriorityGrouping+0x18>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	f003 0307 	and.w	r3, r3, #7
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	2b00      	cmp	r3, #0
 8002678:	db0b      	blt.n	8002692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4907      	ldr	r1, [pc, #28]	; (80026a0 <__NVIC_EnableIRQ+0x38>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2001      	movs	r0, #1
 800268a:	fa00 f202 	lsl.w	r2, r0, r2
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff4c 	bl	8002604 <__NVIC_SetPriorityGrouping>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002786:	f7ff ff61 	bl	800264c <__NVIC_GetPriorityGrouping>
 800278a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	6978      	ldr	r0, [r7, #20]
 8002792:	f7ff ffb1 	bl	80026f8 <NVIC_EncodePriority>
 8002796:	4602      	mov	r2, r0
 8002798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff80 	bl	80026a4 <__NVIC_SetPriority>
}
 80027a4:	bf00      	nop
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff54 	bl	8002668 <__NVIC_EnableIRQ>
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e037      	b.n	800284e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027f8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f979 	bl	8002b28 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}  
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_DMA_Start_IT+0x20>
 8002872:	2302      	movs	r3, #2
 8002874:	e04a      	b.n	800290c <HAL_DMA_Start_IT+0xb6>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002884:	2b01      	cmp	r3, #1
 8002886:	d13a      	bne.n	80028fe <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f90d 	bl	8002acc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 020e 	orr.w	r2, r2, #14
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e00f      	b.n	80028ec <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 020a 	orr.w	r2, r2, #10
 80028da:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0204 	bic.w	r2, r2, #4
 80028ea:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e005      	b.n	800290a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800290a:	7dfb      	ldrb	r3, [r7, #23]
} 
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002922:	2b02      	cmp	r3, #2
 8002924:	d008      	beq.n	8002938 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2204      	movs	r2, #4
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e020      	b.n	800297a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 020e 	bic.w	r2, r2, #14
 8002946:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2204      	movs	r2, #4
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d024      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x72>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01f      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0204 	bic.w	r2, r2, #4
 80029d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2104      	movs	r1, #4
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d06a      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	e065      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2202      	movs	r2, #2
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02c      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xdc>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d027      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 020a 	bic.w	r2, r2, #10
 8002a2e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2102      	movs	r1, #2
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d035      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a60:	e030      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2208      	movs	r2, #8
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d028      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x13e>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 020e 	bic.w	r2, r2, #14
 8002a8a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	2101      	movs	r1, #1
 8002a96:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
    }
  }
}  
 8002ac2:	e7ff      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x13e>
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d108      	bne.n	8002b0c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b0a:	e007      	b.n	8002b1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <DMA_CalcBaseAndBitshift+0x60>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d80f      	bhi.n	8002b5c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <DMA_CalcBaseAndBitshift+0x64>)
 8002b44:	4413      	add	r3, r2
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <DMA_CalcBaseAndBitshift+0x68>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <DMA_CalcBaseAndBitshift+0x6c>)
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002b5a:	e00e      	b.n	8002b7a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <DMA_CalcBaseAndBitshift+0x70>)
 8002b64:	4413      	add	r3, r2
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <DMA_CalcBaseAndBitshift+0x68>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <DMA_CalcBaseAndBitshift+0x74>)
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40020407 	.word	0x40020407
 8002b8c:	bffdfff8 	.word	0xbffdfff8
 8002b90:	cccccccd 	.word	0xcccccccd
 8002b94:	40020000 	.word	0x40020000
 8002b98:	bffdfbf8 	.word	0xbffdfbf8
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bae:	e160      	b.n	8002e72 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8152 	beq.w	8002e6c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x38>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b12      	cmp	r3, #18
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	6939      	ldr	r1, [r7, #16]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d00b      	beq.n	8002c74 <HAL_GPIO_Init+0xd4>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d007      	beq.n	8002c74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c68:	2b11      	cmp	r3, #17
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b12      	cmp	r3, #18
 8002c72:	d130      	bne.n	8002cd6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002caa:	2201      	movs	r2, #1
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0201 	and.w	r2, r3, #1
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80ac 	beq.w	8002e6c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d14:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <HAL_GPIO_Init+0x2f0>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a5d      	ldr	r2, [pc, #372]	; (8002e90 <HAL_GPIO_Init+0x2f0>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <HAL_GPIO_Init+0x2f0>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d2c:	4a59      	ldr	r2, [pc, #356]	; (8002e94 <HAL_GPIO_Init+0x2f4>)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d56:	d025      	beq.n	8002da4 <HAL_GPIO_Init+0x204>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a4f      	ldr	r2, [pc, #316]	; (8002e98 <HAL_GPIO_Init+0x2f8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d01f      	beq.n	8002da0 <HAL_GPIO_Init+0x200>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a4e      	ldr	r2, [pc, #312]	; (8002e9c <HAL_GPIO_Init+0x2fc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d019      	beq.n	8002d9c <HAL_GPIO_Init+0x1fc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a4d      	ldr	r2, [pc, #308]	; (8002ea0 <HAL_GPIO_Init+0x300>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_GPIO_Init+0x1f8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a4c      	ldr	r2, [pc, #304]	; (8002ea4 <HAL_GPIO_Init+0x304>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00d      	beq.n	8002d94 <HAL_GPIO_Init+0x1f4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a4b      	ldr	r2, [pc, #300]	; (8002ea8 <HAL_GPIO_Init+0x308>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <HAL_GPIO_Init+0x1f0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a4a      	ldr	r2, [pc, #296]	; (8002eac <HAL_GPIO_Init+0x30c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d101      	bne.n	8002d8c <HAL_GPIO_Init+0x1ec>
 8002d88:	2306      	movs	r3, #6
 8002d8a:	e00c      	b.n	8002da6 <HAL_GPIO_Init+0x206>
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	e00a      	b.n	8002da6 <HAL_GPIO_Init+0x206>
 8002d90:	2305      	movs	r3, #5
 8002d92:	e008      	b.n	8002da6 <HAL_GPIO_Init+0x206>
 8002d94:	2304      	movs	r3, #4
 8002d96:	e006      	b.n	8002da6 <HAL_GPIO_Init+0x206>
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e004      	b.n	8002da6 <HAL_GPIO_Init+0x206>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e002      	b.n	8002da6 <HAL_GPIO_Init+0x206>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_GPIO_Init+0x206>
 8002da4:	2300      	movs	r3, #0
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	f002 0203 	and.w	r2, r2, #3
 8002dac:	0092      	lsls	r2, r2, #2
 8002dae:	4093      	lsls	r3, r2
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002db6:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_GPIO_Init+0x2f4>)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002de8:	4a31      	ldr	r2, [pc, #196]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e12:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f47f ae97 	bne.w	8002bb0 <HAL_GPIO_Init+0x10>
  }
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000
 8002e98:	48000400 	.word	0x48000400
 8002e9c:	48000800 	.word	0x48000800
 8002ea0:	48000c00 	.word	0x48000c00
 8002ea4:	48001000 	.word	0x48001000
 8002ea8:	48001400 	.word	0x48001400
 8002eac:	48001800 	.word	0x48001800
 8002eb0:	40010400 	.word	0x40010400

08002eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ed0:	e002      	b.n	8002ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ed2:	887a      	ldrh	r2, [r7, #2]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f000 bf01 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8160 	beq.w	80031ce <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f0e:	4bae      	ldr	r3, [pc, #696]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f1a:	4bab      	ldr	r3, [pc, #684]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d159      	bne.n	8002fda <HAL_RCC_OscConfig+0xf6>
 8002f26:	4ba8      	ldr	r3, [pc, #672]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d152      	bne.n	8002fda <HAL_RCC_OscConfig+0xf6>
 8002f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f38:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HAL_RCC_OscConfig+0x82>
 8002f60:	4b99      	ldr	r3, [pc, #612]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	e015      	b.n	8002f92 <HAL_RCC_OscConfig+0xae>
 8002f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f82:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f8e:	4b8e      	ldr	r3, [pc, #568]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f96:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002f9a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002f9e:	fa92 f2a2 	rbit	r2, r2
 8002fa2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002fa6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f002 021f 	and.w	r2, r2, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8102 	beq.w	80031cc <HAL_RCC_OscConfig+0x2e8>
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 80fc 	bne.w	80031cc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f000 be93 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x110>
 8002fe6:	4b78      	ldr	r3, [pc, #480]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a77      	ldr	r2, [pc, #476]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e030      	b.n	8003056 <HAL_RCC_OscConfig+0x172>
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x134>
 8002ffe:	4b72      	ldr	r3, [pc, #456]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a71      	ldr	r2, [pc, #452]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b6f      	ldr	r3, [pc, #444]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e01e      	b.n	8003056 <HAL_RCC_OscConfig+0x172>
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003022:	d10c      	bne.n	800303e <HAL_RCC_OscConfig+0x15a>
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a67      	ldr	r2, [pc, #412]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 800302a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a64      	ldr	r2, [pc, #400]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0x172>
 800303e:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a61      	ldr	r2, [pc, #388]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5e      	ldr	r2, [pc, #376]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d059      	beq.n	8003114 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fd fde0 	bl	8000c24 <HAL_GetTick>
 8003064:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306a:	f7fd fddb 	bl	8000c24 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d902      	bls.n	8003080 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	f000 be40 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003084:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003094:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d102      	bne.n	80030b2 <HAL_RCC_OscConfig+0x1ce>
 80030ac:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	e015      	b.n	80030de <HAL_RCC_OscConfig+0x1fa>
 80030b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80030c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030ce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80030da:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030e2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80030e6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80030f2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80030f6:	fab2 f282 	clz	r2, r2
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	f042 0220 	orr.w	r2, r2, #32
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	f002 021f 	and.w	r2, r2, #31
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ab      	beq.n	800306a <HAL_RCC_OscConfig+0x186>
 8003112:	e05c      	b.n	80031ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd fd86 	bl	8000c24 <HAL_GetTick>
 8003118:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800311e:	f7fd fd81 	bl	8000c24 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d902      	bls.n	8003134 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	f000 bde6 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003138:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003148:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <HAL_RCC_OscConfig+0x282>
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x2ae>
 8003166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800316a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800317a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003182:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003196:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800319a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800319e:	fa92 f2a2 	rbit	r2, r2
 80031a2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80031a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80031aa:	fab2 f282 	clz	r2, r2
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f042 0220 	orr.w	r2, r2, #32
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f002 021f 	and.w	r2, r2, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1ab      	bne.n	800311e <HAL_RCC_OscConfig+0x23a>
 80031c6:	e002      	b.n	80031ce <HAL_RCC_OscConfig+0x2ea>
 80031c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8170 	beq.w	80034be <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031de:	4bd0      	ldr	r3, [pc, #832]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031ea:	4bcd      	ldr	r3, [pc, #820]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d16d      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3ee>
 80031f6:	4bca      	ldr	r3, [pc, #808]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d166      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3ee>
 8003204:	2302      	movs	r3, #2
 8003206:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003216:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_RCC_OscConfig+0x350>
 800322e:	4bbc      	ldr	r3, [pc, #752]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	e013      	b.n	800325c <HAL_RCC_OscConfig+0x378>
 8003234:	2302      	movs	r3, #2
 8003236:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003246:	2302      	movs	r3, #2
 8003248:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800324c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003258:	4bb1      	ldr	r3, [pc, #708]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2202      	movs	r2, #2
 800325e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003262:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003266:	fa92 f2a2 	rbit	r2, r2
 800326a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800326e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <HAL_RCC_OscConfig+0x3ba>
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d002      	beq.n	800329e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f000 bd31 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4ba0      	ldr	r3, [pc, #640]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	21f8      	movs	r1, #248	; 0xf8
 80032ae:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80032b6:	fa91 f1a1 	rbit	r1, r1
 80032ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80032be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80032c2:	fab1 f181 	clz	r1, r1
 80032c6:	b2c9      	uxtb	r1, r1
 80032c8:	408b      	lsls	r3, r1
 80032ca:	4995      	ldr	r1, [pc, #596]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d0:	e0f5      	b.n	80034be <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8085 	beq.w	80033e8 <HAL_RCC_OscConfig+0x504>
 80032de:	2301      	movs	r3, #1
 80032e0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80032f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	461a      	mov	r2, r3
 8003306:	2301      	movs	r3, #1
 8003308:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7fd fc8b 	bl	8000c24 <HAL_GetTick>
 800330e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003314:	f7fd fc86 	bl	8000c24 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d902      	bls.n	800332a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	f000 bceb 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
 800332a:	2302      	movs	r3, #2
 800332c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800333c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d102      	bne.n	800335a <HAL_RCC_OscConfig+0x476>
 8003354:	4b72      	ldr	r3, [pc, #456]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	e013      	b.n	8003382 <HAL_RCC_OscConfig+0x49e>
 800335a:	2302      	movs	r3, #2
 800335c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800336c:	2302      	movs	r3, #2
 800336e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003372:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800337e:	4b68      	ldr	r3, [pc, #416]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2202      	movs	r2, #2
 8003384:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003388:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800338c:	fa92 f2a2 	rbit	r2, r2
 8003390:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003394:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f002 021f 	and.w	r2, r2, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0af      	beq.n	8003314 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	21f8      	movs	r1, #248	; 0xf8
 80033c4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80033cc:	fa91 f1a1 	rbit	r1, r1
 80033d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80033d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80033d8:	fab1 f181 	clz	r1, r1
 80033dc:	b2c9      	uxtb	r1, r1
 80033de:	408b      	lsls	r3, r1
 80033e0:	494f      	ldr	r1, [pc, #316]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
 80033e6:	e06a      	b.n	80034be <HAL_RCC_OscConfig+0x5da>
 80033e8:	2301      	movs	r3, #1
 80033ea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80033fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	461a      	mov	r2, r3
 8003410:	2300      	movs	r3, #0
 8003412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd fc06 	bl	8000c24 <HAL_GetTick>
 8003418:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341e:	f7fd fc01 	bl	8000c24 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	f000 bc66 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003434:	2302      	movs	r3, #2
 8003436:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003446:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_RCC_OscConfig+0x580>
 800345e:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e013      	b.n	800348c <HAL_RCC_OscConfig+0x5a8>
 8003464:	2302      	movs	r3, #2
 8003466:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003476:	2302      	movs	r3, #2
 8003478:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800347c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	2202      	movs	r2, #2
 800348e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003492:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003496:	fa92 f2a2 	rbit	r2, r2
 800349a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800349e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034a2:	fab2 f282 	clz	r2, r2
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	f042 0220 	orr.w	r2, r2, #32
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f002 021f 	and.w	r2, r2, #31
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1af      	bne.n	800341e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80da 	beq.w	8003682 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d069      	beq.n	80035ac <HAL_RCC_OscConfig+0x6c8>
 80034d8:	2301      	movs	r3, #1
 80034da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80034ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x640>)
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	461a      	mov	r2, r3
 80034fe:	2301      	movs	r3, #1
 8003500:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fd fb8f 	bl	8000c24 <HAL_GetTick>
 8003506:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	e00d      	b.n	8003528 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350c:	f7fd fb8a 	bl	8000c24 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d905      	bls.n	8003528 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e3ef      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003520:	40021000 	.word	0x40021000
 8003524:	10908120 	.word	0x10908120
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003532:	fa93 f2a3 	rbit	r2, r3
 8003536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003540:	2202      	movs	r2, #2
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	fa93 f2a3 	rbit	r2, r3
 800354e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003558:	2202      	movs	r2, #2
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800356a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356c:	4ba4      	ldr	r3, [pc, #656]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800356e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003570:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003574:	2102      	movs	r1, #2
 8003576:	6019      	str	r1, [r3, #0]
 8003578:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	fa93 f1a3 	rbit	r1, r3
 8003582:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003586:	6019      	str	r1, [r3, #0]
  return result;
 8003588:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0b0      	beq.n	800350c <HAL_RCC_OscConfig+0x628>
 80035aa:	e06a      	b.n	8003682 <HAL_RCC_OscConfig+0x79e>
 80035ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fa93 f2a3 	rbit	r2, r3
 80035be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80035c2:	601a      	str	r2, [r3, #0]
  return result;
 80035c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80035c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b8c      	ldr	r3, [pc, #560]	; (8003804 <HAL_RCC_OscConfig+0x920>)
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	461a      	mov	r2, r3
 80035da:	2300      	movs	r3, #0
 80035dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fd fb21 	bl	8000c24 <HAL_GetTick>
 80035e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e6:	e009      	b.n	80035fc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fd fb1c 	bl	8000c24 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e381      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 80035fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003600:	2202      	movs	r2, #2
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003618:	2202      	movs	r2, #2
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003630:	2202      	movs	r2, #2
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003642:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003644:	4b6e      	ldr	r3, [pc, #440]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003648:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800364c:	2102      	movs	r1, #2
 800364e:	6019      	str	r1, [r3, #0]
 8003650:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	fa93 f1a3 	rbit	r1, r3
 800365a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800365e:	6019      	str	r1, [r3, #0]
  return result;
 8003660:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1b2      	bne.n	80035e8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8157 	beq.w	8003940 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003698:	4b59      	ldr	r3, [pc, #356]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d112      	bne.n	80036ca <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a4:	4b56      	ldr	r3, [pc, #344]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	4a55      	ldr	r2, [pc, #340]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 80036aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ae:	61d3      	str	r3, [r2, #28]
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b4f      	ldr	r3, [pc, #316]	; (8003808 <HAL_RCC_OscConfig+0x924>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11a      	bne.n	800370c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b4c      	ldr	r3, [pc, #304]	; (8003808 <HAL_RCC_OscConfig+0x924>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_RCC_OscConfig+0x924>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fa9f 	bl	8000c24 <HAL_GetTick>
 80036e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	e009      	b.n	8003700 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fd fa9a 	bl	8000c24 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b64      	cmp	r3, #100	; 0x64
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e2ff      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b41      	ldr	r3, [pc, #260]	; (8003808 <HAL_RCC_OscConfig+0x924>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ef      	beq.n	80036ec <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x840>
 8003716:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a39      	ldr	r2, [pc, #228]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6213      	str	r3, [r2, #32]
 8003722:	e02f      	b.n	8003784 <HAL_RCC_OscConfig+0x8a0>
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x864>
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4a33      	ldr	r2, [pc, #204]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	6213      	str	r3, [r2, #32]
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4a30      	ldr	r2, [pc, #192]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	6213      	str	r3, [r2, #32]
 8003746:	e01d      	b.n	8003784 <HAL_RCC_OscConfig+0x8a0>
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b05      	cmp	r3, #5
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x888>
 8003752:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	6213      	str	r3, [r2, #32]
 800375e:	4b28      	ldr	r3, [pc, #160]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a27      	ldr	r2, [pc, #156]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0x8a0>
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	6213      	str	r3, [r2, #32]
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800377e:	f023 0304 	bic.w	r3, r3, #4
 8003782:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d06a      	beq.n	8003864 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fd fa49 	bl	8000c24 <HAL_GetTick>
 8003792:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fd fa44 	bl	8000c24 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e2a7      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 80037b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80037b4:	2202      	movs	r2, #2
 80037b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037de:	601a      	str	r2, [r3, #0]
  return result;
 80037e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d108      	bne.n	800380c <HAL_RCC_OscConfig+0x928>
 80037fa:	4b01      	ldr	r3, [pc, #4]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	e013      	b.n	8003828 <HAL_RCC_OscConfig+0x944>
 8003800:	40021000 	.word	0x40021000
 8003804:	10908120 	.word	0x10908120
 8003808:	40007000 	.word	0x40007000
 800380c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003810:	2202      	movs	r2, #2
 8003812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	4bc0      	ldr	r3, [pc, #768]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800382c:	2102      	movs	r1, #2
 800382e:	6011      	str	r1, [r2, #0]
 8003830:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	fa92 f1a2 	rbit	r1, r2
 800383a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800383e:	6011      	str	r1, [r2, #0]
  return result;
 8003840:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	fab2 f282 	clz	r2, r2
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f002 021f 	and.w	r2, r2, #31
 8003856:	2101      	movs	r1, #1
 8003858:	fa01 f202 	lsl.w	r2, r1, r2
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d09a      	beq.n	8003798 <HAL_RCC_OscConfig+0x8b4>
 8003862:	e063      	b.n	800392c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fd f9de 	bl	8000c24 <HAL_GetTick>
 8003868:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	e00b      	b.n	8003886 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd f9d9 	bl	8000c24 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e23c      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003886:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800388a:	2202      	movs	r2, #2
 800388c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038a2:	2202      	movs	r2, #2
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	fa93 f2a3 	rbit	r2, r3
 80038b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038b4:	601a      	str	r2, [r3, #0]
  return result;
 80038b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f043 0302 	orr.w	r3, r3, #2
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d102      	bne.n	80038d6 <HAL_RCC_OscConfig+0x9f2>
 80038d0:	4b95      	ldr	r3, [pc, #596]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	e00d      	b.n	80038f2 <HAL_RCC_OscConfig+0xa0e>
 80038d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038da:	2202      	movs	r2, #2
 80038dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	4b8e      	ldr	r3, [pc, #568]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80038f6:	2102      	movs	r1, #2
 80038f8:	6011      	str	r1, [r2, #0]
 80038fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	fa92 f1a2 	rbit	r1, r2
 8003904:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003908:	6011      	str	r1, [r2, #0]
  return result;
 800390a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fab2 f282 	clz	r2, r2
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f002 021f 	and.w	r2, r2, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f202 	lsl.w	r2, r1, r2
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1a0      	bne.n	800386e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800392c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b7c      	ldr	r3, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	4a7b      	ldr	r2, [pc, #492]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 81d9 	beq.w	8003cfe <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394c:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	f000 81a6 	beq.w	8003ca6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b02      	cmp	r3, #2
 8003962:	f040 811e 	bne.w	8003ba2 <HAL_RCC_OscConfig+0xcbe>
 8003966:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800396a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800396e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800397e:	601a      	str	r2, [r3, #0]
  return result;
 8003980:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003984:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fd f942 	bl	8000c24 <HAL_GetTick>
 80039a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a4:	e009      	b.n	80039ba <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fd f93d 	bl	8000c24 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1a2      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 80039ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	fa93 f2a3 	rbit	r2, r3
 80039ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039d2:	601a      	str	r2, [r3, #0]
  return result;
 80039d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_OscConfig+0xb10>
 80039ee:	4b4e      	ldr	r3, [pc, #312]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	e01b      	b.n	8003a2c <HAL_RCC_OscConfig+0xb48>
 80039f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80039f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	fa93 f2a3 	rbit	r2, r3
 8003a08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	fa93 f2a3 	rbit	r2, r3
 8003a22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003a30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a34:	6011      	str	r1, [r2, #0]
 8003a36:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	fa92 f1a2 	rbit	r1, r2
 8003a40:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a44:	6011      	str	r1, [r2, #0]
  return result;
 8003a46:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	fab2 f282 	clz	r2, r2
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	f042 0220 	orr.w	r2, r2, #32
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f002 021f 	and.w	r2, r2, #31
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d19e      	bne.n	80039a6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f023 020f 	bic.w	r2, r3, #15
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	492c      	ldr	r1, [pc, #176]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6a19      	ldr	r1, [r3, #32]
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	4925      	ldr	r1, [pc, #148]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fa93 f2a3 	rbit	r2, r3
 8003aac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ab0:	601a      	str	r2, [r3, #0]
  return result;
 8003ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ab6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2301      	movs	r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fd f8a9 	bl	8000c24 <HAL_GetTick>
 8003ad2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad6:	e009      	b.n	8003aec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd f8a4 	bl	8000c24 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e109      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003aec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	fa93 f2a3 	rbit	r2, r3
 8003b00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b04:	601a      	str	r2, [r3, #0]
  return result;
 8003b06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCC_OscConfig+0xc48>
 8003b20:	4b01      	ldr	r3, [pc, #4]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	e01e      	b.n	8003b64 <HAL_RCC_OscConfig+0xc80>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fa93 f2a3 	rbit	r2, r3
 8003b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	fa93 f2a3 	rbit	r2, r3
 8003b5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b6c:	6011      	str	r1, [r2, #0]
 8003b6e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	fa92 f1a2 	rbit	r1, r2
 8003b78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b7c:	6011      	str	r1, [r2, #0]
  return result;
 8003b7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	fab2 f282 	clz	r2, r2
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f042 0220 	orr.w	r2, r2, #32
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f002 021f 	and.w	r2, r2, #31
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d09b      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xbf4>
 8003ba0:	e0ad      	b.n	8003cfe <HAL_RCC_OscConfig+0xe1a>
 8003ba2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	fa93 f2a3 	rbit	r2, r3
 8003bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bba:	601a      	str	r2, [r3, #0]
  return result;
 8003bbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bc0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd f824 	bl	8000c24 <HAL_GetTick>
 8003bdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	e009      	b.n	8003bf6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be2:	f7fd f81f 	bl	8000c24 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e084      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	fa93 f2a3 	rbit	r2, r3
 8003c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c0e:	601a      	str	r2, [r3, #0]
  return result;
 8003c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_RCC_OscConfig+0xd4c>
 8003c2a:	4b38      	ldr	r3, [pc, #224]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	e01b      	b.n	8003c68 <HAL_RCC_OscConfig+0xd84>
 8003c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	fa93 f2a3 	rbit	r2, r3
 8003c44:	f107 0320 	add.w	r3, r7, #32
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f107 031c 	add.w	r3, r7, #28
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	fa93 f2a3 	rbit	r2, r3
 8003c5e:	f107 0318 	add.w	r3, r7, #24
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f107 0214 	add.w	r2, r7, #20
 8003c6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	f107 0214 	add.w	r2, r7, #20
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	fa92 f1a2 	rbit	r1, r2
 8003c7c:	f107 0210 	add.w	r2, r7, #16
 8003c80:	6011      	str	r1, [r2, #0]
  return result;
 8003c82:	f107 0210 	add.w	r2, r7, #16
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	fab2 f282 	clz	r2, r2
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	f042 0220 	orr.w	r2, r2, #32
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	f002 021f 	and.w	r2, r2, #31
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d19e      	bne.n	8003be2 <HAL_RCC_OscConfig+0xcfe>
 8003ca4:	e02b      	b.n	8003cfe <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e025      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb4:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cc8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d111      	bne.n	8003cfa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003cd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d108      	bne.n	8003cfa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cec:	f003 020f 	and.w	r2, r3, #15
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000

08003d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b09e      	sub	sp, #120	; 0x78
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e162      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b90      	ldr	r3, [pc, #576]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d910      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	498b      	ldr	r1, [pc, #556]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b89      	ldr	r3, [pc, #548]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e14a      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b82      	ldr	r3, [pc, #520]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	497f      	ldr	r1, [pc, #508]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80dc 	beq.w	8003f3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d13c      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xf6>
 8003d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d102      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xa6>
 8003db0:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0xc6>
 8003db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dda:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dde:	fa92 f2a2 	rbit	r2, r2
 8003de2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003de6:	fab2 f282 	clz	r2, r2
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	f042 0220 	orr.w	r2, r2, #32
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	f002 021f 	and.w	r2, r2, #31
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d17b      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0f3      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d13c      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x178>
 8003e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x128>
 8003e32:	4b4f      	ldr	r3, [pc, #316]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	e00f      	b.n	8003e58 <HAL_RCC_ClockConfig+0x148>
 8003e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	647b      	str	r3, [r7, #68]	; 0x44
 8003e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e60:	fa92 f2a2 	rbit	r2, r2
 8003e64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e68:	fab2 f282 	clz	r2, r2
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f042 0220 	orr.w	r2, r2, #32
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	f002 021f 	and.w	r2, r2, #31
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d13a      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b2      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e96:	fab3 f383 	clz	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d102      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x1a0>
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	e00d      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1bc>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2202      	movs	r2, #2
 8003ece:	61ba      	str	r2, [r7, #24]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	fa92 f2a2 	rbit	r2, r2
 8003ed6:	617a      	str	r2, [r7, #20]
  return result;
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	fab2 f282 	clz	r2, r2
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	f042 0220 	orr.w	r2, r2, #32
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	f002 021f 	and.w	r2, r2, #31
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e079      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f023 0203 	bic.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	491a      	ldr	r1, [pc, #104]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fc fe8a 	bl	8000c24 <HAL_GetTick>
 8003f10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f14:	f7fc fe86 	bl	8000c24 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e061      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 020c 	and.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1eb      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d214      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 0207 	bic.w	r2, r3, #7
 8003f52:	4906      	ldr	r1, [pc, #24]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e040      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	491a      	ldr	r1, [pc, #104]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4912      	ldr	r1, [pc, #72]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fb2:	f000 f829 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	22f0      	movs	r2, #240	; 0xf0
 8003fc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	fa92 f2a2 	rbit	r2, r2
 8003fca:	60fa      	str	r2, [r7, #12]
  return result;
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	fab2 f282 	clz	r2, r2
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	40d3      	lsrs	r3, r2
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x2ec>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	fa21 f303 	lsr.w	r3, r1, r3
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <HAL_RCC_ClockConfig+0x2f0>)
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_RCC_ClockConfig+0x2f4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fcf6 	bl	80009d8 <HAL_InitTick>
  
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3778      	adds	r7, #120	; 0x78
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	08008930 	.word	0x08008930
 8004000:	2000000c 	.word	0x2000000c
 8004004:	20000010 	.word	0x20000010

08004008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	b08b      	sub	sp, #44	; 0x2c
 800400c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	2300      	movs	r3, #0
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b04      	cmp	r3, #4
 8004030:	d002      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x30>
 8004032:	2b08      	cmp	r3, #8
 8004034:	d003      	beq.n	800403e <HAL_RCC_GetSysClockFreq+0x36>
 8004036:	e03f      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800403a:	623b      	str	r3, [r7, #32]
      break;
 800403c:	e03f      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004044:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004048:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	fa92 f2a2 	rbit	r2, r2
 8004050:	607a      	str	r2, [r7, #4]
  return result;
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	fab2 f282 	clz	r2, r2
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	40d3      	lsrs	r3, r2
 800405c:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	220f      	movs	r2, #15
 800406c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	fa92 f2a2 	rbit	r2, r2
 8004074:	60fa      	str	r2, [r7, #12]
  return result;
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	fab2 f282 	clz	r2, r2
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	40d3      	lsrs	r3, r2
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004090:	4a0f      	ldr	r2, [pc, #60]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	fbb2 f2f3 	udiv	r2, r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	e007      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040a2:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	623b      	str	r3, [r7, #32]
      break;
 80040b6:	e002      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040ba:	623b      	str	r3, [r7, #32]
      break;
 80040bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040be:	6a3b      	ldr	r3, [r7, #32]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	372c      	adds	r7, #44	; 0x2c
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40021000 	.word	0x40021000
 80040d0:	007a1200 	.word	0x007a1200
 80040d4:	08008948 	.word	0x08008948
 80040d8:	08008958 	.word	0x08008958

080040dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	2000000c 	.word	0x2000000c

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80040fa:	f7ff ffef 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fe:	4601      	mov	r1, r0
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004108:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800410c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	fa92 f2a2 	rbit	r2, r2
 8004114:	603a      	str	r2, [r7, #0]
  return result;
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	fab2 f282 	clz	r2, r2
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	40d3      	lsrs	r3, r2
 8004120:	4a04      	ldr	r2, [pc, #16]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	08008940 	.word	0x08008940

08004138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800413e:	f7ff ffcd 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 8004142:	4601      	mov	r1, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800414c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004150:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	fa92 f2a2 	rbit	r2, r2
 8004158:	603a      	str	r2, [r7, #0]
  return result;
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	40d3      	lsrs	r3, r2
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004166:	5cd3      	ldrb	r3, [r2, r3]
 8004168:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	08008940 	.word	0x08008940

0800417c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	220f      	movs	r2, #15
 800418a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_RCC_GetClockConfig+0x5c>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0203 	and.w	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <HAL_RCC_GetClockConfig+0x5c>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <HAL_RCC_GetClockConfig+0x5c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_GetClockConfig+0x5c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	08db      	lsrs	r3, r3, #3
 80041b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80041be:	4b07      	ldr	r3, [pc, #28]	; (80041dc <HAL_RCC_GetClockConfig+0x60>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0207 	and.w	r2, r3, #7
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40022000 	.word	0x40022000

080041e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b092      	sub	sp, #72	; 0x48
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80d7 	beq.w	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004204:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10e      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004210:	4b4b      	ldr	r3, [pc, #300]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	4a4a      	ldr	r2, [pc, #296]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421a:	61d3      	str	r3, [r2, #28]
 800421c:	4b48      	ldr	r3, [pc, #288]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b45      	ldr	r3, [pc, #276]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d118      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423a:	4b42      	ldr	r3, [pc, #264]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a41      	ldr	r2, [pc, #260]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004246:	f7fc fced 	bl	8000c24 <HAL_GetTick>
 800424a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	e008      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424e:	f7fc fce9 	bl	8000c24 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b64      	cmp	r3, #100	; 0x64
 800425a:	d901      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1d6      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	4b38      	ldr	r3, [pc, #224]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800426c:	4b34      	ldr	r3, [pc, #208]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004274:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8084 	beq.w	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004288:	429a      	cmp	r2, r3
 800428a:	d07c      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800428c:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800429a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	4b26      	ldr	r3, [pc, #152]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	461a      	mov	r2, r3
 80042b6:	2301      	movs	r3, #1
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	461a      	mov	r2, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042de:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d04b      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7fc fc99 	bl	8000c24 <HAL_GetTick>
 80042f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f4:	e00a      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fc fc95 	bl	8000c24 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	; 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e180      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800430c:	2302      	movs	r3, #2
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
 8004318:	2302      	movs	r3, #2
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	61fb      	str	r3, [r7, #28]
  return result;
 8004324:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d108      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800433a:	4b01      	ldr	r3, [pc, #4]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	e00d      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004340:	40021000 	.word	0x40021000
 8004344:	40007000 	.word	0x40007000
 8004348:	10908100 	.word	0x10908100
 800434c:	2302      	movs	r3, #2
 800434e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	4ba0      	ldr	r3, [pc, #640]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	2202      	movs	r2, #2
 800435e:	613a      	str	r2, [r7, #16]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	fa92 f2a2 	rbit	r2, r2
 8004366:	60fa      	str	r2, [r7, #12]
  return result;
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	fab2 f282 	clz	r2, r2
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	f002 021f 	and.w	r2, r2, #31
 800437a:	2101      	movs	r1, #1
 800437c:	fa01 f202 	lsl.w	r2, r1, r2
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0b7      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004386:	4b95      	ldr	r3, [pc, #596]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4992      	ldr	r1, [pc, #584]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004398:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b8e      	ldr	r3, [pc, #568]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4a8d      	ldr	r2, [pc, #564]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b8:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f023 0203 	bic.w	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4985      	ldr	r1, [pc, #532]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d6:	4b81      	ldr	r3, [pc, #516]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	497e      	ldr	r1, [pc, #504]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f4:	4b79      	ldr	r3, [pc, #484]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4976      	ldr	r1, [pc, #472]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004412:	4b72      	ldr	r3, [pc, #456]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	496f      	ldr	r1, [pc, #444]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004420:	4313      	orrs	r3, r2
 8004422:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004430:	4b6a      	ldr	r3, [pc, #424]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	4967      	ldr	r1, [pc, #412]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800444e:	4b63      	ldr	r3, [pc, #396]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f023 0220 	bic.w	r2, r3, #32
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	4960      	ldr	r1, [pc, #384]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800446c:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	4958      	ldr	r1, [pc, #352]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800448a:	4b54      	ldr	r3, [pc, #336]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4951      	ldr	r1, [pc, #324]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044a8:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4949      	ldr	r1, [pc, #292]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044c6:	4b45      	ldr	r3, [pc, #276]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	4942      	ldr	r1, [pc, #264]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044e4:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	493a      	ldr	r1, [pc, #232]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	4933      	ldr	r1, [pc, #204]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004510:	4313      	orrs	r3, r2
 8004512:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004520:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	492b      	ldr	r1, [pc, #172]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4924      	ldr	r1, [pc, #144]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800455c:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	491c      	ldr	r1, [pc, #112]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800456a:	4313      	orrs	r3, r2
 800456c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	4915      	ldr	r1, [pc, #84]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004598:	4b10      	ldr	r3, [pc, #64]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	490d      	ldr	r1, [pc, #52]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c2:	4906      	ldr	r1, [pc, #24]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00c      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80045d4:	4b01      	ldr	r3, [pc, #4]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e8:	490b      	ldr	r1, [pc, #44]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d008      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	4904      	ldr	r1, [pc, #16]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004608:	4313      	orrs	r3, r2
 800460a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3748      	adds	r7, #72	; 0x48
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000

0800461c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e01d      	b.n	800466a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f815 	bl	8004672 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f000 f986 	bl	800496c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_TIM_Base_Start_IT+0x50>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d00b      	beq.n	80046ca <HAL_TIM_Base_Start_IT+0x42>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d007      	beq.n	80046ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	00010007 	.word	0x00010007

080046dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d122      	bne.n	8004738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d11b      	bne.n	8004738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0202 	mvn.w	r2, #2
 8004708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f905 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8f7 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f908 	bl	8004942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b04      	cmp	r3, #4
 8004744:	d122      	bne.n	800478c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b04      	cmp	r3, #4
 8004752:	d11b      	bne.n	800478c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0204 	mvn.w	r2, #4
 800475c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f8db 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 8004778:	e005      	b.n	8004786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8cd 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f8de 	bl	8004942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b08      	cmp	r3, #8
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0208 	mvn.w	r2, #8
 80047b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2204      	movs	r2, #4
 80047b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8b1 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8a3 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f8b4 	bl	8004942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0210 	mvn.w	r2, #16
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2208      	movs	r2, #8
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f887 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f879 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f88a 	bl	8004942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d10e      	bne.n	8004860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	d107      	bne.n	8004860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0201 	mvn.w	r2, #1
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fb ffc8 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d10e      	bne.n	800488c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b80      	cmp	r3, #128	; 0x80
 800487a:	d107      	bne.n	800488c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f918 	bl	8004abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489a:	d10e      	bne.n	80048ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b80      	cmp	r3, #128	; 0x80
 80048a8:	d107      	bne.n	80048ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f90b 	bl	8004ad0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d10e      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f838 	bl	8004956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d10e      	bne.n	8004912 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d107      	bne.n	8004912 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f06f 0220 	mvn.w	r2, #32
 800490a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8cb 	bl	8004aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a42      	ldr	r2, [pc, #264]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d00f      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3f      	ldr	r2, [pc, #252]	; (8004a8c <TIM_Base_SetConfig+0x120>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00b      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3e      	ldr	r2, [pc, #248]	; (8004a90 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a3d      	ldr	r2, [pc, #244]	; (8004a94 <TIM_Base_SetConfig+0x128>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a3c      	ldr	r2, [pc, #240]	; (8004a98 <TIM_Base_SetConfig+0x12c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d108      	bne.n	80049be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a31      	ldr	r2, [pc, #196]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049cc:	d01b      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2e      	ldr	r2, [pc, #184]	; (8004a8c <TIM_Base_SetConfig+0x120>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d017      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a2d      	ldr	r2, [pc, #180]	; (8004a90 <TIM_Base_SetConfig+0x124>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <TIM_Base_SetConfig+0x128>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2c      	ldr	r2, [pc, #176]	; (8004a9c <TIM_Base_SetConfig+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <TIM_Base_SetConfig+0x134>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a2a      	ldr	r2, [pc, #168]	; (8004aa4 <TIM_Base_SetConfig+0x138>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <TIM_Base_SetConfig+0x12c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <TIM_Base_SetConfig+0x100>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <TIM_Base_SetConfig+0x128>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <TIM_Base_SetConfig+0x100>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <TIM_Base_SetConfig+0x130>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0x100>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <TIM_Base_SetConfig+0x134>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0x100>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <TIM_Base_SetConfig+0x138>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x100>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a0c      	ldr	r2, [pc, #48]	; (8004a98 <TIM_Base_SetConfig+0x12c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d103      	bne.n	8004a74 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	615a      	str	r2, [r3, #20]
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40013400 	.word	0x40013400
 8004a98:	40015000 	.word	0x40015000
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800

08004aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e040      	b.n	8004b78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fb ff24 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2224      	movs	r2, #36	; 0x24
 8004b10:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f8c0 	bl	8004ca8 <UART_SetConfig>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e022      	b.n	8004b78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 face 	bl	80050dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb55 	bl	8005220 <UART_CheckIdleState>
 8004b76:	4603      	mov	r3, r0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	f040 8081 	bne.w	8004c9c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_UART_Transmit+0x26>
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e079      	b.n	8004c9e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Transmit+0x38>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e072      	b.n	8004c9e <HAL_UART_Transmit+0x11e>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2221      	movs	r2, #33	; 0x21
 8004bca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fc f82a 	bl	8000c24 <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	88fa      	ldrh	r2, [r7, #6]
 8004bd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	88fa      	ldrh	r2, [r7, #6]
 8004bde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bea:	d108      	bne.n	8004bfe <HAL_UART_Transmit+0x7e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e003      	b.n	8004c06 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c06:	e02d      	b.n	8004c64 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fb49 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e03d      	b.n	8004c9e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10b      	bne.n	8004c40 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	881a      	ldrh	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	b292      	uxth	r2, r2
 8004c36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	e008      	b.n	8004c52 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	781a      	ldrb	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1cb      	bne.n	8004c08 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2200      	movs	r2, #0
 8004c78:	2140      	movs	r1, #64	; 0x40
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fb15 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e009      	b.n	8004c9e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4bac      	ldr	r3, [pc, #688]	; (8004f88 <UART_SetConfig+0x2e0>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	6939      	ldr	r1, [r7, #16]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a9a      	ldr	r2, [pc, #616]	; (8004f8c <UART_SetConfig+0x2e4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d121      	bne.n	8004d6c <UART_SetConfig+0xc4>
 8004d28:	4b99      	ldr	r3, [pc, #612]	; (8004f90 <UART_SetConfig+0x2e8>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d817      	bhi.n	8004d64 <UART_SetConfig+0xbc>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0x94>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d59 	.word	0x08004d59
 8004d44:	08004d5f 	.word	0x08004d5f
 8004d48:	08004d53 	.word	0x08004d53
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e0b2      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004d52:	2302      	movs	r3, #2
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e0af      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e0ac      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004d5e:	2308      	movs	r3, #8
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e0a9      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004d64:	2310      	movs	r3, #16
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	bf00      	nop
 8004d6a:	e0a5      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a88      	ldr	r2, [pc, #544]	; (8004f94 <UART_SetConfig+0x2ec>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d123      	bne.n	8004dbe <UART_SetConfig+0x116>
 8004d76:	4b86      	ldr	r3, [pc, #536]	; (8004f90 <UART_SetConfig+0x2e8>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d82:	d012      	beq.n	8004daa <UART_SetConfig+0x102>
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d802      	bhi.n	8004d90 <UART_SetConfig+0xe8>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <UART_SetConfig+0xf6>
 8004d8e:	e012      	b.n	8004db6 <UART_SetConfig+0x10e>
 8004d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d94:	d00c      	beq.n	8004db0 <UART_SetConfig+0x108>
 8004d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d9a:	d003      	beq.n	8004da4 <UART_SetConfig+0xfc>
 8004d9c:	e00b      	b.n	8004db6 <UART_SetConfig+0x10e>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e089      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004da4:	2302      	movs	r3, #2
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e086      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004daa:	2304      	movs	r3, #4
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e083      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004db0:	2308      	movs	r3, #8
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e080      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004db6:	2310      	movs	r3, #16
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	bf00      	nop
 8004dbc:	e07c      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a75      	ldr	r2, [pc, #468]	; (8004f98 <UART_SetConfig+0x2f0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d123      	bne.n	8004e10 <UART_SetConfig+0x168>
 8004dc8:	4b71      	ldr	r3, [pc, #452]	; (8004f90 <UART_SetConfig+0x2e8>)
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dd4:	d012      	beq.n	8004dfc <UART_SetConfig+0x154>
 8004dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dda:	d802      	bhi.n	8004de2 <UART_SetConfig+0x13a>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <UART_SetConfig+0x148>
 8004de0:	e012      	b.n	8004e08 <UART_SetConfig+0x160>
 8004de2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004de6:	d00c      	beq.n	8004e02 <UART_SetConfig+0x15a>
 8004de8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004dec:	d003      	beq.n	8004df6 <UART_SetConfig+0x14e>
 8004dee:	e00b      	b.n	8004e08 <UART_SetConfig+0x160>
 8004df0:	2300      	movs	r3, #0
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e060      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004df6:	2302      	movs	r3, #2
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e05d      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e05a      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e02:	2308      	movs	r3, #8
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e057      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	bf00      	nop
 8004e0e:	e053      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a61      	ldr	r2, [pc, #388]	; (8004f9c <UART_SetConfig+0x2f4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d123      	bne.n	8004e62 <UART_SetConfig+0x1ba>
 8004e1a:	4b5d      	ldr	r3, [pc, #372]	; (8004f90 <UART_SetConfig+0x2e8>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e26:	d012      	beq.n	8004e4e <UART_SetConfig+0x1a6>
 8004e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2c:	d802      	bhi.n	8004e34 <UART_SetConfig+0x18c>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <UART_SetConfig+0x19a>
 8004e32:	e012      	b.n	8004e5a <UART_SetConfig+0x1b2>
 8004e34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e38:	d00c      	beq.n	8004e54 <UART_SetConfig+0x1ac>
 8004e3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e3e:	d003      	beq.n	8004e48 <UART_SetConfig+0x1a0>
 8004e40:	e00b      	b.n	8004e5a <UART_SetConfig+0x1b2>
 8004e42:	2300      	movs	r3, #0
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e037      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e034      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e4e:	2304      	movs	r3, #4
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e031      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e54:	2308      	movs	r3, #8
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e02e      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e5a:	2310      	movs	r3, #16
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	bf00      	nop
 8004e60:	e02a      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a4e      	ldr	r2, [pc, #312]	; (8004fa0 <UART_SetConfig+0x2f8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d123      	bne.n	8004eb4 <UART_SetConfig+0x20c>
 8004e6c:	4b48      	ldr	r3, [pc, #288]	; (8004f90 <UART_SetConfig+0x2e8>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e78:	d012      	beq.n	8004ea0 <UART_SetConfig+0x1f8>
 8004e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7e:	d802      	bhi.n	8004e86 <UART_SetConfig+0x1de>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <UART_SetConfig+0x1ec>
 8004e84:	e012      	b.n	8004eac <UART_SetConfig+0x204>
 8004e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e8a:	d00c      	beq.n	8004ea6 <UART_SetConfig+0x1fe>
 8004e8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e90:	d003      	beq.n	8004e9a <UART_SetConfig+0x1f2>
 8004e92:	e00b      	b.n	8004eac <UART_SetConfig+0x204>
 8004e94:	2300      	movs	r3, #0
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e00e      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e00b      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e008      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e005      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004eac:	2310      	movs	r3, #16
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	bf00      	nop
 8004eb2:	e001      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec0:	f040 8090 	bne.w	8004fe4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004ec4:	7ffb      	ldrb	r3, [r7, #31]
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d86c      	bhi.n	8004fa4 <UART_SetConfig+0x2fc>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <UART_SetConfig+0x228>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004f15 	.word	0x08004f15
 8004ed8:	08004f35 	.word	0x08004f35
 8004edc:	08004fa5 	.word	0x08004fa5
 8004ee0:	08004f51 	.word	0x08004f51
 8004ee4:	08004fa5 	.word	0x08004fa5
 8004ee8:	08004fa5 	.word	0x08004fa5
 8004eec:	08004fa5 	.word	0x08004fa5
 8004ef0:	08004f71 	.word	0x08004f71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef4:	f7ff f8fe 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8004ef8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	005a      	lsls	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	61bb      	str	r3, [r7, #24]
        break;
 8004f12:	e04a      	b.n	8004faa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7ff f910 	bl	8004138 <HAL_RCC_GetPCLK2Freq>
 8004f18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	005a      	lsls	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	61bb      	str	r3, [r7, #24]
        break;
 8004f32:	e03a      	b.n	8004faa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004f3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6852      	ldr	r2, [r2, #4]
 8004f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	61bb      	str	r3, [r7, #24]
        break;
 8004f4e:	e02c      	b.n	8004faa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f50:	f7ff f85a 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004f54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	005a      	lsls	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	441a      	add	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	61bb      	str	r3, [r7, #24]
        break;
 8004f6e:	e01c      	b.n	8004faa <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	61bb      	str	r3, [r7, #24]
        break;
 8004f86:	e010      	b.n	8004faa <UART_SetConfig+0x302>
 8004f88:	efff69f3 	.word	0xefff69f3
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40004400 	.word	0x40004400
 8004f98:	40004800 	.word	0x40004800
 8004f9c:	40004c00 	.word	0x40004c00
 8004fa0:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
        break;
 8004fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b0f      	cmp	r3, #15
 8004fae:	d916      	bls.n	8004fde <UART_SetConfig+0x336>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb6:	d212      	bcs.n	8004fde <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f023 030f 	bic.w	r3, r3, #15
 8004fc0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	897b      	ldrh	r3, [r7, #10]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	897a      	ldrh	r2, [r7, #10]
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	e072      	b.n	80050c4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
 8004fe2:	e06f      	b.n	80050c4 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004fe4:	7ffb      	ldrb	r3, [r7, #31]
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d85b      	bhi.n	80050a2 <UART_SetConfig+0x3fa>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x348>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	08005033 	.word	0x08005033
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	080050a3 	.word	0x080050a3
 8005000:	0800506d 	.word	0x0800506d
 8005004:	080050a3 	.word	0x080050a3
 8005008:	080050a3 	.word	0x080050a3
 800500c:	080050a3 	.word	0x080050a3
 8005010:	0800508b 	.word	0x0800508b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005014:	f7ff f86e 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8005018:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	085a      	lsrs	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	441a      	add	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	b29b      	uxth	r3, r3
 800502e:	61bb      	str	r3, [r7, #24]
        break;
 8005030:	e03a      	b.n	80050a8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005032:	f7ff f881 	bl	8004138 <HAL_RCC_GetPCLK2Freq>
 8005036:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	085a      	lsrs	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	b29b      	uxth	r3, r3
 800504c:	61bb      	str	r3, [r7, #24]
        break;
 800504e:	e02b      	b.n	80050a8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800505a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6852      	ldr	r2, [r2, #4]
 8005062:	fbb3 f3f2 	udiv	r3, r3, r2
 8005066:	b29b      	uxth	r3, r3
 8005068:	61bb      	str	r3, [r7, #24]
        break;
 800506a:	e01d      	b.n	80050a8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506c:	f7fe ffcc 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8005070:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	085a      	lsrs	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	441a      	add	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	b29b      	uxth	r3, r3
 8005086:	61bb      	str	r3, [r7, #24]
        break;
 8005088:	e00e      	b.n	80050a8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	b29b      	uxth	r3, r3
 800509e:	61bb      	str	r3, [r7, #24]
        break;
 80050a0:	e002      	b.n	80050a8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
        break;
 80050a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b0f      	cmp	r3, #15
 80050ac:	d908      	bls.n	80050c0 <UART_SetConfig+0x418>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d204      	bcs.n	80050c0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	e001      	b.n	80050c4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop

080050dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051da:	d10a      	bne.n	80051f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af02      	add	r7, sp, #8
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800522e:	f7fb fcf9 	bl	8000c24 <HAL_GetTick>
 8005232:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b08      	cmp	r3, #8
 8005240:	d10e      	bne.n	8005260 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005242:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f82a 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e020      	b.n	80052a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d10e      	bne.n	800528c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800526e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f814 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e00a      	b.n	80052a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	4613      	mov	r3, r2
 80052b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ba:	e05d      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d059      	beq.n	8005378 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c4:	f7fb fcae 	bl	8000c24 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <UART_WaitOnFlagUntilTimeout+0x30>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d11b      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e042      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02b      	beq.n	8005378 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800532e:	d123      	bne.n	8005378 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005338:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005348:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e00f      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	429a      	cmp	r2, r3
 8005394:	d092      	beq.n	80052bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a07      	ldr	r2, [pc, #28]	; (80053cc <vApplicationGetIdleTaskMemory+0x2c>)
 80053b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <vApplicationGetIdleTaskMemory+0x30>)
 80053b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	200006f4 	.word	0x200006f4
 80053d0:	20000750 	.word	0x20000750

080053d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <vApplicationGetTimerTaskMemory+0x2c>)
 80053e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4a06      	ldr	r2, [pc, #24]	; (8005404 <vApplicationGetTimerTaskMemory+0x30>)
 80053ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	20000950 	.word	0x20000950
 8005404:	200009ac 	.word	0x200009ac

08005408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f103 0208 	add.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f04f 32ff 	mov.w	r2, #4294967295
 8005420:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f103 0208 	add.w	r2, r3, #8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f103 0208 	add.w	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d103      	bne.n	80054ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e00c      	b.n	80054e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3308      	adds	r3, #8
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e002      	b.n	80054d8 <vListInsert+0x2e>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d2f6      	bcs.n	80054d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6892      	ldr	r2, [r2, #8]
 8005532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6852      	ldr	r2, [r2, #4]
 800553c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d103      	bne.n	8005550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	e7fe      	b.n	8005596 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005598:	f002 fa80 	bl	8007a9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	441a      	add	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	3b01      	subs	r3, #1
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055ce:	fb01 f303 	mul.w	r3, r1, r3
 80055d2:	441a      	add	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	22ff      	movs	r2, #255	; 0xff
 80055dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	22ff      	movs	r2, #255	; 0xff
 80055e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d114      	bne.n	8005618 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01a      	beq.n	800562c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3310      	adds	r3, #16
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fa7c 	bl	8006af8 <xTaskRemoveFromEventList>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d012      	beq.n	800562c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <xQueueGenericReset+0xcc>)
 8005608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	e009      	b.n	800562c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3310      	adds	r3, #16
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fef3 	bl	8005408 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3324      	adds	r3, #36	; 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff feee 	bl	8005408 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800562c:	f002 fa64 	bl	8007af8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005630:	2301      	movs	r3, #1
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	; 0x38
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <xQueueGenericCreateStatic+0x28>
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
 8005666:	e7fe      	b.n	8005666 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <xQueueGenericCreateStatic+0x42>
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	e7fe      	b.n	8005680 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <xQueueGenericCreateStatic+0x4e>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <xQueueGenericCreateStatic+0x52>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <xQueueGenericCreateStatic+0x54>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <xQueueGenericCreateStatic+0x6c>
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	e7fe      	b.n	80056aa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <xQueueGenericCreateStatic+0x78>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <xQueueGenericCreateStatic+0x7c>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <xQueueGenericCreateStatic+0x7e>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <xQueueGenericCreateStatic+0x96>
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	e7fe      	b.n	80056d4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056d6:	2350      	movs	r3, #80	; 0x50
 80056d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b50      	cmp	r3, #80	; 0x50
 80056de:	d009      	beq.n	80056f4 <xQueueGenericCreateStatic+0xb4>
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e7fe      	b.n	80056f2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	4613      	mov	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f842 	bl	800579e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800571c:	4618      	mov	r0, r3
 800571e:	3730      	adds	r7, #48	; 0x30
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <xQueueGenericCreate+0x28>
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e7fe      	b.n	800574a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e004      	b.n	8005762 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	fb02 f303 	mul.w	r3, r2, r3
 8005760:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3350      	adds	r3, #80	; 0x50
 8005766:	4618      	mov	r0, r3
 8005768:	f002 fab2 	bl	8007cd0 <pvPortMalloc>
 800576c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00f      	beq.n	8005794 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	3350      	adds	r3, #80	; 0x50
 8005778:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005782:	79fa      	ldrb	r2, [r7, #7]
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f805 	bl	800579e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005794:	69bb      	ldr	r3, [r7, #24]
	}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e002      	b.n	80057c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057cc:	2101      	movs	r1, #1
 80057ce:	69b8      	ldr	r0, [r7, #24]
 80057d0:	f7ff fece 	bl	8005570 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08e      	sub	sp, #56	; 0x38
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057f2:	2300      	movs	r3, #0
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <xQueueGenericSend+0x30>
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28
 8005812:	e7fe      	b.n	8005812 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <xQueueGenericSend+0x3e>
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <xQueueGenericSend+0x42>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <xQueueGenericSend+0x44>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <xQueueGenericSend+0x5c>
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
 800583e:	e7fe      	b.n	800583e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d103      	bne.n	800584e <xQueueGenericSend+0x6a>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <xQueueGenericSend+0x6e>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <xQueueGenericSend+0x70>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <xQueueGenericSend+0x88>
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	e7fe      	b.n	800586a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800586c:	f001 fb00 	bl	8006e70 <xTaskGetSchedulerState>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d102      	bne.n	800587c <xQueueGenericSend+0x98>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <xQueueGenericSend+0x9c>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <xQueueGenericSend+0x9e>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <xQueueGenericSend+0xb6>
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e7fe      	b.n	8005898 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800589a:	f002 f8ff 	bl	8007a9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <xQueueGenericSend+0xcc>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d129      	bne.n	8005904 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b6:	f000 fba9 	bl	800600c <prvCopyDataToQueue>
 80058ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	3324      	adds	r3, #36	; 0x24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 f915 	bl	8006af8 <xTaskRemoveFromEventList>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058d4:	4b3f      	ldr	r3, [pc, #252]	; (80059d4 <xQueueGenericSend+0x1f0>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	e00a      	b.n	80058fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058ec:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <xQueueGenericSend+0x1f0>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058fc:	f002 f8fc 	bl	8007af8 <vPortExitCritical>
				return pdPASS;
 8005900:	2301      	movs	r3, #1
 8005902:	e063      	b.n	80059cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800590a:	f002 f8f5 	bl	8007af8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800590e:	2300      	movs	r3, #0
 8005910:	e05c      	b.n	80059cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005918:	f107 0314 	add.w	r3, r7, #20
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f94d 	bl	8006bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005922:	2301      	movs	r3, #1
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005926:	f002 f8e7 	bl	8007af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800592a:	f000 fec3 	bl	80066b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800592e:	f002 f8b5 	bl	8007a9c <vPortEnterCritical>
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005938:	b25b      	sxtb	r3, r3
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d103      	bne.n	8005948 <xQueueGenericSend+0x164>
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594e:	b25b      	sxtb	r3, r3
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d103      	bne.n	800595e <xQueueGenericSend+0x17a>
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800595e:	f002 f8cb 	bl	8007af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005962:	1d3a      	adds	r2, r7, #4
 8005964:	f107 0314 	add.w	r3, r7, #20
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f93c 	bl	8006be8 <xTaskCheckForTimeOut>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d124      	bne.n	80059c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005978:	f000 fc40 	bl	80061fc <prvIsQueueFull>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d018      	beq.n	80059b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	3310      	adds	r3, #16
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f001 f866 	bl	8006a5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005992:	f000 fbcb 	bl	800612c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005996:	f000 fe9b 	bl	80066d0 <xTaskResumeAll>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f af7c 	bne.w	800589a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <xQueueGenericSend+0x1f0>)
 80059a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	e772      	b.n	800589a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b6:	f000 fbb9 	bl	800612c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059ba:	f000 fe89 	bl	80066d0 <xTaskResumeAll>
 80059be:	e76c      	b.n	800589a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f000 fbb3 	bl	800612c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059c6:	f000 fe83 	bl	80066d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ca:	2300      	movs	r3, #0
		}
	}
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3738      	adds	r7, #56	; 0x38
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08e      	sub	sp, #56	; 0x38
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <xQueueGenericSendFromISR+0x2c>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
 8005a02:	e7fe      	b.n	8005a02 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <xQueueGenericSendFromISR+0x3a>
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <xQueueGenericSendFromISR+0x3e>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <xQueueGenericSendFromISR+0x40>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <xQueueGenericSendFromISR+0x58>
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	623b      	str	r3, [r7, #32]
 8005a2e:	e7fe      	b.n	8005a2e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d103      	bne.n	8005a3e <xQueueGenericSendFromISR+0x66>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <xQueueGenericSendFromISR+0x6a>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <xQueueGenericSendFromISR+0x6c>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <xQueueGenericSendFromISR+0x84>
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	e7fe      	b.n	8005a5a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a5c:	f002 f8fa 	bl	8007c54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a60:	f3ef 8211 	mrs	r2, BASEPRI
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	61ba      	str	r2, [r7, #24]
 8005a76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d302      	bcc.n	8005a8e <xQueueGenericSendFromISR+0xb6>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d12c      	bne.n	8005ae8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a9e:	f000 fab5 	bl	800600c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aa2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d112      	bne.n	8005ad2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	3324      	adds	r3, #36	; 0x24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f81d 	bl	8006af8 <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	e007      	b.n	8005ae2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	b25a      	sxtb	r2, r3
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ae6:	e001      	b.n	8005aec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	637b      	str	r3, [r7, #52]	; 0x34
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3738      	adds	r7, #56	; 0x38
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08e      	sub	sp, #56	; 0x38
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	e7fe      	b.n	8005b26 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <xQueueGiveFromISR+0x44>
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	e7fe      	b.n	8005b42 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <xQueueGiveFromISR+0x54>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <xQueueGiveFromISR+0x58>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <xQueueGiveFromISR+0x5a>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <xQueueGiveFromISR+0x72>
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	e7fe      	b.n	8005b70 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b72:	f002 f86f 	bl	8007c54 <vPortValidateInterruptPriority>
	__asm volatile
 8005b76:	f3ef 8211 	mrs	r2, BASEPRI
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	617a      	str	r2, [r7, #20]
 8005b8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005b8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d22b      	bcs.n	8005bfa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d112      	bne.n	8005be4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d016      	beq.n	8005bf4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	3324      	adds	r3, #36	; 0x24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 ff94 	bl	8006af8 <xTaskRemoveFromEventList>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00e      	beq.n	8005bf4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e007      	b.n	8005bf4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005be8:	3301      	adds	r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	b25a      	sxtb	r2, r3
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf8:	e001      	b.n	8005bfe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3738      	adds	r7, #56	; 0x38
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <xQueueReceive+0x2e>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	623b      	str	r3, [r7, #32]
 8005c40:	e7fe      	b.n	8005c40 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <xQueueReceive+0x3c>
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <xQueueReceive+0x40>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <xQueueReceive+0x42>
 8005c54:	2300      	movs	r3, #0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <xQueueReceive+0x5a>
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	e7fe      	b.n	8005c6c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c6e:	f001 f8ff 	bl	8006e70 <xTaskGetSchedulerState>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <xQueueReceive+0x6a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <xQueueReceive+0x6e>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <xQueueReceive+0x70>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <xQueueReceive+0x88>
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e7fe      	b.n	8005c9a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c9c:	f001 fefe 	bl	8007a9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01f      	beq.n	8005cec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb0:	f000 fa16 	bl	80060e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	1e5a      	subs	r2, r3, #1
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00f      	beq.n	8005ce4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	3310      	adds	r3, #16
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 ff15 	bl	8006af8 <xTaskRemoveFromEventList>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cd4:	4b3c      	ldr	r3, [pc, #240]	; (8005dc8 <xQueueReceive+0x1b4>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ce4:	f001 ff08 	bl	8007af8 <vPortExitCritical>
				return pdPASS;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e069      	b.n	8005dc0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cf2:	f001 ff01 	bl	8007af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e062      	b.n	8005dc0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d00:	f107 0310 	add.w	r3, r7, #16
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 ff59 	bl	8006bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d0e:	f001 fef3 	bl	8007af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d12:	f000 fccf 	bl	80066b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d16:	f001 fec1 	bl	8007a9c <vPortEnterCritical>
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d20:	b25b      	sxtb	r3, r3
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d103      	bne.n	8005d30 <xQueueReceive+0x11c>
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d36:	b25b      	sxtb	r3, r3
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d103      	bne.n	8005d46 <xQueueReceive+0x132>
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d46:	f001 fed7 	bl	8007af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d4a:	1d3a      	adds	r2, r7, #4
 8005d4c:	f107 0310 	add.w	r3, r7, #16
 8005d50:	4611      	mov	r1, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 ff48 	bl	8006be8 <xTaskCheckForTimeOut>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d123      	bne.n	8005da6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d60:	f000 fa36 	bl	80061d0 <prvIsQueueEmpty>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d017      	beq.n	8005d9a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	3324      	adds	r3, #36	; 0x24
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fe72 	bl	8006a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7a:	f000 f9d7 	bl	800612c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d7e:	f000 fca7 	bl	80066d0 <xTaskResumeAll>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d189      	bne.n	8005c9c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d88:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <xQueueReceive+0x1b4>)
 8005d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	e780      	b.n	8005c9c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9c:	f000 f9c6 	bl	800612c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005da0:	f000 fc96 	bl	80066d0 <xTaskResumeAll>
 8005da4:	e77a      	b.n	8005c9c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da8:	f000 f9c0 	bl	800612c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dac:	f000 fc90 	bl	80066d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db2:	f000 fa0d 	bl	80061d0 <prvIsQueueEmpty>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f43f af6f 	beq.w	8005c9c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3730      	adds	r7, #48	; 0x30
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08e      	sub	sp, #56	; 0x38
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <xQueueSemaphoreTake+0x30>
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	e7fe      	b.n	8005dfa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <xQueueSemaphoreTake+0x4c>
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	e7fe      	b.n	8005e16 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e18:	f001 f82a 	bl	8006e70 <xTaskGetSchedulerState>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <xQueueSemaphoreTake+0x5c>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <xQueueSemaphoreTake+0x60>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <xQueueSemaphoreTake+0x62>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <xQueueSemaphoreTake+0x7a>
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e7fe      	b.n	8005e44 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e46:	f001 fe29 	bl	8007a9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d024      	beq.n	8005ea0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	1e5a      	subs	r2, r3, #1
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d104      	bne.n	8005e70 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005e66:	f001 f97f 	bl	8007168 <pvTaskIncrementMutexHeldCount>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00f      	beq.n	8005e98 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	3310      	adds	r3, #16
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fe3b 	bl	8006af8 <xTaskRemoveFromEventList>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e88:	4b53      	ldr	r3, [pc, #332]	; (8005fd8 <xQueueSemaphoreTake+0x20c>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e98:	f001 fe2e 	bl	8007af8 <vPortExitCritical>
				return pdPASS;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e096      	b.n	8005fce <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d110      	bne.n	8005ec8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <xQueueSemaphoreTake+0xf4>
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e7fe      	b.n	8005ebe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ec0:	f001 fe1a 	bl	8007af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e082      	b.n	8005fce <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ece:	f107 030c 	add.w	r3, r7, #12
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fe72 	bl	8006bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005edc:	f001 fe0c 	bl	8007af8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ee0:	f000 fbe8 	bl	80066b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ee4:	f001 fdda 	bl	8007a9c <vPortEnterCritical>
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eee:	b25b      	sxtb	r3, r3
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d103      	bne.n	8005efe <xQueueSemaphoreTake+0x132>
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d103      	bne.n	8005f14 <xQueueSemaphoreTake+0x148>
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f14:	f001 fdf0 	bl	8007af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f18:	463a      	mov	r2, r7
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fe61 	bl	8006be8 <xTaskCheckForTimeOut>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d132      	bne.n	8005f92 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f2e:	f000 f94f 	bl	80061d0 <prvIsQueueEmpty>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d026      	beq.n	8005f86 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005f40:	f001 fdac 	bl	8007a9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 ffaf 	bl	8006eac <xTaskPriorityInherit>
 8005f4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005f50:	f001 fdd2 	bl	8007af8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fd7d 	bl	8006a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f64:	f000 f8e2 	bl	800612c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f68:	f000 fbb2 	bl	80066d0 <xTaskResumeAll>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f47f af69 	bne.w	8005e46 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005f74:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <xQueueSemaphoreTake+0x20c>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	e75f      	b.n	8005e46 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f88:	f000 f8d0 	bl	800612c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f8c:	f000 fba0 	bl	80066d0 <xTaskResumeAll>
 8005f90:	e759      	b.n	8005e46 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f94:	f000 f8ca 	bl	800612c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f98:	f000 fb9a 	bl	80066d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f9e:	f000 f917 	bl	80061d0 <prvIsQueueEmpty>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f43f af4e 	beq.w	8005e46 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005fb0:	f001 fd74 	bl	8007a9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fb6:	f000 f811 	bl	8005fdc <prvGetDisinheritPriorityAfterTimeout>
 8005fba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f84c 	bl	8007060 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fc8:	f001 fd96 	bl	8007af8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3738      	adds	r7, #56	; 0x38
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d006      	beq.n	8005ffa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e001      	b.n	8005ffe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
	}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d14d      	bne.n	80060ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 ffa6 	bl	8006f88 <xTaskPriorityDisinherit>
 800603c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	e043      	b.n	80060ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d119      	bne.n	8006080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6898      	ldr	r0, [r3, #8]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	461a      	mov	r2, r3
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	f002 f83a 	bl	80080d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	441a      	add	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	429a      	cmp	r2, r3
 8006074:	d32b      	bcc.n	80060ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]
 800607e:	e026      	b.n	80060ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68d8      	ldr	r0, [r3, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	461a      	mov	r2, r3
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	f002 f820 	bl	80080d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	425b      	negs	r3, r3
 800609a:	441a      	add	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d207      	bcs.n	80060bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	425b      	negs	r3, r3
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d105      	bne.n	80060ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060d6:	697b      	ldr	r3, [r7, #20]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d018      	beq.n	8006124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	441a      	add	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d303      	bcc.n	8006114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68d9      	ldr	r1, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	461a      	mov	r2, r3
 800611e:	6838      	ldr	r0, [r7, #0]
 8006120:	f001 ffd6 	bl	80080d0 <memcpy>
	}
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006134:	f001 fcb2 	bl	8007a9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800613e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006140:	e011      	b.n	8006166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d012      	beq.n	8006170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3324      	adds	r3, #36	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fcd2 	bl	8006af8 <xTaskRemoveFromEventList>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800615a:	f000 fda5 	bl	8006ca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	3b01      	subs	r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616a:	2b00      	cmp	r3, #0
 800616c:	dce9      	bgt.n	8006142 <prvUnlockQueue+0x16>
 800616e:	e000      	b.n	8006172 <prvUnlockQueue+0x46>
					break;
 8006170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	22ff      	movs	r2, #255	; 0xff
 8006176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800617a:	f001 fcbd 	bl	8007af8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800617e:	f001 fc8d 	bl	8007a9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800618a:	e011      	b.n	80061b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d012      	beq.n	80061ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3310      	adds	r3, #16
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fcad 	bl	8006af8 <xTaskRemoveFromEventList>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061a4:	f000 fd80 	bl	8006ca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dce9      	bgt.n	800618c <prvUnlockQueue+0x60>
 80061b8:	e000      	b.n	80061bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	22ff      	movs	r2, #255	; 0xff
 80061c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061c4:	f001 fc98 	bl	8007af8 <vPortExitCritical>
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061d8:	f001 fc60 	bl	8007a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e001      	b.n	80061ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ee:	f001 fc83 	bl	8007af8 <vPortExitCritical>

	return xReturn;
 80061f2:	68fb      	ldr	r3, [r7, #12]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006204:	f001 fc4a 	bl	8007a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006210:	429a      	cmp	r2, r3
 8006212:	d102      	bne.n	800621a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	e001      	b.n	800621e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800621e:	f001 fc6b 	bl	8007af8 <vPortExitCritical>

	return xReturn;
 8006222:	68fb      	ldr	r3, [r7, #12]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e014      	b.n	8006266 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800623c:	4a0e      	ldr	r2, [pc, #56]	; (8006278 <vQueueAddToRegistry+0x4c>)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006248:	490b      	ldr	r1, [pc, #44]	; (8006278 <vQueueAddToRegistry+0x4c>)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006252:	4a09      	ldr	r2, [pc, #36]	; (8006278 <vQueueAddToRegistry+0x4c>)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4413      	add	r3, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800625e:	e005      	b.n	800626c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3301      	adds	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b07      	cmp	r3, #7
 800626a:	d9e7      	bls.n	800623c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	20002048 	.word	0x20002048

0800627c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800628c:	f001 fc06 	bl	8007a9c <vPortEnterCritical>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006296:	b25b      	sxtb	r3, r3
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d103      	bne.n	80062a6 <vQueueWaitForMessageRestricted+0x2a>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d103      	bne.n	80062bc <vQueueWaitForMessageRestricted+0x40>
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062bc:	f001 fc1c 	bl	8007af8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	3324      	adds	r3, #36	; 0x24
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fbe7 	bl	8006aa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062d6:	6978      	ldr	r0, [r7, #20]
 80062d8:	f7ff ff28 	bl	800612c <prvUnlockQueue>
	}
 80062dc:	bf00      	nop
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	; 0x38
 80062e8:	af04      	add	r7, sp, #16
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <xTaskCreateStatic+0x28>
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	e7fe      	b.n	800630a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <xTaskCreateStatic+0x42>
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e7fe      	b.n	8006324 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006326:	235c      	movs	r3, #92	; 0x5c
 8006328:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b5c      	cmp	r3, #92	; 0x5c
 800632e:	d009      	beq.n	8006344 <xTaskCreateStatic+0x60>
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	e7fe      	b.n	8006342 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01e      	beq.n	8006388 <xTaskCreateStatic+0xa4>
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01b      	beq.n	8006388 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006358:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006362:	2300      	movs	r3, #0
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	9302      	str	r3, [sp, #8]
 800636a:	f107 0314 	add.w	r3, r7, #20
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f80b 	bl	8006396 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006382:	f000 f88f 	bl	80064a4 <prvAddNewTaskToReadyList>
 8006386:	e001      	b.n	800638c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800638c:	697b      	ldr	r3, [r7, #20]
	}
 800638e:	4618      	mov	r0, r3
 8006390:	3728      	adds	r7, #40	; 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b088      	sub	sp, #32
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	461a      	mov	r2, r3
 80063ae:	21a5      	movs	r1, #165	; 0xa5
 80063b0:	f001 fe99 	bl	80080e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063be:	3b01      	subs	r3, #1
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f023 0307 	bic.w	r3, r3, #7
 80063cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <prvInitialiseNewTask+0x56>
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e7fe      	b.n	80063ea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e012      	b.n	8006418 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	7819      	ldrb	r1, [r3, #0]
 80063fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	3334      	adds	r3, #52	; 0x34
 8006402:	460a      	mov	r2, r1
 8006404:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d006      	beq.n	8006420 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3301      	adds	r3, #1
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b0f      	cmp	r3, #15
 800641c:	d9e9      	bls.n	80063f2 <prvInitialiseNewTask+0x5c>
 800641e:	e000      	b.n	8006422 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006420:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	2b37      	cmp	r3, #55	; 0x37
 800642e:	d901      	bls.n	8006434 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006430:	2337      	movs	r3, #55	; 0x37
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	2200      	movs	r2, #0
 8006444:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	3304      	adds	r3, #4
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fffc 	bl	8005448 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	3318      	adds	r3, #24
 8006454:	4618      	mov	r0, r3
 8006456:	f7fe fff7 	bl	8005448 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	2200      	movs	r2, #0
 8006474:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68f9      	ldr	r1, [r7, #12]
 8006482:	69b8      	ldr	r0, [r7, #24]
 8006484:	f001 f9e2 	bl	800784c <pxPortInitialiseStack>
 8006488:	4602      	mov	r2, r0
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800649a:	bf00      	nop
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064ac:	f001 faf6 	bl	8007a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064b0:	4b2d      	ldr	r3, [pc, #180]	; (8006568 <prvAddNewTaskToReadyList+0xc4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4a2c      	ldr	r2, [pc, #176]	; (8006568 <prvAddNewTaskToReadyList+0xc4>)
 80064b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064ba:	4b2c      	ldr	r3, [pc, #176]	; (800656c <prvAddNewTaskToReadyList+0xc8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064c2:	4a2a      	ldr	r2, [pc, #168]	; (800656c <prvAddNewTaskToReadyList+0xc8>)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c8:	4b27      	ldr	r3, [pc, #156]	; (8006568 <prvAddNewTaskToReadyList+0xc4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d110      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064d0:	f000 fc0e 	bl	8006cf0 <prvInitialiseTaskLists>
 80064d4:	e00d      	b.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064d6:	4b26      	ldr	r3, [pc, #152]	; (8006570 <prvAddNewTaskToReadyList+0xcc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064de:	4b23      	ldr	r3, [pc, #140]	; (800656c <prvAddNewTaskToReadyList+0xc8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d802      	bhi.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064ec:	4a1f      	ldr	r2, [pc, #124]	; (800656c <prvAddNewTaskToReadyList+0xc8>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064f2:	4b20      	ldr	r3, [pc, #128]	; (8006574 <prvAddNewTaskToReadyList+0xd0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <prvAddNewTaskToReadyList+0xd0>)
 80064fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064fc:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <prvAddNewTaskToReadyList+0xd0>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <prvAddNewTaskToReadyList+0xd4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d903      	bls.n	8006518 <prvAddNewTaskToReadyList+0x74>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a18      	ldr	r2, [pc, #96]	; (8006578 <prvAddNewTaskToReadyList+0xd4>)
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4a15      	ldr	r2, [pc, #84]	; (800657c <prvAddNewTaskToReadyList+0xd8>)
 8006526:	441a      	add	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f7fe ff97 	bl	8005462 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006534:	f001 fae0 	bl	8007af8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006538:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <prvAddNewTaskToReadyList+0xcc>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <prvAddNewTaskToReadyList+0xc8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	429a      	cmp	r2, r3
 800654c:	d207      	bcs.n	800655e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <prvAddNewTaskToReadyList+0xdc>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20001280 	.word	0x20001280
 800656c:	20000dac 	.word	0x20000dac
 8006570:	2000128c 	.word	0x2000128c
 8006574:	2000129c 	.word	0x2000129c
 8006578:	20001288 	.word	0x20001288
 800657c:	20000db0 	.word	0x20000db0
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d016      	beq.n	80065c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006596:	4b13      	ldr	r3, [pc, #76]	; (80065e4 <vTaskDelay+0x60>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <vTaskDelay+0x2e>
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60bb      	str	r3, [r7, #8]
 80065b0:	e7fe      	b.n	80065b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80065b2:	f000 f87f 	bl	80066b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065b6:	2100      	movs	r1, #0
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fde9 	bl	8007190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065be:	f000 f887 	bl	80066d0 <xTaskResumeAll>
 80065c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <vTaskDelay+0x64>)
 80065cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065da:	bf00      	nop
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200012a8 	.word	0x200012a8
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	; 0x28
 80065f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065fa:	463a      	mov	r2, r7
 80065fc:	1d39      	adds	r1, r7, #4
 80065fe:	f107 0308 	add.w	r3, r7, #8
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fecc 	bl	80053a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	9202      	str	r2, [sp, #8]
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	2300      	movs	r3, #0
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2300      	movs	r3, #0
 8006618:	460a      	mov	r2, r1
 800661a:	4920      	ldr	r1, [pc, #128]	; (800669c <vTaskStartScheduler+0xb0>)
 800661c:	4820      	ldr	r0, [pc, #128]	; (80066a0 <vTaskStartScheduler+0xb4>)
 800661e:	f7ff fe61 	bl	80062e4 <xTaskCreateStatic>
 8006622:	4602      	mov	r2, r0
 8006624:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <vTaskStartScheduler+0xb8>)
 8006626:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <vTaskStartScheduler+0xb8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e001      	b.n	800663a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d102      	bne.n	8006646 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006640:	f000 fdfa 	bl	8007238 <xTimerCreateTimerTask>
 8006644:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d115      	bne.n	8006678 <vTaskStartScheduler+0x8c>
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800665e:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <vTaskStartScheduler+0xbc>)
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006666:	4b11      	ldr	r3, [pc, #68]	; (80066ac <vTaskStartScheduler+0xc0>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <vTaskStartScheduler+0xc4>)
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006672:	f001 f975 	bl	8007960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006676:	e00d      	b.n	8006694 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d109      	bne.n	8006694 <vTaskStartScheduler+0xa8>
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e7fe      	b.n	8006692 <vTaskStartScheduler+0xa6>
}
 8006694:	bf00      	nop
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	08008918 	.word	0x08008918
 80066a0:	08006cc1 	.word	0x08006cc1
 80066a4:	200012a4 	.word	0x200012a4
 80066a8:	200012a0 	.word	0x200012a0
 80066ac:	2000128c 	.word	0x2000128c
 80066b0:	20001284 	.word	0x20001284

080066b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <vTaskSuspendAll+0x18>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	4a03      	ldr	r2, [pc, #12]	; (80066cc <vTaskSuspendAll+0x18>)
 80066c0:	6013      	str	r3, [r2, #0]
}
 80066c2:	bf00      	nop
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	200012a8 	.word	0x200012a8

080066d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066da:	2300      	movs	r3, #0
 80066dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066de:	4b41      	ldr	r3, [pc, #260]	; (80067e4 <xTaskResumeAll+0x114>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <xTaskResumeAll+0x2a>
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	e7fe      	b.n	80066f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066fa:	f001 f9cf 	bl	8007a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066fe:	4b39      	ldr	r3, [pc, #228]	; (80067e4 <xTaskResumeAll+0x114>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3b01      	subs	r3, #1
 8006704:	4a37      	ldr	r2, [pc, #220]	; (80067e4 <xTaskResumeAll+0x114>)
 8006706:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006708:	4b36      	ldr	r3, [pc, #216]	; (80067e4 <xTaskResumeAll+0x114>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d162      	bne.n	80067d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006710:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <xTaskResumeAll+0x118>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d05e      	beq.n	80067d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006718:	e02f      	b.n	800677a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800671a:	4b34      	ldr	r3, [pc, #208]	; (80067ec <xTaskResumeAll+0x11c>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3318      	adds	r3, #24
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fef8 	bl	800551c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3304      	adds	r3, #4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe fef3 	bl	800551c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	4b2d      	ldr	r3, [pc, #180]	; (80067f0 <xTaskResumeAll+0x120>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d903      	bls.n	800674a <xTaskResumeAll+0x7a>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	4a2a      	ldr	r2, [pc, #168]	; (80067f0 <xTaskResumeAll+0x120>)
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <xTaskResumeAll+0x124>)
 8006758:	441a      	add	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7fe fe7e 	bl	8005462 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676a:	4b23      	ldr	r3, [pc, #140]	; (80067f8 <xTaskResumeAll+0x128>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	429a      	cmp	r2, r3
 8006772:	d302      	bcc.n	800677a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006774:	4b21      	ldr	r3, [pc, #132]	; (80067fc <xTaskResumeAll+0x12c>)
 8006776:	2201      	movs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800677a:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <xTaskResumeAll+0x11c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1cb      	bne.n	800671a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006788:	f000 fb4c 	bl	8006e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800678c:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <xTaskResumeAll+0x130>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d010      	beq.n	80067ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006798:	f000 f846 	bl	8006828 <xTaskIncrementTick>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80067a2:	4b16      	ldr	r3, [pc, #88]	; (80067fc <xTaskResumeAll+0x12c>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1f1      	bne.n	8006798 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <xTaskResumeAll+0x130>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <xTaskResumeAll+0x12c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067c2:	2301      	movs	r3, #1
 80067c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067c6:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <xTaskResumeAll+0x134>)
 80067c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067d6:	f001 f98f 	bl	8007af8 <vPortExitCritical>

	return xAlreadyYielded;
 80067da:	68bb      	ldr	r3, [r7, #8]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	200012a8 	.word	0x200012a8
 80067e8:	20001280 	.word	0x20001280
 80067ec:	20001240 	.word	0x20001240
 80067f0:	20001288 	.word	0x20001288
 80067f4:	20000db0 	.word	0x20000db0
 80067f8:	20000dac 	.word	0x20000dac
 80067fc:	20001294 	.word	0x20001294
 8006800:	20001290 	.word	0x20001290
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <xTaskGetTickCount+0x1c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006814:	687b      	ldr	r3, [r7, #4]
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20001284 	.word	0x20001284

08006828 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006832:	4b51      	ldr	r3, [pc, #324]	; (8006978 <xTaskIncrementTick+0x150>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f040 808d 	bne.w	8006956 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800683c:	4b4f      	ldr	r3, [pc, #316]	; (800697c <xTaskIncrementTick+0x154>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006844:	4a4d      	ldr	r2, [pc, #308]	; (800697c <xTaskIncrementTick+0x154>)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11f      	bne.n	8006890 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006850:	4b4b      	ldr	r3, [pc, #300]	; (8006980 <xTaskIncrementTick+0x158>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <xTaskIncrementTick+0x46>
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	e7fe      	b.n	800686c <xTaskIncrementTick+0x44>
 800686e:	4b44      	ldr	r3, [pc, #272]	; (8006980 <xTaskIncrementTick+0x158>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <xTaskIncrementTick+0x15c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a41      	ldr	r2, [pc, #260]	; (8006980 <xTaskIncrementTick+0x158>)
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4a41      	ldr	r2, [pc, #260]	; (8006984 <xTaskIncrementTick+0x15c>)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4b41      	ldr	r3, [pc, #260]	; (8006988 <xTaskIncrementTick+0x160>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	4a3f      	ldr	r2, [pc, #252]	; (8006988 <xTaskIncrementTick+0x160>)
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	f000 faca 	bl	8006e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006890:	4b3e      	ldr	r3, [pc, #248]	; (800698c <xTaskIncrementTick+0x164>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	429a      	cmp	r2, r3
 8006898:	d34e      	bcc.n	8006938 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800689a:	4b39      	ldr	r3, [pc, #228]	; (8006980 <xTaskIncrementTick+0x158>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <xTaskIncrementTick+0x80>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <xTaskIncrementTick+0x82>
 80068a8:	2300      	movs	r3, #0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ae:	4b37      	ldr	r3, [pc, #220]	; (800698c <xTaskIncrementTick+0x164>)
 80068b0:	f04f 32ff 	mov.w	r2, #4294967295
 80068b4:	601a      	str	r2, [r3, #0]
					break;
 80068b6:	e03f      	b.n	8006938 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068b8:	4b31      	ldr	r3, [pc, #196]	; (8006980 <xTaskIncrementTick+0x158>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d203      	bcs.n	80068d8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068d0:	4a2e      	ldr	r2, [pc, #184]	; (800698c <xTaskIncrementTick+0x164>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6013      	str	r3, [r2, #0]
						break;
 80068d6:	e02f      	b.n	8006938 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	3304      	adds	r3, #4
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fe1d 	bl	800551c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	3318      	adds	r3, #24
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fe14 	bl	800551c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	4b25      	ldr	r3, [pc, #148]	; (8006990 <xTaskIncrementTick+0x168>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d903      	bls.n	8006908 <xTaskIncrementTick+0xe0>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	4a22      	ldr	r2, [pc, #136]	; (8006990 <xTaskIncrementTick+0x168>)
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4a1f      	ldr	r2, [pc, #124]	; (8006994 <xTaskIncrementTick+0x16c>)
 8006916:	441a      	add	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	3304      	adds	r3, #4
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f7fe fd9f 	bl	8005462 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006928:	4b1b      	ldr	r3, [pc, #108]	; (8006998 <xTaskIncrementTick+0x170>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	429a      	cmp	r2, r3
 8006930:	d3b3      	bcc.n	800689a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006932:	2301      	movs	r3, #1
 8006934:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006936:	e7b0      	b.n	800689a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006938:	4b17      	ldr	r3, [pc, #92]	; (8006998 <xTaskIncrementTick+0x170>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	4915      	ldr	r1, [pc, #84]	; (8006994 <xTaskIncrementTick+0x16c>)
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d907      	bls.n	8006960 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e004      	b.n	8006960 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <xTaskIncrementTick+0x174>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	4a0f      	ldr	r2, [pc, #60]	; (800699c <xTaskIncrementTick+0x174>)
 800695e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006960:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <xTaskIncrementTick+0x178>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006968:	2301      	movs	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800696c:	697b      	ldr	r3, [r7, #20]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200012a8 	.word	0x200012a8
 800697c:	20001284 	.word	0x20001284
 8006980:	20001238 	.word	0x20001238
 8006984:	2000123c 	.word	0x2000123c
 8006988:	20001298 	.word	0x20001298
 800698c:	200012a0 	.word	0x200012a0
 8006990:	20001288 	.word	0x20001288
 8006994:	20000db0 	.word	0x20000db0
 8006998:	20000dac 	.word	0x20000dac
 800699c:	20001290 	.word	0x20001290
 80069a0:	20001294 	.word	0x20001294

080069a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069aa:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <vTaskSwitchContext+0xa4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069b2:	4b26      	ldr	r3, [pc, #152]	; (8006a4c <vTaskSwitchContext+0xa8>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069b8:	e040      	b.n	8006a3c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80069ba:	4b24      	ldr	r3, [pc, #144]	; (8006a4c <vTaskSwitchContext+0xa8>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80069c0:	4b23      	ldr	r3, [pc, #140]	; (8006a50 <vTaskSwitchContext+0xac>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e00f      	b.n	80069e8 <vTaskSwitchContext+0x44>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <vTaskSwitchContext+0x3e>
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
 80069e0:	e7fe      	b.n	80069e0 <vTaskSwitchContext+0x3c>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	491a      	ldr	r1, [pc, #104]	; (8006a54 <vTaskSwitchContext+0xb0>)
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0e5      	beq.n	80069c8 <vTaskSwitchContext+0x24>
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4a13      	ldr	r2, [pc, #76]	; (8006a54 <vTaskSwitchContext+0xb0>)
 8006a08:	4413      	add	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	605a      	str	r2, [r3, #4]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d104      	bne.n	8006a2c <vTaskSwitchContext+0x88>
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	605a      	str	r2, [r3, #4]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	4a09      	ldr	r2, [pc, #36]	; (8006a58 <vTaskSwitchContext+0xb4>)
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	4a06      	ldr	r2, [pc, #24]	; (8006a50 <vTaskSwitchContext+0xac>)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	200012a8 	.word	0x200012a8
 8006a4c:	20001294 	.word	0x20001294
 8006a50:	20001288 	.word	0x20001288
 8006a54:	20000db0 	.word	0x20000db0
 8006a58:	20000dac 	.word	0x20000dac

08006a5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <vTaskPlaceOnEventList+0x24>
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e7fe      	b.n	8006a7e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <vTaskPlaceOnEventList+0x44>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3318      	adds	r3, #24
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7fe fd0e 	bl	80054aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a8e:	2101      	movs	r1, #1
 8006a90:	6838      	ldr	r0, [r7, #0]
 8006a92:	f000 fb7d 	bl	8007190 <prvAddCurrentTaskToDelayedList>
}
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000dac 	.word	0x20000dac

08006aa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <vTaskPlaceOnEventListRestricted+0x26>
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e7fe      	b.n	8006ac8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <vTaskPlaceOnEventListRestricted+0x50>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3318      	adds	r3, #24
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7fe fcc5 	bl	8005462 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006ade:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	68b8      	ldr	r0, [r7, #8]
 8006ae8:	f000 fb52 	bl	8007190 <prvAddCurrentTaskToDelayedList>
	}
 8006aec:	bf00      	nop
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000dac 	.word	0x20000dac

08006af8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <xTaskRemoveFromEventList+0x2a>
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	e7fe      	b.n	8006b20 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	3318      	adds	r3, #24
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fe fcf8 	bl	800551c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <xTaskRemoveFromEventList+0xac>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11d      	bne.n	8006b70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fcef 	bl	800551c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b42:	4b19      	ldr	r3, [pc, #100]	; (8006ba8 <xTaskRemoveFromEventList+0xb0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d903      	bls.n	8006b52 <xTaskRemoveFromEventList+0x5a>
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	4a16      	ldr	r2, [pc, #88]	; (8006ba8 <xTaskRemoveFromEventList+0xb0>)
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4a13      	ldr	r2, [pc, #76]	; (8006bac <xTaskRemoveFromEventList+0xb4>)
 8006b60:	441a      	add	r2, r3
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f7fe fc7a 	bl	8005462 <vListInsertEnd>
 8006b6e:	e005      	b.n	8006b7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	3318      	adds	r3, #24
 8006b74:	4619      	mov	r1, r3
 8006b76:	480e      	ldr	r0, [pc, #56]	; (8006bb0 <xTaskRemoveFromEventList+0xb8>)
 8006b78:	f7fe fc73 	bl	8005462 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <xTaskRemoveFromEventList+0xbc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d905      	bls.n	8006b96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <xTaskRemoveFromEventList+0xc0>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e001      	b.n	8006b9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b9a:	697b      	ldr	r3, [r7, #20]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	200012a8 	.word	0x200012a8
 8006ba8:	20001288 	.word	0x20001288
 8006bac:	20000db0 	.word	0x20000db0
 8006bb0:	20001240 	.word	0x20001240
 8006bb4:	20000dac 	.word	0x20000dac
 8006bb8:	20001294 	.word	0x20001294

08006bbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <vTaskInternalSetTimeOutState+0x24>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <vTaskInternalSetTimeOutState+0x28>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	605a      	str	r2, [r3, #4]
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20001298 	.word	0x20001298
 8006be4:	20001284 	.word	0x20001284

08006be8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d109      	bne.n	8006c0c <xTaskCheckForTimeOut+0x24>
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	e7fe      	b.n	8006c0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <xTaskCheckForTimeOut+0x3e>
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e7fe      	b.n	8006c24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006c26:	f000 ff39 	bl	8007a9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <xTaskCheckForTimeOut+0xb8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c42:	d102      	bne.n	8006c4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e023      	b.n	8006c92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <xTaskCheckForTimeOut+0xbc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d007      	beq.n	8006c66 <xTaskCheckForTimeOut+0x7e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d302      	bcc.n	8006c66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c60:	2301      	movs	r3, #1
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	e015      	b.n	8006c92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d20b      	bcs.n	8006c88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1ad2      	subs	r2, r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff ff9d 	bl	8006bbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
 8006c86:	e004      	b.n	8006c92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c92:	f000 ff31 	bl	8007af8 <vPortExitCritical>

	return xReturn;
 8006c96:	69fb      	ldr	r3, [r7, #28]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20001284 	.word	0x20001284
 8006ca4:	20001298 	.word	0x20001298

08006ca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cac:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <vTaskMissedYield+0x14>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	20001294 	.word	0x20001294

08006cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cc8:	f000 f852 	bl	8006d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <prvIdleTask+0x28>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d9f9      	bls.n	8006cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <prvIdleTask+0x2c>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ce4:	e7f0      	b.n	8006cc8 <prvIdleTask+0x8>
 8006ce6:	bf00      	nop
 8006ce8:	20000db0 	.word	0x20000db0
 8006cec:	e000ed04 	.word	0xe000ed04

08006cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	e00c      	b.n	8006d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4a12      	ldr	r2, [pc, #72]	; (8006d50 <prvInitialiseTaskLists+0x60>)
 8006d08:	4413      	add	r3, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fb7c 	bl	8005408 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3301      	adds	r3, #1
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b37      	cmp	r3, #55	; 0x37
 8006d1a:	d9ef      	bls.n	8006cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d1c:	480d      	ldr	r0, [pc, #52]	; (8006d54 <prvInitialiseTaskLists+0x64>)
 8006d1e:	f7fe fb73 	bl	8005408 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d22:	480d      	ldr	r0, [pc, #52]	; (8006d58 <prvInitialiseTaskLists+0x68>)
 8006d24:	f7fe fb70 	bl	8005408 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d28:	480c      	ldr	r0, [pc, #48]	; (8006d5c <prvInitialiseTaskLists+0x6c>)
 8006d2a:	f7fe fb6d 	bl	8005408 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d2e:	480c      	ldr	r0, [pc, #48]	; (8006d60 <prvInitialiseTaskLists+0x70>)
 8006d30:	f7fe fb6a 	bl	8005408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d34:	480b      	ldr	r0, [pc, #44]	; (8006d64 <prvInitialiseTaskLists+0x74>)
 8006d36:	f7fe fb67 	bl	8005408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <prvInitialiseTaskLists+0x78>)
 8006d3c:	4a05      	ldr	r2, [pc, #20]	; (8006d54 <prvInitialiseTaskLists+0x64>)
 8006d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <prvInitialiseTaskLists+0x7c>)
 8006d42:	4a05      	ldr	r2, [pc, #20]	; (8006d58 <prvInitialiseTaskLists+0x68>)
 8006d44:	601a      	str	r2, [r3, #0]
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000db0 	.word	0x20000db0
 8006d54:	20001210 	.word	0x20001210
 8006d58:	20001224 	.word	0x20001224
 8006d5c:	20001240 	.word	0x20001240
 8006d60:	20001254 	.word	0x20001254
 8006d64:	2000126c 	.word	0x2000126c
 8006d68:	20001238 	.word	0x20001238
 8006d6c:	2000123c 	.word	0x2000123c

08006d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d76:	e019      	b.n	8006dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d78:	f000 fe90 	bl	8007a9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d7c:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <prvCheckTasksWaitingTermination+0x4c>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fbc7 	bl	800551c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <prvCheckTasksWaitingTermination+0x50>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	4a0a      	ldr	r2, [pc, #40]	; (8006dc0 <prvCheckTasksWaitingTermination+0x50>)
 8006d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d98:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <prvCheckTasksWaitingTermination+0x54>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <prvCheckTasksWaitingTermination+0x54>)
 8006da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006da2:	f000 fea9 	bl	8007af8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f80e 	bl	8006dc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <prvCheckTasksWaitingTermination+0x54>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e1      	bne.n	8006d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20001254 	.word	0x20001254
 8006dc0:	20001280 	.word	0x20001280
 8006dc4:	20001268 	.word	0x20001268

08006dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d108      	bne.n	8006dec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f838 	bl	8007e54 <vPortFree>
				vPortFree( pxTCB );
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 f835 	bl	8007e54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dea:	e017      	b.n	8006e1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d103      	bne.n	8006dfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 f82c 	bl	8007e54 <vPortFree>
	}
 8006dfc:	e00e      	b.n	8006e1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d009      	beq.n	8006e1c <prvDeleteTCB+0x54>
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	e7fe      	b.n	8006e1a <prvDeleteTCB+0x52>
	}
 8006e1c:	bf00      	nop
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e2a:	4b0f      	ldr	r3, [pc, #60]	; (8006e68 <prvResetNextTaskUnblockTime+0x44>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <prvResetNextTaskUnblockTime+0x14>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <prvResetNextTaskUnblockTime+0x16>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <prvResetNextTaskUnblockTime+0x48>)
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295
 8006e44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e46:	e008      	b.n	8006e5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <prvResetNextTaskUnblockTime+0x44>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	4a05      	ldr	r2, [pc, #20]	; (8006e6c <prvResetNextTaskUnblockTime+0x48>)
 8006e58:	6013      	str	r3, [r2, #0]
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20001238 	.word	0x20001238
 8006e6c:	200012a0 	.word	0x200012a0

08006e70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e76:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <xTaskGetSchedulerState+0x34>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d102      	bne.n	8006e84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	e008      	b.n	8006e96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <xTaskGetSchedulerState+0x38>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	e001      	b.n	8006e96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e92:	2300      	movs	r3, #0
 8006e94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e96:	687b      	ldr	r3, [r7, #4]
	}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	2000128c 	.word	0x2000128c
 8006ea8:	200012a8 	.word	0x200012a8

08006eac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d056      	beq.n	8006f70 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec6:	4b2d      	ldr	r3, [pc, #180]	; (8006f7c <xTaskPriorityInherit+0xd0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d246      	bcs.n	8006f5e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db06      	blt.n	8006ee6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	4b28      	ldr	r3, [pc, #160]	; (8006f7c <xTaskPriorityInherit+0xd0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6959      	ldr	r1, [r3, #20]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4a22      	ldr	r2, [pc, #136]	; (8006f80 <xTaskPriorityInherit+0xd4>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d101      	bne.n	8006f02 <xTaskPriorityInherit+0x56>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <xTaskPriorityInherit+0x58>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d022      	beq.n	8006f4e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fb05 	bl	800551c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f12:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <xTaskPriorityInherit+0xd0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4b18      	ldr	r3, [pc, #96]	; (8006f84 <xTaskPriorityInherit+0xd8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d903      	bls.n	8006f30 <xTaskPriorityInherit+0x84>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4a15      	ldr	r2, [pc, #84]	; (8006f84 <xTaskPriorityInherit+0xd8>)
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <xTaskPriorityInherit+0xd4>)
 8006f3e:	441a      	add	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fe fa8b 	bl	8005462 <vListInsertEnd>
 8006f4c:	e004      	b.n	8006f58 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <xTaskPriorityInherit+0xd0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e008      	b.n	8006f70 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f62:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <xTaskPriorityInherit+0xd0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d201      	bcs.n	8006f70 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f70:	68fb      	ldr	r3, [r7, #12]
	}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000dac 	.word	0x20000dac
 8006f80:	20000db0 	.word	0x20000db0
 8006f84:	20001288 	.word	0x20001288

08006f88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d054      	beq.n	8007048 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f9e:	4b2d      	ldr	r3, [pc, #180]	; (8007054 <xTaskPriorityDisinherit+0xcc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d009      	beq.n	8006fbc <xTaskPriorityDisinherit+0x34>
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e7fe      	b.n	8006fba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d109      	bne.n	8006fd8 <xTaskPriorityDisinherit+0x50>
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	e7fe      	b.n	8006fd6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	1e5a      	subs	r2, r3, #1
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d02c      	beq.n	8007048 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d128      	bne.n	8007048 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fa8e 	bl	800551c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007018:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <xTaskPriorityDisinherit+0xd0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d903      	bls.n	8007028 <xTaskPriorityDisinherit+0xa0>
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	4a0c      	ldr	r2, [pc, #48]	; (8007058 <xTaskPriorityDisinherit+0xd0>)
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4a09      	ldr	r2, [pc, #36]	; (800705c <xTaskPriorityDisinherit+0xd4>)
 8007036:	441a      	add	r2, r3
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3304      	adds	r3, #4
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7fe fa0f 	bl	8005462 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007044:	2301      	movs	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007048:	697b      	ldr	r3, [r7, #20]
	}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000dac 	.word	0x20000dac
 8007058:	20001288 	.word	0x20001288
 800705c:	20000db0 	.word	0x20000db0

08007060 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800706e:	2301      	movs	r3, #1
 8007070:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d06d      	beq.n	8007154 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	e7fe      	b.n	8007092 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d902      	bls.n	80070a4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	e002      	b.n	80070aa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d04f      	beq.n	8007154 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d14a      	bne.n	8007154 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80070be:	4b27      	ldr	r3, [pc, #156]	; (800715c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d109      	bne.n	80070dc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	e7fe      	b.n	80070da <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	69fa      	ldr	r2, [r7, #28]
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	db04      	blt.n	80070fa <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	6959      	ldr	r1, [r3, #20]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4a15      	ldr	r2, [pc, #84]	; (8007160 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800710a:	4413      	add	r3, r2
 800710c:	4299      	cmp	r1, r3
 800710e:	d101      	bne.n	8007114 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007114:	2300      	movs	r3, #0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01c      	beq.n	8007154 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	3304      	adds	r3, #4
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe f9fc 	bl	800551c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d903      	bls.n	8007138 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	4a0b      	ldr	r2, [pc, #44]	; (8007164 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4a06      	ldr	r2, [pc, #24]	; (8007160 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007146:	441a      	add	r2, r3
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	3304      	adds	r3, #4
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7fe f987 	bl	8005462 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007154:	bf00      	nop
 8007156:	3720      	adds	r7, #32
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000dac 	.word	0x20000dac
 8007160:	20000db0 	.word	0x20000db0
 8007164:	20001288 	.word	0x20001288

08007168 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800716c:	4b07      	ldr	r3, [pc, #28]	; (800718c <pvTaskIncrementMutexHeldCount+0x24>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <pvTaskIncrementMutexHeldCount+0x24>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800717a:	3201      	adds	r2, #1
 800717c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <pvTaskIncrementMutexHeldCount+0x24>)
 8007180:	681b      	ldr	r3, [r3, #0]
	}
 8007182:	4618      	mov	r0, r3
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20000dac 	.word	0x20000dac

08007190 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800719a:	4b21      	ldr	r3, [pc, #132]	; (8007220 <prvAddCurrentTaskToDelayedList+0x90>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071a0:	4b20      	ldr	r3, [pc, #128]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe f9b8 	bl	800551c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d10a      	bne.n	80071ca <prvAddCurrentTaskToDelayedList+0x3a>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071ba:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3304      	adds	r3, #4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4819      	ldr	r0, [pc, #100]	; (8007228 <prvAddCurrentTaskToDelayedList+0x98>)
 80071c4:	f7fe f94d 	bl	8005462 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071c8:	e026      	b.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4413      	add	r3, r2
 80071d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071d2:	4b14      	ldr	r3, [pc, #80]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d209      	bcs.n	80071f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <prvAddCurrentTaskToDelayedList+0x9c>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f7fe f95b 	bl	80054aa <vListInsert>
}
 80071f4:	e010      	b.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3304      	adds	r3, #4
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f7fe f951 	bl	80054aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	429a      	cmp	r2, r3
 8007210:	d202      	bcs.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007212:	4a08      	ldr	r2, [pc, #32]	; (8007234 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6013      	str	r3, [r2, #0]
}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20001284 	.word	0x20001284
 8007224:	20000dac 	.word	0x20000dac
 8007228:	2000126c 	.word	0x2000126c
 800722c:	2000123c 	.word	0x2000123c
 8007230:	20001238 	.word	0x20001238
 8007234:	200012a0 	.word	0x200012a0

08007238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	; 0x28
 800723c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007242:	f000 fac3 	bl	80077cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <xTimerCreateTimerTask+0x80>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d021      	beq.n	8007292 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007256:	1d3a      	adds	r2, r7, #4
 8007258:	f107 0108 	add.w	r1, r7, #8
 800725c:	f107 030c 	add.w	r3, r7, #12
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe f8b7 	bl	80053d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	2302      	movs	r3, #2
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	460a      	mov	r2, r1
 8007278:	4910      	ldr	r1, [pc, #64]	; (80072bc <xTimerCreateTimerTask+0x84>)
 800727a:	4811      	ldr	r0, [pc, #68]	; (80072c0 <xTimerCreateTimerTask+0x88>)
 800727c:	f7ff f832 	bl	80062e4 <xTaskCreateStatic>
 8007280:	4602      	mov	r2, r0
 8007282:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <xTimerCreateTimerTask+0x8c>)
 8007284:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <xTimerCreateTimerTask+0x8c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800728e:	2301      	movs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d109      	bne.n	80072ac <xTimerCreateTimerTask+0x74>
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	e7fe      	b.n	80072aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80072ac:	697b      	ldr	r3, [r7, #20]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200012dc 	.word	0x200012dc
 80072bc:	08008920 	.word	0x08008920
 80072c0:	080073e1 	.word	0x080073e1
 80072c4:	200012e0 	.word	0x200012e0

080072c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <xTimerGenericCommand+0x2c>
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	623b      	str	r3, [r7, #32]
 80072f2:	e7fe      	b.n	80072f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072f4:	4b19      	ldr	r3, [pc, #100]	; (800735c <xTimerGenericCommand+0x94>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02a      	beq.n	8007352 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b05      	cmp	r3, #5
 800730c:	dc18      	bgt.n	8007340 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800730e:	f7ff fdaf 	bl	8006e70 <xTaskGetSchedulerState>
 8007312:	4603      	mov	r3, r0
 8007314:	2b02      	cmp	r3, #2
 8007316:	d109      	bne.n	800732c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007318:	4b10      	ldr	r3, [pc, #64]	; (800735c <xTimerGenericCommand+0x94>)
 800731a:	6818      	ldr	r0, [r3, #0]
 800731c:	f107 0110 	add.w	r1, r7, #16
 8007320:	2300      	movs	r3, #0
 8007322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007324:	f7fe fa5e 	bl	80057e4 <xQueueGenericSend>
 8007328:	6278      	str	r0, [r7, #36]	; 0x24
 800732a:	e012      	b.n	8007352 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800732c:	4b0b      	ldr	r3, [pc, #44]	; (800735c <xTimerGenericCommand+0x94>)
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	f107 0110 	add.w	r1, r7, #16
 8007334:	2300      	movs	r3, #0
 8007336:	2200      	movs	r2, #0
 8007338:	f7fe fa54 	bl	80057e4 <xQueueGenericSend>
 800733c:	6278      	str	r0, [r7, #36]	; 0x24
 800733e:	e008      	b.n	8007352 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007340:	4b06      	ldr	r3, [pc, #24]	; (800735c <xTimerGenericCommand+0x94>)
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	f107 0110 	add.w	r1, r7, #16
 8007348:	2300      	movs	r3, #0
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	f7fe fb44 	bl	80059d8 <xQueueGenericSendFromISR>
 8007350:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007354:	4618      	mov	r0, r3
 8007356:	3728      	adds	r7, #40	; 0x28
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	200012dc 	.word	0x200012dc

08007360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af02      	add	r7, sp, #8
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800736a:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <prvProcessExpiredTimer+0x7c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe f8cf 	bl	800551c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d121      	bne.n	80073ca <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	18d1      	adds	r1, r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	6978      	ldr	r0, [r7, #20]
 8007394:	f000 f8c8 	bl	8007528 <prvInsertTimerInActiveList>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d015      	beq.n	80073ca <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800739e:	2300      	movs	r3, #0
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	2300      	movs	r3, #0
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	2100      	movs	r1, #0
 80073a8:	6978      	ldr	r0, [r7, #20]
 80073aa:	f7ff ff8d 	bl	80072c8 <xTimerGenericCommand>
 80073ae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <prvProcessExpiredTimer+0x6a>
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	e7fe      	b.n	80073c8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	6978      	ldr	r0, [r7, #20]
 80073d0:	4798      	blx	r3
}
 80073d2:	bf00      	nop
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200012d4 	.word	0x200012d4

080073e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073e8:	f107 0308 	add.w	r3, r7, #8
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 f857 	bl	80074a0 <prvGetNextExpireTime>
 80073f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4619      	mov	r1, r3
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f803 	bl	8007404 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073fe:	f000 f8d5 	bl	80075ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007402:	e7f1      	b.n	80073e8 <prvTimerTask+0x8>

08007404 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800740e:	f7ff f951 	bl	80066b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007412:	f107 0308 	add.w	r3, r7, #8
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f866 	bl	80074e8 <prvSampleTimeNow>
 800741c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d130      	bne.n	8007486 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <prvProcessTimerOrBlockTask+0x3c>
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	429a      	cmp	r2, r3
 8007430:	d806      	bhi.n	8007440 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007432:	f7ff f94d 	bl	80066d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff ff91 	bl	8007360 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800743e:	e024      	b.n	800748a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007446:	4b13      	ldr	r3, [pc, #76]	; (8007494 <prvProcessTimerOrBlockTask+0x90>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007458:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <prvProcessTimerOrBlockTask+0x94>)
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	4619      	mov	r1, r3
 8007466:	f7fe ff09 	bl	800627c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800746a:	f7ff f931 	bl	80066d0 <xTaskResumeAll>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <prvProcessTimerOrBlockTask+0x98>)
 8007476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	f3bf 8f6f 	isb	sy
}
 8007484:	e001      	b.n	800748a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007486:	f7ff f923 	bl	80066d0 <xTaskResumeAll>
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200012d8 	.word	0x200012d8
 8007498:	200012dc 	.word	0x200012dc
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074a8:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <prvGetNextExpireTime+0x44>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <prvGetNextExpireTime+0x44>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e001      	b.n	80074d6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074d6:	68fb      	ldr	r3, [r7, #12]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	200012d4 	.word	0x200012d4

080074e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80074f0:	f7ff f98a 	bl	8006808 <xTaskGetTickCount>
 80074f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <prvSampleTimeNow+0x3c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d205      	bcs.n	800750c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007500:	f000 f904 	bl	800770c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e002      	b.n	8007512 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007512:	4a04      	ldr	r2, [pc, #16]	; (8007524 <prvSampleTimeNow+0x3c>)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007518:	68fb      	ldr	r3, [r7, #12]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200012e4 	.word	0x200012e4

08007528 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	429a      	cmp	r2, r3
 800754c:	d812      	bhi.n	8007574 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	429a      	cmp	r2, r3
 800755a:	d302      	bcc.n	8007562 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e01b      	b.n	800759a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007562:	4b10      	ldr	r3, [pc, #64]	; (80075a4 <prvInsertTimerInActiveList+0x7c>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f7fd ff9c 	bl	80054aa <vListInsert>
 8007572:	e012      	b.n	800759a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d206      	bcs.n	800758a <prvInsertTimerInActiveList+0x62>
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d302      	bcc.n	800758a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007584:	2301      	movs	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e007      	b.n	800759a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <prvInsertTimerInActiveList+0x80>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3304      	adds	r3, #4
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7fd ff88 	bl	80054aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800759a:	697b      	ldr	r3, [r7, #20]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	200012d8 	.word	0x200012d8
 80075a8:	200012d4 	.word	0x200012d4

080075ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08e      	sub	sp, #56	; 0x38
 80075b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075b2:	e099      	b.n	80076e8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	da17      	bge.n	80075ea <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075ba:	1d3b      	adds	r3, r7, #4
 80075bc:	3304      	adds	r3, #4
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <prvProcessReceivedCommands+0x2e>
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	e7fe      	b.n	80075d8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e0:	6850      	ldr	r0, [r2, #4]
 80075e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e4:	6892      	ldr	r2, [r2, #8]
 80075e6:	4611      	mov	r1, r2
 80075e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	db7a      	blt.n	80076e6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	3304      	adds	r3, #4
 8007600:	4618      	mov	r0, r3
 8007602:	f7fd ff8b 	bl	800551c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007606:	463b      	mov	r3, r7
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff ff6d 	bl	80074e8 <prvSampleTimeNow>
 800760e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b09      	cmp	r3, #9
 8007614:	d868      	bhi.n	80076e8 <prvProcessReceivedCommands+0x13c>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <prvProcessReceivedCommands+0x70>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	08007645 	.word	0x08007645
 8007620:	08007645 	.word	0x08007645
 8007624:	08007645 	.word	0x08007645
 8007628:	080076e9 	.word	0x080076e9
 800762c:	0800769f 	.word	0x0800769f
 8007630:	080076d5 	.word	0x080076d5
 8007634:	08007645 	.word	0x08007645
 8007638:	08007645 	.word	0x08007645
 800763c:	080076e9 	.word	0x080076e9
 8007640:	0800769f 	.word	0x0800769f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	18d1      	adds	r1, r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007652:	f7ff ff69 	bl	8007528 <prvInsertTimerInActiveList>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d045      	beq.n	80076e8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007662:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d13d      	bne.n	80076e8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	441a      	add	r2, r3
 8007674:	2300      	movs	r3, #0
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	2300      	movs	r3, #0
 800767a:	2100      	movs	r1, #0
 800767c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767e:	f7ff fe23 	bl	80072c8 <xTimerGenericCommand>
 8007682:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d12e      	bne.n	80076e8 <prvProcessReceivedCommands+0x13c>
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e7fe      	b.n	800769c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d109      	bne.n	80076c0 <prvProcessReceivedCommands+0x114>
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e7fe      	b.n	80076be <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	18d1      	adds	r1, r2, r3
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ce:	f7ff ff2b 	bl	8007528 <prvInsertTimerInActiveList>
					break;
 80076d2:	e009      	b.n	80076e8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80076de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076e0:	f000 fbb8 	bl	8007e54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076e4:	e000      	b.n	80076e8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80076e6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076e8:	4b07      	ldr	r3, [pc, #28]	; (8007708 <prvProcessReceivedCommands+0x15c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	1d39      	adds	r1, r7, #4
 80076ee:	2200      	movs	r2, #0
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fa8f 	bl	8005c14 <xQueueReceive>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f47f af5b 	bne.w	80075b4 <prvProcessReceivedCommands+0x8>
	}
}
 80076fe:	bf00      	nop
 8007700:	3730      	adds	r7, #48	; 0x30
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	200012dc 	.word	0x200012dc

0800770c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007712:	e044      	b.n	800779e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007714:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <prvSwitchTimerLists+0xb8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800771e:	4b29      	ldr	r3, [pc, #164]	; (80077c4 <prvSwitchTimerLists+0xb8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3304      	adds	r3, #4
 800772c:	4618      	mov	r0, r3
 800772e:	f7fd fef5 	bl	800551c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d12d      	bne.n	800779e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4413      	add	r3, r2
 800774a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	429a      	cmp	r2, r3
 8007752:	d90e      	bls.n	8007772 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007760:	4b18      	ldr	r3, [pc, #96]	; (80077c4 <prvSwitchTimerLists+0xb8>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3304      	adds	r3, #4
 8007768:	4619      	mov	r1, r3
 800776a:	4610      	mov	r0, r2
 800776c:	f7fd fe9d 	bl	80054aa <vListInsert>
 8007770:	e015      	b.n	800779e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007772:	2300      	movs	r3, #0
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	2300      	movs	r3, #0
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	2100      	movs	r1, #0
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7ff fda3 	bl	80072c8 <xTimerGenericCommand>
 8007782:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d109      	bne.n	800779e <prvSwitchTimerLists+0x92>
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	e7fe      	b.n	800779c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <prvSwitchTimerLists+0xb8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1b5      	bne.n	8007714 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <prvSwitchTimerLists+0xb8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <prvSwitchTimerLists+0xbc>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a04      	ldr	r2, [pc, #16]	; (80077c4 <prvSwitchTimerLists+0xb8>)
 80077b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077b6:	4a04      	ldr	r2, [pc, #16]	; (80077c8 <prvSwitchTimerLists+0xbc>)
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	6013      	str	r3, [r2, #0]
}
 80077bc:	bf00      	nop
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200012d4 	.word	0x200012d4
 80077c8:	200012d8 	.word	0x200012d8

080077cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077d2:	f000 f963 	bl	8007a9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <prvCheckForValidListAndQueue+0x60>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d120      	bne.n	8007820 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077de:	4814      	ldr	r0, [pc, #80]	; (8007830 <prvCheckForValidListAndQueue+0x64>)
 80077e0:	f7fd fe12 	bl	8005408 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077e4:	4813      	ldr	r0, [pc, #76]	; (8007834 <prvCheckForValidListAndQueue+0x68>)
 80077e6:	f7fd fe0f 	bl	8005408 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077ea:	4b13      	ldr	r3, [pc, #76]	; (8007838 <prvCheckForValidListAndQueue+0x6c>)
 80077ec:	4a10      	ldr	r2, [pc, #64]	; (8007830 <prvCheckForValidListAndQueue+0x64>)
 80077ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <prvCheckForValidListAndQueue+0x70>)
 80077f2:	4a10      	ldr	r2, [pc, #64]	; (8007834 <prvCheckForValidListAndQueue+0x68>)
 80077f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077f6:	2300      	movs	r3, #0
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4b11      	ldr	r3, [pc, #68]	; (8007840 <prvCheckForValidListAndQueue+0x74>)
 80077fc:	4a11      	ldr	r2, [pc, #68]	; (8007844 <prvCheckForValidListAndQueue+0x78>)
 80077fe:	2110      	movs	r1, #16
 8007800:	200a      	movs	r0, #10
 8007802:	f7fd ff1d 	bl	8005640 <xQueueGenericCreateStatic>
 8007806:	4602      	mov	r2, r0
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <prvCheckForValidListAndQueue+0x60>)
 800780a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800780c:	4b07      	ldr	r3, [pc, #28]	; (800782c <prvCheckForValidListAndQueue+0x60>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <prvCheckForValidListAndQueue+0x60>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	490b      	ldr	r1, [pc, #44]	; (8007848 <prvCheckForValidListAndQueue+0x7c>)
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fd06 	bl	800622c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007820:	f000 f96a 	bl	8007af8 <vPortExitCritical>
}
 8007824:	bf00      	nop
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	200012dc 	.word	0x200012dc
 8007830:	200012ac 	.word	0x200012ac
 8007834:	200012c0 	.word	0x200012c0
 8007838:	200012d4 	.word	0x200012d4
 800783c:	200012d8 	.word	0x200012d8
 8007840:	20001388 	.word	0x20001388
 8007844:	200012e8 	.word	0x200012e8
 8007848:	08008928 	.word	0x08008928

0800784c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3b04      	subs	r3, #4
 800785c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3b04      	subs	r3, #4
 800786a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3b04      	subs	r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800787c:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <pxPortInitialiseStack+0x64>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3b14      	subs	r3, #20
 8007886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3b04      	subs	r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f06f 0202 	mvn.w	r2, #2
 800789a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3b20      	subs	r3, #32
 80078a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	080078b5 	.word	0x080078b5

080078b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <prvTaskExitError+0x50>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d009      	beq.n	80078dc <prvTaskExitError+0x28>
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	e7fe      	b.n	80078da <prvTaskExitError+0x26>
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078ee:	bf00      	nop
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0fc      	beq.n	80078f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000018 	.word	0x20000018
	...

08007910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <pxCurrentTCBConst2>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	f380 8809 	msr	PSP, r0
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	4770      	bx	lr
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst2>:
 8007930:	20000dac 	.word	0x20000dac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007938:	4808      	ldr	r0, [pc, #32]	; (800795c <prvPortStartFirstTask+0x24>)
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	f380 8808 	msr	MSP, r0
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8814 	msr	CONTROL, r0
 800794a:	b662      	cpsie	i
 800794c:	b661      	cpsie	f
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	df00      	svc	0
 8007958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800795a:	bf00      	nop
 800795c:	e000ed08 	.word	0xe000ed08

08007960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007966:	4b44      	ldr	r3, [pc, #272]	; (8007a78 <xPortStartScheduler+0x118>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a44      	ldr	r2, [pc, #272]	; (8007a7c <xPortStartScheduler+0x11c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d109      	bne.n	8007984 <xPortStartScheduler+0x24>
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	e7fe      	b.n	8007982 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007984:	4b3c      	ldr	r3, [pc, #240]	; (8007a78 <xPortStartScheduler+0x118>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a3d      	ldr	r2, [pc, #244]	; (8007a80 <xPortStartScheduler+0x120>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d109      	bne.n	80079a2 <xPortStartScheduler+0x42>
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	e7fe      	b.n	80079a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079a2:	4b38      	ldr	r3, [pc, #224]	; (8007a84 <xPortStartScheduler+0x124>)
 80079a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	22ff      	movs	r2, #255	; 0xff
 80079b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	4b30      	ldr	r3, [pc, #192]	; (8007a88 <xPortStartScheduler+0x128>)
 80079c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ca:	4b30      	ldr	r3, [pc, #192]	; (8007a8c <xPortStartScheduler+0x12c>)
 80079cc:	2207      	movs	r2, #7
 80079ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079d0:	e009      	b.n	80079e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80079d2:	4b2e      	ldr	r3, [pc, #184]	; (8007a8c <xPortStartScheduler+0x12c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	4a2c      	ldr	r2, [pc, #176]	; (8007a8c <xPortStartScheduler+0x12c>)
 80079da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d0ef      	beq.n	80079d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079f2:	4b26      	ldr	r3, [pc, #152]	; (8007a8c <xPortStartScheduler+0x12c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1c3 0307 	rsb	r3, r3, #7
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d009      	beq.n	8007a12 <xPortStartScheduler+0xb2>
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	e7fe      	b.n	8007a10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a12:	4b1e      	ldr	r3, [pc, #120]	; (8007a8c <xPortStartScheduler+0x12c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <xPortStartScheduler+0x12c>)
 8007a1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a1c:	4b1b      	ldr	r3, [pc, #108]	; (8007a8c <xPortStartScheduler+0x12c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a24:	4a19      	ldr	r2, [pc, #100]	; (8007a8c <xPortStartScheduler+0x12c>)
 8007a26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a30:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <xPortStartScheduler+0x130>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a16      	ldr	r2, [pc, #88]	; (8007a90 <xPortStartScheduler+0x130>)
 8007a36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a3c:	4b14      	ldr	r3, [pc, #80]	; (8007a90 <xPortStartScheduler+0x130>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a13      	ldr	r2, [pc, #76]	; (8007a90 <xPortStartScheduler+0x130>)
 8007a42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a48:	f000 f8d6 	bl	8007bf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a4c:	4b11      	ldr	r3, [pc, #68]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a52:	f000 f8f5 	bl	8007c40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a0f      	ldr	r2, [pc, #60]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a62:	f7ff ff69 	bl	8007938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a66:	f7fe ff9d 	bl	80069a4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a6a:	f7ff ff23 	bl	80078b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	e000ed00 	.word	0xe000ed00
 8007a7c:	410fc271 	.word	0x410fc271
 8007a80:	410fc270 	.word	0x410fc270
 8007a84:	e000e400 	.word	0xe000e400
 8007a88:	200013d8 	.word	0x200013d8
 8007a8c:	200013dc 	.word	0x200013dc
 8007a90:	e000ed20 	.word	0xe000ed20
 8007a94:	20000018 	.word	0x20000018
 8007a98:	e000ef34 	.word	0xe000ef34

08007a9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <vPortEnterCritical+0x54>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	4a0d      	ldr	r2, [pc, #52]	; (8007af0 <vPortEnterCritical+0x54>)
 8007abc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <vPortEnterCritical+0x54>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d10e      	bne.n	8007ae4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <vPortEnterCritical+0x58>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <vPortEnterCritical+0x48>
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	603b      	str	r3, [r7, #0]
 8007ae2:	e7fe      	b.n	8007ae2 <vPortEnterCritical+0x46>
	}
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	20000018 	.word	0x20000018
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007afe:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <vPortExitCritical+0x4c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <vPortExitCritical+0x22>
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	607b      	str	r3, [r7, #4]
 8007b18:	e7fe      	b.n	8007b18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007b1a:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <vPortExitCritical+0x4c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <vPortExitCritical+0x4c>)
 8007b22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b24:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <vPortExitCritical+0x4c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <vPortExitCritical+0x3e>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000018 	.word	0x20000018
	...

08007b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b50:	f3ef 8009 	mrs	r0, PSP
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	4b15      	ldr	r3, [pc, #84]	; (8007bb0 <pxCurrentTCBConst>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	f01e 0f10 	tst.w	lr, #16
 8007b60:	bf08      	it	eq
 8007b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6a:	6010      	str	r0, [r2, #0]
 8007b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b74:	f380 8811 	msr	BASEPRI, r0
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f7fe ff10 	bl	80069a4 <vTaskSwitchContext>
 8007b84:	f04f 0000 	mov.w	r0, #0
 8007b88:	f380 8811 	msr	BASEPRI, r0
 8007b8c:	bc09      	pop	{r0, r3}
 8007b8e:	6819      	ldr	r1, [r3, #0]
 8007b90:	6808      	ldr	r0, [r1, #0]
 8007b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b96:	f01e 0f10 	tst.w	lr, #16
 8007b9a:	bf08      	it	eq
 8007b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ba0:	f380 8809 	msr	PSP, r0
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	f3af 8000 	nop.w

08007bb0 <pxCurrentTCBConst>:
 8007bb0:	20000dac 	.word	0x20000dac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop

08007bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bd0:	f7fe fe2a 	bl	8006828 <xTaskIncrementTick>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bda:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <SysTick_Handler+0x3c>)
 8007bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	2300      	movs	r3, #0
 8007be4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <vPortSetupTimerInterrupt+0x34>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <vPortSetupTimerInterrupt+0x38>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <vPortSetupTimerInterrupt+0x3c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a0a      	ldr	r2, [pc, #40]	; (8007c38 <vPortSetupTimerInterrupt+0x40>)
 8007c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c12:	099b      	lsrs	r3, r3, #6
 8007c14:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <vPortSetupTimerInterrupt+0x44>)
 8007c16:	3b01      	subs	r3, #1
 8007c18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c1a:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <vPortSetupTimerInterrupt+0x34>)
 8007c1c:	2207      	movs	r2, #7
 8007c1e:	601a      	str	r2, [r3, #0]
}
 8007c20:	bf00      	nop
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	e000e010 	.word	0xe000e010
 8007c30:	e000e018 	.word	0xe000e018
 8007c34:	2000000c 	.word	0x2000000c
 8007c38:	10624dd3 	.word	0x10624dd3
 8007c3c:	e000e014 	.word	0xe000e014

08007c40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c50 <vPortEnableVFP+0x10>
 8007c44:	6801      	ldr	r1, [r0, #0]
 8007c46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c4a:	6001      	str	r1, [r0, #0]
 8007c4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c4e:	bf00      	nop
 8007c50:	e000ed88 	.word	0xe000ed88

08007c54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c5a:	f3ef 8305 	mrs	r3, IPSR
 8007c5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b0f      	cmp	r3, #15
 8007c64:	d913      	bls.n	8007c8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c66:	4a16      	ldr	r2, [pc, #88]	; (8007cc0 <vPortValidateInterruptPriority+0x6c>)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c70:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <vPortValidateInterruptPriority+0x70>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	7afa      	ldrb	r2, [r7, #11]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d209      	bcs.n	8007c8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	e7fe      	b.n	8007c8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c8e:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <vPortValidateInterruptPriority+0x74>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c96:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <vPortValidateInterruptPriority+0x78>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d909      	bls.n	8007cb2 <vPortValidateInterruptPriority+0x5e>
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	e7fe      	b.n	8007cb0 <vPortValidateInterruptPriority+0x5c>
	}
 8007cb2:	bf00      	nop
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	e000e3f0 	.word	0xe000e3f0
 8007cc4:	200013d8 	.word	0x200013d8
 8007cc8:	e000ed0c 	.word	0xe000ed0c
 8007ccc:	200013dc 	.word	0x200013dc

08007cd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	; 0x28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cdc:	f7fe fcea 	bl	80066b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ce0:	4b57      	ldr	r3, [pc, #348]	; (8007e40 <pvPortMalloc+0x170>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ce8:	f000 f90c 	bl	8007f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cec:	4b55      	ldr	r3, [pc, #340]	; (8007e44 <pvPortMalloc+0x174>)
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f040 808c 	bne.w	8007e12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01c      	beq.n	8007d3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007d00:	2208      	movs	r2, #8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4413      	add	r3, r2
 8007d06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d013      	beq.n	8007d3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f023 0307 	bic.w	r3, r3, #7
 8007d18:	3308      	adds	r3, #8
 8007d1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d009      	beq.n	8007d3a <pvPortMalloc+0x6a>
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e7fe      	b.n	8007d38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d068      	beq.n	8007e12 <pvPortMalloc+0x142>
 8007d40:	4b41      	ldr	r3, [pc, #260]	; (8007e48 <pvPortMalloc+0x178>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d863      	bhi.n	8007e12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d4a:	4b40      	ldr	r3, [pc, #256]	; (8007e4c <pvPortMalloc+0x17c>)
 8007d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d4e:	4b3f      	ldr	r3, [pc, #252]	; (8007e4c <pvPortMalloc+0x17c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d54:	e004      	b.n	8007d60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d903      	bls.n	8007d72 <pvPortMalloc+0xa2>
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f1      	bne.n	8007d56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d72:	4b33      	ldr	r3, [pc, #204]	; (8007e40 <pvPortMalloc+0x170>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d04a      	beq.n	8007e12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2208      	movs	r2, #8
 8007d82:	4413      	add	r3, r2
 8007d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	2308      	movs	r3, #8
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d91e      	bls.n	8007ddc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d009      	beq.n	8007dc4 <pvPortMalloc+0xf4>
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	e7fe      	b.n	8007dc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dd6:	69b8      	ldr	r0, [r7, #24]
 8007dd8:	f000 f8f6 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ddc:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <pvPortMalloc+0x178>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <pvPortMalloc+0x178>)
 8007de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dea:	4b17      	ldr	r3, [pc, #92]	; (8007e48 <pvPortMalloc+0x178>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b18      	ldr	r3, [pc, #96]	; (8007e50 <pvPortMalloc+0x180>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d203      	bcs.n	8007dfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <pvPortMalloc+0x178>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a15      	ldr	r2, [pc, #84]	; (8007e50 <pvPortMalloc+0x180>)
 8007dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <pvPortMalloc+0x174>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e12:	f7fe fc5d 	bl	80066d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <pvPortMalloc+0x164>
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	e7fe      	b.n	8007e32 <pvPortMalloc+0x162>
	return pvReturn;
 8007e34:	69fb      	ldr	r3, [r7, #28]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3728      	adds	r7, #40	; 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20001fe8 	.word	0x20001fe8
 8007e44:	20001ff4 	.word	0x20001ff4
 8007e48:	20001fec 	.word	0x20001fec
 8007e4c:	20001fe0 	.word	0x20001fe0
 8007e50:	20001ff0 	.word	0x20001ff0

08007e54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d046      	beq.n	8007ef4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e66:	2308      	movs	r3, #8
 8007e68:	425b      	negs	r3, r3
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	4b20      	ldr	r3, [pc, #128]	; (8007efc <vPortFree+0xa8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <vPortFree+0x42>
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	e7fe      	b.n	8007e94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <vPortFree+0x5e>
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60bb      	str	r3, [r7, #8]
 8007eb0:	e7fe      	b.n	8007eb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b11      	ldr	r3, [pc, #68]	; (8007efc <vPortFree+0xa8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d019      	beq.n	8007ef4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d115      	bne.n	8007ef4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <vPortFree+0xa8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ed8:	f7fe fbec 	bl	80066b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <vPortFree+0xac>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a06      	ldr	r2, [pc, #24]	; (8007f00 <vPortFree+0xac>)
 8007ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f86c 	bl	8007fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ef0:	f7fe fbee 	bl	80066d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ef4:	bf00      	nop
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20001ff4 	.word	0x20001ff4
 8007f00:	20001fec 	.word	0x20001fec

08007f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f10:	4b27      	ldr	r3, [pc, #156]	; (8007fb0 <prvHeapInit+0xac>)
 8007f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3307      	adds	r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <prvHeapInit+0xac>)
 8007f34:	4413      	add	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <prvHeapInit+0xb0>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <prvHeapInit+0xb0>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f50:	2208      	movs	r2, #8
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0307 	bic.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f66:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f84:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <prvHeapInit+0xb8>)
 8007f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <prvHeapInit+0xbc>)
 8007f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f9c:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <prvHeapInit+0xc0>)
 8007f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	200013e0 	.word	0x200013e0
 8007fb4:	20001fe0 	.word	0x20001fe0
 8007fb8:	20001fe8 	.word	0x20001fe8
 8007fbc:	20001ff0 	.word	0x20001ff0
 8007fc0:	20001fec 	.word	0x20001fec
 8007fc4:	20001ff4 	.word	0x20001ff4

08007fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fd0:	4b28      	ldr	r3, [pc, #160]	; (8008074 <prvInsertBlockIntoFreeList+0xac>)
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e002      	b.n	8007fdc <prvInsertBlockIntoFreeList+0x14>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d8f7      	bhi.n	8007fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d108      	bne.n	800800a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	441a      	add	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d118      	bne.n	8008050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d00d      	beq.n	8008046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e008      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008046:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e003      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d002      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20001fe0 	.word	0x20001fe0
 8008078:	20001fe8 	.word	0x20001fe8

0800807c <__errno>:
 800807c:	4b01      	ldr	r3, [pc, #4]	; (8008084 <__errno+0x8>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	2000001c 	.word	0x2000001c

08008088 <__libc_init_array>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	4e0d      	ldr	r6, [pc, #52]	; (80080c0 <__libc_init_array+0x38>)
 800808c:	4c0d      	ldr	r4, [pc, #52]	; (80080c4 <__libc_init_array+0x3c>)
 800808e:	1ba4      	subs	r4, r4, r6
 8008090:	10a4      	asrs	r4, r4, #2
 8008092:	2500      	movs	r5, #0
 8008094:	42a5      	cmp	r5, r4
 8008096:	d109      	bne.n	80080ac <__libc_init_array+0x24>
 8008098:	4e0b      	ldr	r6, [pc, #44]	; (80080c8 <__libc_init_array+0x40>)
 800809a:	4c0c      	ldr	r4, [pc, #48]	; (80080cc <__libc_init_array+0x44>)
 800809c:	f000 fc28 	bl	80088f0 <_init>
 80080a0:	1ba4      	subs	r4, r4, r6
 80080a2:	10a4      	asrs	r4, r4, #2
 80080a4:	2500      	movs	r5, #0
 80080a6:	42a5      	cmp	r5, r4
 80080a8:	d105      	bne.n	80080b6 <__libc_init_array+0x2e>
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080b0:	4798      	blx	r3
 80080b2:	3501      	adds	r5, #1
 80080b4:	e7ee      	b.n	8008094 <__libc_init_array+0xc>
 80080b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080ba:	4798      	blx	r3
 80080bc:	3501      	adds	r5, #1
 80080be:	e7f2      	b.n	80080a6 <__libc_init_array+0x1e>
 80080c0:	0800899c 	.word	0x0800899c
 80080c4:	0800899c 	.word	0x0800899c
 80080c8:	0800899c 	.word	0x0800899c
 80080cc:	080089a0 	.word	0x080089a0

080080d0 <memcpy>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	1e43      	subs	r3, r0, #1
 80080d4:	440a      	add	r2, r1
 80080d6:	4291      	cmp	r1, r2
 80080d8:	d100      	bne.n	80080dc <memcpy+0xc>
 80080da:	bd10      	pop	{r4, pc}
 80080dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e4:	e7f7      	b.n	80080d6 <memcpy+0x6>

080080e6 <memset>:
 80080e6:	4402      	add	r2, r0
 80080e8:	4603      	mov	r3, r0
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d100      	bne.n	80080f0 <memset+0xa>
 80080ee:	4770      	bx	lr
 80080f0:	f803 1b01 	strb.w	r1, [r3], #1
 80080f4:	e7f9      	b.n	80080ea <memset+0x4>
	...

080080f8 <siprintf>:
 80080f8:	b40e      	push	{r1, r2, r3}
 80080fa:	b500      	push	{lr}
 80080fc:	b09c      	sub	sp, #112	; 0x70
 80080fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008100:	9002      	str	r0, [sp, #8]
 8008102:	9006      	str	r0, [sp, #24]
 8008104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008108:	4809      	ldr	r0, [pc, #36]	; (8008130 <siprintf+0x38>)
 800810a:	9107      	str	r1, [sp, #28]
 800810c:	9104      	str	r1, [sp, #16]
 800810e:	4909      	ldr	r1, [pc, #36]	; (8008134 <siprintf+0x3c>)
 8008110:	f853 2b04 	ldr.w	r2, [r3], #4
 8008114:	9105      	str	r1, [sp, #20]
 8008116:	6800      	ldr	r0, [r0, #0]
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	a902      	add	r1, sp, #8
 800811c:	f000 f866 	bl	80081ec <_svfiprintf_r>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	b01c      	add	sp, #112	; 0x70
 8008128:	f85d eb04 	ldr.w	lr, [sp], #4
 800812c:	b003      	add	sp, #12
 800812e:	4770      	bx	lr
 8008130:	2000001c 	.word	0x2000001c
 8008134:	ffff0208 	.word	0xffff0208

08008138 <__ssputs_r>:
 8008138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800813c:	688e      	ldr	r6, [r1, #8]
 800813e:	429e      	cmp	r6, r3
 8008140:	4682      	mov	sl, r0
 8008142:	460c      	mov	r4, r1
 8008144:	4690      	mov	r8, r2
 8008146:	4699      	mov	r9, r3
 8008148:	d837      	bhi.n	80081ba <__ssputs_r+0x82>
 800814a:	898a      	ldrh	r2, [r1, #12]
 800814c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008150:	d031      	beq.n	80081b6 <__ssputs_r+0x7e>
 8008152:	6825      	ldr	r5, [r4, #0]
 8008154:	6909      	ldr	r1, [r1, #16]
 8008156:	1a6f      	subs	r7, r5, r1
 8008158:	6965      	ldr	r5, [r4, #20]
 800815a:	2302      	movs	r3, #2
 800815c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008160:	fb95 f5f3 	sdiv	r5, r5, r3
 8008164:	f109 0301 	add.w	r3, r9, #1
 8008168:	443b      	add	r3, r7
 800816a:	429d      	cmp	r5, r3
 800816c:	bf38      	it	cc
 800816e:	461d      	movcc	r5, r3
 8008170:	0553      	lsls	r3, r2, #21
 8008172:	d530      	bpl.n	80081d6 <__ssputs_r+0x9e>
 8008174:	4629      	mov	r1, r5
 8008176:	f000 fb21 	bl	80087bc <_malloc_r>
 800817a:	4606      	mov	r6, r0
 800817c:	b950      	cbnz	r0, 8008194 <__ssputs_r+0x5c>
 800817e:	230c      	movs	r3, #12
 8008180:	f8ca 3000 	str.w	r3, [sl]
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800818a:	81a3      	strh	r3, [r4, #12]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008194:	463a      	mov	r2, r7
 8008196:	6921      	ldr	r1, [r4, #16]
 8008198:	f7ff ff9a 	bl	80080d0 <memcpy>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a6:	81a3      	strh	r3, [r4, #12]
 80081a8:	6126      	str	r6, [r4, #16]
 80081aa:	6165      	str	r5, [r4, #20]
 80081ac:	443e      	add	r6, r7
 80081ae:	1bed      	subs	r5, r5, r7
 80081b0:	6026      	str	r6, [r4, #0]
 80081b2:	60a5      	str	r5, [r4, #8]
 80081b4:	464e      	mov	r6, r9
 80081b6:	454e      	cmp	r6, r9
 80081b8:	d900      	bls.n	80081bc <__ssputs_r+0x84>
 80081ba:	464e      	mov	r6, r9
 80081bc:	4632      	mov	r2, r6
 80081be:	4641      	mov	r1, r8
 80081c0:	6820      	ldr	r0, [r4, #0]
 80081c2:	f000 fa93 	bl	80086ec <memmove>
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	60a3      	str	r3, [r4, #8]
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	441e      	add	r6, r3
 80081d0:	6026      	str	r6, [r4, #0]
 80081d2:	2000      	movs	r0, #0
 80081d4:	e7dc      	b.n	8008190 <__ssputs_r+0x58>
 80081d6:	462a      	mov	r2, r5
 80081d8:	f000 fb4a 	bl	8008870 <_realloc_r>
 80081dc:	4606      	mov	r6, r0
 80081de:	2800      	cmp	r0, #0
 80081e0:	d1e2      	bne.n	80081a8 <__ssputs_r+0x70>
 80081e2:	6921      	ldr	r1, [r4, #16]
 80081e4:	4650      	mov	r0, sl
 80081e6:	f000 fa9b 	bl	8008720 <_free_r>
 80081ea:	e7c8      	b.n	800817e <__ssputs_r+0x46>

080081ec <_svfiprintf_r>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	461d      	mov	r5, r3
 80081f2:	898b      	ldrh	r3, [r1, #12]
 80081f4:	061f      	lsls	r7, r3, #24
 80081f6:	b09d      	sub	sp, #116	; 0x74
 80081f8:	4680      	mov	r8, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	4616      	mov	r6, r2
 80081fe:	d50f      	bpl.n	8008220 <_svfiprintf_r+0x34>
 8008200:	690b      	ldr	r3, [r1, #16]
 8008202:	b96b      	cbnz	r3, 8008220 <_svfiprintf_r+0x34>
 8008204:	2140      	movs	r1, #64	; 0x40
 8008206:	f000 fad9 	bl	80087bc <_malloc_r>
 800820a:	6020      	str	r0, [r4, #0]
 800820c:	6120      	str	r0, [r4, #16]
 800820e:	b928      	cbnz	r0, 800821c <_svfiprintf_r+0x30>
 8008210:	230c      	movs	r3, #12
 8008212:	f8c8 3000 	str.w	r3, [r8]
 8008216:	f04f 30ff 	mov.w	r0, #4294967295
 800821a:	e0c8      	b.n	80083ae <_svfiprintf_r+0x1c2>
 800821c:	2340      	movs	r3, #64	; 0x40
 800821e:	6163      	str	r3, [r4, #20]
 8008220:	2300      	movs	r3, #0
 8008222:	9309      	str	r3, [sp, #36]	; 0x24
 8008224:	2320      	movs	r3, #32
 8008226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800822a:	2330      	movs	r3, #48	; 0x30
 800822c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008230:	9503      	str	r5, [sp, #12]
 8008232:	f04f 0b01 	mov.w	fp, #1
 8008236:	4637      	mov	r7, r6
 8008238:	463d      	mov	r5, r7
 800823a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800823e:	b10b      	cbz	r3, 8008244 <_svfiprintf_r+0x58>
 8008240:	2b25      	cmp	r3, #37	; 0x25
 8008242:	d13e      	bne.n	80082c2 <_svfiprintf_r+0xd6>
 8008244:	ebb7 0a06 	subs.w	sl, r7, r6
 8008248:	d00b      	beq.n	8008262 <_svfiprintf_r+0x76>
 800824a:	4653      	mov	r3, sl
 800824c:	4632      	mov	r2, r6
 800824e:	4621      	mov	r1, r4
 8008250:	4640      	mov	r0, r8
 8008252:	f7ff ff71 	bl	8008138 <__ssputs_r>
 8008256:	3001      	adds	r0, #1
 8008258:	f000 80a4 	beq.w	80083a4 <_svfiprintf_r+0x1b8>
 800825c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825e:	4453      	add	r3, sl
 8008260:	9309      	str	r3, [sp, #36]	; 0x24
 8008262:	783b      	ldrb	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 809d 	beq.w	80083a4 <_svfiprintf_r+0x1b8>
 800826a:	2300      	movs	r3, #0
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	9307      	str	r3, [sp, #28]
 8008278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800827c:	931a      	str	r3, [sp, #104]	; 0x68
 800827e:	462f      	mov	r7, r5
 8008280:	2205      	movs	r2, #5
 8008282:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008286:	4850      	ldr	r0, [pc, #320]	; (80083c8 <_svfiprintf_r+0x1dc>)
 8008288:	f7f7 ffb2 	bl	80001f0 <memchr>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	b9d0      	cbnz	r0, 80082c6 <_svfiprintf_r+0xda>
 8008290:	06d9      	lsls	r1, r3, #27
 8008292:	bf44      	itt	mi
 8008294:	2220      	movmi	r2, #32
 8008296:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800829a:	071a      	lsls	r2, r3, #28
 800829c:	bf44      	itt	mi
 800829e:	222b      	movmi	r2, #43	; 0x2b
 80082a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082a4:	782a      	ldrb	r2, [r5, #0]
 80082a6:	2a2a      	cmp	r2, #42	; 0x2a
 80082a8:	d015      	beq.n	80082d6 <_svfiprintf_r+0xea>
 80082aa:	9a07      	ldr	r2, [sp, #28]
 80082ac:	462f      	mov	r7, r5
 80082ae:	2000      	movs	r0, #0
 80082b0:	250a      	movs	r5, #10
 80082b2:	4639      	mov	r1, r7
 80082b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082b8:	3b30      	subs	r3, #48	; 0x30
 80082ba:	2b09      	cmp	r3, #9
 80082bc:	d94d      	bls.n	800835a <_svfiprintf_r+0x16e>
 80082be:	b1b8      	cbz	r0, 80082f0 <_svfiprintf_r+0x104>
 80082c0:	e00f      	b.n	80082e2 <_svfiprintf_r+0xf6>
 80082c2:	462f      	mov	r7, r5
 80082c4:	e7b8      	b.n	8008238 <_svfiprintf_r+0x4c>
 80082c6:	4a40      	ldr	r2, [pc, #256]	; (80083c8 <_svfiprintf_r+0x1dc>)
 80082c8:	1a80      	subs	r0, r0, r2
 80082ca:	fa0b f000 	lsl.w	r0, fp, r0
 80082ce:	4318      	orrs	r0, r3
 80082d0:	9004      	str	r0, [sp, #16]
 80082d2:	463d      	mov	r5, r7
 80082d4:	e7d3      	b.n	800827e <_svfiprintf_r+0x92>
 80082d6:	9a03      	ldr	r2, [sp, #12]
 80082d8:	1d11      	adds	r1, r2, #4
 80082da:	6812      	ldr	r2, [r2, #0]
 80082dc:	9103      	str	r1, [sp, #12]
 80082de:	2a00      	cmp	r2, #0
 80082e0:	db01      	blt.n	80082e6 <_svfiprintf_r+0xfa>
 80082e2:	9207      	str	r2, [sp, #28]
 80082e4:	e004      	b.n	80082f0 <_svfiprintf_r+0x104>
 80082e6:	4252      	negs	r2, r2
 80082e8:	f043 0302 	orr.w	r3, r3, #2
 80082ec:	9207      	str	r2, [sp, #28]
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	783b      	ldrb	r3, [r7, #0]
 80082f2:	2b2e      	cmp	r3, #46	; 0x2e
 80082f4:	d10c      	bne.n	8008310 <_svfiprintf_r+0x124>
 80082f6:	787b      	ldrb	r3, [r7, #1]
 80082f8:	2b2a      	cmp	r3, #42	; 0x2a
 80082fa:	d133      	bne.n	8008364 <_svfiprintf_r+0x178>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	9203      	str	r2, [sp, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfb8      	it	lt
 8008308:	f04f 33ff 	movlt.w	r3, #4294967295
 800830c:	3702      	adds	r7, #2
 800830e:	9305      	str	r3, [sp, #20]
 8008310:	4d2e      	ldr	r5, [pc, #184]	; (80083cc <_svfiprintf_r+0x1e0>)
 8008312:	7839      	ldrb	r1, [r7, #0]
 8008314:	2203      	movs	r2, #3
 8008316:	4628      	mov	r0, r5
 8008318:	f7f7 ff6a 	bl	80001f0 <memchr>
 800831c:	b138      	cbz	r0, 800832e <_svfiprintf_r+0x142>
 800831e:	2340      	movs	r3, #64	; 0x40
 8008320:	1b40      	subs	r0, r0, r5
 8008322:	fa03 f000 	lsl.w	r0, r3, r0
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	4303      	orrs	r3, r0
 800832a:	3701      	adds	r7, #1
 800832c:	9304      	str	r3, [sp, #16]
 800832e:	7839      	ldrb	r1, [r7, #0]
 8008330:	4827      	ldr	r0, [pc, #156]	; (80083d0 <_svfiprintf_r+0x1e4>)
 8008332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008336:	2206      	movs	r2, #6
 8008338:	1c7e      	adds	r6, r7, #1
 800833a:	f7f7 ff59 	bl	80001f0 <memchr>
 800833e:	2800      	cmp	r0, #0
 8008340:	d038      	beq.n	80083b4 <_svfiprintf_r+0x1c8>
 8008342:	4b24      	ldr	r3, [pc, #144]	; (80083d4 <_svfiprintf_r+0x1e8>)
 8008344:	bb13      	cbnz	r3, 800838c <_svfiprintf_r+0x1a0>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	3307      	adds	r3, #7
 800834a:	f023 0307 	bic.w	r3, r3, #7
 800834e:	3308      	adds	r3, #8
 8008350:	9303      	str	r3, [sp, #12]
 8008352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008354:	444b      	add	r3, r9
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	e76d      	b.n	8008236 <_svfiprintf_r+0x4a>
 800835a:	fb05 3202 	mla	r2, r5, r2, r3
 800835e:	2001      	movs	r0, #1
 8008360:	460f      	mov	r7, r1
 8008362:	e7a6      	b.n	80082b2 <_svfiprintf_r+0xc6>
 8008364:	2300      	movs	r3, #0
 8008366:	3701      	adds	r7, #1
 8008368:	9305      	str	r3, [sp, #20]
 800836a:	4619      	mov	r1, r3
 800836c:	250a      	movs	r5, #10
 800836e:	4638      	mov	r0, r7
 8008370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008374:	3a30      	subs	r2, #48	; 0x30
 8008376:	2a09      	cmp	r2, #9
 8008378:	d903      	bls.n	8008382 <_svfiprintf_r+0x196>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0c8      	beq.n	8008310 <_svfiprintf_r+0x124>
 800837e:	9105      	str	r1, [sp, #20]
 8008380:	e7c6      	b.n	8008310 <_svfiprintf_r+0x124>
 8008382:	fb05 2101 	mla	r1, r5, r1, r2
 8008386:	2301      	movs	r3, #1
 8008388:	4607      	mov	r7, r0
 800838a:	e7f0      	b.n	800836e <_svfiprintf_r+0x182>
 800838c:	ab03      	add	r3, sp, #12
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	4622      	mov	r2, r4
 8008392:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <_svfiprintf_r+0x1ec>)
 8008394:	a904      	add	r1, sp, #16
 8008396:	4640      	mov	r0, r8
 8008398:	f3af 8000 	nop.w
 800839c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083a0:	4681      	mov	r9, r0
 80083a2:	d1d6      	bne.n	8008352 <_svfiprintf_r+0x166>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	065b      	lsls	r3, r3, #25
 80083a8:	f53f af35 	bmi.w	8008216 <_svfiprintf_r+0x2a>
 80083ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ae:	b01d      	add	sp, #116	; 0x74
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	ab03      	add	r3, sp, #12
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	4622      	mov	r2, r4
 80083ba:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <_svfiprintf_r+0x1ec>)
 80083bc:	a904      	add	r1, sp, #16
 80083be:	4640      	mov	r0, r8
 80083c0:	f000 f882 	bl	80084c8 <_printf_i>
 80083c4:	e7ea      	b.n	800839c <_svfiprintf_r+0x1b0>
 80083c6:	bf00      	nop
 80083c8:	08008968 	.word	0x08008968
 80083cc:	0800896e 	.word	0x0800896e
 80083d0:	08008972 	.word	0x08008972
 80083d4:	00000000 	.word	0x00000000
 80083d8:	08008139 	.word	0x08008139

080083dc <_printf_common>:
 80083dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e0:	4691      	mov	r9, r2
 80083e2:	461f      	mov	r7, r3
 80083e4:	688a      	ldr	r2, [r1, #8]
 80083e6:	690b      	ldr	r3, [r1, #16]
 80083e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083ec:	4293      	cmp	r3, r2
 80083ee:	bfb8      	it	lt
 80083f0:	4613      	movlt	r3, r2
 80083f2:	f8c9 3000 	str.w	r3, [r9]
 80083f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083fa:	4606      	mov	r6, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	b112      	cbz	r2, 8008406 <_printf_common+0x2a>
 8008400:	3301      	adds	r3, #1
 8008402:	f8c9 3000 	str.w	r3, [r9]
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	0699      	lsls	r1, r3, #26
 800840a:	bf42      	ittt	mi
 800840c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008410:	3302      	addmi	r3, #2
 8008412:	f8c9 3000 	strmi.w	r3, [r9]
 8008416:	6825      	ldr	r5, [r4, #0]
 8008418:	f015 0506 	ands.w	r5, r5, #6
 800841c:	d107      	bne.n	800842e <_printf_common+0x52>
 800841e:	f104 0a19 	add.w	sl, r4, #25
 8008422:	68e3      	ldr	r3, [r4, #12]
 8008424:	f8d9 2000 	ldr.w	r2, [r9]
 8008428:	1a9b      	subs	r3, r3, r2
 800842a:	42ab      	cmp	r3, r5
 800842c:	dc28      	bgt.n	8008480 <_printf_common+0xa4>
 800842e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008432:	6822      	ldr	r2, [r4, #0]
 8008434:	3300      	adds	r3, #0
 8008436:	bf18      	it	ne
 8008438:	2301      	movne	r3, #1
 800843a:	0692      	lsls	r2, r2, #26
 800843c:	d42d      	bmi.n	800849a <_printf_common+0xbe>
 800843e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008442:	4639      	mov	r1, r7
 8008444:	4630      	mov	r0, r6
 8008446:	47c0      	blx	r8
 8008448:	3001      	adds	r0, #1
 800844a:	d020      	beq.n	800848e <_printf_common+0xb2>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	68e5      	ldr	r5, [r4, #12]
 8008450:	f8d9 2000 	ldr.w	r2, [r9]
 8008454:	f003 0306 	and.w	r3, r3, #6
 8008458:	2b04      	cmp	r3, #4
 800845a:	bf08      	it	eq
 800845c:	1aad      	subeq	r5, r5, r2
 800845e:	68a3      	ldr	r3, [r4, #8]
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	bf0c      	ite	eq
 8008464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008468:	2500      	movne	r5, #0
 800846a:	4293      	cmp	r3, r2
 800846c:	bfc4      	itt	gt
 800846e:	1a9b      	subgt	r3, r3, r2
 8008470:	18ed      	addgt	r5, r5, r3
 8008472:	f04f 0900 	mov.w	r9, #0
 8008476:	341a      	adds	r4, #26
 8008478:	454d      	cmp	r5, r9
 800847a:	d11a      	bne.n	80084b2 <_printf_common+0xd6>
 800847c:	2000      	movs	r0, #0
 800847e:	e008      	b.n	8008492 <_printf_common+0xb6>
 8008480:	2301      	movs	r3, #1
 8008482:	4652      	mov	r2, sl
 8008484:	4639      	mov	r1, r7
 8008486:	4630      	mov	r0, r6
 8008488:	47c0      	blx	r8
 800848a:	3001      	adds	r0, #1
 800848c:	d103      	bne.n	8008496 <_printf_common+0xba>
 800848e:	f04f 30ff 	mov.w	r0, #4294967295
 8008492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008496:	3501      	adds	r5, #1
 8008498:	e7c3      	b.n	8008422 <_printf_common+0x46>
 800849a:	18e1      	adds	r1, r4, r3
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	2030      	movs	r0, #48	; 0x30
 80084a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084a4:	4422      	add	r2, r4
 80084a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084ae:	3302      	adds	r3, #2
 80084b0:	e7c5      	b.n	800843e <_printf_common+0x62>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4622      	mov	r2, r4
 80084b6:	4639      	mov	r1, r7
 80084b8:	4630      	mov	r0, r6
 80084ba:	47c0      	blx	r8
 80084bc:	3001      	adds	r0, #1
 80084be:	d0e6      	beq.n	800848e <_printf_common+0xb2>
 80084c0:	f109 0901 	add.w	r9, r9, #1
 80084c4:	e7d8      	b.n	8008478 <_printf_common+0x9c>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084d0:	460c      	mov	r4, r1
 80084d2:	7e09      	ldrb	r1, [r1, #24]
 80084d4:	b085      	sub	sp, #20
 80084d6:	296e      	cmp	r1, #110	; 0x6e
 80084d8:	4617      	mov	r7, r2
 80084da:	4606      	mov	r6, r0
 80084dc:	4698      	mov	r8, r3
 80084de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084e0:	f000 80b3 	beq.w	800864a <_printf_i+0x182>
 80084e4:	d822      	bhi.n	800852c <_printf_i+0x64>
 80084e6:	2963      	cmp	r1, #99	; 0x63
 80084e8:	d036      	beq.n	8008558 <_printf_i+0x90>
 80084ea:	d80a      	bhi.n	8008502 <_printf_i+0x3a>
 80084ec:	2900      	cmp	r1, #0
 80084ee:	f000 80b9 	beq.w	8008664 <_printf_i+0x19c>
 80084f2:	2958      	cmp	r1, #88	; 0x58
 80084f4:	f000 8083 	beq.w	80085fe <_printf_i+0x136>
 80084f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008500:	e032      	b.n	8008568 <_printf_i+0xa0>
 8008502:	2964      	cmp	r1, #100	; 0x64
 8008504:	d001      	beq.n	800850a <_printf_i+0x42>
 8008506:	2969      	cmp	r1, #105	; 0x69
 8008508:	d1f6      	bne.n	80084f8 <_printf_i+0x30>
 800850a:	6820      	ldr	r0, [r4, #0]
 800850c:	6813      	ldr	r3, [r2, #0]
 800850e:	0605      	lsls	r5, r0, #24
 8008510:	f103 0104 	add.w	r1, r3, #4
 8008514:	d52a      	bpl.n	800856c <_printf_i+0xa4>
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	da03      	bge.n	8008526 <_printf_i+0x5e>
 800851e:	222d      	movs	r2, #45	; 0x2d
 8008520:	425b      	negs	r3, r3
 8008522:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008526:	486f      	ldr	r0, [pc, #444]	; (80086e4 <_printf_i+0x21c>)
 8008528:	220a      	movs	r2, #10
 800852a:	e039      	b.n	80085a0 <_printf_i+0xd8>
 800852c:	2973      	cmp	r1, #115	; 0x73
 800852e:	f000 809d 	beq.w	800866c <_printf_i+0x1a4>
 8008532:	d808      	bhi.n	8008546 <_printf_i+0x7e>
 8008534:	296f      	cmp	r1, #111	; 0x6f
 8008536:	d020      	beq.n	800857a <_printf_i+0xb2>
 8008538:	2970      	cmp	r1, #112	; 0x70
 800853a:	d1dd      	bne.n	80084f8 <_printf_i+0x30>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	f043 0320 	orr.w	r3, r3, #32
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	e003      	b.n	800854e <_printf_i+0x86>
 8008546:	2975      	cmp	r1, #117	; 0x75
 8008548:	d017      	beq.n	800857a <_printf_i+0xb2>
 800854a:	2978      	cmp	r1, #120	; 0x78
 800854c:	d1d4      	bne.n	80084f8 <_printf_i+0x30>
 800854e:	2378      	movs	r3, #120	; 0x78
 8008550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008554:	4864      	ldr	r0, [pc, #400]	; (80086e8 <_printf_i+0x220>)
 8008556:	e055      	b.n	8008604 <_printf_i+0x13c>
 8008558:	6813      	ldr	r3, [r2, #0]
 800855a:	1d19      	adds	r1, r3, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6011      	str	r1, [r2, #0]
 8008560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008568:	2301      	movs	r3, #1
 800856a:	e08c      	b.n	8008686 <_printf_i+0x1be>
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6011      	str	r1, [r2, #0]
 8008570:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008574:	bf18      	it	ne
 8008576:	b21b      	sxthne	r3, r3
 8008578:	e7cf      	b.n	800851a <_printf_i+0x52>
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	6825      	ldr	r5, [r4, #0]
 800857e:	1d18      	adds	r0, r3, #4
 8008580:	6010      	str	r0, [r2, #0]
 8008582:	0628      	lsls	r0, r5, #24
 8008584:	d501      	bpl.n	800858a <_printf_i+0xc2>
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	e002      	b.n	8008590 <_printf_i+0xc8>
 800858a:	0668      	lsls	r0, r5, #25
 800858c:	d5fb      	bpl.n	8008586 <_printf_i+0xbe>
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	4854      	ldr	r0, [pc, #336]	; (80086e4 <_printf_i+0x21c>)
 8008592:	296f      	cmp	r1, #111	; 0x6f
 8008594:	bf14      	ite	ne
 8008596:	220a      	movne	r2, #10
 8008598:	2208      	moveq	r2, #8
 800859a:	2100      	movs	r1, #0
 800859c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085a0:	6865      	ldr	r5, [r4, #4]
 80085a2:	60a5      	str	r5, [r4, #8]
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	f2c0 8095 	blt.w	80086d4 <_printf_i+0x20c>
 80085aa:	6821      	ldr	r1, [r4, #0]
 80085ac:	f021 0104 	bic.w	r1, r1, #4
 80085b0:	6021      	str	r1, [r4, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d13d      	bne.n	8008632 <_printf_i+0x16a>
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	f040 808e 	bne.w	80086d8 <_printf_i+0x210>
 80085bc:	4665      	mov	r5, ip
 80085be:	2a08      	cmp	r2, #8
 80085c0:	d10b      	bne.n	80085da <_printf_i+0x112>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	07db      	lsls	r3, r3, #31
 80085c6:	d508      	bpl.n	80085da <_printf_i+0x112>
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	bfde      	ittt	le
 80085d0:	2330      	movle	r3, #48	; 0x30
 80085d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085da:	ebac 0305 	sub.w	r3, ip, r5
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	f8cd 8000 	str.w	r8, [sp]
 80085e4:	463b      	mov	r3, r7
 80085e6:	aa03      	add	r2, sp, #12
 80085e8:	4621      	mov	r1, r4
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7ff fef6 	bl	80083dc <_printf_common>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d14d      	bne.n	8008690 <_printf_i+0x1c8>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	b005      	add	sp, #20
 80085fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085fe:	4839      	ldr	r0, [pc, #228]	; (80086e4 <_printf_i+0x21c>)
 8008600:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008604:	6813      	ldr	r3, [r2, #0]
 8008606:	6821      	ldr	r1, [r4, #0]
 8008608:	1d1d      	adds	r5, r3, #4
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6015      	str	r5, [r2, #0]
 800860e:	060a      	lsls	r2, r1, #24
 8008610:	d50b      	bpl.n	800862a <_printf_i+0x162>
 8008612:	07ca      	lsls	r2, r1, #31
 8008614:	bf44      	itt	mi
 8008616:	f041 0120 	orrmi.w	r1, r1, #32
 800861a:	6021      	strmi	r1, [r4, #0]
 800861c:	b91b      	cbnz	r3, 8008626 <_printf_i+0x15e>
 800861e:	6822      	ldr	r2, [r4, #0]
 8008620:	f022 0220 	bic.w	r2, r2, #32
 8008624:	6022      	str	r2, [r4, #0]
 8008626:	2210      	movs	r2, #16
 8008628:	e7b7      	b.n	800859a <_printf_i+0xd2>
 800862a:	064d      	lsls	r5, r1, #25
 800862c:	bf48      	it	mi
 800862e:	b29b      	uxthmi	r3, r3
 8008630:	e7ef      	b.n	8008612 <_printf_i+0x14a>
 8008632:	4665      	mov	r5, ip
 8008634:	fbb3 f1f2 	udiv	r1, r3, r2
 8008638:	fb02 3311 	mls	r3, r2, r1, r3
 800863c:	5cc3      	ldrb	r3, [r0, r3]
 800863e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008642:	460b      	mov	r3, r1
 8008644:	2900      	cmp	r1, #0
 8008646:	d1f5      	bne.n	8008634 <_printf_i+0x16c>
 8008648:	e7b9      	b.n	80085be <_printf_i+0xf6>
 800864a:	6813      	ldr	r3, [r2, #0]
 800864c:	6825      	ldr	r5, [r4, #0]
 800864e:	6961      	ldr	r1, [r4, #20]
 8008650:	1d18      	adds	r0, r3, #4
 8008652:	6010      	str	r0, [r2, #0]
 8008654:	0628      	lsls	r0, r5, #24
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	d501      	bpl.n	800865e <_printf_i+0x196>
 800865a:	6019      	str	r1, [r3, #0]
 800865c:	e002      	b.n	8008664 <_printf_i+0x19c>
 800865e:	066a      	lsls	r2, r5, #25
 8008660:	d5fb      	bpl.n	800865a <_printf_i+0x192>
 8008662:	8019      	strh	r1, [r3, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	6123      	str	r3, [r4, #16]
 8008668:	4665      	mov	r5, ip
 800866a:	e7b9      	b.n	80085e0 <_printf_i+0x118>
 800866c:	6813      	ldr	r3, [r2, #0]
 800866e:	1d19      	adds	r1, r3, #4
 8008670:	6011      	str	r1, [r2, #0]
 8008672:	681d      	ldr	r5, [r3, #0]
 8008674:	6862      	ldr	r2, [r4, #4]
 8008676:	2100      	movs	r1, #0
 8008678:	4628      	mov	r0, r5
 800867a:	f7f7 fdb9 	bl	80001f0 <memchr>
 800867e:	b108      	cbz	r0, 8008684 <_printf_i+0x1bc>
 8008680:	1b40      	subs	r0, r0, r5
 8008682:	6060      	str	r0, [r4, #4]
 8008684:	6863      	ldr	r3, [r4, #4]
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	2300      	movs	r3, #0
 800868a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800868e:	e7a7      	b.n	80085e0 <_printf_i+0x118>
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	462a      	mov	r2, r5
 8008694:	4639      	mov	r1, r7
 8008696:	4630      	mov	r0, r6
 8008698:	47c0      	blx	r8
 800869a:	3001      	adds	r0, #1
 800869c:	d0aa      	beq.n	80085f4 <_printf_i+0x12c>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	079b      	lsls	r3, r3, #30
 80086a2:	d413      	bmi.n	80086cc <_printf_i+0x204>
 80086a4:	68e0      	ldr	r0, [r4, #12]
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	4298      	cmp	r0, r3
 80086aa:	bfb8      	it	lt
 80086ac:	4618      	movlt	r0, r3
 80086ae:	e7a3      	b.n	80085f8 <_printf_i+0x130>
 80086b0:	2301      	movs	r3, #1
 80086b2:	464a      	mov	r2, r9
 80086b4:	4639      	mov	r1, r7
 80086b6:	4630      	mov	r0, r6
 80086b8:	47c0      	blx	r8
 80086ba:	3001      	adds	r0, #1
 80086bc:	d09a      	beq.n	80085f4 <_printf_i+0x12c>
 80086be:	3501      	adds	r5, #1
 80086c0:	68e3      	ldr	r3, [r4, #12]
 80086c2:	9a03      	ldr	r2, [sp, #12]
 80086c4:	1a9b      	subs	r3, r3, r2
 80086c6:	42ab      	cmp	r3, r5
 80086c8:	dcf2      	bgt.n	80086b0 <_printf_i+0x1e8>
 80086ca:	e7eb      	b.n	80086a4 <_printf_i+0x1dc>
 80086cc:	2500      	movs	r5, #0
 80086ce:	f104 0919 	add.w	r9, r4, #25
 80086d2:	e7f5      	b.n	80086c0 <_printf_i+0x1f8>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1ac      	bne.n	8008632 <_printf_i+0x16a>
 80086d8:	7803      	ldrb	r3, [r0, #0]
 80086da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e2:	e76c      	b.n	80085be <_printf_i+0xf6>
 80086e4:	08008979 	.word	0x08008979
 80086e8:	0800898a 	.word	0x0800898a

080086ec <memmove>:
 80086ec:	4288      	cmp	r0, r1
 80086ee:	b510      	push	{r4, lr}
 80086f0:	eb01 0302 	add.w	r3, r1, r2
 80086f4:	d807      	bhi.n	8008706 <memmove+0x1a>
 80086f6:	1e42      	subs	r2, r0, #1
 80086f8:	4299      	cmp	r1, r3
 80086fa:	d00a      	beq.n	8008712 <memmove+0x26>
 80086fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008700:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008704:	e7f8      	b.n	80086f8 <memmove+0xc>
 8008706:	4283      	cmp	r3, r0
 8008708:	d9f5      	bls.n	80086f6 <memmove+0xa>
 800870a:	1881      	adds	r1, r0, r2
 800870c:	1ad2      	subs	r2, r2, r3
 800870e:	42d3      	cmn	r3, r2
 8008710:	d100      	bne.n	8008714 <memmove+0x28>
 8008712:	bd10      	pop	{r4, pc}
 8008714:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008718:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800871c:	e7f7      	b.n	800870e <memmove+0x22>
	...

08008720 <_free_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4605      	mov	r5, r0
 8008724:	2900      	cmp	r1, #0
 8008726:	d045      	beq.n	80087b4 <_free_r+0x94>
 8008728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800872c:	1f0c      	subs	r4, r1, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	bfb8      	it	lt
 8008732:	18e4      	addlt	r4, r4, r3
 8008734:	f000 f8d2 	bl	80088dc <__malloc_lock>
 8008738:	4a1f      	ldr	r2, [pc, #124]	; (80087b8 <_free_r+0x98>)
 800873a:	6813      	ldr	r3, [r2, #0]
 800873c:	4610      	mov	r0, r2
 800873e:	b933      	cbnz	r3, 800874e <_free_r+0x2e>
 8008740:	6063      	str	r3, [r4, #4]
 8008742:	6014      	str	r4, [r2, #0]
 8008744:	4628      	mov	r0, r5
 8008746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800874a:	f000 b8c8 	b.w	80088de <__malloc_unlock>
 800874e:	42a3      	cmp	r3, r4
 8008750:	d90c      	bls.n	800876c <_free_r+0x4c>
 8008752:	6821      	ldr	r1, [r4, #0]
 8008754:	1862      	adds	r2, r4, r1
 8008756:	4293      	cmp	r3, r2
 8008758:	bf04      	itt	eq
 800875a:	681a      	ldreq	r2, [r3, #0]
 800875c:	685b      	ldreq	r3, [r3, #4]
 800875e:	6063      	str	r3, [r4, #4]
 8008760:	bf04      	itt	eq
 8008762:	1852      	addeq	r2, r2, r1
 8008764:	6022      	streq	r2, [r4, #0]
 8008766:	6004      	str	r4, [r0, #0]
 8008768:	e7ec      	b.n	8008744 <_free_r+0x24>
 800876a:	4613      	mov	r3, r2
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	b10a      	cbz	r2, 8008774 <_free_r+0x54>
 8008770:	42a2      	cmp	r2, r4
 8008772:	d9fa      	bls.n	800876a <_free_r+0x4a>
 8008774:	6819      	ldr	r1, [r3, #0]
 8008776:	1858      	adds	r0, r3, r1
 8008778:	42a0      	cmp	r0, r4
 800877a:	d10b      	bne.n	8008794 <_free_r+0x74>
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	4401      	add	r1, r0
 8008780:	1858      	adds	r0, r3, r1
 8008782:	4282      	cmp	r2, r0
 8008784:	6019      	str	r1, [r3, #0]
 8008786:	d1dd      	bne.n	8008744 <_free_r+0x24>
 8008788:	6810      	ldr	r0, [r2, #0]
 800878a:	6852      	ldr	r2, [r2, #4]
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	4401      	add	r1, r0
 8008790:	6019      	str	r1, [r3, #0]
 8008792:	e7d7      	b.n	8008744 <_free_r+0x24>
 8008794:	d902      	bls.n	800879c <_free_r+0x7c>
 8008796:	230c      	movs	r3, #12
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	e7d3      	b.n	8008744 <_free_r+0x24>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	1821      	adds	r1, r4, r0
 80087a0:	428a      	cmp	r2, r1
 80087a2:	bf04      	itt	eq
 80087a4:	6811      	ldreq	r1, [r2, #0]
 80087a6:	6852      	ldreq	r2, [r2, #4]
 80087a8:	6062      	str	r2, [r4, #4]
 80087aa:	bf04      	itt	eq
 80087ac:	1809      	addeq	r1, r1, r0
 80087ae:	6021      	streq	r1, [r4, #0]
 80087b0:	605c      	str	r4, [r3, #4]
 80087b2:	e7c7      	b.n	8008744 <_free_r+0x24>
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
 80087b6:	bf00      	nop
 80087b8:	20001ff8 	.word	0x20001ff8

080087bc <_malloc_r>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	1ccd      	adds	r5, r1, #3
 80087c0:	f025 0503 	bic.w	r5, r5, #3
 80087c4:	3508      	adds	r5, #8
 80087c6:	2d0c      	cmp	r5, #12
 80087c8:	bf38      	it	cc
 80087ca:	250c      	movcc	r5, #12
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	4606      	mov	r6, r0
 80087d0:	db01      	blt.n	80087d6 <_malloc_r+0x1a>
 80087d2:	42a9      	cmp	r1, r5
 80087d4:	d903      	bls.n	80087de <_malloc_r+0x22>
 80087d6:	230c      	movs	r3, #12
 80087d8:	6033      	str	r3, [r6, #0]
 80087da:	2000      	movs	r0, #0
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	f000 f87d 	bl	80088dc <__malloc_lock>
 80087e2:	4a21      	ldr	r2, [pc, #132]	; (8008868 <_malloc_r+0xac>)
 80087e4:	6814      	ldr	r4, [r2, #0]
 80087e6:	4621      	mov	r1, r4
 80087e8:	b991      	cbnz	r1, 8008810 <_malloc_r+0x54>
 80087ea:	4c20      	ldr	r4, [pc, #128]	; (800886c <_malloc_r+0xb0>)
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	b91b      	cbnz	r3, 80087f8 <_malloc_r+0x3c>
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f863 	bl	80088bc <_sbrk_r>
 80087f6:	6020      	str	r0, [r4, #0]
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 f85e 	bl	80088bc <_sbrk_r>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d124      	bne.n	800884e <_malloc_r+0x92>
 8008804:	230c      	movs	r3, #12
 8008806:	6033      	str	r3, [r6, #0]
 8008808:	4630      	mov	r0, r6
 800880a:	f000 f868 	bl	80088de <__malloc_unlock>
 800880e:	e7e4      	b.n	80087da <_malloc_r+0x1e>
 8008810:	680b      	ldr	r3, [r1, #0]
 8008812:	1b5b      	subs	r3, r3, r5
 8008814:	d418      	bmi.n	8008848 <_malloc_r+0x8c>
 8008816:	2b0b      	cmp	r3, #11
 8008818:	d90f      	bls.n	800883a <_malloc_r+0x7e>
 800881a:	600b      	str	r3, [r1, #0]
 800881c:	50cd      	str	r5, [r1, r3]
 800881e:	18cc      	adds	r4, r1, r3
 8008820:	4630      	mov	r0, r6
 8008822:	f000 f85c 	bl	80088de <__malloc_unlock>
 8008826:	f104 000b 	add.w	r0, r4, #11
 800882a:	1d23      	adds	r3, r4, #4
 800882c:	f020 0007 	bic.w	r0, r0, #7
 8008830:	1ac3      	subs	r3, r0, r3
 8008832:	d0d3      	beq.n	80087dc <_malloc_r+0x20>
 8008834:	425a      	negs	r2, r3
 8008836:	50e2      	str	r2, [r4, r3]
 8008838:	e7d0      	b.n	80087dc <_malloc_r+0x20>
 800883a:	428c      	cmp	r4, r1
 800883c:	684b      	ldr	r3, [r1, #4]
 800883e:	bf16      	itet	ne
 8008840:	6063      	strne	r3, [r4, #4]
 8008842:	6013      	streq	r3, [r2, #0]
 8008844:	460c      	movne	r4, r1
 8008846:	e7eb      	b.n	8008820 <_malloc_r+0x64>
 8008848:	460c      	mov	r4, r1
 800884a:	6849      	ldr	r1, [r1, #4]
 800884c:	e7cc      	b.n	80087e8 <_malloc_r+0x2c>
 800884e:	1cc4      	adds	r4, r0, #3
 8008850:	f024 0403 	bic.w	r4, r4, #3
 8008854:	42a0      	cmp	r0, r4
 8008856:	d005      	beq.n	8008864 <_malloc_r+0xa8>
 8008858:	1a21      	subs	r1, r4, r0
 800885a:	4630      	mov	r0, r6
 800885c:	f000 f82e 	bl	80088bc <_sbrk_r>
 8008860:	3001      	adds	r0, #1
 8008862:	d0cf      	beq.n	8008804 <_malloc_r+0x48>
 8008864:	6025      	str	r5, [r4, #0]
 8008866:	e7db      	b.n	8008820 <_malloc_r+0x64>
 8008868:	20001ff8 	.word	0x20001ff8
 800886c:	20001ffc 	.word	0x20001ffc

08008870 <_realloc_r>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	4607      	mov	r7, r0
 8008874:	4614      	mov	r4, r2
 8008876:	460e      	mov	r6, r1
 8008878:	b921      	cbnz	r1, 8008884 <_realloc_r+0x14>
 800887a:	4611      	mov	r1, r2
 800887c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008880:	f7ff bf9c 	b.w	80087bc <_malloc_r>
 8008884:	b922      	cbnz	r2, 8008890 <_realloc_r+0x20>
 8008886:	f7ff ff4b 	bl	8008720 <_free_r>
 800888a:	4625      	mov	r5, r4
 800888c:	4628      	mov	r0, r5
 800888e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008890:	f000 f826 	bl	80088e0 <_malloc_usable_size_r>
 8008894:	42a0      	cmp	r0, r4
 8008896:	d20f      	bcs.n	80088b8 <_realloc_r+0x48>
 8008898:	4621      	mov	r1, r4
 800889a:	4638      	mov	r0, r7
 800889c:	f7ff ff8e 	bl	80087bc <_malloc_r>
 80088a0:	4605      	mov	r5, r0
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d0f2      	beq.n	800888c <_realloc_r+0x1c>
 80088a6:	4631      	mov	r1, r6
 80088a8:	4622      	mov	r2, r4
 80088aa:	f7ff fc11 	bl	80080d0 <memcpy>
 80088ae:	4631      	mov	r1, r6
 80088b0:	4638      	mov	r0, r7
 80088b2:	f7ff ff35 	bl	8008720 <_free_r>
 80088b6:	e7e9      	b.n	800888c <_realloc_r+0x1c>
 80088b8:	4635      	mov	r5, r6
 80088ba:	e7e7      	b.n	800888c <_realloc_r+0x1c>

080088bc <_sbrk_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4c06      	ldr	r4, [pc, #24]	; (80088d8 <_sbrk_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4605      	mov	r5, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	f7f8 f916 	bl	8000af8 <_sbrk>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_sbrk_r+0x1a>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_sbrk_r+0x1a>
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20002088 	.word	0x20002088

080088dc <__malloc_lock>:
 80088dc:	4770      	bx	lr

080088de <__malloc_unlock>:
 80088de:	4770      	bx	lr

080088e0 <_malloc_usable_size_r>:
 80088e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e4:	1f18      	subs	r0, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bfbc      	itt	lt
 80088ea:	580b      	ldrlt	r3, [r1, r0]
 80088ec:	18c0      	addlt	r0, r0, r3
 80088ee:	4770      	bx	lr

080088f0 <_init>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	bf00      	nop
 80088f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f6:	bc08      	pop	{r3}
 80088f8:	469e      	mov	lr, r3
 80088fa:	4770      	bx	lr

080088fc <_fini>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	bf00      	nop
 8008900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008902:	bc08      	pop	{r3}
 8008904:	469e      	mov	lr, r3
 8008906:	4770      	bx	lr
