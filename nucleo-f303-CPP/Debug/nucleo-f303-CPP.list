
nucleo-f303-CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a88  08003a88  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a88  08003a88  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a88  08003a88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08003b00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003b00  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c87  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019bd  00000000  00000000  00029d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  0002b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e560  00000000  00000000  0002c500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000727f  00000000  00000000  0004aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa7fb  00000000  00000000  00051cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc4da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002178  00000000  00000000  000fc558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a24 	.word	0x08003a24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003a24 	.word	0x08003a24

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a22:	f002 feb9 	bl	8003798 <sqrtf>
 8000a26:	eef0 7a40 	vmov.f32	s15, s0
 8000a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_Z9naiveSwapss>:

// Kahden muuttujan vaihtaminen ristiin; väärin, oikein ja Oikein

// Naiivi swap. Argumentit välitetään arvoina.
// Toimii väärin, mieti miksi
void naiveSwap (int16_t lahde, int16_t kohde) {
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	80fb      	strh	r3, [r7, #6]
 8000a40:	4613      	mov	r3, r2
 8000a42:	80bb      	strh	r3, [r7, #4]
	int16_t temp;

	temp = kohde;
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	81fb      	strh	r3, [r7, #14]
	kohde = lahde;
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	80bb      	strh	r3, [r7, #4]
	lahde = temp;
 8000a4c:	89fb      	ldrh	r3, [r7, #14]
 8000a4e:	80fb      	strh	r3, [r7, #6]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_Z6swap16PsS_>:

// C-tyylinen swap. Argumentit välitetään osoittimina (pointer).
// Toimii oikein annetulle datatyypille ( tässä int16_t ).
void swap16( int16_t *lahde, int16_t *kohde) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	int16_t temp;

	temp = *kohde;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	81fb      	strh	r3, [r7, #14]
	*kohde = *lahde;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	801a      	strh	r2, [r3, #0]
	*lahde = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	89fa      	ldrh	r2, [r7, #14]
 8000a7a:	801a      	strh	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_Z7swap16RRsS_>:

// C++-tyylinen swap. Argumentit välitetään viitteinä (reference).
// Toimii oikein annetulle datatyypille ( tässä int16_t ).
void swap16R( int16_t& lahde, int16_t& kohde) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	int16_t temp;

	temp = kohde;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	81fb      	strh	r3, [r7, #14]
	kohde = lahde;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	801a      	strh	r2, [r3, #0]
	lahde = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	89fa      	ldrh	r2, [r7, #14]
 8000aa6:	801a      	strh	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_ZN20threeSpaceQuaternionC1Ev>:
	float A;
	float x;
	float y;
	float z;
public:
	threeSpaceQuaternion() {};
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <_ZN20threeSpaceQuaternionC1Ev+0x1c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	08003a44 	.word	0x08003a44

08000ad4 <_ZN20threeSpaceQuaternionC1Effff>:
	threeSpaceQuaternion( float a, float X, float Y, float Z ) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6178      	str	r0, [r7, #20]
 8000adc:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ae0:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ae4:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ae8:	edc7 1a01 	vstr	s3, [r7, #4]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <_ZN20threeSpaceQuaternionC1Effff+0x44>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	601a      	str	r2, [r3, #0]
		A = a;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	605a      	str	r2, [r3, #4]
		x = X;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	609a      	str	r2, [r3, #8]
		y = Y;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	60da      	str	r2, [r3, #12]
		z = Z;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	611a      	str	r2, [r3, #16]
	};
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	08003a44 	.word	0x08003a44

08000b1c <_ZN20threeSpaceQuaternion8get2NormEv>:
	virtual float get2Norm() {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	ed2d 8b02 	vpush	{d8}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
		return A * sqrt(x*x + y*y + z*z);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	ed93 8a01 	vldr	s16, [r3, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	edd3 6a03 	vldr	s13, [r3, #12]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	edd3 6a04 	vldr	s13, [r3, #16]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b66:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6a:	f7ff ff53 	bl	8000a14 <_ZSt4sqrtf>
 8000b6e:	eef0 7a40 	vmov.f32	s15, s0
 8000b72:	ee68 7a27 	vmul.f32	s15, s16, s15
	};
 8000b76:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	ecbd 8b02 	vpop	{d8}
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_ZN20threeSpaceQuaternionplERKS_>:
	threeSpaceQuaternion operator+(const threeSpaceQuaternion& Q) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
		threeSpaceQuaternion sumQ;	// tilapäinen struktuuri pinossa...
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff ff8f 	bl	8000ab4 <_ZN20threeSpaceQuaternionC1Ev>
		sumQ.A = this->A + Q.A;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	edc3 7a01 	vstr	s15, [r3, #4]
		sumQ.x = this->x + Q.x;
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	ed93 7a02 	vldr	s14, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	edc3 7a02 	vstr	s15, [r3, #8]
		sumQ.y = this->y + Q.y;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	edc3 7a03 	vstr	s15, [r3, #12]
		sumQ.z = this->z + Q.z;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	ed93 7a04 	vldr	s14, [r3, #16]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	edc3 7a04 	vstr	s15, [r3, #16]
		return sumQ;				// ...kopioidaan kohdemuuttujaan palatessa
 8000bee:	bf00      	nop
	};
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_ZN20threeSpaceQuaternionaSEOS_>:
class threeSpaceQuaternion {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	691a      	ldr	r2, [r3, #16]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <main>:
	};

};


int main(void) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b0a9      	sub	sp, #164	; 0xa4
 8000c34:	af00      	add	r7, sp, #0
	int16_t A16, B16;
	double Af, Bf;
	threeSpaceQuaternion qA(1.0, 1.0, 1.0, 0.0);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	eddf 1a69 	vldr	s3, [pc, #420]	; 8000de0 <main+0x1b0>
 8000c3e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000c42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff42 	bl	8000ad4 <_ZN20threeSpaceQuaternionC1Effff>
	threeSpaceQuaternion qB(2.0, -5.0, 1.0, 0.0);
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	eddf 1a62 	vldr	s3, [pc, #392]	; 8000de0 <main+0x1b0>
 8000c58:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000c5c:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 8000c60:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff35 	bl	8000ad4 <_ZN20threeSpaceQuaternionC1Effff>
	threeSpaceQuaternion qC(3.0, 1.0, 1.0, 0.0);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	eddf 1a5c 	vldr	s3, [pc, #368]	; 8000de0 <main+0x1b0>
 8000c70:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000c74:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c78:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff29 	bl	8000ad4 <_ZN20threeSpaceQuaternionC1Effff>
	threeSpaceQuaternion *qD;
	float lengthA, lengthB, lengthC;


	HAL_Init();
 8000c82:	f000 fb4d 	bl	8001320 <HAL_Init>
	SystemClock_Config();
 8000c86:	f000 f8ad 	bl	8000de4 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000c8a:	f000 f94d 	bl	8000f28 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8000c8e:	f000 f917 	bl	8000ec0 <_ZL19MX_USART2_UART_Initv>

	A16 = 10000; B16 = 8000;
 8000c92:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8000c9a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000c9e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	Af = 100.5; Bf = 50.7;
 8000ca2:	a44b      	add	r4, pc, #300	; (adr r4, 8000dd0 <main+0x1a0>)
 8000ca4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ca8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8000cac:	a44a      	add	r4, pc, #296	; (adr r4, 8000dd8 <main+0x1a8>)
 8000cae:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000cb2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	qD = new threeSpaceQuaternion(1.0, 1.0, 1.0, 0.0);
 8000cb6:	2014      	movs	r0, #20
 8000cb8:	f002 fd54 	bl	8003764 <_Znwj>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461c      	mov	r4, r3
 8000cc0:	eddf 1a47 	vldr	s3, [pc, #284]	; 8000de0 <main+0x1b0>
 8000cc4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000cc8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ccc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f7ff feff 	bl	8000ad4 <_ZN20threeSpaceQuaternionC1Effff>
 8000cd6:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
	while (1) {
		naiveSwap( A16, B16 );
 8000cda:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8000cde:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fea5 	bl	8000a34 <_Z9naiveSwapss>
		swap16( &A16, &B16 );
 8000cea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cee:	f107 0352 	add.w	r3, r7, #82	; 0x52
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff feb1 	bl	8000a5c <_Z6swap16PsS_>
		swap16R( A16, B16 );
 8000cfa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cfe:	f107 0352 	add.w	r3, r7, #82	; 0x52
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff febf 	bl	8000a88 <_Z7swap16RRsS_>
		swap( A16, B16 );
 8000d0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d0e:	f107 0352 	add.w	r3, r7, #82	; 0x52
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f976 	bl	8001006 <_Z4swapIsEvRT_S1_>
		swap( Af, Bf );
 8000d1a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f984 	bl	8001032 <_Z4swapIdEvRT_S1_>
		lengthA = qA.get2Norm();
 8000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fef4 	bl	8000b1c <_ZN20threeSpaceQuaternion8get2NormEv>
 8000d34:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
		lengthB = qB.get2Norm();
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff feed 	bl	8000b1c <_ZN20threeSpaceQuaternion8get2NormEv>
 8000d42:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		swap(qA, qB);
 8000d46:	f107 0218 	add.w	r2, r7, #24
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f9a4 	bl	800109e <_Z4swapI20threeSpaceQuaternionEvRT_S2_>
		lengthA = qA.get2Norm();
 8000d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fede 	bl	8000b1c <_ZN20threeSpaceQuaternion8get2NormEv>
 8000d60:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
		lengthB = qB.get2Norm();
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fed7 	bl	8000b1c <_ZN20threeSpaceQuaternion8get2NormEv>
 8000d6e:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		qC = qA + qB;			// C++ kääntäjä osaa sijoituksen kopioimalla
 8000d72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d76:	f107 0218 	add.w	r2, r7, #24
 8000d7a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff00 	bl	8000b84 <_ZN20threeSpaceQuaternionplERKS_>
 8000d84:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff33 	bl	8000bf8 <_ZN20threeSpaceQuaternionaSEOS_>
								// me ollaan kerrottu miten yhteenlasku tehdään
		lengthC = qC.get2Norm();
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fec1 	bl	8000b1c <_ZN20threeSpaceQuaternion8get2NormEv>
 8000d9a:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
		*qD = qA + qB + qC;
 8000d9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000da2:	f107 0218 	add.w	r2, r7, #24
 8000da6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff feea 	bl	8000b84 <_ZN20threeSpaceQuaternionplERKS_>
 8000db0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000db4:	1d3a      	adds	r2, r7, #4
 8000db6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fee2 	bl	8000b84 <_ZN20threeSpaceQuaternionplERKS_>
 8000dc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000dca:	f7ff ff15 	bl	8000bf8 <_ZN20threeSpaceQuaternionaSEOS_>
		naiveSwap( A16, B16 );
 8000dce:	e784      	b.n	8000cda <main+0xaa>
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	40592000 	.word	0x40592000
 8000dd8:	9999999a 	.word	0x9999999a
 8000ddc:	40495999 	.word	0x40495999
 8000de0:	00000000 	.word	0x00000000

08000de4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0a6      	sub	sp, #152	; 0x98
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dee:	2228      	movs	r2, #40	; 0x28
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fd5e 	bl	80038b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2258      	movs	r2, #88	; 0x58
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fd50 	bl	80038b4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fd5a 	bl	80018fc <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf14      	ite	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	2300      	moveq	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000e58:	f000 f8ce 	bl	8000ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e76:	2102      	movs	r1, #2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fc55 	bl	8002728 <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf14      	ite	ne
 8000e84:	2301      	movne	r3, #1
 8000e86:	2300      	moveq	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000e8e:	f000 f8b3 	bl	8000ff8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fe79 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf14      	ite	ne
 8000ea8:	2301      	movne	r3, #1
 8000eaa:	2300      	moveq	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8000eb2:	f000 f8a1 	bl	8000ff8 <Error_Handler>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3798      	adds	r7, #152	; 0x98
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ec6:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ecc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000f04:	f002 f864 	bl	8002fd0 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000f18:	f000 f86e 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000008c 	.word	0x2000008c
 8000f24:	40004400 	.word	0x40004400

08000f28 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	4b28      	ldr	r3, [pc, #160]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a24      	ldr	r2, [pc, #144]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <_ZL12MX_GPIO_Initv+0xc4>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f000 fc91 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xc8>)
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xcc>)
 8000fc0:	f000 fafa 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f000 faeb 	bl	80015b8 <HAL_GPIO_Init>

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	10210000 	.word	0x10210000
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_Z4swapIsEvRT_S1_>:
template <class T> void swap( T& lahde, T& kohde ) {
 8001006:	b480      	push	{r7}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
	temp = kohde;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	81fb      	strh	r3, [r7, #14]
	kohde = lahde;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f9b3 2000 	ldrsh.w	r2, [r3]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	801a      	strh	r2, [r3, #0]
	lahde = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	89fa      	ldrh	r2, [r7, #14]
 8001024:	801a      	strh	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_Z4swapIdEvRT_S1_>:
template <class T> void swap( T& lahde, T& kohde ) {
 8001032:	b490      	push	{r4, r7}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
	temp = kohde;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001042:	e9c7 3402 	strd	r3, r4, [r7, #8]
	kohde = lahde;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	e9d3 3400 	ldrd	r3, r4, [r3]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	e9c2 3400 	strd	r3, r4, [r2]
	lahde = temp;
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001058:	e9c2 3400 	strd	r3, r4, [r2]
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bc90      	pop	{r4, r7}
 8001064:	4770      	bx	lr

08001066 <_ZN20threeSpaceQuaternionaSERKS_>:
class threeSpaceQuaternion {
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_Z4swapI20threeSpaceQuaternionEvRT_S2_>:
template <class T> void swap( T& lahde, T& kohde ) {
 800109e:	b580      	push	{r7, lr}
 80010a0:	b088      	sub	sp, #32
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	T temp;
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd01 	bl	8000ab4 <_ZN20threeSpaceQuaternionC1Ev>
	temp = kohde;
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffd4 	bl	8001066 <_ZN20threeSpaceQuaternionaSERKS_>
	kohde = lahde;
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f7ff ffd0 	bl	8001066 <_ZN20threeSpaceQuaternionaSERKS_>
	lahde = temp;
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffca 	bl	8001066 <_ZN20threeSpaceQuaternionaSERKS_>
}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x44>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_MspInit+0x44>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_MspInit+0x44>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_MspInit+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_MspInit+0x44>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_MspInit+0x44>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001112:	2007      	movs	r0, #7
 8001114:	f000 fa1c 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d128      	bne.n	8001198 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_UART_MspInit+0x80>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <HAL_UART_MspInit+0x80>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_UART_MspInit+0x80>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_UART_MspInit+0x80>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_UART_MspInit+0x80>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_UART_MspInit+0x80>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001176:	230c      	movs	r3, #12
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001186:	2307      	movs	r3, #7
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f000 fa10 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40021000 	.word	0x40021000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fc:	f000 f8d6 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_kill>:

int _kill(int pid, int sig)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800121e:	f002 fb17 	bl	8003850 <__errno>
 8001222:	4602      	mov	r2, r0
 8001224:	2316      	movs	r3, #22
 8001226:	6013      	str	r3, [r2, #0]
	return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_exit>:

void _exit (int status)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffe7 	bl	8001214 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001246:	e7fe      	b.n	8001246 <_exit+0x12>

08001248 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x50>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x16>
		heap_end = &end;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <_sbrk+0x50>)
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <_sbrk+0x54>)
 800125c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <_sbrk+0x50>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <_sbrk+0x50>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	466a      	mov	r2, sp
 800126e:	4293      	cmp	r3, r2
 8001270:	d907      	bls.n	8001282 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001272:	f002 faed 	bl	8003850 <__errno>
 8001276:	4602      	mov	r2, r0
 8001278:	230c      	movs	r3, #12
 800127a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	e006      	b.n	8001290 <_sbrk+0x48>
	}

	heap_end += incr;
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <_sbrk+0x50>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <_sbrk+0x50>)
 800128c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000010c 	.word	0x2000010c
 800129c:	20000128 	.word	0x20000128

080012a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <SystemInit+0x28>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <SystemInit+0x28>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SystemInit+0x28>)
 80012b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ba:	609a      	str	r2, [r3, #8]
#endif
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012d2:	e003      	b.n	80012dc <LoopCopyDataInit>

080012d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012da:	3104      	adds	r1, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <LoopForever+0xa>)
	ldr	r3, =_edata
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012e4:	d3f6      	bcc.n	80012d4 <CopyDataInit>
	ldr	r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012e8:	e002      	b.n	80012f0 <LoopFillZerobss>

080012ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012ec:	f842 3b04 	str.w	r3, [r2], #4

080012f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <LoopForever+0x16>)
	cmp	r2, r3
 80012f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012f4:	d3f9      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f6:	f7ff ffd3 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f002 faaf 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fe:	f7ff fc97 	bl	8000c30 <main>

08001302 <LoopForever>:

LoopForever:
    b LoopForever
 8001302:	e7fe      	b.n	8001302 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001304:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001308:	08003a90 	.word	0x08003a90
	ldr	r0, =_sdata
 800130c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001310:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001314:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001318:	20000124 	.word	0x20000124

0800131c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_2_IRQHandler>
	...

08001320 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_Init+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_Init+0x28>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 f90d 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f808 	bl	800134c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133c:	f7ff fece 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x54>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f917 	bl	800159e <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f8ed 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x5c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008
 80013d0:	2000011c 	.word	0x2000011c

080013d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2000011c 	.word	0x2000011c

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff47 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff5c 	bl	8001434 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffb0 	bl	800150c <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e160      	b.n	800188a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8152 	beq.w	8001884 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x38>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	6939      	ldr	r1, [r7, #16]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d00b      	beq.n	800168c <HAL_GPIO_Init+0xd4>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001680:	2b11      	cmp	r3, #17
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b12      	cmp	r3, #18
 800168a:	d130      	bne.n	80016ee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 0201 	and.w	r2, r3, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80ac 	beq.w	8001884 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <HAL_GPIO_Init+0x2f0>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a5d      	ldr	r2, [pc, #372]	; (80018a8 <HAL_GPIO_Init+0x2f0>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b5b      	ldr	r3, [pc, #364]	; (80018a8 <HAL_GPIO_Init+0x2f0>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001744:	4a59      	ldr	r2, [pc, #356]	; (80018ac <HAL_GPIO_Init+0x2f4>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800176e:	d025      	beq.n	80017bc <HAL_GPIO_Init+0x204>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a4f      	ldr	r2, [pc, #316]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d01f      	beq.n	80017b8 <HAL_GPIO_Init+0x200>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a4e      	ldr	r2, [pc, #312]	; (80018b4 <HAL_GPIO_Init+0x2fc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d019      	beq.n	80017b4 <HAL_GPIO_Init+0x1fc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a4d      	ldr	r2, [pc, #308]	; (80018b8 <HAL_GPIO_Init+0x300>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d013      	beq.n	80017b0 <HAL_GPIO_Init+0x1f8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <HAL_GPIO_Init+0x304>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00d      	beq.n	80017ac <HAL_GPIO_Init+0x1f4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a4b      	ldr	r2, [pc, #300]	; (80018c0 <HAL_GPIO_Init+0x308>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_Init+0x1f0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_GPIO_Init+0x1ec>
 80017a0:	2306      	movs	r3, #6
 80017a2:	e00c      	b.n	80017be <HAL_GPIO_Init+0x206>
 80017a4:	2307      	movs	r3, #7
 80017a6:	e00a      	b.n	80017be <HAL_GPIO_Init+0x206>
 80017a8:	2305      	movs	r3, #5
 80017aa:	e008      	b.n	80017be <HAL_GPIO_Init+0x206>
 80017ac:	2304      	movs	r3, #4
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x206>
 80017b0:	2303      	movs	r3, #3
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x206>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x206>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x206>
 80017bc:	2300      	movs	r3, #0
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ce:	4937      	ldr	r1, [pc, #220]	; (80018ac <HAL_GPIO_Init+0x2f4>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_GPIO_Init+0x310>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001800:	4a31      	ldr	r2, [pc, #196]	; (80018c8 <HAL_GPIO_Init+0x310>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_GPIO_Init+0x310>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800182a:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <HAL_GPIO_Init+0x310>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_GPIO_Init+0x310>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_GPIO_Init+0x310>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_GPIO_Init+0x310>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <HAL_GPIO_Init+0x310>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f ae97 	bne.w	80015c8 <HAL_GPIO_Init+0x10>
  }
}
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	48000c00 	.word	0x48000c00
 80018bc:	48001000 	.word	0x48001000
 80018c0:	48001400 	.word	0x48001400
 80018c4:	48001800 	.word	0x48001800
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001902:	af00      	add	r7, sp, #0
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	f000 bf01 	b.w	8002718 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 8160 	beq.w	8001be6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001926:	4bae      	ldr	r3, [pc, #696]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b04      	cmp	r3, #4
 8001930:	d00c      	beq.n	800194c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001932:	4bab      	ldr	r3, [pc, #684]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d159      	bne.n	80019f2 <HAL_RCC_OscConfig+0xf6>
 800193e:	4ba8      	ldr	r3, [pc, #672]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194a:	d152      	bne.n	80019f2 <HAL_RCC_OscConfig+0xf6>
 800194c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001950:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001960:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d102      	bne.n	800197e <HAL_RCC_OscConfig+0x82>
 8001978:	4b99      	ldr	r3, [pc, #612]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0xae>
 800197e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001982:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001996:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800199a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019a6:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ae:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80019b2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80019b6:	fa92 f2a2 	rbit	r2, r2
 80019ba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80019be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019c2:	fab2 f282 	clz	r2, r2
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f042 0220 	orr.w	r2, r2, #32
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f002 021f 	and.w	r2, r2, #31
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f202 	lsl.w	r2, r1, r2
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8102 	beq.w	8001be4 <HAL_RCC_OscConfig+0x2e8>
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 80fc 	bne.w	8001be4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f000 be93 	b.w	8002718 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d106      	bne.n	8001a0c <HAL_RCC_OscConfig+0x110>
 80019fe:	4b78      	ldr	r3, [pc, #480]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a77      	ldr	r2, [pc, #476]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e030      	b.n	8001a6e <HAL_RCC_OscConfig+0x172>
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x134>
 8001a16:	4b72      	ldr	r3, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a71      	ldr	r2, [pc, #452]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6e      	ldr	r2, [pc, #440]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01e      	b.n	8001a6e <HAL_RCC_OscConfig+0x172>
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x15a>
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a67      	ldr	r2, [pc, #412]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a64      	ldr	r2, [pc, #400]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0x172>
 8001a56:	4b62      	ldr	r3, [pc, #392]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a61      	ldr	r2, [pc, #388]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b5f      	ldr	r3, [pc, #380]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d059      	beq.n	8001b2c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fcac 	bl	80013d4 <HAL_GetTick>
 8001a7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a82:	f7ff fca7 	bl	80013d4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d902      	bls.n	8001a98 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f000 be40 	b.w	8002718 <HAL_RCC_OscConfig+0xe1c>
 8001a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001aac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d102      	bne.n	8001aca <HAL_RCC_OscConfig+0x1ce>
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x1fa>
 8001aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ace:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ae6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001af2:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001afa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001afe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001b02:	fa92 f2a2 	rbit	r2, r2
 8001b06:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001b0a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b0e:	fab2 f282 	clz	r2, r2
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f042 0220 	orr.w	r2, r2, #32
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f002 021f 	and.w	r2, r2, #31
 8001b1e:	2101      	movs	r1, #1
 8001b20:	fa01 f202 	lsl.w	r2, r1, r2
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ab      	beq.n	8001a82 <HAL_RCC_OscConfig+0x186>
 8001b2a:	e05c      	b.n	8001be6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fc52 	bl	80013d4 <HAL_GetTick>
 8001b30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b36:	f7ff fc4d 	bl	80013d4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d902      	bls.n	8001b4c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f000 bde6 	b.w	8002718 <HAL_RCC_OscConfig+0xe1c>
 8001b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b50:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001b60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_OscConfig+0x282>
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x2ae>
 8001b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001bb2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001bb6:	fa92 f2a2 	rbit	r2, r2
 8001bba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001bbe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bc2:	fab2 f282 	clz	r2, r2
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f042 0220 	orr.w	r2, r2, #32
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	f002 021f 	and.w	r2, r2, #31
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ab      	bne.n	8001b36 <HAL_RCC_OscConfig+0x23a>
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_OscConfig+0x2ea>
 8001be0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8170 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bf6:	4bd0      	ldr	r3, [pc, #832]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c02:	4bcd      	ldr	r3, [pc, #820]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d16d      	bne.n	8001cea <HAL_RCC_OscConfig+0x3ee>
 8001c0e:	4bca      	ldr	r3, [pc, #808]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1a:	d166      	bne.n	8001cea <HAL_RCC_OscConfig+0x3ee>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001c2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x350>
 8001c46:	4bbc      	ldr	r3, [pc, #752]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e013      	b.n	8001c74 <HAL_RCC_OscConfig+0x378>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c64:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c70:	4bb1      	ldr	r3, [pc, #708]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	2202      	movs	r2, #2
 8001c76:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001c7a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001c86:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f042 0220 	orr.w	r2, r2, #32
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f002 021f 	and.w	r2, r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3ba>
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d002      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f000 bd31 	b.w	8002718 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4ba0      	ldr	r3, [pc, #640]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	21f8      	movs	r1, #248	; 0xf8
 8001cc6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001cce:	fa91 f1a1 	rbit	r1, r1
 8001cd2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001cd6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cda:	fab1 f181 	clz	r1, r1
 8001cde:	b2c9      	uxtb	r1, r1
 8001ce0:	408b      	lsls	r3, r1
 8001ce2:	4995      	ldr	r1, [pc, #596]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce8:	e0f5      	b.n	8001ed6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8085 	beq.w	8001e00 <HAL_RCC_OscConfig+0x504>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001d08:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2301      	movs	r3, #1
 8001d20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff fb57 	bl	80013d4 <HAL_GetTick>
 8001d26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fb52 	bl	80013d4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d902      	bls.n	8001d42 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f000 bceb 	b.w	8002718 <HAL_RCC_OscConfig+0xe1c>
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001d54:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d102      	bne.n	8001d72 <HAL_RCC_OscConfig+0x476>
 8001d6c:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	e013      	b.n	8001d9a <HAL_RCC_OscConfig+0x49e>
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001d84:	2302      	movs	r3, #2
 8001d86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d96:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001da0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001da4:	fa92 f2a2 	rbit	r2, r2
 8001da8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001dac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001db0:	fab2 f282 	clz	r2, r2
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f042 0220 	orr.w	r2, r2, #32
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f002 021f 	and.w	r2, r2, #31
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0af      	beq.n	8001d2c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	21f8      	movs	r1, #248	; 0xf8
 8001ddc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001de4:	fa91 f1a1 	rbit	r1, r1
 8001de8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001dec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001df0:	fab1 f181 	clz	r1, r1
 8001df4:	b2c9      	uxtb	r1, r1
 8001df6:	408b      	lsls	r3, r1
 8001df8:	494f      	ldr	r1, [pc, #316]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
 8001dfe:	e06a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x5da>
 8001e00:	2301      	movs	r3, #1
 8001e02:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001e12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	461a      	mov	r2, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fad2 	bl	80013d4 <HAL_GetTick>
 8001e30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff facd 	bl	80013d4 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d902      	bls.n	8001e4c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	f000 bc66 	b.w	8002718 <HAL_RCC_OscConfig+0xe1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001e5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x580>
 8001e76:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0x5a8>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_OscConfig+0x63c>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001eaa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001eb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001eba:	fab2 f282 	clz	r2, r2
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	f042 0220 	orr.w	r2, r2, #32
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f002 021f 	and.w	r2, r2, #31
 8001eca:	2101      	movs	r1, #1
 8001ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1af      	bne.n	8001e36 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80da 	beq.w	800209a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d069      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x6c8>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001f02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x640>)
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	461a      	mov	r2, r3
 8001f16:	2301      	movs	r3, #1
 8001f18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fa5b 	bl	80013d4 <HAL_GetTick>
 8001f1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	e00d      	b.n	8001f40 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fa56 	bl	80013d4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d905      	bls.n	8001f40 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e3ef      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	10908120 	.word	0x10908120
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001f58:	2202      	movs	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f70:	2202      	movs	r2, #2
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f2a3 	rbit	r2, r3
 8001f7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f84:	4ba4      	ldr	r3, [pc, #656]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8001f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	6019      	str	r1, [r3, #0]
 8001f90:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f1a3 	rbit	r1, r3
 8001f9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f9e:	6019      	str	r1, [r3, #0]
  return result;
 8001fa0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0b0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x628>
 8001fc2:	e06a      	b.n	800209a <HAL_RCC_OscConfig+0x79e>
 8001fc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fda:	601a      	str	r2, [r3, #0]
  return result;
 8001fdc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fe0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b8c      	ldr	r3, [pc, #560]	; (800221c <HAL_RCC_OscConfig+0x920>)
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f9ed 	bl	80013d4 <HAL_GetTick>
 8001ffa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffe:	e009      	b.n	8002014 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff f9e8 	bl	80013d4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e381      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
 8002014:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002018:	2202      	movs	r2, #2
 800201a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002030:	2202      	movs	r2, #2
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002048:	2202      	movs	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f2a3 	rbit	r2, r3
 8002056:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800205a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b6e      	ldr	r3, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 800205e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002060:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002064:	2102      	movs	r1, #2
 8002066:	6019      	str	r1, [r3, #0]
 8002068:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fa93 f1a3 	rbit	r1, r3
 8002072:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002076:	6019      	str	r1, [r3, #0]
  return result;
 8002078:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2101      	movs	r1, #1
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1b2      	bne.n	8002000 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8157 	beq.w	8002358 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d112      	bne.n	80020e2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c6:	61d3      	str	r3, [r2, #28]
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_OscConfig+0x924>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11a      	bne.n	8002124 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ee:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <HAL_RCC_OscConfig+0x924>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <HAL_RCC_OscConfig+0x924>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7ff f96b 	bl	80013d4 <HAL_GetTick>
 80020fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	e009      	b.n	8002118 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7ff f966 	bl	80013d4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e2ff      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_RCC_OscConfig+0x924>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ef      	beq.n	8002104 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d106      	bne.n	800213c <HAL_RCC_OscConfig+0x840>
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a39      	ldr	r2, [pc, #228]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	e02f      	b.n	800219c <HAL_RCC_OscConfig+0x8a0>
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x864>
 8002146:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a33      	ldr	r2, [pc, #204]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a30      	ldr	r2, [pc, #192]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	e01d      	b.n	800219c <HAL_RCC_OscConfig+0x8a0>
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x888>
 800216a:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x8a0>
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a20      	ldr	r2, [pc, #128]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d06a      	beq.n	800227c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7ff f915 	bl	80013d4 <HAL_GetTick>
 80021aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7ff f910 	bl	80013d4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e2a7      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
 80021c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021cc:	2202      	movs	r2, #2
 80021ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021f6:	601a      	str	r2, [r3, #0]
  return result;
 80021f8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d108      	bne.n	8002224 <HAL_RCC_OscConfig+0x928>
 8002212:	4b01      	ldr	r3, [pc, #4]	; (8002218 <HAL_RCC_OscConfig+0x91c>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	e013      	b.n	8002240 <HAL_RCC_OscConfig+0x944>
 8002218:	40021000 	.word	0x40021000
 800221c:	10908120 	.word	0x10908120
 8002220:	40007000 	.word	0x40007000
 8002224:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002228:	2202      	movs	r2, #2
 800222a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	4bc0      	ldr	r3, [pc, #768]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002244:	2102      	movs	r1, #2
 8002246:	6011      	str	r1, [r2, #0]
 8002248:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	fa92 f1a2 	rbit	r1, r2
 8002252:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002256:	6011      	str	r1, [r2, #0]
  return result;
 8002258:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	fab2 f282 	clz	r2, r2
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f002 021f 	and.w	r2, r2, #31
 800226e:	2101      	movs	r1, #1
 8002270:	fa01 f202 	lsl.w	r2, r1, r2
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d09a      	beq.n	80021b0 <HAL_RCC_OscConfig+0x8b4>
 800227a:	e063      	b.n	8002344 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff f8aa 	bl	80013d4 <HAL_GetTick>
 8002280:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f8a5 	bl	80013d4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e23c      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
 800229e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022ba:	2202      	movs	r2, #2
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d102      	bne.n	80022ee <HAL_RCC_OscConfig+0x9f2>
 80022e8:	4b95      	ldr	r3, [pc, #596]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	e00d      	b.n	800230a <HAL_RCC_OscConfig+0xa0e>
 80022ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022f2:	2202      	movs	r2, #2
 80022f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f2a3 	rbit	r2, r3
 8002300:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	4b8e      	ldr	r3, [pc, #568]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800230e:	2102      	movs	r1, #2
 8002310:	6011      	str	r1, [r2, #0]
 8002312:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	fa92 f1a2 	rbit	r1, r2
 800231c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002320:	6011      	str	r1, [r2, #0]
  return result;
 8002322:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f002 021f 	and.w	r2, r2, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f202 	lsl.w	r2, r1, r2
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1a0      	bne.n	8002286 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002344:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002348:	2b01      	cmp	r3, #1
 800234a:	d105      	bne.n	8002358 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234c:	4b7c      	ldr	r3, [pc, #496]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a7b      	ldr	r2, [pc, #492]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 8002352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002356:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 81d9 	beq.w	8002716 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002364:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b08      	cmp	r3, #8
 800236e:	f000 81a6 	beq.w	80026be <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b02      	cmp	r3, #2
 800237a:	f040 811e 	bne.w	80025ba <HAL_RCC_OscConfig+0xcbe>
 800237e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002382:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002396:	601a      	str	r2, [r3, #0]
  return result;
 8002398:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800239c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	461a      	mov	r2, r3
 80023b0:	2300      	movs	r3, #0
 80023b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff f80e 	bl	80013d4 <HAL_GetTick>
 80023b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023bc:	e009      	b.n	80023d2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff f809 	bl	80013d4 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1a2      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
 80023d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023ea:	601a      	str	r2, [r3, #0]
  return result;
 80023ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0xb10>
 8002406:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	e01b      	b.n	8002444 <HAL_RCC_OscConfig+0xb48>
 800240c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800242a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002448:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800244c:	6011      	str	r1, [r2, #0]
 800244e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	fa92 f1a2 	rbit	r1, r2
 8002458:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800245c:	6011      	str	r1, [r2, #0]
  return result;
 800245e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	fab2 f282 	clz	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f002 021f 	and.w	r2, r2, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d19e      	bne.n	80023be <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002480:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	f023 020f 	bic.w	r2, r3, #15
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	492c      	ldr	r1, [pc, #176]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 8002490:	4313      	orrs	r3, r2
 8002492:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a19      	ldr	r1, [r3, #32]
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	4925      	ldr	r1, [pc, #148]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
 80024b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	461a      	mov	r2, r3
 80024e2:	2301      	movs	r3, #1
 80024e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe ff75 	bl	80013d4 <HAL_GetTick>
 80024ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ee:	e009      	b.n	8002504 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe ff70 	bl	80013d4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e109      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
 8002504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800251c:	601a      	str	r2, [r3, #0]
  return result;
 800251e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002522:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <HAL_RCC_OscConfig+0xc48>
 8002538:	4b01      	ldr	r3, [pc, #4]	; (8002540 <HAL_RCC_OscConfig+0xc44>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e01e      	b.n	800257c <HAL_RCC_OscConfig+0xc80>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800254c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	fa93 f2a3 	rbit	r2, r3
 8002572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	4b6a      	ldr	r3, [pc, #424]	; (8002724 <HAL_RCC_OscConfig+0xe28>)
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002584:	6011      	str	r1, [r2, #0]
 8002586:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fa92 f1a2 	rbit	r1, r2
 8002590:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002594:	6011      	str	r1, [r2, #0]
  return result;
 8002596:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f042 0220 	orr.w	r2, r2, #32
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f002 021f 	and.w	r2, r2, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d09b      	beq.n	80024f0 <HAL_RCC_OscConfig+0xbf4>
 80025b8:	e0ad      	b.n	8002716 <HAL_RCC_OscConfig+0xe1a>
 80025ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d2:	601a      	str	r2, [r3, #0]
  return result;
 80025d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	461a      	mov	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fef0 	bl	80013d4 <HAL_GetTick>
 80025f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f8:	e009      	b.n	800260e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe feeb 	bl	80013d4 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e084      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
 800260e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002626:	601a      	str	r2, [r3, #0]
  return result;
 8002628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800262c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_RCC_OscConfig+0xd4c>
 8002642:	4b38      	ldr	r3, [pc, #224]	; (8002724 <HAL_RCC_OscConfig+0xe28>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	e01b      	b.n	8002680 <HAL_RCC_OscConfig+0xd84>
 8002648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f107 0320 	add.w	r3, r7, #32
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f107 031c 	add.w	r3, r7, #28
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f107 0318 	add.w	r3, r7, #24
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_RCC_OscConfig+0xe28>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f107 0214 	add.w	r2, r7, #20
 8002684:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002688:	6011      	str	r1, [r2, #0]
 800268a:	f107 0214 	add.w	r2, r7, #20
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	fa92 f1a2 	rbit	r1, r2
 8002694:	f107 0210 	add.w	r2, r7, #16
 8002698:	6011      	str	r1, [r2, #0]
  return result;
 800269a:	f107 0210 	add.w	r2, r7, #16
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	fab2 f282 	clz	r2, r2
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f042 0220 	orr.w	r2, r2, #32
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f002 021f 	and.w	r2, r2, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f202 	lsl.w	r2, r1, r2
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d19e      	bne.n	80025fa <HAL_RCC_OscConfig+0xcfe>
 80026bc:	e02b      	b.n	8002716 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e025      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_RCC_OscConfig+0xe28>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <HAL_RCC_OscConfig+0xe28>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026e0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d111      	bne.n	8002712 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d108      	bne.n	8002712 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002700:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002704:	f003 020f 	and.w	r2, r3, #15
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800270e:	429a      	cmp	r2, r3
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b09e      	sub	sp, #120	; 0x78
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e162      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b90      	ldr	r3, [pc, #576]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d910      	bls.n	8002770 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	498b      	ldr	r1, [pc, #556]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b89      	ldr	r3, [pc, #548]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e14a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b82      	ldr	r3, [pc, #520]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	497f      	ldr	r1, [pc, #508]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80dc 	beq.w	8002954 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d13c      	bne.n	800281e <HAL_RCC_ClockConfig+0xf6>
 80027a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_ClockConfig+0xa6>
 80027c8:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	e00f      	b.n	80027ee <HAL_RCC_ClockConfig+0xc6>
 80027ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	667b      	str	r3, [r7, #100]	; 0x64
 80027dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e0:	663b      	str	r3, [r7, #96]	; 0x60
 80027e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ea:	4b67      	ldr	r3, [pc, #412]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80027f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027f6:	fa92 f2a2 	rbit	r2, r2
 80027fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d17b      	bne.n	8002912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0f3      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d13c      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x178>
 8002826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_RCC_ClockConfig+0x128>
 800284a:	4b4f      	ldr	r3, [pc, #316]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e00f      	b.n	8002870 <HAL_RCC_ClockConfig+0x148>
 8002850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	647b      	str	r3, [r7, #68]	; 0x44
 800285e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002862:	643b      	str	r3, [r7, #64]	; 0x40
 8002864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002874:	63ba      	str	r2, [r7, #56]	; 0x38
 8002876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002878:	fa92 f2a2 	rbit	r2, r2
 800287c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800287e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d13a      	bne.n	8002912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b2      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
 80028a0:	2302      	movs	r3, #2
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d102      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x1a0>
 80028c2:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e00d      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1bc>
 80028c8:	2302      	movs	r3, #2
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	2302      	movs	r3, #2
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2202      	movs	r2, #2
 80028e6:	61ba      	str	r2, [r7, #24]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	fa92 f2a2 	rbit	r2, r2
 80028ee:	617a      	str	r2, [r7, #20]
  return result;
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	fab2 f282 	clz	r2, r2
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f042 0220 	orr.w	r2, r2, #32
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f002 021f 	and.w	r2, r2, #31
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e079      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	491a      	ldr	r1, [pc, #104]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002924:	f7fe fd56 	bl	80013d4 <HAL_GetTick>
 8002928:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	e00a      	b.n	8002942 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7fe fd52 	bl	80013d4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e061      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 020c 	and.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	429a      	cmp	r2, r3
 8002952:	d1eb      	bne.n	800292c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d214      	bcs.n	800298c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4906      	ldr	r1, [pc, #24]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e040      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
 8002984:	40022000 	.word	0x40022000
 8002988:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	491a      	ldr	r1, [pc, #104]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4912      	ldr	r1, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ca:	f000 f829 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029ce:	4601      	mov	r1, r0
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d8:	22f0      	movs	r2, #240	; 0xf0
 80029da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	fa92 f2a2 	rbit	r2, r2
 80029e2:	60fa      	str	r2, [r7, #12]
  return result;
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	40d3      	lsrs	r3, r2
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x2ec>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	fa21 f303 	lsr.w	r3, r1, r3
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_RCC_ClockConfig+0x2f0>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_RCC_ClockConfig+0x2f4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fca4 	bl	800134c <HAL_InitTick>
  
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3778      	adds	r7, #120	; 0x78
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08003a48 	.word	0x08003a48
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004

08002a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b08b      	sub	sp, #44	; 0x2c
 8002a24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d002      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x30>
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x36>
 8002a4e:	e03f      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a52:	623b      	str	r3, [r7, #32]
      break;
 8002a54:	e03f      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a60:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	fa92 f2a2 	rbit	r2, r2
 8002a68:	607a      	str	r2, [r7, #4]
  return result;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	fab2 f282 	clz	r2, r2
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	40d3      	lsrs	r3, r2
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	220f      	movs	r2, #15
 8002a84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	fa92 f2a2 	rbit	r2, r2
 8002a8c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	40d3      	lsrs	r3, r2
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab8:	e007      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	623b      	str	r3, [r7, #32]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ad2:	623b      	str	r3, [r7, #32]
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	372c      	adds	r7, #44	; 0x2c
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	007a1200 	.word	0x007a1200
 8002aec:	08003a60 	.word	0x08003a60
 8002af0:	08003a70 	.word	0x08003a70

08002af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000

08002b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b12:	f7ff ffef 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b16:	4601      	mov	r1, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	fa92 f2a2 	rbit	r2, r2
 8002b2c:	603a      	str	r2, [r7, #0]
  return result;
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	40d3      	lsrs	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08003a58 	.word	0x08003a58

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b56:	f7ff ffcd 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	603a      	str	r2, [r7, #0]
  return result;
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	40d3      	lsrs	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08003a58 	.word	0x08003a58

08002b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b092      	sub	sp, #72	; 0x48
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80d7 	beq.w	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb8:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10e      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a4a      	ldr	r2, [pc, #296]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bce:	61d3      	str	r3, [r2, #28]
 8002bd0:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b45      	ldr	r3, [pc, #276]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b42      	ldr	r3, [pc, #264]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a41      	ldr	r2, [pc, #260]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fbeb 	bl	80013d4 <HAL_GetTick>
 8002bfe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe fbe7 	bl	80013d4 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1d6      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c20:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c28:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8084 	beq.w	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d07c      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c40:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2300      	movs	r3, #0
 8002c90:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c96:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04b      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fb97 	bl	80013d4 <HAL_GetTick>
 8002ca6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fb93 	bl	80013d4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e180      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	61fb      	str	r3, [r7, #28]
  return result;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d108      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002cee:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	e00d      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	10908100 	.word	0x10908100
 8002d00:	2302      	movs	r3, #2
 8002d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	4ba0      	ldr	r3, [pc, #640]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2202      	movs	r2, #2
 8002d12:	613a      	str	r2, [r7, #16]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	fa92 f2a2 	rbit	r2, r2
 8002d1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	fab2 f282 	clz	r2, r2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f002 021f 	and.w	r2, r2, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0b7      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d3a:	4b95      	ldr	r3, [pc, #596]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4992      	ldr	r1, [pc, #584]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b8e      	ldr	r3, [pc, #568]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	4a8d      	ldr	r2, [pc, #564]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d6c:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f023 0203 	bic.w	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4985      	ldr	r1, [pc, #532]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d8a:	4b81      	ldr	r3, [pc, #516]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	497e      	ldr	r1, [pc, #504]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002da8:	4b79      	ldr	r3, [pc, #484]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	4976      	ldr	r1, [pc, #472]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc6:	4b72      	ldr	r3, [pc, #456]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f023 0210 	bic.w	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	496f      	ldr	r1, [pc, #444]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002de4:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	4967      	ldr	r1, [pc, #412]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f023 0220 	bic.w	r2, r3, #32
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4960      	ldr	r1, [pc, #384]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e20:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	4958      	ldr	r1, [pc, #352]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e3e:	4b54      	ldr	r3, [pc, #336]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4951      	ldr	r1, [pc, #324]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e5c:	4b4c      	ldr	r3, [pc, #304]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4949      	ldr	r1, [pc, #292]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e7a:	4b45      	ldr	r3, [pc, #276]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4942      	ldr	r1, [pc, #264]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e98:	4b3d      	ldr	r3, [pc, #244]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	493a      	ldr	r1, [pc, #232]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002eb6:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	4933      	ldr	r1, [pc, #204]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	492b      	ldr	r1, [pc, #172]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ef2:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4924      	ldr	r1, [pc, #144]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	491c      	ldr	r1, [pc, #112]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	4915      	ldr	r1, [pc, #84]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	490d      	ldr	r1, [pc, #52]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f76:	4906      	ldr	r1, [pc, #24]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00c      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f88:	4b01      	ldr	r3, [pc, #4]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	e002      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9c:	490b      	ldr	r1, [pc, #44]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fba:	4904      	ldr	r1, [pc, #16]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3748      	adds	r7, #72	; 0x48
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e040      	b.n	8003064 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe f896 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f82c 	bl	800306c <UART_SetConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa3a 	bl	80034a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fac1 	bl	80035e4 <UART_CheckIdleState>
 8003062:	4603      	mov	r3, r0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4bac      	ldr	r3, [pc, #688]	; (800334c <UART_SetConfig+0x2e0>)
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	6939      	ldr	r1, [r7, #16]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a9a      	ldr	r2, [pc, #616]	; (8003350 <UART_SetConfig+0x2e4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d121      	bne.n	8003130 <UART_SetConfig+0xc4>
 80030ec:	4b99      	ldr	r3, [pc, #612]	; (8003354 <UART_SetConfig+0x2e8>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d817      	bhi.n	8003128 <UART_SetConfig+0xbc>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0x94>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003111 	.word	0x08003111
 8003104:	0800311d 	.word	0x0800311d
 8003108:	08003123 	.word	0x08003123
 800310c:	08003117 	.word	0x08003117
 8003110:	2301      	movs	r3, #1
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e0b2      	b.n	800327c <UART_SetConfig+0x210>
 8003116:	2302      	movs	r3, #2
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e0af      	b.n	800327c <UART_SetConfig+0x210>
 800311c:	2304      	movs	r3, #4
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e0ac      	b.n	800327c <UART_SetConfig+0x210>
 8003122:	2308      	movs	r3, #8
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e0a9      	b.n	800327c <UART_SetConfig+0x210>
 8003128:	2310      	movs	r3, #16
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	bf00      	nop
 800312e:	e0a5      	b.n	800327c <UART_SetConfig+0x210>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a88      	ldr	r2, [pc, #544]	; (8003358 <UART_SetConfig+0x2ec>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d123      	bne.n	8003182 <UART_SetConfig+0x116>
 800313a:	4b86      	ldr	r3, [pc, #536]	; (8003354 <UART_SetConfig+0x2e8>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d012      	beq.n	800316e <UART_SetConfig+0x102>
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d802      	bhi.n	8003154 <UART_SetConfig+0xe8>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <UART_SetConfig+0xf6>
 8003152:	e012      	b.n	800317a <UART_SetConfig+0x10e>
 8003154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003158:	d00c      	beq.n	8003174 <UART_SetConfig+0x108>
 800315a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800315e:	d003      	beq.n	8003168 <UART_SetConfig+0xfc>
 8003160:	e00b      	b.n	800317a <UART_SetConfig+0x10e>
 8003162:	2300      	movs	r3, #0
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e089      	b.n	800327c <UART_SetConfig+0x210>
 8003168:	2302      	movs	r3, #2
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e086      	b.n	800327c <UART_SetConfig+0x210>
 800316e:	2304      	movs	r3, #4
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e083      	b.n	800327c <UART_SetConfig+0x210>
 8003174:	2308      	movs	r3, #8
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e080      	b.n	800327c <UART_SetConfig+0x210>
 800317a:	2310      	movs	r3, #16
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	bf00      	nop
 8003180:	e07c      	b.n	800327c <UART_SetConfig+0x210>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a75      	ldr	r2, [pc, #468]	; (800335c <UART_SetConfig+0x2f0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d123      	bne.n	80031d4 <UART_SetConfig+0x168>
 800318c:	4b71      	ldr	r3, [pc, #452]	; (8003354 <UART_SetConfig+0x2e8>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003198:	d012      	beq.n	80031c0 <UART_SetConfig+0x154>
 800319a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800319e:	d802      	bhi.n	80031a6 <UART_SetConfig+0x13a>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <UART_SetConfig+0x148>
 80031a4:	e012      	b.n	80031cc <UART_SetConfig+0x160>
 80031a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031aa:	d00c      	beq.n	80031c6 <UART_SetConfig+0x15a>
 80031ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031b0:	d003      	beq.n	80031ba <UART_SetConfig+0x14e>
 80031b2:	e00b      	b.n	80031cc <UART_SetConfig+0x160>
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e060      	b.n	800327c <UART_SetConfig+0x210>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e05d      	b.n	800327c <UART_SetConfig+0x210>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e05a      	b.n	800327c <UART_SetConfig+0x210>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e057      	b.n	800327c <UART_SetConfig+0x210>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	bf00      	nop
 80031d2:	e053      	b.n	800327c <UART_SetConfig+0x210>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a61      	ldr	r2, [pc, #388]	; (8003360 <UART_SetConfig+0x2f4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d123      	bne.n	8003226 <UART_SetConfig+0x1ba>
 80031de:	4b5d      	ldr	r3, [pc, #372]	; (8003354 <UART_SetConfig+0x2e8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ea:	d012      	beq.n	8003212 <UART_SetConfig+0x1a6>
 80031ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f0:	d802      	bhi.n	80031f8 <UART_SetConfig+0x18c>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <UART_SetConfig+0x19a>
 80031f6:	e012      	b.n	800321e <UART_SetConfig+0x1b2>
 80031f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031fc:	d00c      	beq.n	8003218 <UART_SetConfig+0x1ac>
 80031fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003202:	d003      	beq.n	800320c <UART_SetConfig+0x1a0>
 8003204:	e00b      	b.n	800321e <UART_SetConfig+0x1b2>
 8003206:	2300      	movs	r3, #0
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e037      	b.n	800327c <UART_SetConfig+0x210>
 800320c:	2302      	movs	r3, #2
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e034      	b.n	800327c <UART_SetConfig+0x210>
 8003212:	2304      	movs	r3, #4
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e031      	b.n	800327c <UART_SetConfig+0x210>
 8003218:	2308      	movs	r3, #8
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e02e      	b.n	800327c <UART_SetConfig+0x210>
 800321e:	2310      	movs	r3, #16
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	bf00      	nop
 8003224:	e02a      	b.n	800327c <UART_SetConfig+0x210>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a4e      	ldr	r2, [pc, #312]	; (8003364 <UART_SetConfig+0x2f8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d123      	bne.n	8003278 <UART_SetConfig+0x20c>
 8003230:	4b48      	ldr	r3, [pc, #288]	; (8003354 <UART_SetConfig+0x2e8>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323c:	d012      	beq.n	8003264 <UART_SetConfig+0x1f8>
 800323e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003242:	d802      	bhi.n	800324a <UART_SetConfig+0x1de>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <UART_SetConfig+0x1ec>
 8003248:	e012      	b.n	8003270 <UART_SetConfig+0x204>
 800324a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800324e:	d00c      	beq.n	800326a <UART_SetConfig+0x1fe>
 8003250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003254:	d003      	beq.n	800325e <UART_SetConfig+0x1f2>
 8003256:	e00b      	b.n	8003270 <UART_SetConfig+0x204>
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e00e      	b.n	800327c <UART_SetConfig+0x210>
 800325e:	2302      	movs	r3, #2
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e00b      	b.n	800327c <UART_SetConfig+0x210>
 8003264:	2304      	movs	r3, #4
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e008      	b.n	800327c <UART_SetConfig+0x210>
 800326a:	2308      	movs	r3, #8
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e005      	b.n	800327c <UART_SetConfig+0x210>
 8003270:	2310      	movs	r3, #16
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	bf00      	nop
 8003276:	e001      	b.n	800327c <UART_SetConfig+0x210>
 8003278:	2310      	movs	r3, #16
 800327a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003284:	f040 8090 	bne.w	80033a8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003288:	7ffb      	ldrb	r3, [r7, #31]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d86c      	bhi.n	8003368 <UART_SetConfig+0x2fc>
 800328e:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <UART_SetConfig+0x228>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032d9 	.word	0x080032d9
 800329c:	080032f9 	.word	0x080032f9
 80032a0:	08003369 	.word	0x08003369
 80032a4:	08003315 	.word	0x08003315
 80032a8:	08003369 	.word	0x08003369
 80032ac:	08003369 	.word	0x08003369
 80032b0:	08003369 	.word	0x08003369
 80032b4:	08003335 	.word	0x08003335
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7ff fc28 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 80032bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	005a      	lsls	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	61bb      	str	r3, [r7, #24]
        break;
 80032d6:	e04a      	b.n	800336e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7ff fc3a 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 80032dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	005a      	lsls	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	61bb      	str	r3, [r7, #24]
        break;
 80032f6:	e03a      	b.n	800336e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003302:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6852      	ldr	r2, [r2, #4]
 800330a:	fbb3 f3f2 	udiv	r3, r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	61bb      	str	r3, [r7, #24]
        break;
 8003312:	e02c      	b.n	800336e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003314:	f7ff fb84 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8003318:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	005a      	lsls	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	441a      	add	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	61bb      	str	r3, [r7, #24]
        break;
 8003332:	e01c      	b.n	800336e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	61bb      	str	r3, [r7, #24]
        break;
 800334a:	e010      	b.n	800336e <UART_SetConfig+0x302>
 800334c:	efff69f3 	.word	0xefff69f3
 8003350:	40013800 	.word	0x40013800
 8003354:	40021000 	.word	0x40021000
 8003358:	40004400 	.word	0x40004400
 800335c:	40004800 	.word	0x40004800
 8003360:	40004c00 	.word	0x40004c00
 8003364:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	75fb      	strb	r3, [r7, #23]
        break;
 800336c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b0f      	cmp	r3, #15
 8003372:	d916      	bls.n	80033a2 <UART_SetConfig+0x336>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337a:	d212      	bcs.n	80033a2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f023 030f 	bic.w	r3, r3, #15
 8003384:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	b29b      	uxth	r3, r3
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	b29a      	uxth	r2, r3
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	4313      	orrs	r3, r2
 8003396:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	897a      	ldrh	r2, [r7, #10]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	e072      	b.n	8003488 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
 80033a6:	e06f      	b.n	8003488 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d85b      	bhi.n	8003466 <UART_SetConfig+0x3fa>
 80033ae:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x348>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	08003415 	.word	0x08003415
 80033c0:	08003467 	.word	0x08003467
 80033c4:	08003431 	.word	0x08003431
 80033c8:	08003467 	.word	0x08003467
 80033cc:	08003467 	.word	0x08003467
 80033d0:	08003467 	.word	0x08003467
 80033d4:	0800344f 	.word	0x0800344f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff fb98 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 80033dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085a      	lsrs	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	61bb      	str	r3, [r7, #24]
        break;
 80033f4:	e03a      	b.n	800346c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f6:	f7ff fbab 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 80033fa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	085a      	lsrs	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	61bb      	str	r3, [r7, #24]
        break;
 8003412:	e02b      	b.n	800346c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800341e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6852      	ldr	r2, [r2, #4]
 8003426:	fbb3 f3f2 	udiv	r3, r3, r2
 800342a:	b29b      	uxth	r3, r3
 800342c:	61bb      	str	r3, [r7, #24]
        break;
 800342e:	e01d      	b.n	800346c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003430:	f7ff faf6 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8003434:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	085a      	lsrs	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	441a      	add	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	b29b      	uxth	r3, r3
 800344a:	61bb      	str	r3, [r7, #24]
        break;
 800344c:	e00e      	b.n	800346c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	b29b      	uxth	r3, r3
 8003462:	61bb      	str	r3, [r7, #24]
        break;
 8003464:	e002      	b.n	800346c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
        break;
 800346a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d908      	bls.n	8003484 <UART_SetConfig+0x418>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d204      	bcs.n	8003484 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	e001      	b.n	8003488 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop

080034a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01a      	beq.n	80035b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359e:	d10a      	bne.n	80035b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035f2:	f7fd feef 	bl	80013d4 <HAL_GetTick>
 80035f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b08      	cmp	r3, #8
 8003604:	d10e      	bne.n	8003624 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003606:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f82a 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e020      	b.n	8003666 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d10e      	bne.n	8003650 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003632:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f814 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e00a      	b.n	8003666 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367e:	e05d      	b.n	800373c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d059      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fd fea4 	bl	80013d4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <UART_WaitOnFlagUntilTimeout+0x30>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11b      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e042      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d02b      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f2:	d123      	bne.n	800373c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800370c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e00f      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	429a      	cmp	r2, r3
 8003758:	d092      	beq.n	8003680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <_Znwj>:
 8003764:	b510      	push	{r4, lr}
 8003766:	2800      	cmp	r0, #0
 8003768:	bf14      	ite	ne
 800376a:	4604      	movne	r4, r0
 800376c:	2401      	moveq	r4, #1
 800376e:	4620      	mov	r0, r4
 8003770:	f000 f898 	bl	80038a4 <malloc>
 8003774:	b930      	cbnz	r0, 8003784 <_Znwj+0x20>
 8003776:	f000 f807 	bl	8003788 <_ZSt15get_new_handlerv>
 800377a:	b908      	cbnz	r0, 8003780 <_Znwj+0x1c>
 800377c:	f000 f861 	bl	8003842 <abort>
 8003780:	4780      	blx	r0
 8003782:	e7f4      	b.n	800376e <_Znwj+0xa>
 8003784:	bd10      	pop	{r4, pc}
	...

08003788 <_ZSt15get_new_handlerv>:
 8003788:	4b02      	ldr	r3, [pc, #8]	; (8003794 <_ZSt15get_new_handlerv+0xc>)
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	f3bf 8f5b 	dmb	ish
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000110 	.word	0x20000110

08003798 <sqrtf>:
 8003798:	b510      	push	{r4, lr}
 800379a:	ed2d 8b02 	vpush	{d8}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	eeb0 8a40 	vmov.f32	s16, s0
 80037a4:	f000 f848 	bl	8003838 <__ieee754_sqrtf>
 80037a8:	4b21      	ldr	r3, [pc, #132]	; (8003830 <sqrtf+0x98>)
 80037aa:	f993 4000 	ldrsb.w	r4, [r3]
 80037ae:	1c63      	adds	r3, r4, #1
 80037b0:	d02c      	beq.n	800380c <sqrtf+0x74>
 80037b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	d627      	bvs.n	800380c <sqrtf+0x74>
 80037bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80037c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c4:	d522      	bpl.n	800380c <sqrtf+0x74>
 80037c6:	2301      	movs	r3, #1
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <sqrtf+0x9c>)
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	ee18 0a10 	vmov	r0, s16
 80037d2:	2300      	movs	r3, #0
 80037d4:	9308      	str	r3, [sp, #32]
 80037d6:	f7fc fe63 	bl	80004a0 <__aeabi_f2d>
 80037da:	2200      	movs	r2, #0
 80037dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037e4:	2300      	movs	r3, #0
 80037e6:	b9ac      	cbnz	r4, 8003814 <sqrtf+0x7c>
 80037e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80037ec:	4668      	mov	r0, sp
 80037ee:	f000 f826 	bl	800383e <matherr>
 80037f2:	b1b8      	cbz	r0, 8003824 <sqrtf+0x8c>
 80037f4:	9b08      	ldr	r3, [sp, #32]
 80037f6:	b11b      	cbz	r3, 8003800 <sqrtf+0x68>
 80037f8:	f000 f82a 	bl	8003850 <__errno>
 80037fc:	9b08      	ldr	r3, [sp, #32]
 80037fe:	6003      	str	r3, [r0, #0]
 8003800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003804:	f7fd f8b6 	bl	8000974 <__aeabi_d2f>
 8003808:	ee00 0a10 	vmov	s0, r0
 800380c:	b00a      	add	sp, #40	; 0x28
 800380e:	ecbd 8b02 	vpop	{d8}
 8003812:	bd10      	pop	{r4, pc}
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fc ffc4 	bl	80007a4 <__aeabi_ddiv>
 800381c:	2c02      	cmp	r4, #2
 800381e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003822:	d1e3      	bne.n	80037ec <sqrtf+0x54>
 8003824:	f000 f814 	bl	8003850 <__errno>
 8003828:	2321      	movs	r3, #33	; 0x21
 800382a:	6003      	str	r3, [r0, #0]
 800382c:	e7e2      	b.n	80037f4 <sqrtf+0x5c>
 800382e:	bf00      	nop
 8003830:	20000009 	.word	0x20000009
 8003834:	08003a80 	.word	0x08003a80

08003838 <__ieee754_sqrtf>:
 8003838:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800383c:	4770      	bx	lr

0800383e <matherr>:
 800383e:	2000      	movs	r0, #0
 8003840:	4770      	bx	lr

08003842 <abort>:
 8003842:	b508      	push	{r3, lr}
 8003844:	2006      	movs	r0, #6
 8003846:	f000 f8cf 	bl	80039e8 <raise>
 800384a:	2001      	movs	r0, #1
 800384c:	f7fd fcf2 	bl	8001234 <_exit>

08003850 <__errno>:
 8003850:	4b01      	ldr	r3, [pc, #4]	; (8003858 <__errno+0x8>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000000c 	.word	0x2000000c

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4e0d      	ldr	r6, [pc, #52]	; (8003894 <__libc_init_array+0x38>)
 8003860:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003862:	1ba4      	subs	r4, r4, r6
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	2500      	movs	r5, #0
 8003868:	42a5      	cmp	r5, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	4e0b      	ldr	r6, [pc, #44]	; (800389c <__libc_init_array+0x40>)
 800386e:	4c0c      	ldr	r4, [pc, #48]	; (80038a0 <__libc_init_array+0x44>)
 8003870:	f000 f8d8 	bl	8003a24 <_init>
 8003874:	1ba4      	subs	r4, r4, r6
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	2500      	movs	r5, #0
 800387a:	42a5      	cmp	r5, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003884:	4798      	blx	r3
 8003886:	3501      	adds	r5, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800388e:	4798      	blx	r3
 8003890:	3501      	adds	r5, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08003a88 	.word	0x08003a88
 8003898:	08003a88 	.word	0x08003a88
 800389c:	08003a88 	.word	0x08003a88
 80038a0:	08003a8c 	.word	0x08003a8c

080038a4 <malloc>:
 80038a4:	4b02      	ldr	r3, [pc, #8]	; (80038b0 <malloc+0xc>)
 80038a6:	4601      	mov	r1, r0
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	f000 b80b 	b.w	80038c4 <_malloc_r>
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c

080038b4 <memset>:
 80038b4:	4402      	add	r2, r0
 80038b6:	4603      	mov	r3, r0
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d100      	bne.n	80038be <memset+0xa>
 80038bc:	4770      	bx	lr
 80038be:	f803 1b01 	strb.w	r1, [r3], #1
 80038c2:	e7f9      	b.n	80038b8 <memset+0x4>

080038c4 <_malloc_r>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	1ccd      	adds	r5, r1, #3
 80038c8:	f025 0503 	bic.w	r5, r5, #3
 80038cc:	3508      	adds	r5, #8
 80038ce:	2d0c      	cmp	r5, #12
 80038d0:	bf38      	it	cc
 80038d2:	250c      	movcc	r5, #12
 80038d4:	2d00      	cmp	r5, #0
 80038d6:	4606      	mov	r6, r0
 80038d8:	db01      	blt.n	80038de <_malloc_r+0x1a>
 80038da:	42a9      	cmp	r1, r5
 80038dc:	d903      	bls.n	80038e6 <_malloc_r+0x22>
 80038de:	230c      	movs	r3, #12
 80038e0:	6033      	str	r3, [r6, #0]
 80038e2:	2000      	movs	r0, #0
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
 80038e6:	f000 f89b 	bl	8003a20 <__malloc_lock>
 80038ea:	4a21      	ldr	r2, [pc, #132]	; (8003970 <_malloc_r+0xac>)
 80038ec:	6814      	ldr	r4, [r2, #0]
 80038ee:	4621      	mov	r1, r4
 80038f0:	b991      	cbnz	r1, 8003918 <_malloc_r+0x54>
 80038f2:	4c20      	ldr	r4, [pc, #128]	; (8003974 <_malloc_r+0xb0>)
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	b91b      	cbnz	r3, 8003900 <_malloc_r+0x3c>
 80038f8:	4630      	mov	r0, r6
 80038fa:	f000 f83d 	bl	8003978 <_sbrk_r>
 80038fe:	6020      	str	r0, [r4, #0]
 8003900:	4629      	mov	r1, r5
 8003902:	4630      	mov	r0, r6
 8003904:	f000 f838 	bl	8003978 <_sbrk_r>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	d124      	bne.n	8003956 <_malloc_r+0x92>
 800390c:	230c      	movs	r3, #12
 800390e:	6033      	str	r3, [r6, #0]
 8003910:	4630      	mov	r0, r6
 8003912:	f000 f886 	bl	8003a22 <__malloc_unlock>
 8003916:	e7e4      	b.n	80038e2 <_malloc_r+0x1e>
 8003918:	680b      	ldr	r3, [r1, #0]
 800391a:	1b5b      	subs	r3, r3, r5
 800391c:	d418      	bmi.n	8003950 <_malloc_r+0x8c>
 800391e:	2b0b      	cmp	r3, #11
 8003920:	d90f      	bls.n	8003942 <_malloc_r+0x7e>
 8003922:	600b      	str	r3, [r1, #0]
 8003924:	50cd      	str	r5, [r1, r3]
 8003926:	18cc      	adds	r4, r1, r3
 8003928:	4630      	mov	r0, r6
 800392a:	f000 f87a 	bl	8003a22 <__malloc_unlock>
 800392e:	f104 000b 	add.w	r0, r4, #11
 8003932:	1d23      	adds	r3, r4, #4
 8003934:	f020 0007 	bic.w	r0, r0, #7
 8003938:	1ac3      	subs	r3, r0, r3
 800393a:	d0d3      	beq.n	80038e4 <_malloc_r+0x20>
 800393c:	425a      	negs	r2, r3
 800393e:	50e2      	str	r2, [r4, r3]
 8003940:	e7d0      	b.n	80038e4 <_malloc_r+0x20>
 8003942:	428c      	cmp	r4, r1
 8003944:	684b      	ldr	r3, [r1, #4]
 8003946:	bf16      	itet	ne
 8003948:	6063      	strne	r3, [r4, #4]
 800394a:	6013      	streq	r3, [r2, #0]
 800394c:	460c      	movne	r4, r1
 800394e:	e7eb      	b.n	8003928 <_malloc_r+0x64>
 8003950:	460c      	mov	r4, r1
 8003952:	6849      	ldr	r1, [r1, #4]
 8003954:	e7cc      	b.n	80038f0 <_malloc_r+0x2c>
 8003956:	1cc4      	adds	r4, r0, #3
 8003958:	f024 0403 	bic.w	r4, r4, #3
 800395c:	42a0      	cmp	r0, r4
 800395e:	d005      	beq.n	800396c <_malloc_r+0xa8>
 8003960:	1a21      	subs	r1, r4, r0
 8003962:	4630      	mov	r0, r6
 8003964:	f000 f808 	bl	8003978 <_sbrk_r>
 8003968:	3001      	adds	r0, #1
 800396a:	d0cf      	beq.n	800390c <_malloc_r+0x48>
 800396c:	6025      	str	r5, [r4, #0]
 800396e:	e7db      	b.n	8003928 <_malloc_r+0x64>
 8003970:	20000114 	.word	0x20000114
 8003974:	20000118 	.word	0x20000118

08003978 <_sbrk_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4c06      	ldr	r4, [pc, #24]	; (8003994 <_sbrk_r+0x1c>)
 800397c:	2300      	movs	r3, #0
 800397e:	4605      	mov	r5, r0
 8003980:	4608      	mov	r0, r1
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	f7fd fc60 	bl	8001248 <_sbrk>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_sbrk_r+0x1a>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	b103      	cbz	r3, 8003992 <_sbrk_r+0x1a>
 8003990:	602b      	str	r3, [r5, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	20000120 	.word	0x20000120

08003998 <_raise_r>:
 8003998:	291f      	cmp	r1, #31
 800399a:	b538      	push	{r3, r4, r5, lr}
 800399c:	4604      	mov	r4, r0
 800399e:	460d      	mov	r5, r1
 80039a0:	d904      	bls.n	80039ac <_raise_r+0x14>
 80039a2:	2316      	movs	r3, #22
 80039a4:	6003      	str	r3, [r0, #0]
 80039a6:	f04f 30ff 	mov.w	r0, #4294967295
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80039ae:	b112      	cbz	r2, 80039b6 <_raise_r+0x1e>
 80039b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80039b4:	b94b      	cbnz	r3, 80039ca <_raise_r+0x32>
 80039b6:	4620      	mov	r0, r4
 80039b8:	f000 f830 	bl	8003a1c <_getpid_r>
 80039bc:	462a      	mov	r2, r5
 80039be:	4601      	mov	r1, r0
 80039c0:	4620      	mov	r0, r4
 80039c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039c6:	f000 b817 	b.w	80039f8 <_kill_r>
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d00a      	beq.n	80039e4 <_raise_r+0x4c>
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	d103      	bne.n	80039da <_raise_r+0x42>
 80039d2:	2316      	movs	r3, #22
 80039d4:	6003      	str	r3, [r0, #0]
 80039d6:	2001      	movs	r0, #1
 80039d8:	e7e7      	b.n	80039aa <_raise_r+0x12>
 80039da:	2400      	movs	r4, #0
 80039dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80039e0:	4628      	mov	r0, r5
 80039e2:	4798      	blx	r3
 80039e4:	2000      	movs	r0, #0
 80039e6:	e7e0      	b.n	80039aa <_raise_r+0x12>

080039e8 <raise>:
 80039e8:	4b02      	ldr	r3, [pc, #8]	; (80039f4 <raise+0xc>)
 80039ea:	4601      	mov	r1, r0
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	f7ff bfd3 	b.w	8003998 <_raise_r>
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c

080039f8 <_kill_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4c07      	ldr	r4, [pc, #28]	; (8003a18 <_kill_r+0x20>)
 80039fc:	2300      	movs	r3, #0
 80039fe:	4605      	mov	r5, r0
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	f7fd fc05 	bl	8001214 <_kill>
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	d102      	bne.n	8003a14 <_kill_r+0x1c>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	b103      	cbz	r3, 8003a14 <_kill_r+0x1c>
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	bd38      	pop	{r3, r4, r5, pc}
 8003a16:	bf00      	nop
 8003a18:	20000120 	.word	0x20000120

08003a1c <_getpid_r>:
 8003a1c:	f7fd bbf2 	b.w	8001204 <_getpid>

08003a20 <__malloc_lock>:
 8003a20:	4770      	bx	lr

08003a22 <__malloc_unlock>:
 8003a22:	4770      	bx	lr

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr
